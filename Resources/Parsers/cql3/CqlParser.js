// Generated from Resources/Parsers/cql3/CqlParser.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import CqlParserListener from './CqlParserListener.js';
const serializedATN = [4,1,176,2308,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,7,219,
2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,2,225,7,225,
2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,2,231,7,231,
2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,2,237,7,237,
2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,2,243,7,243,
2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,2,249,7,249,
2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,
2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,
2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,
2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
1,0,3,0,562,8,0,1,0,3,0,565,8,0,1,0,1,0,1,1,1,1,3,1,571,8,1,1,1,1,1,1,1,
5,1,576,8,1,10,1,12,1,579,9,1,1,1,1,1,3,1,583,8,1,1,1,3,1,586,8,1,1,1,3,
1,589,8,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,632,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,3,7,649,8,7,1,7,3,7,652,8,7,1,8,1,8,1,8,1,
8,1,8,3,8,659,8,8,1,8,1,8,1,8,3,8,664,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
10,1,10,3,10,675,8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,685,8,
10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,
700,8,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,711,8,11,1,11,
1,11,1,11,3,11,716,8,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,725,8,11,
1,12,1,12,1,12,3,12,730,8,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,738,8,12,
1,13,1,13,1,13,3,13,743,8,13,1,13,1,13,3,13,747,8,13,1,14,1,14,1,14,3,14,
752,8,14,1,14,1,14,1,14,3,14,757,8,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
1,15,1,15,1,15,1,15,5,15,770,8,15,10,15,12,15,773,9,15,1,16,1,16,1,16,3,
16,778,8,16,1,16,1,16,1,16,3,16,783,8,16,1,16,1,16,1,16,1,16,1,17,1,17,1,
17,1,17,3,17,793,8,17,1,17,1,17,1,17,3,17,798,8,17,1,17,1,17,1,17,1,17,1,
17,1,17,1,17,1,17,3,17,808,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
1,17,1,17,3,17,820,8,17,1,18,1,18,1,18,1,18,1,18,3,18,827,8,18,1,19,1,19,
1,19,1,19,5,19,833,8,19,10,19,12,19,836,9,19,1,20,1,20,1,20,1,20,1,20,1,
21,1,21,1,21,1,21,1,21,1,21,3,21,849,8,21,1,22,1,22,1,22,3,22,854,8,22,1,
22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,866,8,22,1,23,1,23,
3,23,870,8,23,1,23,1,23,3,23,874,8,23,1,23,1,23,1,23,3,23,879,8,23,1,23,
1,23,1,23,3,23,884,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,
1,24,1,25,1,25,1,25,1,25,5,25,901,8,25,10,25,12,25,904,9,25,1,26,1,26,1,
26,1,26,3,26,910,8,26,1,26,1,26,1,26,1,26,1,27,1,27,3,27,918,8,27,1,27,1,
27,3,27,922,8,27,1,27,1,27,1,27,3,27,927,8,27,1,27,1,27,1,27,1,27,1,27,1,
27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,3,28,946,8,28,
1,29,1,29,1,29,1,29,1,29,5,29,953,8,29,10,29,12,29,956,9,29,1,29,1,29,1,
30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,5,31,970,8,31,10,31,12,31,
973,9,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,5,32,982,8,32,10,32,12,32,985,
9,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,3,34,998,8,34,
1,35,1,35,1,35,1,36,1,36,3,36,1005,8,36,1,37,1,37,1,37,1,37,1,37,3,37,1012,
8,37,1,37,1,37,1,37,1,38,1,38,1,38,3,38,1020,8,38,1,39,1,39,1,39,1,40,1,
40,1,40,1,40,5,40,1029,8,40,10,40,12,40,1032,9,40,1,41,1,41,1,41,1,41,1,
42,1,42,1,42,1,42,1,42,1,42,1,42,5,42,1045,8,42,10,42,12,42,1048,9,42,1,
43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,3,44,1060,8,44,1,44,1,44,
1,44,1,45,1,45,1,45,1,45,1,45,3,45,1070,8,45,1,46,1,46,1,46,1,47,1,47,1,
47,1,47,1,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,50,5,50,
1091,8,50,10,50,12,50,1094,9,50,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,
1,52,5,52,1105,8,52,10,52,12,52,1108,9,52,1,53,1,53,1,53,1,53,3,53,1114,
8,53,1,54,1,54,1,54,1,54,1,54,5,54,1121,8,54,10,54,12,54,1124,9,54,1,55,
1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
55,3,55,1142,8,55,1,56,1,56,1,56,1,56,1,56,1,56,3,56,1150,8,56,1,56,1,56,
1,56,1,56,3,56,1156,8,56,1,57,1,57,1,57,3,57,1161,8,57,1,57,1,57,1,58,1,
58,1,58,3,58,1168,8,58,1,58,1,58,1,58,3,58,1173,8,58,1,58,1,58,1,59,1,59,
1,59,1,59,3,59,1181,8,59,1,59,1,59,1,59,3,59,1186,8,59,1,59,1,59,1,60,1,
60,1,60,3,60,1193,8,60,1,60,1,60,1,60,3,60,1198,8,60,1,60,1,60,1,61,1,61,
1,61,3,61,1205,8,61,1,61,1,61,1,61,3,61,1210,8,61,1,61,1,61,1,62,1,62,1,
62,3,62,1217,8,62,1,62,1,62,1,62,1,62,1,62,3,62,1224,8,62,1,62,1,62,1,63,
1,63,1,63,3,63,1231,8,63,1,63,1,63,1,64,1,64,1,64,3,64,1238,8,64,1,64,1,
64,1,64,3,64,1243,8,64,1,64,1,64,1,65,1,65,1,65,3,65,1250,8,65,1,65,1,65,
1,66,1,66,1,66,3,66,1257,8,66,1,66,1,66,1,66,3,66,1262,8,66,1,66,1,66,1,
67,1,67,1,67,3,67,1269,8,67,1,67,1,67,1,67,3,67,1274,8,67,1,67,1,67,1,67,
1,67,1,67,3,67,1281,8,67,1,68,1,68,3,68,1285,8,68,1,68,3,68,1288,8,68,1,
69,1,69,1,69,1,69,1,69,1,69,3,69,1296,8,69,1,69,1,69,1,70,1,70,1,70,1,70,
5,70,1304,8,70,10,70,12,70,1307,9,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
1,71,3,71,1317,8,71,1,72,1,72,1,73,1,73,3,73,1323,8,73,1,74,1,74,1,74,1,
74,1,74,5,74,1330,8,74,10,74,12,74,1333,9,74,1,74,1,74,1,75,1,75,1,75,1,
75,1,76,1,76,1,77,1,77,3,77,1345,8,77,1,78,1,78,1,78,1,78,5,78,1351,8,78,
10,78,12,78,1354,9,78,1,78,1,78,1,78,3,78,1359,8,78,1,79,1,79,1,79,3,79,
1364,8,79,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,3,
82,1378,8,82,1,83,1,83,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,1,85,
1,86,1,86,1,86,1,86,5,86,1396,8,86,10,86,12,86,1399,9,86,1,87,1,87,1,87,
1,87,5,87,1405,8,87,10,87,12,87,1408,9,87,1,88,1,88,1,89,1,89,1,90,1,90,
1,90,1,91,1,91,3,91,1419,8,91,1,91,1,91,3,91,1423,8,91,1,92,1,92,3,92,1427,
8,92,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,1441,
8,93,1,94,1,94,1,94,1,94,5,94,1447,8,94,10,94,12,94,1450,9,94,1,95,1,95,
1,95,1,95,1,95,1,95,3,95,1458,8,95,1,96,1,96,1,96,1,96,1,97,1,97,1,97,1,
98,1,98,3,98,1469,8,98,1,98,1,98,1,98,3,98,1474,8,98,1,98,1,98,1,99,1,99,
1,99,3,99,1481,8,99,1,99,3,99,1484,8,99,1,99,1,99,1,99,1,99,3,99,1490,8,
99,1,99,1,99,1,99,1,99,1,99,1,100,1,100,3,100,1499,8,100,1,101,1,101,1,101,
1,101,3,101,1505,8,101,1,102,1,102,1,102,1,102,1,102,1,103,1,103,1,103,1,
103,1,103,1,104,1,104,1,104,1,104,1,104,1,105,3,105,1523,8,105,1,105,1,105,
3,105,1527,8,105,1,105,1,105,3,105,1531,8,105,1,105,1,105,1,105,3,105,1536,
8,105,1,106,1,106,1,106,1,106,5,106,1542,8,106,10,106,12,106,1545,9,106,
1,107,1,107,1,107,1,107,1,107,3,107,1552,8,107,1,107,1,107,3,107,1556,8,
107,1,108,3,108,1559,8,108,1,108,1,108,1,108,1,108,3,108,1565,8,108,1,108,
1,108,3,108,1569,8,108,1,108,1,108,1,108,1,108,1,108,3,108,1576,8,108,1,
109,1,109,1,109,1,110,1,110,1,110,1,110,5,110,1585,8,110,10,110,12,110,1588,
9,110,1,111,1,111,1,111,1,111,1,112,1,112,1,112,1,112,5,112,1598,8,112,10,
112,12,112,1601,9,112,1,113,1,113,1,113,1,113,1,113,1,113,3,113,1609,8,113,
1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,1656,8,113,1,
114,1,114,1,114,1,114,1,114,5,114,1663,8,114,10,114,12,114,1666,9,114,3,
114,1668,8,114,1,114,1,114,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
1,115,1,115,5,115,1682,8,115,10,115,12,115,1685,9,115,1,115,1,115,1,116,
1,116,1,116,1,116,1,116,5,116,1694,8,116,10,116,12,116,1697,9,116,1,116,
1,116,1,117,1,117,1,117,1,117,1,117,5,117,1706,8,117,10,117,12,117,1709,
9,117,1,117,1,117,1,118,3,118,1714,8,118,1,118,1,118,1,118,1,118,1,118,3,
118,1721,8,118,1,118,1,118,3,118,1725,8,118,1,118,1,118,3,118,1729,8,118,
1,118,3,118,1732,8,118,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,
119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,3,119,1750,8,119,1,120,1,120,
1,120,1,121,1,121,1,121,1,122,1,122,1,122,1,123,1,123,1,123,1,123,1,124,
1,124,1,124,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,3,125,1776,8,
125,1,126,1,126,1,126,1,126,1,127,1,127,1,127,1,127,5,127,1786,8,127,10,
127,12,127,1789,9,127,1,128,1,128,1,128,1,128,5,128,1795,8,128,10,128,12,
128,1798,9,128,1,129,1,129,1,129,1,129,1,129,3,129,1805,8,129,1,130,1,130,
3,130,1809,8,130,1,130,3,130,1812,8,130,1,130,1,130,1,130,3,130,1817,8,130,
1,130,3,130,1820,8,130,1,130,3,130,1823,8,130,1,130,3,130,1826,8,130,1,131,
1,131,1,131,1,132,1,132,1,132,1,133,1,133,1,133,1,134,1,134,1,134,1,134,
3,134,1841,8,134,1,135,1,135,1,135,1,135,1,136,1,136,1,136,3,136,1850,8,
136,1,137,1,137,1,137,1,138,1,138,1,139,1,139,3,139,1859,8,139,1,139,1,139,
1,139,5,139,1864,8,139,10,139,12,139,1867,9,139,1,140,1,140,1,140,1,140,
1,140,1,140,1,140,3,140,1876,8,140,1,140,1,140,1,140,1,140,3,140,1882,8,
140,3,140,1884,8,140,1,141,1,141,1,141,1,141,5,141,1890,8,141,10,141,12,
141,1893,9,141,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,
1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,3,142,1915,8,
142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,5,142,1924,8,142,10,142,12,
142,1927,9,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,5,142,1936,8,142,
10,142,12,142,1939,9,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,5,142,
1948,8,142,10,142,12,142,1951,9,142,1,142,1,142,1,142,1,142,1,142,1,142,
5,142,1959,8,142,10,142,12,142,1962,9,142,1,142,1,142,3,142,1966,8,142,1,
143,1,143,1,143,1,143,1,144,1,144,1,144,1,144,1,144,1,144,1,145,1,145,1,
145,1,145,1,145,1,145,1,145,3,145,1985,8,145,1,145,3,145,1988,8,145,1,146,
1,146,1,146,3,146,1993,8,146,1,146,1,146,1,146,1,146,3,146,1999,8,146,5,
146,2001,8,146,10,146,12,146,2004,9,146,1,147,1,147,1,147,1,147,1,147,1,
147,1,147,1,147,3,147,2014,8,147,1,148,1,148,1,149,1,149,1,150,1,150,1,151,
1,151,1,152,1,152,1,153,1,153,1,153,1,153,3,153,2030,8,153,1,154,1,154,1,
154,1,154,3,154,2036,8,154,1,155,1,155,1,155,1,155,3,155,2042,8,155,1,156,
1,156,3,156,2046,8,156,1,157,1,157,1,158,1,158,1,158,1,158,1,158,5,158,2055,
8,158,10,158,12,158,2058,9,158,1,158,1,158,1,159,1,159,3,159,2064,8,159,
1,160,1,160,1,161,1,161,1,162,1,162,1,163,1,163,1,164,1,164,1,165,1,165,
1,166,1,166,1,167,1,167,1,168,1,168,1,169,1,169,1,170,1,170,1,171,1,171,
1,171,1,172,1,172,1,173,1,173,1,174,1,174,1,175,1,175,1,176,1,176,1,176,
1,177,1,177,1,178,1,178,1,179,1,179,1,180,1,180,1,181,1,181,1,182,1,182,
1,183,1,183,1,184,1,184,1,185,1,185,1,186,1,186,1,187,1,187,1,188,1,188,
1,189,1,189,1,190,1,190,1,191,1,191,1,192,1,192,1,193,1,193,1,194,1,194,
1,195,1,195,1,196,1,196,1,197,1,197,1,198,1,198,1,199,1,199,1,200,1,200,
1,201,1,201,1,202,1,202,1,203,1,203,1,204,1,204,1,205,1,205,1,206,1,206,
1,207,1,207,1,208,1,208,1,209,1,209,1,210,1,210,1,211,1,211,1,212,1,212,
1,213,1,213,1,214,1,214,1,215,1,215,1,216,1,216,1,217,1,217,1,218,1,218,
1,219,1,219,1,220,1,220,1,221,1,221,1,222,1,222,1,223,1,223,1,224,1,224,
1,225,1,225,1,226,1,226,1,227,1,227,1,228,1,228,1,229,1,229,1,230,1,230,
1,231,1,231,1,232,1,232,1,233,1,233,1,234,1,234,1,235,1,235,1,236,1,236,
1,237,1,237,1,238,1,238,1,239,1,239,1,240,1,240,1,241,1,241,1,242,1,242,
1,243,1,243,1,244,1,244,1,245,1,245,1,246,1,246,1,247,1,247,1,248,1,248,
1,249,1,249,1,250,1,250,1,251,1,251,1,252,1,252,1,253,1,253,1,254,1,254,
1,255,1,255,1,256,1,256,1,257,1,257,1,258,1,258,1,259,1,259,1,260,1,260,
1,261,1,261,1,262,1,262,1,263,1,263,1,264,1,264,1,265,1,265,1,266,1,266,
1,267,1,267,1,268,1,268,1,269,1,269,1,270,1,270,1,271,1,271,1,272,1,272,
1,273,1,273,1,274,1,274,1,275,1,275,1,276,1,276,1,277,1,277,1,278,1,278,
1,279,1,279,1,279,0,0,280,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,
232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,
268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,
304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,
340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,
376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,
412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,
448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,
484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,518,
520,522,524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,554,
556,558,0,5,2,0,18,18,20,20,1,0,171,175,1,0,165,166,2,0,55,55,125,125,5,
0,113,113,121,121,135,135,141,162,169,169,2296,0,561,1,0,0,0,2,577,1,0,0,
0,4,590,1,0,0,0,6,592,1,0,0,0,8,631,1,0,0,0,10,633,1,0,0,0,12,640,1,0,0,
0,14,643,1,0,0,0,16,653,1,0,0,0,18,665,1,0,0,0,20,684,1,0,0,0,22,724,1,0,
0,0,24,726,1,0,0,0,26,739,1,0,0,0,28,748,1,0,0,0,30,763,1,0,0,0,32,774,1,
0,0,0,34,788,1,0,0,0,36,821,1,0,0,0,38,828,1,0,0,0,40,837,1,0,0,0,42,848,
1,0,0,0,44,850,1,0,0,0,46,867,1,0,0,0,48,894,1,0,0,0,50,896,1,0,0,0,52,909,
1,0,0,0,54,915,1,0,0,0,56,945,1,0,0,0,58,947,1,0,0,0,60,959,1,0,0,0,62,963,
1,0,0,0,64,976,1,0,0,0,66,988,1,0,0,0,68,991,1,0,0,0,70,999,1,0,0,0,72,1004,
1,0,0,0,74,1006,1,0,0,0,76,1019,1,0,0,0,78,1021,1,0,0,0,80,1024,1,0,0,0,
82,1033,1,0,0,0,84,1037,1,0,0,0,86,1049,1,0,0,0,88,1054,1,0,0,0,90,1069,
1,0,0,0,92,1071,1,0,0,0,94,1074,1,0,0,0,96,1079,1,0,0,0,98,1083,1,0,0,0,
100,1086,1,0,0,0,102,1095,1,0,0,0,104,1098,1,0,0,0,106,1109,1,0,0,0,108,
1115,1,0,0,0,110,1141,1,0,0,0,112,1143,1,0,0,0,114,1157,1,0,0,0,116,1164,
1,0,0,0,118,1176,1,0,0,0,120,1189,1,0,0,0,122,1201,1,0,0,0,124,1213,1,0,
0,0,126,1227,1,0,0,0,128,1234,1,0,0,0,130,1246,1,0,0,0,132,1253,1,0,0,0,
134,1265,1,0,0,0,136,1282,1,0,0,0,138,1289,1,0,0,0,140,1299,1,0,0,0,142,
1316,1,0,0,0,144,1318,1,0,0,0,146,1322,1,0,0,0,148,1324,1,0,0,0,150,1336,
1,0,0,0,152,1340,1,0,0,0,154,1344,1,0,0,0,156,1346,1,0,0,0,158,1360,1,0,
0,0,160,1365,1,0,0,0,162,1368,1,0,0,0,164,1377,1,0,0,0,166,1379,1,0,0,0,
168,1381,1,0,0,0,170,1385,1,0,0,0,172,1391,1,0,0,0,174,1400,1,0,0,0,176,
1409,1,0,0,0,178,1411,1,0,0,0,180,1413,1,0,0,0,182,1416,1,0,0,0,184,1426,
1,0,0,0,186,1428,1,0,0,0,188,1442,1,0,0,0,190,1457,1,0,0,0,192,1459,1,0,
0,0,194,1463,1,0,0,0,196,1466,1,0,0,0,198,1477,1,0,0,0,200,1498,1,0,0,0,
202,1504,1,0,0,0,204,1506,1,0,0,0,206,1511,1,0,0,0,208,1516,1,0,0,0,210,
1522,1,0,0,0,212,1537,1,0,0,0,214,1555,1,0,0,0,216,1558,1,0,0,0,218,1577,
1,0,0,0,220,1580,1,0,0,0,222,1589,1,0,0,0,224,1593,1,0,0,0,226,1655,1,0,
0,0,228,1657,1,0,0,0,230,1671,1,0,0,0,232,1688,1,0,0,0,234,1700,1,0,0,0,
236,1713,1,0,0,0,238,1749,1,0,0,0,240,1751,1,0,0,0,242,1754,1,0,0,0,244,
1757,1,0,0,0,246,1760,1,0,0,0,248,1764,1,0,0,0,250,1775,1,0,0,0,252,1777,
1,0,0,0,254,1781,1,0,0,0,256,1790,1,0,0,0,258,1804,1,0,0,0,260,1806,1,0,
0,0,262,1827,1,0,0,0,264,1830,1,0,0,0,266,1833,1,0,0,0,268,1840,1,0,0,0,
270,1842,1,0,0,0,272,1846,1,0,0,0,274,1851,1,0,0,0,276,1854,1,0,0,0,278,
1858,1,0,0,0,280,1883,1,0,0,0,282,1885,1,0,0,0,284,1965,1,0,0,0,286,1967,
1,0,0,0,288,1971,1,0,0,0,290,1987,1,0,0,0,292,1992,1,0,0,0,294,2013,1,0,
0,0,296,2015,1,0,0,0,298,2017,1,0,0,0,300,2019,1,0,0,0,302,2021,1,0,0,0,
304,2023,1,0,0,0,306,2029,1,0,0,0,308,2035,1,0,0,0,310,2041,1,0,0,0,312,
2043,1,0,0,0,314,2047,1,0,0,0,316,2049,1,0,0,0,318,2063,1,0,0,0,320,2065,
1,0,0,0,322,2067,1,0,0,0,324,2069,1,0,0,0,326,2071,1,0,0,0,328,2073,1,0,
0,0,330,2075,1,0,0,0,332,2077,1,0,0,0,334,2079,1,0,0,0,336,2081,1,0,0,0,
338,2083,1,0,0,0,340,2085,1,0,0,0,342,2087,1,0,0,0,344,2090,1,0,0,0,346,
2092,1,0,0,0,348,2094,1,0,0,0,350,2096,1,0,0,0,352,2098,1,0,0,0,354,2101,
1,0,0,0,356,2103,1,0,0,0,358,2105,1,0,0,0,360,2107,1,0,0,0,362,2109,1,0,
0,0,364,2111,1,0,0,0,366,2113,1,0,0,0,368,2115,1,0,0,0,370,2117,1,0,0,0,
372,2119,1,0,0,0,374,2121,1,0,0,0,376,2123,1,0,0,0,378,2125,1,0,0,0,380,
2127,1,0,0,0,382,2129,1,0,0,0,384,2131,1,0,0,0,386,2133,1,0,0,0,388,2135,
1,0,0,0,390,2137,1,0,0,0,392,2139,1,0,0,0,394,2141,1,0,0,0,396,2143,1,0,
0,0,398,2145,1,0,0,0,400,2147,1,0,0,0,402,2149,1,0,0,0,404,2151,1,0,0,0,
406,2153,1,0,0,0,408,2155,1,0,0,0,410,2157,1,0,0,0,412,2159,1,0,0,0,414,
2161,1,0,0,0,416,2163,1,0,0,0,418,2165,1,0,0,0,420,2167,1,0,0,0,422,2169,
1,0,0,0,424,2171,1,0,0,0,426,2173,1,0,0,0,428,2175,1,0,0,0,430,2177,1,0,
0,0,432,2179,1,0,0,0,434,2181,1,0,0,0,436,2183,1,0,0,0,438,2185,1,0,0,0,
440,2187,1,0,0,0,442,2189,1,0,0,0,444,2191,1,0,0,0,446,2193,1,0,0,0,448,
2195,1,0,0,0,450,2197,1,0,0,0,452,2199,1,0,0,0,454,2201,1,0,0,0,456,2203,
1,0,0,0,458,2205,1,0,0,0,460,2207,1,0,0,0,462,2209,1,0,0,0,464,2211,1,0,
0,0,466,2213,1,0,0,0,468,2215,1,0,0,0,470,2217,1,0,0,0,472,2219,1,0,0,0,
474,2221,1,0,0,0,476,2223,1,0,0,0,478,2225,1,0,0,0,480,2227,1,0,0,0,482,
2229,1,0,0,0,484,2231,1,0,0,0,486,2233,1,0,0,0,488,2235,1,0,0,0,490,2237,
1,0,0,0,492,2239,1,0,0,0,494,2241,1,0,0,0,496,2243,1,0,0,0,498,2245,1,0,
0,0,500,2247,1,0,0,0,502,2249,1,0,0,0,504,2251,1,0,0,0,506,2253,1,0,0,0,
508,2255,1,0,0,0,510,2257,1,0,0,0,512,2259,1,0,0,0,514,2261,1,0,0,0,516,
2263,1,0,0,0,518,2265,1,0,0,0,520,2267,1,0,0,0,522,2269,1,0,0,0,524,2271,
1,0,0,0,526,2273,1,0,0,0,528,2275,1,0,0,0,530,2277,1,0,0,0,532,2279,1,0,
0,0,534,2281,1,0,0,0,536,2283,1,0,0,0,538,2285,1,0,0,0,540,2287,1,0,0,0,
542,2289,1,0,0,0,544,2291,1,0,0,0,546,2293,1,0,0,0,548,2295,1,0,0,0,550,
2297,1,0,0,0,552,2299,1,0,0,0,554,2301,1,0,0,0,556,2303,1,0,0,0,558,2305,
1,0,0,0,560,562,3,2,1,0,561,560,1,0,0,0,561,562,1,0,0,0,562,564,1,0,0,0,
563,565,5,19,0,0,564,563,1,0,0,0,564,565,1,0,0,0,565,566,1,0,0,0,566,567,
3,538,269,0,567,1,1,0,0,0,568,570,3,8,4,0,569,571,5,19,0,0,570,569,1,0,0,
0,570,571,1,0,0,0,571,572,1,0,0,0,572,573,3,4,2,0,573,576,1,0,0,0,574,576,
3,6,3,0,575,568,1,0,0,0,575,574,1,0,0,0,576,579,1,0,0,0,577,575,1,0,0,0,
577,578,1,0,0,0,578,588,1,0,0,0,579,577,1,0,0,0,580,585,3,8,4,0,581,583,
5,19,0,0,582,581,1,0,0,0,582,583,1,0,0,0,583,584,1,0,0,0,584,586,3,4,2,0,
585,582,1,0,0,0,585,586,1,0,0,0,586,589,1,0,0,0,587,589,3,6,3,0,588,580,
1,0,0,0,588,587,1,0,0,0,589,3,1,0,0,0,590,591,5,8,0,0,591,5,1,0,0,0,592,
593,3,4,2,0,593,7,1,0,0,0,594,632,3,186,93,0,595,632,3,112,56,0,596,632,
3,106,53,0,597,632,3,88,44,0,598,632,3,74,37,0,599,632,3,68,34,0,600,632,
3,180,90,0,601,632,3,54,27,0,602,632,3,46,23,0,603,632,3,198,99,0,604,632,
3,44,22,0,605,632,3,34,17,0,606,632,3,26,13,0,607,632,3,134,67,0,608,632,
3,32,16,0,609,632,3,28,14,0,610,632,3,24,12,0,611,632,3,210,105,0,612,632,
3,120,60,0,613,632,3,122,61,0,614,632,3,132,66,0,615,632,3,130,65,0,616,
632,3,118,59,0,617,632,3,126,63,0,618,632,3,128,64,0,619,632,3,124,62,0,
620,632,3,116,58,0,621,632,3,114,57,0,622,632,3,18,9,0,623,632,3,236,118,
0,624,632,3,16,8,0,625,632,3,14,7,0,626,632,3,10,5,0,627,632,3,260,130,0,
628,632,3,196,98,0,629,632,3,216,108,0,630,632,3,194,97,0,631,594,1,0,0,
0,631,595,1,0,0,0,631,596,1,0,0,0,631,597,1,0,0,0,631,598,1,0,0,0,631,599,
1,0,0,0,631,600,1,0,0,0,631,601,1,0,0,0,631,602,1,0,0,0,631,603,1,0,0,0,
631,604,1,0,0,0,631,605,1,0,0,0,631,606,1,0,0,0,631,607,1,0,0,0,631,608,
1,0,0,0,631,609,1,0,0,0,631,610,1,0,0,0,631,611,1,0,0,0,631,612,1,0,0,0,
631,613,1,0,0,0,631,614,1,0,0,0,631,615,1,0,0,0,631,616,1,0,0,0,631,617,
1,0,0,0,631,618,1,0,0,0,631,619,1,0,0,0,631,620,1,0,0,0,631,621,1,0,0,0,
631,622,1,0,0,0,631,623,1,0,0,0,631,624,1,0,0,0,631,625,1,0,0,0,631,626,
1,0,0,0,631,627,1,0,0,0,631,628,1,0,0,0,631,629,1,0,0,0,631,630,1,0,0,0,
632,9,1,0,0,0,633,634,3,536,268,0,634,635,3,20,10,0,635,636,3,466,233,0,
636,637,3,22,11,0,637,638,3,406,203,0,638,639,3,320,160,0,639,11,1,0,0,0,
640,641,3,446,223,0,641,642,3,524,262,0,642,13,1,0,0,0,643,644,3,446,223,
0,644,648,3,488,244,0,645,646,3,464,232,0,646,647,3,320,160,0,647,649,1,
0,0,0,648,645,1,0,0,0,648,649,1,0,0,0,649,651,1,0,0,0,650,652,3,458,229,
0,651,650,1,0,0,0,651,652,1,0,0,0,652,15,1,0,0,0,653,654,3,446,223,0,654,
658,3,20,10,0,655,656,3,466,233,0,656,657,3,22,11,0,657,659,1,0,0,0,658,
655,1,0,0,0,658,659,1,0,0,0,659,663,1,0,0,0,660,661,3,464,232,0,661,662,
3,320,160,0,662,664,1,0,0,0,663,660,1,0,0,0,663,664,1,0,0,0,664,17,1,0,0,
0,665,666,3,414,207,0,666,667,3,20,10,0,667,668,3,466,233,0,668,669,3,22,
11,0,669,670,3,506,253,0,670,671,3,320,160,0,671,19,1,0,0,0,672,675,3,350,
175,0,673,675,3,352,176,0,674,672,1,0,0,0,674,673,1,0,0,0,675,685,1,0,0,
0,676,685,3,356,178,0,677,685,3,366,183,0,678,685,3,388,194,0,679,685,3,
398,199,0,680,685,3,382,191,0,681,685,3,392,196,0,682,685,3,454,227,0,683,
685,3,490,245,0,684,674,1,0,0,0,684,676,1,0,0,0,684,677,1,0,0,0,684,678,
1,0,0,0,684,679,1,0,0,0,684,680,1,0,0,0,684,681,1,0,0,0,684,682,1,0,0,0,
684,683,1,0,0,0,685,21,1,0,0,0,686,687,3,350,175,0,687,688,3,412,206,0,688,
725,1,0,0,0,689,690,3,350,175,0,690,691,3,412,206,0,691,692,3,418,209,0,
692,693,3,438,219,0,693,694,3,306,153,0,694,725,1,0,0,0,695,699,3,410,205,
0,696,697,3,306,153,0,697,698,5,14,0,0,698,700,1,0,0,0,699,696,1,0,0,0,699,
700,1,0,0,0,700,701,1,0,0,0,701,702,3,332,166,0,702,725,1,0,0,0,703,704,
3,350,175,0,704,705,3,440,220,0,705,725,1,0,0,0,706,707,3,438,219,0,707,
708,3,306,153,0,708,725,1,0,0,0,709,711,3,502,251,0,710,709,1,0,0,0,710,
711,1,0,0,0,711,715,1,0,0,0,712,713,3,306,153,0,713,714,5,14,0,0,714,716,
1,0,0,0,715,712,1,0,0,0,715,716,1,0,0,0,716,717,1,0,0,0,717,725,3,308,154,
0,718,719,3,350,175,0,719,720,3,488,244,0,720,725,1,0,0,0,721,722,3,486,
243,0,722,723,3,320,160,0,723,725,1,0,0,0,724,686,1,0,0,0,724,689,1,0,0,
0,724,695,1,0,0,0,724,703,1,0,0,0,724,706,1,0,0,0,724,710,1,0,0,0,724,718,
1,0,0,0,724,721,1,0,0,0,725,23,1,0,0,0,726,727,3,382,191,0,727,729,3,522,
261,0,728,730,3,246,123,0,729,728,1,0,0,0,729,730,1,0,0,0,730,731,1,0,0,
0,731,732,3,336,168,0,732,733,3,534,267,0,733,734,3,474,237,0,734,737,3,
300,150,0,735,738,3,500,250,0,736,738,3,456,228,0,737,735,1,0,0,0,737,736,
1,0,0,0,737,738,1,0,0,0,738,25,1,0,0,0,739,740,3,382,191,0,740,742,3,486,
243,0,741,743,3,246,123,0,742,741,1,0,0,0,742,743,1,0,0,0,743,744,1,0,0,
0,744,746,3,320,160,0,745,747,3,108,54,0,746,745,1,0,0,0,746,747,1,0,0,0,
747,27,1,0,0,0,748,749,3,382,191,0,749,751,3,514,257,0,750,752,3,246,123,
0,751,750,1,0,0,0,751,752,1,0,0,0,752,756,1,0,0,0,753,754,3,306,153,0,754,
755,5,14,0,0,755,757,1,0,0,0,756,753,1,0,0,0,756,757,1,0,0,0,757,758,1,0,
0,0,758,759,3,328,164,0,759,760,3,540,270,0,760,761,3,30,15,0,761,762,3,
542,271,0,762,29,1,0,0,0,763,764,3,310,155,0,764,771,3,312,156,0,765,766,
3,556,278,0,766,767,3,310,155,0,767,768,3,312,156,0,768,770,1,0,0,0,769,
765,1,0,0,0,770,773,1,0,0,0,771,769,1,0,0,0,771,772,1,0,0,0,772,31,1,0,0,
0,773,771,1,0,0,0,774,775,3,382,191,0,775,777,3,508,254,0,776,778,3,246,
123,0,777,776,1,0,0,0,777,778,1,0,0,0,778,782,1,0,0,0,779,780,3,306,153,
0,780,781,5,14,0,0,781,783,1,0,0,0,782,779,1,0,0,0,782,783,1,0,0,0,783,784,
1,0,0,0,784,785,3,322,161,0,785,786,3,526,263,0,786,787,3,324,162,0,787,
33,1,0,0,0,788,789,3,382,191,0,789,790,3,452,226,0,790,792,3,530,265,0,791,
793,3,246,123,0,792,791,1,0,0,0,792,793,1,0,0,0,793,797,1,0,0,0,794,795,
3,306,153,0,795,796,5,14,0,0,796,798,1,0,0,0,797,794,1,0,0,0,797,798,1,0,
0,0,798,799,1,0,0,0,799,800,3,326,163,0,800,801,3,362,181,0,801,802,3,490,
245,0,802,803,3,254,127,0,803,807,3,406,203,0,804,805,3,306,153,0,805,806,
5,14,0,0,806,808,1,0,0,0,807,804,1,0,0,0,807,808,1,0,0,0,808,809,1,0,0,0,
809,810,3,308,154,0,810,811,3,36,18,0,811,812,3,476,238,0,812,813,3,434,
217,0,813,814,3,540,270,0,814,815,3,254,127,0,815,819,3,542,271,0,816,817,
3,534,267,0,817,818,3,42,21,0,818,820,1,0,0,0,819,816,1,0,0,0,819,820,1,
0,0,0,820,35,1,0,0,0,821,822,3,532,266,0,822,826,3,38,19,0,823,824,3,358,
179,0,824,825,3,282,141,0,825,827,1,0,0,0,826,823,1,0,0,0,826,827,1,0,0,
0,827,37,1,0,0,0,828,834,3,40,20,0,829,830,3,358,179,0,830,831,3,40,20,0,
831,833,1,0,0,0,832,829,1,0,0,0,833,836,1,0,0,0,834,832,1,0,0,0,834,835,
1,0,0,0,835,39,1,0,0,0,836,834,1,0,0,0,837,838,3,310,155,0,838,839,3,430,
215,0,839,840,3,460,230,0,840,841,3,462,231,0,841,41,1,0,0,0,842,849,3,140,
70,0,843,844,3,140,70,0,844,845,3,358,179,0,845,846,3,138,69,0,846,849,1,
0,0,0,847,849,3,138,69,0,848,842,1,0,0,0,848,843,1,0,0,0,848,847,1,0,0,0,
849,43,1,0,0,0,850,851,3,382,191,0,851,853,3,438,219,0,852,854,3,246,123,
0,853,852,1,0,0,0,853,854,1,0,0,0,854,855,1,0,0,0,855,856,3,306,153,0,856,
857,3,534,267,0,857,858,3,482,241,0,858,859,5,171,0,0,859,860,3,544,272,
0,860,861,3,188,94,0,861,865,3,546,273,0,862,863,3,358,179,0,863,864,3,192,
96,0,864,866,1,0,0,0,865,862,1,0,0,0,865,866,1,0,0,0,866,45,1,0,0,0,867,
869,3,382,191,0,868,870,3,66,33,0,869,868,1,0,0,0,869,870,1,0,0,0,870,871,
1,0,0,0,871,873,3,410,205,0,872,874,3,246,123,0,873,872,1,0,0,0,873,874,
1,0,0,0,874,878,1,0,0,0,875,876,3,306,153,0,876,877,5,14,0,0,877,879,1,0,
0,0,878,875,1,0,0,0,878,879,1,0,0,0,879,880,1,0,0,0,880,881,3,332,166,0,
881,883,3,540,270,0,882,884,3,50,25,0,883,882,1,0,0,0,883,884,1,0,0,0,884,
885,1,0,0,0,885,886,3,542,271,0,886,887,3,52,26,0,887,888,3,484,242,0,888,
889,3,312,156,0,889,890,3,442,221,0,890,891,3,334,167,0,891,892,3,362,181,
0,892,893,3,48,24,0,893,47,1,0,0,0,894,895,5,163,0,0,895,49,1,0,0,0,896,
902,3,342,171,0,897,898,3,556,278,0,898,899,3,342,171,0,899,901,1,0,0,0,
900,897,1,0,0,0,901,904,1,0,0,0,902,900,1,0,0,0,902,903,1,0,0,0,903,51,1,
0,0,0,904,902,1,0,0,0,905,910,3,374,187,0,906,907,3,484,242,0,907,908,3,
462,231,0,908,910,1,0,0,0,909,905,1,0,0,0,909,906,1,0,0,0,910,911,1,0,0,
0,911,912,3,466,233,0,912,913,3,462,231,0,913,914,3,424,212,0,914,53,1,0,
0,0,915,917,3,382,191,0,916,918,3,66,33,0,917,916,1,0,0,0,917,918,1,0,0,
0,918,919,1,0,0,0,919,921,3,348,174,0,920,922,3,246,123,0,921,920,1,0,0,
0,921,922,1,0,0,0,922,926,1,0,0,0,923,924,3,306,153,0,924,925,5,14,0,0,925,
927,1,0,0,0,926,923,1,0,0,0,926,927,1,0,0,0,927,928,1,0,0,0,928,929,3,330,
165,0,929,930,3,540,270,0,930,931,3,312,156,0,931,932,3,542,271,0,932,933,
3,494,247,0,933,934,3,332,166,0,934,935,3,498,249,0,935,936,3,312,156,0,
936,937,3,404,202,0,937,938,3,332,166,0,938,939,3,422,211,0,939,940,3,56,
28,0,940,55,1,0,0,0,941,946,3,294,147,0,942,946,3,64,32,0,943,946,3,62,31,
0,944,946,3,58,29,0,945,941,1,0,0,0,945,942,1,0,0,0,945,943,1,0,0,0,945,
944,1,0,0,0,946,57,1,0,0,0,947,948,3,544,272,0,948,954,3,60,30,0,949,950,
3,556,278,0,950,951,3,60,30,0,951,953,1,0,0,0,952,949,1,0,0,0,953,956,1,
0,0,0,954,952,1,0,0,0,954,955,1,0,0,0,955,957,1,0,0,0,956,954,1,0,0,0,957,
958,3,546,273,0,958,59,1,0,0,0,959,960,3,340,170,0,960,961,5,9,0,0,961,962,
3,56,28,0,962,61,1,0,0,0,963,964,3,540,270,0,964,971,3,64,32,0,965,966,3,
556,278,0,966,967,3,294,147,0,967,970,1,0,0,0,968,970,3,64,32,0,969,965,
1,0,0,0,969,968,1,0,0,0,970,973,1,0,0,0,971,969,1,0,0,0,971,972,1,0,0,0,
972,974,1,0,0,0,973,971,1,0,0,0,974,975,3,542,271,0,975,63,1,0,0,0,976,977,
3,540,270,0,977,983,3,294,147,0,978,979,3,556,278,0,979,980,3,294,147,0,
980,982,1,0,0,0,981,978,1,0,0,0,982,985,1,0,0,0,983,981,1,0,0,0,983,984,
1,0,0,0,984,986,1,0,0,0,985,983,1,0,0,0,986,987,3,542,271,0,987,65,1,0,0,
0,988,989,3,470,235,0,989,990,3,480,240,0,990,67,1,0,0,0,991,992,3,356,178,
0,992,993,3,522,261,0,993,994,3,336,168,0,994,995,3,534,267,0,995,997,3,
70,35,0,996,998,3,72,36,0,997,996,1,0,0,0,997,998,1,0,0,0,998,69,1,0,0,0,
999,1000,3,474,237,0,1000,1001,3,300,150,0,1001,71,1,0,0,0,1002,1005,3,500,
250,0,1003,1005,3,456,228,0,1004,1002,1,0,0,0,1004,1003,1,0,0,0,1005,73,
1,0,0,0,1006,1007,3,356,178,0,1007,1011,3,514,257,0,1008,1009,3,306,153,
0,1009,1010,5,14,0,0,1010,1012,1,0,0,0,1011,1008,1,0,0,0,1011,1012,1,0,0,
0,1012,1013,1,0,0,0,1013,1014,3,328,164,0,1014,1015,3,76,38,0,1015,75,1,
0,0,0,1016,1020,3,86,43,0,1017,1020,3,84,42,0,1018,1020,3,78,39,0,1019,1016,
1,0,0,0,1019,1017,1,0,0,0,1019,1018,1,0,0,0,1020,77,1,0,0,0,1021,1022,3,
478,239,0,1022,1023,3,80,40,0,1023,79,1,0,0,0,1024,1030,3,82,41,0,1025,1026,
3,358,179,0,1026,1027,3,82,41,0,1027,1029,1,0,0,0,1028,1025,1,0,0,0,1029,
1032,1,0,0,0,1030,1028,1,0,0,0,1030,1031,1,0,0,0,1031,81,1,0,0,0,1032,1030,
1,0,0,0,1033,1034,3,310,155,0,1034,1035,3,506,253,0,1035,1036,3,310,155,
0,1036,83,1,0,0,0,1037,1038,3,346,173,0,1038,1039,3,310,155,0,1039,1046,
3,312,156,0,1040,1041,3,556,278,0,1041,1042,3,310,155,0,1042,1043,3,312,
156,0,1043,1045,1,0,0,0,1044,1040,1,0,0,0,1045,1048,1,0,0,0,1046,1044,1,
0,0,0,1046,1047,1,0,0,0,1047,85,1,0,0,0,1048,1046,1,0,0,0,1049,1050,3,356,
178,0,1050,1051,3,310,155,0,1051,1052,3,514,257,0,1052,1053,3,312,156,0,
1053,87,1,0,0,0,1054,1055,3,356,178,0,1055,1059,3,502,251,0,1056,1057,3,
306,153,0,1057,1058,5,14,0,0,1058,1060,1,0,0,0,1059,1056,1,0,0,0,1059,1060,
1,0,0,0,1060,1061,1,0,0,0,1061,1062,3,308,154,0,1062,1063,3,90,45,0,1063,
89,1,0,0,0,1064,1070,3,102,51,0,1065,1070,3,98,49,0,1066,1070,3,96,48,0,
1067,1070,3,94,47,0,1068,1070,3,92,46,0,1069,1064,1,0,0,0,1069,1065,1,0,
0,0,1069,1066,1,0,0,0,1069,1067,1,0,0,0,1069,1068,1,0,0,0,1070,91,1,0,0,
0,1071,1072,3,534,267,0,1072,1073,3,140,70,0,1073,93,1,0,0,0,1074,1075,3,
478,239,0,1075,1076,3,310,155,0,1076,1077,3,506,253,0,1077,1078,3,310,155,
0,1078,95,1,0,0,0,1079,1080,3,392,196,0,1080,1081,3,378,189,0,1081,1082,
3,496,248,0,1082,97,1,0,0,0,1083,1084,3,392,196,0,1084,1085,3,100,50,0,1085,
99,1,0,0,0,1086,1092,3,310,155,0,1087,1088,3,556,278,0,1088,1089,3,310,155,
0,1089,1091,1,0,0,0,1090,1087,1,0,0,0,1091,1094,1,0,0,0,1092,1090,1,0,0,
0,1092,1093,1,0,0,0,1093,101,1,0,0,0,1094,1092,1,0,0,0,1095,1096,3,346,173,
0,1096,1097,3,104,52,0,1097,103,1,0,0,0,1098,1099,3,310,155,0,1099,1106,
3,312,156,0,1100,1101,3,556,278,0,1101,1102,3,310,155,0,1102,1103,3,312,
156,0,1103,1105,1,0,0,0,1104,1100,1,0,0,0,1105,1108,1,0,0,0,1106,1104,1,
0,0,0,1106,1107,1,0,0,0,1107,105,1,0,0,0,1108,1106,1,0,0,0,1109,1110,3,356,
178,0,1110,1111,3,486,243,0,1111,1113,3,320,160,0,1112,1114,3,108,54,0,1113,
1112,1,0,0,0,1113,1114,1,0,0,0,1114,107,1,0,0,0,1115,1116,3,534,267,0,1116,
1122,3,110,55,0,1117,1118,3,358,179,0,1118,1119,3,110,55,0,1119,1121,1,0,
0,0,1120,1117,1,0,0,0,1121,1124,1,0,0,0,1122,1120,1,0,0,0,1122,1123,1,0,
0,0,1123,109,1,0,0,0,1124,1122,1,0,0,0,1125,1126,3,474,237,0,1126,1127,5,
171,0,0,1127,1128,3,300,150,0,1128,1142,1,0,0,0,1129,1130,3,450,225,0,1130,
1131,5,171,0,0,1131,1132,3,302,151,0,1132,1142,1,0,0,0,1133,1134,3,500,250,
0,1134,1135,5,171,0,0,1135,1136,3,302,151,0,1136,1142,1,0,0,0,1137,1138,
3,468,234,0,1138,1139,5,171,0,0,1139,1140,3,148,74,0,1140,1142,1,0,0,0,1141,
1125,1,0,0,0,1141,1129,1,0,0,0,1141,1133,1,0,0,0,1141,1137,1,0,0,0,1142,
111,1,0,0,0,1143,1144,3,356,178,0,1144,1145,3,452,226,0,1145,1149,3,530,
265,0,1146,1147,3,306,153,0,1147,1148,5,14,0,0,1148,1150,1,0,0,0,1149,1146,
1,0,0,0,1149,1150,1,0,0,0,1150,1151,1,0,0,0,1151,1155,3,326,163,0,1152,1153,
3,534,267,0,1153,1154,3,140,70,0,1154,1156,1,0,0,0,1155,1152,1,0,0,0,1155,
1156,1,0,0,0,1156,113,1,0,0,0,1157,1158,3,392,196,0,1158,1160,3,522,261,
0,1159,1161,3,248,124,0,1160,1159,1,0,0,0,1160,1161,1,0,0,0,1161,1162,1,
0,0,0,1162,1163,3,336,168,0,1163,115,1,0,0,0,1164,1165,3,392,196,0,1165,
1167,3,514,257,0,1166,1168,3,248,124,0,1167,1166,1,0,0,0,1167,1168,1,0,0,
0,1168,1172,1,0,0,0,1169,1170,3,306,153,0,1170,1171,5,14,0,0,1171,1173,1,
0,0,0,1172,1169,1,0,0,0,1172,1173,1,0,0,0,1173,1174,1,0,0,0,1174,1175,3,
328,164,0,1175,117,1,0,0,0,1176,1177,3,392,196,0,1177,1178,3,452,226,0,1178,
1180,3,530,265,0,1179,1181,3,248,124,0,1180,1179,1,0,0,0,1180,1181,1,0,0,
0,1181,1185,1,0,0,0,1182,1183,3,306,153,0,1183,1184,5,14,0,0,1184,1186,1,
0,0,0,1185,1182,1,0,0,0,1185,1186,1,0,0,0,1186,1187,1,0,0,0,1187,1188,3,
326,163,0,1188,119,1,0,0,0,1189,1190,3,392,196,0,1190,1192,3,348,174,0,1191,
1193,3,248,124,0,1192,1191,1,0,0,0,1192,1193,1,0,0,0,1193,1197,1,0,0,0,1194,
1195,3,306,153,0,1195,1196,5,14,0,0,1196,1198,1,0,0,0,1197,1194,1,0,0,0,
1197,1198,1,0,0,0,1198,1199,1,0,0,0,1199,1200,3,330,165,0,1200,121,1,0,0,
0,1201,1202,3,392,196,0,1202,1204,3,410,205,0,1203,1205,3,248,124,0,1204,
1203,1,0,0,0,1204,1205,1,0,0,0,1205,1209,1,0,0,0,1206,1207,3,306,153,0,1207,
1208,5,14,0,0,1208,1210,1,0,0,0,1209,1206,1,0,0,0,1209,1210,1,0,0,0,1210,
1211,1,0,0,0,1211,1212,3,332,166,0,1212,123,1,0,0,0,1213,1214,3,392,196,
0,1214,1216,3,508,254,0,1215,1217,3,248,124,0,1216,1215,1,0,0,0,1216,1217,
1,0,0,0,1217,1218,1,0,0,0,1218,1219,3,322,161,0,1219,1223,3,466,233,0,1220,
1221,3,306,153,0,1221,1222,5,14,0,0,1222,1224,1,0,0,0,1223,1220,1,0,0,0,
1223,1224,1,0,0,0,1224,1225,1,0,0,0,1225,1226,3,308,154,0,1226,125,1,0,0,
0,1227,1228,3,392,196,0,1228,1230,3,486,243,0,1229,1231,3,248,124,0,1230,
1229,1,0,0,0,1230,1231,1,0,0,0,1231,1232,1,0,0,0,1232,1233,3,320,160,0,1233,
127,1,0,0,0,1234,1235,3,392,196,0,1235,1237,3,502,251,0,1236,1238,3,248,
124,0,1237,1236,1,0,0,0,1237,1238,1,0,0,0,1238,1242,1,0,0,0,1239,1240,3,
306,153,0,1240,1241,5,14,0,0,1241,1243,1,0,0,0,1242,1239,1,0,0,0,1242,1243,
1,0,0,0,1243,1244,1,0,0,0,1244,1245,3,308,154,0,1245,129,1,0,0,0,1246,1247,
3,392,196,0,1247,1249,3,438,219,0,1248,1250,3,248,124,0,1249,1248,1,0,0,
0,1249,1250,1,0,0,0,1250,1251,1,0,0,0,1251,1252,3,306,153,0,1252,131,1,0,
0,0,1253,1254,3,392,196,0,1254,1256,3,420,210,0,1255,1257,3,248,124,0,1256,
1255,1,0,0,0,1256,1257,1,0,0,0,1257,1261,1,0,0,0,1258,1259,3,306,153,0,1259,
1260,5,14,0,0,1260,1262,1,0,0,0,1261,1258,1,0,0,0,1261,1262,1,0,0,0,1262,
1263,1,0,0,0,1263,1264,3,200,100,0,1264,133,1,0,0,0,1265,1266,3,382,191,
0,1266,1268,3,502,251,0,1267,1269,3,246,123,0,1268,1267,1,0,0,0,1268,1269,
1,0,0,0,1269,1273,1,0,0,0,1270,1271,3,306,153,0,1271,1272,5,14,0,0,1272,
1274,1,0,0,0,1273,1270,1,0,0,0,1273,1274,1,0,0,0,1274,1275,1,0,0,0,1275,
1276,3,308,154,0,1276,1277,3,540,270,0,1277,1278,3,156,78,0,1278,1280,3,
542,271,0,1279,1281,3,136,68,0,1280,1279,1,0,0,0,1280,1281,1,0,0,0,1281,
135,1,0,0,0,1282,1284,3,534,267,0,1283,1285,3,140,70,0,1284,1283,1,0,0,0,
1284,1285,1,0,0,0,1285,1287,1,0,0,0,1286,1288,3,138,69,0,1287,1286,1,0,0,
0,1287,1288,1,0,0,0,1288,137,1,0,0,0,1289,1290,3,376,188,0,1290,1291,3,472,
236,0,1291,1292,3,372,186,0,1292,1293,3,540,270,0,1293,1295,3,310,155,0,
1294,1296,3,318,159,0,1295,1294,1,0,0,0,1295,1296,1,0,0,0,1296,1297,1,0,
0,0,1297,1298,3,542,271,0,1298,139,1,0,0,0,1299,1305,3,142,71,0,1300,1301,
3,358,179,0,1301,1302,3,142,71,0,1302,1304,1,0,0,0,1303,1300,1,0,0,0,1304,
1307,1,0,0,0,1305,1303,1,0,0,0,1305,1306,1,0,0,0,1306,141,1,0,0,0,1307,1305,
1,0,0,0,1308,1309,3,144,72,0,1309,1310,5,171,0,0,1310,1311,3,146,73,0,1311,
1317,1,0,0,0,1312,1313,3,144,72,0,1313,1314,5,171,0,0,1314,1315,3,148,74,
0,1315,1317,1,0,0,0,1316,1308,1,0,0,0,1316,1312,1,0,0,0,1317,143,1,0,0,0,
1318,1319,5,169,0,0,1319,145,1,0,0,0,1320,1323,3,300,150,0,1321,1323,3,298,
149,0,1322,1320,1,0,0,0,1322,1321,1,0,0,0,1323,147,1,0,0,0,1324,1325,3,544,
272,0,1325,1331,3,150,75,0,1326,1327,3,556,278,0,1327,1328,3,150,75,0,1328,
1330,1,0,0,0,1329,1326,1,0,0,0,1330,1333,1,0,0,0,1331,1329,1,0,0,0,1331,
1332,1,0,0,0,1332,1334,1,0,0,0,1333,1331,1,0,0,0,1334,1335,3,546,273,0,1335,
149,1,0,0,0,1336,1337,3,152,76,0,1337,1338,5,9,0,0,1338,1339,3,154,77,0,
1339,151,1,0,0,0,1340,1341,3,300,150,0,1341,153,1,0,0,0,1342,1345,3,300,
150,0,1343,1345,3,298,149,0,1344,1342,1,0,0,0,1344,1343,1,0,0,0,1345,155,
1,0,0,0,1346,1352,3,158,79,0,1347,1348,3,556,278,0,1348,1349,3,158,79,0,
1349,1351,1,0,0,0,1350,1347,1,0,0,0,1351,1354,1,0,0,0,1352,1350,1,0,0,0,
1352,1353,1,0,0,0,1353,1358,1,0,0,0,1354,1352,1,0,0,0,1355,1356,3,556,278,
0,1356,1357,3,162,81,0,1357,1359,1,0,0,0,1358,1355,1,0,0,0,1358,1359,1,0,
0,0,1359,157,1,0,0,0,1360,1361,3,310,155,0,1361,1363,3,312,156,0,1362,1364,
3,160,80,0,1363,1362,1,0,0,0,1363,1364,1,0,0,0,1364,159,1,0,0,0,1365,1366,
3,476,238,0,1366,1367,3,434,217,0,1367,161,1,0,0,0,1368,1369,3,476,238,0,
1369,1370,3,434,217,0,1370,1371,3,540,270,0,1371,1372,3,164,82,0,1372,1373,
3,542,271,0,1373,163,1,0,0,0,1374,1378,3,166,83,0,1375,1378,3,168,84,0,1376,
1378,3,170,85,0,1377,1374,1,0,0,0,1377,1375,1,0,0,0,1377,1376,1,0,0,0,1378,
165,1,0,0,0,1379,1380,3,310,155,0,1380,167,1,0,0,0,1381,1382,3,176,88,0,
1382,1383,3,556,278,0,1383,1384,3,174,87,0,1384,169,1,0,0,0,1385,1386,3,
540,270,0,1386,1387,3,172,86,0,1387,1388,3,542,271,0,1388,1389,3,556,278,
0,1389,1390,3,174,87,0,1390,171,1,0,0,0,1391,1397,3,176,88,0,1392,1393,3,
556,278,0,1393,1394,3,176,88,0,1394,1396,1,0,0,0,1395,1392,1,0,0,0,1396,
1399,1,0,0,0,1397,1395,1,0,0,0,1397,1398,1,0,0,0,1398,173,1,0,0,0,1399,1397,
1,0,0,0,1400,1406,3,178,89,0,1401,1402,3,556,278,0,1402,1403,3,178,89,0,
1403,1405,1,0,0,0,1404,1401,1,0,0,0,1405,1408,1,0,0,0,1406,1404,1,0,0,0,
1406,1407,1,0,0,0,1407,175,1,0,0,0,1408,1406,1,0,0,0,1409,1410,3,310,155,
0,1410,177,1,0,0,0,1411,1412,3,310,155,0,1412,179,1,0,0,0,1413,1414,3,360,
180,0,1414,1415,3,368,184,0,1415,181,1,0,0,0,1416,1418,3,370,185,0,1417,
1419,3,184,92,0,1418,1417,1,0,0,0,1418,1419,1,0,0,0,1419,1420,1,0,0,0,1420,
1422,3,368,184,0,1421,1423,3,244,122,0,1422,1421,1,0,0,0,1422,1423,1,0,0,
0,1423,183,1,0,0,0,1424,1427,3,448,224,0,1425,1427,3,516,258,0,1426,1424,
1,0,0,0,1426,1425,1,0,0,0,1427,185,1,0,0,0,1428,1429,3,356,178,0,1429,1430,
3,438,219,0,1430,1431,3,306,153,0,1431,1432,3,534,267,0,1432,1433,3,482,
241,0,1433,1434,5,171,0,0,1434,1435,3,544,272,0,1435,1436,3,188,94,0,1436,
1440,3,546,273,0,1437,1438,3,358,179,0,1438,1439,3,192,96,0,1439,1441,1,
0,0,0,1440,1437,1,0,0,0,1440,1441,1,0,0,0,1441,187,1,0,0,0,1442,1448,3,190,
95,0,1443,1444,3,556,278,0,1444,1445,3,190,95,0,1445,1447,1,0,0,0,1446,1443,
1,0,0,0,1447,1450,1,0,0,0,1448,1446,1,0,0,0,1448,1449,1,0,0,0,1449,189,1,
0,0,0,1450,1448,1,0,0,0,1451,1452,5,164,0,0,1452,1453,5,9,0,0,1453,1458,
5,164,0,0,1454,1455,5,164,0,0,1455,1456,5,9,0,0,1456,1458,5,165,0,0,1457,
1451,1,0,0,0,1457,1454,1,0,0,0,1458,191,1,0,0,0,1459,1460,3,394,197,0,1460,
1461,5,171,0,0,1461,1462,3,302,151,0,1462,193,1,0,0,0,1463,1464,3,520,260,
0,1464,1465,3,306,153,0,1465,195,1,0,0,0,1466,1468,3,510,255,0,1467,1469,
3,502,251,0,1468,1467,1,0,0,0,1468,1469,1,0,0,0,1469,1473,1,0,0,0,1470,1471,
3,306,153,0,1471,1472,5,14,0,0,1472,1474,1,0,0,0,1473,1470,1,0,0,0,1473,
1474,1,0,0,0,1474,1475,1,0,0,0,1475,1476,3,308,154,0,1476,197,1,0,0,0,1477,
1478,3,382,191,0,1478,1480,3,420,210,0,1479,1481,3,246,123,0,1480,1479,1,
0,0,0,1480,1481,1,0,0,0,1481,1483,1,0,0,0,1482,1484,3,200,100,0,1483,1482,
1,0,0,0,1483,1484,1,0,0,0,1484,1485,1,0,0,0,1485,1489,3,466,233,0,1486,1487,
3,306,153,0,1487,1488,5,14,0,0,1488,1490,1,0,0,0,1489,1486,1,0,0,0,1489,
1490,1,0,0,0,1490,1491,1,0,0,0,1491,1492,3,308,154,0,1492,1493,3,540,270,
0,1493,1494,3,202,101,0,1494,1495,3,542,271,0,1495,199,1,0,0,0,1496,1499,
5,169,0,0,1497,1499,3,300,150,0,1498,1496,1,0,0,0,1498,1497,1,0,0,0,1499,
201,1,0,0,0,1500,1505,3,310,155,0,1501,1505,3,204,102,0,1502,1505,3,206,
103,0,1503,1505,3,208,104,0,1504,1500,1,0,0,0,1504,1501,1,0,0,0,1504,1502,
1,0,0,0,1504,1503,1,0,0,0,1505,203,1,0,0,0,1506,1507,3,436,218,0,1507,1508,
3,540,270,0,1508,1509,5,169,0,0,1509,1510,3,542,271,0,1510,205,1,0,0,0,1511,
1512,3,396,198,0,1512,1513,3,540,270,0,1513,1514,5,169,0,0,1514,1515,3,542,
271,0,1515,207,1,0,0,0,1516,1517,3,408,204,0,1517,1518,3,540,270,0,1518,
1519,5,169,0,0,1519,1520,3,542,271,0,1520,209,1,0,0,0,1521,1523,3,182,91,
0,1522,1521,1,0,0,0,1522,1523,1,0,0,0,1523,1524,1,0,0,0,1524,1526,3,384,
192,0,1525,1527,3,212,106,0,1526,1525,1,0,0,0,1526,1527,1,0,0,0,1527,1528,
1,0,0,0,1528,1530,3,266,133,0,1529,1531,3,244,122,0,1530,1529,1,0,0,0,1530,
1531,1,0,0,0,1531,1532,1,0,0,0,1532,1535,3,274,137,0,1533,1536,3,248,124,
0,1534,1536,3,218,109,0,1535,1533,1,0,0,0,1535,1534,1,0,0,0,1535,1536,1,
0,0,0,1536,211,1,0,0,0,1537,1543,3,214,107,0,1538,1539,3,556,278,0,1539,
1540,3,214,107,0,1540,1542,1,0,0,0,1541,1538,1,0,0,0,1542,1545,1,0,0,0,1543,
1541,1,0,0,0,1543,1544,1,0,0,0,1544,213,1,0,0,0,1545,1543,1,0,0,0,1546,1556,
5,169,0,0,1547,1548,5,169,0,0,1548,1551,5,5,0,0,1549,1552,3,300,150,0,1550,
1552,3,296,148,0,1551,1549,1,0,0,0,1551,1550,1,0,0,0,1552,1553,1,0,0,0,1553,
1554,5,6,0,0,1554,1556,1,0,0,0,1555,1546,1,0,0,0,1555,1547,1,0,0,0,1556,
215,1,0,0,0,1557,1559,3,182,91,0,1558,1557,1,0,0,0,1558,1559,1,0,0,0,1559,
1560,1,0,0,0,1560,1564,3,518,259,0,1561,1562,3,306,153,0,1562,1563,5,14,
0,0,1563,1565,1,0,0,0,1564,1561,1,0,0,0,1564,1565,1,0,0,0,1565,1566,1,0,
0,0,1566,1568,3,308,154,0,1567,1569,3,238,119,0,1568,1567,1,0,0,0,1568,1569,
1,0,0,0,1569,1570,1,0,0,0,1570,1571,3,492,246,0,1571,1572,3,224,112,0,1572,
1575,3,274,137,0,1573,1576,3,248,124,0,1574,1576,3,218,109,0,1575,1573,1,
0,0,0,1575,1574,1,0,0,0,1575,1576,1,0,0,0,1576,217,1,0,0,0,1577,1578,3,416,
208,0,1578,1579,3,220,110,0,1579,219,1,0,0,0,1580,1586,3,222,111,0,1581,
1582,3,358,179,0,1582,1583,3,222,111,0,1583,1585,1,0,0,0,1584,1581,1,0,0,
0,1585,1588,1,0,0,0,1586,1584,1,0,0,0,1586,1587,1,0,0,0,1587,221,1,0,0,0,
1588,1586,1,0,0,0,1589,1590,5,169,0,0,1590,1591,5,171,0,0,1591,1592,3,294,
147,0,1592,223,1,0,0,0,1593,1599,3,226,113,0,1594,1595,3,556,278,0,1595,
1596,3,226,113,0,1596,1598,1,0,0,0,1597,1594,1,0,0,0,1598,1601,1,0,0,0,1599,
1597,1,0,0,0,1599,1600,1,0,0,0,1600,225,1,0,0,0,1601,1599,1,0,0,0,1602,1603,
5,169,0,0,1603,1608,5,171,0,0,1604,1609,3,294,147,0,1605,1609,3,230,115,
0,1606,1609,3,228,114,0,1607,1609,3,232,116,0,1608,1604,1,0,0,0,1608,1605,
1,0,0,0,1608,1606,1,0,0,0,1608,1607,1,0,0,0,1609,1656,1,0,0,0,1610,1611,
5,169,0,0,1611,1612,5,171,0,0,1612,1613,5,169,0,0,1613,1614,7,0,0,0,1614,
1656,3,296,148,0,1615,1616,5,169,0,0,1616,1617,5,171,0,0,1617,1618,5,169,
0,0,1618,1619,7,0,0,0,1619,1656,3,228,114,0,1620,1621,5,169,0,0,1621,1622,
5,171,0,0,1622,1623,3,228,114,0,1623,1624,7,0,0,0,1624,1625,5,169,0,0,1625,
1656,1,0,0,0,1626,1627,5,169,0,0,1627,1628,5,171,0,0,1628,1629,5,169,0,0,
1629,1630,7,0,0,0,1630,1656,3,230,115,0,1631,1632,5,169,0,0,1632,1633,5,
171,0,0,1633,1634,3,230,115,0,1634,1635,7,0,0,0,1635,1636,5,169,0,0,1636,
1656,1,0,0,0,1637,1638,5,169,0,0,1638,1639,5,171,0,0,1639,1640,5,169,0,0,
1640,1641,7,0,0,0,1641,1656,3,232,116,0,1642,1643,5,169,0,0,1643,1644,5,
171,0,0,1644,1645,3,232,116,0,1645,1646,7,0,0,0,1646,1647,5,169,0,0,1647,
1656,1,0,0,0,1648,1649,5,169,0,0,1649,1650,3,552,276,0,1650,1651,3,296,148,
0,1651,1652,3,554,277,0,1652,1653,5,171,0,0,1653,1654,3,294,147,0,1654,1656,
1,0,0,0,1655,1602,1,0,0,0,1655,1610,1,0,0,0,1655,1615,1,0,0,0,1655,1620,
1,0,0,0,1655,1626,1,0,0,0,1655,1631,1,0,0,0,1655,1637,1,0,0,0,1655,1642,
1,0,0,0,1655,1648,1,0,0,0,1656,227,1,0,0,0,1657,1667,3,544,272,0,1658,1664,
3,294,147,0,1659,1660,3,556,278,0,1660,1661,3,294,147,0,1661,1663,1,0,0,
0,1662,1659,1,0,0,0,1663,1666,1,0,0,0,1664,1662,1,0,0,0,1664,1665,1,0,0,
0,1665,1668,1,0,0,0,1666,1664,1,0,0,0,1667,1658,1,0,0,0,1667,1668,1,0,0,
0,1668,1669,1,0,0,0,1669,1670,3,546,273,0,1670,229,1,0,0,0,1671,1672,3,544,
272,0,1672,1673,3,294,147,0,1673,1674,3,558,279,0,1674,1675,3,294,147,0,
1675,1683,1,0,0,0,1676,1677,3,556,278,0,1677,1678,3,294,147,0,1678,1679,
3,558,279,0,1679,1680,3,294,147,0,1680,1682,1,0,0,0,1681,1676,1,0,0,0,1682,
1685,1,0,0,0,1683,1681,1,0,0,0,1683,1684,1,0,0,0,1684,1686,1,0,0,0,1685,
1683,1,0,0,0,1686,1687,3,546,273,0,1687,231,1,0,0,0,1688,1689,3,552,276,
0,1689,1695,3,294,147,0,1690,1691,3,556,278,0,1691,1692,3,294,147,0,1692,
1694,1,0,0,0,1693,1690,1,0,0,0,1694,1697,1,0,0,0,1695,1693,1,0,0,0,1695,
1696,1,0,0,0,1696,1698,1,0,0,0,1697,1695,1,0,0,0,1698,1699,3,554,277,0,1699,
233,1,0,0,0,1700,1701,3,540,270,0,1701,1707,3,258,129,0,1702,1703,3,556,
278,0,1703,1704,3,258,129,0,1704,1706,1,0,0,0,1705,1702,1,0,0,0,1706,1709,
1,0,0,0,1707,1705,1,0,0,0,1707,1708,1,0,0,0,1708,1710,1,0,0,0,1709,1707,
1,0,0,0,1710,1711,3,542,271,0,1711,235,1,0,0,0,1712,1714,3,182,91,0,1713,
1712,1,0,0,0,1713,1714,1,0,0,0,1714,1715,1,0,0,0,1715,1716,3,426,213,0,1716,
1720,3,428,214,0,1717,1718,3,306,153,0,1718,1719,5,14,0,0,1719,1721,1,0,
0,0,1720,1717,1,0,0,0,1720,1721,1,0,0,0,1721,1722,1,0,0,0,1722,1724,3,308,
154,0,1723,1725,3,252,126,0,1724,1723,1,0,0,0,1724,1725,1,0,0,0,1725,1726,
1,0,0,0,1726,1728,3,250,125,0,1727,1729,3,246,123,0,1728,1727,1,0,0,0,1728,
1729,1,0,0,0,1729,1731,1,0,0,0,1730,1732,3,238,119,0,1731,1730,1,0,0,0,1731,
1732,1,0,0,0,1732,237,1,0,0,0,1733,1734,3,526,263,0,1734,1735,3,242,121,
0,1735,1750,1,0,0,0,1736,1737,3,526,263,0,1737,1738,3,242,121,0,1738,1739,
3,358,179,0,1739,1740,3,240,120,0,1740,1750,1,0,0,0,1741,1742,3,526,263,
0,1742,1743,3,240,120,0,1743,1750,1,0,0,0,1744,1745,3,526,263,0,1745,1746,
3,240,120,0,1746,1747,3,358,179,0,1747,1748,3,242,121,0,1748,1750,1,0,0,
0,1749,1733,1,0,0,0,1749,1736,1,0,0,0,1749,1741,1,0,0,0,1749,1744,1,0,0,
0,1750,239,1,0,0,0,1751,1752,3,504,252,0,1752,1753,3,296,148,0,1753,241,
1,0,0,0,1754,1755,3,512,256,0,1755,1756,3,296,148,0,1756,243,1,0,0,0,1757,
1758,3,526,263,0,1758,1759,3,240,120,0,1759,245,1,0,0,0,1760,1761,3,416,
208,0,1761,1762,3,460,230,0,1762,1763,3,400,200,0,1763,247,1,0,0,0,1764,
1765,3,416,208,0,1765,1766,3,400,200,0,1766,249,1,0,0,0,1767,1768,3,528,
264,0,1768,1769,5,1,0,0,1769,1770,3,256,128,0,1770,1771,5,2,0,0,1771,1776,
1,0,0,0,1772,1773,3,432,216,0,1773,1774,3,294,147,0,1774,1776,1,0,0,0,1775,
1767,1,0,0,0,1775,1772,1,0,0,0,1776,251,1,0,0,0,1777,1778,5,1,0,0,1778,1779,
3,254,127,0,1779,1780,5,2,0,0,1780,253,1,0,0,0,1781,1787,3,310,155,0,1782,
1783,3,556,278,0,1783,1784,3,310,155,0,1784,1786,1,0,0,0,1785,1782,1,0,0,
0,1786,1789,1,0,0,0,1787,1785,1,0,0,0,1787,1788,1,0,0,0,1788,255,1,0,0,0,
1789,1787,1,0,0,0,1790,1796,3,258,129,0,1791,1792,3,556,278,0,1792,1793,
3,258,129,0,1793,1795,1,0,0,0,1794,1791,1,0,0,0,1795,1798,1,0,0,0,1796,1794,
1,0,0,0,1796,1797,1,0,0,0,1797,257,1,0,0,0,1798,1796,1,0,0,0,1799,1805,3,
294,147,0,1800,1805,3,230,115,0,1801,1805,3,228,114,0,1802,1805,3,232,116,
0,1803,1805,3,234,117,0,1804,1799,1,0,0,0,1804,1800,1,0,0,0,1804,1801,1,
0,0,0,1804,1802,1,0,0,0,1804,1803,1,0,0,0,1805,259,1,0,0,0,1806,1808,3,490,
245,0,1807,1809,3,276,138,0,1808,1807,1,0,0,0,1808,1809,1,0,0,0,1809,1811,
1,0,0,0,1810,1812,3,432,216,0,1811,1810,1,0,0,0,1811,1812,1,0,0,0,1812,1813,
1,0,0,0,1813,1814,3,278,139,0,1814,1816,3,266,133,0,1815,1817,3,274,137,
0,1816,1815,1,0,0,0,1816,1817,1,0,0,0,1817,1819,1,0,0,0,1818,1820,3,270,
135,0,1819,1818,1,0,0,0,1819,1820,1,0,0,0,1820,1822,1,0,0,0,1821,1823,3,
264,132,0,1822,1821,1,0,0,0,1822,1823,1,0,0,0,1823,1825,1,0,0,0,1824,1826,
3,262,131,0,1825,1824,1,0,0,0,1825,1826,1,0,0,0,1826,261,1,0,0,0,1827,1828,
3,354,177,0,1828,1829,3,402,201,0,1829,263,1,0,0,0,1830,1831,3,444,222,0,
1831,1832,3,296,148,0,1832,265,1,0,0,0,1833,1834,3,406,203,0,1834,1835,3,
268,134,0,1835,267,1,0,0,0,1836,1841,5,169,0,0,1837,1838,5,169,0,0,1838,
1839,5,14,0,0,1839,1841,5,169,0,0,1840,1836,1,0,0,0,1840,1837,1,0,0,0,1841,
269,1,0,0,0,1842,1843,3,472,236,0,1843,1844,3,372,186,0,1844,1845,3,272,
136,0,1845,271,1,0,0,0,1846,1849,5,169,0,0,1847,1850,3,364,182,0,1848,1850,
3,386,193,0,1849,1847,1,0,0,0,1849,1848,1,0,0,0,1849,1850,1,0,0,0,1850,273,
1,0,0,0,1851,1852,3,532,266,0,1852,1853,3,282,141,0,1853,275,1,0,0,0,1854,
1855,3,390,195,0,1855,277,1,0,0,0,1856,1859,5,15,0,0,1857,1859,3,280,140,
0,1858,1856,1,0,0,0,1858,1857,1,0,0,0,1859,1865,1,0,0,0,1860,1861,3,556,
278,0,1861,1862,3,280,140,0,1862,1864,1,0,0,0,1863,1860,1,0,0,0,1864,1867,
1,0,0,0,1865,1863,1,0,0,0,1865,1866,1,0,0,0,1866,279,1,0,0,0,1867,1865,1,
0,0,0,1868,1869,5,169,0,0,1869,1870,5,14,0,0,1870,1884,5,15,0,0,1871,1875,
5,169,0,0,1872,1873,3,362,181,0,1873,1874,5,169,0,0,1874,1876,1,0,0,0,1875,
1872,1,0,0,0,1875,1876,1,0,0,0,1876,1884,1,0,0,0,1877,1881,3,290,145,0,1878,
1879,3,362,181,0,1879,1880,5,169,0,0,1880,1882,1,0,0,0,1881,1878,1,0,0,0,
1881,1882,1,0,0,0,1882,1884,1,0,0,0,1883,1868,1,0,0,0,1883,1871,1,0,0,0,
1883,1877,1,0,0,0,1884,281,1,0,0,0,1885,1891,3,284,142,0,1886,1887,3,358,
179,0,1887,1888,3,284,142,0,1888,1890,1,0,0,0,1889,1886,1,0,0,0,1890,1893,
1,0,0,0,1891,1889,1,0,0,0,1891,1892,1,0,0,0,1892,283,1,0,0,0,1893,1891,1,
0,0,0,1894,1895,5,169,0,0,1895,1896,7,1,0,0,1896,1966,3,294,147,0,1897,1898,
5,169,0,0,1898,1899,5,14,0,0,1899,1900,5,169,0,0,1900,1901,7,1,0,0,1901,
1966,3,294,147,0,1902,1903,3,290,145,0,1903,1904,7,1,0,0,1904,1905,3,294,
147,0,1905,1966,1,0,0,0,1906,1907,3,290,145,0,1907,1908,7,1,0,0,1908,1909,
3,290,145,0,1909,1966,1,0,0,0,1910,1911,5,169,0,0,1911,1912,3,418,209,0,
1912,1914,5,1,0,0,1913,1915,3,292,146,0,1914,1913,1,0,0,0,1914,1915,1,0,
0,0,1915,1916,1,0,0,0,1916,1917,5,2,0,0,1917,1966,1,0,0,0,1918,1919,5,1,
0,0,1919,1925,5,169,0,0,1920,1921,3,556,278,0,1921,1922,5,169,0,0,1922,1924,
1,0,0,0,1923,1920,1,0,0,0,1924,1927,1,0,0,0,1925,1923,1,0,0,0,1925,1926,
1,0,0,0,1926,1928,1,0,0,0,1927,1925,1,0,0,0,1928,1929,5,2,0,0,1929,1930,
3,418,209,0,1930,1931,5,1,0,0,1931,1937,3,234,117,0,1932,1933,3,556,278,
0,1933,1934,3,234,117,0,1934,1936,1,0,0,0,1935,1932,1,0,0,0,1936,1939,1,
0,0,0,1937,1935,1,0,0,0,1937,1938,1,0,0,0,1938,1940,1,0,0,0,1939,1937,1,
0,0,0,1940,1941,5,2,0,0,1941,1966,1,0,0,0,1942,1943,5,1,0,0,1943,1949,5,
169,0,0,1944,1945,3,556,278,0,1945,1946,5,169,0,0,1946,1948,1,0,0,0,1947,
1944,1,0,0,0,1948,1951,1,0,0,0,1949,1947,1,0,0,0,1949,1950,1,0,0,0,1950,
1952,1,0,0,0,1951,1949,1,0,0,0,1952,1953,5,2,0,0,1953,1954,7,1,0,0,1954,
1960,3,234,117,0,1955,1956,3,556,278,0,1956,1957,3,234,117,0,1957,1959,1,
0,0,0,1958,1955,1,0,0,0,1959,1962,1,0,0,0,1960,1958,1,0,0,0,1960,1961,1,
0,0,0,1961,1966,1,0,0,0,1962,1960,1,0,0,0,1963,1966,3,288,144,0,1964,1966,
3,286,143,0,1965,1894,1,0,0,0,1965,1897,1,0,0,0,1965,1902,1,0,0,0,1965,1906,
1,0,0,0,1965,1910,1,0,0,0,1965,1918,1,0,0,0,1965,1942,1,0,0,0,1965,1963,
1,0,0,0,1965,1964,1,0,0,0,1966,285,1,0,0,0,1967,1968,5,169,0,0,1968,1969,
3,380,190,0,1969,1970,3,294,147,0,1970,287,1,0,0,0,1971,1972,5,169,0,0,1972,
1973,3,380,190,0,1973,1974,3,434,217,0,1974,1975,1,0,0,0,1975,1976,3,294,
147,0,1976,289,1,0,0,0,1977,1978,5,169,0,0,1978,1979,5,1,0,0,1979,1980,5,
15,0,0,1980,1988,5,2,0,0,1981,1982,5,169,0,0,1982,1984,5,1,0,0,1983,1985,
3,292,146,0,1984,1983,1,0,0,0,1984,1985,1,0,0,0,1985,1986,1,0,0,0,1986,1988,
5,2,0,0,1987,1977,1,0,0,0,1987,1981,1,0,0,0,1988,291,1,0,0,0,1989,1993,3,
294,147,0,1990,1993,5,169,0,0,1991,1993,3,290,145,0,1992,1989,1,0,0,0,1992,
1990,1,0,0,0,1992,1991,1,0,0,0,1993,2002,1,0,0,0,1994,1998,3,556,278,0,1995,
1999,3,294,147,0,1996,1999,5,169,0,0,1997,1999,3,290,145,0,1998,1995,1,0,
0,0,1998,1996,1,0,0,0,1998,1997,1,0,0,0,1999,2001,1,0,0,0,2000,1994,1,0,
0,0,2001,2004,1,0,0,0,2002,2000,1,0,0,0,2002,2003,1,0,0,0,2003,293,1,0,0,
0,2004,2002,1,0,0,0,2005,2014,5,170,0,0,2006,2014,3,300,150,0,2007,2014,
3,296,148,0,2008,2014,3,298,149,0,2009,2014,3,304,152,0,2010,2014,3,302,
151,0,2011,2014,3,48,24,0,2012,2014,3,462,231,0,2013,2005,1,0,0,0,2013,2006,
1,0,0,0,2013,2007,1,0,0,0,2013,2008,1,0,0,0,2013,2009,1,0,0,0,2013,2010,
1,0,0,0,2013,2011,1,0,0,0,2013,2012,1,0,0,0,2014,295,1,0,0,0,2015,2016,5,
165,0,0,2016,297,1,0,0,0,2017,2018,7,2,0,0,2018,299,1,0,0,0,2019,2020,5,
164,0,0,2020,301,1,0,0,0,2021,2022,7,3,0,0,2022,303,1,0,0,0,2023,2024,5,
167,0,0,2024,305,1,0,0,0,2025,2030,5,169,0,0,2026,2027,5,21,0,0,2027,2028,
5,169,0,0,2028,2030,5,21,0,0,2029,2025,1,0,0,0,2029,2026,1,0,0,0,2030,307,
1,0,0,0,2031,2036,5,169,0,0,2032,2033,5,21,0,0,2033,2034,5,169,0,0,2034,
2036,5,21,0,0,2035,2031,1,0,0,0,2035,2032,1,0,0,0,2036,309,1,0,0,0,2037,
2042,5,169,0,0,2038,2039,5,21,0,0,2039,2040,5,169,0,0,2040,2042,5,21,0,0,
2041,2037,1,0,0,0,2041,2038,1,0,0,0,2042,311,1,0,0,0,2043,2045,3,314,157,
0,2044,2046,3,316,158,0,2045,2044,1,0,0,0,2045,2046,1,0,0,0,2046,313,1,0,
0,0,2047,2048,7,4,0,0,2048,315,1,0,0,0,2049,2050,3,548,274,0,2050,2056,3,
314,157,0,2051,2052,3,556,278,0,2052,2053,3,314,157,0,2053,2055,1,0,0,0,
2054,2051,1,0,0,0,2055,2058,1,0,0,0,2056,2054,1,0,0,0,2056,2057,1,0,0,0,
2057,2059,1,0,0,0,2058,2056,1,0,0,0,2059,2060,3,550,275,0,2060,317,1,0,0,
0,2061,2064,3,364,182,0,2062,2064,3,386,193,0,2063,2061,1,0,0,0,2063,2062,
1,0,0,0,2064,319,1,0,0,0,2065,2066,5,169,0,0,2066,321,1,0,0,0,2067,2068,
5,169,0,0,2068,323,1,0,0,0,2069,2070,3,300,150,0,2070,325,1,0,0,0,2071,2072,
5,169,0,0,2072,327,1,0,0,0,2073,2074,5,169,0,0,2074,329,1,0,0,0,2075,2076,
5,169,0,0,2076,331,1,0,0,0,2077,2078,5,169,0,0,2078,333,1,0,0,0,2079,2080,
5,169,0,0,2080,335,1,0,0,0,2081,2082,5,169,0,0,2082,337,1,0,0,0,2083,2084,
3,300,150,0,2084,339,1,0,0,0,2085,2086,5,169,0,0,2086,341,1,0,0,0,2087,2088,
3,344,172,0,2088,2089,3,312,156,0,2089,343,1,0,0,0,2090,2091,5,169,0,0,2091,
345,1,0,0,0,2092,2093,5,23,0,0,2093,347,1,0,0,0,2094,2095,5,24,0,0,2095,
349,1,0,0,0,2096,2097,5,25,0,0,2097,351,1,0,0,0,2098,2099,5,25,0,0,2099,
2100,5,101,0,0,2100,353,1,0,0,0,2101,2102,5,26,0,0,2102,355,1,0,0,0,2103,
2104,5,27,0,0,2104,357,1,0,0,0,2105,2106,5,28,0,0,2106,359,1,0,0,0,2107,
2108,5,30,0,0,2108,361,1,0,0,0,2109,2110,5,31,0,0,2110,363,1,0,0,0,2111,
2112,5,32,0,0,2112,365,1,0,0,0,2113,2114,5,33,0,0,2114,367,1,0,0,0,2115,
2116,5,34,0,0,2116,369,1,0,0,0,2117,2118,5,35,0,0,2118,371,1,0,0,0,2119,
2120,5,36,0,0,2120,373,1,0,0,0,2121,2122,5,37,0,0,2122,375,1,0,0,0,2123,
2124,5,38,0,0,2124,377,1,0,0,0,2125,2126,5,40,0,0,2126,379,1,0,0,0,2127,
2128,5,42,0,0,2128,381,1,0,0,0,2129,2130,5,43,0,0,2130,383,1,0,0,0,2131,
2132,5,45,0,0,2132,385,1,0,0,0,2133,2134,5,46,0,0,2134,387,1,0,0,0,2135,
2136,5,47,0,0,2136,389,1,0,0,0,2137,2138,5,48,0,0,2138,391,1,0,0,0,2139,
2140,5,49,0,0,2140,393,1,0,0,0,2141,2142,5,50,0,0,2142,395,1,0,0,0,2143,
2144,5,52,0,0,2144,397,1,0,0,0,2145,2146,5,53,0,0,2146,399,1,0,0,0,2147,
2148,5,54,0,0,2148,401,1,0,0,0,2149,2150,5,56,0,0,2150,403,1,0,0,0,2151,
2152,5,57,0,0,2152,405,1,0,0,0,2153,2154,5,58,0,0,2154,407,1,0,0,0,2155,
2156,5,59,0,0,2156,409,1,0,0,0,2157,2158,5,60,0,0,2158,411,1,0,0,0,2159,
2160,5,61,0,0,2160,413,1,0,0,0,2161,2162,5,62,0,0,2162,415,1,0,0,0,2163,
2164,5,63,0,0,2164,417,1,0,0,0,2165,2166,5,64,0,0,2166,419,1,0,0,0,2167,
2168,5,65,0,0,2168,421,1,0,0,0,2169,2170,5,67,0,0,2170,423,1,0,0,0,2171,
2172,5,68,0,0,2172,425,1,0,0,0,2173,2174,5,69,0,0,2174,427,1,0,0,0,2175,
2176,5,70,0,0,2176,429,1,0,0,0,2177,2178,5,71,0,0,2178,431,1,0,0,0,2179,
2180,5,72,0,0,2180,433,1,0,0,0,2181,2182,5,73,0,0,2182,435,1,0,0,0,2183,
2184,5,74,0,0,2184,437,1,0,0,0,2185,2186,5,75,0,0,2186,439,1,0,0,0,2187,
2188,5,76,0,0,2188,441,1,0,0,0,2189,2190,5,77,0,0,2190,443,1,0,0,0,2191,
2192,5,79,0,0,2192,445,1,0,0,0,2193,2194,5,153,0,0,2194,447,1,0,0,0,2195,
2196,5,82,0,0,2196,449,1,0,0,0,2197,2198,5,83,0,0,2198,451,1,0,0,0,2199,
2200,5,84,0,0,2200,453,1,0,0,0,2201,2202,5,85,0,0,2202,455,1,0,0,0,2203,
2204,5,88,0,0,2204,457,1,0,0,0,2205,2206,5,87,0,0,2206,459,1,0,0,0,2207,
2208,5,89,0,0,2208,461,1,0,0,0,2209,2210,5,90,0,0,2210,463,1,0,0,0,2211,
2212,5,91,0,0,2212,465,1,0,0,0,2213,2214,5,92,0,0,2214,467,1,0,0,0,2215,
2216,5,94,0,0,2216,469,1,0,0,0,2217,2218,5,95,0,0,2218,471,1,0,0,0,2219,
2220,5,96,0,0,2220,473,1,0,0,0,2221,2222,5,98,0,0,2222,475,1,0,0,0,2223,
2224,5,102,0,0,2224,477,1,0,0,0,2225,2226,5,104,0,0,2226,479,1,0,0,0,2227,
2228,5,105,0,0,2228,481,1,0,0,0,2229,2230,5,106,0,0,2230,483,1,0,0,0,2231,
2232,5,107,0,0,2232,485,1,0,0,0,2233,2234,5,109,0,0,2234,487,1,0,0,0,2235,
2236,5,110,0,0,2236,489,1,0,0,0,2237,2238,5,112,0,0,2238,491,1,0,0,0,2239,
2240,5,113,0,0,2240,493,1,0,0,0,2241,2242,5,114,0,0,2242,495,1,0,0,0,2243,
2244,5,116,0,0,2244,497,1,0,0,0,2245,2246,5,117,0,0,2246,499,1,0,0,0,2247,
2248,5,118,0,0,2248,501,1,0,0,0,2249,2250,5,119,0,0,2250,503,1,0,0,0,2251,
2252,5,121,0,0,2252,505,1,0,0,0,2253,2254,5,122,0,0,2254,507,1,0,0,0,2255,
2256,5,124,0,0,2256,509,1,0,0,0,2257,2258,5,126,0,0,2258,511,1,0,0,0,2259,
2260,5,127,0,0,2260,513,1,0,0,0,2261,2262,5,129,0,0,2262,515,1,0,0,0,2263,
2264,5,130,0,0,2264,517,1,0,0,0,2265,2266,5,131,0,0,2266,519,1,0,0,0,2267,
2268,5,132,0,0,2268,521,1,0,0,0,2269,2270,5,133,0,0,2270,523,1,0,0,0,2271,
2272,5,176,0,0,2272,525,1,0,0,0,2273,2274,5,134,0,0,2274,527,1,0,0,0,2275,
2276,5,136,0,0,2276,529,1,0,0,0,2277,2278,5,137,0,0,2278,531,1,0,0,0,2279,
2280,5,138,0,0,2280,533,1,0,0,0,2281,2282,5,139,0,0,2282,535,1,0,0,0,2283,
2284,5,108,0,0,2284,537,1,0,0,0,2285,2286,5,0,0,1,2286,539,1,0,0,0,2287,
2288,5,1,0,0,2288,541,1,0,0,0,2289,2290,5,2,0,0,2290,543,1,0,0,0,2291,2292,
5,3,0,0,2292,545,1,0,0,0,2293,2294,5,4,0,0,2294,547,1,0,0,0,2295,2296,5,
172,0,0,2296,549,1,0,0,0,2297,2298,5,173,0,0,2298,551,1,0,0,0,2299,2300,
5,5,0,0,2300,553,1,0,0,0,2301,2302,5,6,0,0,2302,555,1,0,0,0,2303,2304,5,
7,0,0,2304,557,1,0,0,0,2305,2306,5,9,0,0,2306,559,1,0,0,0,175,561,564,570,
575,577,582,585,588,631,648,651,658,663,674,684,699,710,715,724,729,737,
742,746,751,756,771,777,782,792,797,807,819,826,834,848,853,865,869,873,
878,883,902,909,917,921,926,945,954,969,971,983,997,1004,1011,1019,1030,
1046,1059,1069,1092,1106,1113,1122,1141,1149,1155,1160,1167,1172,1180,1185,
1192,1197,1204,1209,1216,1223,1230,1237,1242,1249,1256,1261,1268,1273,1280,
1284,1287,1295,1305,1316,1322,1331,1344,1352,1358,1363,1377,1397,1406,1418,
1422,1426,1440,1448,1457,1468,1473,1480,1483,1489,1498,1504,1522,1526,1530,
1535,1543,1551,1555,1558,1564,1568,1575,1586,1599,1608,1655,1664,1667,1683,
1695,1707,1713,1720,1724,1728,1731,1749,1775,1787,1796,1804,1808,1811,1816,
1819,1822,1825,1840,1849,1858,1865,1875,1881,1883,1891,1914,1925,1937,1949,
1960,1965,1984,1987,1992,1998,2002,2013,2029,2035,2041,2045,2056,2063];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class CqlParser extends antlr4.Parser {

    static grammarFileName = "CqlParser.g4";
    static literalNames = [ null, "'('", "')'", "'{'", "'}'", "'['", "']'", 
                            "','", "';'", "':'", null, null, null, null, 
                            "'.'", "'*'", "'/'", "'%'", "'+'", "'--'", "'-'", 
                            "'\"'", "'''" ];
    static symbolicNames = [ null, "LR_BRACKET", "RR_BRACKET", "LC_BRACKET", 
                             "RC_BRACKET", "LS_BRACKET", "RS_BRACKET", "COMMA", 
                             "SEMI", "COLON", "SPACE", "SPEC_MYSQL_COMMENT", 
                             "COMMENT_INPUT", "LINE_COMMENT", "DOT", "STAR", 
                             "DIVIDE", "MODULE", "PLUS", "MINUSMINUS", "MINUS", 
                             "DQUOTE", "SQUOTE", "K_ADD", "K_AGGREGATE", 
                             "K_ALL", "K_ALLOW", "K_ALTER", "K_AND", "K_ANY", 
                             "K_APPLY", "K_AS", "K_ASC", "K_AUTHORIZE", 
                             "K_BATCH", "K_BEGIN", "K_BY", "K_CALLED", "K_CLUSTERING", 
                             "K_COLUMNFAMILY", "K_COMPACT", "K_CONSISTENCY", 
                             "K_CONTAINS", "K_CREATE", "K_CUSTOM", "K_DELETE", 
                             "K_DESC", "K_DESCRIBE", "K_DISTINCT", "K_DROP", 
                             "K_DURABLE_WRITES", "K_EACH_QUORUM", "K_ENTRIES", 
                             "K_EXECUTE", "K_EXISTS", "K_FALSE", "K_FILTERING", 
                             "K_FINALFUNC", "K_FROM", "K_FULL", "K_FUNCTION", 
                             "K_FUNCTIONS", "K_GRANT", "K_IF", "K_IN", "K_INDEX", 
                             "K_INFINITY", "K_INITCOND", "K_INPUT", "K_INSERT", 
                             "K_INTO", "K_IS", "K_JSON", "K_KEY", "K_KEYS", 
                             "K_KEYSPACE", "K_KEYSPACES", "K_LANGUAGE", 
                             "K_LEVEL", "K_LIMIT", "K_LOCAL_ONE", "K_LOCAL_QUORUM", 
                             "K_LOGGED", "K_LOGIN", "K_MATERIALIZED", "K_MODIFY", 
                             "K_NAN", "K_NORECURSIVE", "K_NOSUPERUSER", 
                             "K_NOT", "K_NULL", "K_OF", "K_ON", "K_ONE", 
                             "K_OPTIONS", "K_OR", "K_ORDER", "K_PARTITION", 
                             "K_PASSWORD", "K_PER", "K_PERMISSION", "K_PERMISSIONS", 
                             "K_PRIMARY", "K_QUORUM", "K_RENAME", "K_REPLACE", 
                             "K_REPLICATION", "K_RETURNS", "K_REVOKE", "K_ROLE", 
                             "K_ROLES", "K_SCHEMA", "K_SELECT", "K_SET", 
                             "K_SFUNC", "K_STATIC", "K_STORAGE", "K_STYPE", 
                             "K_SUPERUSER", "K_TABLE", "K_THREE", "K_TIMESTAMP", 
                             "K_TO", "K_TOKEN", "K_TRIGGER", "K_TRUE", "K_TRUNCATE", 
                             "K_TTL", "K_TWO", "K_TYPE", "K_UNLOGGED", "K_UPDATE", 
                             "K_USE", "K_USER", "K_USING", "K_UUID", "K_VALUES", 
                             "K_VIEW", "K_WHERE", "K_WITH", "K_WRITETIME", 
                             "K_ASCII", "K_BIGINT", "K_BLOB", "K_BOOLEAN", 
                             "K_COUNTER", "K_DATE", "K_DECIMAL", "K_DOUBLE", 
                             "K_FLOAT", "K_FROZEN", "K_INET", "K_INT", "K_LIST", 
                             "K_MAP", "K_SMALLINT", "K_TEXT", "K_TIMEUUID", 
                             "K_TIME", "K_TINYINT", "K_TUPLE", "K_VARCHAR", 
                             "K_VARINT", "CODE_BLOCK", "STRING_LITERAL", 
                             "DECIMAL_LITERAL", "FLOAT_LITERAL", "HEXADECIMAL_LITERAL", 
                             "REAL_LITERAL", "OBJECT_NAME", "UUID", "OPERATOR_EQ", 
                             "OPERATOR_LT", "OPERATOR_GT", "OPERATOR_LTE", 
                             "OPERATOR_GTE", "K_USERS" ];
    static ruleNames = [ "root", "cqls", "statementSeparator", "empty_", 
                         "cql", "revoke", "listUsers", "listRoles", "listPermissions", 
                         "grant", "priviledge", "resource", "createUser", 
                         "createRole", "createType", "typeMemberColumnList", 
                         "createTrigger", "createMaterializedView", "materializedViewWhere", 
                         "columnNotNullList", "columnNotNull", "materializedViewOptions", 
                         "createKeyspace", "createFunction", "codeBlock", 
                         "paramList", "returnMode", "createAggregate", "initCondDefinition", 
                         "initCondHash", "initCondHashItem", "initCondListNested", 
                         "initCondList", "orReplace", "alterUser", "userPassword", 
                         "userSuperUser", "alterType", "alterTypeOperation", 
                         "alterTypeRename", "alterTypeRenameList", "alterTypeRenameItem", 
                         "alterTypeAdd", "alterTypeAlterType", "alterTable", 
                         "alterTableOperation", "alterTableWith", "alterTableRename", 
                         "alterTableDropCompactStorage", "alterTableDropColumns", 
                         "alterTableDropColumnList", "alterTableAdd", "alterTableColumnDefinition", 
                         "alterRole", "roleWith", "roleWithOptions", "alterMaterializedView", 
                         "dropUser", "dropType", "dropMaterializedView", 
                         "dropAggregate", "dropFunction", "dropTrigger", 
                         "dropRole", "dropTable", "dropKeyspace", "dropIndex", 
                         "createTable", "withElement", "clusteringOrder", 
                         "tableOptions", "tableOptionItem", "tableOptionName", 
                         "tableOptionValue", "optionHash", "optionHashItem", 
                         "optionHashKey", "optionHashValue", "columnDefinitionList", 
                         "columnDefinition", "primaryKeyColumn", "primaryKeyElement", 
                         "primaryKeyDefinition", "singlePrimaryKey", "compoundKey", 
                         "compositeKey", "partitionKeyList", "clusteringKeyList", 
                         "partitionKey", "clusteringKey", "applyBatch", 
                         "beginBatch", "batchType", "alterKeyspace", "replicationList", 
                         "replicationListItem", "durableWrites", "use_", 
                         "truncate", "createIndex", "indexName", "indexColumnSpec", 
                         "indexKeysSpec", "indexEntriesSSpec", "indexFullSpec", 
                         "delete_", "deleteColumnList", "deleteColumnItem", 
                         "update", "ifSpec", "ifConditionList", "ifCondition", 
                         "assignments", "assignmentElement", "assignmentSet", 
                         "assignmentMap", "assignmentList", "assignmentTuple", 
                         "insert", "usingTtlTimestamp", "timestamp", "ttl", 
                         "usingTimestampSpec", "ifNotExist", "ifExist", 
                         "insertValuesSpec", "insertColumnSpec", "columnList", 
                         "expressionList", "expression", "select_", "allowFilteringSpec", 
                         "limitSpec", "fromSpec", "fromSpecElement", "orderSpec", 
                         "orderSpecElement", "whereSpec", "distinctSpec", 
                         "selectElements", "selectElement", "relationElements", 
                         "relationElement", "relalationContains", "relalationContainsKey", 
                         "functionCall", "functionArgs", "constant", "decimalLiteral", 
                         "floatLiteral", "stringLiteral", "booleanLiteral", 
                         "hexadecimalLiteral", "keyspace", "table", "column", 
                         "dataType", "dataTypeName", "dataTypeDefinition", 
                         "orderDirection", "role", "trigger", "triggerClass", 
                         "materializedView", "type_", "aggregate", "function_", 
                         "language", "user", "password", "hashKey", "param", 
                         "paramName", "kwAdd", "kwAggregate", "kwAll", "kwAllPermissions", 
                         "kwAllow", "kwAlter", "kwAnd", "kwApply", "kwAs", 
                         "kwAsc", "kwAuthorize", "kwBatch", "kwBegin", "kwBy", 
                         "kwCalled", "kwClustering", "kwCompact", "kwContains", 
                         "kwCreate", "kwDelete", "kwDesc", "kwDescibe", 
                         "kwDistinct", "kwDrop", "kwDurableWrites", "kwEntries", 
                         "kwExecute", "kwExists", "kwFiltering", "kwFinalfunc", 
                         "kwFrom", "kwFull", "kwFunction", "kwFunctions", 
                         "kwGrant", "kwIf", "kwIn", "kwIndex", "kwInitcond", 
                         "kwInput", "kwInsert", "kwInto", "kwIs", "kwJson", 
                         "kwKey", "kwKeys", "kwKeyspace", "kwKeyspaces", 
                         "kwLanguage", "kwLimit", "kwList", "kwLogged", 
                         "kwLogin", "kwMaterialized", "kwModify", "kwNosuperuser", 
                         "kwNorecursive", "kwNot", "kwNull", "kwOf", "kwOn", 
                         "kwOptions", "kwOr", "kwOrder", "kwPassword", "kwPrimary", 
                         "kwRename", "kwReplace", "kwReplication", "kwReturns", 
                         "kwRole", "kwRoles", "kwSelect", "kwSet", "kwSfunc", 
                         "kwStorage", "kwStype", "kwSuperuser", "kwTable", 
                         "kwTimestamp", "kwTo", "kwTrigger", "kwTruncate", 
                         "kwTtl", "kwType", "kwUnlogged", "kwUpdate", "kwUse", 
                         "kwUser", "kwUsers", "kwUsing", "kwValues", "kwView", 
                         "kwWhere", "kwWith", "kwRevoke", "eof", "syntaxBracketLr", 
                         "syntaxBracketRr", "syntaxBracketLc", "syntaxBracketRc", 
                         "syntaxBracketLa", "syntaxBracketRa", "syntaxBracketLs", 
                         "syntaxBracketRs", "syntaxComma", "syntaxColon" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = CqlParser.ruleNames;
        this.literalNames = CqlParser.literalNames;
        this.symbolicNames = CqlParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	root() {
	    let localctx = new RootContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, CqlParser.RULE_root);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 561;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 8)) & ~0x1f) == 0 && ((1 << (_la - 8)) & ((1 << (CqlParser.SEMI - 8)) | (1 << (CqlParser.K_ALTER - 8)) | (1 << (CqlParser.K_APPLY - 8)) | (1 << (CqlParser.K_BEGIN - 8)))) !== 0) || ((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (CqlParser.K_CREATE - 43)) | (1 << (CqlParser.K_DELETE - 43)) | (1 << (CqlParser.K_DROP - 43)) | (1 << (CqlParser.K_GRANT - 43)) | (1 << (CqlParser.K_INSERT - 43)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (CqlParser.K_REVOKE - 108)) | (1 << (CqlParser.K_SELECT - 108)) | (1 << (CqlParser.K_TRUNCATE - 108)) | (1 << (CqlParser.K_UPDATE - 108)) | (1 << (CqlParser.K_USE - 108)))) !== 0) || _la===CqlParser.K_LIST) {
	            this.state = 560;
	            this.cqls();
	        }

	        this.state = 564;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.MINUSMINUS) {
	            this.state = 563;
	            this.match(CqlParser.MINUSMINUS);
	        }

	        this.state = 566;
	        this.eof();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cqls() {
	    let localctx = new CqlsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, CqlParser.RULE_cqls);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 577;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 575;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case CqlParser.K_ALTER:
	                case CqlParser.K_APPLY:
	                case CqlParser.K_BEGIN:
	                case CqlParser.K_CREATE:
	                case CqlParser.K_DELETE:
	                case CqlParser.K_DROP:
	                case CqlParser.K_GRANT:
	                case CqlParser.K_INSERT:
	                case CqlParser.K_REVOKE:
	                case CqlParser.K_SELECT:
	                case CqlParser.K_TRUNCATE:
	                case CqlParser.K_UPDATE:
	                case CqlParser.K_USE:
	                case CqlParser.K_LIST:
	                    this.state = 568;
	                    this.cql();
	                    this.state = 570;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CqlParser.MINUSMINUS) {
	                        this.state = 569;
	                        this.match(CqlParser.MINUSMINUS);
	                    }

	                    this.state = 572;
	                    this.statementSeparator();
	                    break;
	                case CqlParser.SEMI:
	                    this.state = 574;
	                    this.empty_();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 579;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
	        }

	        this.state = 588;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CqlParser.K_ALTER:
	        case CqlParser.K_APPLY:
	        case CqlParser.K_BEGIN:
	        case CqlParser.K_CREATE:
	        case CqlParser.K_DELETE:
	        case CqlParser.K_DROP:
	        case CqlParser.K_GRANT:
	        case CqlParser.K_INSERT:
	        case CqlParser.K_REVOKE:
	        case CqlParser.K_SELECT:
	        case CqlParser.K_TRUNCATE:
	        case CqlParser.K_UPDATE:
	        case CqlParser.K_USE:
	        case CqlParser.K_LIST:
	            this.state = 580;
	            this.cql();
	            this.state = 585;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	            if(la_===1) {
	                this.state = 582;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CqlParser.MINUSMINUS) {
	                    this.state = 581;
	                    this.match(CqlParser.MINUSMINUS);
	                }

	                this.state = 584;
	                this.statementSeparator();

	            }
	            break;
	        case CqlParser.SEMI:
	            this.state = 587;
	            this.empty_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementSeparator() {
	    let localctx = new StatementSeparatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, CqlParser.RULE_statementSeparator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 590;
	        this.match(CqlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	empty_() {
	    let localctx = new Empty_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, CqlParser.RULE_empty_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 592;
	        this.statementSeparator();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cql() {
	    let localctx = new CqlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, CqlParser.RULE_cql);
	    try {
	        this.state = 631;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 594;
	            this.alterKeyspace();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 595;
	            this.alterMaterializedView();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 596;
	            this.alterRole();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 597;
	            this.alterTable();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 598;
	            this.alterType();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 599;
	            this.alterUser();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 600;
	            this.applyBatch();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 601;
	            this.createAggregate();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 602;
	            this.createFunction();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 603;
	            this.createIndex();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 604;
	            this.createKeyspace();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 605;
	            this.createMaterializedView();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 606;
	            this.createRole();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 607;
	            this.createTable();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 608;
	            this.createTrigger();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 609;
	            this.createType();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 610;
	            this.createUser();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 611;
	            this.delete_();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 612;
	            this.dropAggregate();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 613;
	            this.dropFunction();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 614;
	            this.dropIndex();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 615;
	            this.dropKeyspace();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 616;
	            this.dropMaterializedView();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 617;
	            this.dropRole();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 618;
	            this.dropTable();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 619;
	            this.dropTrigger();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 620;
	            this.dropType();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 621;
	            this.dropUser();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 622;
	            this.grant();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 623;
	            this.insert();
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 624;
	            this.listPermissions();
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 625;
	            this.listRoles();
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 626;
	            this.revoke();
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 627;
	            this.select_();
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 628;
	            this.truncate();
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 629;
	            this.update();
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 630;
	            this.use_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revoke() {
	    let localctx = new RevokeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, CqlParser.RULE_revoke);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 633;
	        this.kwRevoke();
	        this.state = 634;
	        this.priviledge();
	        this.state = 635;
	        this.kwOn();
	        this.state = 636;
	        this.resource();
	        this.state = 637;
	        this.kwFrom();
	        this.state = 638;
	        this.role();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listUsers() {
	    let localctx = new ListUsersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, CqlParser.RULE_listUsers);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 640;
	        this.kwList();
	        this.state = 641;
	        this.kwUsers();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listRoles() {
	    let localctx = new ListRolesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, CqlParser.RULE_listRoles);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 643;
	        this.kwList();
	        this.state = 644;
	        this.kwRoles();
	        this.state = 648;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_OF) {
	            this.state = 645;
	            this.kwOf();
	            this.state = 646;
	            this.role();
	        }

	        this.state = 651;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_NORECURSIVE) {
	            this.state = 650;
	            this.kwNorecursive();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listPermissions() {
	    let localctx = new ListPermissionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, CqlParser.RULE_listPermissions);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 653;
	        this.kwList();
	        this.state = 654;
	        this.priviledge();
	        this.state = 658;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_ON) {
	            this.state = 655;
	            this.kwOn();
	            this.state = 656;
	            this.resource();
	        }

	        this.state = 663;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_OF) {
	            this.state = 660;
	            this.kwOf();
	            this.state = 661;
	            this.role();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grant() {
	    let localctx = new GrantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, CqlParser.RULE_grant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 665;
	        this.kwGrant();
	        this.state = 666;
	        this.priviledge();
	        this.state = 667;
	        this.kwOn();
	        this.state = 668;
	        this.resource();
	        this.state = 669;
	        this.kwTo();
	        this.state = 670;
	        this.role();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	priviledge() {
	    let localctx = new PriviledgeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, CqlParser.RULE_priviledge);
	    try {
	        this.state = 684;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CqlParser.K_ALL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 674;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 672;
	                this.kwAll();
	                break;

	            case 2:
	                this.state = 673;
	                this.kwAllPermissions();
	                break;

	            }
	            break;
	        case CqlParser.K_ALTER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 676;
	            this.kwAlter();
	            break;
	        case CqlParser.K_AUTHORIZE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 677;
	            this.kwAuthorize();
	            break;
	        case CqlParser.K_DESCRIBE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 678;
	            this.kwDescibe();
	            break;
	        case CqlParser.K_EXECUTE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 679;
	            this.kwExecute();
	            break;
	        case CqlParser.K_CREATE:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 680;
	            this.kwCreate();
	            break;
	        case CqlParser.K_DROP:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 681;
	            this.kwDrop();
	            break;
	        case CqlParser.K_MODIFY:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 682;
	            this.kwModify();
	            break;
	        case CqlParser.K_SELECT:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 683;
	            this.kwSelect();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resource() {
	    let localctx = new ResourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, CqlParser.RULE_resource);
	    var _la = 0; // Token type
	    try {
	        this.state = 724;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 686;
	            this.kwAll();
	            this.state = 687;
	            this.kwFunctions();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 689;
	            this.kwAll();
	            this.state = 690;
	            this.kwFunctions();
	            this.state = 691;
	            this.kwIn();
	            this.state = 692;
	            this.kwKeyspace();
	            this.state = 693;
	            this.keyspace();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 695;
	            this.kwFunction();
	            this.state = 699;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	            if(la_===1) {
	                this.state = 696;
	                this.keyspace();
	                this.state = 697;
	                this.match(CqlParser.DOT);

	            }
	            this.state = 701;
	            this.function_();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 703;
	            this.kwAll();
	            this.state = 704;
	            this.kwKeyspaces();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 706;
	            this.kwKeyspace();
	            this.state = 707;
	            this.keyspace();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 710;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CqlParser.K_TABLE) {
	                this.state = 709;
	                this.kwTable();
	            }

	            this.state = 715;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	            if(la_===1) {
	                this.state = 712;
	                this.keyspace();
	                this.state = 713;
	                this.match(CqlParser.DOT);

	            }
	            this.state = 717;
	            this.table();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 718;
	            this.kwAll();
	            this.state = 719;
	            this.kwRoles();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 721;
	            this.kwRole();
	            this.state = 722;
	            this.role();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createUser() {
	    let localctx = new CreateUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, CqlParser.RULE_createUser);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 726;
	        this.kwCreate();
	        this.state = 727;
	        this.kwUser();
	        this.state = 729;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_IF) {
	            this.state = 728;
	            this.ifNotExist();
	        }

	        this.state = 731;
	        this.user();
	        this.state = 732;
	        this.kwWith();
	        this.state = 733;
	        this.kwPassword();
	        this.state = 734;
	        this.stringLiteral();
	        this.state = 737;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case CqlParser.K_SUPERUSER:
	        	this.state = 735;
	        	this.kwSuperuser();
	        	break;
	        case CqlParser.K_NOSUPERUSER:
	        	this.state = 736;
	        	this.kwNosuperuser();
	        	break;
	        case CqlParser.EOF:
	        case CqlParser.SEMI:
	        case CqlParser.MINUSMINUS:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createRole() {
	    let localctx = new CreateRoleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, CqlParser.RULE_createRole);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 739;
	        this.kwCreate();
	        this.state = 740;
	        this.kwRole();
	        this.state = 742;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_IF) {
	            this.state = 741;
	            this.ifNotExist();
	        }

	        this.state = 744;
	        this.role();
	        this.state = 746;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_WITH) {
	            this.state = 745;
	            this.roleWith();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createType() {
	    let localctx = new CreateTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, CqlParser.RULE_createType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 748;
	        this.kwCreate();
	        this.state = 749;
	        this.kwType();
	        this.state = 751;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_IF) {
	            this.state = 750;
	            this.ifNotExist();
	        }

	        this.state = 756;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        if(la_===1) {
	            this.state = 753;
	            this.keyspace();
	            this.state = 754;
	            this.match(CqlParser.DOT);

	        }
	        this.state = 758;
	        this.type_();
	        this.state = 759;
	        this.syntaxBracketLr();
	        this.state = 760;
	        this.typeMemberColumnList();
	        this.state = 761;
	        this.syntaxBracketRr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeMemberColumnList() {
	    let localctx = new TypeMemberColumnListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, CqlParser.RULE_typeMemberColumnList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 763;
	        this.column();
	        this.state = 764;
	        this.dataType();
	        this.state = 771;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.COMMA) {
	            this.state = 765;
	            this.syntaxComma();
	            this.state = 766;
	            this.column();
	            this.state = 767;
	            this.dataType();
	            this.state = 773;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTrigger() {
	    let localctx = new CreateTriggerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, CqlParser.RULE_createTrigger);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 774;
	        this.kwCreate();
	        this.state = 775;
	        this.kwTrigger();
	        this.state = 777;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_IF) {
	            this.state = 776;
	            this.ifNotExist();
	        }

	        this.state = 782;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	        if(la_===1) {
	            this.state = 779;
	            this.keyspace();
	            this.state = 780;
	            this.match(CqlParser.DOT);

	        }
	        this.state = 784;
	        this.trigger();
	        this.state = 785;
	        this.kwUsing();
	        this.state = 786;
	        this.triggerClass();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createMaterializedView() {
	    let localctx = new CreateMaterializedViewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, CqlParser.RULE_createMaterializedView);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 788;
	        this.kwCreate();
	        this.state = 789;
	        this.kwMaterialized();
	        this.state = 790;
	        this.kwView();
	        this.state = 792;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_IF) {
	            this.state = 791;
	            this.ifNotExist();
	        }

	        this.state = 797;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	        if(la_===1) {
	            this.state = 794;
	            this.keyspace();
	            this.state = 795;
	            this.match(CqlParser.DOT);

	        }
	        this.state = 799;
	        this.materializedView();
	        this.state = 800;
	        this.kwAs();
	        this.state = 801;
	        this.kwSelect();
	        this.state = 802;
	        this.columnList();
	        this.state = 803;
	        this.kwFrom();
	        this.state = 807;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        if(la_===1) {
	            this.state = 804;
	            this.keyspace();
	            this.state = 805;
	            this.match(CqlParser.DOT);

	        }
	        this.state = 809;
	        this.table();
	        this.state = 810;
	        this.materializedViewWhere();
	        this.state = 811;
	        this.kwPrimary();
	        this.state = 812;
	        this.kwKey();
	        this.state = 813;
	        this.syntaxBracketLr();
	        this.state = 814;
	        this.columnList();
	        this.state = 815;
	        this.syntaxBracketRr();
	        this.state = 819;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_WITH) {
	            this.state = 816;
	            this.kwWith();
	            this.state = 817;
	            this.materializedViewOptions();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	materializedViewWhere() {
	    let localctx = new MaterializedViewWhereContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, CqlParser.RULE_materializedViewWhere);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 821;
	        this.kwWhere();
	        this.state = 822;
	        this.columnNotNullList();
	        this.state = 826;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_AND) {
	            this.state = 823;
	            this.kwAnd();
	            this.state = 824;
	            this.relationElements();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNotNullList() {
	    let localctx = new ColumnNotNullListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, CqlParser.RULE_columnNotNullList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 828;
	        this.columnNotNull();
	        this.state = 834;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 829;
	                this.kwAnd();
	                this.state = 830;
	                this.columnNotNull(); 
	            }
	            this.state = 836;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNotNull() {
	    let localctx = new ColumnNotNullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, CqlParser.RULE_columnNotNull);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 837;
	        this.column();
	        this.state = 838;
	        this.kwIs();
	        this.state = 839;
	        this.kwNot();
	        this.state = 840;
	        this.kwNull();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	materializedViewOptions() {
	    let localctx = new MaterializedViewOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, CqlParser.RULE_materializedViewOptions);
	    try {
	        this.state = 848;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 842;
	            this.tableOptions();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 843;
	            this.tableOptions();
	            this.state = 844;
	            this.kwAnd();
	            this.state = 845;
	            this.clusteringOrder();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 847;
	            this.clusteringOrder();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createKeyspace() {
	    let localctx = new CreateKeyspaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, CqlParser.RULE_createKeyspace);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 850;
	        this.kwCreate();
	        this.state = 851;
	        this.kwKeyspace();
	        this.state = 853;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_IF) {
	            this.state = 852;
	            this.ifNotExist();
	        }

	        this.state = 855;
	        this.keyspace();
	        this.state = 856;
	        this.kwWith();
	        this.state = 857;
	        this.kwReplication();
	        this.state = 858;
	        this.match(CqlParser.OPERATOR_EQ);
	        this.state = 859;
	        this.syntaxBracketLc();
	        this.state = 860;
	        this.replicationList();
	        this.state = 861;
	        this.syntaxBracketRc();
	        this.state = 865;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_AND) {
	            this.state = 862;
	            this.kwAnd();
	            this.state = 863;
	            this.durableWrites();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createFunction() {
	    let localctx = new CreateFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, CqlParser.RULE_createFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 867;
	        this.kwCreate();
	        this.state = 869;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_OR) {
	            this.state = 868;
	            this.orReplace();
	        }

	        this.state = 871;
	        this.kwFunction();
	        this.state = 873;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_IF) {
	            this.state = 872;
	            this.ifNotExist();
	        }

	        this.state = 878;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        if(la_===1) {
	            this.state = 875;
	            this.keyspace();
	            this.state = 876;
	            this.match(CqlParser.DOT);

	        }
	        this.state = 880;
	        this.function_();
	        this.state = 881;
	        this.syntaxBracketLr();
	        this.state = 883;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.OBJECT_NAME) {
	            this.state = 882;
	            this.paramList();
	        }

	        this.state = 885;
	        this.syntaxBracketRr();
	        this.state = 886;
	        this.returnMode();
	        this.state = 887;
	        this.kwReturns();
	        this.state = 888;
	        this.dataType();
	        this.state = 889;
	        this.kwLanguage();
	        this.state = 890;
	        this.language();
	        this.state = 891;
	        this.kwAs();
	        this.state = 892;
	        this.codeBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	codeBlock() {
	    let localctx = new CodeBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, CqlParser.RULE_codeBlock);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 894;
	        this.match(CqlParser.CODE_BLOCK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	paramList() {
	    let localctx = new ParamListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, CqlParser.RULE_paramList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 896;
	        this.param();
	        this.state = 902;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.COMMA) {
	            this.state = 897;
	            this.syntaxComma();
	            this.state = 898;
	            this.param();
	            this.state = 904;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnMode() {
	    let localctx = new ReturnModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, CqlParser.RULE_returnMode);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 909;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CqlParser.K_CALLED:
	            this.state = 905;
	            this.kwCalled();
	            break;
	        case CqlParser.K_RETURNS:
	            this.state = 906;
	            this.kwReturns();
	            this.state = 907;
	            this.kwNull();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 911;
	        this.kwOn();
	        this.state = 912;
	        this.kwNull();
	        this.state = 913;
	        this.kwInput();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createAggregate() {
	    let localctx = new CreateAggregateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, CqlParser.RULE_createAggregate);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 915;
	        this.kwCreate();
	        this.state = 917;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_OR) {
	            this.state = 916;
	            this.orReplace();
	        }

	        this.state = 919;
	        this.kwAggregate();
	        this.state = 921;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_IF) {
	            this.state = 920;
	            this.ifNotExist();
	        }

	        this.state = 926;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        if(la_===1) {
	            this.state = 923;
	            this.keyspace();
	            this.state = 924;
	            this.match(CqlParser.DOT);

	        }
	        this.state = 928;
	        this.aggregate();
	        this.state = 929;
	        this.syntaxBracketLr();
	        this.state = 930;
	        this.dataType();
	        this.state = 931;
	        this.syntaxBracketRr();
	        this.state = 932;
	        this.kwSfunc();
	        this.state = 933;
	        this.function_();
	        this.state = 934;
	        this.kwStype();
	        this.state = 935;
	        this.dataType();
	        this.state = 936;
	        this.kwFinalfunc();
	        this.state = 937;
	        this.function_();
	        this.state = 938;
	        this.kwInitcond();
	        this.state = 939;
	        this.initCondDefinition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initCondDefinition() {
	    let localctx = new InitCondDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, CqlParser.RULE_initCondDefinition);
	    try {
	        this.state = 945;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 941;
	            this.constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 942;
	            this.initCondList();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 943;
	            this.initCondListNested();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 944;
	            this.initCondHash();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initCondHash() {
	    let localctx = new InitCondHashContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, CqlParser.RULE_initCondHash);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 947;
	        this.syntaxBracketLc();
	        this.state = 948;
	        this.initCondHashItem();
	        this.state = 954;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.COMMA) {
	            this.state = 949;
	            this.syntaxComma();
	            this.state = 950;
	            this.initCondHashItem();
	            this.state = 956;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 957;
	        this.syntaxBracketRc();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initCondHashItem() {
	    let localctx = new InitCondHashItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, CqlParser.RULE_initCondHashItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 959;
	        this.hashKey();
	        this.state = 960;
	        this.match(CqlParser.COLON);
	        this.state = 961;
	        this.initCondDefinition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initCondListNested() {
	    let localctx = new InitCondListNestedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, CqlParser.RULE_initCondListNested);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 963;
	        this.syntaxBracketLr();
	        this.state = 964;
	        this.initCondList();
	        this.state = 971;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.LR_BRACKET || _la===CqlParser.COMMA) {
	            this.state = 969;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case CqlParser.COMMA:
	                this.state = 965;
	                this.syntaxComma();
	                this.state = 966;
	                this.constant();
	                break;
	            case CqlParser.LR_BRACKET:
	                this.state = 968;
	                this.initCondList();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 973;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 974;
	        this.syntaxBracketRr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initCondList() {
	    let localctx = new InitCondListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, CqlParser.RULE_initCondList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 976;
	        this.syntaxBracketLr();
	        this.state = 977;
	        this.constant();
	        this.state = 983;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.COMMA) {
	            this.state = 978;
	            this.syntaxComma();
	            this.state = 979;
	            this.constant();
	            this.state = 985;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 986;
	        this.syntaxBracketRr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orReplace() {
	    let localctx = new OrReplaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, CqlParser.RULE_orReplace);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 988;
	        this.kwOr();
	        this.state = 989;
	        this.kwReplace();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterUser() {
	    let localctx = new AlterUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, CqlParser.RULE_alterUser);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 991;
	        this.kwAlter();
	        this.state = 992;
	        this.kwUser();
	        this.state = 993;
	        this.user();
	        this.state = 994;
	        this.kwWith();
	        this.state = 995;
	        this.userPassword();
	        this.state = 997;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_NOSUPERUSER || _la===CqlParser.K_SUPERUSER) {
	            this.state = 996;
	            this.userSuperUser();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userPassword() {
	    let localctx = new UserPasswordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, CqlParser.RULE_userPassword);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 999;
	        this.kwPassword();
	        this.state = 1000;
	        this.stringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userSuperUser() {
	    let localctx = new UserSuperUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, CqlParser.RULE_userSuperUser);
	    try {
	        this.state = 1004;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CqlParser.K_SUPERUSER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1002;
	            this.kwSuperuser();
	            break;
	        case CqlParser.K_NOSUPERUSER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1003;
	            this.kwNosuperuser();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterType() {
	    let localctx = new AlterTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, CqlParser.RULE_alterType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1006;
	        this.kwAlter();
	        this.state = 1007;
	        this.kwType();
	        this.state = 1011;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	        if(la_===1) {
	            this.state = 1008;
	            this.keyspace();
	            this.state = 1009;
	            this.match(CqlParser.DOT);

	        }
	        this.state = 1013;
	        this.type_();
	        this.state = 1014;
	        this.alterTypeOperation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTypeOperation() {
	    let localctx = new AlterTypeOperationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, CqlParser.RULE_alterTypeOperation);
	    try {
	        this.state = 1019;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CqlParser.K_ALTER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1016;
	            this.alterTypeAlterType();
	            break;
	        case CqlParser.K_ADD:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1017;
	            this.alterTypeAdd();
	            break;
	        case CqlParser.K_RENAME:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1018;
	            this.alterTypeRename();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTypeRename() {
	    let localctx = new AlterTypeRenameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, CqlParser.RULE_alterTypeRename);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1021;
	        this.kwRename();
	        this.state = 1022;
	        this.alterTypeRenameList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTypeRenameList() {
	    let localctx = new AlterTypeRenameListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, CqlParser.RULE_alterTypeRenameList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1024;
	        this.alterTypeRenameItem();
	        this.state = 1030;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.K_AND) {
	            this.state = 1025;
	            this.kwAnd();
	            this.state = 1026;
	            this.alterTypeRenameItem();
	            this.state = 1032;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTypeRenameItem() {
	    let localctx = new AlterTypeRenameItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, CqlParser.RULE_alterTypeRenameItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1033;
	        this.column();
	        this.state = 1034;
	        this.kwTo();
	        this.state = 1035;
	        this.column();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTypeAdd() {
	    let localctx = new AlterTypeAddContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, CqlParser.RULE_alterTypeAdd);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1037;
	        this.kwAdd();
	        this.state = 1038;
	        this.column();
	        this.state = 1039;
	        this.dataType();
	        this.state = 1046;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.COMMA) {
	            this.state = 1040;
	            this.syntaxComma();
	            this.state = 1041;
	            this.column();
	            this.state = 1042;
	            this.dataType();
	            this.state = 1048;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTypeAlterType() {
	    let localctx = new AlterTypeAlterTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, CqlParser.RULE_alterTypeAlterType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1049;
	        this.kwAlter();
	        this.state = 1050;
	        this.column();
	        this.state = 1051;
	        this.kwType();
	        this.state = 1052;
	        this.dataType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTable() {
	    let localctx = new AlterTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, CqlParser.RULE_alterTable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1054;
	        this.kwAlter();
	        this.state = 1055;
	        this.kwTable();
	        this.state = 1059;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	        if(la_===1) {
	            this.state = 1056;
	            this.keyspace();
	            this.state = 1057;
	            this.match(CqlParser.DOT);

	        }
	        this.state = 1061;
	        this.table();
	        this.state = 1062;
	        this.alterTableOperation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTableOperation() {
	    let localctx = new AlterTableOperationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, CqlParser.RULE_alterTableOperation);
	    try {
	        this.state = 1069;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1064;
	            this.alterTableAdd();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1065;
	            this.alterTableDropColumns();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1066;
	            this.alterTableDropCompactStorage();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1067;
	            this.alterTableRename();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1068;
	            this.alterTableWith();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTableWith() {
	    let localctx = new AlterTableWithContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, CqlParser.RULE_alterTableWith);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1071;
	        this.kwWith();
	        this.state = 1072;
	        this.tableOptions();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTableRename() {
	    let localctx = new AlterTableRenameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, CqlParser.RULE_alterTableRename);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1074;
	        this.kwRename();
	        this.state = 1075;
	        this.column();
	        this.state = 1076;
	        this.kwTo();
	        this.state = 1077;
	        this.column();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTableDropCompactStorage() {
	    let localctx = new AlterTableDropCompactStorageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, CqlParser.RULE_alterTableDropCompactStorage);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1079;
	        this.kwDrop();
	        this.state = 1080;
	        this.kwCompact();
	        this.state = 1081;
	        this.kwStorage();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTableDropColumns() {
	    let localctx = new AlterTableDropColumnsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, CqlParser.RULE_alterTableDropColumns);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1083;
	        this.kwDrop();
	        this.state = 1084;
	        this.alterTableDropColumnList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTableDropColumnList() {
	    let localctx = new AlterTableDropColumnListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, CqlParser.RULE_alterTableDropColumnList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1086;
	        this.column();
	        this.state = 1092;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.COMMA) {
	            this.state = 1087;
	            this.syntaxComma();
	            this.state = 1088;
	            this.column();
	            this.state = 1094;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTableAdd() {
	    let localctx = new AlterTableAddContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, CqlParser.RULE_alterTableAdd);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1095;
	        this.kwAdd();
	        this.state = 1096;
	        this.alterTableColumnDefinition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTableColumnDefinition() {
	    let localctx = new AlterTableColumnDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, CqlParser.RULE_alterTableColumnDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1098;
	        this.column();
	        this.state = 1099;
	        this.dataType();
	        this.state = 1106;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.COMMA) {
	            this.state = 1100;
	            this.syntaxComma();
	            this.state = 1101;
	            this.column();
	            this.state = 1102;
	            this.dataType();
	            this.state = 1108;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterRole() {
	    let localctx = new AlterRoleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, CqlParser.RULE_alterRole);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1109;
	        this.kwAlter();
	        this.state = 1110;
	        this.kwRole();
	        this.state = 1111;
	        this.role();
	        this.state = 1113;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_WITH) {
	            this.state = 1112;
	            this.roleWith();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	roleWith() {
	    let localctx = new RoleWithContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, CqlParser.RULE_roleWith);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1115;
	        this.kwWith();

	        this.state = 1116;
	        this.roleWithOptions();
	        this.state = 1122;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.K_AND) {
	            this.state = 1117;
	            this.kwAnd();
	            this.state = 1118;
	            this.roleWithOptions();
	            this.state = 1124;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	roleWithOptions() {
	    let localctx = new RoleWithOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, CqlParser.RULE_roleWithOptions);
	    try {
	        this.state = 1141;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CqlParser.K_PASSWORD:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1125;
	            this.kwPassword();
	            this.state = 1126;
	            this.match(CqlParser.OPERATOR_EQ);
	            this.state = 1127;
	            this.stringLiteral();
	            break;
	        case CqlParser.K_LOGIN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1129;
	            this.kwLogin();
	            this.state = 1130;
	            this.match(CqlParser.OPERATOR_EQ);
	            this.state = 1131;
	            this.booleanLiteral();
	            break;
	        case CqlParser.K_SUPERUSER:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1133;
	            this.kwSuperuser();
	            this.state = 1134;
	            this.match(CqlParser.OPERATOR_EQ);
	            this.state = 1135;
	            this.booleanLiteral();
	            break;
	        case CqlParser.K_OPTIONS:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1137;
	            this.kwOptions();
	            this.state = 1138;
	            this.match(CqlParser.OPERATOR_EQ);
	            this.state = 1139;
	            this.optionHash();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterMaterializedView() {
	    let localctx = new AlterMaterializedViewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, CqlParser.RULE_alterMaterializedView);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1143;
	        this.kwAlter();
	        this.state = 1144;
	        this.kwMaterialized();
	        this.state = 1145;
	        this.kwView();
	        this.state = 1149;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	        if(la_===1) {
	            this.state = 1146;
	            this.keyspace();
	            this.state = 1147;
	            this.match(CqlParser.DOT);

	        }
	        this.state = 1151;
	        this.materializedView();
	        this.state = 1155;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_WITH) {
	            this.state = 1152;
	            this.kwWith();
	            this.state = 1153;
	            this.tableOptions();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropUser() {
	    let localctx = new DropUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, CqlParser.RULE_dropUser);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1157;
	        this.kwDrop();
	        this.state = 1158;
	        this.kwUser();
	        this.state = 1160;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_IF) {
	            this.state = 1159;
	            this.ifExist();
	        }

	        this.state = 1162;
	        this.user();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropType() {
	    let localctx = new DropTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, CqlParser.RULE_dropType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1164;
	        this.kwDrop();
	        this.state = 1165;
	        this.kwType();
	        this.state = 1167;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_IF) {
	            this.state = 1166;
	            this.ifExist();
	        }

	        this.state = 1172;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	        if(la_===1) {
	            this.state = 1169;
	            this.keyspace();
	            this.state = 1170;
	            this.match(CqlParser.DOT);

	        }
	        this.state = 1174;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropMaterializedView() {
	    let localctx = new DropMaterializedViewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, CqlParser.RULE_dropMaterializedView);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1176;
	        this.kwDrop();
	        this.state = 1177;
	        this.kwMaterialized();
	        this.state = 1178;
	        this.kwView();
	        this.state = 1180;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_IF) {
	            this.state = 1179;
	            this.ifExist();
	        }

	        this.state = 1185;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        if(la_===1) {
	            this.state = 1182;
	            this.keyspace();
	            this.state = 1183;
	            this.match(CqlParser.DOT);

	        }
	        this.state = 1187;
	        this.materializedView();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropAggregate() {
	    let localctx = new DropAggregateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, CqlParser.RULE_dropAggregate);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1189;
	        this.kwDrop();
	        this.state = 1190;
	        this.kwAggregate();
	        this.state = 1192;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_IF) {
	            this.state = 1191;
	            this.ifExist();
	        }

	        this.state = 1197;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        if(la_===1) {
	            this.state = 1194;
	            this.keyspace();
	            this.state = 1195;
	            this.match(CqlParser.DOT);

	        }
	        this.state = 1199;
	        this.aggregate();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropFunction() {
	    let localctx = new DropFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, CqlParser.RULE_dropFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1201;
	        this.kwDrop();
	        this.state = 1202;
	        this.kwFunction();
	        this.state = 1204;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_IF) {
	            this.state = 1203;
	            this.ifExist();
	        }

	        this.state = 1209;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        if(la_===1) {
	            this.state = 1206;
	            this.keyspace();
	            this.state = 1207;
	            this.match(CqlParser.DOT);

	        }
	        this.state = 1211;
	        this.function_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropTrigger() {
	    let localctx = new DropTriggerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, CqlParser.RULE_dropTrigger);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1213;
	        this.kwDrop();
	        this.state = 1214;
	        this.kwTrigger();
	        this.state = 1216;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_IF) {
	            this.state = 1215;
	            this.ifExist();
	        }

	        this.state = 1218;
	        this.trigger();
	        this.state = 1219;
	        this.kwOn();
	        this.state = 1223;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
	        if(la_===1) {
	            this.state = 1220;
	            this.keyspace();
	            this.state = 1221;
	            this.match(CqlParser.DOT);

	        }
	        this.state = 1225;
	        this.table();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropRole() {
	    let localctx = new DropRoleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, CqlParser.RULE_dropRole);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1227;
	        this.kwDrop();
	        this.state = 1228;
	        this.kwRole();
	        this.state = 1230;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_IF) {
	            this.state = 1229;
	            this.ifExist();
	        }

	        this.state = 1232;
	        this.role();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropTable() {
	    let localctx = new DropTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, CqlParser.RULE_dropTable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1234;
	        this.kwDrop();
	        this.state = 1235;
	        this.kwTable();
	        this.state = 1237;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_IF) {
	            this.state = 1236;
	            this.ifExist();
	        }

	        this.state = 1242;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        if(la_===1) {
	            this.state = 1239;
	            this.keyspace();
	            this.state = 1240;
	            this.match(CqlParser.DOT);

	        }
	        this.state = 1244;
	        this.table();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropKeyspace() {
	    let localctx = new DropKeyspaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, CqlParser.RULE_dropKeyspace);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1246;
	        this.kwDrop();
	        this.state = 1247;
	        this.kwKeyspace();
	        this.state = 1249;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_IF) {
	            this.state = 1248;
	            this.ifExist();
	        }

	        this.state = 1251;
	        this.keyspace();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropIndex() {
	    let localctx = new DropIndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, CqlParser.RULE_dropIndex);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1253;
	        this.kwDrop();
	        this.state = 1254;
	        this.kwIndex();
	        this.state = 1256;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_IF) {
	            this.state = 1255;
	            this.ifExist();
	        }

	        this.state = 1261;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        if(la_===1) {
	            this.state = 1258;
	            this.keyspace();
	            this.state = 1259;
	            this.match(CqlParser.DOT);

	        }
	        this.state = 1263;
	        this.indexName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTable() {
	    let localctx = new CreateTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, CqlParser.RULE_createTable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1265;
	        this.kwCreate();
	        this.state = 1266;
	        this.kwTable();
	        this.state = 1268;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_IF) {
	            this.state = 1267;
	            this.ifNotExist();
	        }

	        this.state = 1273;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
	        if(la_===1) {
	            this.state = 1270;
	            this.keyspace();
	            this.state = 1271;
	            this.match(CqlParser.DOT);

	        }
	        this.state = 1275;
	        this.table();
	        this.state = 1276;
	        this.syntaxBracketLr();
	        this.state = 1277;
	        this.columnDefinitionList();
	        this.state = 1278;
	        this.syntaxBracketRr();
	        this.state = 1280;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_WITH) {
	            this.state = 1279;
	            this.withElement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withElement() {
	    let localctx = new WithElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, CqlParser.RULE_withElement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1282;
	        this.kwWith();
	        this.state = 1284;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.OBJECT_NAME) {
	            this.state = 1283;
	            this.tableOptions();
	        }

	        this.state = 1287;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_CLUSTERING) {
	            this.state = 1286;
	            this.clusteringOrder();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	clusteringOrder() {
	    let localctx = new ClusteringOrderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, CqlParser.RULE_clusteringOrder);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1289;
	        this.kwClustering();
	        this.state = 1290;
	        this.kwOrder();
	        this.state = 1291;
	        this.kwBy();
	        this.state = 1292;
	        this.syntaxBracketLr();
	        this.state = 1293;
	        this.column();
	        this.state = 1295;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_ASC || _la===CqlParser.K_DESC) {
	            this.state = 1294;
	            this.orderDirection();
	        }

	        this.state = 1297;
	        this.syntaxBracketRr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableOptions() {
	    let localctx = new TableOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, CqlParser.RULE_tableOptions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1299;
	        this.tableOptionItem();
	        this.state = 1305;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,89,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1300;
	                this.kwAnd();
	                this.state = 1301;
	                this.tableOptionItem(); 
	            }
	            this.state = 1307;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,89,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableOptionItem() {
	    let localctx = new TableOptionItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, CqlParser.RULE_tableOptionItem);
	    try {
	        this.state = 1316;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1308;
	            this.tableOptionName();
	            this.state = 1309;
	            this.match(CqlParser.OPERATOR_EQ);
	            this.state = 1310;
	            this.tableOptionValue();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1312;
	            this.tableOptionName();
	            this.state = 1313;
	            this.match(CqlParser.OPERATOR_EQ);
	            this.state = 1314;
	            this.optionHash();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableOptionName() {
	    let localctx = new TableOptionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, CqlParser.RULE_tableOptionName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1318;
	        this.match(CqlParser.OBJECT_NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableOptionValue() {
	    let localctx = new TableOptionValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, CqlParser.RULE_tableOptionValue);
	    try {
	        this.state = 1322;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CqlParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1320;
	            this.stringLiteral();
	            break;
	        case CqlParser.DECIMAL_LITERAL:
	        case CqlParser.FLOAT_LITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1321;
	            this.floatLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionHash() {
	    let localctx = new OptionHashContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, CqlParser.RULE_optionHash);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1324;
	        this.syntaxBracketLc();
	        this.state = 1325;
	        this.optionHashItem();
	        this.state = 1331;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.COMMA) {
	            this.state = 1326;
	            this.syntaxComma();
	            this.state = 1327;
	            this.optionHashItem();
	            this.state = 1333;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1334;
	        this.syntaxBracketRc();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionHashItem() {
	    let localctx = new OptionHashItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, CqlParser.RULE_optionHashItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1336;
	        this.optionHashKey();
	        this.state = 1337;
	        this.match(CqlParser.COLON);
	        this.state = 1338;
	        this.optionHashValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionHashKey() {
	    let localctx = new OptionHashKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, CqlParser.RULE_optionHashKey);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1340;
	        this.stringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionHashValue() {
	    let localctx = new OptionHashValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, CqlParser.RULE_optionHashValue);
	    try {
	        this.state = 1344;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CqlParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1342;
	            this.stringLiteral();
	            break;
	        case CqlParser.DECIMAL_LITERAL:
	        case CqlParser.FLOAT_LITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1343;
	            this.floatLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnDefinitionList() {
	    let localctx = new ColumnDefinitionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, CqlParser.RULE_columnDefinitionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1346;
	        this.columnDefinition();
	        this.state = 1352;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,94,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1347;
	                this.syntaxComma();
	                this.state = 1348;
	                this.columnDefinition(); 
	            }
	            this.state = 1354;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,94,this._ctx);
	        }

	        this.state = 1358;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.COMMA) {
	            this.state = 1355;
	            this.syntaxComma();
	            this.state = 1356;
	            this.primaryKeyElement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnDefinition() {
	    let localctx = new ColumnDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, CqlParser.RULE_columnDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1360;
	        this.column();
	        this.state = 1361;
	        this.dataType();
	        this.state = 1363;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_PRIMARY) {
	            this.state = 1362;
	            this.primaryKeyColumn();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryKeyColumn() {
	    let localctx = new PrimaryKeyColumnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, CqlParser.RULE_primaryKeyColumn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1365;
	        this.kwPrimary();
	        this.state = 1366;
	        this.kwKey();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryKeyElement() {
	    let localctx = new PrimaryKeyElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, CqlParser.RULE_primaryKeyElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1368;
	        this.kwPrimary();
	        this.state = 1369;
	        this.kwKey();
	        this.state = 1370;
	        this.syntaxBracketLr();
	        this.state = 1371;
	        this.primaryKeyDefinition();
	        this.state = 1372;
	        this.syntaxBracketRr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryKeyDefinition() {
	    let localctx = new PrimaryKeyDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, CqlParser.RULE_primaryKeyDefinition);
	    try {
	        this.state = 1377;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1374;
	            this.singlePrimaryKey();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1375;
	            this.compoundKey();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1376;
	            this.compositeKey();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singlePrimaryKey() {
	    let localctx = new SinglePrimaryKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, CqlParser.RULE_singlePrimaryKey);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1379;
	        this.column();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compoundKey() {
	    let localctx = new CompoundKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, CqlParser.RULE_compoundKey);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1381;
	        this.partitionKey();

	        this.state = 1382;
	        this.syntaxComma();
	        this.state = 1383;
	        this.clusteringKeyList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compositeKey() {
	    let localctx = new CompositeKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, CqlParser.RULE_compositeKey);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1385;
	        this.syntaxBracketLr();
	        this.state = 1386;
	        this.partitionKeyList();
	        this.state = 1387;
	        this.syntaxBracketRr();

	        this.state = 1388;
	        this.syntaxComma();
	        this.state = 1389;
	        this.clusteringKeyList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionKeyList() {
	    let localctx = new PartitionKeyListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, CqlParser.RULE_partitionKeyList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1391;
	        this.partitionKey();
	        this.state = 1397;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.COMMA) {
	            this.state = 1392;
	            this.syntaxComma();
	            this.state = 1393;
	            this.partitionKey();
	            this.state = 1399;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	clusteringKeyList() {
	    let localctx = new ClusteringKeyListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, CqlParser.RULE_clusteringKeyList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1400;
	        this.clusteringKey();
	        this.state = 1406;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.COMMA) {
	            this.state = 1401;
	            this.syntaxComma();
	            this.state = 1402;
	            this.clusteringKey();
	            this.state = 1408;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionKey() {
	    let localctx = new PartitionKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, CqlParser.RULE_partitionKey);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1409;
	        this.column();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	clusteringKey() {
	    let localctx = new ClusteringKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, CqlParser.RULE_clusteringKey);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1411;
	        this.column();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	applyBatch() {
	    let localctx = new ApplyBatchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, CqlParser.RULE_applyBatch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1413;
	        this.kwApply();
	        this.state = 1414;
	        this.kwBatch();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	beginBatch() {
	    let localctx = new BeginBatchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, CqlParser.RULE_beginBatch);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1416;
	        this.kwBegin();
	        this.state = 1418;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_LOGGED || _la===CqlParser.K_UNLOGGED) {
	            this.state = 1417;
	            this.batchType();
	        }

	        this.state = 1420;
	        this.kwBatch();
	        this.state = 1422;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_USING) {
	            this.state = 1421;
	            this.usingTimestampSpec();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	batchType() {
	    let localctx = new BatchTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, CqlParser.RULE_batchType);
	    try {
	        this.state = 1426;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CqlParser.K_LOGGED:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1424;
	            this.kwLogged();
	            break;
	        case CqlParser.K_UNLOGGED:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1425;
	            this.kwUnlogged();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterKeyspace() {
	    let localctx = new AlterKeyspaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, CqlParser.RULE_alterKeyspace);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1428;
	        this.kwAlter();
	        this.state = 1429;
	        this.kwKeyspace();
	        this.state = 1430;
	        this.keyspace();
	        this.state = 1431;
	        this.kwWith();
	        this.state = 1432;
	        this.kwReplication();
	        this.state = 1433;
	        this.match(CqlParser.OPERATOR_EQ);
	        this.state = 1434;
	        this.syntaxBracketLc();
	        this.state = 1435;
	        this.replicationList();
	        this.state = 1436;
	        this.syntaxBracketRc();
	        this.state = 1440;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_AND) {
	            this.state = 1437;
	            this.kwAnd();
	            this.state = 1438;
	            this.durableWrites();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replicationList() {
	    let localctx = new ReplicationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, CqlParser.RULE_replicationList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1442;
	        this.replicationListItem();
	        this.state = 1448;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.COMMA) {
	            this.state = 1443;
	            this.syntaxComma();
	            this.state = 1444;
	            this.replicationListItem();
	            this.state = 1450;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replicationListItem() {
	    let localctx = new ReplicationListItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, CqlParser.RULE_replicationListItem);
	    try {
	        this.state = 1457;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1451;
	            this.match(CqlParser.STRING_LITERAL);
	            this.state = 1452;
	            this.match(CqlParser.COLON);
	            this.state = 1453;
	            this.match(CqlParser.STRING_LITERAL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1454;
	            this.match(CqlParser.STRING_LITERAL);
	            this.state = 1455;
	            this.match(CqlParser.COLON);
	            this.state = 1456;
	            this.match(CqlParser.DECIMAL_LITERAL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durableWrites() {
	    let localctx = new DurableWritesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, CqlParser.RULE_durableWrites);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1459;
	        this.kwDurableWrites();
	        this.state = 1460;
	        this.match(CqlParser.OPERATOR_EQ);
	        this.state = 1461;
	        this.booleanLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	use_() {
	    let localctx = new Use_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, CqlParser.RULE_use_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1463;
	        this.kwUse();
	        this.state = 1464;
	        this.keyspace();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	truncate() {
	    let localctx = new TruncateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, CqlParser.RULE_truncate);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1466;
	        this.kwTruncate();
	        this.state = 1468;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_TABLE) {
	            this.state = 1467;
	            this.kwTable();
	        }

	        this.state = 1473;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	        if(la_===1) {
	            this.state = 1470;
	            this.keyspace();
	            this.state = 1471;
	            this.match(CqlParser.DOT);

	        }
	        this.state = 1475;
	        this.table();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createIndex() {
	    let localctx = new CreateIndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, CqlParser.RULE_createIndex);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1477;
	        this.kwCreate();
	        this.state = 1478;
	        this.kwIndex();
	        this.state = 1480;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_IF) {
	            this.state = 1479;
	            this.ifNotExist();
	        }

	        this.state = 1483;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.STRING_LITERAL || _la===CqlParser.OBJECT_NAME) {
	            this.state = 1482;
	            this.indexName();
	        }

	        this.state = 1485;
	        this.kwOn();
	        this.state = 1489;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
	        if(la_===1) {
	            this.state = 1486;
	            this.keyspace();
	            this.state = 1487;
	            this.match(CqlParser.DOT);

	        }
	        this.state = 1491;
	        this.table();
	        this.state = 1492;
	        this.syntaxBracketLr();
	        this.state = 1493;
	        this.indexColumnSpec();
	        this.state = 1494;
	        this.syntaxBracketRr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexName() {
	    let localctx = new IndexNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, CqlParser.RULE_indexName);
	    try {
	        this.state = 1498;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CqlParser.OBJECT_NAME:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1496;
	            this.match(CqlParser.OBJECT_NAME);
	            break;
	        case CqlParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1497;
	            this.stringLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexColumnSpec() {
	    let localctx = new IndexColumnSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, CqlParser.RULE_indexColumnSpec);
	    try {
	        this.state = 1504;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CqlParser.DQUOTE:
	        case CqlParser.OBJECT_NAME:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1500;
	            this.column();
	            break;
	        case CqlParser.K_KEYS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1501;
	            this.indexKeysSpec();
	            break;
	        case CqlParser.K_ENTRIES:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1502;
	            this.indexEntriesSSpec();
	            break;
	        case CqlParser.K_FULL:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1503;
	            this.indexFullSpec();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexKeysSpec() {
	    let localctx = new IndexKeysSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, CqlParser.RULE_indexKeysSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1506;
	        this.kwKeys();
	        this.state = 1507;
	        this.syntaxBracketLr();
	        this.state = 1508;
	        this.match(CqlParser.OBJECT_NAME);
	        this.state = 1509;
	        this.syntaxBracketRr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexEntriesSSpec() {
	    let localctx = new IndexEntriesSSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, CqlParser.RULE_indexEntriesSSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1511;
	        this.kwEntries();
	        this.state = 1512;
	        this.syntaxBracketLr();
	        this.state = 1513;
	        this.match(CqlParser.OBJECT_NAME);
	        this.state = 1514;
	        this.syntaxBracketRr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexFullSpec() {
	    let localctx = new IndexFullSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, CqlParser.RULE_indexFullSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1516;
	        this.kwFull();
	        this.state = 1517;
	        this.syntaxBracketLr();
	        this.state = 1518;
	        this.match(CqlParser.OBJECT_NAME);
	        this.state = 1519;
	        this.syntaxBracketRr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delete_() {
	    let localctx = new Delete_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, CqlParser.RULE_delete_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1522;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_BEGIN) {
	            this.state = 1521;
	            this.beginBatch();
	        }

	        this.state = 1524;
	        this.kwDelete();
	        this.state = 1526;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.OBJECT_NAME) {
	            this.state = 1525;
	            this.deleteColumnList();
	        }

	        this.state = 1528;
	        this.fromSpec();
	        this.state = 1530;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_USING) {
	            this.state = 1529;
	            this.usingTimestampSpec();
	        }

	        this.state = 1532;
	        this.whereSpec();
	        this.state = 1535;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	        if(la_===1) {
	            this.state = 1533;
	            this.ifExist();

	        } else if(la_===2) {
	            this.state = 1534;
	            this.ifSpec();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteColumnList() {
	    let localctx = new DeleteColumnListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, CqlParser.RULE_deleteColumnList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1537;
	        this.deleteColumnItem();
	        this.state = 1543;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.COMMA) {
	            this.state = 1538;
	            this.syntaxComma();
	            this.state = 1539;
	            this.deleteColumnItem();
	            this.state = 1545;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteColumnItem() {
	    let localctx = new DeleteColumnItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, CqlParser.RULE_deleteColumnItem);
	    try {
	        this.state = 1555;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1546;
	            this.match(CqlParser.OBJECT_NAME);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1547;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1548;
	            this.match(CqlParser.LS_BRACKET);
	            this.state = 1551;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case CqlParser.STRING_LITERAL:
	                this.state = 1549;
	                this.stringLiteral();
	                break;
	            case CqlParser.DECIMAL_LITERAL:
	                this.state = 1550;
	                this.decimalLiteral();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1553;
	            this.match(CqlParser.RS_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	update() {
	    let localctx = new UpdateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, CqlParser.RULE_update);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1558;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_BEGIN) {
	            this.state = 1557;
	            this.beginBatch();
	        }

	        this.state = 1560;
	        this.kwUpdate();
	        this.state = 1564;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	        if(la_===1) {
	            this.state = 1561;
	            this.keyspace();
	            this.state = 1562;
	            this.match(CqlParser.DOT);

	        }
	        this.state = 1566;
	        this.table();
	        this.state = 1568;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_USING) {
	            this.state = 1567;
	            this.usingTtlTimestamp();
	        }

	        this.state = 1570;
	        this.kwSet();
	        this.state = 1571;
	        this.assignments();
	        this.state = 1572;
	        this.whereSpec();
	        this.state = 1575;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	        if(la_===1) {
	            this.state = 1573;
	            this.ifExist();

	        } else if(la_===2) {
	            this.state = 1574;
	            this.ifSpec();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifSpec() {
	    let localctx = new IfSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, CqlParser.RULE_ifSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1577;
	        this.kwIf();
	        this.state = 1578;
	        this.ifConditionList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifConditionList() {
	    let localctx = new IfConditionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, CqlParser.RULE_ifConditionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1580;
	        this.ifCondition();
	        this.state = 1586;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.K_AND) {
	            this.state = 1581;
	            this.kwAnd();
	            this.state = 1582;
	            this.ifCondition();
	            this.state = 1588;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifCondition() {
	    let localctx = new IfConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, CqlParser.RULE_ifCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1589;
	        this.match(CqlParser.OBJECT_NAME);
	        this.state = 1590;
	        this.match(CqlParser.OPERATOR_EQ);
	        this.state = 1591;
	        this.constant();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignments() {
	    let localctx = new AssignmentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, CqlParser.RULE_assignments);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1593;
	        this.assignmentElement();
	        this.state = 1599;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.COMMA) {
	            this.state = 1594;
	            this.syntaxComma();
	            this.state = 1595;
	            this.assignmentElement();
	            this.state = 1601;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentElement() {
	    let localctx = new AssignmentElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, CqlParser.RULE_assignmentElement);
	    var _la = 0; // Token type
	    try {
	        this.state = 1655;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1602;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1603;
	            this.match(CqlParser.OPERATOR_EQ);
	            this.state = 1608;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1604;
	                this.constant();
	                break;

	            case 2:
	                this.state = 1605;
	                this.assignmentMap();
	                break;

	            case 3:
	                this.state = 1606;
	                this.assignmentSet();
	                break;

	            case 4:
	                this.state = 1607;
	                this.assignmentList();
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1610;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1611;
	            this.match(CqlParser.OPERATOR_EQ);
	            this.state = 1612;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1613;
	            _la = this._input.LA(1);
	            if(!(_la===CqlParser.PLUS || _la===CqlParser.MINUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1614;
	            this.decimalLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1615;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1616;
	            this.match(CqlParser.OPERATOR_EQ);
	            this.state = 1617;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1618;
	            _la = this._input.LA(1);
	            if(!(_la===CqlParser.PLUS || _la===CqlParser.MINUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1619;
	            this.assignmentSet();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1620;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1621;
	            this.match(CqlParser.OPERATOR_EQ);
	            this.state = 1622;
	            this.assignmentSet();
	            this.state = 1623;
	            _la = this._input.LA(1);
	            if(!(_la===CqlParser.PLUS || _la===CqlParser.MINUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1624;
	            this.match(CqlParser.OBJECT_NAME);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1626;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1627;
	            this.match(CqlParser.OPERATOR_EQ);
	            this.state = 1628;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1629;
	            _la = this._input.LA(1);
	            if(!(_la===CqlParser.PLUS || _la===CqlParser.MINUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1630;
	            this.assignmentMap();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1631;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1632;
	            this.match(CqlParser.OPERATOR_EQ);
	            this.state = 1633;
	            this.assignmentMap();
	            this.state = 1634;
	            _la = this._input.LA(1);
	            if(!(_la===CqlParser.PLUS || _la===CqlParser.MINUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1635;
	            this.match(CqlParser.OBJECT_NAME);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1637;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1638;
	            this.match(CqlParser.OPERATOR_EQ);
	            this.state = 1639;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1640;
	            _la = this._input.LA(1);
	            if(!(_la===CqlParser.PLUS || _la===CqlParser.MINUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1641;
	            this.assignmentList();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1642;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1643;
	            this.match(CqlParser.OPERATOR_EQ);
	            this.state = 1644;
	            this.assignmentList();
	            this.state = 1645;
	            _la = this._input.LA(1);
	            if(!(_la===CqlParser.PLUS || _la===CqlParser.MINUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1646;
	            this.match(CqlParser.OBJECT_NAME);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1648;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1649;
	            this.syntaxBracketLs();
	            this.state = 1650;
	            this.decimalLiteral();
	            this.state = 1651;
	            this.syntaxBracketRs();
	            this.state = 1652;
	            this.match(CqlParser.OPERATOR_EQ);
	            this.state = 1653;
	            this.constant();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentSet() {
	    let localctx = new AssignmentSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, CqlParser.RULE_assignmentSet);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1657;
	        this.syntaxBracketLc();
	        this.state = 1667;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_FALSE || _la===CqlParser.K_NULL || _la===CqlParser.K_TRUE || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (CqlParser.CODE_BLOCK - 163)) | (1 << (CqlParser.STRING_LITERAL - 163)) | (1 << (CqlParser.DECIMAL_LITERAL - 163)) | (1 << (CqlParser.FLOAT_LITERAL - 163)) | (1 << (CqlParser.HEXADECIMAL_LITERAL - 163)) | (1 << (CqlParser.UUID - 163)))) !== 0)) {
	            this.state = 1658;
	            this.constant();
	            this.state = 1664;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CqlParser.COMMA) {
	                this.state = 1659;
	                this.syntaxComma();
	                this.state = 1660;
	                this.constant();
	                this.state = 1666;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1669;
	        this.syntaxBracketRc();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentMap() {
	    let localctx = new AssignmentMapContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, CqlParser.RULE_assignmentMap);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1671;
	        this.syntaxBracketLc();

	        this.state = 1672;
	        this.constant();
	        this.state = 1673;
	        this.syntaxColon();
	        this.state = 1674;
	        this.constant();
	        this.state = 1683;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.COMMA) {
	            this.state = 1676;
	            this.syntaxComma();
	            this.state = 1677;
	            this.constant();
	            this.state = 1678;
	            this.syntaxColon();
	            this.state = 1679;
	            this.constant();
	            this.state = 1685;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1686;
	        this.syntaxBracketRc();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentList() {
	    let localctx = new AssignmentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, CqlParser.RULE_assignmentList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1688;
	        this.syntaxBracketLs();
	        this.state = 1689;
	        this.constant();
	        this.state = 1695;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.COMMA) {
	            this.state = 1690;
	            this.syntaxComma();
	            this.state = 1691;
	            this.constant();
	            this.state = 1697;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1698;
	        this.syntaxBracketRs();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentTuple() {
	    let localctx = new AssignmentTupleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, CqlParser.RULE_assignmentTuple);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1700;
	        this.syntaxBracketLr();

	        this.state = 1701;
	        this.expression();
	        this.state = 1707;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.COMMA) {
	            this.state = 1702;
	            this.syntaxComma();
	            this.state = 1703;
	            this.expression();
	            this.state = 1709;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1710;
	        this.syntaxBracketRr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insert() {
	    let localctx = new InsertContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, CqlParser.RULE_insert);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1713;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_BEGIN) {
	            this.state = 1712;
	            this.beginBatch();
	        }

	        this.state = 1715;
	        this.kwInsert();
	        this.state = 1716;
	        this.kwInto();
	        this.state = 1720;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
	        if(la_===1) {
	            this.state = 1717;
	            this.keyspace();
	            this.state = 1718;
	            this.match(CqlParser.DOT);

	        }
	        this.state = 1722;
	        this.table();
	        this.state = 1724;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.LR_BRACKET) {
	            this.state = 1723;
	            this.insertColumnSpec();
	        }

	        this.state = 1726;
	        this.insertValuesSpec();
	        this.state = 1728;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_IF) {
	            this.state = 1727;
	            this.ifNotExist();
	        }

	        this.state = 1731;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_USING) {
	            this.state = 1730;
	            this.usingTtlTimestamp();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	usingTtlTimestamp() {
	    let localctx = new UsingTtlTimestampContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, CqlParser.RULE_usingTtlTimestamp);
	    try {
	        this.state = 1749;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1733;
	            this.kwUsing();
	            this.state = 1734;
	            this.ttl();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1736;
	            this.kwUsing();
	            this.state = 1737;
	            this.ttl();
	            this.state = 1738;
	            this.kwAnd();
	            this.state = 1739;
	            this.timestamp();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1741;
	            this.kwUsing();
	            this.state = 1742;
	            this.timestamp();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1744;
	            this.kwUsing();
	            this.state = 1745;
	            this.timestamp();
	            this.state = 1746;
	            this.kwAnd();
	            this.state = 1747;
	            this.ttl();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timestamp() {
	    let localctx = new TimestampContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, CqlParser.RULE_timestamp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1751;
	        this.kwTimestamp();
	        this.state = 1752;
	        this.decimalLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ttl() {
	    let localctx = new TtlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, CqlParser.RULE_ttl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1754;
	        this.kwTtl();
	        this.state = 1755;
	        this.decimalLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	usingTimestampSpec() {
	    let localctx = new UsingTimestampSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, CqlParser.RULE_usingTimestampSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1757;
	        this.kwUsing();
	        this.state = 1758;
	        this.timestamp();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifNotExist() {
	    let localctx = new IfNotExistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, CqlParser.RULE_ifNotExist);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1760;
	        this.kwIf();
	        this.state = 1761;
	        this.kwNot();
	        this.state = 1762;
	        this.kwExists();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifExist() {
	    let localctx = new IfExistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, CqlParser.RULE_ifExist);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1764;
	        this.kwIf();
	        this.state = 1765;
	        this.kwExists();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertValuesSpec() {
	    let localctx = new InsertValuesSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, CqlParser.RULE_insertValuesSpec);
	    try {
	        this.state = 1775;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CqlParser.K_VALUES:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1767;
	            this.kwValues();
	            this.state = 1768;
	            this.match(CqlParser.LR_BRACKET);
	            this.state = 1769;
	            this.expressionList();
	            this.state = 1770;
	            this.match(CqlParser.RR_BRACKET);
	            break;
	        case CqlParser.K_JSON:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1772;
	            this.kwJson();
	            this.state = 1773;
	            this.constant();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertColumnSpec() {
	    let localctx = new InsertColumnSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, CqlParser.RULE_insertColumnSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1777;
	        this.match(CqlParser.LR_BRACKET);
	        this.state = 1778;
	        this.columnList();
	        this.state = 1779;
	        this.match(CqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnList() {
	    let localctx = new ColumnListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, CqlParser.RULE_columnList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1781;
	        this.column();
	        this.state = 1787;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.COMMA) {
	            this.state = 1782;
	            this.syntaxComma();
	            this.state = 1783;
	            this.column();
	            this.state = 1789;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionList() {
	    let localctx = new ExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, CqlParser.RULE_expressionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1790;
	        this.expression();
	        this.state = 1796;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.COMMA) {
	            this.state = 1791;
	            this.syntaxComma();
	            this.state = 1792;
	            this.expression();
	            this.state = 1798;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, CqlParser.RULE_expression);
	    try {
	        this.state = 1804;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1799;
	            this.constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1800;
	            this.assignmentMap();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1801;
	            this.assignmentSet();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1802;
	            this.assignmentList();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1803;
	            this.assignmentTuple();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_() {
	    let localctx = new Select_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, CqlParser.RULE_select_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1806;
	        this.kwSelect();
	        this.state = 1808;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_DISTINCT) {
	            this.state = 1807;
	            this.distinctSpec();
	        }

	        this.state = 1811;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_JSON) {
	            this.state = 1810;
	            this.kwJson();
	        }

	        this.state = 1813;
	        this.selectElements();
	        this.state = 1814;
	        this.fromSpec();
	        this.state = 1816;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_WHERE) {
	            this.state = 1815;
	            this.whereSpec();
	        }

	        this.state = 1819;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_ORDER) {
	            this.state = 1818;
	            this.orderSpec();
	        }

	        this.state = 1822;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_LIMIT) {
	            this.state = 1821;
	            this.limitSpec();
	        }

	        this.state = 1825;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.K_ALLOW) {
	            this.state = 1824;
	            this.allowFilteringSpec();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	allowFilteringSpec() {
	    let localctx = new AllowFilteringSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, CqlParser.RULE_allowFilteringSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1827;
	        this.kwAllow();
	        this.state = 1828;
	        this.kwFiltering();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitSpec() {
	    let localctx = new LimitSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, CqlParser.RULE_limitSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1830;
	        this.kwLimit();
	        this.state = 1831;
	        this.decimalLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromSpec() {
	    let localctx = new FromSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, CqlParser.RULE_fromSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1833;
	        this.kwFrom();
	        this.state = 1834;
	        this.fromSpecElement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromSpecElement() {
	    let localctx = new FromSpecElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, CqlParser.RULE_fromSpecElement);
	    try {
	        this.state = 1840;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1836;
	            this.match(CqlParser.OBJECT_NAME);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1837;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1838;
	            this.match(CqlParser.DOT);
	            this.state = 1839;
	            this.match(CqlParser.OBJECT_NAME);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderSpec() {
	    let localctx = new OrderSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, CqlParser.RULE_orderSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1842;
	        this.kwOrder();
	        this.state = 1843;
	        this.kwBy();
	        this.state = 1844;
	        this.orderSpecElement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderSpecElement() {
	    let localctx = new OrderSpecElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, CqlParser.RULE_orderSpecElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1846;
	        this.match(CqlParser.OBJECT_NAME);
	        this.state = 1849;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case CqlParser.K_ASC:
	        	this.state = 1847;
	        	this.kwAsc();
	        	break;
	        case CqlParser.K_DESC:
	        	this.state = 1848;
	        	this.kwDesc();
	        	break;
	        case CqlParser.EOF:
	        case CqlParser.SEMI:
	        case CqlParser.MINUSMINUS:
	        case CqlParser.K_ALLOW:
	        case CqlParser.K_LIMIT:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereSpec() {
	    let localctx = new WhereSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, CqlParser.RULE_whereSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1851;
	        this.kwWhere();
	        this.state = 1852;
	        this.relationElements();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	distinctSpec() {
	    let localctx = new DistinctSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, CqlParser.RULE_distinctSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1854;
	        this.kwDistinct();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectElements() {
	    let localctx = new SelectElementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, CqlParser.RULE_selectElements);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1858;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CqlParser.STAR:
	            this.state = 1856;
	            localctx.star = this.match(CqlParser.STAR);
	            break;
	        case CqlParser.OBJECT_NAME:
	            this.state = 1857;
	            this.selectElement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1865;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.COMMA) {
	            this.state = 1860;
	            this.syntaxComma();
	            this.state = 1861;
	            this.selectElement();
	            this.state = 1867;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectElement() {
	    let localctx = new SelectElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, CqlParser.RULE_selectElement);
	    var _la = 0; // Token type
	    try {
	        this.state = 1883;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1868;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1869;
	            this.match(CqlParser.DOT);
	            this.state = 1870;
	            this.match(CqlParser.STAR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1871;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1875;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CqlParser.K_AS) {
	                this.state = 1872;
	                this.kwAs();
	                this.state = 1873;
	                this.match(CqlParser.OBJECT_NAME);
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1877;
	            this.functionCall();
	            this.state = 1881;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CqlParser.K_AS) {
	                this.state = 1878;
	                this.kwAs();
	                this.state = 1879;
	                this.match(CqlParser.OBJECT_NAME);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationElements() {
	    let localctx = new RelationElementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, CqlParser.RULE_relationElements);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1885;
	        this.relationElement();
	        this.state = 1891;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.K_AND) {
	            this.state = 1886;
	            this.kwAnd();
	            this.state = 1887;
	            this.relationElement();
	            this.state = 1893;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationElement() {
	    let localctx = new RelationElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, CqlParser.RULE_relationElement);
	    var _la = 0; // Token type
	    try {
	        this.state = 1965;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1894;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1895;
	            _la = this._input.LA(1);
	            if(!(((((_la - 171)) & ~0x1f) == 0 && ((1 << (_la - 171)) & ((1 << (CqlParser.OPERATOR_EQ - 171)) | (1 << (CqlParser.OPERATOR_LT - 171)) | (1 << (CqlParser.OPERATOR_GT - 171)) | (1 << (CqlParser.OPERATOR_LTE - 171)) | (1 << (CqlParser.OPERATOR_GTE - 171)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1896;
	            this.constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1897;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1898;
	            this.match(CqlParser.DOT);
	            this.state = 1899;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1900;
	            _la = this._input.LA(1);
	            if(!(((((_la - 171)) & ~0x1f) == 0 && ((1 << (_la - 171)) & ((1 << (CqlParser.OPERATOR_EQ - 171)) | (1 << (CqlParser.OPERATOR_LT - 171)) | (1 << (CqlParser.OPERATOR_GT - 171)) | (1 << (CqlParser.OPERATOR_LTE - 171)) | (1 << (CqlParser.OPERATOR_GTE - 171)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1901;
	            this.constant();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1902;
	            this.functionCall();
	            this.state = 1903;
	            _la = this._input.LA(1);
	            if(!(((((_la - 171)) & ~0x1f) == 0 && ((1 << (_la - 171)) & ((1 << (CqlParser.OPERATOR_EQ - 171)) | (1 << (CqlParser.OPERATOR_LT - 171)) | (1 << (CqlParser.OPERATOR_GT - 171)) | (1 << (CqlParser.OPERATOR_LTE - 171)) | (1 << (CqlParser.OPERATOR_GTE - 171)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1904;
	            this.constant();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1906;
	            this.functionCall();
	            this.state = 1907;
	            _la = this._input.LA(1);
	            if(!(((((_la - 171)) & ~0x1f) == 0 && ((1 << (_la - 171)) & ((1 << (CqlParser.OPERATOR_EQ - 171)) | (1 << (CqlParser.OPERATOR_LT - 171)) | (1 << (CqlParser.OPERATOR_GT - 171)) | (1 << (CqlParser.OPERATOR_LTE - 171)) | (1 << (CqlParser.OPERATOR_GTE - 171)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1908;
	            this.functionCall();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1910;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1911;
	            this.kwIn();
	            this.state = 1912;
	            this.match(CqlParser.LR_BRACKET);
	            this.state = 1914;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CqlParser.K_FALSE || _la===CqlParser.K_NULL || _la===CqlParser.K_TRUE || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (CqlParser.CODE_BLOCK - 163)) | (1 << (CqlParser.STRING_LITERAL - 163)) | (1 << (CqlParser.DECIMAL_LITERAL - 163)) | (1 << (CqlParser.FLOAT_LITERAL - 163)) | (1 << (CqlParser.HEXADECIMAL_LITERAL - 163)) | (1 << (CqlParser.OBJECT_NAME - 163)) | (1 << (CqlParser.UUID - 163)))) !== 0)) {
	                this.state = 1913;
	                this.functionArgs();
	            }

	            this.state = 1916;
	            this.match(CqlParser.RR_BRACKET);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1918;
	            this.match(CqlParser.LR_BRACKET);
	            this.state = 1919;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1925;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CqlParser.COMMA) {
	                this.state = 1920;
	                this.syntaxComma();
	                this.state = 1921;
	                this.match(CqlParser.OBJECT_NAME);
	                this.state = 1927;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1928;
	            this.match(CqlParser.RR_BRACKET);
	            this.state = 1929;
	            this.kwIn();
	            this.state = 1930;
	            this.match(CqlParser.LR_BRACKET);
	            this.state = 1931;
	            this.assignmentTuple();
	            this.state = 1937;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CqlParser.COMMA) {
	                this.state = 1932;
	                this.syntaxComma();
	                this.state = 1933;
	                this.assignmentTuple();
	                this.state = 1939;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1940;
	            this.match(CqlParser.RR_BRACKET);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1942;
	            this.match(CqlParser.LR_BRACKET);
	            this.state = 1943;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1949;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CqlParser.COMMA) {
	                this.state = 1944;
	                this.syntaxComma();
	                this.state = 1945;
	                this.match(CqlParser.OBJECT_NAME);
	                this.state = 1951;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1952;
	            this.match(CqlParser.RR_BRACKET);
	            this.state = 1953;
	            _la = this._input.LA(1);
	            if(!(((((_la - 171)) & ~0x1f) == 0 && ((1 << (_la - 171)) & ((1 << (CqlParser.OPERATOR_EQ - 171)) | (1 << (CqlParser.OPERATOR_LT - 171)) | (1 << (CqlParser.OPERATOR_GT - 171)) | (1 << (CqlParser.OPERATOR_LTE - 171)) | (1 << (CqlParser.OPERATOR_GTE - 171)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	            this.state = 1954;
	            this.assignmentTuple();
	            this.state = 1960;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CqlParser.COMMA) {
	                this.state = 1955;
	                this.syntaxComma();
	                this.state = 1956;
	                this.assignmentTuple();
	                this.state = 1962;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1963;
	            this.relalationContainsKey();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1964;
	            this.relalationContains();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relalationContains() {
	    let localctx = new RelalationContainsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, CqlParser.RULE_relalationContains);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1967;
	        this.match(CqlParser.OBJECT_NAME);
	        this.state = 1968;
	        this.kwContains();
	        this.state = 1969;
	        this.constant();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relalationContainsKey() {
	    let localctx = new RelalationContainsKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, CqlParser.RULE_relalationContainsKey);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1971;
	        this.match(CqlParser.OBJECT_NAME);

	        this.state = 1972;
	        this.kwContains();
	        this.state = 1973;
	        this.kwKey();
	        this.state = 1975;
	        this.constant();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionCall() {
	    let localctx = new FunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, CqlParser.RULE_functionCall);
	    var _la = 0; // Token type
	    try {
	        this.state = 1987;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1977;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1978;
	            this.match(CqlParser.LR_BRACKET);
	            this.state = 1979;
	            this.match(CqlParser.STAR);
	            this.state = 1980;
	            this.match(CqlParser.RR_BRACKET);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1981;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 1982;
	            this.match(CqlParser.LR_BRACKET);
	            this.state = 1984;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CqlParser.K_FALSE || _la===CqlParser.K_NULL || _la===CqlParser.K_TRUE || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (CqlParser.CODE_BLOCK - 163)) | (1 << (CqlParser.STRING_LITERAL - 163)) | (1 << (CqlParser.DECIMAL_LITERAL - 163)) | (1 << (CqlParser.FLOAT_LITERAL - 163)) | (1 << (CqlParser.HEXADECIMAL_LITERAL - 163)) | (1 << (CqlParser.OBJECT_NAME - 163)) | (1 << (CqlParser.UUID - 163)))) !== 0)) {
	                this.state = 1983;
	                this.functionArgs();
	            }

	            this.state = 1986;
	            this.match(CqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionArgs() {
	    let localctx = new FunctionArgsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, CqlParser.RULE_functionArgs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1992;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1989;
	            this.constant();
	            break;

	        case 2:
	            this.state = 1990;
	            this.match(CqlParser.OBJECT_NAME);
	            break;

	        case 3:
	            this.state = 1991;
	            this.functionCall();
	            break;

	        }
	        this.state = 2002;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.COMMA) {
	            this.state = 1994;
	            this.syntaxComma();
	            this.state = 1998;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1995;
	                this.constant();
	                break;

	            case 2:
	                this.state = 1996;
	                this.match(CqlParser.OBJECT_NAME);
	                break;

	            case 3:
	                this.state = 1997;
	                this.functionCall();
	                break;

	            }
	            this.state = 2004;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant() {
	    let localctx = new ConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, CqlParser.RULE_constant);
	    try {
	        this.state = 2013;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2005;
	            this.match(CqlParser.UUID);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2006;
	            this.stringLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2007;
	            this.decimalLiteral();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2008;
	            this.floatLiteral();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2009;
	            this.hexadecimalLiteral();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2010;
	            this.booleanLiteral();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2011;
	            this.codeBlock();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2012;
	            this.kwNull();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decimalLiteral() {
	    let localctx = new DecimalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, CqlParser.RULE_decimalLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2015;
	        this.match(CqlParser.DECIMAL_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	floatLiteral() {
	    let localctx = new FloatLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, CqlParser.RULE_floatLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2017;
	        _la = this._input.LA(1);
	        if(!(_la===CqlParser.DECIMAL_LITERAL || _la===CqlParser.FLOAT_LITERAL)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteral() {
	    let localctx = new StringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, CqlParser.RULE_stringLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2019;
	        this.match(CqlParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanLiteral() {
	    let localctx = new BooleanLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, CqlParser.RULE_booleanLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2021;
	        _la = this._input.LA(1);
	        if(!(_la===CqlParser.K_FALSE || _la===CqlParser.K_TRUE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hexadecimalLiteral() {
	    let localctx = new HexadecimalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, CqlParser.RULE_hexadecimalLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2023;
	        this.match(CqlParser.HEXADECIMAL_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyspace() {
	    let localctx = new KeyspaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, CqlParser.RULE_keyspace);
	    try {
	        this.state = 2029;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CqlParser.OBJECT_NAME:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2025;
	            this.match(CqlParser.OBJECT_NAME);
	            break;
	        case CqlParser.DQUOTE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2026;
	            this.match(CqlParser.DQUOTE);
	            this.state = 2027;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 2028;
	            this.match(CqlParser.DQUOTE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table() {
	    let localctx = new TableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, CqlParser.RULE_table);
	    try {
	        this.state = 2035;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CqlParser.OBJECT_NAME:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2031;
	            this.match(CqlParser.OBJECT_NAME);
	            break;
	        case CqlParser.DQUOTE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2032;
	            this.match(CqlParser.DQUOTE);
	            this.state = 2033;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 2034;
	            this.match(CqlParser.DQUOTE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column() {
	    let localctx = new ColumnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, CqlParser.RULE_column);
	    try {
	        this.state = 2041;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CqlParser.OBJECT_NAME:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2037;
	            this.match(CqlParser.OBJECT_NAME);
	            break;
	        case CqlParser.DQUOTE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2038;
	            this.match(CqlParser.DQUOTE);
	            this.state = 2039;
	            this.match(CqlParser.OBJECT_NAME);
	            this.state = 2040;
	            this.match(CqlParser.DQUOTE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataType() {
	    let localctx = new DataTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, CqlParser.RULE_dataType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2043;
	        this.dataTypeName();
	        this.state = 2045;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CqlParser.OPERATOR_LT) {
	            this.state = 2044;
	            this.dataTypeDefinition();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataTypeName() {
	    let localctx = new DataTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, CqlParser.RULE_dataTypeName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2047;
	        _la = this._input.LA(1);
	        if(!(((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CqlParser.K_SET - 113)) | (1 << (CqlParser.K_TIMESTAMP - 113)) | (1 << (CqlParser.K_UUID - 113)) | (1 << (CqlParser.K_ASCII - 113)) | (1 << (CqlParser.K_BIGINT - 113)) | (1 << (CqlParser.K_BLOB - 113)) | (1 << (CqlParser.K_BOOLEAN - 113)))) !== 0) || ((((_la - 145)) & ~0x1f) == 0 && ((1 << (_la - 145)) & ((1 << (CqlParser.K_COUNTER - 145)) | (1 << (CqlParser.K_DATE - 145)) | (1 << (CqlParser.K_DECIMAL - 145)) | (1 << (CqlParser.K_DOUBLE - 145)) | (1 << (CqlParser.K_FLOAT - 145)) | (1 << (CqlParser.K_FROZEN - 145)) | (1 << (CqlParser.K_INET - 145)) | (1 << (CqlParser.K_INT - 145)) | (1 << (CqlParser.K_LIST - 145)) | (1 << (CqlParser.K_MAP - 145)) | (1 << (CqlParser.K_SMALLINT - 145)) | (1 << (CqlParser.K_TEXT - 145)) | (1 << (CqlParser.K_TIMEUUID - 145)) | (1 << (CqlParser.K_TIME - 145)) | (1 << (CqlParser.K_TINYINT - 145)) | (1 << (CqlParser.K_TUPLE - 145)) | (1 << (CqlParser.K_VARCHAR - 145)) | (1 << (CqlParser.K_VARINT - 145)) | (1 << (CqlParser.OBJECT_NAME - 145)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataTypeDefinition() {
	    let localctx = new DataTypeDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, CqlParser.RULE_dataTypeDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2049;
	        this.syntaxBracketLa();
	        this.state = 2050;
	        this.dataTypeName();
	        this.state = 2056;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CqlParser.COMMA) {
	            this.state = 2051;
	            this.syntaxComma();
	            this.state = 2052;
	            this.dataTypeName();
	            this.state = 2058;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2059;
	        this.syntaxBracketRa();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderDirection() {
	    let localctx = new OrderDirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, CqlParser.RULE_orderDirection);
	    try {
	        this.state = 2063;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CqlParser.K_ASC:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2061;
	            this.kwAsc();
	            break;
	        case CqlParser.K_DESC:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2062;
	            this.kwDesc();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	role() {
	    let localctx = new RoleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, CqlParser.RULE_role);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2065;
	        this.match(CqlParser.OBJECT_NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trigger() {
	    let localctx = new TriggerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, CqlParser.RULE_trigger);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2067;
	        this.match(CqlParser.OBJECT_NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triggerClass() {
	    let localctx = new TriggerClassContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, CqlParser.RULE_triggerClass);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2069;
	        this.stringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	materializedView() {
	    let localctx = new MaterializedViewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, CqlParser.RULE_materializedView);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2071;
	        this.match(CqlParser.OBJECT_NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_() {
	    let localctx = new Type_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, CqlParser.RULE_type_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2073;
	        this.match(CqlParser.OBJECT_NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregate() {
	    let localctx = new AggregateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, CqlParser.RULE_aggregate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2075;
	        this.match(CqlParser.OBJECT_NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_() {
	    let localctx = new Function_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, CqlParser.RULE_function_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2077;
	        this.match(CqlParser.OBJECT_NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	language() {
	    let localctx = new LanguageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, CqlParser.RULE_language);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2079;
	        this.match(CqlParser.OBJECT_NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	user() {
	    let localctx = new UserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, CqlParser.RULE_user);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2081;
	        this.match(CqlParser.OBJECT_NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	password() {
	    let localctx = new PasswordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, CqlParser.RULE_password);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2083;
	        this.stringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hashKey() {
	    let localctx = new HashKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, CqlParser.RULE_hashKey);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2085;
	        this.match(CqlParser.OBJECT_NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	param() {
	    let localctx = new ParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, CqlParser.RULE_param);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2087;
	        this.paramName();
	        this.state = 2088;
	        this.dataType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	paramName() {
	    let localctx = new ParamNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, CqlParser.RULE_paramName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2090;
	        this.match(CqlParser.OBJECT_NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwAdd() {
	    let localctx = new KwAddContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, CqlParser.RULE_kwAdd);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2092;
	        this.match(CqlParser.K_ADD);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwAggregate() {
	    let localctx = new KwAggregateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, CqlParser.RULE_kwAggregate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2094;
	        this.match(CqlParser.K_AGGREGATE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwAll() {
	    let localctx = new KwAllContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, CqlParser.RULE_kwAll);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2096;
	        this.match(CqlParser.K_ALL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwAllPermissions() {
	    let localctx = new KwAllPermissionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, CqlParser.RULE_kwAllPermissions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2098;
	        this.match(CqlParser.K_ALL);
	        this.state = 2099;
	        this.match(CqlParser.K_PERMISSIONS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwAllow() {
	    let localctx = new KwAllowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, CqlParser.RULE_kwAllow);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2101;
	        this.match(CqlParser.K_ALLOW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwAlter() {
	    let localctx = new KwAlterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, CqlParser.RULE_kwAlter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2103;
	        this.match(CqlParser.K_ALTER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwAnd() {
	    let localctx = new KwAndContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, CqlParser.RULE_kwAnd);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2105;
	        this.match(CqlParser.K_AND);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwApply() {
	    let localctx = new KwApplyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, CqlParser.RULE_kwApply);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2107;
	        this.match(CqlParser.K_APPLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwAs() {
	    let localctx = new KwAsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, CqlParser.RULE_kwAs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2109;
	        this.match(CqlParser.K_AS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwAsc() {
	    let localctx = new KwAscContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, CqlParser.RULE_kwAsc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2111;
	        this.match(CqlParser.K_ASC);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwAuthorize() {
	    let localctx = new KwAuthorizeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, CqlParser.RULE_kwAuthorize);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2113;
	        this.match(CqlParser.K_AUTHORIZE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwBatch() {
	    let localctx = new KwBatchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, CqlParser.RULE_kwBatch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2115;
	        this.match(CqlParser.K_BATCH);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwBegin() {
	    let localctx = new KwBeginContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, CqlParser.RULE_kwBegin);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2117;
	        this.match(CqlParser.K_BEGIN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwBy() {
	    let localctx = new KwByContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, CqlParser.RULE_kwBy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2119;
	        this.match(CqlParser.K_BY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwCalled() {
	    let localctx = new KwCalledContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, CqlParser.RULE_kwCalled);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2121;
	        this.match(CqlParser.K_CALLED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwClustering() {
	    let localctx = new KwClusteringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, CqlParser.RULE_kwClustering);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2123;
	        this.match(CqlParser.K_CLUSTERING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwCompact() {
	    let localctx = new KwCompactContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, CqlParser.RULE_kwCompact);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2125;
	        this.match(CqlParser.K_COMPACT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwContains() {
	    let localctx = new KwContainsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, CqlParser.RULE_kwContains);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2127;
	        this.match(CqlParser.K_CONTAINS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwCreate() {
	    let localctx = new KwCreateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, CqlParser.RULE_kwCreate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2129;
	        this.match(CqlParser.K_CREATE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwDelete() {
	    let localctx = new KwDeleteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, CqlParser.RULE_kwDelete);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2131;
	        this.match(CqlParser.K_DELETE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwDesc() {
	    let localctx = new KwDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, CqlParser.RULE_kwDesc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2133;
	        this.match(CqlParser.K_DESC);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwDescibe() {
	    let localctx = new KwDescibeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, CqlParser.RULE_kwDescibe);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2135;
	        this.match(CqlParser.K_DESCRIBE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwDistinct() {
	    let localctx = new KwDistinctContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, CqlParser.RULE_kwDistinct);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2137;
	        this.match(CqlParser.K_DISTINCT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwDrop() {
	    let localctx = new KwDropContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, CqlParser.RULE_kwDrop);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2139;
	        this.match(CqlParser.K_DROP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwDurableWrites() {
	    let localctx = new KwDurableWritesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, CqlParser.RULE_kwDurableWrites);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2141;
	        this.match(CqlParser.K_DURABLE_WRITES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwEntries() {
	    let localctx = new KwEntriesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, CqlParser.RULE_kwEntries);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2143;
	        this.match(CqlParser.K_ENTRIES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwExecute() {
	    let localctx = new KwExecuteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, CqlParser.RULE_kwExecute);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2145;
	        this.match(CqlParser.K_EXECUTE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwExists() {
	    let localctx = new KwExistsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, CqlParser.RULE_kwExists);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2147;
	        this.match(CqlParser.K_EXISTS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwFiltering() {
	    let localctx = new KwFilteringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, CqlParser.RULE_kwFiltering);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2149;
	        this.match(CqlParser.K_FILTERING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwFinalfunc() {
	    let localctx = new KwFinalfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, CqlParser.RULE_kwFinalfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2151;
	        this.match(CqlParser.K_FINALFUNC);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwFrom() {
	    let localctx = new KwFromContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, CqlParser.RULE_kwFrom);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2153;
	        this.match(CqlParser.K_FROM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwFull() {
	    let localctx = new KwFullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, CqlParser.RULE_kwFull);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2155;
	        this.match(CqlParser.K_FULL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwFunction() {
	    let localctx = new KwFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, CqlParser.RULE_kwFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2157;
	        this.match(CqlParser.K_FUNCTION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwFunctions() {
	    let localctx = new KwFunctionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, CqlParser.RULE_kwFunctions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2159;
	        this.match(CqlParser.K_FUNCTIONS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwGrant() {
	    let localctx = new KwGrantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, CqlParser.RULE_kwGrant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2161;
	        this.match(CqlParser.K_GRANT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwIf() {
	    let localctx = new KwIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, CqlParser.RULE_kwIf);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2163;
	        this.match(CqlParser.K_IF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwIn() {
	    let localctx = new KwInContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, CqlParser.RULE_kwIn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2165;
	        this.match(CqlParser.K_IN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwIndex() {
	    let localctx = new KwIndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, CqlParser.RULE_kwIndex);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2167;
	        this.match(CqlParser.K_INDEX);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwInitcond() {
	    let localctx = new KwInitcondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, CqlParser.RULE_kwInitcond);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2169;
	        this.match(CqlParser.K_INITCOND);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwInput() {
	    let localctx = new KwInputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, CqlParser.RULE_kwInput);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2171;
	        this.match(CqlParser.K_INPUT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwInsert() {
	    let localctx = new KwInsertContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, CqlParser.RULE_kwInsert);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2173;
	        this.match(CqlParser.K_INSERT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwInto() {
	    let localctx = new KwIntoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, CqlParser.RULE_kwInto);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2175;
	        this.match(CqlParser.K_INTO);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwIs() {
	    let localctx = new KwIsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, CqlParser.RULE_kwIs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2177;
	        this.match(CqlParser.K_IS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwJson() {
	    let localctx = new KwJsonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, CqlParser.RULE_kwJson);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2179;
	        this.match(CqlParser.K_JSON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwKey() {
	    let localctx = new KwKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, CqlParser.RULE_kwKey);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2181;
	        this.match(CqlParser.K_KEY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwKeys() {
	    let localctx = new KwKeysContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, CqlParser.RULE_kwKeys);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2183;
	        this.match(CqlParser.K_KEYS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwKeyspace() {
	    let localctx = new KwKeyspaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, CqlParser.RULE_kwKeyspace);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2185;
	        this.match(CqlParser.K_KEYSPACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwKeyspaces() {
	    let localctx = new KwKeyspacesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, CqlParser.RULE_kwKeyspaces);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2187;
	        this.match(CqlParser.K_KEYSPACES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwLanguage() {
	    let localctx = new KwLanguageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, CqlParser.RULE_kwLanguage);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2189;
	        this.match(CqlParser.K_LANGUAGE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwLimit() {
	    let localctx = new KwLimitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, CqlParser.RULE_kwLimit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2191;
	        this.match(CqlParser.K_LIMIT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwList() {
	    let localctx = new KwListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, CqlParser.RULE_kwList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2193;
	        this.match(CqlParser.K_LIST);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwLogged() {
	    let localctx = new KwLoggedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, CqlParser.RULE_kwLogged);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2195;
	        this.match(CqlParser.K_LOGGED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwLogin() {
	    let localctx = new KwLoginContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, CqlParser.RULE_kwLogin);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2197;
	        this.match(CqlParser.K_LOGIN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwMaterialized() {
	    let localctx = new KwMaterializedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, CqlParser.RULE_kwMaterialized);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2199;
	        this.match(CqlParser.K_MATERIALIZED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwModify() {
	    let localctx = new KwModifyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, CqlParser.RULE_kwModify);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2201;
	        this.match(CqlParser.K_MODIFY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwNosuperuser() {
	    let localctx = new KwNosuperuserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, CqlParser.RULE_kwNosuperuser);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2203;
	        this.match(CqlParser.K_NOSUPERUSER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwNorecursive() {
	    let localctx = new KwNorecursiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, CqlParser.RULE_kwNorecursive);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2205;
	        this.match(CqlParser.K_NORECURSIVE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwNot() {
	    let localctx = new KwNotContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, CqlParser.RULE_kwNot);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2207;
	        this.match(CqlParser.K_NOT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwNull() {
	    let localctx = new KwNullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, CqlParser.RULE_kwNull);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2209;
	        this.match(CqlParser.K_NULL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwOf() {
	    let localctx = new KwOfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, CqlParser.RULE_kwOf);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2211;
	        this.match(CqlParser.K_OF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwOn() {
	    let localctx = new KwOnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, CqlParser.RULE_kwOn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2213;
	        this.match(CqlParser.K_ON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwOptions() {
	    let localctx = new KwOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, CqlParser.RULE_kwOptions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2215;
	        this.match(CqlParser.K_OPTIONS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwOr() {
	    let localctx = new KwOrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, CqlParser.RULE_kwOr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2217;
	        this.match(CqlParser.K_OR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwOrder() {
	    let localctx = new KwOrderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, CqlParser.RULE_kwOrder);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2219;
	        this.match(CqlParser.K_ORDER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwPassword() {
	    let localctx = new KwPasswordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, CqlParser.RULE_kwPassword);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2221;
	        this.match(CqlParser.K_PASSWORD);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwPrimary() {
	    let localctx = new KwPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, CqlParser.RULE_kwPrimary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2223;
	        this.match(CqlParser.K_PRIMARY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwRename() {
	    let localctx = new KwRenameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, CqlParser.RULE_kwRename);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2225;
	        this.match(CqlParser.K_RENAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwReplace() {
	    let localctx = new KwReplaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, CqlParser.RULE_kwReplace);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2227;
	        this.match(CqlParser.K_REPLACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwReplication() {
	    let localctx = new KwReplicationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, CqlParser.RULE_kwReplication);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2229;
	        this.match(CqlParser.K_REPLICATION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwReturns() {
	    let localctx = new KwReturnsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, CqlParser.RULE_kwReturns);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2231;
	        this.match(CqlParser.K_RETURNS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwRole() {
	    let localctx = new KwRoleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, CqlParser.RULE_kwRole);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2233;
	        this.match(CqlParser.K_ROLE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwRoles() {
	    let localctx = new KwRolesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, CqlParser.RULE_kwRoles);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2235;
	        this.match(CqlParser.K_ROLES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwSelect() {
	    let localctx = new KwSelectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 490, CqlParser.RULE_kwSelect);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2237;
	        this.match(CqlParser.K_SELECT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwSet() {
	    let localctx = new KwSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 492, CqlParser.RULE_kwSet);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2239;
	        this.match(CqlParser.K_SET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwSfunc() {
	    let localctx = new KwSfuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 494, CqlParser.RULE_kwSfunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2241;
	        this.match(CqlParser.K_SFUNC);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwStorage() {
	    let localctx = new KwStorageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 496, CqlParser.RULE_kwStorage);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2243;
	        this.match(CqlParser.K_STORAGE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwStype() {
	    let localctx = new KwStypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 498, CqlParser.RULE_kwStype);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2245;
	        this.match(CqlParser.K_STYPE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwSuperuser() {
	    let localctx = new KwSuperuserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 500, CqlParser.RULE_kwSuperuser);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2247;
	        this.match(CqlParser.K_SUPERUSER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwTable() {
	    let localctx = new KwTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 502, CqlParser.RULE_kwTable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2249;
	        this.match(CqlParser.K_TABLE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwTimestamp() {
	    let localctx = new KwTimestampContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 504, CqlParser.RULE_kwTimestamp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2251;
	        this.match(CqlParser.K_TIMESTAMP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwTo() {
	    let localctx = new KwToContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 506, CqlParser.RULE_kwTo);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2253;
	        this.match(CqlParser.K_TO);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwTrigger() {
	    let localctx = new KwTriggerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 508, CqlParser.RULE_kwTrigger);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2255;
	        this.match(CqlParser.K_TRIGGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwTruncate() {
	    let localctx = new KwTruncateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 510, CqlParser.RULE_kwTruncate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2257;
	        this.match(CqlParser.K_TRUNCATE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwTtl() {
	    let localctx = new KwTtlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 512, CqlParser.RULE_kwTtl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2259;
	        this.match(CqlParser.K_TTL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwType() {
	    let localctx = new KwTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 514, CqlParser.RULE_kwType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2261;
	        this.match(CqlParser.K_TYPE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwUnlogged() {
	    let localctx = new KwUnloggedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 516, CqlParser.RULE_kwUnlogged);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2263;
	        this.match(CqlParser.K_UNLOGGED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwUpdate() {
	    let localctx = new KwUpdateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 518, CqlParser.RULE_kwUpdate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2265;
	        this.match(CqlParser.K_UPDATE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwUse() {
	    let localctx = new KwUseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 520, CqlParser.RULE_kwUse);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2267;
	        this.match(CqlParser.K_USE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwUser() {
	    let localctx = new KwUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 522, CqlParser.RULE_kwUser);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2269;
	        this.match(CqlParser.K_USER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwUsers() {
	    let localctx = new KwUsersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 524, CqlParser.RULE_kwUsers);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2271;
	        this.match(CqlParser.K_USERS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwUsing() {
	    let localctx = new KwUsingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 526, CqlParser.RULE_kwUsing);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2273;
	        this.match(CqlParser.K_USING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwValues() {
	    let localctx = new KwValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 528, CqlParser.RULE_kwValues);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2275;
	        this.match(CqlParser.K_VALUES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwView() {
	    let localctx = new KwViewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 530, CqlParser.RULE_kwView);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2277;
	        this.match(CqlParser.K_VIEW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwWhere() {
	    let localctx = new KwWhereContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 532, CqlParser.RULE_kwWhere);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2279;
	        this.match(CqlParser.K_WHERE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwWith() {
	    let localctx = new KwWithContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 534, CqlParser.RULE_kwWith);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2281;
	        this.match(CqlParser.K_WITH);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwRevoke() {
	    let localctx = new KwRevokeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 536, CqlParser.RULE_kwRevoke);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2283;
	        this.match(CqlParser.K_REVOKE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eof() {
	    let localctx = new EofContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 538, CqlParser.RULE_eof);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2285;
	        this.match(CqlParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	syntaxBracketLr() {
	    let localctx = new SyntaxBracketLrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 540, CqlParser.RULE_syntaxBracketLr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2287;
	        this.match(CqlParser.LR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	syntaxBracketRr() {
	    let localctx = new SyntaxBracketRrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 542, CqlParser.RULE_syntaxBracketRr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2289;
	        this.match(CqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	syntaxBracketLc() {
	    let localctx = new SyntaxBracketLcContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 544, CqlParser.RULE_syntaxBracketLc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2291;
	        this.match(CqlParser.LC_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	syntaxBracketRc() {
	    let localctx = new SyntaxBracketRcContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 546, CqlParser.RULE_syntaxBracketRc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2293;
	        this.match(CqlParser.RC_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	syntaxBracketLa() {
	    let localctx = new SyntaxBracketLaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 548, CqlParser.RULE_syntaxBracketLa);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2295;
	        this.match(CqlParser.OPERATOR_LT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	syntaxBracketRa() {
	    let localctx = new SyntaxBracketRaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 550, CqlParser.RULE_syntaxBracketRa);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2297;
	        this.match(CqlParser.OPERATOR_GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	syntaxBracketLs() {
	    let localctx = new SyntaxBracketLsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 552, CqlParser.RULE_syntaxBracketLs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2299;
	        this.match(CqlParser.LS_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	syntaxBracketRs() {
	    let localctx = new SyntaxBracketRsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 554, CqlParser.RULE_syntaxBracketRs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2301;
	        this.match(CqlParser.RS_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	syntaxComma() {
	    let localctx = new SyntaxCommaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 556, CqlParser.RULE_syntaxComma);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2303;
	        this.match(CqlParser.COMMA);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	syntaxColon() {
	    let localctx = new SyntaxColonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 558, CqlParser.RULE_syntaxColon);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2305;
	        this.match(CqlParser.COLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

CqlParser.EOF = antlr4.Token.EOF;
CqlParser.LR_BRACKET = 1;
CqlParser.RR_BRACKET = 2;
CqlParser.LC_BRACKET = 3;
CqlParser.RC_BRACKET = 4;
CqlParser.LS_BRACKET = 5;
CqlParser.RS_BRACKET = 6;
CqlParser.COMMA = 7;
CqlParser.SEMI = 8;
CqlParser.COLON = 9;
CqlParser.SPACE = 10;
CqlParser.SPEC_MYSQL_COMMENT = 11;
CqlParser.COMMENT_INPUT = 12;
CqlParser.LINE_COMMENT = 13;
CqlParser.DOT = 14;
CqlParser.STAR = 15;
CqlParser.DIVIDE = 16;
CqlParser.MODULE = 17;
CqlParser.PLUS = 18;
CqlParser.MINUSMINUS = 19;
CqlParser.MINUS = 20;
CqlParser.DQUOTE = 21;
CqlParser.SQUOTE = 22;
CqlParser.K_ADD = 23;
CqlParser.K_AGGREGATE = 24;
CqlParser.K_ALL = 25;
CqlParser.K_ALLOW = 26;
CqlParser.K_ALTER = 27;
CqlParser.K_AND = 28;
CqlParser.K_ANY = 29;
CqlParser.K_APPLY = 30;
CqlParser.K_AS = 31;
CqlParser.K_ASC = 32;
CqlParser.K_AUTHORIZE = 33;
CqlParser.K_BATCH = 34;
CqlParser.K_BEGIN = 35;
CqlParser.K_BY = 36;
CqlParser.K_CALLED = 37;
CqlParser.K_CLUSTERING = 38;
CqlParser.K_COLUMNFAMILY = 39;
CqlParser.K_COMPACT = 40;
CqlParser.K_CONSISTENCY = 41;
CqlParser.K_CONTAINS = 42;
CqlParser.K_CREATE = 43;
CqlParser.K_CUSTOM = 44;
CqlParser.K_DELETE = 45;
CqlParser.K_DESC = 46;
CqlParser.K_DESCRIBE = 47;
CqlParser.K_DISTINCT = 48;
CqlParser.K_DROP = 49;
CqlParser.K_DURABLE_WRITES = 50;
CqlParser.K_EACH_QUORUM = 51;
CqlParser.K_ENTRIES = 52;
CqlParser.K_EXECUTE = 53;
CqlParser.K_EXISTS = 54;
CqlParser.K_FALSE = 55;
CqlParser.K_FILTERING = 56;
CqlParser.K_FINALFUNC = 57;
CqlParser.K_FROM = 58;
CqlParser.K_FULL = 59;
CqlParser.K_FUNCTION = 60;
CqlParser.K_FUNCTIONS = 61;
CqlParser.K_GRANT = 62;
CqlParser.K_IF = 63;
CqlParser.K_IN = 64;
CqlParser.K_INDEX = 65;
CqlParser.K_INFINITY = 66;
CqlParser.K_INITCOND = 67;
CqlParser.K_INPUT = 68;
CqlParser.K_INSERT = 69;
CqlParser.K_INTO = 70;
CqlParser.K_IS = 71;
CqlParser.K_JSON = 72;
CqlParser.K_KEY = 73;
CqlParser.K_KEYS = 74;
CqlParser.K_KEYSPACE = 75;
CqlParser.K_KEYSPACES = 76;
CqlParser.K_LANGUAGE = 77;
CqlParser.K_LEVEL = 78;
CqlParser.K_LIMIT = 79;
CqlParser.K_LOCAL_ONE = 80;
CqlParser.K_LOCAL_QUORUM = 81;
CqlParser.K_LOGGED = 82;
CqlParser.K_LOGIN = 83;
CqlParser.K_MATERIALIZED = 84;
CqlParser.K_MODIFY = 85;
CqlParser.K_NAN = 86;
CqlParser.K_NORECURSIVE = 87;
CqlParser.K_NOSUPERUSER = 88;
CqlParser.K_NOT = 89;
CqlParser.K_NULL = 90;
CqlParser.K_OF = 91;
CqlParser.K_ON = 92;
CqlParser.K_ONE = 93;
CqlParser.K_OPTIONS = 94;
CqlParser.K_OR = 95;
CqlParser.K_ORDER = 96;
CqlParser.K_PARTITION = 97;
CqlParser.K_PASSWORD = 98;
CqlParser.K_PER = 99;
CqlParser.K_PERMISSION = 100;
CqlParser.K_PERMISSIONS = 101;
CqlParser.K_PRIMARY = 102;
CqlParser.K_QUORUM = 103;
CqlParser.K_RENAME = 104;
CqlParser.K_REPLACE = 105;
CqlParser.K_REPLICATION = 106;
CqlParser.K_RETURNS = 107;
CqlParser.K_REVOKE = 108;
CqlParser.K_ROLE = 109;
CqlParser.K_ROLES = 110;
CqlParser.K_SCHEMA = 111;
CqlParser.K_SELECT = 112;
CqlParser.K_SET = 113;
CqlParser.K_SFUNC = 114;
CqlParser.K_STATIC = 115;
CqlParser.K_STORAGE = 116;
CqlParser.K_STYPE = 117;
CqlParser.K_SUPERUSER = 118;
CqlParser.K_TABLE = 119;
CqlParser.K_THREE = 120;
CqlParser.K_TIMESTAMP = 121;
CqlParser.K_TO = 122;
CqlParser.K_TOKEN = 123;
CqlParser.K_TRIGGER = 124;
CqlParser.K_TRUE = 125;
CqlParser.K_TRUNCATE = 126;
CqlParser.K_TTL = 127;
CqlParser.K_TWO = 128;
CqlParser.K_TYPE = 129;
CqlParser.K_UNLOGGED = 130;
CqlParser.K_UPDATE = 131;
CqlParser.K_USE = 132;
CqlParser.K_USER = 133;
CqlParser.K_USING = 134;
CqlParser.K_UUID = 135;
CqlParser.K_VALUES = 136;
CqlParser.K_VIEW = 137;
CqlParser.K_WHERE = 138;
CqlParser.K_WITH = 139;
CqlParser.K_WRITETIME = 140;
CqlParser.K_ASCII = 141;
CqlParser.K_BIGINT = 142;
CqlParser.K_BLOB = 143;
CqlParser.K_BOOLEAN = 144;
CqlParser.K_COUNTER = 145;
CqlParser.K_DATE = 146;
CqlParser.K_DECIMAL = 147;
CqlParser.K_DOUBLE = 148;
CqlParser.K_FLOAT = 149;
CqlParser.K_FROZEN = 150;
CqlParser.K_INET = 151;
CqlParser.K_INT = 152;
CqlParser.K_LIST = 153;
CqlParser.K_MAP = 154;
CqlParser.K_SMALLINT = 155;
CqlParser.K_TEXT = 156;
CqlParser.K_TIMEUUID = 157;
CqlParser.K_TIME = 158;
CqlParser.K_TINYINT = 159;
CqlParser.K_TUPLE = 160;
CqlParser.K_VARCHAR = 161;
CqlParser.K_VARINT = 162;
CqlParser.CODE_BLOCK = 163;
CqlParser.STRING_LITERAL = 164;
CqlParser.DECIMAL_LITERAL = 165;
CqlParser.FLOAT_LITERAL = 166;
CqlParser.HEXADECIMAL_LITERAL = 167;
CqlParser.REAL_LITERAL = 168;
CqlParser.OBJECT_NAME = 169;
CqlParser.UUID = 170;
CqlParser.OPERATOR_EQ = 171;
CqlParser.OPERATOR_LT = 172;
CqlParser.OPERATOR_GT = 173;
CqlParser.OPERATOR_LTE = 174;
CqlParser.OPERATOR_GTE = 175;
CqlParser.K_USERS = 176;

CqlParser.RULE_root = 0;
CqlParser.RULE_cqls = 1;
CqlParser.RULE_statementSeparator = 2;
CqlParser.RULE_empty_ = 3;
CqlParser.RULE_cql = 4;
CqlParser.RULE_revoke = 5;
CqlParser.RULE_listUsers = 6;
CqlParser.RULE_listRoles = 7;
CqlParser.RULE_listPermissions = 8;
CqlParser.RULE_grant = 9;
CqlParser.RULE_priviledge = 10;
CqlParser.RULE_resource = 11;
CqlParser.RULE_createUser = 12;
CqlParser.RULE_createRole = 13;
CqlParser.RULE_createType = 14;
CqlParser.RULE_typeMemberColumnList = 15;
CqlParser.RULE_createTrigger = 16;
CqlParser.RULE_createMaterializedView = 17;
CqlParser.RULE_materializedViewWhere = 18;
CqlParser.RULE_columnNotNullList = 19;
CqlParser.RULE_columnNotNull = 20;
CqlParser.RULE_materializedViewOptions = 21;
CqlParser.RULE_createKeyspace = 22;
CqlParser.RULE_createFunction = 23;
CqlParser.RULE_codeBlock = 24;
CqlParser.RULE_paramList = 25;
CqlParser.RULE_returnMode = 26;
CqlParser.RULE_createAggregate = 27;
CqlParser.RULE_initCondDefinition = 28;
CqlParser.RULE_initCondHash = 29;
CqlParser.RULE_initCondHashItem = 30;
CqlParser.RULE_initCondListNested = 31;
CqlParser.RULE_initCondList = 32;
CqlParser.RULE_orReplace = 33;
CqlParser.RULE_alterUser = 34;
CqlParser.RULE_userPassword = 35;
CqlParser.RULE_userSuperUser = 36;
CqlParser.RULE_alterType = 37;
CqlParser.RULE_alterTypeOperation = 38;
CqlParser.RULE_alterTypeRename = 39;
CqlParser.RULE_alterTypeRenameList = 40;
CqlParser.RULE_alterTypeRenameItem = 41;
CqlParser.RULE_alterTypeAdd = 42;
CqlParser.RULE_alterTypeAlterType = 43;
CqlParser.RULE_alterTable = 44;
CqlParser.RULE_alterTableOperation = 45;
CqlParser.RULE_alterTableWith = 46;
CqlParser.RULE_alterTableRename = 47;
CqlParser.RULE_alterTableDropCompactStorage = 48;
CqlParser.RULE_alterTableDropColumns = 49;
CqlParser.RULE_alterTableDropColumnList = 50;
CqlParser.RULE_alterTableAdd = 51;
CqlParser.RULE_alterTableColumnDefinition = 52;
CqlParser.RULE_alterRole = 53;
CqlParser.RULE_roleWith = 54;
CqlParser.RULE_roleWithOptions = 55;
CqlParser.RULE_alterMaterializedView = 56;
CqlParser.RULE_dropUser = 57;
CqlParser.RULE_dropType = 58;
CqlParser.RULE_dropMaterializedView = 59;
CqlParser.RULE_dropAggregate = 60;
CqlParser.RULE_dropFunction = 61;
CqlParser.RULE_dropTrigger = 62;
CqlParser.RULE_dropRole = 63;
CqlParser.RULE_dropTable = 64;
CqlParser.RULE_dropKeyspace = 65;
CqlParser.RULE_dropIndex = 66;
CqlParser.RULE_createTable = 67;
CqlParser.RULE_withElement = 68;
CqlParser.RULE_clusteringOrder = 69;
CqlParser.RULE_tableOptions = 70;
CqlParser.RULE_tableOptionItem = 71;
CqlParser.RULE_tableOptionName = 72;
CqlParser.RULE_tableOptionValue = 73;
CqlParser.RULE_optionHash = 74;
CqlParser.RULE_optionHashItem = 75;
CqlParser.RULE_optionHashKey = 76;
CqlParser.RULE_optionHashValue = 77;
CqlParser.RULE_columnDefinitionList = 78;
CqlParser.RULE_columnDefinition = 79;
CqlParser.RULE_primaryKeyColumn = 80;
CqlParser.RULE_primaryKeyElement = 81;
CqlParser.RULE_primaryKeyDefinition = 82;
CqlParser.RULE_singlePrimaryKey = 83;
CqlParser.RULE_compoundKey = 84;
CqlParser.RULE_compositeKey = 85;
CqlParser.RULE_partitionKeyList = 86;
CqlParser.RULE_clusteringKeyList = 87;
CqlParser.RULE_partitionKey = 88;
CqlParser.RULE_clusteringKey = 89;
CqlParser.RULE_applyBatch = 90;
CqlParser.RULE_beginBatch = 91;
CqlParser.RULE_batchType = 92;
CqlParser.RULE_alterKeyspace = 93;
CqlParser.RULE_replicationList = 94;
CqlParser.RULE_replicationListItem = 95;
CqlParser.RULE_durableWrites = 96;
CqlParser.RULE_use_ = 97;
CqlParser.RULE_truncate = 98;
CqlParser.RULE_createIndex = 99;
CqlParser.RULE_indexName = 100;
CqlParser.RULE_indexColumnSpec = 101;
CqlParser.RULE_indexKeysSpec = 102;
CqlParser.RULE_indexEntriesSSpec = 103;
CqlParser.RULE_indexFullSpec = 104;
CqlParser.RULE_delete_ = 105;
CqlParser.RULE_deleteColumnList = 106;
CqlParser.RULE_deleteColumnItem = 107;
CqlParser.RULE_update = 108;
CqlParser.RULE_ifSpec = 109;
CqlParser.RULE_ifConditionList = 110;
CqlParser.RULE_ifCondition = 111;
CqlParser.RULE_assignments = 112;
CqlParser.RULE_assignmentElement = 113;
CqlParser.RULE_assignmentSet = 114;
CqlParser.RULE_assignmentMap = 115;
CqlParser.RULE_assignmentList = 116;
CqlParser.RULE_assignmentTuple = 117;
CqlParser.RULE_insert = 118;
CqlParser.RULE_usingTtlTimestamp = 119;
CqlParser.RULE_timestamp = 120;
CqlParser.RULE_ttl = 121;
CqlParser.RULE_usingTimestampSpec = 122;
CqlParser.RULE_ifNotExist = 123;
CqlParser.RULE_ifExist = 124;
CqlParser.RULE_insertValuesSpec = 125;
CqlParser.RULE_insertColumnSpec = 126;
CqlParser.RULE_columnList = 127;
CqlParser.RULE_expressionList = 128;
CqlParser.RULE_expression = 129;
CqlParser.RULE_select_ = 130;
CqlParser.RULE_allowFilteringSpec = 131;
CqlParser.RULE_limitSpec = 132;
CqlParser.RULE_fromSpec = 133;
CqlParser.RULE_fromSpecElement = 134;
CqlParser.RULE_orderSpec = 135;
CqlParser.RULE_orderSpecElement = 136;
CqlParser.RULE_whereSpec = 137;
CqlParser.RULE_distinctSpec = 138;
CqlParser.RULE_selectElements = 139;
CqlParser.RULE_selectElement = 140;
CqlParser.RULE_relationElements = 141;
CqlParser.RULE_relationElement = 142;
CqlParser.RULE_relalationContains = 143;
CqlParser.RULE_relalationContainsKey = 144;
CqlParser.RULE_functionCall = 145;
CqlParser.RULE_functionArgs = 146;
CqlParser.RULE_constant = 147;
CqlParser.RULE_decimalLiteral = 148;
CqlParser.RULE_floatLiteral = 149;
CqlParser.RULE_stringLiteral = 150;
CqlParser.RULE_booleanLiteral = 151;
CqlParser.RULE_hexadecimalLiteral = 152;
CqlParser.RULE_keyspace = 153;
CqlParser.RULE_table = 154;
CqlParser.RULE_column = 155;
CqlParser.RULE_dataType = 156;
CqlParser.RULE_dataTypeName = 157;
CqlParser.RULE_dataTypeDefinition = 158;
CqlParser.RULE_orderDirection = 159;
CqlParser.RULE_role = 160;
CqlParser.RULE_trigger = 161;
CqlParser.RULE_triggerClass = 162;
CqlParser.RULE_materializedView = 163;
CqlParser.RULE_type_ = 164;
CqlParser.RULE_aggregate = 165;
CqlParser.RULE_function_ = 166;
CqlParser.RULE_language = 167;
CqlParser.RULE_user = 168;
CqlParser.RULE_password = 169;
CqlParser.RULE_hashKey = 170;
CqlParser.RULE_param = 171;
CqlParser.RULE_paramName = 172;
CqlParser.RULE_kwAdd = 173;
CqlParser.RULE_kwAggregate = 174;
CqlParser.RULE_kwAll = 175;
CqlParser.RULE_kwAllPermissions = 176;
CqlParser.RULE_kwAllow = 177;
CqlParser.RULE_kwAlter = 178;
CqlParser.RULE_kwAnd = 179;
CqlParser.RULE_kwApply = 180;
CqlParser.RULE_kwAs = 181;
CqlParser.RULE_kwAsc = 182;
CqlParser.RULE_kwAuthorize = 183;
CqlParser.RULE_kwBatch = 184;
CqlParser.RULE_kwBegin = 185;
CqlParser.RULE_kwBy = 186;
CqlParser.RULE_kwCalled = 187;
CqlParser.RULE_kwClustering = 188;
CqlParser.RULE_kwCompact = 189;
CqlParser.RULE_kwContains = 190;
CqlParser.RULE_kwCreate = 191;
CqlParser.RULE_kwDelete = 192;
CqlParser.RULE_kwDesc = 193;
CqlParser.RULE_kwDescibe = 194;
CqlParser.RULE_kwDistinct = 195;
CqlParser.RULE_kwDrop = 196;
CqlParser.RULE_kwDurableWrites = 197;
CqlParser.RULE_kwEntries = 198;
CqlParser.RULE_kwExecute = 199;
CqlParser.RULE_kwExists = 200;
CqlParser.RULE_kwFiltering = 201;
CqlParser.RULE_kwFinalfunc = 202;
CqlParser.RULE_kwFrom = 203;
CqlParser.RULE_kwFull = 204;
CqlParser.RULE_kwFunction = 205;
CqlParser.RULE_kwFunctions = 206;
CqlParser.RULE_kwGrant = 207;
CqlParser.RULE_kwIf = 208;
CqlParser.RULE_kwIn = 209;
CqlParser.RULE_kwIndex = 210;
CqlParser.RULE_kwInitcond = 211;
CqlParser.RULE_kwInput = 212;
CqlParser.RULE_kwInsert = 213;
CqlParser.RULE_kwInto = 214;
CqlParser.RULE_kwIs = 215;
CqlParser.RULE_kwJson = 216;
CqlParser.RULE_kwKey = 217;
CqlParser.RULE_kwKeys = 218;
CqlParser.RULE_kwKeyspace = 219;
CqlParser.RULE_kwKeyspaces = 220;
CqlParser.RULE_kwLanguage = 221;
CqlParser.RULE_kwLimit = 222;
CqlParser.RULE_kwList = 223;
CqlParser.RULE_kwLogged = 224;
CqlParser.RULE_kwLogin = 225;
CqlParser.RULE_kwMaterialized = 226;
CqlParser.RULE_kwModify = 227;
CqlParser.RULE_kwNosuperuser = 228;
CqlParser.RULE_kwNorecursive = 229;
CqlParser.RULE_kwNot = 230;
CqlParser.RULE_kwNull = 231;
CqlParser.RULE_kwOf = 232;
CqlParser.RULE_kwOn = 233;
CqlParser.RULE_kwOptions = 234;
CqlParser.RULE_kwOr = 235;
CqlParser.RULE_kwOrder = 236;
CqlParser.RULE_kwPassword = 237;
CqlParser.RULE_kwPrimary = 238;
CqlParser.RULE_kwRename = 239;
CqlParser.RULE_kwReplace = 240;
CqlParser.RULE_kwReplication = 241;
CqlParser.RULE_kwReturns = 242;
CqlParser.RULE_kwRole = 243;
CqlParser.RULE_kwRoles = 244;
CqlParser.RULE_kwSelect = 245;
CqlParser.RULE_kwSet = 246;
CqlParser.RULE_kwSfunc = 247;
CqlParser.RULE_kwStorage = 248;
CqlParser.RULE_kwStype = 249;
CqlParser.RULE_kwSuperuser = 250;
CqlParser.RULE_kwTable = 251;
CqlParser.RULE_kwTimestamp = 252;
CqlParser.RULE_kwTo = 253;
CqlParser.RULE_kwTrigger = 254;
CqlParser.RULE_kwTruncate = 255;
CqlParser.RULE_kwTtl = 256;
CqlParser.RULE_kwType = 257;
CqlParser.RULE_kwUnlogged = 258;
CqlParser.RULE_kwUpdate = 259;
CqlParser.RULE_kwUse = 260;
CqlParser.RULE_kwUser = 261;
CqlParser.RULE_kwUsers = 262;
CqlParser.RULE_kwUsing = 263;
CqlParser.RULE_kwValues = 264;
CqlParser.RULE_kwView = 265;
CqlParser.RULE_kwWhere = 266;
CqlParser.RULE_kwWith = 267;
CqlParser.RULE_kwRevoke = 268;
CqlParser.RULE_eof = 269;
CqlParser.RULE_syntaxBracketLr = 270;
CqlParser.RULE_syntaxBracketRr = 271;
CqlParser.RULE_syntaxBracketLc = 272;
CqlParser.RULE_syntaxBracketRc = 273;
CqlParser.RULE_syntaxBracketLa = 274;
CqlParser.RULE_syntaxBracketRa = 275;
CqlParser.RULE_syntaxBracketLs = 276;
CqlParser.RULE_syntaxBracketRs = 277;
CqlParser.RULE_syntaxComma = 278;
CqlParser.RULE_syntaxColon = 279;

class RootContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_root;
    }

	eof() {
	    return this.getTypedRuleContext(EofContext,0);
	};

	cqls() {
	    return this.getTypedRuleContext(CqlsContext,0);
	};

	MINUSMINUS() {
	    return this.getToken(CqlParser.MINUSMINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterRoot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitRoot(this);
		}
	}


}



class CqlsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_cqls;
    }

	cql = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CqlContext);
	    } else {
	        return this.getTypedRuleContext(CqlContext,i);
	    }
	};

	empty_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Empty_Context);
	    } else {
	        return this.getTypedRuleContext(Empty_Context,i);
	    }
	};

	statementSeparator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementSeparatorContext);
	    } else {
	        return this.getTypedRuleContext(StatementSeparatorContext,i);
	    }
	};

	MINUSMINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CqlParser.MINUSMINUS);
	    } else {
	        return this.getToken(CqlParser.MINUSMINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterCqls(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitCqls(this);
		}
	}


}



class StatementSeparatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_statementSeparator;
    }

	SEMI() {
	    return this.getToken(CqlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterStatementSeparator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitStatementSeparator(this);
		}
	}


}



class Empty_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_empty_;
    }

	statementSeparator() {
	    return this.getTypedRuleContext(StatementSeparatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterEmpty_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitEmpty_(this);
		}
	}


}



class CqlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_cql;
    }

	alterKeyspace() {
	    return this.getTypedRuleContext(AlterKeyspaceContext,0);
	};

	alterMaterializedView() {
	    return this.getTypedRuleContext(AlterMaterializedViewContext,0);
	};

	alterRole() {
	    return this.getTypedRuleContext(AlterRoleContext,0);
	};

	alterTable() {
	    return this.getTypedRuleContext(AlterTableContext,0);
	};

	alterType() {
	    return this.getTypedRuleContext(AlterTypeContext,0);
	};

	alterUser() {
	    return this.getTypedRuleContext(AlterUserContext,0);
	};

	applyBatch() {
	    return this.getTypedRuleContext(ApplyBatchContext,0);
	};

	createAggregate() {
	    return this.getTypedRuleContext(CreateAggregateContext,0);
	};

	createFunction() {
	    return this.getTypedRuleContext(CreateFunctionContext,0);
	};

	createIndex() {
	    return this.getTypedRuleContext(CreateIndexContext,0);
	};

	createKeyspace() {
	    return this.getTypedRuleContext(CreateKeyspaceContext,0);
	};

	createMaterializedView() {
	    return this.getTypedRuleContext(CreateMaterializedViewContext,0);
	};

	createRole() {
	    return this.getTypedRuleContext(CreateRoleContext,0);
	};

	createTable() {
	    return this.getTypedRuleContext(CreateTableContext,0);
	};

	createTrigger() {
	    return this.getTypedRuleContext(CreateTriggerContext,0);
	};

	createType() {
	    return this.getTypedRuleContext(CreateTypeContext,0);
	};

	createUser() {
	    return this.getTypedRuleContext(CreateUserContext,0);
	};

	delete_() {
	    return this.getTypedRuleContext(Delete_Context,0);
	};

	dropAggregate() {
	    return this.getTypedRuleContext(DropAggregateContext,0);
	};

	dropFunction() {
	    return this.getTypedRuleContext(DropFunctionContext,0);
	};

	dropIndex() {
	    return this.getTypedRuleContext(DropIndexContext,0);
	};

	dropKeyspace() {
	    return this.getTypedRuleContext(DropKeyspaceContext,0);
	};

	dropMaterializedView() {
	    return this.getTypedRuleContext(DropMaterializedViewContext,0);
	};

	dropRole() {
	    return this.getTypedRuleContext(DropRoleContext,0);
	};

	dropTable() {
	    return this.getTypedRuleContext(DropTableContext,0);
	};

	dropTrigger() {
	    return this.getTypedRuleContext(DropTriggerContext,0);
	};

	dropType() {
	    return this.getTypedRuleContext(DropTypeContext,0);
	};

	dropUser() {
	    return this.getTypedRuleContext(DropUserContext,0);
	};

	grant() {
	    return this.getTypedRuleContext(GrantContext,0);
	};

	insert() {
	    return this.getTypedRuleContext(InsertContext,0);
	};

	listPermissions() {
	    return this.getTypedRuleContext(ListPermissionsContext,0);
	};

	listRoles() {
	    return this.getTypedRuleContext(ListRolesContext,0);
	};

	revoke() {
	    return this.getTypedRuleContext(RevokeContext,0);
	};

	select_() {
	    return this.getTypedRuleContext(Select_Context,0);
	};

	truncate() {
	    return this.getTypedRuleContext(TruncateContext,0);
	};

	update() {
	    return this.getTypedRuleContext(UpdateContext,0);
	};

	use_() {
	    return this.getTypedRuleContext(Use_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterCql(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitCql(this);
		}
	}


}



class RevokeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_revoke;
    }

	kwRevoke() {
	    return this.getTypedRuleContext(KwRevokeContext,0);
	};

	priviledge() {
	    return this.getTypedRuleContext(PriviledgeContext,0);
	};

	kwOn() {
	    return this.getTypedRuleContext(KwOnContext,0);
	};

	resource() {
	    return this.getTypedRuleContext(ResourceContext,0);
	};

	kwFrom() {
	    return this.getTypedRuleContext(KwFromContext,0);
	};

	role() {
	    return this.getTypedRuleContext(RoleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterRevoke(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitRevoke(this);
		}
	}


}



class ListUsersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_listUsers;
    }

	kwList() {
	    return this.getTypedRuleContext(KwListContext,0);
	};

	kwUsers() {
	    return this.getTypedRuleContext(KwUsersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterListUsers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitListUsers(this);
		}
	}


}



class ListRolesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_listRoles;
    }

	kwList() {
	    return this.getTypedRuleContext(KwListContext,0);
	};

	kwRoles() {
	    return this.getTypedRuleContext(KwRolesContext,0);
	};

	kwOf() {
	    return this.getTypedRuleContext(KwOfContext,0);
	};

	role() {
	    return this.getTypedRuleContext(RoleContext,0);
	};

	kwNorecursive() {
	    return this.getTypedRuleContext(KwNorecursiveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterListRoles(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitListRoles(this);
		}
	}


}



class ListPermissionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_listPermissions;
    }

	kwList() {
	    return this.getTypedRuleContext(KwListContext,0);
	};

	priviledge() {
	    return this.getTypedRuleContext(PriviledgeContext,0);
	};

	kwOn() {
	    return this.getTypedRuleContext(KwOnContext,0);
	};

	resource() {
	    return this.getTypedRuleContext(ResourceContext,0);
	};

	kwOf() {
	    return this.getTypedRuleContext(KwOfContext,0);
	};

	role() {
	    return this.getTypedRuleContext(RoleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterListPermissions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitListPermissions(this);
		}
	}


}



class GrantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_grant;
    }

	kwGrant() {
	    return this.getTypedRuleContext(KwGrantContext,0);
	};

	priviledge() {
	    return this.getTypedRuleContext(PriviledgeContext,0);
	};

	kwOn() {
	    return this.getTypedRuleContext(KwOnContext,0);
	};

	resource() {
	    return this.getTypedRuleContext(ResourceContext,0);
	};

	kwTo() {
	    return this.getTypedRuleContext(KwToContext,0);
	};

	role() {
	    return this.getTypedRuleContext(RoleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterGrant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitGrant(this);
		}
	}


}



class PriviledgeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_priviledge;
    }

	kwAll() {
	    return this.getTypedRuleContext(KwAllContext,0);
	};

	kwAllPermissions() {
	    return this.getTypedRuleContext(KwAllPermissionsContext,0);
	};

	kwAlter() {
	    return this.getTypedRuleContext(KwAlterContext,0);
	};

	kwAuthorize() {
	    return this.getTypedRuleContext(KwAuthorizeContext,0);
	};

	kwDescibe() {
	    return this.getTypedRuleContext(KwDescibeContext,0);
	};

	kwExecute() {
	    return this.getTypedRuleContext(KwExecuteContext,0);
	};

	kwCreate() {
	    return this.getTypedRuleContext(KwCreateContext,0);
	};

	kwDrop() {
	    return this.getTypedRuleContext(KwDropContext,0);
	};

	kwModify() {
	    return this.getTypedRuleContext(KwModifyContext,0);
	};

	kwSelect() {
	    return this.getTypedRuleContext(KwSelectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterPriviledge(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitPriviledge(this);
		}
	}


}



class ResourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_resource;
    }

	kwAll() {
	    return this.getTypedRuleContext(KwAllContext,0);
	};

	kwFunctions() {
	    return this.getTypedRuleContext(KwFunctionsContext,0);
	};

	kwIn() {
	    return this.getTypedRuleContext(KwInContext,0);
	};

	kwKeyspace() {
	    return this.getTypedRuleContext(KwKeyspaceContext,0);
	};

	keyspace() {
	    return this.getTypedRuleContext(KeyspaceContext,0);
	};

	kwFunction() {
	    return this.getTypedRuleContext(KwFunctionContext,0);
	};

	function_() {
	    return this.getTypedRuleContext(Function_Context,0);
	};

	DOT() {
	    return this.getToken(CqlParser.DOT, 0);
	};

	kwKeyspaces() {
	    return this.getTypedRuleContext(KwKeyspacesContext,0);
	};

	table() {
	    return this.getTypedRuleContext(TableContext,0);
	};

	kwTable() {
	    return this.getTypedRuleContext(KwTableContext,0);
	};

	kwRoles() {
	    return this.getTypedRuleContext(KwRolesContext,0);
	};

	kwRole() {
	    return this.getTypedRuleContext(KwRoleContext,0);
	};

	role() {
	    return this.getTypedRuleContext(RoleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterResource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitResource(this);
		}
	}


}



class CreateUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_createUser;
    }

	kwCreate() {
	    return this.getTypedRuleContext(KwCreateContext,0);
	};

	kwUser() {
	    return this.getTypedRuleContext(KwUserContext,0);
	};

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	kwWith() {
	    return this.getTypedRuleContext(KwWithContext,0);
	};

	kwPassword() {
	    return this.getTypedRuleContext(KwPasswordContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	ifNotExist() {
	    return this.getTypedRuleContext(IfNotExistContext,0);
	};

	kwSuperuser() {
	    return this.getTypedRuleContext(KwSuperuserContext,0);
	};

	kwNosuperuser() {
	    return this.getTypedRuleContext(KwNosuperuserContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterCreateUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitCreateUser(this);
		}
	}


}



class CreateRoleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_createRole;
    }

	kwCreate() {
	    return this.getTypedRuleContext(KwCreateContext,0);
	};

	kwRole() {
	    return this.getTypedRuleContext(KwRoleContext,0);
	};

	role() {
	    return this.getTypedRuleContext(RoleContext,0);
	};

	ifNotExist() {
	    return this.getTypedRuleContext(IfNotExistContext,0);
	};

	roleWith() {
	    return this.getTypedRuleContext(RoleWithContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterCreateRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitCreateRole(this);
		}
	}


}



class CreateTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_createType;
    }

	kwCreate() {
	    return this.getTypedRuleContext(KwCreateContext,0);
	};

	kwType() {
	    return this.getTypedRuleContext(KwTypeContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	syntaxBracketLr() {
	    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
	};

	typeMemberColumnList() {
	    return this.getTypedRuleContext(TypeMemberColumnListContext,0);
	};

	syntaxBracketRr() {
	    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
	};

	ifNotExist() {
	    return this.getTypedRuleContext(IfNotExistContext,0);
	};

	keyspace() {
	    return this.getTypedRuleContext(KeyspaceContext,0);
	};

	DOT() {
	    return this.getToken(CqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterCreateType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitCreateType(this);
		}
	}


}



class TypeMemberColumnListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_typeMemberColumnList;
    }

	column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnContext);
	    } else {
	        return this.getTypedRuleContext(ColumnContext,i);
	    }
	};

	dataType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataTypeContext);
	    } else {
	        return this.getTypedRuleContext(DataTypeContext,i);
	    }
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterTypeMemberColumnList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitTypeMemberColumnList(this);
		}
	}


}



class CreateTriggerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_createTrigger;
    }

	kwCreate() {
	    return this.getTypedRuleContext(KwCreateContext,0);
	};

	kwTrigger() {
	    return this.getTypedRuleContext(KwTriggerContext,0);
	};

	trigger() {
	    return this.getTypedRuleContext(TriggerContext,0);
	};

	kwUsing() {
	    return this.getTypedRuleContext(KwUsingContext,0);
	};

	triggerClass() {
	    return this.getTypedRuleContext(TriggerClassContext,0);
	};

	ifNotExist() {
	    return this.getTypedRuleContext(IfNotExistContext,0);
	};

	keyspace() {
	    return this.getTypedRuleContext(KeyspaceContext,0);
	};

	DOT() {
	    return this.getToken(CqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterCreateTrigger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitCreateTrigger(this);
		}
	}


}



class CreateMaterializedViewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_createMaterializedView;
    }

	kwCreate() {
	    return this.getTypedRuleContext(KwCreateContext,0);
	};

	kwMaterialized() {
	    return this.getTypedRuleContext(KwMaterializedContext,0);
	};

	kwView() {
	    return this.getTypedRuleContext(KwViewContext,0);
	};

	materializedView() {
	    return this.getTypedRuleContext(MaterializedViewContext,0);
	};

	kwAs() {
	    return this.getTypedRuleContext(KwAsContext,0);
	};

	kwSelect() {
	    return this.getTypedRuleContext(KwSelectContext,0);
	};

	columnList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnListContext);
	    } else {
	        return this.getTypedRuleContext(ColumnListContext,i);
	    }
	};

	kwFrom() {
	    return this.getTypedRuleContext(KwFromContext,0);
	};

	table() {
	    return this.getTypedRuleContext(TableContext,0);
	};

	materializedViewWhere() {
	    return this.getTypedRuleContext(MaterializedViewWhereContext,0);
	};

	kwPrimary() {
	    return this.getTypedRuleContext(KwPrimaryContext,0);
	};

	kwKey() {
	    return this.getTypedRuleContext(KwKeyContext,0);
	};

	syntaxBracketLr() {
	    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
	};

	syntaxBracketRr() {
	    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
	};

	ifNotExist() {
	    return this.getTypedRuleContext(IfNotExistContext,0);
	};

	keyspace = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KeyspaceContext);
	    } else {
	        return this.getTypedRuleContext(KeyspaceContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CqlParser.DOT);
	    } else {
	        return this.getToken(CqlParser.DOT, i);
	    }
	};


	kwWith() {
	    return this.getTypedRuleContext(KwWithContext,0);
	};

	materializedViewOptions() {
	    return this.getTypedRuleContext(MaterializedViewOptionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterCreateMaterializedView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitCreateMaterializedView(this);
		}
	}


}



class MaterializedViewWhereContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_materializedViewWhere;
    }

	kwWhere() {
	    return this.getTypedRuleContext(KwWhereContext,0);
	};

	columnNotNullList() {
	    return this.getTypedRuleContext(ColumnNotNullListContext,0);
	};

	kwAnd() {
	    return this.getTypedRuleContext(KwAndContext,0);
	};

	relationElements() {
	    return this.getTypedRuleContext(RelationElementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterMaterializedViewWhere(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitMaterializedViewWhere(this);
		}
	}


}



class ColumnNotNullListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_columnNotNullList;
    }

	columnNotNull = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnNotNullContext);
	    } else {
	        return this.getTypedRuleContext(ColumnNotNullContext,i);
	    }
	};

	kwAnd = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KwAndContext);
	    } else {
	        return this.getTypedRuleContext(KwAndContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterColumnNotNullList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitColumnNotNullList(this);
		}
	}


}



class ColumnNotNullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_columnNotNull;
    }

	column() {
	    return this.getTypedRuleContext(ColumnContext,0);
	};

	kwIs() {
	    return this.getTypedRuleContext(KwIsContext,0);
	};

	kwNot() {
	    return this.getTypedRuleContext(KwNotContext,0);
	};

	kwNull() {
	    return this.getTypedRuleContext(KwNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterColumnNotNull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitColumnNotNull(this);
		}
	}


}



class MaterializedViewOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_materializedViewOptions;
    }

	tableOptions() {
	    return this.getTypedRuleContext(TableOptionsContext,0);
	};

	kwAnd() {
	    return this.getTypedRuleContext(KwAndContext,0);
	};

	clusteringOrder() {
	    return this.getTypedRuleContext(ClusteringOrderContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterMaterializedViewOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitMaterializedViewOptions(this);
		}
	}


}



class CreateKeyspaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_createKeyspace;
    }

	kwCreate() {
	    return this.getTypedRuleContext(KwCreateContext,0);
	};

	kwKeyspace() {
	    return this.getTypedRuleContext(KwKeyspaceContext,0);
	};

	keyspace() {
	    return this.getTypedRuleContext(KeyspaceContext,0);
	};

	kwWith() {
	    return this.getTypedRuleContext(KwWithContext,0);
	};

	kwReplication() {
	    return this.getTypedRuleContext(KwReplicationContext,0);
	};

	OPERATOR_EQ() {
	    return this.getToken(CqlParser.OPERATOR_EQ, 0);
	};

	syntaxBracketLc() {
	    return this.getTypedRuleContext(SyntaxBracketLcContext,0);
	};

	replicationList() {
	    return this.getTypedRuleContext(ReplicationListContext,0);
	};

	syntaxBracketRc() {
	    return this.getTypedRuleContext(SyntaxBracketRcContext,0);
	};

	ifNotExist() {
	    return this.getTypedRuleContext(IfNotExistContext,0);
	};

	kwAnd() {
	    return this.getTypedRuleContext(KwAndContext,0);
	};

	durableWrites() {
	    return this.getTypedRuleContext(DurableWritesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterCreateKeyspace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitCreateKeyspace(this);
		}
	}


}



class CreateFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_createFunction;
    }

	kwCreate() {
	    return this.getTypedRuleContext(KwCreateContext,0);
	};

	kwFunction() {
	    return this.getTypedRuleContext(KwFunctionContext,0);
	};

	function_() {
	    return this.getTypedRuleContext(Function_Context,0);
	};

	syntaxBracketLr() {
	    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
	};

	syntaxBracketRr() {
	    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
	};

	returnMode() {
	    return this.getTypedRuleContext(ReturnModeContext,0);
	};

	kwReturns() {
	    return this.getTypedRuleContext(KwReturnsContext,0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	kwLanguage() {
	    return this.getTypedRuleContext(KwLanguageContext,0);
	};

	language() {
	    return this.getTypedRuleContext(LanguageContext,0);
	};

	kwAs() {
	    return this.getTypedRuleContext(KwAsContext,0);
	};

	codeBlock() {
	    return this.getTypedRuleContext(CodeBlockContext,0);
	};

	orReplace() {
	    return this.getTypedRuleContext(OrReplaceContext,0);
	};

	ifNotExist() {
	    return this.getTypedRuleContext(IfNotExistContext,0);
	};

	keyspace() {
	    return this.getTypedRuleContext(KeyspaceContext,0);
	};

	DOT() {
	    return this.getToken(CqlParser.DOT, 0);
	};

	paramList() {
	    return this.getTypedRuleContext(ParamListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterCreateFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitCreateFunction(this);
		}
	}


}



class CodeBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_codeBlock;
    }

	CODE_BLOCK() {
	    return this.getToken(CqlParser.CODE_BLOCK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterCodeBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitCodeBlock(this);
		}
	}


}



class ParamListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_paramList;
    }

	param = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParamContext);
	    } else {
	        return this.getTypedRuleContext(ParamContext,i);
	    }
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterParamList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitParamList(this);
		}
	}


}



class ReturnModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_returnMode;
    }

	kwOn() {
	    return this.getTypedRuleContext(KwOnContext,0);
	};

	kwNull = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KwNullContext);
	    } else {
	        return this.getTypedRuleContext(KwNullContext,i);
	    }
	};

	kwInput() {
	    return this.getTypedRuleContext(KwInputContext,0);
	};

	kwCalled() {
	    return this.getTypedRuleContext(KwCalledContext,0);
	};

	kwReturns() {
	    return this.getTypedRuleContext(KwReturnsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterReturnMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitReturnMode(this);
		}
	}


}



class CreateAggregateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_createAggregate;
    }

	kwCreate() {
	    return this.getTypedRuleContext(KwCreateContext,0);
	};

	kwAggregate() {
	    return this.getTypedRuleContext(KwAggregateContext,0);
	};

	aggregate() {
	    return this.getTypedRuleContext(AggregateContext,0);
	};

	syntaxBracketLr() {
	    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
	};

	dataType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataTypeContext);
	    } else {
	        return this.getTypedRuleContext(DataTypeContext,i);
	    }
	};

	syntaxBracketRr() {
	    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
	};

	kwSfunc() {
	    return this.getTypedRuleContext(KwSfuncContext,0);
	};

	function_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Function_Context);
	    } else {
	        return this.getTypedRuleContext(Function_Context,i);
	    }
	};

	kwStype() {
	    return this.getTypedRuleContext(KwStypeContext,0);
	};

	kwFinalfunc() {
	    return this.getTypedRuleContext(KwFinalfuncContext,0);
	};

	kwInitcond() {
	    return this.getTypedRuleContext(KwInitcondContext,0);
	};

	initCondDefinition() {
	    return this.getTypedRuleContext(InitCondDefinitionContext,0);
	};

	orReplace() {
	    return this.getTypedRuleContext(OrReplaceContext,0);
	};

	ifNotExist() {
	    return this.getTypedRuleContext(IfNotExistContext,0);
	};

	keyspace() {
	    return this.getTypedRuleContext(KeyspaceContext,0);
	};

	DOT() {
	    return this.getToken(CqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterCreateAggregate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitCreateAggregate(this);
		}
	}


}



class InitCondDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_initCondDefinition;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	initCondList() {
	    return this.getTypedRuleContext(InitCondListContext,0);
	};

	initCondListNested() {
	    return this.getTypedRuleContext(InitCondListNestedContext,0);
	};

	initCondHash() {
	    return this.getTypedRuleContext(InitCondHashContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterInitCondDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitInitCondDefinition(this);
		}
	}


}



class InitCondHashContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_initCondHash;
    }

	syntaxBracketLc() {
	    return this.getTypedRuleContext(SyntaxBracketLcContext,0);
	};

	initCondHashItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InitCondHashItemContext);
	    } else {
	        return this.getTypedRuleContext(InitCondHashItemContext,i);
	    }
	};

	syntaxBracketRc() {
	    return this.getTypedRuleContext(SyntaxBracketRcContext,0);
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterInitCondHash(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitInitCondHash(this);
		}
	}


}



class InitCondHashItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_initCondHashItem;
    }

	hashKey() {
	    return this.getTypedRuleContext(HashKeyContext,0);
	};

	COLON() {
	    return this.getToken(CqlParser.COLON, 0);
	};

	initCondDefinition() {
	    return this.getTypedRuleContext(InitCondDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterInitCondHashItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitInitCondHashItem(this);
		}
	}


}



class InitCondListNestedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_initCondListNested;
    }

	syntaxBracketLr() {
	    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
	};

	initCondList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InitCondListContext);
	    } else {
	        return this.getTypedRuleContext(InitCondListContext,i);
	    }
	};

	syntaxBracketRr() {
	    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	constant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantContext);
	    } else {
	        return this.getTypedRuleContext(ConstantContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterInitCondListNested(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitInitCondListNested(this);
		}
	}


}



class InitCondListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_initCondList;
    }

	syntaxBracketLr() {
	    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
	};

	constant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantContext);
	    } else {
	        return this.getTypedRuleContext(ConstantContext,i);
	    }
	};

	syntaxBracketRr() {
	    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterInitCondList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitInitCondList(this);
		}
	}


}



class OrReplaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_orReplace;
    }

	kwOr() {
	    return this.getTypedRuleContext(KwOrContext,0);
	};

	kwReplace() {
	    return this.getTypedRuleContext(KwReplaceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterOrReplace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitOrReplace(this);
		}
	}


}



class AlterUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_alterUser;
    }

	kwAlter() {
	    return this.getTypedRuleContext(KwAlterContext,0);
	};

	kwUser() {
	    return this.getTypedRuleContext(KwUserContext,0);
	};

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	kwWith() {
	    return this.getTypedRuleContext(KwWithContext,0);
	};

	userPassword() {
	    return this.getTypedRuleContext(UserPasswordContext,0);
	};

	userSuperUser() {
	    return this.getTypedRuleContext(UserSuperUserContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAlterUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAlterUser(this);
		}
	}


}



class UserPasswordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_userPassword;
    }

	kwPassword() {
	    return this.getTypedRuleContext(KwPasswordContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterUserPassword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitUserPassword(this);
		}
	}


}



class UserSuperUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_userSuperUser;
    }

	kwSuperuser() {
	    return this.getTypedRuleContext(KwSuperuserContext,0);
	};

	kwNosuperuser() {
	    return this.getTypedRuleContext(KwNosuperuserContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterUserSuperUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitUserSuperUser(this);
		}
	}


}



class AlterTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_alterType;
    }

	kwAlter() {
	    return this.getTypedRuleContext(KwAlterContext,0);
	};

	kwType() {
	    return this.getTypedRuleContext(KwTypeContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	alterTypeOperation() {
	    return this.getTypedRuleContext(AlterTypeOperationContext,0);
	};

	keyspace() {
	    return this.getTypedRuleContext(KeyspaceContext,0);
	};

	DOT() {
	    return this.getToken(CqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAlterType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAlterType(this);
		}
	}


}



class AlterTypeOperationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_alterTypeOperation;
    }

	alterTypeAlterType() {
	    return this.getTypedRuleContext(AlterTypeAlterTypeContext,0);
	};

	alterTypeAdd() {
	    return this.getTypedRuleContext(AlterTypeAddContext,0);
	};

	alterTypeRename() {
	    return this.getTypedRuleContext(AlterTypeRenameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAlterTypeOperation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAlterTypeOperation(this);
		}
	}


}



class AlterTypeRenameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_alterTypeRename;
    }

	kwRename() {
	    return this.getTypedRuleContext(KwRenameContext,0);
	};

	alterTypeRenameList() {
	    return this.getTypedRuleContext(AlterTypeRenameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAlterTypeRename(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAlterTypeRename(this);
		}
	}


}



class AlterTypeRenameListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_alterTypeRenameList;
    }

	alterTypeRenameItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlterTypeRenameItemContext);
	    } else {
	        return this.getTypedRuleContext(AlterTypeRenameItemContext,i);
	    }
	};

	kwAnd = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KwAndContext);
	    } else {
	        return this.getTypedRuleContext(KwAndContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAlterTypeRenameList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAlterTypeRenameList(this);
		}
	}


}



class AlterTypeRenameItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_alterTypeRenameItem;
    }

	column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnContext);
	    } else {
	        return this.getTypedRuleContext(ColumnContext,i);
	    }
	};

	kwTo() {
	    return this.getTypedRuleContext(KwToContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAlterTypeRenameItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAlterTypeRenameItem(this);
		}
	}


}



class AlterTypeAddContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_alterTypeAdd;
    }

	kwAdd() {
	    return this.getTypedRuleContext(KwAddContext,0);
	};

	column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnContext);
	    } else {
	        return this.getTypedRuleContext(ColumnContext,i);
	    }
	};

	dataType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataTypeContext);
	    } else {
	        return this.getTypedRuleContext(DataTypeContext,i);
	    }
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAlterTypeAdd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAlterTypeAdd(this);
		}
	}


}



class AlterTypeAlterTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_alterTypeAlterType;
    }

	kwAlter() {
	    return this.getTypedRuleContext(KwAlterContext,0);
	};

	column() {
	    return this.getTypedRuleContext(ColumnContext,0);
	};

	kwType() {
	    return this.getTypedRuleContext(KwTypeContext,0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAlterTypeAlterType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAlterTypeAlterType(this);
		}
	}


}



class AlterTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_alterTable;
    }

	kwAlter() {
	    return this.getTypedRuleContext(KwAlterContext,0);
	};

	kwTable() {
	    return this.getTypedRuleContext(KwTableContext,0);
	};

	table() {
	    return this.getTypedRuleContext(TableContext,0);
	};

	alterTableOperation() {
	    return this.getTypedRuleContext(AlterTableOperationContext,0);
	};

	keyspace() {
	    return this.getTypedRuleContext(KeyspaceContext,0);
	};

	DOT() {
	    return this.getToken(CqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAlterTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAlterTable(this);
		}
	}


}



class AlterTableOperationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_alterTableOperation;
    }

	alterTableAdd() {
	    return this.getTypedRuleContext(AlterTableAddContext,0);
	};

	alterTableDropColumns() {
	    return this.getTypedRuleContext(AlterTableDropColumnsContext,0);
	};

	alterTableDropCompactStorage() {
	    return this.getTypedRuleContext(AlterTableDropCompactStorageContext,0);
	};

	alterTableRename() {
	    return this.getTypedRuleContext(AlterTableRenameContext,0);
	};

	alterTableWith() {
	    return this.getTypedRuleContext(AlterTableWithContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAlterTableOperation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAlterTableOperation(this);
		}
	}


}



class AlterTableWithContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_alterTableWith;
    }

	kwWith() {
	    return this.getTypedRuleContext(KwWithContext,0);
	};

	tableOptions() {
	    return this.getTypedRuleContext(TableOptionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAlterTableWith(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAlterTableWith(this);
		}
	}


}



class AlterTableRenameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_alterTableRename;
    }

	kwRename() {
	    return this.getTypedRuleContext(KwRenameContext,0);
	};

	column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnContext);
	    } else {
	        return this.getTypedRuleContext(ColumnContext,i);
	    }
	};

	kwTo() {
	    return this.getTypedRuleContext(KwToContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAlterTableRename(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAlterTableRename(this);
		}
	}


}



class AlterTableDropCompactStorageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_alterTableDropCompactStorage;
    }

	kwDrop() {
	    return this.getTypedRuleContext(KwDropContext,0);
	};

	kwCompact() {
	    return this.getTypedRuleContext(KwCompactContext,0);
	};

	kwStorage() {
	    return this.getTypedRuleContext(KwStorageContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAlterTableDropCompactStorage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAlterTableDropCompactStorage(this);
		}
	}


}



class AlterTableDropColumnsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_alterTableDropColumns;
    }

	kwDrop() {
	    return this.getTypedRuleContext(KwDropContext,0);
	};

	alterTableDropColumnList() {
	    return this.getTypedRuleContext(AlterTableDropColumnListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAlterTableDropColumns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAlterTableDropColumns(this);
		}
	}


}



class AlterTableDropColumnListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_alterTableDropColumnList;
    }

	column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnContext);
	    } else {
	        return this.getTypedRuleContext(ColumnContext,i);
	    }
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAlterTableDropColumnList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAlterTableDropColumnList(this);
		}
	}


}



class AlterTableAddContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_alterTableAdd;
    }

	kwAdd() {
	    return this.getTypedRuleContext(KwAddContext,0);
	};

	alterTableColumnDefinition() {
	    return this.getTypedRuleContext(AlterTableColumnDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAlterTableAdd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAlterTableAdd(this);
		}
	}


}



class AlterTableColumnDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_alterTableColumnDefinition;
    }

	column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnContext);
	    } else {
	        return this.getTypedRuleContext(ColumnContext,i);
	    }
	};

	dataType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataTypeContext);
	    } else {
	        return this.getTypedRuleContext(DataTypeContext,i);
	    }
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAlterTableColumnDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAlterTableColumnDefinition(this);
		}
	}


}



class AlterRoleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_alterRole;
    }

	kwAlter() {
	    return this.getTypedRuleContext(KwAlterContext,0);
	};

	kwRole() {
	    return this.getTypedRuleContext(KwRoleContext,0);
	};

	role() {
	    return this.getTypedRuleContext(RoleContext,0);
	};

	roleWith() {
	    return this.getTypedRuleContext(RoleWithContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAlterRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAlterRole(this);
		}
	}


}



class RoleWithContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_roleWith;
    }

	kwWith() {
	    return this.getTypedRuleContext(KwWithContext,0);
	};

	roleWithOptions = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoleWithOptionsContext);
	    } else {
	        return this.getTypedRuleContext(RoleWithOptionsContext,i);
	    }
	};

	kwAnd = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KwAndContext);
	    } else {
	        return this.getTypedRuleContext(KwAndContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterRoleWith(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitRoleWith(this);
		}
	}


}



class RoleWithOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_roleWithOptions;
    }

	kwPassword() {
	    return this.getTypedRuleContext(KwPasswordContext,0);
	};

	OPERATOR_EQ() {
	    return this.getToken(CqlParser.OPERATOR_EQ, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	kwLogin() {
	    return this.getTypedRuleContext(KwLoginContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	kwSuperuser() {
	    return this.getTypedRuleContext(KwSuperuserContext,0);
	};

	kwOptions() {
	    return this.getTypedRuleContext(KwOptionsContext,0);
	};

	optionHash() {
	    return this.getTypedRuleContext(OptionHashContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterRoleWithOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitRoleWithOptions(this);
		}
	}


}



class AlterMaterializedViewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_alterMaterializedView;
    }

	kwAlter() {
	    return this.getTypedRuleContext(KwAlterContext,0);
	};

	kwMaterialized() {
	    return this.getTypedRuleContext(KwMaterializedContext,0);
	};

	kwView() {
	    return this.getTypedRuleContext(KwViewContext,0);
	};

	materializedView() {
	    return this.getTypedRuleContext(MaterializedViewContext,0);
	};

	keyspace() {
	    return this.getTypedRuleContext(KeyspaceContext,0);
	};

	DOT() {
	    return this.getToken(CqlParser.DOT, 0);
	};

	kwWith() {
	    return this.getTypedRuleContext(KwWithContext,0);
	};

	tableOptions() {
	    return this.getTypedRuleContext(TableOptionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAlterMaterializedView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAlterMaterializedView(this);
		}
	}


}



class DropUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_dropUser;
    }

	kwDrop() {
	    return this.getTypedRuleContext(KwDropContext,0);
	};

	kwUser() {
	    return this.getTypedRuleContext(KwUserContext,0);
	};

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	ifExist() {
	    return this.getTypedRuleContext(IfExistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterDropUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitDropUser(this);
		}
	}


}



class DropTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_dropType;
    }

	kwDrop() {
	    return this.getTypedRuleContext(KwDropContext,0);
	};

	kwType() {
	    return this.getTypedRuleContext(KwTypeContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	ifExist() {
	    return this.getTypedRuleContext(IfExistContext,0);
	};

	keyspace() {
	    return this.getTypedRuleContext(KeyspaceContext,0);
	};

	DOT() {
	    return this.getToken(CqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterDropType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitDropType(this);
		}
	}


}



class DropMaterializedViewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_dropMaterializedView;
    }

	kwDrop() {
	    return this.getTypedRuleContext(KwDropContext,0);
	};

	kwMaterialized() {
	    return this.getTypedRuleContext(KwMaterializedContext,0);
	};

	kwView() {
	    return this.getTypedRuleContext(KwViewContext,0);
	};

	materializedView() {
	    return this.getTypedRuleContext(MaterializedViewContext,0);
	};

	ifExist() {
	    return this.getTypedRuleContext(IfExistContext,0);
	};

	keyspace() {
	    return this.getTypedRuleContext(KeyspaceContext,0);
	};

	DOT() {
	    return this.getToken(CqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterDropMaterializedView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitDropMaterializedView(this);
		}
	}


}



class DropAggregateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_dropAggregate;
    }

	kwDrop() {
	    return this.getTypedRuleContext(KwDropContext,0);
	};

	kwAggregate() {
	    return this.getTypedRuleContext(KwAggregateContext,0);
	};

	aggregate() {
	    return this.getTypedRuleContext(AggregateContext,0);
	};

	ifExist() {
	    return this.getTypedRuleContext(IfExistContext,0);
	};

	keyspace() {
	    return this.getTypedRuleContext(KeyspaceContext,0);
	};

	DOT() {
	    return this.getToken(CqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterDropAggregate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitDropAggregate(this);
		}
	}


}



class DropFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_dropFunction;
    }

	kwDrop() {
	    return this.getTypedRuleContext(KwDropContext,0);
	};

	kwFunction() {
	    return this.getTypedRuleContext(KwFunctionContext,0);
	};

	function_() {
	    return this.getTypedRuleContext(Function_Context,0);
	};

	ifExist() {
	    return this.getTypedRuleContext(IfExistContext,0);
	};

	keyspace() {
	    return this.getTypedRuleContext(KeyspaceContext,0);
	};

	DOT() {
	    return this.getToken(CqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterDropFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitDropFunction(this);
		}
	}


}



class DropTriggerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_dropTrigger;
    }

	kwDrop() {
	    return this.getTypedRuleContext(KwDropContext,0);
	};

	kwTrigger() {
	    return this.getTypedRuleContext(KwTriggerContext,0);
	};

	trigger() {
	    return this.getTypedRuleContext(TriggerContext,0);
	};

	kwOn() {
	    return this.getTypedRuleContext(KwOnContext,0);
	};

	table() {
	    return this.getTypedRuleContext(TableContext,0);
	};

	ifExist() {
	    return this.getTypedRuleContext(IfExistContext,0);
	};

	keyspace() {
	    return this.getTypedRuleContext(KeyspaceContext,0);
	};

	DOT() {
	    return this.getToken(CqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterDropTrigger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitDropTrigger(this);
		}
	}


}



class DropRoleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_dropRole;
    }

	kwDrop() {
	    return this.getTypedRuleContext(KwDropContext,0);
	};

	kwRole() {
	    return this.getTypedRuleContext(KwRoleContext,0);
	};

	role() {
	    return this.getTypedRuleContext(RoleContext,0);
	};

	ifExist() {
	    return this.getTypedRuleContext(IfExistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterDropRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitDropRole(this);
		}
	}


}



class DropTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_dropTable;
    }

	kwDrop() {
	    return this.getTypedRuleContext(KwDropContext,0);
	};

	kwTable() {
	    return this.getTypedRuleContext(KwTableContext,0);
	};

	table() {
	    return this.getTypedRuleContext(TableContext,0);
	};

	ifExist() {
	    return this.getTypedRuleContext(IfExistContext,0);
	};

	keyspace() {
	    return this.getTypedRuleContext(KeyspaceContext,0);
	};

	DOT() {
	    return this.getToken(CqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterDropTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitDropTable(this);
		}
	}


}



class DropKeyspaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_dropKeyspace;
    }

	kwDrop() {
	    return this.getTypedRuleContext(KwDropContext,0);
	};

	kwKeyspace() {
	    return this.getTypedRuleContext(KwKeyspaceContext,0);
	};

	keyspace() {
	    return this.getTypedRuleContext(KeyspaceContext,0);
	};

	ifExist() {
	    return this.getTypedRuleContext(IfExistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterDropKeyspace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitDropKeyspace(this);
		}
	}


}



class DropIndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_dropIndex;
    }

	kwDrop() {
	    return this.getTypedRuleContext(KwDropContext,0);
	};

	kwIndex() {
	    return this.getTypedRuleContext(KwIndexContext,0);
	};

	indexName() {
	    return this.getTypedRuleContext(IndexNameContext,0);
	};

	ifExist() {
	    return this.getTypedRuleContext(IfExistContext,0);
	};

	keyspace() {
	    return this.getTypedRuleContext(KeyspaceContext,0);
	};

	DOT() {
	    return this.getToken(CqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterDropIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitDropIndex(this);
		}
	}


}



class CreateTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_createTable;
    }

	kwCreate() {
	    return this.getTypedRuleContext(KwCreateContext,0);
	};

	kwTable() {
	    return this.getTypedRuleContext(KwTableContext,0);
	};

	table() {
	    return this.getTypedRuleContext(TableContext,0);
	};

	syntaxBracketLr() {
	    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
	};

	columnDefinitionList() {
	    return this.getTypedRuleContext(ColumnDefinitionListContext,0);
	};

	syntaxBracketRr() {
	    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
	};

	ifNotExist() {
	    return this.getTypedRuleContext(IfNotExistContext,0);
	};

	keyspace() {
	    return this.getTypedRuleContext(KeyspaceContext,0);
	};

	DOT() {
	    return this.getToken(CqlParser.DOT, 0);
	};

	withElement() {
	    return this.getTypedRuleContext(WithElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterCreateTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitCreateTable(this);
		}
	}


}



class WithElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_withElement;
    }

	kwWith() {
	    return this.getTypedRuleContext(KwWithContext,0);
	};

	tableOptions() {
	    return this.getTypedRuleContext(TableOptionsContext,0);
	};

	clusteringOrder() {
	    return this.getTypedRuleContext(ClusteringOrderContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterWithElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitWithElement(this);
		}
	}


}



class ClusteringOrderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_clusteringOrder;
    }

	kwClustering() {
	    return this.getTypedRuleContext(KwClusteringContext,0);
	};

	kwOrder() {
	    return this.getTypedRuleContext(KwOrderContext,0);
	};

	kwBy() {
	    return this.getTypedRuleContext(KwByContext,0);
	};

	syntaxBracketLr() {
	    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
	};

	column() {
	    return this.getTypedRuleContext(ColumnContext,0);
	};

	syntaxBracketRr() {
	    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
	};

	orderDirection() {
	    return this.getTypedRuleContext(OrderDirectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterClusteringOrder(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitClusteringOrder(this);
		}
	}


}



class TableOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_tableOptions;
    }

	tableOptionItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableOptionItemContext);
	    } else {
	        return this.getTypedRuleContext(TableOptionItemContext,i);
	    }
	};

	kwAnd = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KwAndContext);
	    } else {
	        return this.getTypedRuleContext(KwAndContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterTableOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitTableOptions(this);
		}
	}


}



class TableOptionItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_tableOptionItem;
    }

	tableOptionName() {
	    return this.getTypedRuleContext(TableOptionNameContext,0);
	};

	OPERATOR_EQ() {
	    return this.getToken(CqlParser.OPERATOR_EQ, 0);
	};

	tableOptionValue() {
	    return this.getTypedRuleContext(TableOptionValueContext,0);
	};

	optionHash() {
	    return this.getTypedRuleContext(OptionHashContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterTableOptionItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitTableOptionItem(this);
		}
	}


}



class TableOptionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_tableOptionName;
    }

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterTableOptionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitTableOptionName(this);
		}
	}


}



class TableOptionValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_tableOptionValue;
    }

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	floatLiteral() {
	    return this.getTypedRuleContext(FloatLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterTableOptionValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitTableOptionValue(this);
		}
	}


}



class OptionHashContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_optionHash;
    }

	syntaxBracketLc() {
	    return this.getTypedRuleContext(SyntaxBracketLcContext,0);
	};

	optionHashItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OptionHashItemContext);
	    } else {
	        return this.getTypedRuleContext(OptionHashItemContext,i);
	    }
	};

	syntaxBracketRc() {
	    return this.getTypedRuleContext(SyntaxBracketRcContext,0);
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterOptionHash(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitOptionHash(this);
		}
	}


}



class OptionHashItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_optionHashItem;
    }

	optionHashKey() {
	    return this.getTypedRuleContext(OptionHashKeyContext,0);
	};

	COLON() {
	    return this.getToken(CqlParser.COLON, 0);
	};

	optionHashValue() {
	    return this.getTypedRuleContext(OptionHashValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterOptionHashItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitOptionHashItem(this);
		}
	}


}



class OptionHashKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_optionHashKey;
    }

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterOptionHashKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitOptionHashKey(this);
		}
	}


}



class OptionHashValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_optionHashValue;
    }

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	floatLiteral() {
	    return this.getTypedRuleContext(FloatLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterOptionHashValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitOptionHashValue(this);
		}
	}


}



class ColumnDefinitionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_columnDefinitionList;
    }

	columnDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(ColumnDefinitionContext,i);
	    }
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	primaryKeyElement() {
	    return this.getTypedRuleContext(PrimaryKeyElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterColumnDefinitionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitColumnDefinitionList(this);
		}
	}


}



class ColumnDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_columnDefinition;
    }

	column() {
	    return this.getTypedRuleContext(ColumnContext,0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	primaryKeyColumn() {
	    return this.getTypedRuleContext(PrimaryKeyColumnContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterColumnDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitColumnDefinition(this);
		}
	}


}



class PrimaryKeyColumnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_primaryKeyColumn;
    }

	kwPrimary() {
	    return this.getTypedRuleContext(KwPrimaryContext,0);
	};

	kwKey() {
	    return this.getTypedRuleContext(KwKeyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterPrimaryKeyColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitPrimaryKeyColumn(this);
		}
	}


}



class PrimaryKeyElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_primaryKeyElement;
    }

	kwPrimary() {
	    return this.getTypedRuleContext(KwPrimaryContext,0);
	};

	kwKey() {
	    return this.getTypedRuleContext(KwKeyContext,0);
	};

	syntaxBracketLr() {
	    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
	};

	primaryKeyDefinition() {
	    return this.getTypedRuleContext(PrimaryKeyDefinitionContext,0);
	};

	syntaxBracketRr() {
	    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterPrimaryKeyElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitPrimaryKeyElement(this);
		}
	}


}



class PrimaryKeyDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_primaryKeyDefinition;
    }

	singlePrimaryKey() {
	    return this.getTypedRuleContext(SinglePrimaryKeyContext,0);
	};

	compoundKey() {
	    return this.getTypedRuleContext(CompoundKeyContext,0);
	};

	compositeKey() {
	    return this.getTypedRuleContext(CompositeKeyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterPrimaryKeyDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitPrimaryKeyDefinition(this);
		}
	}


}



class SinglePrimaryKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_singlePrimaryKey;
    }

	column() {
	    return this.getTypedRuleContext(ColumnContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterSinglePrimaryKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitSinglePrimaryKey(this);
		}
	}


}



class CompoundKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_compoundKey;
    }

	partitionKey() {
	    return this.getTypedRuleContext(PartitionKeyContext,0);
	};

	syntaxComma() {
	    return this.getTypedRuleContext(SyntaxCommaContext,0);
	};

	clusteringKeyList() {
	    return this.getTypedRuleContext(ClusteringKeyListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterCompoundKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitCompoundKey(this);
		}
	}


}



class CompositeKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_compositeKey;
    }

	syntaxBracketLr() {
	    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
	};

	partitionKeyList() {
	    return this.getTypedRuleContext(PartitionKeyListContext,0);
	};

	syntaxBracketRr() {
	    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
	};

	syntaxComma() {
	    return this.getTypedRuleContext(SyntaxCommaContext,0);
	};

	clusteringKeyList() {
	    return this.getTypedRuleContext(ClusteringKeyListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterCompositeKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitCompositeKey(this);
		}
	}


}



class PartitionKeyListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_partitionKeyList;
    }

	partitionKey = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionKeyContext);
	    } else {
	        return this.getTypedRuleContext(PartitionKeyContext,i);
	    }
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterPartitionKeyList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitPartitionKeyList(this);
		}
	}


}



class ClusteringKeyListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_clusteringKeyList;
    }

	clusteringKey = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClusteringKeyContext);
	    } else {
	        return this.getTypedRuleContext(ClusteringKeyContext,i);
	    }
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterClusteringKeyList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitClusteringKeyList(this);
		}
	}


}



class PartitionKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_partitionKey;
    }

	column() {
	    return this.getTypedRuleContext(ColumnContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterPartitionKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitPartitionKey(this);
		}
	}


}



class ClusteringKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_clusteringKey;
    }

	column() {
	    return this.getTypedRuleContext(ColumnContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterClusteringKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitClusteringKey(this);
		}
	}


}



class ApplyBatchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_applyBatch;
    }

	kwApply() {
	    return this.getTypedRuleContext(KwApplyContext,0);
	};

	kwBatch() {
	    return this.getTypedRuleContext(KwBatchContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterApplyBatch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitApplyBatch(this);
		}
	}


}



class BeginBatchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_beginBatch;
    }

	kwBegin() {
	    return this.getTypedRuleContext(KwBeginContext,0);
	};

	kwBatch() {
	    return this.getTypedRuleContext(KwBatchContext,0);
	};

	batchType() {
	    return this.getTypedRuleContext(BatchTypeContext,0);
	};

	usingTimestampSpec() {
	    return this.getTypedRuleContext(UsingTimestampSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterBeginBatch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitBeginBatch(this);
		}
	}


}



class BatchTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_batchType;
    }

	kwLogged() {
	    return this.getTypedRuleContext(KwLoggedContext,0);
	};

	kwUnlogged() {
	    return this.getTypedRuleContext(KwUnloggedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterBatchType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitBatchType(this);
		}
	}


}



class AlterKeyspaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_alterKeyspace;
    }

	kwAlter() {
	    return this.getTypedRuleContext(KwAlterContext,0);
	};

	kwKeyspace() {
	    return this.getTypedRuleContext(KwKeyspaceContext,0);
	};

	keyspace() {
	    return this.getTypedRuleContext(KeyspaceContext,0);
	};

	kwWith() {
	    return this.getTypedRuleContext(KwWithContext,0);
	};

	kwReplication() {
	    return this.getTypedRuleContext(KwReplicationContext,0);
	};

	OPERATOR_EQ() {
	    return this.getToken(CqlParser.OPERATOR_EQ, 0);
	};

	syntaxBracketLc() {
	    return this.getTypedRuleContext(SyntaxBracketLcContext,0);
	};

	replicationList() {
	    return this.getTypedRuleContext(ReplicationListContext,0);
	};

	syntaxBracketRc() {
	    return this.getTypedRuleContext(SyntaxBracketRcContext,0);
	};

	kwAnd() {
	    return this.getTypedRuleContext(KwAndContext,0);
	};

	durableWrites() {
	    return this.getTypedRuleContext(DurableWritesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAlterKeyspace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAlterKeyspace(this);
		}
	}


}



class ReplicationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_replicationList;
    }

	replicationListItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReplicationListItemContext);
	    } else {
	        return this.getTypedRuleContext(ReplicationListItemContext,i);
	    }
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterReplicationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitReplicationList(this);
		}
	}


}



class ReplicationListItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_replicationListItem;
    }

	STRING_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CqlParser.STRING_LITERAL);
	    } else {
	        return this.getToken(CqlParser.STRING_LITERAL, i);
	    }
	};


	COLON() {
	    return this.getToken(CqlParser.COLON, 0);
	};

	DECIMAL_LITERAL() {
	    return this.getToken(CqlParser.DECIMAL_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterReplicationListItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitReplicationListItem(this);
		}
	}


}



class DurableWritesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_durableWrites;
    }

	kwDurableWrites() {
	    return this.getTypedRuleContext(KwDurableWritesContext,0);
	};

	OPERATOR_EQ() {
	    return this.getToken(CqlParser.OPERATOR_EQ, 0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterDurableWrites(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitDurableWrites(this);
		}
	}


}



class Use_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_use_;
    }

	kwUse() {
	    return this.getTypedRuleContext(KwUseContext,0);
	};

	keyspace() {
	    return this.getTypedRuleContext(KeyspaceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterUse_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitUse_(this);
		}
	}


}



class TruncateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_truncate;
    }

	kwTruncate() {
	    return this.getTypedRuleContext(KwTruncateContext,0);
	};

	table() {
	    return this.getTypedRuleContext(TableContext,0);
	};

	kwTable() {
	    return this.getTypedRuleContext(KwTableContext,0);
	};

	keyspace() {
	    return this.getTypedRuleContext(KeyspaceContext,0);
	};

	DOT() {
	    return this.getToken(CqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterTruncate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitTruncate(this);
		}
	}


}



class CreateIndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_createIndex;
    }

	kwCreate() {
	    return this.getTypedRuleContext(KwCreateContext,0);
	};

	kwIndex() {
	    return this.getTypedRuleContext(KwIndexContext,0);
	};

	kwOn() {
	    return this.getTypedRuleContext(KwOnContext,0);
	};

	table() {
	    return this.getTypedRuleContext(TableContext,0);
	};

	syntaxBracketLr() {
	    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
	};

	indexColumnSpec() {
	    return this.getTypedRuleContext(IndexColumnSpecContext,0);
	};

	syntaxBracketRr() {
	    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
	};

	ifNotExist() {
	    return this.getTypedRuleContext(IfNotExistContext,0);
	};

	indexName() {
	    return this.getTypedRuleContext(IndexNameContext,0);
	};

	keyspace() {
	    return this.getTypedRuleContext(KeyspaceContext,0);
	};

	DOT() {
	    return this.getToken(CqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterCreateIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitCreateIndex(this);
		}
	}


}



class IndexNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_indexName;
    }

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterIndexName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitIndexName(this);
		}
	}


}



class IndexColumnSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_indexColumnSpec;
    }

	column() {
	    return this.getTypedRuleContext(ColumnContext,0);
	};

	indexKeysSpec() {
	    return this.getTypedRuleContext(IndexKeysSpecContext,0);
	};

	indexEntriesSSpec() {
	    return this.getTypedRuleContext(IndexEntriesSSpecContext,0);
	};

	indexFullSpec() {
	    return this.getTypedRuleContext(IndexFullSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterIndexColumnSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitIndexColumnSpec(this);
		}
	}


}



class IndexKeysSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_indexKeysSpec;
    }

	kwKeys() {
	    return this.getTypedRuleContext(KwKeysContext,0);
	};

	syntaxBracketLr() {
	    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
	};

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	syntaxBracketRr() {
	    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterIndexKeysSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitIndexKeysSpec(this);
		}
	}


}



class IndexEntriesSSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_indexEntriesSSpec;
    }

	kwEntries() {
	    return this.getTypedRuleContext(KwEntriesContext,0);
	};

	syntaxBracketLr() {
	    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
	};

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	syntaxBracketRr() {
	    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterIndexEntriesSSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitIndexEntriesSSpec(this);
		}
	}


}



class IndexFullSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_indexFullSpec;
    }

	kwFull() {
	    return this.getTypedRuleContext(KwFullContext,0);
	};

	syntaxBracketLr() {
	    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
	};

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	syntaxBracketRr() {
	    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterIndexFullSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitIndexFullSpec(this);
		}
	}


}



class Delete_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_delete_;
    }

	kwDelete() {
	    return this.getTypedRuleContext(KwDeleteContext,0);
	};

	fromSpec() {
	    return this.getTypedRuleContext(FromSpecContext,0);
	};

	whereSpec() {
	    return this.getTypedRuleContext(WhereSpecContext,0);
	};

	beginBatch() {
	    return this.getTypedRuleContext(BeginBatchContext,0);
	};

	deleteColumnList() {
	    return this.getTypedRuleContext(DeleteColumnListContext,0);
	};

	usingTimestampSpec() {
	    return this.getTypedRuleContext(UsingTimestampSpecContext,0);
	};

	ifExist() {
	    return this.getTypedRuleContext(IfExistContext,0);
	};

	ifSpec() {
	    return this.getTypedRuleContext(IfSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterDelete_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitDelete_(this);
		}
	}


}



class DeleteColumnListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_deleteColumnList;
    }

	deleteColumnItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeleteColumnItemContext);
	    } else {
	        return this.getTypedRuleContext(DeleteColumnItemContext,i);
	    }
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterDeleteColumnList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitDeleteColumnList(this);
		}
	}


}



class DeleteColumnItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_deleteColumnItem;
    }

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	LS_BRACKET() {
	    return this.getToken(CqlParser.LS_BRACKET, 0);
	};

	RS_BRACKET() {
	    return this.getToken(CqlParser.RS_BRACKET, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterDeleteColumnItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitDeleteColumnItem(this);
		}
	}


}



class UpdateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_update;
    }

	kwUpdate() {
	    return this.getTypedRuleContext(KwUpdateContext,0);
	};

	table() {
	    return this.getTypedRuleContext(TableContext,0);
	};

	kwSet() {
	    return this.getTypedRuleContext(KwSetContext,0);
	};

	assignments() {
	    return this.getTypedRuleContext(AssignmentsContext,0);
	};

	whereSpec() {
	    return this.getTypedRuleContext(WhereSpecContext,0);
	};

	beginBatch() {
	    return this.getTypedRuleContext(BeginBatchContext,0);
	};

	keyspace() {
	    return this.getTypedRuleContext(KeyspaceContext,0);
	};

	DOT() {
	    return this.getToken(CqlParser.DOT, 0);
	};

	usingTtlTimestamp() {
	    return this.getTypedRuleContext(UsingTtlTimestampContext,0);
	};

	ifExist() {
	    return this.getTypedRuleContext(IfExistContext,0);
	};

	ifSpec() {
	    return this.getTypedRuleContext(IfSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterUpdate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitUpdate(this);
		}
	}


}



class IfSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_ifSpec;
    }

	kwIf() {
	    return this.getTypedRuleContext(KwIfContext,0);
	};

	ifConditionList() {
	    return this.getTypedRuleContext(IfConditionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterIfSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitIfSpec(this);
		}
	}


}



class IfConditionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_ifConditionList;
    }

	ifCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfConditionContext);
	    } else {
	        return this.getTypedRuleContext(IfConditionContext,i);
	    }
	};

	kwAnd = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KwAndContext);
	    } else {
	        return this.getTypedRuleContext(KwAndContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterIfConditionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitIfConditionList(this);
		}
	}


}



class IfConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_ifCondition;
    }

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	OPERATOR_EQ() {
	    return this.getToken(CqlParser.OPERATOR_EQ, 0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterIfCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitIfCondition(this);
		}
	}


}



class AssignmentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_assignments;
    }

	assignmentElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentElementContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentElementContext,i);
	    }
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAssignments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAssignments(this);
		}
	}


}



class AssignmentElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_assignmentElement;
    }

	OBJECT_NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CqlParser.OBJECT_NAME);
	    } else {
	        return this.getToken(CqlParser.OBJECT_NAME, i);
	    }
	};


	OPERATOR_EQ() {
	    return this.getToken(CqlParser.OPERATOR_EQ, 0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	assignmentMap() {
	    return this.getTypedRuleContext(AssignmentMapContext,0);
	};

	assignmentSet() {
	    return this.getTypedRuleContext(AssignmentSetContext,0);
	};

	assignmentList() {
	    return this.getTypedRuleContext(AssignmentListContext,0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	PLUS() {
	    return this.getToken(CqlParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(CqlParser.MINUS, 0);
	};

	syntaxBracketLs() {
	    return this.getTypedRuleContext(SyntaxBracketLsContext,0);
	};

	syntaxBracketRs() {
	    return this.getTypedRuleContext(SyntaxBracketRsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAssignmentElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAssignmentElement(this);
		}
	}


}



class AssignmentSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_assignmentSet;
    }

	syntaxBracketLc() {
	    return this.getTypedRuleContext(SyntaxBracketLcContext,0);
	};

	syntaxBracketRc() {
	    return this.getTypedRuleContext(SyntaxBracketRcContext,0);
	};

	constant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantContext);
	    } else {
	        return this.getTypedRuleContext(ConstantContext,i);
	    }
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAssignmentSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAssignmentSet(this);
		}
	}


}



class AssignmentMapContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_assignmentMap;
    }

	syntaxBracketLc() {
	    return this.getTypedRuleContext(SyntaxBracketLcContext,0);
	};

	syntaxBracketRc() {
	    return this.getTypedRuleContext(SyntaxBracketRcContext,0);
	};

	constant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantContext);
	    } else {
	        return this.getTypedRuleContext(ConstantContext,i);
	    }
	};

	syntaxColon = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxColonContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxColonContext,i);
	    }
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAssignmentMap(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAssignmentMap(this);
		}
	}


}



class AssignmentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_assignmentList;
    }

	syntaxBracketLs() {
	    return this.getTypedRuleContext(SyntaxBracketLsContext,0);
	};

	constant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantContext);
	    } else {
	        return this.getTypedRuleContext(ConstantContext,i);
	    }
	};

	syntaxBracketRs() {
	    return this.getTypedRuleContext(SyntaxBracketRsContext,0);
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAssignmentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAssignmentList(this);
		}
	}


}



class AssignmentTupleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_assignmentTuple;
    }

	syntaxBracketLr() {
	    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
	};

	syntaxBracketRr() {
	    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAssignmentTuple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAssignmentTuple(this);
		}
	}


}



class InsertContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_insert;
    }

	kwInsert() {
	    return this.getTypedRuleContext(KwInsertContext,0);
	};

	kwInto() {
	    return this.getTypedRuleContext(KwIntoContext,0);
	};

	table() {
	    return this.getTypedRuleContext(TableContext,0);
	};

	insertValuesSpec() {
	    return this.getTypedRuleContext(InsertValuesSpecContext,0);
	};

	beginBatch() {
	    return this.getTypedRuleContext(BeginBatchContext,0);
	};

	keyspace() {
	    return this.getTypedRuleContext(KeyspaceContext,0);
	};

	DOT() {
	    return this.getToken(CqlParser.DOT, 0);
	};

	insertColumnSpec() {
	    return this.getTypedRuleContext(InsertColumnSpecContext,0);
	};

	ifNotExist() {
	    return this.getTypedRuleContext(IfNotExistContext,0);
	};

	usingTtlTimestamp() {
	    return this.getTypedRuleContext(UsingTtlTimestampContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterInsert(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitInsert(this);
		}
	}


}



class UsingTtlTimestampContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_usingTtlTimestamp;
    }

	kwUsing() {
	    return this.getTypedRuleContext(KwUsingContext,0);
	};

	ttl() {
	    return this.getTypedRuleContext(TtlContext,0);
	};

	kwAnd() {
	    return this.getTypedRuleContext(KwAndContext,0);
	};

	timestamp() {
	    return this.getTypedRuleContext(TimestampContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterUsingTtlTimestamp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitUsingTtlTimestamp(this);
		}
	}


}



class TimestampContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_timestamp;
    }

	kwTimestamp() {
	    return this.getTypedRuleContext(KwTimestampContext,0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterTimestamp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitTimestamp(this);
		}
	}


}



class TtlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_ttl;
    }

	kwTtl() {
	    return this.getTypedRuleContext(KwTtlContext,0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterTtl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitTtl(this);
		}
	}


}



class UsingTimestampSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_usingTimestampSpec;
    }

	kwUsing() {
	    return this.getTypedRuleContext(KwUsingContext,0);
	};

	timestamp() {
	    return this.getTypedRuleContext(TimestampContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterUsingTimestampSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitUsingTimestampSpec(this);
		}
	}


}



class IfNotExistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_ifNotExist;
    }

	kwIf() {
	    return this.getTypedRuleContext(KwIfContext,0);
	};

	kwNot() {
	    return this.getTypedRuleContext(KwNotContext,0);
	};

	kwExists() {
	    return this.getTypedRuleContext(KwExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterIfNotExist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitIfNotExist(this);
		}
	}


}



class IfExistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_ifExist;
    }

	kwIf() {
	    return this.getTypedRuleContext(KwIfContext,0);
	};

	kwExists() {
	    return this.getTypedRuleContext(KwExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterIfExist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitIfExist(this);
		}
	}


}



class InsertValuesSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_insertValuesSpec;
    }

	kwValues() {
	    return this.getTypedRuleContext(KwValuesContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(CqlParser.LR_BRACKET, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(CqlParser.RR_BRACKET, 0);
	};

	kwJson() {
	    return this.getTypedRuleContext(KwJsonContext,0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterInsertValuesSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitInsertValuesSpec(this);
		}
	}


}



class InsertColumnSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_insertColumnSpec;
    }

	LR_BRACKET() {
	    return this.getToken(CqlParser.LR_BRACKET, 0);
	};

	columnList() {
	    return this.getTypedRuleContext(ColumnListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(CqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterInsertColumnSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitInsertColumnSpec(this);
		}
	}


}



class ColumnListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_columnList;
    }

	column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnContext);
	    } else {
	        return this.getTypedRuleContext(ColumnContext,i);
	    }
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterColumnList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitColumnList(this);
		}
	}


}



class ExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_expressionList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitExpressionList(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_expression;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	assignmentMap() {
	    return this.getTypedRuleContext(AssignmentMapContext,0);
	};

	assignmentSet() {
	    return this.getTypedRuleContext(AssignmentSetContext,0);
	};

	assignmentList() {
	    return this.getTypedRuleContext(AssignmentListContext,0);
	};

	assignmentTuple() {
	    return this.getTypedRuleContext(AssignmentTupleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitExpression(this);
		}
	}


}



class Select_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_select_;
    }

	kwSelect() {
	    return this.getTypedRuleContext(KwSelectContext,0);
	};

	selectElements() {
	    return this.getTypedRuleContext(SelectElementsContext,0);
	};

	fromSpec() {
	    return this.getTypedRuleContext(FromSpecContext,0);
	};

	distinctSpec() {
	    return this.getTypedRuleContext(DistinctSpecContext,0);
	};

	kwJson() {
	    return this.getTypedRuleContext(KwJsonContext,0);
	};

	whereSpec() {
	    return this.getTypedRuleContext(WhereSpecContext,0);
	};

	orderSpec() {
	    return this.getTypedRuleContext(OrderSpecContext,0);
	};

	limitSpec() {
	    return this.getTypedRuleContext(LimitSpecContext,0);
	};

	allowFilteringSpec() {
	    return this.getTypedRuleContext(AllowFilteringSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterSelect_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitSelect_(this);
		}
	}


}



class AllowFilteringSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_allowFilteringSpec;
    }

	kwAllow() {
	    return this.getTypedRuleContext(KwAllowContext,0);
	};

	kwFiltering() {
	    return this.getTypedRuleContext(KwFilteringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAllowFilteringSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAllowFilteringSpec(this);
		}
	}


}



class LimitSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_limitSpec;
    }

	kwLimit() {
	    return this.getTypedRuleContext(KwLimitContext,0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterLimitSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitLimitSpec(this);
		}
	}


}



class FromSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_fromSpec;
    }

	kwFrom() {
	    return this.getTypedRuleContext(KwFromContext,0);
	};

	fromSpecElement() {
	    return this.getTypedRuleContext(FromSpecElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterFromSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitFromSpec(this);
		}
	}


}



class FromSpecElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_fromSpecElement;
    }

	OBJECT_NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CqlParser.OBJECT_NAME);
	    } else {
	        return this.getToken(CqlParser.OBJECT_NAME, i);
	    }
	};


	DOT() {
	    return this.getToken(CqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterFromSpecElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitFromSpecElement(this);
		}
	}


}



class OrderSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_orderSpec;
    }

	kwOrder() {
	    return this.getTypedRuleContext(KwOrderContext,0);
	};

	kwBy() {
	    return this.getTypedRuleContext(KwByContext,0);
	};

	orderSpecElement() {
	    return this.getTypedRuleContext(OrderSpecElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterOrderSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitOrderSpec(this);
		}
	}


}



class OrderSpecElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_orderSpecElement;
    }

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	kwAsc() {
	    return this.getTypedRuleContext(KwAscContext,0);
	};

	kwDesc() {
	    return this.getTypedRuleContext(KwDescContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterOrderSpecElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitOrderSpecElement(this);
		}
	}


}



class WhereSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_whereSpec;
    }

	kwWhere() {
	    return this.getTypedRuleContext(KwWhereContext,0);
	};

	relationElements() {
	    return this.getTypedRuleContext(RelationElementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterWhereSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitWhereSpec(this);
		}
	}


}



class DistinctSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_distinctSpec;
    }

	kwDistinct() {
	    return this.getTypedRuleContext(KwDistinctContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterDistinctSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitDistinctSpec(this);
		}
	}


}



class SelectElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_selectElements;
        this.star = null; // Token
    }

	selectElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectElementContext);
	    } else {
	        return this.getTypedRuleContext(SelectElementContext,i);
	    }
	};

	STAR() {
	    return this.getToken(CqlParser.STAR, 0);
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterSelectElements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitSelectElements(this);
		}
	}


}



class SelectElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_selectElement;
    }

	OBJECT_NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CqlParser.OBJECT_NAME);
	    } else {
	        return this.getToken(CqlParser.OBJECT_NAME, i);
	    }
	};


	DOT() {
	    return this.getToken(CqlParser.DOT, 0);
	};

	STAR() {
	    return this.getToken(CqlParser.STAR, 0);
	};

	kwAs() {
	    return this.getTypedRuleContext(KwAsContext,0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterSelectElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitSelectElement(this);
		}
	}


}



class RelationElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_relationElements;
    }

	relationElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationElementContext);
	    } else {
	        return this.getTypedRuleContext(RelationElementContext,i);
	    }
	};

	kwAnd = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KwAndContext);
	    } else {
	        return this.getTypedRuleContext(KwAndContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterRelationElements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitRelationElements(this);
		}
	}


}



class RelationElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_relationElement;
    }

	OBJECT_NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CqlParser.OBJECT_NAME);
	    } else {
	        return this.getToken(CqlParser.OBJECT_NAME, i);
	    }
	};


	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	OPERATOR_EQ() {
	    return this.getToken(CqlParser.OPERATOR_EQ, 0);
	};

	OPERATOR_LT() {
	    return this.getToken(CqlParser.OPERATOR_LT, 0);
	};

	OPERATOR_GT() {
	    return this.getToken(CqlParser.OPERATOR_GT, 0);
	};

	OPERATOR_LTE() {
	    return this.getToken(CqlParser.OPERATOR_LTE, 0);
	};

	OPERATOR_GTE() {
	    return this.getToken(CqlParser.OPERATOR_GTE, 0);
	};

	DOT() {
	    return this.getToken(CqlParser.DOT, 0);
	};

	functionCall = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionCallContext);
	    } else {
	        return this.getTypedRuleContext(FunctionCallContext,i);
	    }
	};

	kwIn() {
	    return this.getTypedRuleContext(KwInContext,0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(CqlParser.LR_BRACKET, i);
	    }
	};


	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(CqlParser.RR_BRACKET, i);
	    }
	};


	functionArgs() {
	    return this.getTypedRuleContext(FunctionArgsContext,0);
	};

	assignmentTuple = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentTupleContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentTupleContext,i);
	    }
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	relalationContainsKey() {
	    return this.getTypedRuleContext(RelalationContainsKeyContext,0);
	};

	relalationContains() {
	    return this.getTypedRuleContext(RelalationContainsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterRelationElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitRelationElement(this);
		}
	}


}



class RelalationContainsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_relalationContains;
    }

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	kwContains() {
	    return this.getTypedRuleContext(KwContainsContext,0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterRelalationContains(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitRelalationContains(this);
		}
	}


}



class RelalationContainsKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_relalationContainsKey;
    }

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	kwContains() {
	    return this.getTypedRuleContext(KwContainsContext,0);
	};

	kwKey() {
	    return this.getTypedRuleContext(KwKeyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterRelalationContainsKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitRelalationContainsKey(this);
		}
	}


}



class FunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_functionCall;
    }

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	LR_BRACKET() {
	    return this.getToken(CqlParser.LR_BRACKET, 0);
	};

	STAR() {
	    return this.getToken(CqlParser.STAR, 0);
	};

	RR_BRACKET() {
	    return this.getToken(CqlParser.RR_BRACKET, 0);
	};

	functionArgs() {
	    return this.getTypedRuleContext(FunctionArgsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitFunctionCall(this);
		}
	}


}



class FunctionArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_functionArgs;
    }

	constant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantContext);
	    } else {
	        return this.getTypedRuleContext(ConstantContext,i);
	    }
	};

	OBJECT_NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CqlParser.OBJECT_NAME);
	    } else {
	        return this.getToken(CqlParser.OBJECT_NAME, i);
	    }
	};


	functionCall = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionCallContext);
	    } else {
	        return this.getTypedRuleContext(FunctionCallContext,i);
	    }
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterFunctionArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitFunctionArgs(this);
		}
	}


}



class ConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_constant;
    }

	UUID() {
	    return this.getToken(CqlParser.UUID, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	floatLiteral() {
	    return this.getTypedRuleContext(FloatLiteralContext,0);
	};

	hexadecimalLiteral() {
	    return this.getTypedRuleContext(HexadecimalLiteralContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	codeBlock() {
	    return this.getTypedRuleContext(CodeBlockContext,0);
	};

	kwNull() {
	    return this.getTypedRuleContext(KwNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitConstant(this);
		}
	}


}



class DecimalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_decimalLiteral;
    }

	DECIMAL_LITERAL() {
	    return this.getToken(CqlParser.DECIMAL_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterDecimalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitDecimalLiteral(this);
		}
	}


}



class FloatLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_floatLiteral;
    }

	DECIMAL_LITERAL() {
	    return this.getToken(CqlParser.DECIMAL_LITERAL, 0);
	};

	FLOAT_LITERAL() {
	    return this.getToken(CqlParser.FLOAT_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterFloatLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitFloatLiteral(this);
		}
	}


}



class StringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_stringLiteral;
    }

	STRING_LITERAL() {
	    return this.getToken(CqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitStringLiteral(this);
		}
	}


}



class BooleanLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_booleanLiteral;
    }

	K_TRUE() {
	    return this.getToken(CqlParser.K_TRUE, 0);
	};

	K_FALSE() {
	    return this.getToken(CqlParser.K_FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitBooleanLiteral(this);
		}
	}


}



class HexadecimalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_hexadecimalLiteral;
    }

	HEXADECIMAL_LITERAL() {
	    return this.getToken(CqlParser.HEXADECIMAL_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterHexadecimalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitHexadecimalLiteral(this);
		}
	}


}



class KeyspaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_keyspace;
    }

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	DQUOTE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CqlParser.DQUOTE);
	    } else {
	        return this.getToken(CqlParser.DQUOTE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKeyspace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKeyspace(this);
		}
	}


}



class TableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_table;
    }

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	DQUOTE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CqlParser.DQUOTE);
	    } else {
	        return this.getToken(CqlParser.DQUOTE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitTable(this);
		}
	}


}



class ColumnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_column;
    }

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	DQUOTE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CqlParser.DQUOTE);
	    } else {
	        return this.getToken(CqlParser.DQUOTE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitColumn(this);
		}
	}


}



class DataTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_dataType;
    }

	dataTypeName() {
	    return this.getTypedRuleContext(DataTypeNameContext,0);
	};

	dataTypeDefinition() {
	    return this.getTypedRuleContext(DataTypeDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitDataType(this);
		}
	}


}



class DataTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_dataTypeName;
    }

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	K_TIMESTAMP() {
	    return this.getToken(CqlParser.K_TIMESTAMP, 0);
	};

	K_SET() {
	    return this.getToken(CqlParser.K_SET, 0);
	};

	K_ASCII() {
	    return this.getToken(CqlParser.K_ASCII, 0);
	};

	K_BIGINT() {
	    return this.getToken(CqlParser.K_BIGINT, 0);
	};

	K_BLOB() {
	    return this.getToken(CqlParser.K_BLOB, 0);
	};

	K_BOOLEAN() {
	    return this.getToken(CqlParser.K_BOOLEAN, 0);
	};

	K_COUNTER() {
	    return this.getToken(CqlParser.K_COUNTER, 0);
	};

	K_DATE() {
	    return this.getToken(CqlParser.K_DATE, 0);
	};

	K_DECIMAL() {
	    return this.getToken(CqlParser.K_DECIMAL, 0);
	};

	K_DOUBLE() {
	    return this.getToken(CqlParser.K_DOUBLE, 0);
	};

	K_FLOAT() {
	    return this.getToken(CqlParser.K_FLOAT, 0);
	};

	K_FROZEN() {
	    return this.getToken(CqlParser.K_FROZEN, 0);
	};

	K_INET() {
	    return this.getToken(CqlParser.K_INET, 0);
	};

	K_INT() {
	    return this.getToken(CqlParser.K_INT, 0);
	};

	K_LIST() {
	    return this.getToken(CqlParser.K_LIST, 0);
	};

	K_MAP() {
	    return this.getToken(CqlParser.K_MAP, 0);
	};

	K_SMALLINT() {
	    return this.getToken(CqlParser.K_SMALLINT, 0);
	};

	K_TEXT() {
	    return this.getToken(CqlParser.K_TEXT, 0);
	};

	K_TIME() {
	    return this.getToken(CqlParser.K_TIME, 0);
	};

	K_TIMEUUID() {
	    return this.getToken(CqlParser.K_TIMEUUID, 0);
	};

	K_TINYINT() {
	    return this.getToken(CqlParser.K_TINYINT, 0);
	};

	K_TUPLE() {
	    return this.getToken(CqlParser.K_TUPLE, 0);
	};

	K_VARCHAR() {
	    return this.getToken(CqlParser.K_VARCHAR, 0);
	};

	K_VARINT() {
	    return this.getToken(CqlParser.K_VARINT, 0);
	};

	K_UUID() {
	    return this.getToken(CqlParser.K_UUID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterDataTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitDataTypeName(this);
		}
	}


}



class DataTypeDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_dataTypeDefinition;
    }

	syntaxBracketLa() {
	    return this.getTypedRuleContext(SyntaxBracketLaContext,0);
	};

	dataTypeName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataTypeNameContext);
	    } else {
	        return this.getTypedRuleContext(DataTypeNameContext,i);
	    }
	};

	syntaxBracketRa() {
	    return this.getTypedRuleContext(SyntaxBracketRaContext,0);
	};

	syntaxComma = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SyntaxCommaContext);
	    } else {
	        return this.getTypedRuleContext(SyntaxCommaContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterDataTypeDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitDataTypeDefinition(this);
		}
	}


}



class OrderDirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_orderDirection;
    }

	kwAsc() {
	    return this.getTypedRuleContext(KwAscContext,0);
	};

	kwDesc() {
	    return this.getTypedRuleContext(KwDescContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterOrderDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitOrderDirection(this);
		}
	}


}



class RoleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_role;
    }

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitRole(this);
		}
	}


}



class TriggerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_trigger;
    }

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterTrigger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitTrigger(this);
		}
	}


}



class TriggerClassContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_triggerClass;
    }

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterTriggerClass(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitTriggerClass(this);
		}
	}


}



class MaterializedViewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_materializedView;
    }

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterMaterializedView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitMaterializedView(this);
		}
	}


}



class Type_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_type_;
    }

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterType_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitType_(this);
		}
	}


}



class AggregateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_aggregate;
    }

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterAggregate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitAggregate(this);
		}
	}


}



class Function_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_function_;
    }

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterFunction_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitFunction_(this);
		}
	}


}



class LanguageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_language;
    }

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterLanguage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitLanguage(this);
		}
	}


}



class UserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_user;
    }

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitUser(this);
		}
	}


}



class PasswordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_password;
    }

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterPassword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitPassword(this);
		}
	}


}



class HashKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_hashKey;
    }

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterHashKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitHashKey(this);
		}
	}


}



class ParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_param;
    }

	paramName() {
	    return this.getTypedRuleContext(ParamNameContext,0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitParam(this);
		}
	}


}



class ParamNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_paramName;
    }

	OBJECT_NAME() {
	    return this.getToken(CqlParser.OBJECT_NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterParamName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitParamName(this);
		}
	}


}



class KwAddContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwAdd;
    }

	K_ADD() {
	    return this.getToken(CqlParser.K_ADD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwAdd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwAdd(this);
		}
	}


}



class KwAggregateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwAggregate;
    }

	K_AGGREGATE() {
	    return this.getToken(CqlParser.K_AGGREGATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwAggregate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwAggregate(this);
		}
	}


}



class KwAllContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwAll;
    }

	K_ALL() {
	    return this.getToken(CqlParser.K_ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwAll(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwAll(this);
		}
	}


}



class KwAllPermissionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwAllPermissions;
    }

	K_ALL() {
	    return this.getToken(CqlParser.K_ALL, 0);
	};

	K_PERMISSIONS() {
	    return this.getToken(CqlParser.K_PERMISSIONS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwAllPermissions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwAllPermissions(this);
		}
	}


}



class KwAllowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwAllow;
    }

	K_ALLOW() {
	    return this.getToken(CqlParser.K_ALLOW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwAllow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwAllow(this);
		}
	}


}



class KwAlterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwAlter;
    }

	K_ALTER() {
	    return this.getToken(CqlParser.K_ALTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwAlter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwAlter(this);
		}
	}


}



class KwAndContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwAnd;
    }

	K_AND() {
	    return this.getToken(CqlParser.K_AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwAnd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwAnd(this);
		}
	}


}



class KwApplyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwApply;
    }

	K_APPLY() {
	    return this.getToken(CqlParser.K_APPLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwApply(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwApply(this);
		}
	}


}



class KwAsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwAs;
    }

	K_AS() {
	    return this.getToken(CqlParser.K_AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwAs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwAs(this);
		}
	}


}



class KwAscContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwAsc;
    }

	K_ASC() {
	    return this.getToken(CqlParser.K_ASC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwAsc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwAsc(this);
		}
	}


}



class KwAuthorizeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwAuthorize;
    }

	K_AUTHORIZE() {
	    return this.getToken(CqlParser.K_AUTHORIZE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwAuthorize(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwAuthorize(this);
		}
	}


}



class KwBatchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwBatch;
    }

	K_BATCH() {
	    return this.getToken(CqlParser.K_BATCH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwBatch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwBatch(this);
		}
	}


}



class KwBeginContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwBegin;
    }

	K_BEGIN() {
	    return this.getToken(CqlParser.K_BEGIN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwBegin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwBegin(this);
		}
	}


}



class KwByContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwBy;
    }

	K_BY() {
	    return this.getToken(CqlParser.K_BY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwBy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwBy(this);
		}
	}


}



class KwCalledContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwCalled;
    }

	K_CALLED() {
	    return this.getToken(CqlParser.K_CALLED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwCalled(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwCalled(this);
		}
	}


}



class KwClusteringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwClustering;
    }

	K_CLUSTERING() {
	    return this.getToken(CqlParser.K_CLUSTERING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwClustering(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwClustering(this);
		}
	}


}



class KwCompactContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwCompact;
    }

	K_COMPACT() {
	    return this.getToken(CqlParser.K_COMPACT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwCompact(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwCompact(this);
		}
	}


}



class KwContainsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwContains;
    }

	K_CONTAINS() {
	    return this.getToken(CqlParser.K_CONTAINS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwContains(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwContains(this);
		}
	}


}



class KwCreateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwCreate;
    }

	K_CREATE() {
	    return this.getToken(CqlParser.K_CREATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwCreate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwCreate(this);
		}
	}


}



class KwDeleteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwDelete;
    }

	K_DELETE() {
	    return this.getToken(CqlParser.K_DELETE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwDelete(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwDelete(this);
		}
	}


}



class KwDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwDesc;
    }

	K_DESC() {
	    return this.getToken(CqlParser.K_DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwDesc(this);
		}
	}


}



class KwDescibeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwDescibe;
    }

	K_DESCRIBE() {
	    return this.getToken(CqlParser.K_DESCRIBE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwDescibe(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwDescibe(this);
		}
	}


}



class KwDistinctContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwDistinct;
    }

	K_DISTINCT() {
	    return this.getToken(CqlParser.K_DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwDistinct(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwDistinct(this);
		}
	}


}



class KwDropContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwDrop;
    }

	K_DROP() {
	    return this.getToken(CqlParser.K_DROP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwDrop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwDrop(this);
		}
	}


}



class KwDurableWritesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwDurableWrites;
    }

	K_DURABLE_WRITES() {
	    return this.getToken(CqlParser.K_DURABLE_WRITES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwDurableWrites(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwDurableWrites(this);
		}
	}


}



class KwEntriesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwEntries;
    }

	K_ENTRIES() {
	    return this.getToken(CqlParser.K_ENTRIES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwEntries(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwEntries(this);
		}
	}


}



class KwExecuteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwExecute;
    }

	K_EXECUTE() {
	    return this.getToken(CqlParser.K_EXECUTE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwExecute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwExecute(this);
		}
	}


}



class KwExistsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwExists;
    }

	K_EXISTS() {
	    return this.getToken(CqlParser.K_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwExists(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwExists(this);
		}
	}


}



class KwFilteringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwFiltering;
    }

	K_FILTERING() {
	    return this.getToken(CqlParser.K_FILTERING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwFiltering(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwFiltering(this);
		}
	}


}



class KwFinalfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwFinalfunc;
    }

	K_FINALFUNC() {
	    return this.getToken(CqlParser.K_FINALFUNC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwFinalfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwFinalfunc(this);
		}
	}


}



class KwFromContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwFrom;
    }

	K_FROM() {
	    return this.getToken(CqlParser.K_FROM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwFrom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwFrom(this);
		}
	}


}



class KwFullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwFull;
    }

	K_FULL() {
	    return this.getToken(CqlParser.K_FULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwFull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwFull(this);
		}
	}


}



class KwFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwFunction;
    }

	K_FUNCTION() {
	    return this.getToken(CqlParser.K_FUNCTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwFunction(this);
		}
	}


}



class KwFunctionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwFunctions;
    }

	K_FUNCTIONS() {
	    return this.getToken(CqlParser.K_FUNCTIONS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwFunctions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwFunctions(this);
		}
	}


}



class KwGrantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwGrant;
    }

	K_GRANT() {
	    return this.getToken(CqlParser.K_GRANT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwGrant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwGrant(this);
		}
	}


}



class KwIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwIf;
    }

	K_IF() {
	    return this.getToken(CqlParser.K_IF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwIf(this);
		}
	}


}



class KwInContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwIn;
    }

	K_IN() {
	    return this.getToken(CqlParser.K_IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwIn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwIn(this);
		}
	}


}



class KwIndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwIndex;
    }

	K_INDEX() {
	    return this.getToken(CqlParser.K_INDEX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwIndex(this);
		}
	}


}



class KwInitcondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwInitcond;
    }

	K_INITCOND() {
	    return this.getToken(CqlParser.K_INITCOND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwInitcond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwInitcond(this);
		}
	}


}



class KwInputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwInput;
    }

	K_INPUT() {
	    return this.getToken(CqlParser.K_INPUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwInput(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwInput(this);
		}
	}


}



class KwInsertContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwInsert;
    }

	K_INSERT() {
	    return this.getToken(CqlParser.K_INSERT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwInsert(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwInsert(this);
		}
	}


}



class KwIntoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwInto;
    }

	K_INTO() {
	    return this.getToken(CqlParser.K_INTO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwInto(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwInto(this);
		}
	}


}



class KwIsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwIs;
    }

	K_IS() {
	    return this.getToken(CqlParser.K_IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwIs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwIs(this);
		}
	}


}



class KwJsonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwJson;
    }

	K_JSON() {
	    return this.getToken(CqlParser.K_JSON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwJson(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwJson(this);
		}
	}


}



class KwKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwKey;
    }

	K_KEY() {
	    return this.getToken(CqlParser.K_KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwKey(this);
		}
	}


}



class KwKeysContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwKeys;
    }

	K_KEYS() {
	    return this.getToken(CqlParser.K_KEYS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwKeys(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwKeys(this);
		}
	}


}



class KwKeyspaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwKeyspace;
    }

	K_KEYSPACE() {
	    return this.getToken(CqlParser.K_KEYSPACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwKeyspace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwKeyspace(this);
		}
	}


}



class KwKeyspacesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwKeyspaces;
    }

	K_KEYSPACES() {
	    return this.getToken(CqlParser.K_KEYSPACES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwKeyspaces(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwKeyspaces(this);
		}
	}


}



class KwLanguageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwLanguage;
    }

	K_LANGUAGE() {
	    return this.getToken(CqlParser.K_LANGUAGE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwLanguage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwLanguage(this);
		}
	}


}



class KwLimitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwLimit;
    }

	K_LIMIT() {
	    return this.getToken(CqlParser.K_LIMIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwLimit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwLimit(this);
		}
	}


}



class KwListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwList;
    }

	K_LIST() {
	    return this.getToken(CqlParser.K_LIST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwList(this);
		}
	}


}



class KwLoggedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwLogged;
    }

	K_LOGGED() {
	    return this.getToken(CqlParser.K_LOGGED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwLogged(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwLogged(this);
		}
	}


}



class KwLoginContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwLogin;
    }

	K_LOGIN() {
	    return this.getToken(CqlParser.K_LOGIN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwLogin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwLogin(this);
		}
	}


}



class KwMaterializedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwMaterialized;
    }

	K_MATERIALIZED() {
	    return this.getToken(CqlParser.K_MATERIALIZED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwMaterialized(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwMaterialized(this);
		}
	}


}



class KwModifyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwModify;
    }

	K_MODIFY() {
	    return this.getToken(CqlParser.K_MODIFY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwModify(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwModify(this);
		}
	}


}



class KwNosuperuserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwNosuperuser;
    }

	K_NOSUPERUSER() {
	    return this.getToken(CqlParser.K_NOSUPERUSER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwNosuperuser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwNosuperuser(this);
		}
	}


}



class KwNorecursiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwNorecursive;
    }

	K_NORECURSIVE() {
	    return this.getToken(CqlParser.K_NORECURSIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwNorecursive(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwNorecursive(this);
		}
	}


}



class KwNotContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwNot;
    }

	K_NOT() {
	    return this.getToken(CqlParser.K_NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwNot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwNot(this);
		}
	}


}



class KwNullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwNull;
    }

	K_NULL() {
	    return this.getToken(CqlParser.K_NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwNull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwNull(this);
		}
	}


}



class KwOfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwOf;
    }

	K_OF() {
	    return this.getToken(CqlParser.K_OF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwOf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwOf(this);
		}
	}


}



class KwOnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwOn;
    }

	K_ON() {
	    return this.getToken(CqlParser.K_ON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwOn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwOn(this);
		}
	}


}



class KwOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwOptions;
    }

	K_OPTIONS() {
	    return this.getToken(CqlParser.K_OPTIONS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwOptions(this);
		}
	}


}



class KwOrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwOr;
    }

	K_OR() {
	    return this.getToken(CqlParser.K_OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwOr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwOr(this);
		}
	}


}



class KwOrderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwOrder;
    }

	K_ORDER() {
	    return this.getToken(CqlParser.K_ORDER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwOrder(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwOrder(this);
		}
	}


}



class KwPasswordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwPassword;
    }

	K_PASSWORD() {
	    return this.getToken(CqlParser.K_PASSWORD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwPassword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwPassword(this);
		}
	}


}



class KwPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwPrimary;
    }

	K_PRIMARY() {
	    return this.getToken(CqlParser.K_PRIMARY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwPrimary(this);
		}
	}


}



class KwRenameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwRename;
    }

	K_RENAME() {
	    return this.getToken(CqlParser.K_RENAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwRename(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwRename(this);
		}
	}


}



class KwReplaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwReplace;
    }

	K_REPLACE() {
	    return this.getToken(CqlParser.K_REPLACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwReplace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwReplace(this);
		}
	}


}



class KwReplicationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwReplication;
    }

	K_REPLICATION() {
	    return this.getToken(CqlParser.K_REPLICATION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwReplication(this);
		}
	}


}



class KwReturnsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwReturns;
    }

	K_RETURNS() {
	    return this.getToken(CqlParser.K_RETURNS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwReturns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwReturns(this);
		}
	}


}



class KwRoleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwRole;
    }

	K_ROLE() {
	    return this.getToken(CqlParser.K_ROLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwRole(this);
		}
	}


}



class KwRolesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwRoles;
    }

	K_ROLES() {
	    return this.getToken(CqlParser.K_ROLES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwRoles(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwRoles(this);
		}
	}


}



class KwSelectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwSelect;
    }

	K_SELECT() {
	    return this.getToken(CqlParser.K_SELECT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwSelect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwSelect(this);
		}
	}


}



class KwSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwSet;
    }

	K_SET() {
	    return this.getToken(CqlParser.K_SET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwSet(this);
		}
	}


}



class KwSfuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwSfunc;
    }

	K_SFUNC() {
	    return this.getToken(CqlParser.K_SFUNC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwSfunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwSfunc(this);
		}
	}


}



class KwStorageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwStorage;
    }

	K_STORAGE() {
	    return this.getToken(CqlParser.K_STORAGE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwStorage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwStorage(this);
		}
	}


}



class KwStypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwStype;
    }

	K_STYPE() {
	    return this.getToken(CqlParser.K_STYPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwStype(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwStype(this);
		}
	}


}



class KwSuperuserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwSuperuser;
    }

	K_SUPERUSER() {
	    return this.getToken(CqlParser.K_SUPERUSER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwSuperuser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwSuperuser(this);
		}
	}


}



class KwTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwTable;
    }

	K_TABLE() {
	    return this.getToken(CqlParser.K_TABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwTable(this);
		}
	}


}



class KwTimestampContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwTimestamp;
    }

	K_TIMESTAMP() {
	    return this.getToken(CqlParser.K_TIMESTAMP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwTimestamp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwTimestamp(this);
		}
	}


}



class KwToContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwTo;
    }

	K_TO() {
	    return this.getToken(CqlParser.K_TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwTo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwTo(this);
		}
	}


}



class KwTriggerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwTrigger;
    }

	K_TRIGGER() {
	    return this.getToken(CqlParser.K_TRIGGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwTrigger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwTrigger(this);
		}
	}


}



class KwTruncateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwTruncate;
    }

	K_TRUNCATE() {
	    return this.getToken(CqlParser.K_TRUNCATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwTruncate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwTruncate(this);
		}
	}


}



class KwTtlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwTtl;
    }

	K_TTL() {
	    return this.getToken(CqlParser.K_TTL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwTtl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwTtl(this);
		}
	}


}



class KwTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwType;
    }

	K_TYPE() {
	    return this.getToken(CqlParser.K_TYPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwType(this);
		}
	}


}



class KwUnloggedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwUnlogged;
    }

	K_UNLOGGED() {
	    return this.getToken(CqlParser.K_UNLOGGED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwUnlogged(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwUnlogged(this);
		}
	}


}



class KwUpdateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwUpdate;
    }

	K_UPDATE() {
	    return this.getToken(CqlParser.K_UPDATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwUpdate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwUpdate(this);
		}
	}


}



class KwUseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwUse;
    }

	K_USE() {
	    return this.getToken(CqlParser.K_USE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwUse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwUse(this);
		}
	}


}



class KwUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwUser;
    }

	K_USER() {
	    return this.getToken(CqlParser.K_USER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwUser(this);
		}
	}


}



class KwUsersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwUsers;
    }

	K_USERS() {
	    return this.getToken(CqlParser.K_USERS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwUsers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwUsers(this);
		}
	}


}



class KwUsingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwUsing;
    }

	K_USING() {
	    return this.getToken(CqlParser.K_USING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwUsing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwUsing(this);
		}
	}


}



class KwValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwValues;
    }

	K_VALUES() {
	    return this.getToken(CqlParser.K_VALUES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwValues(this);
		}
	}


}



class KwViewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwView;
    }

	K_VIEW() {
	    return this.getToken(CqlParser.K_VIEW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwView(this);
		}
	}


}



class KwWhereContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwWhere;
    }

	K_WHERE() {
	    return this.getToken(CqlParser.K_WHERE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwWhere(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwWhere(this);
		}
	}


}



class KwWithContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwWith;
    }

	K_WITH() {
	    return this.getToken(CqlParser.K_WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwWith(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwWith(this);
		}
	}


}



class KwRevokeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_kwRevoke;
    }

	K_REVOKE() {
	    return this.getToken(CqlParser.K_REVOKE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterKwRevoke(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitKwRevoke(this);
		}
	}


}



class EofContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_eof;
    }

	EOF() {
	    return this.getToken(CqlParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterEof(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitEof(this);
		}
	}


}



class SyntaxBracketLrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_syntaxBracketLr;
    }

	LR_BRACKET() {
	    return this.getToken(CqlParser.LR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterSyntaxBracketLr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitSyntaxBracketLr(this);
		}
	}


}



class SyntaxBracketRrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_syntaxBracketRr;
    }

	RR_BRACKET() {
	    return this.getToken(CqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterSyntaxBracketRr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitSyntaxBracketRr(this);
		}
	}


}



class SyntaxBracketLcContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_syntaxBracketLc;
    }

	LC_BRACKET() {
	    return this.getToken(CqlParser.LC_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterSyntaxBracketLc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitSyntaxBracketLc(this);
		}
	}


}



class SyntaxBracketRcContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_syntaxBracketRc;
    }

	RC_BRACKET() {
	    return this.getToken(CqlParser.RC_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterSyntaxBracketRc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitSyntaxBracketRc(this);
		}
	}


}



class SyntaxBracketLaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_syntaxBracketLa;
    }

	OPERATOR_LT() {
	    return this.getToken(CqlParser.OPERATOR_LT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterSyntaxBracketLa(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitSyntaxBracketLa(this);
		}
	}


}



class SyntaxBracketRaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_syntaxBracketRa;
    }

	OPERATOR_GT() {
	    return this.getToken(CqlParser.OPERATOR_GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterSyntaxBracketRa(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitSyntaxBracketRa(this);
		}
	}


}



class SyntaxBracketLsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_syntaxBracketLs;
    }

	LS_BRACKET() {
	    return this.getToken(CqlParser.LS_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterSyntaxBracketLs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitSyntaxBracketLs(this);
		}
	}


}



class SyntaxBracketRsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_syntaxBracketRs;
    }

	RS_BRACKET() {
	    return this.getToken(CqlParser.RS_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterSyntaxBracketRs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitSyntaxBracketRs(this);
		}
	}


}



class SyntaxCommaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_syntaxComma;
    }

	COMMA() {
	    return this.getToken(CqlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterSyntaxComma(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitSyntaxComma(this);
		}
	}


}



class SyntaxColonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CqlParser.RULE_syntaxColon;
    }

	COLON() {
	    return this.getToken(CqlParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.enterSyntaxColon(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CqlParserListener ) {
	        listener.exitSyntaxColon(this);
		}
	}


}




CqlParser.RootContext = RootContext; 
CqlParser.CqlsContext = CqlsContext; 
CqlParser.StatementSeparatorContext = StatementSeparatorContext; 
CqlParser.Empty_Context = Empty_Context; 
CqlParser.CqlContext = CqlContext; 
CqlParser.RevokeContext = RevokeContext; 
CqlParser.ListUsersContext = ListUsersContext; 
CqlParser.ListRolesContext = ListRolesContext; 
CqlParser.ListPermissionsContext = ListPermissionsContext; 
CqlParser.GrantContext = GrantContext; 
CqlParser.PriviledgeContext = PriviledgeContext; 
CqlParser.ResourceContext = ResourceContext; 
CqlParser.CreateUserContext = CreateUserContext; 
CqlParser.CreateRoleContext = CreateRoleContext; 
CqlParser.CreateTypeContext = CreateTypeContext; 
CqlParser.TypeMemberColumnListContext = TypeMemberColumnListContext; 
CqlParser.CreateTriggerContext = CreateTriggerContext; 
CqlParser.CreateMaterializedViewContext = CreateMaterializedViewContext; 
CqlParser.MaterializedViewWhereContext = MaterializedViewWhereContext; 
CqlParser.ColumnNotNullListContext = ColumnNotNullListContext; 
CqlParser.ColumnNotNullContext = ColumnNotNullContext; 
CqlParser.MaterializedViewOptionsContext = MaterializedViewOptionsContext; 
CqlParser.CreateKeyspaceContext = CreateKeyspaceContext; 
CqlParser.CreateFunctionContext = CreateFunctionContext; 
CqlParser.CodeBlockContext = CodeBlockContext; 
CqlParser.ParamListContext = ParamListContext; 
CqlParser.ReturnModeContext = ReturnModeContext; 
CqlParser.CreateAggregateContext = CreateAggregateContext; 
CqlParser.InitCondDefinitionContext = InitCondDefinitionContext; 
CqlParser.InitCondHashContext = InitCondHashContext; 
CqlParser.InitCondHashItemContext = InitCondHashItemContext; 
CqlParser.InitCondListNestedContext = InitCondListNestedContext; 
CqlParser.InitCondListContext = InitCondListContext; 
CqlParser.OrReplaceContext = OrReplaceContext; 
CqlParser.AlterUserContext = AlterUserContext; 
CqlParser.UserPasswordContext = UserPasswordContext; 
CqlParser.UserSuperUserContext = UserSuperUserContext; 
CqlParser.AlterTypeContext = AlterTypeContext; 
CqlParser.AlterTypeOperationContext = AlterTypeOperationContext; 
CqlParser.AlterTypeRenameContext = AlterTypeRenameContext; 
CqlParser.AlterTypeRenameListContext = AlterTypeRenameListContext; 
CqlParser.AlterTypeRenameItemContext = AlterTypeRenameItemContext; 
CqlParser.AlterTypeAddContext = AlterTypeAddContext; 
CqlParser.AlterTypeAlterTypeContext = AlterTypeAlterTypeContext; 
CqlParser.AlterTableContext = AlterTableContext; 
CqlParser.AlterTableOperationContext = AlterTableOperationContext; 
CqlParser.AlterTableWithContext = AlterTableWithContext; 
CqlParser.AlterTableRenameContext = AlterTableRenameContext; 
CqlParser.AlterTableDropCompactStorageContext = AlterTableDropCompactStorageContext; 
CqlParser.AlterTableDropColumnsContext = AlterTableDropColumnsContext; 
CqlParser.AlterTableDropColumnListContext = AlterTableDropColumnListContext; 
CqlParser.AlterTableAddContext = AlterTableAddContext; 
CqlParser.AlterTableColumnDefinitionContext = AlterTableColumnDefinitionContext; 
CqlParser.AlterRoleContext = AlterRoleContext; 
CqlParser.RoleWithContext = RoleWithContext; 
CqlParser.RoleWithOptionsContext = RoleWithOptionsContext; 
CqlParser.AlterMaterializedViewContext = AlterMaterializedViewContext; 
CqlParser.DropUserContext = DropUserContext; 
CqlParser.DropTypeContext = DropTypeContext; 
CqlParser.DropMaterializedViewContext = DropMaterializedViewContext; 
CqlParser.DropAggregateContext = DropAggregateContext; 
CqlParser.DropFunctionContext = DropFunctionContext; 
CqlParser.DropTriggerContext = DropTriggerContext; 
CqlParser.DropRoleContext = DropRoleContext; 
CqlParser.DropTableContext = DropTableContext; 
CqlParser.DropKeyspaceContext = DropKeyspaceContext; 
CqlParser.DropIndexContext = DropIndexContext; 
CqlParser.CreateTableContext = CreateTableContext; 
CqlParser.WithElementContext = WithElementContext; 
CqlParser.ClusteringOrderContext = ClusteringOrderContext; 
CqlParser.TableOptionsContext = TableOptionsContext; 
CqlParser.TableOptionItemContext = TableOptionItemContext; 
CqlParser.TableOptionNameContext = TableOptionNameContext; 
CqlParser.TableOptionValueContext = TableOptionValueContext; 
CqlParser.OptionHashContext = OptionHashContext; 
CqlParser.OptionHashItemContext = OptionHashItemContext; 
CqlParser.OptionHashKeyContext = OptionHashKeyContext; 
CqlParser.OptionHashValueContext = OptionHashValueContext; 
CqlParser.ColumnDefinitionListContext = ColumnDefinitionListContext; 
CqlParser.ColumnDefinitionContext = ColumnDefinitionContext; 
CqlParser.PrimaryKeyColumnContext = PrimaryKeyColumnContext; 
CqlParser.PrimaryKeyElementContext = PrimaryKeyElementContext; 
CqlParser.PrimaryKeyDefinitionContext = PrimaryKeyDefinitionContext; 
CqlParser.SinglePrimaryKeyContext = SinglePrimaryKeyContext; 
CqlParser.CompoundKeyContext = CompoundKeyContext; 
CqlParser.CompositeKeyContext = CompositeKeyContext; 
CqlParser.PartitionKeyListContext = PartitionKeyListContext; 
CqlParser.ClusteringKeyListContext = ClusteringKeyListContext; 
CqlParser.PartitionKeyContext = PartitionKeyContext; 
CqlParser.ClusteringKeyContext = ClusteringKeyContext; 
CqlParser.ApplyBatchContext = ApplyBatchContext; 
CqlParser.BeginBatchContext = BeginBatchContext; 
CqlParser.BatchTypeContext = BatchTypeContext; 
CqlParser.AlterKeyspaceContext = AlterKeyspaceContext; 
CqlParser.ReplicationListContext = ReplicationListContext; 
CqlParser.ReplicationListItemContext = ReplicationListItemContext; 
CqlParser.DurableWritesContext = DurableWritesContext; 
CqlParser.Use_Context = Use_Context; 
CqlParser.TruncateContext = TruncateContext; 
CqlParser.CreateIndexContext = CreateIndexContext; 
CqlParser.IndexNameContext = IndexNameContext; 
CqlParser.IndexColumnSpecContext = IndexColumnSpecContext; 
CqlParser.IndexKeysSpecContext = IndexKeysSpecContext; 
CqlParser.IndexEntriesSSpecContext = IndexEntriesSSpecContext; 
CqlParser.IndexFullSpecContext = IndexFullSpecContext; 
CqlParser.Delete_Context = Delete_Context; 
CqlParser.DeleteColumnListContext = DeleteColumnListContext; 
CqlParser.DeleteColumnItemContext = DeleteColumnItemContext; 
CqlParser.UpdateContext = UpdateContext; 
CqlParser.IfSpecContext = IfSpecContext; 
CqlParser.IfConditionListContext = IfConditionListContext; 
CqlParser.IfConditionContext = IfConditionContext; 
CqlParser.AssignmentsContext = AssignmentsContext; 
CqlParser.AssignmentElementContext = AssignmentElementContext; 
CqlParser.AssignmentSetContext = AssignmentSetContext; 
CqlParser.AssignmentMapContext = AssignmentMapContext; 
CqlParser.AssignmentListContext = AssignmentListContext; 
CqlParser.AssignmentTupleContext = AssignmentTupleContext; 
CqlParser.InsertContext = InsertContext; 
CqlParser.UsingTtlTimestampContext = UsingTtlTimestampContext; 
CqlParser.TimestampContext = TimestampContext; 
CqlParser.TtlContext = TtlContext; 
CqlParser.UsingTimestampSpecContext = UsingTimestampSpecContext; 
CqlParser.IfNotExistContext = IfNotExistContext; 
CqlParser.IfExistContext = IfExistContext; 
CqlParser.InsertValuesSpecContext = InsertValuesSpecContext; 
CqlParser.InsertColumnSpecContext = InsertColumnSpecContext; 
CqlParser.ColumnListContext = ColumnListContext; 
CqlParser.ExpressionListContext = ExpressionListContext; 
CqlParser.ExpressionContext = ExpressionContext; 
CqlParser.Select_Context = Select_Context; 
CqlParser.AllowFilteringSpecContext = AllowFilteringSpecContext; 
CqlParser.LimitSpecContext = LimitSpecContext; 
CqlParser.FromSpecContext = FromSpecContext; 
CqlParser.FromSpecElementContext = FromSpecElementContext; 
CqlParser.OrderSpecContext = OrderSpecContext; 
CqlParser.OrderSpecElementContext = OrderSpecElementContext; 
CqlParser.WhereSpecContext = WhereSpecContext; 
CqlParser.DistinctSpecContext = DistinctSpecContext; 
CqlParser.SelectElementsContext = SelectElementsContext; 
CqlParser.SelectElementContext = SelectElementContext; 
CqlParser.RelationElementsContext = RelationElementsContext; 
CqlParser.RelationElementContext = RelationElementContext; 
CqlParser.RelalationContainsContext = RelalationContainsContext; 
CqlParser.RelalationContainsKeyContext = RelalationContainsKeyContext; 
CqlParser.FunctionCallContext = FunctionCallContext; 
CqlParser.FunctionArgsContext = FunctionArgsContext; 
CqlParser.ConstantContext = ConstantContext; 
CqlParser.DecimalLiteralContext = DecimalLiteralContext; 
CqlParser.FloatLiteralContext = FloatLiteralContext; 
CqlParser.StringLiteralContext = StringLiteralContext; 
CqlParser.BooleanLiteralContext = BooleanLiteralContext; 
CqlParser.HexadecimalLiteralContext = HexadecimalLiteralContext; 
CqlParser.KeyspaceContext = KeyspaceContext; 
CqlParser.TableContext = TableContext; 
CqlParser.ColumnContext = ColumnContext; 
CqlParser.DataTypeContext = DataTypeContext; 
CqlParser.DataTypeNameContext = DataTypeNameContext; 
CqlParser.DataTypeDefinitionContext = DataTypeDefinitionContext; 
CqlParser.OrderDirectionContext = OrderDirectionContext; 
CqlParser.RoleContext = RoleContext; 
CqlParser.TriggerContext = TriggerContext; 
CqlParser.TriggerClassContext = TriggerClassContext; 
CqlParser.MaterializedViewContext = MaterializedViewContext; 
CqlParser.Type_Context = Type_Context; 
CqlParser.AggregateContext = AggregateContext; 
CqlParser.Function_Context = Function_Context; 
CqlParser.LanguageContext = LanguageContext; 
CqlParser.UserContext = UserContext; 
CqlParser.PasswordContext = PasswordContext; 
CqlParser.HashKeyContext = HashKeyContext; 
CqlParser.ParamContext = ParamContext; 
CqlParser.ParamNameContext = ParamNameContext; 
CqlParser.KwAddContext = KwAddContext; 
CqlParser.KwAggregateContext = KwAggregateContext; 
CqlParser.KwAllContext = KwAllContext; 
CqlParser.KwAllPermissionsContext = KwAllPermissionsContext; 
CqlParser.KwAllowContext = KwAllowContext; 
CqlParser.KwAlterContext = KwAlterContext; 
CqlParser.KwAndContext = KwAndContext; 
CqlParser.KwApplyContext = KwApplyContext; 
CqlParser.KwAsContext = KwAsContext; 
CqlParser.KwAscContext = KwAscContext; 
CqlParser.KwAuthorizeContext = KwAuthorizeContext; 
CqlParser.KwBatchContext = KwBatchContext; 
CqlParser.KwBeginContext = KwBeginContext; 
CqlParser.KwByContext = KwByContext; 
CqlParser.KwCalledContext = KwCalledContext; 
CqlParser.KwClusteringContext = KwClusteringContext; 
CqlParser.KwCompactContext = KwCompactContext; 
CqlParser.KwContainsContext = KwContainsContext; 
CqlParser.KwCreateContext = KwCreateContext; 
CqlParser.KwDeleteContext = KwDeleteContext; 
CqlParser.KwDescContext = KwDescContext; 
CqlParser.KwDescibeContext = KwDescibeContext; 
CqlParser.KwDistinctContext = KwDistinctContext; 
CqlParser.KwDropContext = KwDropContext; 
CqlParser.KwDurableWritesContext = KwDurableWritesContext; 
CqlParser.KwEntriesContext = KwEntriesContext; 
CqlParser.KwExecuteContext = KwExecuteContext; 
CqlParser.KwExistsContext = KwExistsContext; 
CqlParser.KwFilteringContext = KwFilteringContext; 
CqlParser.KwFinalfuncContext = KwFinalfuncContext; 
CqlParser.KwFromContext = KwFromContext; 
CqlParser.KwFullContext = KwFullContext; 
CqlParser.KwFunctionContext = KwFunctionContext; 
CqlParser.KwFunctionsContext = KwFunctionsContext; 
CqlParser.KwGrantContext = KwGrantContext; 
CqlParser.KwIfContext = KwIfContext; 
CqlParser.KwInContext = KwInContext; 
CqlParser.KwIndexContext = KwIndexContext; 
CqlParser.KwInitcondContext = KwInitcondContext; 
CqlParser.KwInputContext = KwInputContext; 
CqlParser.KwInsertContext = KwInsertContext; 
CqlParser.KwIntoContext = KwIntoContext; 
CqlParser.KwIsContext = KwIsContext; 
CqlParser.KwJsonContext = KwJsonContext; 
CqlParser.KwKeyContext = KwKeyContext; 
CqlParser.KwKeysContext = KwKeysContext; 
CqlParser.KwKeyspaceContext = KwKeyspaceContext; 
CqlParser.KwKeyspacesContext = KwKeyspacesContext; 
CqlParser.KwLanguageContext = KwLanguageContext; 
CqlParser.KwLimitContext = KwLimitContext; 
CqlParser.KwListContext = KwListContext; 
CqlParser.KwLoggedContext = KwLoggedContext; 
CqlParser.KwLoginContext = KwLoginContext; 
CqlParser.KwMaterializedContext = KwMaterializedContext; 
CqlParser.KwModifyContext = KwModifyContext; 
CqlParser.KwNosuperuserContext = KwNosuperuserContext; 
CqlParser.KwNorecursiveContext = KwNorecursiveContext; 
CqlParser.KwNotContext = KwNotContext; 
CqlParser.KwNullContext = KwNullContext; 
CqlParser.KwOfContext = KwOfContext; 
CqlParser.KwOnContext = KwOnContext; 
CqlParser.KwOptionsContext = KwOptionsContext; 
CqlParser.KwOrContext = KwOrContext; 
CqlParser.KwOrderContext = KwOrderContext; 
CqlParser.KwPasswordContext = KwPasswordContext; 
CqlParser.KwPrimaryContext = KwPrimaryContext; 
CqlParser.KwRenameContext = KwRenameContext; 
CqlParser.KwReplaceContext = KwReplaceContext; 
CqlParser.KwReplicationContext = KwReplicationContext; 
CqlParser.KwReturnsContext = KwReturnsContext; 
CqlParser.KwRoleContext = KwRoleContext; 
CqlParser.KwRolesContext = KwRolesContext; 
CqlParser.KwSelectContext = KwSelectContext; 
CqlParser.KwSetContext = KwSetContext; 
CqlParser.KwSfuncContext = KwSfuncContext; 
CqlParser.KwStorageContext = KwStorageContext; 
CqlParser.KwStypeContext = KwStypeContext; 
CqlParser.KwSuperuserContext = KwSuperuserContext; 
CqlParser.KwTableContext = KwTableContext; 
CqlParser.KwTimestampContext = KwTimestampContext; 
CqlParser.KwToContext = KwToContext; 
CqlParser.KwTriggerContext = KwTriggerContext; 
CqlParser.KwTruncateContext = KwTruncateContext; 
CqlParser.KwTtlContext = KwTtlContext; 
CqlParser.KwTypeContext = KwTypeContext; 
CqlParser.KwUnloggedContext = KwUnloggedContext; 
CqlParser.KwUpdateContext = KwUpdateContext; 
CqlParser.KwUseContext = KwUseContext; 
CqlParser.KwUserContext = KwUserContext; 
CqlParser.KwUsersContext = KwUsersContext; 
CqlParser.KwUsingContext = KwUsingContext; 
CqlParser.KwValuesContext = KwValuesContext; 
CqlParser.KwViewContext = KwViewContext; 
CqlParser.KwWhereContext = KwWhereContext; 
CqlParser.KwWithContext = KwWithContext; 
CqlParser.KwRevokeContext = KwRevokeContext; 
CqlParser.EofContext = EofContext; 
CqlParser.SyntaxBracketLrContext = SyntaxBracketLrContext; 
CqlParser.SyntaxBracketRrContext = SyntaxBracketRrContext; 
CqlParser.SyntaxBracketLcContext = SyntaxBracketLcContext; 
CqlParser.SyntaxBracketRcContext = SyntaxBracketRcContext; 
CqlParser.SyntaxBracketLaContext = SyntaxBracketLaContext; 
CqlParser.SyntaxBracketRaContext = SyntaxBracketRaContext; 
CqlParser.SyntaxBracketLsContext = SyntaxBracketLsContext; 
CqlParser.SyntaxBracketRsContext = SyntaxBracketRsContext; 
CqlParser.SyntaxCommaContext = SyntaxCommaContext; 
CqlParser.SyntaxColonContext = SyntaxColonContext; 
