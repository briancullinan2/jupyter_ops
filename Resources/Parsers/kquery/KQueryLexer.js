// Generated from Resources/Parsers/kquery/KQuery.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,71,498,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,
56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,1,0,1,0,3,0,154,8,0,1,1,1,1,3,
1,158,8,1,1,1,1,1,1,2,4,2,163,8,2,11,2,12,2,164,1,2,1,2,1,2,3,2,170,8,2,
1,3,1,3,4,3,174,8,3,11,3,12,3,175,1,4,1,4,4,4,180,8,4,11,4,12,4,181,1,5,
1,5,4,5,186,8,5,11,5,12,5,187,1,6,1,6,4,6,192,8,6,11,6,12,6,193,1,6,1,6,
5,6,198,8,6,10,6,12,6,201,9,6,3,6,203,8,6,1,7,1,7,4,7,207,8,7,11,7,12,7,
208,1,8,1,8,4,8,213,8,8,11,8,12,8,214,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,
11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,
1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,
17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,
1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,
25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,
1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,
29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,
1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,
34,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,38,1,39,
1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,
43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,
1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,
50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,
1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,57,1,
57,1,57,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,5,62,
441,8,62,10,62,12,62,444,9,62,1,63,1,63,1,64,1,64,1,64,1,65,4,65,452,8,65,
11,65,12,65,453,1,65,1,65,1,66,1,66,3,66,460,8,66,1,66,3,66,463,8,66,1,66,
1,66,1,67,1,67,5,67,469,8,67,10,67,12,67,472,9,67,1,67,1,67,1,67,1,67,1,
68,1,68,5,68,480,8,68,10,68,12,68,483,9,68,1,68,1,68,1,69,1,69,1,70,1,70,
1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,2,199,470,0,75,1,1,3,2,5,3,7,4,9,
5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,
107,54,109,55,111,56,113,57,115,58,117,0,119,0,121,0,123,0,125,59,127,60,
129,61,131,62,133,63,135,64,137,65,139,66,141,67,143,68,145,69,147,70,149,
71,1,0,8,1,0,46,46,2,0,48,49,95,95,2,0,48,55,95,95,4,0,48,57,65,70,95,95,
97,102,3,0,65,90,95,95,97,122,5,0,46,46,48,57,65,90,95,95,97,122,2,0,9,9,
32,32,2,0,10,10,13,13,513,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,
31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,
0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,
0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,
87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,
0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,
0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,125,1,0,0,0,0,
127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,
1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,
0,0,0,0,149,1,0,0,0,1,153,1,0,0,0,3,157,1,0,0,0,5,169,1,0,0,0,7,171,1,0,
0,0,9,177,1,0,0,0,11,183,1,0,0,0,13,189,1,0,0,0,15,204,1,0,0,0,17,210,1,
0,0,0,19,216,1,0,0,0,21,219,1,0,0,0,23,222,1,0,0,0,25,224,1,0,0,0,27,227,
1,0,0,0,29,232,1,0,0,0,31,238,1,0,0,0,33,244,1,0,0,0,35,250,1,0,0,0,37,259,
1,0,0,0,39,261,1,0,0,0,41,264,1,0,0,0,43,266,1,0,0,0,45,268,1,0,0,0,47,272,
1,0,0,0,49,276,1,0,0,0,51,281,1,0,0,0,53,286,1,0,0,0,55,293,1,0,0,0,57,301,
1,0,0,0,59,306,1,0,0,0,61,311,1,0,0,0,63,316,1,0,0,0,65,323,1,0,0,0,67,327,
1,0,0,0,69,335,1,0,0,0,71,343,1,0,0,0,73,345,1,0,0,0,75,347,1,0,0,0,77,349,
1,0,0,0,79,353,1,0,0,0,81,356,1,0,0,0,83,360,1,0,0,0,85,363,1,0,0,0,87,366,
1,0,0,0,89,370,1,0,0,0,91,374,1,0,0,0,93,378,1,0,0,0,95,382,1,0,0,0,97,386,
1,0,0,0,99,390,1,0,0,0,101,394,1,0,0,0,103,398,1,0,0,0,105,402,1,0,0,0,107,
406,1,0,0,0,109,410,1,0,0,0,111,415,1,0,0,0,113,420,1,0,0,0,115,425,1,0,
0,0,117,430,1,0,0,0,119,432,1,0,0,0,121,434,1,0,0,0,123,436,1,0,0,0,125,
438,1,0,0,0,127,445,1,0,0,0,129,447,1,0,0,0,131,451,1,0,0,0,133,462,1,0,
0,0,135,466,1,0,0,0,137,477,1,0,0,0,139,486,1,0,0,0,141,488,1,0,0,0,143,
490,1,0,0,0,145,492,1,0,0,0,147,494,1,0,0,0,149,496,1,0,0,0,151,154,3,27,
13,0,152,154,3,29,14,0,153,151,1,0,0,0,153,152,1,0,0,0,154,2,1,0,0,0,155,
158,3,71,35,0,156,158,3,73,36,0,157,155,1,0,0,0,157,156,1,0,0,0,158,159,
1,0,0,0,159,160,3,5,2,0,160,4,1,0,0,0,161,163,3,117,58,0,162,161,1,0,0,0,
163,164,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,170,1,0,0,0,166,170,
3,7,3,0,167,170,3,9,4,0,168,170,3,11,5,0,169,162,1,0,0,0,169,166,1,0,0,0,
169,167,1,0,0,0,169,168,1,0,0,0,170,6,1,0,0,0,171,173,3,19,9,0,172,174,3,
119,59,0,173,172,1,0,0,0,174,175,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,
176,8,1,0,0,0,177,179,3,21,10,0,178,180,3,121,60,0,179,178,1,0,0,0,180,181,
1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,10,1,0,0,0,183,185,3,25,12,0,
184,186,3,123,61,0,185,184,1,0,0,0,186,187,1,0,0,0,187,185,1,0,0,0,187,188,
1,0,0,0,188,12,1,0,0,0,189,191,3,129,64,0,190,192,3,117,58,0,191,190,1,0,
0,0,192,193,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,202,1,0,0,0,195,
199,7,0,0,0,196,198,9,0,0,0,197,196,1,0,0,0,198,201,1,0,0,0,199,200,1,0,
0,0,199,197,1,0,0,0,200,203,1,0,0,0,201,199,1,0,0,0,202,195,1,0,0,0,202,
203,1,0,0,0,203,14,1,0,0,0,204,206,3,127,63,0,205,207,3,117,58,0,206,205,
1,0,0,0,207,208,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,16,1,0,0,0,210,
212,3,23,11,0,211,213,3,117,58,0,212,211,1,0,0,0,213,214,1,0,0,0,214,212,
1,0,0,0,214,215,1,0,0,0,215,18,1,0,0,0,216,217,5,48,0,0,217,218,5,98,0,0,
218,20,1,0,0,0,219,220,5,48,0,0,220,221,5,111,0,0,221,22,1,0,0,0,222,223,
5,119,0,0,223,24,1,0,0,0,224,225,5,48,0,0,225,226,5,120,0,0,226,26,1,0,0,
0,227,228,5,116,0,0,228,229,5,114,0,0,229,230,5,117,0,0,230,231,5,101,0,
0,231,28,1,0,0,0,232,233,5,102,0,0,233,234,5,97,0,0,234,235,5,108,0,0,235,
236,5,115,0,0,236,237,5,101,0,0,237,30,1,0,0,0,238,239,5,113,0,0,239,240,
5,117,0,0,240,241,5,101,0,0,241,242,5,114,0,0,242,243,5,121,0,0,243,32,1,
0,0,0,244,245,5,97,0,0,245,246,5,114,0,0,246,247,5,114,0,0,247,248,5,97,
0,0,248,249,5,121,0,0,249,34,1,0,0,0,250,251,5,115,0,0,251,252,5,121,0,0,
252,253,5,109,0,0,253,254,5,98,0,0,254,255,5,111,0,0,255,256,5,108,0,0,256,
257,5,105,0,0,257,258,5,99,0,0,258,36,1,0,0,0,259,260,5,58,0,0,260,38,1,
0,0,0,261,262,5,45,0,0,262,263,5,62,0,0,263,40,1,0,0,0,264,265,5,61,0,0,
265,42,1,0,0,0,266,267,5,44,0,0,267,44,1,0,0,0,268,269,5,78,0,0,269,270,
5,111,0,0,270,271,5,116,0,0,271,46,1,0,0,0,272,273,5,83,0,0,273,274,5,104,
0,0,274,275,5,108,0,0,275,48,1,0,0,0,276,277,5,76,0,0,277,278,5,83,0,0,278,
279,5,104,0,0,279,280,5,114,0,0,280,50,1,0,0,0,281,282,5,65,0,0,282,283,
5,83,0,0,283,284,5,104,0,0,284,285,5,114,0,0,285,52,1,0,0,0,286,287,5,67,
0,0,287,288,5,111,0,0,288,289,5,110,0,0,289,290,5,99,0,0,290,291,5,97,0,
0,291,292,5,116,0,0,292,54,1,0,0,0,293,294,5,69,0,0,294,295,5,120,0,0,295,
296,5,116,0,0,296,297,5,114,0,0,297,298,5,97,0,0,298,299,5,99,0,0,299,300,
5,116,0,0,300,56,1,0,0,0,301,302,5,90,0,0,302,303,5,69,0,0,303,304,5,120,
0,0,304,305,5,116,0,0,305,58,1,0,0,0,306,307,5,83,0,0,307,308,5,69,0,0,308,
309,5,120,0,0,309,310,5,116,0,0,310,60,1,0,0,0,311,312,5,82,0,0,312,313,
5,101,0,0,313,314,5,97,0,0,314,315,5,100,0,0,315,62,1,0,0,0,316,317,5,83,
0,0,317,318,5,101,0,0,318,319,5,108,0,0,319,320,5,101,0,0,320,321,5,99,0,
0,321,322,5,116,0,0,322,64,1,0,0,0,323,324,5,78,0,0,324,325,5,101,0,0,325,
326,5,103,0,0,326,66,1,0,0,0,327,328,5,82,0,0,328,329,5,101,0,0,329,330,
5,97,0,0,330,331,5,100,0,0,331,332,5,76,0,0,332,333,5,83,0,0,333,334,5,66,
0,0,334,68,1,0,0,0,335,336,5,82,0,0,336,337,5,101,0,0,337,338,5,97,0,0,338,
339,5,100,0,0,339,340,5,77,0,0,340,341,5,83,0,0,341,342,5,66,0,0,342,70,
1,0,0,0,343,344,5,43,0,0,344,72,1,0,0,0,345,346,5,45,0,0,346,74,1,0,0,0,
347,348,5,64,0,0,348,76,1,0,0,0,349,350,5,65,0,0,350,351,5,110,0,0,351,352,
5,100,0,0,352,78,1,0,0,0,353,354,5,79,0,0,354,355,5,114,0,0,355,80,1,0,0,
0,356,357,5,88,0,0,357,358,5,111,0,0,358,359,5,114,0,0,359,82,1,0,0,0,360,
361,5,69,0,0,361,362,5,113,0,0,362,84,1,0,0,0,363,364,5,78,0,0,364,365,5,
101,0,0,365,86,1,0,0,0,366,367,5,85,0,0,367,368,5,108,0,0,368,369,5,116,
0,0,369,88,1,0,0,0,370,371,5,85,0,0,371,372,5,108,0,0,372,373,5,101,0,0,
373,90,1,0,0,0,374,375,5,85,0,0,375,376,5,103,0,0,376,377,5,116,0,0,377,
92,1,0,0,0,378,379,5,85,0,0,379,380,5,103,0,0,380,381,5,101,0,0,381,94,1,
0,0,0,382,383,5,83,0,0,383,384,5,108,0,0,384,385,5,116,0,0,385,96,1,0,0,
0,386,387,5,83,0,0,387,388,5,108,0,0,388,389,5,101,0,0,389,98,1,0,0,0,390,
391,5,83,0,0,391,392,5,103,0,0,392,393,5,116,0,0,393,100,1,0,0,0,394,395,
5,83,0,0,395,396,5,103,0,0,396,397,5,101,0,0,397,102,1,0,0,0,398,399,5,65,
0,0,399,400,5,100,0,0,400,401,5,100,0,0,401,104,1,0,0,0,402,403,5,83,0,0,
403,404,5,117,0,0,404,405,5,98,0,0,405,106,1,0,0,0,406,407,5,77,0,0,407,
408,5,117,0,0,408,409,5,108,0,0,409,108,1,0,0,0,410,411,5,85,0,0,411,412,
5,68,0,0,412,413,5,105,0,0,413,414,5,118,0,0,414,110,1,0,0,0,415,416,5,85,
0,0,416,417,5,82,0,0,417,418,5,101,0,0,418,419,5,109,0,0,419,112,1,0,0,0,
420,421,5,83,0,0,421,422,5,68,0,0,422,423,5,105,0,0,423,424,5,118,0,0,424,
114,1,0,0,0,425,426,5,83,0,0,426,427,5,82,0,0,427,428,5,101,0,0,428,429,
5,109,0,0,429,116,1,0,0,0,430,431,2,48,57,0,431,118,1,0,0,0,432,433,7,1,
0,0,433,120,1,0,0,0,434,435,7,2,0,0,435,122,1,0,0,0,436,437,7,3,0,0,437,
124,1,0,0,0,438,442,7,4,0,0,439,441,7,5,0,0,440,439,1,0,0,0,441,444,1,0,
0,0,442,440,1,0,0,0,442,443,1,0,0,0,443,126,1,0,0,0,444,442,1,0,0,0,445,
446,5,105,0,0,446,128,1,0,0,0,447,448,5,102,0,0,448,449,5,112,0,0,449,130,
1,0,0,0,450,452,7,6,0,0,451,450,1,0,0,0,452,453,1,0,0,0,453,451,1,0,0,0,
453,454,1,0,0,0,454,455,1,0,0,0,455,456,6,65,0,0,456,132,1,0,0,0,457,459,
5,13,0,0,458,460,5,10,0,0,459,458,1,0,0,0,459,460,1,0,0,0,460,463,1,0,0,
0,461,463,5,10,0,0,462,457,1,0,0,0,462,461,1,0,0,0,463,464,1,0,0,0,464,465,
6,66,0,0,465,134,1,0,0,0,466,470,5,35,0,0,467,469,9,0,0,0,468,467,1,0,0,
0,469,472,1,0,0,0,470,471,1,0,0,0,470,468,1,0,0,0,471,473,1,0,0,0,472,470,
1,0,0,0,473,474,5,35,0,0,474,475,1,0,0,0,475,476,6,67,0,0,476,136,1,0,0,
0,477,481,5,35,0,0,478,480,8,7,0,0,479,478,1,0,0,0,480,483,1,0,0,0,481,479,
1,0,0,0,481,482,1,0,0,0,482,484,1,0,0,0,483,481,1,0,0,0,484,485,6,68,0,0,
485,138,1,0,0,0,486,487,5,40,0,0,487,140,1,0,0,0,488,489,5,41,0,0,489,142,
1,0,0,0,490,491,5,91,0,0,491,144,1,0,0,0,492,493,5,93,0,0,493,146,1,0,0,
0,494,495,5,123,0,0,495,148,1,0,0,0,496,497,5,125,0,0,497,150,1,0,0,0,19,
0,153,157,164,169,175,181,187,193,199,202,208,214,442,453,459,462,470,481,
1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class KQueryLexer extends antlr4.Lexer {

    static grammarFileName = "KQuery.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, null, null, null, null, null, null, null, 
                         null, null, "'0b'", "'0o'", "'w'", "'0x'", "'true'", 
                         "'false'", "'query'", "'array'", "'symbolic'", 
                         "':'", "'->'", "'='", "','", "'Not'", "'Shl'", 
                         "'LShr'", "'AShr'", "'Concat'", "'Extract'", "'ZExt'", 
                         "'SExt'", "'Read'", "'Select'", "'Neg'", "'ReadLSB'", 
                         "'ReadMSB'", "'+'", "'-'", "'@'", "'And'", "'Or'", 
                         "'Xor'", "'Eq'", "'Ne'", "'Ult'", "'Ule'", "'Ugt'", 
                         "'Uge'", "'Slt'", "'Sle'", "'Sgt'", "'Sge'", "'Add'", 
                         "'Sub'", "'Mul'", "'UDiv'", "'URem'", "'SDiv'", 
                         "'SRem'", null, "'i'", "'fp'", null, null, null, 
                         null, "'('", "')'", "'['", "']'", "'{'", "'}'" ];
	static symbolicNames = [ null, "Boolean", "SignedConstant", "Constant", 
                          "BinConstant", "OctConstant", "HexConstant", "FloatingPointType", 
                          "IntegerType", "WidthType", "BinId", "OctId", 
                          "WIDTH", "HexId", "TrueMatch", "FalseMatch", "Query", 
                          "Array", "Symbolic", "Colon", "Arrow", "Equal", 
                          "COMMA", "NOT", "SHL", "LSHR", "ASHR", "CONCAT", 
                          "EXTRACT", "ZEXT", "SEXT", "READ", "SELECT", "NEGETION", 
                          "READLSB", "READMSB", "PLUS", "MINUS", "ATR", 
                          "BITWISEAND", "BITWISEOR", "BITWISEXOR", "EQ", 
                          "NEQ", "ULT", "ULE", "UGT", "UGE", "SLT", "SLE", 
                          "SGT", "SGE", "ADD", "SUB", "MUL", "UDIV", "UREM", 
                          "SDIV", "SREM", "Identifier", "INT", "FP", "Whitespace", 
                          "Newline", "BlockComment", "LineComment", "LeftParen", 
                          "RightParen", "LeftBracket", "RightBracket", "LeftBrace", 
                          "RightBrace" ];
	static ruleNames = [ "Boolean", "SignedConstant", "Constant", "BinConstant", 
                      "OctConstant", "HexConstant", "FloatingPointType", 
                      "IntegerType", "WidthType", "BinId", "OctId", "WIDTH", 
                      "HexId", "TrueMatch", "FalseMatch", "Query", "Array", 
                      "Symbolic", "Colon", "Arrow", "Equal", "COMMA", "NOT", 
                      "SHL", "LSHR", "ASHR", "CONCAT", "EXTRACT", "ZEXT", 
                      "SEXT", "READ", "SELECT", "NEGETION", "READLSB", "READMSB", 
                      "PLUS", "MINUS", "ATR", "BITWISEAND", "BITWISEOR", 
                      "BITWISEXOR", "EQ", "NEQ", "ULT", "ULE", "UGT", "UGE", 
                      "SLT", "SLE", "SGT", "SGE", "ADD", "SUB", "MUL", "UDIV", 
                      "UREM", "SDIV", "SREM", "DIGIT", "BIN_DIGIT", "OCTAL_DIGIT", 
                      "HEX_DIGIT", "Identifier", "INT", "FP", "Whitespace", 
                      "Newline", "BlockComment", "LineComment", "LeftParen", 
                      "RightParen", "LeftBracket", "RightBracket", "LeftBrace", 
                      "RightBrace" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

KQueryLexer.EOF = antlr4.Token.EOF;
KQueryLexer.Boolean = 1;
KQueryLexer.SignedConstant = 2;
KQueryLexer.Constant = 3;
KQueryLexer.BinConstant = 4;
KQueryLexer.OctConstant = 5;
KQueryLexer.HexConstant = 6;
KQueryLexer.FloatingPointType = 7;
KQueryLexer.IntegerType = 8;
KQueryLexer.WidthType = 9;
KQueryLexer.BinId = 10;
KQueryLexer.OctId = 11;
KQueryLexer.WIDTH = 12;
KQueryLexer.HexId = 13;
KQueryLexer.TrueMatch = 14;
KQueryLexer.FalseMatch = 15;
KQueryLexer.Query = 16;
KQueryLexer.Array = 17;
KQueryLexer.Symbolic = 18;
KQueryLexer.Colon = 19;
KQueryLexer.Arrow = 20;
KQueryLexer.Equal = 21;
KQueryLexer.COMMA = 22;
KQueryLexer.NOT = 23;
KQueryLexer.SHL = 24;
KQueryLexer.LSHR = 25;
KQueryLexer.ASHR = 26;
KQueryLexer.CONCAT = 27;
KQueryLexer.EXTRACT = 28;
KQueryLexer.ZEXT = 29;
KQueryLexer.SEXT = 30;
KQueryLexer.READ = 31;
KQueryLexer.SELECT = 32;
KQueryLexer.NEGETION = 33;
KQueryLexer.READLSB = 34;
KQueryLexer.READMSB = 35;
KQueryLexer.PLUS = 36;
KQueryLexer.MINUS = 37;
KQueryLexer.ATR = 38;
KQueryLexer.BITWISEAND = 39;
KQueryLexer.BITWISEOR = 40;
KQueryLexer.BITWISEXOR = 41;
KQueryLexer.EQ = 42;
KQueryLexer.NEQ = 43;
KQueryLexer.ULT = 44;
KQueryLexer.ULE = 45;
KQueryLexer.UGT = 46;
KQueryLexer.UGE = 47;
KQueryLexer.SLT = 48;
KQueryLexer.SLE = 49;
KQueryLexer.SGT = 50;
KQueryLexer.SGE = 51;
KQueryLexer.ADD = 52;
KQueryLexer.SUB = 53;
KQueryLexer.MUL = 54;
KQueryLexer.UDIV = 55;
KQueryLexer.UREM = 56;
KQueryLexer.SDIV = 57;
KQueryLexer.SREM = 58;
KQueryLexer.Identifier = 59;
KQueryLexer.INT = 60;
KQueryLexer.FP = 61;
KQueryLexer.Whitespace = 62;
KQueryLexer.Newline = 63;
KQueryLexer.BlockComment = 64;
KQueryLexer.LineComment = 65;
KQueryLexer.LeftParen = 66;
KQueryLexer.RightParen = 67;
KQueryLexer.LeftBracket = 68;
KQueryLexer.RightBracket = 69;
KQueryLexer.LeftBrace = 70;
KQueryLexer.RightBrace = 71;



