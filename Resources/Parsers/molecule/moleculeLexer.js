// Generated from Resources/Parsers/molecule/molecule.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,8,258,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,3,5,245,8,5,1,6,4,6,248,8,6,11,6,12,6,249,1,7,4,7,253,8,7,11,7,12,7,254,
1,7,1,7,0,0,8,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,1,0,3,3,0,66,67,70,70,78,
79,2,0,80,80,83,83,3,0,9,10,13,13,32,32,371,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,1,
17,1,0,0,0,3,19,1,0,0,0,5,21,1,0,0,0,7,23,1,0,0,0,9,25,1,0,0,0,11,244,1,
0,0,0,13,247,1,0,0,0,15,252,1,0,0,0,17,18,5,183,0,0,18,2,1,0,0,0,19,20,5,
40,0,0,20,4,1,0,0,0,21,22,5,41,0,0,22,6,1,0,0,0,23,24,5,91,0,0,24,8,1,0,
0,0,25,26,5,93,0,0,26,10,1,0,0,0,27,245,5,72,0,0,28,29,5,72,0,0,29,245,5,
101,0,0,30,31,5,76,0,0,31,245,5,105,0,0,32,33,5,66,0,0,33,245,5,101,0,0,
34,245,7,0,0,0,35,36,5,78,0,0,36,245,5,101,0,0,37,38,5,78,0,0,38,245,5,97,
0,0,39,40,5,77,0,0,40,245,5,103,0,0,41,42,5,65,0,0,42,245,5,108,0,0,43,44,
5,83,0,0,44,245,5,105,0,0,45,245,7,1,0,0,46,47,5,67,0,0,47,245,5,108,0,0,
48,49,5,65,0,0,49,245,5,114,0,0,50,245,5,75,0,0,51,52,5,67,0,0,52,245,5,
97,0,0,53,54,5,83,0,0,54,245,5,99,0,0,55,56,5,84,0,0,56,245,5,105,0,0,57,
245,5,86,0,0,58,59,5,67,0,0,59,245,5,114,0,0,60,61,5,77,0,0,61,245,5,110,
0,0,62,63,5,70,0,0,63,245,5,101,0,0,64,65,5,67,0,0,65,245,5,111,0,0,66,67,
5,78,0,0,67,245,5,105,0,0,68,69,5,67,0,0,69,245,5,117,0,0,70,71,5,90,0,0,
71,245,5,110,0,0,72,73,5,71,0,0,73,245,5,97,0,0,74,75,5,71,0,0,75,245,5,
101,0,0,76,77,5,65,0,0,77,245,5,115,0,0,78,79,5,83,0,0,79,245,5,101,0,0,
80,81,5,66,0,0,81,245,5,114,0,0,82,83,5,75,0,0,83,245,5,114,0,0,84,85,5,
82,0,0,85,245,5,98,0,0,86,87,5,83,0,0,87,245,5,114,0,0,88,245,5,89,0,0,89,
90,5,90,0,0,90,245,5,114,0,0,91,92,5,78,0,0,92,245,5,98,0,0,93,94,5,77,0,
0,94,245,5,111,0,0,95,96,5,84,0,0,96,245,5,99,0,0,97,98,5,82,0,0,98,245,
5,117,0,0,99,100,5,82,0,0,100,245,5,104,0,0,101,102,5,80,0,0,102,245,5,100,
0,0,103,104,5,65,0,0,104,245,5,103,0,0,105,106,5,67,0,0,106,245,5,100,0,
0,107,108,5,73,0,0,108,245,5,110,0,0,109,110,5,83,0,0,110,245,5,110,0,0,
111,112,5,83,0,0,112,245,5,98,0,0,113,114,5,84,0,0,114,245,5,101,0,0,115,
245,5,73,0,0,116,117,5,88,0,0,117,245,5,101,0,0,118,119,5,67,0,0,119,245,
5,115,0,0,120,121,5,66,0,0,121,245,5,97,0,0,122,123,5,76,0,0,123,245,5,97,
0,0,124,125,5,67,0,0,125,245,5,101,0,0,126,127,5,80,0,0,127,245,5,114,0,
0,128,129,5,78,0,0,129,245,5,100,0,0,130,131,5,80,0,0,131,245,5,109,0,0,
132,133,5,83,0,0,133,245,5,109,0,0,134,135,5,69,0,0,135,245,5,117,0,0,136,
137,5,71,0,0,137,245,5,100,0,0,138,139,5,84,0,0,139,245,5,98,0,0,140,141,
5,68,0,0,141,245,5,121,0,0,142,143,5,72,0,0,143,245,5,111,0,0,144,145,5,
69,0,0,145,245,5,114,0,0,146,147,5,84,0,0,147,245,5,109,0,0,148,149,5,89,
0,0,149,245,5,98,0,0,150,151,5,76,0,0,151,245,5,117,0,0,152,153,5,72,0,0,
153,245,5,102,0,0,154,155,5,84,0,0,155,245,5,97,0,0,156,245,5,87,0,0,157,
158,5,82,0,0,158,245,5,101,0,0,159,160,5,79,0,0,160,245,5,115,0,0,161,162,
5,73,0,0,162,245,5,114,0,0,163,164,5,80,0,0,164,245,5,116,0,0,165,166,5,
65,0,0,166,245,5,117,0,0,167,168,5,72,0,0,168,245,5,103,0,0,169,170,5,84,
0,0,170,245,5,108,0,0,171,172,5,80,0,0,172,245,5,98,0,0,173,174,5,66,0,0,
174,245,5,105,0,0,175,176,5,80,0,0,176,245,5,111,0,0,177,178,5,65,0,0,178,
245,5,116,0,0,179,180,5,82,0,0,180,245,5,110,0,0,181,182,5,70,0,0,182,245,
5,114,0,0,183,184,5,82,0,0,184,245,5,97,0,0,185,186,5,65,0,0,186,245,5,99,
0,0,187,188,5,84,0,0,188,245,5,104,0,0,189,190,5,80,0,0,190,245,5,97,0,0,
191,245,5,85,0,0,192,193,5,78,0,0,193,245,5,112,0,0,194,195,5,80,0,0,195,
245,5,117,0,0,196,197,5,65,0,0,197,245,5,109,0,0,198,199,5,67,0,0,199,245,
5,109,0,0,200,201,5,66,0,0,201,245,5,107,0,0,202,203,5,67,0,0,203,245,5,
102,0,0,204,205,5,69,0,0,205,245,5,115,0,0,206,207,5,70,0,0,207,245,5,109,
0,0,208,209,5,77,0,0,209,245,5,100,0,0,210,211,5,78,0,0,211,245,5,111,0,
0,212,213,5,76,0,0,213,245,5,114,0,0,214,215,5,82,0,0,215,245,5,102,0,0,
216,217,5,68,0,0,217,245,5,98,0,0,218,219,5,83,0,0,219,245,5,103,0,0,220,
221,5,66,0,0,221,245,5,104,0,0,222,223,5,72,0,0,223,245,5,115,0,0,224,225,
5,77,0,0,225,245,5,116,0,0,226,227,5,68,0,0,227,245,5,115,0,0,228,229,5,
82,0,0,229,245,5,103,0,0,230,231,5,67,0,0,231,245,5,110,0,0,232,233,5,78,
0,0,233,245,5,104,0,0,234,235,5,70,0,0,235,245,5,108,0,0,236,237,5,77,0,
0,237,245,5,99,0,0,238,239,5,76,0,0,239,245,5,118,0,0,240,241,5,84,0,0,241,
245,5,115,0,0,242,243,5,79,0,0,243,245,5,103,0,0,244,27,1,0,0,0,244,28,1,
0,0,0,244,30,1,0,0,0,244,32,1,0,0,0,244,34,1,0,0,0,244,35,1,0,0,0,244,37,
1,0,0,0,244,39,1,0,0,0,244,41,1,0,0,0,244,43,1,0,0,0,244,45,1,0,0,0,244,
46,1,0,0,0,244,48,1,0,0,0,244,50,1,0,0,0,244,51,1,0,0,0,244,53,1,0,0,0,244,
55,1,0,0,0,244,57,1,0,0,0,244,58,1,0,0,0,244,60,1,0,0,0,244,62,1,0,0,0,244,
64,1,0,0,0,244,66,1,0,0,0,244,68,1,0,0,0,244,70,1,0,0,0,244,72,1,0,0,0,244,
74,1,0,0,0,244,76,1,0,0,0,244,78,1,0,0,0,244,80,1,0,0,0,244,82,1,0,0,0,244,
84,1,0,0,0,244,86,1,0,0,0,244,88,1,0,0,0,244,89,1,0,0,0,244,91,1,0,0,0,244,
93,1,0,0,0,244,95,1,0,0,0,244,97,1,0,0,0,244,99,1,0,0,0,244,101,1,0,0,0,
244,103,1,0,0,0,244,105,1,0,0,0,244,107,1,0,0,0,244,109,1,0,0,0,244,111,
1,0,0,0,244,113,1,0,0,0,244,115,1,0,0,0,244,116,1,0,0,0,244,118,1,0,0,0,
244,120,1,0,0,0,244,122,1,0,0,0,244,124,1,0,0,0,244,126,1,0,0,0,244,128,
1,0,0,0,244,130,1,0,0,0,244,132,1,0,0,0,244,134,1,0,0,0,244,136,1,0,0,0,
244,138,1,0,0,0,244,140,1,0,0,0,244,142,1,0,0,0,244,144,1,0,0,0,244,146,
1,0,0,0,244,148,1,0,0,0,244,150,1,0,0,0,244,152,1,0,0,0,244,154,1,0,0,0,
244,156,1,0,0,0,244,157,1,0,0,0,244,159,1,0,0,0,244,161,1,0,0,0,244,163,
1,0,0,0,244,165,1,0,0,0,244,167,1,0,0,0,244,169,1,0,0,0,244,171,1,0,0,0,
244,173,1,0,0,0,244,175,1,0,0,0,244,177,1,0,0,0,244,179,1,0,0,0,244,181,
1,0,0,0,244,183,1,0,0,0,244,185,1,0,0,0,244,187,1,0,0,0,244,189,1,0,0,0,
244,191,1,0,0,0,244,192,1,0,0,0,244,194,1,0,0,0,244,196,1,0,0,0,244,198,
1,0,0,0,244,200,1,0,0,0,244,202,1,0,0,0,244,204,1,0,0,0,244,206,1,0,0,0,
244,208,1,0,0,0,244,210,1,0,0,0,244,212,1,0,0,0,244,214,1,0,0,0,244,216,
1,0,0,0,244,218,1,0,0,0,244,220,1,0,0,0,244,222,1,0,0,0,244,224,1,0,0,0,
244,226,1,0,0,0,244,228,1,0,0,0,244,230,1,0,0,0,244,232,1,0,0,0,244,234,
1,0,0,0,244,236,1,0,0,0,244,238,1,0,0,0,244,240,1,0,0,0,244,242,1,0,0,0,
245,12,1,0,0,0,246,248,2,48,57,0,247,246,1,0,0,0,248,249,1,0,0,0,249,247,
1,0,0,0,249,250,1,0,0,0,250,14,1,0,0,0,251,253,7,2,0,0,252,251,1,0,0,0,253,
254,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,256,1,0,0,0,256,257,6,7,
0,0,257,16,1,0,0,0,4,0,244,249,254,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class moleculeLexer extends antlr4.Lexer {

    static grammarFileName = "molecule.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'\\u00B7'", "'('", "')'", "'['", "']'" ];
	static symbolicNames = [ null, null, null, null, null, null, "ELEMENT", 
                          "NUMBER", "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "ELEMENT", 
                      "NUMBER", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

moleculeLexer.EOF = antlr4.Token.EOF;
moleculeLexer.T__0 = 1;
moleculeLexer.T__1 = 2;
moleculeLexer.T__2 = 3;
moleculeLexer.T__3 = 4;
moleculeLexer.T__4 = 5;
moleculeLexer.ELEMENT = 6;
moleculeLexer.NUMBER = 7;
moleculeLexer.WS = 8;



