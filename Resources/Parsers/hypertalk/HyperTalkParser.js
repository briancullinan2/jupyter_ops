// Generated from Resources/Parsers/hypertalk/HyperTalk.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import HyperTalkListener from './HyperTalkListener.js';
const serializedATN = [4,1,344,1893,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,1,0,
1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,180,8,0,1,1,1,1,1,1,1,1,3,1,186,8,1,
1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,198,8,2,1,3,1,3,1,3,4,3,203,
8,3,11,3,12,3,204,1,3,3,3,208,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,4,3,217,8,
3,11,3,12,3,218,1,3,3,3,222,8,3,1,3,1,3,1,3,3,3,227,8,3,1,4,1,4,1,4,4,4,
232,8,4,11,4,12,4,233,1,4,3,4,237,8,4,1,4,1,4,1,4,1,4,1,4,1,4,4,4,245,8,
4,11,4,12,4,246,1,4,3,4,250,8,4,1,4,1,4,1,4,3,4,255,8,4,1,5,1,5,3,5,259,
8,5,1,6,1,6,1,6,1,6,1,6,1,6,5,6,267,8,6,10,6,12,6,270,9,6,1,7,1,7,4,7,274,
8,7,11,7,12,7,275,1,7,1,7,1,7,1,7,4,7,282,8,7,11,7,12,7,283,3,7,286,8,7,
1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,296,8,8,1,9,1,9,1,9,1,10,1,10,1,10,3,
10,304,8,10,1,11,1,11,1,11,1,11,1,12,3,12,311,8,12,1,12,1,12,1,12,3,12,316,
8,12,1,12,1,12,1,12,3,12,321,8,12,1,12,3,12,324,8,12,1,12,3,12,327,8,12,
1,12,1,12,4,12,331,8,12,11,12,12,12,332,1,12,3,12,336,8,12,1,12,1,12,1,12,
3,12,341,8,12,3,12,343,8,12,1,13,1,13,1,13,4,13,348,8,13,11,13,12,13,349,
1,13,1,13,3,13,354,8,13,1,13,1,13,4,13,358,8,13,11,13,12,13,359,1,13,3,13,
363,8,13,1,13,1,13,3,13,367,8,13,1,14,1,14,1,14,4,14,372,8,14,11,14,12,14,
373,1,14,1,14,1,14,1,14,1,14,1,14,1,14,4,14,383,8,14,11,14,12,14,384,1,14,
1,14,1,14,3,14,390,8,14,1,15,1,15,1,15,3,15,395,8,15,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
16,1,16,1,16,3,16,447,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,3,16,522,8,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,
16,544,8,16,1,16,3,16,547,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
16,3,16,558,8,16,1,16,3,16,561,8,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,569,
8,16,1,16,3,16,572,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,581,8,16,
1,16,3,16,584,8,16,1,16,1,16,1,16,1,16,1,16,3,16,591,8,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,3,16,600,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,692,8,16,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
16,1,16,1,16,1,16,1,16,3,16,773,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,16,3,16,783,8,16,1,16,1,16,1,16,1,16,1,16,3,16,790,8,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,3,16,799,8,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,807,
8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
16,3,16,823,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,
835,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,918,8,16,1,17,1,17,
1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,931,8,17,1,18,1,18,1,18,
1,18,1,18,3,18,938,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,948,
8,19,1,20,1,20,1,20,1,20,3,20,954,8,20,1,21,1,21,1,21,3,21,959,8,21,1,22,
3,22,962,8,22,1,22,1,22,1,22,1,22,3,22,968,8,22,1,22,1,22,1,22,1,22,3,22,
974,8,22,1,22,1,22,1,22,1,22,3,22,980,8,22,1,22,1,22,1,22,1,22,3,22,986,
8,22,1,23,1,23,1,23,1,23,1,23,3,23,993,8,23,1,24,1,24,1,24,1,24,1,24,1,24,
1,24,1,24,3,24,1003,8,24,1,25,1,25,1,25,1,25,3,25,1009,8,25,1,26,1,26,1,
26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,1021,8,26,1,27,1,27,1,27,1,27,
1,27,1,27,1,27,1,27,1,27,3,27,1032,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,
28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,1091,8,28,1,28,1,28,5,28,1095,8,
28,10,28,12,28,1098,9,28,1,29,1,29,1,29,1,29,1,29,3,29,1105,8,29,1,30,1,
30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,1117,8,30,1,31,1,31,3,31,
1121,8,31,1,32,3,32,1124,8,32,1,32,1,32,1,33,3,33,1129,8,33,1,33,1,33,1,
33,1,33,1,33,3,33,1136,8,33,1,33,1,33,1,33,1,33,1,33,3,33,1143,8,33,1,34,
1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
34,3,34,1161,8,34,1,35,3,35,1164,8,35,1,35,1,35,1,35,1,35,3,35,1170,8,35,
1,36,1,36,3,36,1174,8,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
36,3,36,1186,8,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,1197,
8,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,1205,8,36,1,36,1,36,1,36,1,36,5,
36,1211,8,36,10,36,12,36,1214,9,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,
37,1223,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,1234,8,37,
1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,1245,8,37,1,37,1,37,3,
37,1249,8,37,1,37,1,37,1,37,1,37,5,37,1255,8,37,10,37,12,37,1258,9,37,1,
38,1,38,3,38,1262,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
1,38,1,38,1,38,1,38,3,38,1278,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
38,5,38,1288,8,38,10,38,12,38,1291,9,38,1,39,1,39,3,39,1295,8,39,1,39,1,
39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,1311,
8,39,1,39,1,39,1,39,1,39,5,39,1317,8,39,10,39,12,39,1320,9,39,1,40,3,40,
1323,8,40,1,40,1,40,1,40,1,40,3,40,1329,8,40,1,40,1,40,1,40,3,40,1334,8,
40,1,40,1,40,1,40,3,40,1339,8,40,1,40,1,40,1,40,3,40,1344,8,40,1,40,1,40,
1,40,1,40,1,40,1,40,1,40,3,40,1353,8,40,1,41,1,41,1,41,1,41,1,41,3,41,1360,
8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,1370,8,42,1,42,1,42,1,
42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
1,42,1,42,1,42,1,42,1,42,1,42,1,42,5,42,1396,8,42,10,42,12,42,1399,9,42,
1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,1414,
8,43,1,44,1,44,3,44,1418,8,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
44,3,44,1429,8,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
1,45,1,45,3,45,1444,8,45,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1452,8,46,1,
46,1,46,3,46,1456,8,46,1,46,1,46,1,46,3,46,1461,8,46,1,46,3,46,1464,8,46,
1,47,3,47,1467,8,47,1,47,1,47,3,47,1471,8,47,1,47,1,47,1,47,1,47,1,47,3,
47,1478,8,47,1,47,1,47,1,47,1,47,3,47,1484,8,47,1,47,1,47,1,47,1,47,1,47,
3,47,1491,8,47,1,48,1,48,1,48,1,48,3,48,1497,8,48,1,48,3,48,1500,8,48,1,
49,1,49,1,49,3,49,1505,8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
1,49,1,49,1,49,1,49,1,49,3,49,1521,8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,
50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1542,
8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1553,8,50,1,50,1,
50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1569,
8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1597,
8,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1606,8,51,1,51,1,51,1,51,1,
51,1,51,1,51,1,51,1,51,1,51,3,51,1617,8,51,1,51,1,51,1,51,1,51,1,51,1,51,
1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1633,8,51,1,51,1,51,1,51,1,
51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,
51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
1,51,1,51,1,51,3,51,1685,8,51,1,52,1,52,1,52,1,52,3,52,1691,8,52,1,53,1,
53,1,53,1,53,1,53,1,53,3,53,1699,8,53,1,54,1,54,1,55,1,55,1,55,1,55,1,55,
1,55,1,55,1,55,1,55,1,55,1,55,3,55,1714,8,55,1,56,1,56,1,57,3,57,1719,8,
57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
1,58,3,58,1736,8,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,
64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,1756,8,64,1,65,1,65,1,66,1,66,
1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1770,8,68,1,69,1,69,1,69,1,
69,1,69,3,69,1777,8,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,
70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,
70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1844,8,70,
1,71,1,71,1,71,3,71,1849,8,71,1,72,3,72,1852,8,72,1,72,1,72,3,72,1856,8,
72,1,72,1,72,3,72,1860,8,72,1,73,3,73,1863,8,73,1,73,1,73,1,73,1,73,3,73,
1869,8,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,79,1,
80,1,80,1,81,1,81,1,82,1,82,1,83,1,83,1,84,1,84,1,84,0,7,12,56,72,74,76,
78,84,85,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
168,0,39,1,0,81,84,1,0,88,89,2,0,2,2,94,94,1,0,104,105,1,0,106,108,1,0,128,
132,1,0,134,137,2,0,127,127,138,138,1,0,139,140,1,0,141,155,2,0,114,114,
156,159,1,0,168,169,1,0,170,171,1,0,173,174,2,0,72,73,223,223,1,0,232,242,
1,0,253,254,2,0,117,117,257,257,2,0,88,89,181,182,4,0,102,102,173,174,185,
185,258,262,1,0,263,266,7,0,38,38,46,46,121,122,173,174,185,185,267,276,
333,333,24,0,11,11,13,13,16,16,18,19,21,21,23,23,26,26,28,31,34,35,39,39,
42,42,44,44,47,49,51,51,53,54,56,56,58,60,63,64,67,67,69,69,74,77,86,87,
90,91,93,93,1,0,278,279,2,0,244,244,280,282,1,0,284,285,1,0,289,290,1,0,
307,308,2,0,123,123,309,309,1,0,311,312,2,0,288,288,313,313,1,0,314,319,
2,0,166,166,320,322,2,0,165,165,323,325,2,0,264,264,326,328,2,0,263,263,
329,329,2,0,167,167,330,330,1,0,331,332,3,0,25,25,186,186,304,304,2298,0,
179,1,0,0,0,2,185,1,0,0,0,4,197,1,0,0,0,6,226,1,0,0,0,8,254,1,0,0,0,10,258,
1,0,0,0,12,260,1,0,0,0,14,285,1,0,0,0,16,295,1,0,0,0,18,297,1,0,0,0,20,303,
1,0,0,0,22,305,1,0,0,0,24,342,1,0,0,0,26,366,1,0,0,0,28,389,1,0,0,0,30,394,
1,0,0,0,32,917,1,0,0,0,34,930,1,0,0,0,36,937,1,0,0,0,38,947,1,0,0,0,40,953,
1,0,0,0,42,958,1,0,0,0,44,985,1,0,0,0,46,992,1,0,0,0,48,1002,1,0,0,0,50,
1008,1,0,0,0,52,1020,1,0,0,0,54,1031,1,0,0,0,56,1090,1,0,0,0,58,1104,1,0,
0,0,60,1116,1,0,0,0,62,1120,1,0,0,0,64,1123,1,0,0,0,66,1142,1,0,0,0,68,1160,
1,0,0,0,70,1169,1,0,0,0,72,1204,1,0,0,0,74,1248,1,0,0,0,76,1277,1,0,0,0,
78,1310,1,0,0,0,80,1352,1,0,0,0,82,1359,1,0,0,0,84,1369,1,0,0,0,86,1413,
1,0,0,0,88,1428,1,0,0,0,90,1443,1,0,0,0,92,1463,1,0,0,0,94,1490,1,0,0,0,
96,1499,1,0,0,0,98,1520,1,0,0,0,100,1596,1,0,0,0,102,1684,1,0,0,0,104,1690,
1,0,0,0,106,1698,1,0,0,0,108,1700,1,0,0,0,110,1713,1,0,0,0,112,1715,1,0,
0,0,114,1718,1,0,0,0,116,1735,1,0,0,0,118,1737,1,0,0,0,120,1739,1,0,0,0,
122,1741,1,0,0,0,124,1743,1,0,0,0,126,1745,1,0,0,0,128,1755,1,0,0,0,130,
1757,1,0,0,0,132,1759,1,0,0,0,134,1761,1,0,0,0,136,1769,1,0,0,0,138,1776,
1,0,0,0,140,1843,1,0,0,0,142,1848,1,0,0,0,144,1859,1,0,0,0,146,1862,1,0,
0,0,148,1870,1,0,0,0,150,1872,1,0,0,0,152,1874,1,0,0,0,154,1876,1,0,0,0,
156,1878,1,0,0,0,158,1880,1,0,0,0,160,1882,1,0,0,0,162,1884,1,0,0,0,164,
1886,1,0,0,0,166,1888,1,0,0,0,168,1890,1,0,0,0,170,171,3,6,3,0,171,172,3,
0,0,0,172,180,1,0,0,0,173,174,3,8,4,0,174,175,3,0,0,0,175,180,1,0,0,0,176,
177,5,342,0,0,177,180,3,0,0,0,178,180,5,0,0,1,179,170,1,0,0,0,179,173,1,
0,0,0,179,176,1,0,0,0,179,178,1,0,0,0,180,1,1,0,0,0,181,182,3,16,8,0,182,
183,5,0,0,1,183,186,1,0,0,0,184,186,3,4,2,0,185,181,1,0,0,0,185,184,1,0,
0,0,186,3,1,0,0,0,187,188,3,16,8,0,188,189,5,342,0,0,189,190,3,4,2,0,190,
198,1,0,0,0,191,192,3,16,8,0,192,193,5,0,0,1,193,198,1,0,0,0,194,195,5,342,
0,0,195,198,3,4,2,0,196,198,5,0,0,1,197,187,1,0,0,0,197,191,1,0,0,0,197,
194,1,0,0,0,197,196,1,0,0,0,198,5,1,0,0,0,199,200,5,1,0,0,200,202,3,10,5,
0,201,203,5,342,0,0,202,201,1,0,0,0,203,204,1,0,0,0,204,202,1,0,0,0,204,
205,1,0,0,0,205,207,1,0,0,0,206,208,3,14,7,0,207,206,1,0,0,0,207,208,1,0,
0,0,208,209,1,0,0,0,209,210,5,2,0,0,210,211,3,10,5,0,211,227,1,0,0,0,212,
213,5,1,0,0,213,214,3,10,5,0,214,216,3,12,6,0,215,217,5,342,0,0,216,215,
1,0,0,0,217,218,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,221,1,0,0,0,
220,222,3,14,7,0,221,220,1,0,0,0,221,222,1,0,0,0,222,223,1,0,0,0,223,224,
5,2,0,0,224,225,3,10,5,0,225,227,1,0,0,0,226,199,1,0,0,0,226,212,1,0,0,0,
227,7,1,0,0,0,228,229,5,3,0,0,229,231,5,333,0,0,230,232,5,342,0,0,231,230,
1,0,0,0,232,233,1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,236,1,0,0,0,
235,237,3,14,7,0,236,235,1,0,0,0,236,237,1,0,0,0,237,238,1,0,0,0,238,239,
5,2,0,0,239,255,5,333,0,0,240,241,5,3,0,0,241,242,5,333,0,0,242,244,3,12,
6,0,243,245,5,342,0,0,244,243,1,0,0,0,245,246,1,0,0,0,246,244,1,0,0,0,246,
247,1,0,0,0,247,249,1,0,0,0,248,250,3,14,7,0,249,248,1,0,0,0,249,250,1,0,
0,0,250,251,1,0,0,0,251,252,5,2,0,0,252,253,5,333,0,0,253,255,1,0,0,0,254,
228,1,0,0,0,254,240,1,0,0,0,255,9,1,0,0,0,256,259,5,333,0,0,257,259,3,130,
65,0,258,256,1,0,0,0,258,257,1,0,0,0,259,11,1,0,0,0,260,261,6,6,-1,0,261,
262,5,333,0,0,262,268,1,0,0,0,263,264,10,1,0,0,264,265,5,4,0,0,265,267,5,
333,0,0,266,263,1,0,0,0,267,270,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,
269,13,1,0,0,0,270,268,1,0,0,0,271,273,3,16,8,0,272,274,5,342,0,0,273,272,
1,0,0,0,274,275,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,277,1,0,0,0,
277,278,3,14,7,0,278,286,1,0,0,0,279,281,3,16,8,0,280,282,5,342,0,0,281,
280,1,0,0,0,282,283,1,0,0,0,283,281,1,0,0,0,283,284,1,0,0,0,284,286,1,0,
0,0,285,271,1,0,0,0,285,279,1,0,0,0,286,15,1,0,0,0,287,296,3,32,16,0,288,
296,3,96,48,0,289,296,3,30,15,0,290,296,3,84,42,0,291,296,3,22,11,0,292,
296,3,28,14,0,293,296,3,18,9,0,294,296,3,20,10,0,295,287,1,0,0,0,295,288,
1,0,0,0,295,289,1,0,0,0,295,290,1,0,0,0,295,291,1,0,0,0,295,292,1,0,0,0,
295,293,1,0,0,0,295,294,1,0,0,0,296,17,1,0,0,0,297,298,5,5,0,0,298,299,3,
12,6,0,299,19,1,0,0,0,300,301,5,6,0,0,301,304,3,84,42,0,302,304,5,6,0,0,
303,300,1,0,0,0,303,302,1,0,0,0,304,21,1,0,0,0,305,306,5,7,0,0,306,307,3,
84,42,0,307,308,3,24,12,0,308,23,1,0,0,0,309,311,5,342,0,0,310,309,1,0,0,
0,310,311,1,0,0,0,311,312,1,0,0,0,312,313,5,8,0,0,313,343,3,16,8,0,314,316,
5,342,0,0,315,314,1,0,0,0,315,316,1,0,0,0,316,317,1,0,0,0,317,318,5,8,0,
0,318,320,3,16,8,0,319,321,5,342,0,0,320,319,1,0,0,0,320,321,1,0,0,0,321,
323,1,0,0,0,322,324,3,26,13,0,323,322,1,0,0,0,323,324,1,0,0,0,324,343,1,
0,0,0,325,327,5,342,0,0,326,325,1,0,0,0,326,327,1,0,0,0,327,328,1,0,0,0,
328,330,5,8,0,0,329,331,5,342,0,0,330,329,1,0,0,0,331,332,1,0,0,0,332,330,
1,0,0,0,332,333,1,0,0,0,333,335,1,0,0,0,334,336,3,14,7,0,335,334,1,0,0,0,
335,336,1,0,0,0,336,340,1,0,0,0,337,341,3,26,13,0,338,339,5,2,0,0,339,341,
5,7,0,0,340,337,1,0,0,0,340,338,1,0,0,0,341,343,1,0,0,0,342,310,1,0,0,0,
342,315,1,0,0,0,342,326,1,0,0,0,343,25,1,0,0,0,344,345,5,9,0,0,345,353,3,
16,8,0,346,348,5,342,0,0,347,346,1,0,0,0,348,349,1,0,0,0,349,347,1,0,0,0,
349,350,1,0,0,0,350,351,1,0,0,0,351,352,5,2,0,0,352,354,5,7,0,0,353,347,
1,0,0,0,353,354,1,0,0,0,354,367,1,0,0,0,355,357,5,9,0,0,356,358,5,342,0,
0,357,356,1,0,0,0,358,359,1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,0,360,362,
1,0,0,0,361,363,3,14,7,0,362,361,1,0,0,0,362,363,1,0,0,0,363,364,1,0,0,0,
364,365,5,2,0,0,365,367,5,7,0,0,366,344,1,0,0,0,366,355,1,0,0,0,367,27,1,
0,0,0,368,369,5,10,0,0,369,371,3,48,24,0,370,372,5,342,0,0,371,370,1,0,0,
0,372,373,1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,375,1,0,0,0,375,376,
3,14,7,0,376,377,5,2,0,0,377,378,5,10,0,0,378,390,1,0,0,0,379,380,5,10,0,
0,380,382,3,48,24,0,381,383,5,342,0,0,382,381,1,0,0,0,383,384,1,0,0,0,384,
382,1,0,0,0,384,385,1,0,0,0,385,386,1,0,0,0,386,387,5,2,0,0,387,388,5,10,
0,0,388,390,1,0,0,0,389,368,1,0,0,0,389,379,1,0,0,0,390,29,1,0,0,0,391,395,
5,333,0,0,392,393,5,333,0,0,393,395,3,82,41,0,394,391,1,0,0,0,394,392,1,
0,0,0,395,31,1,0,0,0,396,397,5,11,0,0,397,398,3,84,42,0,398,399,5,12,0,0,
399,400,3,84,42,0,400,918,1,0,0,0,401,402,5,13,0,0,402,403,3,84,42,0,403,
404,5,14,0,0,404,405,3,86,43,0,405,406,5,15,0,0,406,407,3,86,43,0,407,408,
5,15,0,0,408,409,3,86,43,0,409,918,1,0,0,0,410,411,5,13,0,0,411,412,3,84,
42,0,412,413,5,14,0,0,413,414,3,86,43,0,414,415,5,15,0,0,415,416,3,86,43,
0,416,918,1,0,0,0,417,418,5,13,0,0,418,419,3,84,42,0,419,420,5,14,0,0,420,
421,3,86,43,0,421,918,1,0,0,0,422,423,5,13,0,0,423,918,3,84,42,0,424,425,
5,16,0,0,425,426,3,84,42,0,426,427,5,14,0,0,427,428,3,84,42,0,428,918,1,
0,0,0,429,430,5,16,0,0,430,918,3,84,42,0,431,432,5,16,0,0,432,433,5,17,0,
0,433,918,3,84,42,0,434,435,5,16,0,0,435,436,5,17,0,0,436,437,3,84,42,0,
437,438,5,14,0,0,438,439,3,84,42,0,439,918,1,0,0,0,440,918,5,18,0,0,441,
442,5,18,0,0,442,918,3,84,42,0,443,444,5,19,0,0,444,446,3,92,46,0,445,447,
5,20,0,0,446,445,1,0,0,0,446,447,1,0,0,0,447,918,1,0,0,0,448,449,5,19,0,
0,449,450,5,20,0,0,450,918,3,92,46,0,451,452,5,21,0,0,452,453,5,22,0,0,453,
918,3,82,41,0,454,455,5,21,0,0,455,456,5,22,0,0,456,457,3,82,41,0,457,458,
5,14,0,0,458,459,3,82,41,0,459,918,1,0,0,0,460,461,5,23,0,0,461,462,5,17,
0,0,462,918,3,84,42,0,463,464,5,24,0,0,464,465,3,88,44,0,465,466,5,12,0,
0,466,467,3,36,18,0,467,918,1,0,0,0,468,469,5,24,0,0,469,470,3,88,44,0,470,
471,5,25,0,0,471,472,3,36,18,0,472,473,5,12,0,0,473,474,3,36,18,0,474,918,
1,0,0,0,475,476,5,24,0,0,476,477,3,84,42,0,477,478,5,12,0,0,478,479,3,36,
18,0,479,918,1,0,0,0,480,481,5,24,0,0,481,482,3,84,42,0,482,483,5,25,0,0,
483,484,3,36,18,0,484,485,5,12,0,0,485,486,3,36,18,0,486,918,1,0,0,0,487,
488,5,26,0,0,488,489,5,27,0,0,489,918,3,84,42,0,490,491,5,28,0,0,491,918,
3,84,42,0,492,493,5,29,0,0,493,918,3,84,42,0,494,495,5,30,0,0,495,918,3,
84,42,0,496,497,5,31,0,0,497,498,3,84,42,0,498,499,5,32,0,0,499,500,3,84,
42,0,500,918,1,0,0,0,501,502,5,33,0,0,502,918,3,84,42,0,503,504,5,34,0,0,
504,918,3,84,42,0,505,506,5,35,0,0,506,507,5,25,0,0,507,508,3,82,41,0,508,
509,5,12,0,0,509,510,3,82,41,0,510,918,1,0,0,0,511,512,5,35,0,0,512,513,
5,25,0,0,513,514,3,82,41,0,514,515,5,12,0,0,515,516,3,82,41,0,516,517,5,
14,0,0,517,518,3,82,41,0,518,918,1,0,0,0,519,521,5,36,0,0,520,522,5,37,0,
0,521,520,1,0,0,0,521,522,1,0,0,0,522,523,1,0,0,0,523,524,5,38,0,0,524,525,
3,168,84,0,525,526,3,84,42,0,526,918,1,0,0,0,527,528,5,39,0,0,528,918,3,
84,42,0,529,530,5,40,0,0,530,918,3,10,5,0,531,532,5,40,0,0,532,918,5,10,
0,0,533,534,5,40,0,0,534,535,5,12,0,0,535,918,5,41,0,0,536,537,5,42,0,0,
537,538,5,43,0,0,538,539,5,12,0,0,539,540,5,17,0,0,540,918,3,84,42,0,541,
543,5,44,0,0,542,544,3,84,42,0,543,542,1,0,0,0,543,544,1,0,0,0,544,546,1,
0,0,0,545,547,5,45,0,0,546,545,1,0,0,0,546,547,1,0,0,0,547,548,1,0,0,0,548,
549,3,84,42,0,549,550,3,168,84,0,550,551,3,84,42,0,551,552,3,168,84,0,552,
553,5,46,0,0,553,554,3,148,74,0,554,918,1,0,0,0,555,557,5,44,0,0,556,558,
3,84,42,0,557,556,1,0,0,0,557,558,1,0,0,0,558,560,1,0,0,0,559,561,5,45,0,
0,560,559,1,0,0,0,560,561,1,0,0,0,561,562,1,0,0,0,562,563,3,84,42,0,563,
564,3,168,84,0,564,565,3,84,42,0,565,918,1,0,0,0,566,568,5,44,0,0,567,569,
3,84,42,0,568,567,1,0,0,0,568,569,1,0,0,0,569,571,1,0,0,0,570,572,5,45,0,
0,571,570,1,0,0,0,571,572,1,0,0,0,572,573,1,0,0,0,573,574,3,84,42,0,574,
575,3,168,84,0,575,576,5,46,0,0,576,577,3,148,74,0,577,918,1,0,0,0,578,580,
5,44,0,0,579,581,3,84,42,0,580,579,1,0,0,0,580,581,1,0,0,0,581,583,1,0,0,
0,582,584,5,45,0,0,583,582,1,0,0,0,583,584,1,0,0,0,584,585,1,0,0,0,585,918,
3,84,42,0,586,587,5,47,0,0,587,918,3,84,42,0,588,590,5,48,0,0,589,591,5,
12,0,0,590,589,1,0,0,0,590,591,1,0,0,0,591,592,1,0,0,0,592,593,3,84,42,0,
593,594,5,14,0,0,594,595,5,49,0,0,595,596,3,84,42,0,596,918,1,0,0,0,597,
599,5,48,0,0,598,600,5,12,0,0,599,598,1,0,0,0,599,600,1,0,0,0,600,601,1,
0,0,0,601,602,3,84,42,0,602,603,3,34,17,0,603,918,1,0,0,0,604,605,5,48,0,
0,605,918,5,50,0,0,606,607,5,48,0,0,607,608,5,50,0,0,608,609,5,14,0,0,609,
610,5,49,0,0,610,918,3,84,42,0,611,612,5,51,0,0,612,918,3,84,42,0,613,614,
5,51,0,0,614,615,3,150,75,0,615,616,3,132,66,0,616,918,1,0,0,0,617,618,5,
51,0,0,618,619,3,152,76,0,619,620,3,132,66,0,620,918,1,0,0,0,621,622,5,51,
0,0,622,623,3,132,66,0,623,624,3,168,84,0,624,625,3,84,42,0,625,918,1,0,
0,0,626,627,5,51,0,0,627,918,5,52,0,0,628,629,5,53,0,0,629,630,5,43,0,0,
630,631,5,25,0,0,631,632,5,17,0,0,632,918,3,84,42,0,633,634,5,54,0,0,634,
918,5,55,0,0,635,636,5,56,0,0,636,637,3,84,42,0,637,638,5,32,0,0,638,639,
3,84,42,0,639,918,1,0,0,0,640,641,5,57,0,0,641,918,5,10,0,0,642,643,5,58,
0,0,643,644,5,17,0,0,644,918,3,84,42,0,645,646,5,59,0,0,646,918,3,10,5,0,
647,648,5,60,0,0,648,918,3,90,45,0,649,650,5,61,0,0,650,918,3,150,75,0,651,
652,5,62,0,0,652,918,3,150,75,0,653,654,5,62,0,0,654,918,3,84,42,0,655,656,
5,63,0,0,656,918,3,82,41,0,657,658,5,63,0,0,658,659,3,82,41,0,659,660,3,
108,54,0,660,661,3,84,42,0,661,918,1,0,0,0,662,663,5,64,0,0,663,664,5,25,
0,0,664,665,5,17,0,0,665,918,3,84,42,0,666,667,5,64,0,0,667,668,5,25,0,0,
668,669,5,17,0,0,669,670,3,84,42,0,670,671,5,65,0,0,671,672,3,84,42,0,672,
918,1,0,0,0,673,674,5,64,0,0,674,675,5,25,0,0,675,676,5,17,0,0,676,677,3,
84,42,0,677,678,5,22,0,0,678,679,3,84,42,0,679,680,5,65,0,0,680,681,3,84,
42,0,681,918,1,0,0,0,682,683,5,64,0,0,683,684,5,25,0,0,684,685,5,17,0,0,
685,686,3,84,42,0,686,687,5,66,0,0,687,688,3,84,42,0,688,918,1,0,0,0,689,
691,5,67,0,0,690,692,5,37,0,0,691,690,1,0,0,0,691,692,1,0,0,0,692,693,1,
0,0,0,693,918,5,68,0,0,694,695,5,67,0,0,695,918,5,43,0,0,696,697,5,69,0,
0,697,918,5,70,0,0,698,699,5,69,0,0,699,700,5,71,0,0,700,701,3,168,84,0,
701,702,3,84,42,0,702,918,1,0,0,0,703,704,5,69,0,0,704,705,5,72,0,0,705,
706,5,71,0,0,706,707,3,168,84,0,707,708,3,84,42,0,708,918,1,0,0,0,709,710,
5,69,0,0,710,711,5,73,0,0,711,712,5,71,0,0,712,713,3,168,84,0,713,714,3,
84,42,0,714,918,1,0,0,0,715,716,5,69,0,0,716,918,3,84,42,0,717,718,5,69,
0,0,718,719,5,72,0,0,719,918,3,84,42,0,720,721,5,69,0,0,721,722,5,73,0,0,
722,918,3,84,42,0,723,724,5,74,0,0,724,725,3,62,31,0,725,726,5,12,0,0,726,
727,3,128,64,0,727,918,1,0,0,0,728,729,5,75,0,0,729,730,3,82,41,0,730,731,
5,12,0,0,731,732,3,84,42,0,732,918,1,0,0,0,733,734,5,76,0,0,734,918,3,84,
42,0,735,736,5,76,0,0,736,737,3,150,75,0,737,738,3,132,66,0,738,918,1,0,
0,0,739,740,5,76,0,0,740,741,3,152,76,0,741,742,3,132,66,0,742,918,1,0,0,
0,743,744,5,76,0,0,744,745,3,132,66,0,745,746,3,168,84,0,746,747,3,84,42,
0,747,918,1,0,0,0,748,749,5,76,0,0,749,918,5,52,0,0,750,751,5,77,0,0,751,
752,3,44,22,0,752,753,3,84,42,0,753,754,3,42,21,0,754,755,3,46,23,0,755,
918,1,0,0,0,756,757,5,77,0,0,757,758,3,44,22,0,758,759,3,84,42,0,759,760,
3,42,21,0,760,761,3,46,23,0,761,762,5,32,0,0,762,763,3,84,42,0,763,918,1,
0,0,0,764,765,5,77,0,0,765,766,3,42,21,0,766,767,3,46,23,0,767,768,5,32,
0,0,768,769,3,84,42,0,769,918,1,0,0,0,770,772,5,77,0,0,771,773,5,78,0,0,
772,771,1,0,0,0,772,773,1,0,0,0,773,774,1,0,0,0,774,775,5,79,0,0,775,776,
3,42,21,0,776,777,3,46,23,0,777,778,5,32,0,0,778,779,3,84,42,0,779,918,1,
0,0,0,780,782,5,77,0,0,781,783,5,37,0,0,782,781,1,0,0,0,782,783,1,0,0,0,
783,784,1,0,0,0,784,789,3,148,74,0,785,786,3,168,84,0,786,787,5,78,0,0,787,
788,5,79,0,0,788,790,1,0,0,0,789,785,1,0,0,0,789,790,1,0,0,0,790,791,1,0,
0,0,791,792,3,42,21,0,792,793,3,46,23,0,793,794,5,32,0,0,794,795,3,84,42,
0,795,918,1,0,0,0,796,798,5,77,0,0,797,799,5,37,0,0,798,797,1,0,0,0,798,
799,1,0,0,0,799,800,1,0,0,0,800,801,5,46,0,0,801,806,3,148,74,0,802,803,
3,168,84,0,803,804,5,78,0,0,804,805,5,79,0,0,805,807,1,0,0,0,806,802,1,0,
0,0,806,807,1,0,0,0,807,808,1,0,0,0,808,809,3,42,21,0,809,810,3,46,23,0,
810,811,5,32,0,0,811,812,3,84,42,0,812,918,1,0,0,0,813,814,5,77,0,0,814,
815,3,84,42,0,815,816,3,42,21,0,816,817,3,46,23,0,817,818,5,32,0,0,818,819,
3,84,42,0,819,918,1,0,0,0,820,822,5,77,0,0,821,823,5,37,0,0,822,821,1,0,
0,0,822,823,1,0,0,0,823,824,1,0,0,0,824,825,3,148,74,0,825,826,3,168,84,
0,826,827,3,84,42,0,827,828,3,42,21,0,828,829,3,46,23,0,829,830,5,32,0,0,
830,831,3,84,42,0,831,918,1,0,0,0,832,834,5,77,0,0,833,835,5,37,0,0,834,
833,1,0,0,0,834,835,1,0,0,0,835,836,1,0,0,0,836,837,5,46,0,0,837,838,3,148,
74,0,838,839,3,168,84,0,839,840,3,84,42,0,840,841,3,42,21,0,841,842,3,46,
23,0,842,843,5,32,0,0,843,844,3,84,42,0,844,918,1,0,0,0,845,846,5,80,0,0,
846,918,3,84,42,0,847,848,5,80,0,0,848,849,3,84,42,0,849,850,5,14,0,0,850,
851,7,0,0,0,851,852,5,85,0,0,852,918,1,0,0,0,853,854,5,80,0,0,854,855,3,
84,42,0,855,856,5,14,0,0,856,857,5,85,0,0,857,858,3,84,42,0,858,918,1,0,
0,0,859,860,5,86,0,0,860,861,3,84,42,0,861,862,5,25,0,0,862,863,3,84,42,
0,863,918,1,0,0,0,864,865,5,87,0,0,865,918,3,84,42,0,866,867,5,87,0,0,867,
868,3,84,42,0,868,869,5,14,0,0,869,870,7,1,0,0,870,918,1,0,0,0,871,872,5,
90,0,0,872,918,5,55,0,0,873,874,5,90,0,0,874,875,5,55,0,0,875,876,5,14,0,
0,876,877,5,49,0,0,877,918,3,84,42,0,878,879,5,49,0,0,879,918,3,84,42,0,
880,881,5,91,0,0,881,882,3,84,42,0,882,883,3,142,71,0,883,918,1,0,0,0,884,
885,5,91,0,0,885,886,5,65,0,0,886,887,3,84,42,0,887,888,3,142,71,0,888,918,
1,0,0,0,889,890,5,91,0,0,890,891,5,66,0,0,891,918,3,84,42,0,892,893,5,91,
0,0,893,894,5,92,0,0,894,918,3,84,42,0,895,896,5,93,0,0,896,897,3,84,42,
0,897,898,5,12,0,0,898,899,5,17,0,0,899,900,3,84,42,0,900,918,1,0,0,0,901,
902,5,93,0,0,902,903,3,84,42,0,903,904,5,12,0,0,904,905,5,17,0,0,905,906,
3,84,42,0,906,907,5,22,0,0,907,908,7,2,0,0,908,918,1,0,0,0,909,910,5,93,
0,0,910,911,3,84,42,0,911,912,5,12,0,0,912,913,5,17,0,0,913,914,3,84,42,
0,914,915,5,22,0,0,915,916,3,84,42,0,916,918,1,0,0,0,917,396,1,0,0,0,917,
401,1,0,0,0,917,410,1,0,0,0,917,417,1,0,0,0,917,422,1,0,0,0,917,424,1,0,
0,0,917,429,1,0,0,0,917,431,1,0,0,0,917,434,1,0,0,0,917,440,1,0,0,0,917,
441,1,0,0,0,917,443,1,0,0,0,917,448,1,0,0,0,917,451,1,0,0,0,917,454,1,0,
0,0,917,460,1,0,0,0,917,463,1,0,0,0,917,468,1,0,0,0,917,475,1,0,0,0,917,
480,1,0,0,0,917,487,1,0,0,0,917,490,1,0,0,0,917,492,1,0,0,0,917,494,1,0,
0,0,917,496,1,0,0,0,917,501,1,0,0,0,917,503,1,0,0,0,917,505,1,0,0,0,917,
511,1,0,0,0,917,519,1,0,0,0,917,527,1,0,0,0,917,529,1,0,0,0,917,531,1,0,
0,0,917,533,1,0,0,0,917,536,1,0,0,0,917,541,1,0,0,0,917,555,1,0,0,0,917,
566,1,0,0,0,917,578,1,0,0,0,917,586,1,0,0,0,917,588,1,0,0,0,917,597,1,0,
0,0,917,604,1,0,0,0,917,606,1,0,0,0,917,611,1,0,0,0,917,613,1,0,0,0,917,
617,1,0,0,0,917,621,1,0,0,0,917,626,1,0,0,0,917,628,1,0,0,0,917,633,1,0,
0,0,917,635,1,0,0,0,917,640,1,0,0,0,917,642,1,0,0,0,917,645,1,0,0,0,917,
647,1,0,0,0,917,649,1,0,0,0,917,651,1,0,0,0,917,653,1,0,0,0,917,655,1,0,
0,0,917,657,1,0,0,0,917,662,1,0,0,0,917,666,1,0,0,0,917,673,1,0,0,0,917,
682,1,0,0,0,917,689,1,0,0,0,917,694,1,0,0,0,917,696,1,0,0,0,917,698,1,0,
0,0,917,703,1,0,0,0,917,709,1,0,0,0,917,715,1,0,0,0,917,717,1,0,0,0,917,
720,1,0,0,0,917,723,1,0,0,0,917,728,1,0,0,0,917,733,1,0,0,0,917,735,1,0,
0,0,917,739,1,0,0,0,917,743,1,0,0,0,917,748,1,0,0,0,917,750,1,0,0,0,917,
756,1,0,0,0,917,764,1,0,0,0,917,770,1,0,0,0,917,780,1,0,0,0,917,796,1,0,
0,0,917,813,1,0,0,0,917,820,1,0,0,0,917,832,1,0,0,0,917,845,1,0,0,0,917,
847,1,0,0,0,917,853,1,0,0,0,917,859,1,0,0,0,917,864,1,0,0,0,917,866,1,0,
0,0,917,871,1,0,0,0,917,873,1,0,0,0,917,878,1,0,0,0,917,880,1,0,0,0,917,
884,1,0,0,0,917,889,1,0,0,0,917,892,1,0,0,0,917,895,1,0,0,0,917,901,1,0,
0,0,917,909,1,0,0,0,918,33,1,0,0,0,919,920,5,95,0,0,920,921,5,96,0,0,921,
931,5,97,0,0,922,923,5,95,0,0,923,924,5,96,0,0,924,925,5,97,0,0,925,926,
5,98,0,0,926,931,5,99,0,0,927,928,5,98,0,0,928,931,5,99,0,0,929,931,1,0,
0,0,930,919,1,0,0,0,930,922,1,0,0,0,930,927,1,0,0,0,930,929,1,0,0,0,931,
35,1,0,0,0,932,938,3,38,19,0,933,934,3,38,19,0,934,935,5,100,0,0,935,936,
3,38,19,0,936,938,1,0,0,0,937,932,1,0,0,0,937,933,1,0,0,0,938,37,1,0,0,0,
939,948,3,134,67,0,940,948,5,101,0,0,941,942,3,40,20,0,942,943,5,102,0,0,
943,948,1,0,0,0,944,945,3,40,20,0,945,946,5,103,0,0,946,948,1,0,0,0,947,
939,1,0,0,0,947,940,1,0,0,0,947,941,1,0,0,0,947,944,1,0,0,0,948,39,1,0,0,
0,949,954,7,3,0,0,950,954,7,4,0,0,951,954,5,109,0,0,952,954,1,0,0,0,953,
949,1,0,0,0,953,950,1,0,0,0,953,951,1,0,0,0,953,952,1,0,0,0,954,41,1,0,0,
0,955,959,5,110,0,0,956,959,5,111,0,0,957,959,1,0,0,0,958,955,1,0,0,0,958,
956,1,0,0,0,958,957,1,0,0,0,959,43,1,0,0,0,960,962,5,37,0,0,961,960,1,0,
0,0,961,962,1,0,0,0,962,963,1,0,0,0,963,964,3,164,82,0,964,965,3,168,84,
0,965,986,1,0,0,0,966,968,5,37,0,0,967,966,1,0,0,0,967,968,1,0,0,0,968,969,
1,0,0,0,969,970,3,166,83,0,970,971,3,168,84,0,971,986,1,0,0,0,972,974,5,
37,0,0,973,972,1,0,0,0,973,974,1,0,0,0,974,975,1,0,0,0,975,976,3,162,81,
0,976,977,3,168,84,0,977,986,1,0,0,0,978,980,5,37,0,0,979,978,1,0,0,0,979,
980,1,0,0,0,980,981,1,0,0,0,981,982,3,160,80,0,982,983,3,168,84,0,983,986,
1,0,0,0,984,986,1,0,0,0,985,961,1,0,0,0,985,967,1,0,0,0,985,973,1,0,0,0,
985,979,1,0,0,0,985,984,1,0,0,0,986,45,1,0,0,0,987,993,5,71,0,0,988,993,
5,112,0,0,989,993,5,45,0,0,990,993,5,113,0,0,991,993,1,0,0,0,992,987,1,0,
0,0,992,988,1,0,0,0,992,989,1,0,0,0,992,990,1,0,0,0,992,991,1,0,0,0,993,
47,1,0,0,0,994,1003,3,50,25,0,995,1003,3,52,26,0,996,997,5,14,0,0,997,998,
5,333,0,0,998,999,5,114,0,0,999,1003,3,54,27,0,1000,1003,5,115,0,0,1001,
1003,1,0,0,0,1002,994,1,0,0,0,1002,995,1,0,0,0,1002,996,1,0,0,0,1002,1000,
1,0,0,0,1002,1001,1,0,0,0,1003,49,1,0,0,0,1004,1005,5,66,0,0,1005,1009,3,
84,42,0,1006,1007,5,92,0,0,1007,1009,3,84,42,0,1008,1004,1,0,0,0,1008,1006,
1,0,0,0,1009,51,1,0,0,0,1010,1011,5,65,0,0,1011,1012,3,84,42,0,1012,1013,
5,116,0,0,1013,1021,1,0,0,0,1014,1015,5,65,0,0,1015,1021,3,84,42,0,1016,
1017,3,84,42,0,1017,1018,5,116,0,0,1018,1021,1,0,0,0,1019,1021,3,84,42,0,
1020,1010,1,0,0,0,1020,1014,1,0,0,0,1020,1016,1,0,0,0,1020,1019,1,0,0,0,
1021,53,1,0,0,0,1022,1023,3,84,42,0,1023,1024,5,117,0,0,1024,1025,5,12,0,
0,1025,1026,3,84,42,0,1026,1032,1,0,0,0,1027,1028,3,84,42,0,1028,1029,5,
12,0,0,1029,1030,3,84,42,0,1030,1032,1,0,0,0,1031,1022,1,0,0,0,1031,1027,
1,0,0,0,1032,55,1,0,0,0,1033,1034,6,28,-1,0,1034,1035,3,114,57,0,1035,1036,
3,160,80,0,1036,1037,3,168,84,0,1037,1091,1,0,0,0,1038,1039,3,160,80,0,1039,
1040,3,84,42,0,1040,1041,5,12,0,0,1041,1042,3,84,42,0,1042,1043,3,168,84,
0,1043,1091,1,0,0,0,1044,1045,3,160,80,0,1045,1046,3,84,42,0,1046,1047,3,
168,84,0,1047,1091,1,0,0,0,1048,1049,3,114,57,0,1049,1050,3,162,81,0,1050,
1051,3,168,84,0,1051,1091,1,0,0,0,1052,1053,3,162,81,0,1053,1054,3,84,42,
0,1054,1055,5,12,0,0,1055,1056,3,84,42,0,1056,1057,3,168,84,0,1057,1091,
1,0,0,0,1058,1059,3,162,81,0,1059,1060,3,84,42,0,1060,1061,3,168,84,0,1061,
1091,1,0,0,0,1062,1063,3,114,57,0,1063,1064,3,166,83,0,1064,1065,3,168,84,
0,1065,1091,1,0,0,0,1066,1067,3,166,83,0,1067,1068,3,84,42,0,1068,1069,5,
12,0,0,1069,1070,3,84,42,0,1070,1071,3,168,84,0,1071,1091,1,0,0,0,1072,1073,
3,166,83,0,1073,1074,3,84,42,0,1074,1075,3,168,84,0,1075,1091,1,0,0,0,1076,
1077,3,114,57,0,1077,1078,3,164,82,0,1078,1079,3,168,84,0,1079,1091,1,0,
0,0,1080,1081,3,164,82,0,1081,1082,3,84,42,0,1082,1083,5,12,0,0,1083,1084,
3,84,42,0,1084,1085,3,168,84,0,1085,1091,1,0,0,0,1086,1087,3,164,82,0,1087,
1088,3,84,42,0,1088,1089,3,168,84,0,1089,1091,1,0,0,0,1090,1033,1,0,0,0,
1090,1038,1,0,0,0,1090,1044,1,0,0,0,1090,1048,1,0,0,0,1090,1052,1,0,0,0,
1090,1058,1,0,0,0,1090,1062,1,0,0,0,1090,1066,1,0,0,0,1090,1072,1,0,0,0,
1090,1076,1,0,0,0,1090,1080,1,0,0,0,1090,1086,1,0,0,0,1091,1096,1,0,0,0,
1092,1093,10,13,0,0,1093,1095,3,56,28,14,1094,1092,1,0,0,0,1095,1098,1,0,
0,0,1096,1094,1,0,0,0,1096,1097,1,0,0,0,1097,57,1,0,0,0,1098,1096,1,0,0,
0,1099,1100,5,27,0,0,1100,1105,3,86,43,0,1101,1102,3,114,57,0,1102,1103,
5,27,0,0,1103,1105,1,0,0,0,1104,1099,1,0,0,0,1104,1101,1,0,0,0,1105,59,1,
0,0,0,1106,1107,5,118,0,0,1107,1108,3,86,43,0,1108,1109,3,168,84,0,1109,
1110,3,58,29,0,1110,1117,1,0,0,0,1111,1112,3,114,57,0,1112,1113,5,118,0,
0,1113,1114,3,168,84,0,1114,1115,3,58,29,0,1115,1117,1,0,0,0,1116,1106,1,
0,0,0,1116,1111,1,0,0,0,1117,61,1,0,0,0,1118,1121,3,66,33,0,1119,1121,3,
64,32,0,1120,1118,1,0,0,0,1120,1119,1,0,0,0,1121,63,1,0,0,0,1122,1124,5,
37,0,0,1123,1122,1,0,0,0,1123,1124,1,0,0,0,1124,1125,1,0,0,0,1125,1126,3,
126,63,0,1126,65,1,0,0,0,1127,1129,5,37,0,0,1128,1127,1,0,0,0,1128,1129,
1,0,0,0,1129,1130,1,0,0,0,1130,1131,3,126,63,0,1131,1132,3,168,84,0,1132,
1133,3,86,43,0,1133,1143,1,0,0,0,1134,1136,5,37,0,0,1135,1134,1,0,0,0,1135,
1136,1,0,0,0,1136,1137,1,0,0,0,1137,1138,3,40,20,0,1138,1139,3,126,63,0,
1139,1140,3,168,84,0,1140,1141,3,86,43,0,1141,1143,1,0,0,0,1142,1128,1,0,
0,0,1142,1135,1,0,0,0,1143,67,1,0,0,0,1144,1161,3,146,73,0,1145,1146,3,150,
75,0,1146,1147,5,119,0,0,1147,1148,3,86,43,0,1148,1161,1,0,0,0,1149,1150,
3,152,76,0,1150,1151,5,119,0,0,1151,1152,3,86,43,0,1152,1161,1,0,0,0,1153,
1161,5,120,0,0,1154,1161,3,72,36,0,1155,1161,3,74,37,0,1156,1161,3,78,39,
0,1157,1161,3,76,38,0,1158,1161,3,70,35,0,1159,1161,3,80,40,0,1160,1144,
1,0,0,0,1160,1145,1,0,0,0,1160,1149,1,0,0,0,1160,1153,1,0,0,0,1160,1154,
1,0,0,0,1160,1155,1,0,0,0,1160,1156,1,0,0,0,1160,1157,1,0,0,0,1160,1158,
1,0,0,0,1160,1159,1,0,0,0,1161,69,1,0,0,0,1162,1164,5,78,0,0,1163,1162,1,
0,0,0,1163,1164,1,0,0,0,1164,1165,1,0,0,0,1165,1170,3,158,79,0,1166,1167,
3,158,79,0,1167,1168,3,86,43,0,1168,1170,1,0,0,0,1169,1163,1,0,0,0,1169,
1166,1,0,0,0,1170,71,1,0,0,0,1171,1173,6,36,-1,0,1172,1174,3,150,75,0,1173,
1172,1,0,0,0,1173,1174,1,0,0,0,1174,1175,1,0,0,0,1175,1176,3,154,77,0,1176,
1177,5,121,0,0,1177,1178,3,86,43,0,1178,1205,1,0,0,0,1179,1180,3,152,76,
0,1180,1181,3,154,77,0,1181,1182,5,121,0,0,1182,1183,3,86,43,0,1183,1205,
1,0,0,0,1184,1186,3,150,75,0,1185,1184,1,0,0,0,1185,1186,1,0,0,0,1186,1187,
1,0,0,0,1187,1188,3,154,77,0,1188,1189,3,86,43,0,1189,1205,1,0,0,0,1190,
1191,3,152,76,0,1191,1192,3,154,77,0,1192,1193,3,86,43,0,1193,1205,1,0,0,
0,1194,1196,3,114,57,0,1195,1197,3,150,75,0,1196,1195,1,0,0,0,1196,1197,
1,0,0,0,1197,1198,1,0,0,0,1198,1199,3,154,77,0,1199,1205,1,0,0,0,1200,1201,
3,114,57,0,1201,1202,3,152,76,0,1202,1203,3,154,77,0,1203,1205,1,0,0,0,1204,
1171,1,0,0,0,1204,1179,1,0,0,0,1204,1185,1,0,0,0,1204,1190,1,0,0,0,1204,
1194,1,0,0,0,1204,1200,1,0,0,0,1205,1212,1,0,0,0,1206,1207,10,1,0,0,1207,
1208,3,168,84,0,1208,1209,3,76,38,0,1209,1211,1,0,0,0,1210,1206,1,0,0,0,
1211,1214,1,0,0,0,1212,1210,1,0,0,0,1212,1213,1,0,0,0,1213,73,1,0,0,0,1214,
1212,1,0,0,0,1215,1216,6,37,-1,0,1216,1217,3,150,75,0,1217,1218,3,156,78,
0,1218,1219,5,121,0,0,1219,1220,3,86,43,0,1220,1249,1,0,0,0,1221,1223,3,
152,76,0,1222,1221,1,0,0,0,1222,1223,1,0,0,0,1223,1224,1,0,0,0,1224,1225,
3,156,78,0,1225,1226,5,121,0,0,1226,1227,3,86,43,0,1227,1249,1,0,0,0,1228,
1229,3,150,75,0,1229,1230,3,156,78,0,1230,1231,3,86,43,0,1231,1249,1,0,0,
0,1232,1234,3,152,76,0,1233,1232,1,0,0,0,1233,1234,1,0,0,0,1234,1235,1,0,
0,0,1235,1236,3,156,78,0,1236,1237,3,86,43,0,1237,1249,1,0,0,0,1238,1239,
3,114,57,0,1239,1240,3,150,75,0,1240,1241,3,156,78,0,1241,1249,1,0,0,0,1242,
1244,3,114,57,0,1243,1245,3,152,76,0,1244,1243,1,0,0,0,1244,1245,1,0,0,0,
1245,1246,1,0,0,0,1246,1247,3,156,78,0,1247,1249,1,0,0,0,1248,1215,1,0,0,
0,1248,1222,1,0,0,0,1248,1228,1,0,0,0,1248,1233,1,0,0,0,1248,1238,1,0,0,
0,1248,1242,1,0,0,0,1249,1256,1,0,0,0,1250,1251,10,1,0,0,1251,1252,3,168,
84,0,1252,1253,3,76,38,0,1253,1255,1,0,0,0,1254,1250,1,0,0,0,1255,1258,1,
0,0,0,1256,1254,1,0,0,0,1256,1257,1,0,0,0,1257,75,1,0,0,0,1258,1256,1,0,
0,0,1259,1261,6,38,-1,0,1260,1262,5,78,0,0,1261,1260,1,0,0,0,1261,1262,1,
0,0,0,1262,1263,1,0,0,0,1263,1278,3,150,75,0,1264,1265,3,150,75,0,1265,1266,
5,121,0,0,1266,1267,3,86,43,0,1267,1278,1,0,0,0,1268,1269,3,144,72,0,1269,
1270,3,150,75,0,1270,1278,1,0,0,0,1271,1272,3,114,57,0,1272,1273,3,150,75,
0,1273,1278,1,0,0,0,1274,1275,3,150,75,0,1275,1276,3,86,43,0,1276,1278,1,
0,0,0,1277,1259,1,0,0,0,1277,1264,1,0,0,0,1277,1268,1,0,0,0,1277,1271,1,
0,0,0,1277,1274,1,0,0,0,1278,1289,1,0,0,0,1279,1280,10,2,0,0,1280,1281,3,
168,84,0,1281,1282,3,78,39,0,1282,1288,1,0,0,0,1283,1284,10,1,0,0,1284,1285,
3,168,84,0,1285,1286,3,70,35,0,1286,1288,1,0,0,0,1287,1279,1,0,0,0,1287,
1283,1,0,0,0,1288,1291,1,0,0,0,1289,1287,1,0,0,0,1289,1290,1,0,0,0,1290,
77,1,0,0,0,1291,1289,1,0,0,0,1292,1294,6,39,-1,0,1293,1295,5,78,0,0,1294,
1293,1,0,0,0,1294,1295,1,0,0,0,1295,1296,1,0,0,0,1296,1311,3,152,76,0,1297,
1298,3,152,76,0,1298,1299,5,121,0,0,1299,1300,3,86,43,0,1300,1311,1,0,0,
0,1301,1302,3,152,76,0,1302,1303,3,86,43,0,1303,1311,1,0,0,0,1304,1305,3,
114,57,0,1305,1306,3,152,76,0,1306,1311,1,0,0,0,1307,1308,3,144,72,0,1308,
1309,3,152,76,0,1309,1311,1,0,0,0,1310,1292,1,0,0,0,1310,1297,1,0,0,0,1310,
1301,1,0,0,0,1310,1304,1,0,0,0,1310,1307,1,0,0,0,1311,1318,1,0,0,0,1312,
1313,10,1,0,0,1313,1314,3,168,84,0,1314,1315,3,70,35,0,1315,1317,1,0,0,0,
1316,1312,1,0,0,0,1317,1320,1,0,0,0,1318,1316,1,0,0,0,1318,1319,1,0,0,0,
1319,79,1,0,0,0,1320,1318,1,0,0,0,1321,1323,5,37,0,0,1322,1321,1,0,0,0,1322,
1323,1,0,0,0,1323,1324,1,0,0,0,1324,1325,3,150,75,0,1325,1326,5,97,0,0,1326,
1353,1,0,0,0,1327,1329,5,37,0,0,1328,1327,1,0,0,0,1328,1329,1,0,0,0,1329,
1330,1,0,0,0,1330,1331,5,20,0,0,1331,1353,5,97,0,0,1332,1334,5,37,0,0,1333,
1332,1,0,0,0,1333,1334,1,0,0,0,1334,1335,1,0,0,0,1335,1336,5,122,0,0,1336,
1353,5,97,0,0,1337,1339,5,37,0,0,1338,1337,1,0,0,0,1338,1339,1,0,0,0,1339,
1340,1,0,0,0,1340,1341,5,123,0,0,1341,1353,5,124,0,0,1342,1344,5,37,0,0,
1343,1342,1,0,0,0,1343,1344,1,0,0,0,1344,1345,1,0,0,0,1345,1346,5,125,0,
0,1346,1353,5,124,0,0,1347,1348,5,97,0,0,1348,1353,3,84,42,0,1349,1350,5,
97,0,0,1350,1351,5,121,0,0,1351,1353,3,84,42,0,1352,1322,1,0,0,0,1352,1328,
1,0,0,0,1352,1333,1,0,0,0,1352,1338,1,0,0,0,1352,1343,1,0,0,0,1352,1347,
1,0,0,0,1352,1349,1,0,0,0,1353,81,1,0,0,0,1354,1360,3,84,42,0,1355,1356,
3,84,42,0,1356,1357,5,4,0,0,1357,1358,3,82,41,0,1358,1360,1,0,0,0,1359,1354,
1,0,0,0,1359,1355,1,0,0,0,1360,83,1,0,0,0,1361,1362,6,42,-1,0,1362,1370,
3,86,43,0,1363,1364,5,126,0,0,1364,1370,3,84,42,11,1365,1366,5,127,0,0,1366,
1370,3,84,42,10,1367,1368,7,5,0,0,1368,1370,3,84,42,9,1369,1361,1,0,0,0,
1369,1363,1,0,0,0,1369,1365,1,0,0,0,1369,1367,1,0,0,0,1370,1397,1,0,0,0,
1371,1372,10,8,0,0,1372,1373,5,133,0,0,1373,1396,3,84,42,9,1374,1375,10,
7,0,0,1375,1376,7,6,0,0,1376,1396,3,84,42,8,1377,1378,10,6,0,0,1378,1379,
7,7,0,0,1379,1396,3,84,42,7,1380,1381,10,5,0,0,1381,1382,7,8,0,0,1382,1396,
3,84,42,6,1383,1384,10,4,0,0,1384,1385,7,9,0,0,1385,1396,3,84,42,5,1386,
1387,10,3,0,0,1387,1388,7,10,0,0,1388,1396,3,84,42,4,1389,1390,10,2,0,0,
1390,1391,5,100,0,0,1391,1396,3,84,42,3,1392,1393,10,1,0,0,1393,1394,5,15,
0,0,1394,1396,3,84,42,2,1395,1371,1,0,0,0,1395,1374,1,0,0,0,1395,1377,1,
0,0,0,1395,1380,1,0,0,0,1395,1383,1,0,0,0,1395,1386,1,0,0,0,1395,1389,1,
0,0,0,1395,1392,1,0,0,0,1396,1399,1,0,0,0,1397,1395,1,0,0,0,1397,1398,1,
0,0,0,1398,85,1,0,0,0,1399,1397,1,0,0,0,1400,1414,3,106,53,0,1401,1402,5,
127,0,0,1402,1414,3,106,53,0,1403,1404,5,160,0,0,1404,1405,3,84,42,0,1405,
1406,5,161,0,0,1406,1414,1,0,0,0,1407,1414,3,94,47,0,1408,1414,3,96,48,0,
1409,1414,3,88,44,0,1410,1411,3,56,28,0,1411,1412,3,86,43,0,1412,1414,1,
0,0,0,1413,1400,1,0,0,0,1413,1401,1,0,0,0,1413,1403,1,0,0,0,1413,1407,1,
0,0,0,1413,1408,1,0,0,0,1413,1409,1,0,0,0,1413,1410,1,0,0,0,1414,87,1,0,
0,0,1415,1429,5,333,0,0,1416,1418,5,37,0,0,1417,1416,1,0,0,0,1417,1418,1,
0,0,0,1418,1419,1,0,0,0,1419,1429,5,162,0,0,1420,1429,5,163,0,0,1421,1429,
3,62,31,0,1422,1429,3,58,29,0,1423,1429,3,60,30,0,1424,1429,3,68,34,0,1425,
1426,3,56,28,0,1426,1427,3,88,44,0,1427,1429,1,0,0,0,1428,1415,1,0,0,0,1428,
1417,1,0,0,0,1428,1420,1,0,0,0,1428,1421,1,0,0,0,1428,1422,1,0,0,0,1428,
1423,1,0,0,0,1428,1424,1,0,0,0,1428,1425,1,0,0,0,1429,89,1,0,0,0,1430,1431,
3,84,42,0,1431,1432,3,84,42,0,1432,1444,1,0,0,0,1433,1434,3,84,42,0,1434,
1435,5,164,0,0,1435,1436,3,84,42,0,1436,1437,3,84,42,0,1437,1444,1,0,0,0,
1438,1439,3,84,42,0,1439,1440,5,164,0,0,1440,1441,3,84,42,0,1441,1444,1,
0,0,0,1442,1444,3,84,42,0,1443,1430,1,0,0,0,1443,1433,1,0,0,0,1443,1438,
1,0,0,0,1443,1442,1,0,0,0,1444,91,1,0,0,0,1445,1464,5,71,0,0,1446,1464,5,
69,0,0,1447,1464,5,165,0,0,1448,1464,5,166,0,0,1449,1464,5,167,0,0,1450,
1452,7,11,0,0,1451,1450,1,0,0,0,1451,1452,1,0,0,0,1452,1453,1,0,0,0,1453,
1464,7,12,0,0,1454,1456,5,172,0,0,1455,1454,1,0,0,0,1455,1456,1,0,0,0,1456,
1457,1,0,0,0,1457,1464,7,13,0,0,1458,1460,5,175,0,0,1459,1461,5,176,0,0,
1460,1459,1,0,0,0,1460,1461,1,0,0,0,1461,1464,1,0,0,0,1462,1464,3,84,42,
0,1463,1445,1,0,0,0,1463,1446,1,0,0,0,1463,1447,1,0,0,0,1463,1448,1,0,0,
0,1463,1449,1,0,0,0,1463,1451,1,0,0,0,1463,1455,1,0,0,0,1463,1458,1,0,0,
0,1463,1462,1,0,0,0,1464,93,1,0,0,0,1465,1467,5,177,0,0,1466,1465,1,0,0,
0,1466,1467,1,0,0,0,1467,1468,1,0,0,0,1468,1491,3,140,70,0,1469,1471,5,177,
0,0,1470,1469,1,0,0,0,1470,1471,1,0,0,0,1471,1472,1,0,0,0,1472,1473,3,140,
70,0,1473,1474,5,12,0,0,1474,1475,3,138,69,0,1475,1491,1,0,0,0,1476,1478,
5,177,0,0,1477,1476,1,0,0,0,1477,1478,1,0,0,0,1478,1479,1,0,0,0,1479,1480,
3,140,70,0,1480,1481,3,136,68,0,1481,1491,1,0,0,0,1482,1484,5,177,0,0,1483,
1482,1,0,0,0,1483,1484,1,0,0,0,1484,1485,1,0,0,0,1485,1486,3,140,70,0,1486,
1487,3,136,68,0,1487,1488,5,12,0,0,1488,1489,3,138,69,0,1489,1491,1,0,0,
0,1490,1466,1,0,0,0,1490,1470,1,0,0,0,1490,1477,1,0,0,0,1490,1483,1,0,0,
0,1491,95,1,0,0,0,1492,1500,3,98,49,0,1493,1494,5,333,0,0,1494,1496,5,160,
0,0,1495,1497,3,82,41,0,1496,1495,1,0,0,0,1496,1497,1,0,0,0,1497,1498,1,
0,0,0,1498,1500,5,161,0,0,1499,1492,1,0,0,0,1499,1493,1,0,0,0,1500,97,1,
0,0,0,1501,1502,5,37,0,0,1502,1521,3,100,50,0,1503,1505,5,37,0,0,1504,1503,
1,0,0,0,1504,1505,1,0,0,0,1505,1506,1,0,0,0,1506,1507,3,102,51,0,1507,1508,
3,168,84,0,1508,1509,3,86,43,0,1509,1521,1,0,0,0,1510,1511,3,102,51,0,1511,
1512,5,160,0,0,1512,1513,3,82,41,0,1513,1514,5,161,0,0,1514,1521,1,0,0,0,
1515,1516,3,104,52,0,1516,1517,5,160,0,0,1517,1518,3,82,41,0,1518,1519,5,
161,0,0,1519,1521,1,0,0,0,1520,1501,1,0,0,0,1520,1504,1,0,0,0,1520,1510,
1,0,0,0,1520,1515,1,0,0,0,1521,99,1,0,0,0,1522,1597,5,178,0,0,1523,1597,
5,179,0,0,1524,1597,5,180,0,0,1525,1597,7,1,0,0,1526,1597,5,181,0,0,1527,
1597,5,182,0,0,1528,1597,5,183,0,0,1529,1597,3,134,67,0,1530,1531,3,40,20,
0,1531,1532,5,103,0,0,1532,1597,1,0,0,0,1533,1534,3,40,20,0,1534,1535,5,
102,0,0,1535,1597,1,0,0,0,1536,1597,5,20,0,0,1537,1597,5,184,0,0,1538,1539,
5,185,0,0,1539,1541,5,186,0,0,1540,1542,3,150,75,0,1541,1540,1,0,0,0,1541,
1542,1,0,0,0,1542,1543,1,0,0,0,1543,1597,5,187,0,0,1544,1545,5,185,0,0,1545,
1546,5,186,0,0,1546,1547,3,152,76,0,1547,1548,5,187,0,0,1548,1597,1,0,0,
0,1549,1550,5,185,0,0,1550,1552,5,186,0,0,1551,1553,3,150,75,0,1552,1551,
1,0,0,0,1552,1553,1,0,0,0,1553,1554,1,0,0,0,1554,1597,3,154,77,0,1555,1556,
5,185,0,0,1556,1557,5,186,0,0,1557,1558,3,152,76,0,1558,1559,3,154,77,0,
1559,1597,1,0,0,0,1560,1561,5,185,0,0,1561,1562,5,186,0,0,1562,1563,3,150,
75,0,1563,1564,3,156,78,0,1564,1597,1,0,0,0,1565,1566,5,185,0,0,1566,1568,
5,186,0,0,1567,1569,3,152,76,0,1568,1567,1,0,0,0,1568,1569,1,0,0,0,1569,
1570,1,0,0,0,1570,1597,3,156,78,0,1571,1572,5,185,0,0,1572,1573,5,186,0,
0,1573,1597,3,148,74,0,1574,1575,5,185,0,0,1575,1576,5,186,0,0,1576,1597,
3,152,76,0,1577,1578,5,185,0,0,1578,1579,5,186,0,0,1579,1580,5,46,0,0,1580,
1597,3,148,74,0,1581,1582,5,185,0,0,1582,1583,5,186,0,0,1583,1597,5,188,
0,0,1584,1585,5,185,0,0,1585,1586,5,186,0,0,1586,1597,5,189,0,0,1587,1597,
5,188,0,0,1588,1597,5,190,0,0,1589,1597,5,191,0,0,1590,1597,5,192,0,0,1591,
1597,5,163,0,0,1592,1597,5,193,0,0,1593,1597,5,194,0,0,1594,1597,5,189,0,
0,1595,1597,5,195,0,0,1596,1522,1,0,0,0,1596,1523,1,0,0,0,1596,1524,1,0,
0,0,1596,1525,1,0,0,0,1596,1526,1,0,0,0,1596,1527,1,0,0,0,1596,1528,1,0,
0,0,1596,1529,1,0,0,0,1596,1530,1,0,0,0,1596,1533,1,0,0,0,1596,1536,1,0,
0,0,1596,1537,1,0,0,0,1596,1538,1,0,0,0,1596,1544,1,0,0,0,1596,1549,1,0,
0,0,1596,1555,1,0,0,0,1596,1560,1,0,0,0,1596,1565,1,0,0,0,1596,1571,1,0,
0,0,1596,1574,1,0,0,0,1596,1577,1,0,0,0,1596,1581,1,0,0,0,1596,1584,1,0,
0,0,1596,1587,1,0,0,0,1596,1588,1,0,0,0,1596,1589,1,0,0,0,1596,1590,1,0,
0,0,1596,1591,1,0,0,0,1596,1592,1,0,0,0,1596,1593,1,0,0,0,1596,1594,1,0,
0,0,1596,1595,1,0,0,0,1597,101,1,0,0,0,1598,1685,5,196,0,0,1599,1685,5,197,
0,0,1600,1685,5,198,0,0,1601,1685,5,199,0,0,1602,1603,5,185,0,0,1603,1605,
5,186,0,0,1604,1606,3,150,75,0,1605,1604,1,0,0,0,1605,1606,1,0,0,0,1606,
1607,1,0,0,0,1607,1685,5,187,0,0,1608,1609,5,185,0,0,1609,1610,5,186,0,0,
1610,1611,3,152,76,0,1611,1612,5,187,0,0,1612,1685,1,0,0,0,1613,1614,5,185,
0,0,1614,1616,5,186,0,0,1615,1617,3,150,75,0,1616,1615,1,0,0,0,1616,1617,
1,0,0,0,1617,1618,1,0,0,0,1618,1685,3,154,77,0,1619,1620,5,185,0,0,1620,
1621,5,186,0,0,1621,1622,3,152,76,0,1622,1623,3,154,77,0,1623,1685,1,0,0,
0,1624,1625,5,185,0,0,1625,1626,5,186,0,0,1626,1627,3,150,75,0,1627,1628,
3,156,78,0,1628,1685,1,0,0,0,1629,1630,5,185,0,0,1630,1632,5,186,0,0,1631,
1633,3,152,76,0,1632,1631,1,0,0,0,1632,1633,1,0,0,0,1633,1634,1,0,0,0,1634,
1685,3,156,78,0,1635,1636,5,185,0,0,1636,1637,5,186,0,0,1637,1685,3,148,
74,0,1638,1639,5,185,0,0,1639,1640,5,186,0,0,1640,1685,3,152,76,0,1641,1642,
5,185,0,0,1642,1643,5,186,0,0,1643,1644,5,46,0,0,1644,1685,3,148,74,0,1645,
1646,5,185,0,0,1646,1647,5,186,0,0,1647,1685,3,160,80,0,1648,1649,5,185,
0,0,1649,1650,5,186,0,0,1650,1685,3,162,81,0,1651,1652,5,185,0,0,1652,1653,
5,186,0,0,1653,1685,3,166,83,0,1654,1655,5,185,0,0,1655,1656,5,186,0,0,1656,
1685,3,164,82,0,1657,1658,5,185,0,0,1658,1659,5,186,0,0,1659,1685,5,200,
0,0,1660,1661,5,185,0,0,1661,1662,5,186,0,0,1662,1685,3,148,74,0,1663,1685,
5,185,0,0,1664,1685,5,201,0,0,1665,1685,5,202,0,0,1666,1685,5,203,0,0,1667,
1685,5,204,0,0,1668,1685,5,205,0,0,1669,1685,5,206,0,0,1670,1685,5,207,0,
0,1671,1685,5,208,0,0,1672,1685,5,209,0,0,1673,1685,5,210,0,0,1674,1685,
5,211,0,0,1675,1685,5,212,0,0,1676,1685,5,213,0,0,1677,1685,5,214,0,0,1678,
1685,5,215,0,0,1679,1685,5,216,0,0,1680,1685,5,217,0,0,1681,1685,5,218,0,
0,1682,1685,5,190,0,0,1683,1685,5,219,0,0,1684,1598,1,0,0,0,1684,1599,1,
0,0,0,1684,1600,1,0,0,0,1684,1601,1,0,0,0,1684,1602,1,0,0,0,1684,1608,1,
0,0,0,1684,1613,1,0,0,0,1684,1619,1,0,0,0,1684,1624,1,0,0,0,1684,1629,1,
0,0,0,1684,1635,1,0,0,0,1684,1638,1,0,0,0,1684,1641,1,0,0,0,1684,1645,1,
0,0,0,1684,1648,1,0,0,0,1684,1651,1,0,0,0,1684,1654,1,0,0,0,1684,1657,1,
0,0,0,1684,1660,1,0,0,0,1684,1663,1,0,0,0,1684,1664,1,0,0,0,1684,1665,1,
0,0,0,1684,1666,1,0,0,0,1684,1667,1,0,0,0,1684,1668,1,0,0,0,1684,1669,1,
0,0,0,1684,1670,1,0,0,0,1684,1671,1,0,0,0,1684,1672,1,0,0,0,1684,1673,1,
0,0,0,1684,1674,1,0,0,0,1684,1675,1,0,0,0,1684,1676,1,0,0,0,1684,1677,1,
0,0,0,1684,1678,1,0,0,0,1684,1679,1,0,0,0,1684,1680,1,0,0,0,1684,1681,1,
0,0,0,1684,1682,1,0,0,0,1684,1683,1,0,0,0,1685,103,1,0,0,0,1686,1691,3,102,
51,0,1687,1691,5,220,0,0,1688,1691,5,221,0,0,1689,1691,5,222,0,0,1690,1686,
1,0,0,0,1690,1687,1,0,0,0,1690,1688,1,0,0,0,1690,1689,1,0,0,0,1691,105,1,
0,0,0,1692,1699,3,110,55,0,1693,1699,3,120,60,0,1694,1699,3,118,59,0,1695,
1699,3,122,61,0,1696,1699,3,124,62,0,1697,1699,5,335,0,0,1698,1692,1,0,0,
0,1698,1693,1,0,0,0,1698,1694,1,0,0,0,1698,1695,1,0,0,0,1698,1696,1,0,0,
0,1698,1697,1,0,0,0,1699,107,1,0,0,0,1700,1701,7,14,0,0,1701,109,1,0,0,0,
1702,1714,3,112,56,0,1703,1714,5,70,0,0,1704,1714,5,224,0,0,1705,1714,5,
225,0,0,1706,1714,5,6,0,0,1707,1714,5,226,0,0,1708,1714,5,227,0,0,1709,1714,
5,228,0,0,1710,1714,5,229,0,0,1711,1714,5,230,0,0,1712,1714,5,231,0,0,1713,
1702,1,0,0,0,1713,1703,1,0,0,0,1713,1704,1,0,0,0,1713,1705,1,0,0,0,1713,
1706,1,0,0,0,1713,1707,1,0,0,0,1713,1708,1,0,0,0,1713,1709,1,0,0,0,1713,
1710,1,0,0,0,1713,1711,1,0,0,0,1713,1712,1,0,0,0,1714,111,1,0,0,0,1715,1716,
7,15,0,0,1716,113,1,0,0,0,1717,1719,5,37,0,0,1718,1717,1,0,0,0,1718,1719,
1,0,0,0,1719,1720,1,0,0,0,1720,1721,3,116,58,0,1721,115,1,0,0,0,1722,1736,
5,243,0,0,1723,1736,5,244,0,0,1724,1736,5,245,0,0,1725,1736,5,246,0,0,1726,
1736,5,247,0,0,1727,1736,5,248,0,0,1728,1736,5,249,0,0,1729,1736,5,250,0,
0,1730,1736,5,251,0,0,1731,1736,5,252,0,0,1732,1736,7,16,0,0,1733,1736,5,
255,0,0,1734,1736,5,256,0,0,1735,1722,1,0,0,0,1735,1723,1,0,0,0,1735,1724,
1,0,0,0,1735,1725,1,0,0,0,1735,1726,1,0,0,0,1735,1727,1,0,0,0,1735,1728,
1,0,0,0,1735,1729,1,0,0,0,1735,1730,1,0,0,0,1735,1731,1,0,0,0,1735,1732,
1,0,0,0,1735,1733,1,0,0,0,1735,1734,1,0,0,0,1736,117,1,0,0,0,1737,1738,7,
17,0,0,1738,119,1,0,0,0,1739,1740,7,18,0,0,1740,121,1,0,0,0,1741,1742,7,
19,0,0,1742,123,1,0,0,0,1743,1744,7,20,0,0,1744,125,1,0,0,0,1745,1746,7,
21,0,0,1746,127,1,0,0,0,1747,1756,5,277,0,0,1748,1756,5,27,0,0,1749,1756,
5,271,0,0,1750,1756,5,272,0,0,1751,1756,5,273,0,0,1752,1756,5,274,0,0,1753,
1756,5,275,0,0,1754,1756,3,82,41,0,1755,1747,1,0,0,0,1755,1748,1,0,0,0,1755,
1749,1,0,0,0,1755,1750,1,0,0,0,1755,1751,1,0,0,0,1755,1752,1,0,0,0,1755,
1753,1,0,0,0,1755,1754,1,0,0,0,1756,129,1,0,0,0,1757,1758,7,22,0,0,1758,
131,1,0,0,0,1759,1760,7,23,0,0,1760,133,1,0,0,0,1761,1762,7,24,0,0,1762,
135,1,0,0,0,1763,1770,5,283,0,0,1764,1770,7,25,0,0,1765,1766,5,286,0,0,1766,
1770,5,283,0,0,1767,1768,5,286,0,0,1768,1770,7,25,0,0,1769,1763,1,0,0,0,
1769,1764,1,0,0,0,1769,1765,1,0,0,0,1769,1767,1,0,0,0,1770,137,1,0,0,0,1771,
1777,5,287,0,0,1772,1777,5,288,0,0,1773,1777,7,26,0,0,1774,1777,5,291,0,
0,1775,1777,5,292,0,0,1776,1771,1,0,0,0,1776,1772,1,0,0,0,1776,1773,1,0,
0,0,1776,1774,1,0,0,0,1776,1775,1,0,0,0,1777,139,1,0,0,0,1778,1844,5,293,
0,0,1779,1780,5,294,0,0,1780,1781,5,295,0,0,1781,1844,5,58,0,0,1782,1783,
5,294,0,0,1783,1784,5,295,0,0,1784,1844,5,23,0,0,1785,1844,5,296,0,0,1786,
1787,5,297,0,0,1787,1844,5,58,0,0,1788,1789,5,297,0,0,1789,1844,5,23,0,0,
1790,1844,5,277,0,0,1791,1792,5,62,0,0,1792,1844,5,257,0,0,1793,1794,5,62,
0,0,1794,1844,5,117,0,0,1795,1796,5,62,0,0,1796,1844,5,272,0,0,1797,1798,
5,62,0,0,1798,1844,5,273,0,0,1799,1800,5,276,0,0,1800,1844,5,117,0,0,1801,
1802,5,276,0,0,1802,1844,5,257,0,0,1803,1804,5,276,0,0,1804,1844,5,272,0,
0,1805,1806,5,276,0,0,1806,1844,5,273,0,0,1807,1808,5,298,0,0,1808,1809,
5,12,0,0,1809,1844,5,274,0,0,1810,1811,5,298,0,0,1811,1812,5,12,0,0,1812,
1844,5,275,0,0,1813,1814,5,298,0,0,1814,1815,5,12,0,0,1815,1844,5,271,0,
0,1816,1817,5,299,0,0,1817,1818,5,25,0,0,1818,1844,5,274,0,0,1819,1820,5,
299,0,0,1820,1821,5,25,0,0,1821,1844,5,275,0,0,1822,1823,5,299,0,0,1823,
1824,5,25,0,0,1824,1844,5,271,0,0,1825,1826,5,300,0,0,1826,1844,5,301,0,
0,1827,1828,5,302,0,0,1828,1844,5,257,0,0,1829,1830,5,302,0,0,1830,1844,
5,117,0,0,1831,1832,5,302,0,0,1832,1844,5,272,0,0,1833,1834,5,302,0,0,1834,
1844,5,273,0,0,1835,1836,5,303,0,0,1836,1844,5,304,0,0,1837,1838,5,303,0,
0,1838,1844,5,305,0,0,1839,1840,5,303,0,0,1840,1844,5,58,0,0,1841,1842,5,
303,0,0,1842,1844,5,23,0,0,1843,1778,1,0,0,0,1843,1779,1,0,0,0,1843,1782,
1,0,0,0,1843,1785,1,0,0,0,1843,1786,1,0,0,0,1843,1788,1,0,0,0,1843,1790,
1,0,0,0,1843,1791,1,0,0,0,1843,1793,1,0,0,0,1843,1795,1,0,0,0,1843,1797,
1,0,0,0,1843,1799,1,0,0,0,1843,1801,1,0,0,0,1843,1803,1,0,0,0,1843,1805,
1,0,0,0,1843,1807,1,0,0,0,1843,1810,1,0,0,0,1843,1813,1,0,0,0,1843,1816,
1,0,0,0,1843,1819,1,0,0,0,1843,1822,1,0,0,0,1843,1825,1,0,0,0,1843,1827,
1,0,0,0,1843,1829,1,0,0,0,1843,1831,1,0,0,0,1843,1833,1,0,0,0,1843,1835,
1,0,0,0,1843,1837,1,0,0,0,1843,1839,1,0,0,0,1843,1841,1,0,0,0,1844,141,1,
0,0,0,1845,1849,5,183,0,0,1846,1849,5,306,0,0,1847,1849,3,134,67,0,1848,
1845,1,0,0,0,1848,1846,1,0,0,0,1848,1847,1,0,0,0,1849,143,1,0,0,0,1850,1852,
5,37,0,0,1851,1850,1,0,0,0,1851,1852,1,0,0,0,1852,1853,1,0,0,0,1853,1860,
5,57,0,0,1854,1856,5,37,0,0,1855,1854,1,0,0,0,1855,1856,1,0,0,0,1856,1857,
1,0,0,0,1857,1860,7,27,0,0,1858,1860,5,78,0,0,1859,1851,1,0,0,0,1859,1855,
1,0,0,0,1859,1858,1,0,0,0,1860,145,1,0,0,0,1861,1863,5,37,0,0,1862,1861,
1,0,0,0,1862,1863,1,0,0,0,1863,1864,1,0,0,0,1864,1868,7,28,0,0,1865,1869,
5,310,0,0,1866,1869,5,97,0,0,1867,1869,1,0,0,0,1868,1865,1,0,0,0,1868,1866,
1,0,0,0,1868,1867,1,0,0,0,1869,147,1,0,0,0,1870,1871,7,29,0,0,1871,149,1,
0,0,0,1872,1873,7,30,0,0,1873,151,1,0,0,0,1874,1875,7,31,0,0,1875,153,1,
0,0,0,1876,1877,7,32,0,0,1877,155,1,0,0,0,1878,1879,7,33,0,0,1879,157,1,
0,0,0,1880,1881,5,79,0,0,1881,159,1,0,0,0,1882,1883,7,34,0,0,1883,161,1,
0,0,0,1884,1885,7,35,0,0,1885,163,1,0,0,0,1886,1887,7,36,0,0,1887,165,1,
0,0,0,1888,1889,7,37,0,0,1889,167,1,0,0,0,1890,1891,7,38,0,0,1891,169,1,
0,0,0,153,179,185,197,204,207,218,221,226,233,236,246,249,254,258,268,275,
283,285,295,303,310,315,320,323,326,332,335,340,342,349,353,359,362,366,
373,384,389,394,446,521,543,546,557,560,568,571,580,583,590,599,691,772,
782,789,798,806,822,834,917,930,937,947,953,958,961,967,973,979,985,992,
1002,1008,1020,1031,1090,1096,1104,1116,1120,1123,1128,1135,1142,1160,1163,
1169,1173,1185,1196,1204,1212,1222,1233,1244,1248,1256,1261,1277,1287,1289,
1294,1310,1318,1322,1328,1333,1338,1343,1352,1359,1369,1395,1397,1413,1417,
1428,1443,1451,1455,1460,1463,1466,1470,1477,1483,1490,1496,1499,1504,1520,
1541,1552,1568,1596,1605,1616,1632,1684,1690,1698,1713,1718,1735,1755,1769,
1776,1843,1848,1851,1855,1859,1862,1868];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class HyperTalkParser extends antlr4.Parser {

    static grammarFileName = "HyperTalk.g4";
    static literalNames = [ null, "'on'", "'end'", "'function'", "','", 
                            "'global'", "'return'", "'if'", "'then'", "'else'", 
                            "'repeat'", "'add'", "'to'", "'answer'", "'with'", 
                            "'or'", "'ask'", "'file'", "'beep'", "'choose'", 
                            "'tool'", "'click'", "'at'", "'close'", "'convert'", 
                            "'from'", "'create'", "'menu'", "'delete'", 
                            "'dial'", "'disable'", "'divide'", "'by'", "'do'", 
                            "'domenu'", "'drag'", "'edit'", "'the'", "'script'", 
                            "'enable'", "'exit'", "'hypercard'", "'export'", 
                            "'paint'", "'find'", "'international'", "'marked'", 
                            "'get'", "'go'", "'visual'", "'back'", "'hide'", 
                            "'titlebar'", "'import'", "'lock'", "'screen'", 
                            "'multiply'", "'next'", "'open'", "'pass'", 
                            "'play'", "'pop'", "'push'", "'put'", "'read'", 
                            "'for'", "'until'", "'reset'", "'menubar'", 
                            "'select'", "'empty'", "'text'", "'before'", 
                            "'after'", "'set'", "'send'", "'show'", "'sort'", 
                            "'this'", "'stack'", "'speak'", "'male'", "'female'", 
                            "'neuter'", "'robotic'", "'voice'", "'subtract'", 
                            "'type'", "'commandkey'", "'cmdkey'", "'unlock'", 
                            "'wait'", "'while'", "'write'", "'eof'", "'in a'", 
                            "'new'", "'window'", "'without'", "'dialog'", 
                            "'and'", "'dateitems'", "'date'", "'time'", 
                            "'english'", "'long'", "'abbreviated'", "'abbrev'", 
                            "'abbr'", "'short'", "'ascending'", "'descending'", 
                            "'numeric'", "'datetime'", "'='", "'forever'", 
                            "'times'", "'down'", "'menuitem'", "'part'", 
                            "'me'", "'id'", "'pattern'", "'message'", "'watcher'", 
                            "'variable'", "'not'", "'-'", "'there is a'", 
                            "'there is an'", "'there is no'", "'there is not a'", 
                            "'there is not an'", "'^'", "'mod'", "'div'", 
                            "'/'", "'*'", "'+'", "'&&'", "'&'", "'>='", 
                            "'<='", "'\\u2264'", "'\\u2265'", "'<'", "'>'", 
                            "'contains'", "'is in'", "'is not in'", "'is a'", 
                            "'is an'", "'is not a'", "'is not an'", "'is within'", 
                            "'is not within'", "'is not'", "'is'", "'<>'", 
                            "'\\u2260'", "'('", "')'", "'selection'", "'target'", 
                            "'tempo'", "'field'", "'button'", "'line'", 
                            "'reg'", "'regular'", "'poly'", "'polygon'", 
                            "'round'", "'rect'", "'rectangle'", "'spray'", 
                            "'can'", "'effect'", "'mouse'", "'mouseloc'", 
                            "'result'", "'shiftkey'", "'optionkey'", "'ticks'", 
                            "'mouseclick'", "'number'", "'of'", "'parts'", 
                            "'menus'", "'windows'", "'diskspace'", "'params'", 
                            "'paramcount'", "'speech'", "'voices'", "'stacks'", 
                            "'average'", "'min'", "'max'", "'sum'", "'menuitems'", 
                            "'random'", "'sqrt'", "'trunc'", "'sin'", "'cos'", 
                            "'tan'", "'atan'", "'exp'", "'exp1'", "'exp2'", 
                            "'ln'", "'ln1'", "'log2'", "'abs'", "'chartonum'", 
                            "'numtochar'", "'value'", "'length'", "'param'", 
                            "'annuity'", "'compound'", "'offset'", "'into'", 
                            "'pi'", "'quote'", "'space'", "'tab'", "'formfeed'", 
                            "'linefeed'", "'comma'", "'colon'", "'zero'", 
                            "'one'", "'two'", "'three'", "'four'", "'five'", 
                            "'six'", "'seven'", "'eight'", "'nine'", "'ten'", 
                            "'first'", "'second'", "'third'", "'fourth'", 
                            "'fifth'", "'sixth'", "'seventh'", "'eighth'", 
                            "'ninth'", "'tenth'", "'mid'", "'middle'", "'last'", 
                            "'any'", "'up'", "'integer'", "'point'", "'logical'", 
                            "'boolean'", "'bool'", "'word'", "'chars'", 
                            "'whole'", "'string'", "'selectedtext'", "'selectedchunk'", 
                            "'selectedfield'", "'selectedline'", "'bottom'", 
                            "'left'", "'right'", "'top'", "'center'", "'scroll'", 
                            "'plain'", "'picture'", "'pict'", "'seconds'", 
                            "'secs'", "'sec'", "'fast'", "'slow'", "'slowly'", 
                            "'very'", "'black'", "'card'", "'gray'", "'grey'", 
                            "'inverse'", "'white'", "'dissolve'", "'barn'", 
                            "'door'", "'checkerboard'", "'iris'", "'shrink'", 
                            "'stretch'", "'venetian'", "'blinds'", "'wipe'", 
                            "'zoom'", "'in'", "'out'", "'tick'", "'prev'", 
                            "'previous'", "'msg'", "'box'", "'cards'", "'cds'", 
                            "'cd'", "'background'", "'backgrounds'", "'bkgnd'", 
                            "'bkgnds'", "'bg'", "'bgs'", "'buttons'", "'btn'", 
                            "'btns'", "'fields'", "'fld'", "'flds'", "'character'", 
                            "'characters'", "'char'", "'words'", "'lines'", 
                            "'item'", "'items'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, "ID", "BREAK", 
                             "LITERAL", "INTEGER_LITERAL", "NUMBER_LITERAL", 
                             "STRING_LITERAL", "ALPHA", "DIGIT", "COMMENT", 
                             "NEWLINE", "WHITESPACE", "UNLEXED_CHAR" ];
    static ruleNames = [ "script", "scriptlet", "multilineScriptlet", "handler", 
                         "function_", "handlerName", "parameterList", "statementList", 
                         "statement", "globalStmnt", "returnStmnt", "ifStatement", 
                         "thenStatement", "elseStatement", "repeatStatement", 
                         "messageStatement", "commandStmnt", "remoteNavOption", 
                         "convertible", "conversionFormat", "length", "sortDirection", 
                         "sortChunkType", "sortStyle", "repeatRange", "duration", 
                         "count", "range", "chunk", "menu", "menuItem", 
                         "property", "globalProperty", "partProperty", "part", 
                         "stackPart", "buttonPart", "fieldPart", "cardPart", 
                         "bkgndPart", "windowPart", "listExpression", "expression", 
                         "factor", "container", "musicExpression", "toolExpression", 
                         "effectExpression", "functionCall", "builtInFunc", 
                         "zeroArgFunc", "singleArgFunc", "multiArgFunc", 
                         "literal", "preposition", "constant", "cardinalValue", 
                         "ordinal", "ordinalValue", "mouseState", "modifierKey", 
                         "knownType", "findType", "propertyName", "propertyValue", 
                         "commandName", "picture", "seconds", "speed", "image", 
                         "effect", "timeUnit", "position", "message", "cards", 
                         "card", "background", "button", "field", "stack", 
                         "character", "word", "line", "item", "of" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = HyperTalkParser.ruleNames;
        this.literalNames = HyperTalkParser.literalNames;
        this.symbolicNames = HyperTalkParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 6:
    	    		return this.parameterList_sempred(localctx, predIndex);
    	case 28:
    	    		return this.chunk_sempred(localctx, predIndex);
    	case 36:
    	    		return this.buttonPart_sempred(localctx, predIndex);
    	case 37:
    	    		return this.fieldPart_sempred(localctx, predIndex);
    	case 38:
    	    		return this.cardPart_sempred(localctx, predIndex);
    	case 39:
    	    		return this.bkgndPart_sempred(localctx, predIndex);
    	case 42:
    	    		return this.expression_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    parameterList_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    chunk_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 13);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    buttonPart_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    fieldPart_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    cardPart_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.precpred(this._ctx, 2);
    		case 5:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    bkgndPart_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return this.precpred(this._ctx, 8);
    		case 8:
    			return this.precpred(this._ctx, 7);
    		case 9:
    			return this.precpred(this._ctx, 6);
    		case 10:
    			return this.precpred(this._ctx, 5);
    		case 11:
    			return this.precpred(this._ctx, 4);
    		case 12:
    			return this.precpred(this._ctx, 3);
    		case 13:
    			return this.precpred(this._ctx, 2);
    		case 14:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	script() {
	    let localctx = new ScriptContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, HyperTalkParser.RULE_script);
	    try {
	        this.state = 179;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HyperTalkParser.T__0:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 170;
	            this.handler();
	            this.state = 171;
	            this.script();
	            break;
	        case HyperTalkParser.T__2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 173;
	            this.function_();
	            this.state = 174;
	            this.script();
	            break;
	        case HyperTalkParser.NEWLINE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 176;
	            this.match(HyperTalkParser.NEWLINE);
	            this.state = 177;
	            this.script();
	            break;
	        case HyperTalkParser.EOF:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 178;
	            this.match(HyperTalkParser.EOF);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scriptlet() {
	    let localctx = new ScriptletContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, HyperTalkParser.RULE_scriptlet);
	    try {
	        this.state = 185;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 181;
	            this.statement();
	            this.state = 182;
	            this.match(HyperTalkParser.EOF);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 184;
	            this.multilineScriptlet();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multilineScriptlet() {
	    let localctx = new MultilineScriptletContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, HyperTalkParser.RULE_multilineScriptlet);
	    try {
	        this.state = 197;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 187;
	            this.statement();
	            this.state = 188;
	            this.match(HyperTalkParser.NEWLINE);
	            this.state = 189;
	            this.multilineScriptlet();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 191;
	            this.statement();
	            this.state = 192;
	            this.match(HyperTalkParser.EOF);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 194;
	            this.match(HyperTalkParser.NEWLINE);
	            this.state = 195;
	            this.multilineScriptlet();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 196;
	            this.match(HyperTalkParser.EOF);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handler() {
	    let localctx = new HandlerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, HyperTalkParser.RULE_handler);
	    var _la = 0; // Token type
	    try {
	        this.state = 226;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 199;
	            this.match(HyperTalkParser.T__0);
	            this.state = 200;
	            this.handlerName();
	            this.state = 202; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 201;
	                this.match(HyperTalkParser.NEWLINE);
	                this.state = 204; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===HyperTalkParser.NEWLINE);
	            this.state = 207;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << HyperTalkParser.T__4) | (1 << HyperTalkParser.T__5) | (1 << HyperTalkParser.T__6) | (1 << HyperTalkParser.T__9) | (1 << HyperTalkParser.T__10) | (1 << HyperTalkParser.T__12) | (1 << HyperTalkParser.T__15) | (1 << HyperTalkParser.T__17) | (1 << HyperTalkParser.T__18) | (1 << HyperTalkParser.T__19) | (1 << HyperTalkParser.T__20) | (1 << HyperTalkParser.T__22) | (1 << HyperTalkParser.T__23) | (1 << HyperTalkParser.T__25) | (1 << HyperTalkParser.T__26) | (1 << HyperTalkParser.T__27) | (1 << HyperTalkParser.T__28) | (1 << HyperTalkParser.T__29) | (1 << HyperTalkParser.T__30))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (HyperTalkParser.T__32 - 33)) | (1 << (HyperTalkParser.T__33 - 33)) | (1 << (HyperTalkParser.T__34 - 33)) | (1 << (HyperTalkParser.T__35 - 33)) | (1 << (HyperTalkParser.T__36 - 33)) | (1 << (HyperTalkParser.T__37 - 33)) | (1 << (HyperTalkParser.T__38 - 33)) | (1 << (HyperTalkParser.T__39 - 33)) | (1 << (HyperTalkParser.T__41 - 33)) | (1 << (HyperTalkParser.T__43 - 33)) | (1 << (HyperTalkParser.T__45 - 33)) | (1 << (HyperTalkParser.T__46 - 33)) | (1 << (HyperTalkParser.T__47 - 33)) | (1 << (HyperTalkParser.T__48 - 33)) | (1 << (HyperTalkParser.T__50 - 33)) | (1 << (HyperTalkParser.T__52 - 33)) | (1 << (HyperTalkParser.T__53 - 33)) | (1 << (HyperTalkParser.T__55 - 33)) | (1 << (HyperTalkParser.T__56 - 33)) | (1 << (HyperTalkParser.T__57 - 33)) | (1 << (HyperTalkParser.T__58 - 33)) | (1 << (HyperTalkParser.T__59 - 33)) | (1 << (HyperTalkParser.T__60 - 33)) | (1 << (HyperTalkParser.T__61 - 33)) | (1 << (HyperTalkParser.T__62 - 33)) | (1 << (HyperTalkParser.T__63 - 33)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (HyperTalkParser.T__66 - 67)) | (1 << (HyperTalkParser.T__68 - 67)) | (1 << (HyperTalkParser.T__69 - 67)) | (1 << (HyperTalkParser.T__73 - 67)) | (1 << (HyperTalkParser.T__74 - 67)) | (1 << (HyperTalkParser.T__75 - 67)) | (1 << (HyperTalkParser.T__76 - 67)) | (1 << (HyperTalkParser.T__77 - 67)) | (1 << (HyperTalkParser.T__78 - 67)) | (1 << (HyperTalkParser.T__79 - 67)) | (1 << (HyperTalkParser.T__85 - 67)) | (1 << (HyperTalkParser.T__86 - 67)) | (1 << (HyperTalkParser.T__87 - 67)) | (1 << (HyperTalkParser.T__88 - 67)) | (1 << (HyperTalkParser.T__89 - 67)) | (1 << (HyperTalkParser.T__90 - 67)) | (1 << (HyperTalkParser.T__92 - 67)) | (1 << (HyperTalkParser.T__96 - 67)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (HyperTalkParser.T__101 - 102)) | (1 << (HyperTalkParser.T__103 - 102)) | (1 << (HyperTalkParser.T__104 - 102)) | (1 << (HyperTalkParser.T__105 - 102)) | (1 << (HyperTalkParser.T__106 - 102)) | (1 << (HyperTalkParser.T__107 - 102)) | (1 << (HyperTalkParser.T__108 - 102)) | (1 << (HyperTalkParser.T__116 - 102)) | (1 << (HyperTalkParser.T__117 - 102)) | (1 << (HyperTalkParser.T__119 - 102)) | (1 << (HyperTalkParser.T__120 - 102)) | (1 << (HyperTalkParser.T__121 - 102)) | (1 << (HyperTalkParser.T__122 - 102)) | (1 << (HyperTalkParser.T__124 - 102)) | (1 << (HyperTalkParser.T__125 - 102)) | (1 << (HyperTalkParser.T__126 - 102)) | (1 << (HyperTalkParser.T__127 - 102)) | (1 << (HyperTalkParser.T__128 - 102)) | (1 << (HyperTalkParser.T__129 - 102)) | (1 << (HyperTalkParser.T__130 - 102)) | (1 << (HyperTalkParser.T__131 - 102)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (HyperTalkParser.T__159 - 160)) | (1 << (HyperTalkParser.T__161 - 160)) | (1 << (HyperTalkParser.T__162 - 160)) | (1 << (HyperTalkParser.T__164 - 160)) | (1 << (HyperTalkParser.T__165 - 160)) | (1 << (HyperTalkParser.T__166 - 160)) | (1 << (HyperTalkParser.T__172 - 160)) | (1 << (HyperTalkParser.T__173 - 160)) | (1 << (HyperTalkParser.T__176 - 160)) | (1 << (HyperTalkParser.T__180 - 160)) | (1 << (HyperTalkParser.T__181 - 160)) | (1 << (HyperTalkParser.T__184 - 160)) | (1 << (HyperTalkParser.T__189 - 160)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (HyperTalkParser.T__195 - 196)) | (1 << (HyperTalkParser.T__196 - 196)) | (1 << (HyperTalkParser.T__197 - 196)) | (1 << (HyperTalkParser.T__198 - 196)) | (1 << (HyperTalkParser.T__200 - 196)) | (1 << (HyperTalkParser.T__201 - 196)) | (1 << (HyperTalkParser.T__202 - 196)) | (1 << (HyperTalkParser.T__203 - 196)) | (1 << (HyperTalkParser.T__204 - 196)) | (1 << (HyperTalkParser.T__205 - 196)) | (1 << (HyperTalkParser.T__206 - 196)) | (1 << (HyperTalkParser.T__207 - 196)) | (1 << (HyperTalkParser.T__208 - 196)) | (1 << (HyperTalkParser.T__209 - 196)) | (1 << (HyperTalkParser.T__210 - 196)) | (1 << (HyperTalkParser.T__211 - 196)) | (1 << (HyperTalkParser.T__212 - 196)) | (1 << (HyperTalkParser.T__213 - 196)) | (1 << (HyperTalkParser.T__214 - 196)) | (1 << (HyperTalkParser.T__215 - 196)) | (1 << (HyperTalkParser.T__216 - 196)) | (1 << (HyperTalkParser.T__217 - 196)) | (1 << (HyperTalkParser.T__218 - 196)) | (1 << (HyperTalkParser.T__219 - 196)) | (1 << (HyperTalkParser.T__220 - 196)) | (1 << (HyperTalkParser.T__221 - 196)) | (1 << (HyperTalkParser.T__223 - 196)) | (1 << (HyperTalkParser.T__224 - 196)) | (1 << (HyperTalkParser.T__225 - 196)) | (1 << (HyperTalkParser.T__226 - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (HyperTalkParser.T__227 - 228)) | (1 << (HyperTalkParser.T__228 - 228)) | (1 << (HyperTalkParser.T__229 - 228)) | (1 << (HyperTalkParser.T__230 - 228)) | (1 << (HyperTalkParser.T__231 - 228)) | (1 << (HyperTalkParser.T__232 - 228)) | (1 << (HyperTalkParser.T__233 - 228)) | (1 << (HyperTalkParser.T__234 - 228)) | (1 << (HyperTalkParser.T__235 - 228)) | (1 << (HyperTalkParser.T__236 - 228)) | (1 << (HyperTalkParser.T__237 - 228)) | (1 << (HyperTalkParser.T__238 - 228)) | (1 << (HyperTalkParser.T__239 - 228)) | (1 << (HyperTalkParser.T__240 - 228)) | (1 << (HyperTalkParser.T__241 - 228)) | (1 << (HyperTalkParser.T__242 - 228)) | (1 << (HyperTalkParser.T__243 - 228)) | (1 << (HyperTalkParser.T__244 - 228)) | (1 << (HyperTalkParser.T__245 - 228)) | (1 << (HyperTalkParser.T__246 - 228)) | (1 << (HyperTalkParser.T__247 - 228)) | (1 << (HyperTalkParser.T__248 - 228)) | (1 << (HyperTalkParser.T__249 - 228)) | (1 << (HyperTalkParser.T__250 - 228)) | (1 << (HyperTalkParser.T__251 - 228)) | (1 << (HyperTalkParser.T__252 - 228)) | (1 << (HyperTalkParser.T__253 - 228)) | (1 << (HyperTalkParser.T__254 - 228)) | (1 << (HyperTalkParser.T__255 - 228)) | (1 << (HyperTalkParser.T__256 - 228)) | (1 << (HyperTalkParser.T__257 - 228)) | (1 << (HyperTalkParser.T__258 - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (HyperTalkParser.T__259 - 260)) | (1 << (HyperTalkParser.T__260 - 260)) | (1 << (HyperTalkParser.T__261 - 260)) | (1 << (HyperTalkParser.T__262 - 260)) | (1 << (HyperTalkParser.T__263 - 260)) | (1 << (HyperTalkParser.T__264 - 260)) | (1 << (HyperTalkParser.T__265 - 260)) | (1 << (HyperTalkParser.T__266 - 260)) | (1 << (HyperTalkParser.T__267 - 260)) | (1 << (HyperTalkParser.T__268 - 260)) | (1 << (HyperTalkParser.T__269 - 260)) | (1 << (HyperTalkParser.T__270 - 260)) | (1 << (HyperTalkParser.T__271 - 260)) | (1 << (HyperTalkParser.T__272 - 260)) | (1 << (HyperTalkParser.T__273 - 260)) | (1 << (HyperTalkParser.T__274 - 260)) | (1 << (HyperTalkParser.T__275 - 260)) | (1 << (HyperTalkParser.T__276 - 260)) | (1 << (HyperTalkParser.T__287 - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (HyperTalkParser.T__292 - 293)) | (1 << (HyperTalkParser.T__293 - 293)) | (1 << (HyperTalkParser.T__295 - 293)) | (1 << (HyperTalkParser.T__296 - 293)) | (1 << (HyperTalkParser.T__297 - 293)) | (1 << (HyperTalkParser.T__298 - 293)) | (1 << (HyperTalkParser.T__299 - 293)) | (1 << (HyperTalkParser.T__301 - 293)) | (1 << (HyperTalkParser.T__302 - 293)) | (1 << (HyperTalkParser.T__306 - 293)) | (1 << (HyperTalkParser.T__307 - 293)) | (1 << (HyperTalkParser.T__308 - 293)) | (1 << (HyperTalkParser.T__312 - 293)) | (1 << (HyperTalkParser.T__313 - 293)) | (1 << (HyperTalkParser.T__314 - 293)) | (1 << (HyperTalkParser.T__315 - 293)) | (1 << (HyperTalkParser.T__316 - 293)) | (1 << (HyperTalkParser.T__317 - 293)) | (1 << (HyperTalkParser.T__318 - 293)) | (1 << (HyperTalkParser.T__319 - 293)) | (1 << (HyperTalkParser.T__320 - 293)) | (1 << (HyperTalkParser.T__321 - 293)) | (1 << (HyperTalkParser.T__322 - 293)) | (1 << (HyperTalkParser.T__323 - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (HyperTalkParser.T__324 - 325)) | (1 << (HyperTalkParser.T__325 - 325)) | (1 << (HyperTalkParser.T__326 - 325)) | (1 << (HyperTalkParser.T__327 - 325)) | (1 << (HyperTalkParser.T__328 - 325)) | (1 << (HyperTalkParser.T__329 - 325)) | (1 << (HyperTalkParser.T__330 - 325)) | (1 << (HyperTalkParser.T__331 - 325)) | (1 << (HyperTalkParser.ID - 325)) | (1 << (HyperTalkParser.LITERAL - 325)))) !== 0)) {
	                this.state = 206;
	                this.statementList();
	            }

	            this.state = 209;
	            this.match(HyperTalkParser.T__1);
	            this.state = 210;
	            this.handlerName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 212;
	            this.match(HyperTalkParser.T__0);
	            this.state = 213;
	            this.handlerName();
	            this.state = 214;
	            this.parameterList(0);
	            this.state = 216; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 215;
	                this.match(HyperTalkParser.NEWLINE);
	                this.state = 218; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===HyperTalkParser.NEWLINE);
	            this.state = 221;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << HyperTalkParser.T__4) | (1 << HyperTalkParser.T__5) | (1 << HyperTalkParser.T__6) | (1 << HyperTalkParser.T__9) | (1 << HyperTalkParser.T__10) | (1 << HyperTalkParser.T__12) | (1 << HyperTalkParser.T__15) | (1 << HyperTalkParser.T__17) | (1 << HyperTalkParser.T__18) | (1 << HyperTalkParser.T__19) | (1 << HyperTalkParser.T__20) | (1 << HyperTalkParser.T__22) | (1 << HyperTalkParser.T__23) | (1 << HyperTalkParser.T__25) | (1 << HyperTalkParser.T__26) | (1 << HyperTalkParser.T__27) | (1 << HyperTalkParser.T__28) | (1 << HyperTalkParser.T__29) | (1 << HyperTalkParser.T__30))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (HyperTalkParser.T__32 - 33)) | (1 << (HyperTalkParser.T__33 - 33)) | (1 << (HyperTalkParser.T__34 - 33)) | (1 << (HyperTalkParser.T__35 - 33)) | (1 << (HyperTalkParser.T__36 - 33)) | (1 << (HyperTalkParser.T__37 - 33)) | (1 << (HyperTalkParser.T__38 - 33)) | (1 << (HyperTalkParser.T__39 - 33)) | (1 << (HyperTalkParser.T__41 - 33)) | (1 << (HyperTalkParser.T__43 - 33)) | (1 << (HyperTalkParser.T__45 - 33)) | (1 << (HyperTalkParser.T__46 - 33)) | (1 << (HyperTalkParser.T__47 - 33)) | (1 << (HyperTalkParser.T__48 - 33)) | (1 << (HyperTalkParser.T__50 - 33)) | (1 << (HyperTalkParser.T__52 - 33)) | (1 << (HyperTalkParser.T__53 - 33)) | (1 << (HyperTalkParser.T__55 - 33)) | (1 << (HyperTalkParser.T__56 - 33)) | (1 << (HyperTalkParser.T__57 - 33)) | (1 << (HyperTalkParser.T__58 - 33)) | (1 << (HyperTalkParser.T__59 - 33)) | (1 << (HyperTalkParser.T__60 - 33)) | (1 << (HyperTalkParser.T__61 - 33)) | (1 << (HyperTalkParser.T__62 - 33)) | (1 << (HyperTalkParser.T__63 - 33)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (HyperTalkParser.T__66 - 67)) | (1 << (HyperTalkParser.T__68 - 67)) | (1 << (HyperTalkParser.T__69 - 67)) | (1 << (HyperTalkParser.T__73 - 67)) | (1 << (HyperTalkParser.T__74 - 67)) | (1 << (HyperTalkParser.T__75 - 67)) | (1 << (HyperTalkParser.T__76 - 67)) | (1 << (HyperTalkParser.T__77 - 67)) | (1 << (HyperTalkParser.T__78 - 67)) | (1 << (HyperTalkParser.T__79 - 67)) | (1 << (HyperTalkParser.T__85 - 67)) | (1 << (HyperTalkParser.T__86 - 67)) | (1 << (HyperTalkParser.T__87 - 67)) | (1 << (HyperTalkParser.T__88 - 67)) | (1 << (HyperTalkParser.T__89 - 67)) | (1 << (HyperTalkParser.T__90 - 67)) | (1 << (HyperTalkParser.T__92 - 67)) | (1 << (HyperTalkParser.T__96 - 67)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (HyperTalkParser.T__101 - 102)) | (1 << (HyperTalkParser.T__103 - 102)) | (1 << (HyperTalkParser.T__104 - 102)) | (1 << (HyperTalkParser.T__105 - 102)) | (1 << (HyperTalkParser.T__106 - 102)) | (1 << (HyperTalkParser.T__107 - 102)) | (1 << (HyperTalkParser.T__108 - 102)) | (1 << (HyperTalkParser.T__116 - 102)) | (1 << (HyperTalkParser.T__117 - 102)) | (1 << (HyperTalkParser.T__119 - 102)) | (1 << (HyperTalkParser.T__120 - 102)) | (1 << (HyperTalkParser.T__121 - 102)) | (1 << (HyperTalkParser.T__122 - 102)) | (1 << (HyperTalkParser.T__124 - 102)) | (1 << (HyperTalkParser.T__125 - 102)) | (1 << (HyperTalkParser.T__126 - 102)) | (1 << (HyperTalkParser.T__127 - 102)) | (1 << (HyperTalkParser.T__128 - 102)) | (1 << (HyperTalkParser.T__129 - 102)) | (1 << (HyperTalkParser.T__130 - 102)) | (1 << (HyperTalkParser.T__131 - 102)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (HyperTalkParser.T__159 - 160)) | (1 << (HyperTalkParser.T__161 - 160)) | (1 << (HyperTalkParser.T__162 - 160)) | (1 << (HyperTalkParser.T__164 - 160)) | (1 << (HyperTalkParser.T__165 - 160)) | (1 << (HyperTalkParser.T__166 - 160)) | (1 << (HyperTalkParser.T__172 - 160)) | (1 << (HyperTalkParser.T__173 - 160)) | (1 << (HyperTalkParser.T__176 - 160)) | (1 << (HyperTalkParser.T__180 - 160)) | (1 << (HyperTalkParser.T__181 - 160)) | (1 << (HyperTalkParser.T__184 - 160)) | (1 << (HyperTalkParser.T__189 - 160)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (HyperTalkParser.T__195 - 196)) | (1 << (HyperTalkParser.T__196 - 196)) | (1 << (HyperTalkParser.T__197 - 196)) | (1 << (HyperTalkParser.T__198 - 196)) | (1 << (HyperTalkParser.T__200 - 196)) | (1 << (HyperTalkParser.T__201 - 196)) | (1 << (HyperTalkParser.T__202 - 196)) | (1 << (HyperTalkParser.T__203 - 196)) | (1 << (HyperTalkParser.T__204 - 196)) | (1 << (HyperTalkParser.T__205 - 196)) | (1 << (HyperTalkParser.T__206 - 196)) | (1 << (HyperTalkParser.T__207 - 196)) | (1 << (HyperTalkParser.T__208 - 196)) | (1 << (HyperTalkParser.T__209 - 196)) | (1 << (HyperTalkParser.T__210 - 196)) | (1 << (HyperTalkParser.T__211 - 196)) | (1 << (HyperTalkParser.T__212 - 196)) | (1 << (HyperTalkParser.T__213 - 196)) | (1 << (HyperTalkParser.T__214 - 196)) | (1 << (HyperTalkParser.T__215 - 196)) | (1 << (HyperTalkParser.T__216 - 196)) | (1 << (HyperTalkParser.T__217 - 196)) | (1 << (HyperTalkParser.T__218 - 196)) | (1 << (HyperTalkParser.T__219 - 196)) | (1 << (HyperTalkParser.T__220 - 196)) | (1 << (HyperTalkParser.T__221 - 196)) | (1 << (HyperTalkParser.T__223 - 196)) | (1 << (HyperTalkParser.T__224 - 196)) | (1 << (HyperTalkParser.T__225 - 196)) | (1 << (HyperTalkParser.T__226 - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (HyperTalkParser.T__227 - 228)) | (1 << (HyperTalkParser.T__228 - 228)) | (1 << (HyperTalkParser.T__229 - 228)) | (1 << (HyperTalkParser.T__230 - 228)) | (1 << (HyperTalkParser.T__231 - 228)) | (1 << (HyperTalkParser.T__232 - 228)) | (1 << (HyperTalkParser.T__233 - 228)) | (1 << (HyperTalkParser.T__234 - 228)) | (1 << (HyperTalkParser.T__235 - 228)) | (1 << (HyperTalkParser.T__236 - 228)) | (1 << (HyperTalkParser.T__237 - 228)) | (1 << (HyperTalkParser.T__238 - 228)) | (1 << (HyperTalkParser.T__239 - 228)) | (1 << (HyperTalkParser.T__240 - 228)) | (1 << (HyperTalkParser.T__241 - 228)) | (1 << (HyperTalkParser.T__242 - 228)) | (1 << (HyperTalkParser.T__243 - 228)) | (1 << (HyperTalkParser.T__244 - 228)) | (1 << (HyperTalkParser.T__245 - 228)) | (1 << (HyperTalkParser.T__246 - 228)) | (1 << (HyperTalkParser.T__247 - 228)) | (1 << (HyperTalkParser.T__248 - 228)) | (1 << (HyperTalkParser.T__249 - 228)) | (1 << (HyperTalkParser.T__250 - 228)) | (1 << (HyperTalkParser.T__251 - 228)) | (1 << (HyperTalkParser.T__252 - 228)) | (1 << (HyperTalkParser.T__253 - 228)) | (1 << (HyperTalkParser.T__254 - 228)) | (1 << (HyperTalkParser.T__255 - 228)) | (1 << (HyperTalkParser.T__256 - 228)) | (1 << (HyperTalkParser.T__257 - 228)) | (1 << (HyperTalkParser.T__258 - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (HyperTalkParser.T__259 - 260)) | (1 << (HyperTalkParser.T__260 - 260)) | (1 << (HyperTalkParser.T__261 - 260)) | (1 << (HyperTalkParser.T__262 - 260)) | (1 << (HyperTalkParser.T__263 - 260)) | (1 << (HyperTalkParser.T__264 - 260)) | (1 << (HyperTalkParser.T__265 - 260)) | (1 << (HyperTalkParser.T__266 - 260)) | (1 << (HyperTalkParser.T__267 - 260)) | (1 << (HyperTalkParser.T__268 - 260)) | (1 << (HyperTalkParser.T__269 - 260)) | (1 << (HyperTalkParser.T__270 - 260)) | (1 << (HyperTalkParser.T__271 - 260)) | (1 << (HyperTalkParser.T__272 - 260)) | (1 << (HyperTalkParser.T__273 - 260)) | (1 << (HyperTalkParser.T__274 - 260)) | (1 << (HyperTalkParser.T__275 - 260)) | (1 << (HyperTalkParser.T__276 - 260)) | (1 << (HyperTalkParser.T__287 - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (HyperTalkParser.T__292 - 293)) | (1 << (HyperTalkParser.T__293 - 293)) | (1 << (HyperTalkParser.T__295 - 293)) | (1 << (HyperTalkParser.T__296 - 293)) | (1 << (HyperTalkParser.T__297 - 293)) | (1 << (HyperTalkParser.T__298 - 293)) | (1 << (HyperTalkParser.T__299 - 293)) | (1 << (HyperTalkParser.T__301 - 293)) | (1 << (HyperTalkParser.T__302 - 293)) | (1 << (HyperTalkParser.T__306 - 293)) | (1 << (HyperTalkParser.T__307 - 293)) | (1 << (HyperTalkParser.T__308 - 293)) | (1 << (HyperTalkParser.T__312 - 293)) | (1 << (HyperTalkParser.T__313 - 293)) | (1 << (HyperTalkParser.T__314 - 293)) | (1 << (HyperTalkParser.T__315 - 293)) | (1 << (HyperTalkParser.T__316 - 293)) | (1 << (HyperTalkParser.T__317 - 293)) | (1 << (HyperTalkParser.T__318 - 293)) | (1 << (HyperTalkParser.T__319 - 293)) | (1 << (HyperTalkParser.T__320 - 293)) | (1 << (HyperTalkParser.T__321 - 293)) | (1 << (HyperTalkParser.T__322 - 293)) | (1 << (HyperTalkParser.T__323 - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (HyperTalkParser.T__324 - 325)) | (1 << (HyperTalkParser.T__325 - 325)) | (1 << (HyperTalkParser.T__326 - 325)) | (1 << (HyperTalkParser.T__327 - 325)) | (1 << (HyperTalkParser.T__328 - 325)) | (1 << (HyperTalkParser.T__329 - 325)) | (1 << (HyperTalkParser.T__330 - 325)) | (1 << (HyperTalkParser.T__331 - 325)) | (1 << (HyperTalkParser.ID - 325)) | (1 << (HyperTalkParser.LITERAL - 325)))) !== 0)) {
	                this.state = 220;
	                this.statementList();
	            }

	            this.state = 223;
	            this.match(HyperTalkParser.T__1);
	            this.state = 224;
	            this.handlerName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_() {
	    let localctx = new Function_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, HyperTalkParser.RULE_function_);
	    var _la = 0; // Token type
	    try {
	        this.state = 254;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 228;
	            this.match(HyperTalkParser.T__2);
	            this.state = 229;
	            this.match(HyperTalkParser.ID);
	            this.state = 231; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 230;
	                this.match(HyperTalkParser.NEWLINE);
	                this.state = 233; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===HyperTalkParser.NEWLINE);
	            this.state = 236;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << HyperTalkParser.T__4) | (1 << HyperTalkParser.T__5) | (1 << HyperTalkParser.T__6) | (1 << HyperTalkParser.T__9) | (1 << HyperTalkParser.T__10) | (1 << HyperTalkParser.T__12) | (1 << HyperTalkParser.T__15) | (1 << HyperTalkParser.T__17) | (1 << HyperTalkParser.T__18) | (1 << HyperTalkParser.T__19) | (1 << HyperTalkParser.T__20) | (1 << HyperTalkParser.T__22) | (1 << HyperTalkParser.T__23) | (1 << HyperTalkParser.T__25) | (1 << HyperTalkParser.T__26) | (1 << HyperTalkParser.T__27) | (1 << HyperTalkParser.T__28) | (1 << HyperTalkParser.T__29) | (1 << HyperTalkParser.T__30))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (HyperTalkParser.T__32 - 33)) | (1 << (HyperTalkParser.T__33 - 33)) | (1 << (HyperTalkParser.T__34 - 33)) | (1 << (HyperTalkParser.T__35 - 33)) | (1 << (HyperTalkParser.T__36 - 33)) | (1 << (HyperTalkParser.T__37 - 33)) | (1 << (HyperTalkParser.T__38 - 33)) | (1 << (HyperTalkParser.T__39 - 33)) | (1 << (HyperTalkParser.T__41 - 33)) | (1 << (HyperTalkParser.T__43 - 33)) | (1 << (HyperTalkParser.T__45 - 33)) | (1 << (HyperTalkParser.T__46 - 33)) | (1 << (HyperTalkParser.T__47 - 33)) | (1 << (HyperTalkParser.T__48 - 33)) | (1 << (HyperTalkParser.T__50 - 33)) | (1 << (HyperTalkParser.T__52 - 33)) | (1 << (HyperTalkParser.T__53 - 33)) | (1 << (HyperTalkParser.T__55 - 33)) | (1 << (HyperTalkParser.T__56 - 33)) | (1 << (HyperTalkParser.T__57 - 33)) | (1 << (HyperTalkParser.T__58 - 33)) | (1 << (HyperTalkParser.T__59 - 33)) | (1 << (HyperTalkParser.T__60 - 33)) | (1 << (HyperTalkParser.T__61 - 33)) | (1 << (HyperTalkParser.T__62 - 33)) | (1 << (HyperTalkParser.T__63 - 33)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (HyperTalkParser.T__66 - 67)) | (1 << (HyperTalkParser.T__68 - 67)) | (1 << (HyperTalkParser.T__69 - 67)) | (1 << (HyperTalkParser.T__73 - 67)) | (1 << (HyperTalkParser.T__74 - 67)) | (1 << (HyperTalkParser.T__75 - 67)) | (1 << (HyperTalkParser.T__76 - 67)) | (1 << (HyperTalkParser.T__77 - 67)) | (1 << (HyperTalkParser.T__78 - 67)) | (1 << (HyperTalkParser.T__79 - 67)) | (1 << (HyperTalkParser.T__85 - 67)) | (1 << (HyperTalkParser.T__86 - 67)) | (1 << (HyperTalkParser.T__87 - 67)) | (1 << (HyperTalkParser.T__88 - 67)) | (1 << (HyperTalkParser.T__89 - 67)) | (1 << (HyperTalkParser.T__90 - 67)) | (1 << (HyperTalkParser.T__92 - 67)) | (1 << (HyperTalkParser.T__96 - 67)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (HyperTalkParser.T__101 - 102)) | (1 << (HyperTalkParser.T__103 - 102)) | (1 << (HyperTalkParser.T__104 - 102)) | (1 << (HyperTalkParser.T__105 - 102)) | (1 << (HyperTalkParser.T__106 - 102)) | (1 << (HyperTalkParser.T__107 - 102)) | (1 << (HyperTalkParser.T__108 - 102)) | (1 << (HyperTalkParser.T__116 - 102)) | (1 << (HyperTalkParser.T__117 - 102)) | (1 << (HyperTalkParser.T__119 - 102)) | (1 << (HyperTalkParser.T__120 - 102)) | (1 << (HyperTalkParser.T__121 - 102)) | (1 << (HyperTalkParser.T__122 - 102)) | (1 << (HyperTalkParser.T__124 - 102)) | (1 << (HyperTalkParser.T__125 - 102)) | (1 << (HyperTalkParser.T__126 - 102)) | (1 << (HyperTalkParser.T__127 - 102)) | (1 << (HyperTalkParser.T__128 - 102)) | (1 << (HyperTalkParser.T__129 - 102)) | (1 << (HyperTalkParser.T__130 - 102)) | (1 << (HyperTalkParser.T__131 - 102)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (HyperTalkParser.T__159 - 160)) | (1 << (HyperTalkParser.T__161 - 160)) | (1 << (HyperTalkParser.T__162 - 160)) | (1 << (HyperTalkParser.T__164 - 160)) | (1 << (HyperTalkParser.T__165 - 160)) | (1 << (HyperTalkParser.T__166 - 160)) | (1 << (HyperTalkParser.T__172 - 160)) | (1 << (HyperTalkParser.T__173 - 160)) | (1 << (HyperTalkParser.T__176 - 160)) | (1 << (HyperTalkParser.T__180 - 160)) | (1 << (HyperTalkParser.T__181 - 160)) | (1 << (HyperTalkParser.T__184 - 160)) | (1 << (HyperTalkParser.T__189 - 160)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (HyperTalkParser.T__195 - 196)) | (1 << (HyperTalkParser.T__196 - 196)) | (1 << (HyperTalkParser.T__197 - 196)) | (1 << (HyperTalkParser.T__198 - 196)) | (1 << (HyperTalkParser.T__200 - 196)) | (1 << (HyperTalkParser.T__201 - 196)) | (1 << (HyperTalkParser.T__202 - 196)) | (1 << (HyperTalkParser.T__203 - 196)) | (1 << (HyperTalkParser.T__204 - 196)) | (1 << (HyperTalkParser.T__205 - 196)) | (1 << (HyperTalkParser.T__206 - 196)) | (1 << (HyperTalkParser.T__207 - 196)) | (1 << (HyperTalkParser.T__208 - 196)) | (1 << (HyperTalkParser.T__209 - 196)) | (1 << (HyperTalkParser.T__210 - 196)) | (1 << (HyperTalkParser.T__211 - 196)) | (1 << (HyperTalkParser.T__212 - 196)) | (1 << (HyperTalkParser.T__213 - 196)) | (1 << (HyperTalkParser.T__214 - 196)) | (1 << (HyperTalkParser.T__215 - 196)) | (1 << (HyperTalkParser.T__216 - 196)) | (1 << (HyperTalkParser.T__217 - 196)) | (1 << (HyperTalkParser.T__218 - 196)) | (1 << (HyperTalkParser.T__219 - 196)) | (1 << (HyperTalkParser.T__220 - 196)) | (1 << (HyperTalkParser.T__221 - 196)) | (1 << (HyperTalkParser.T__223 - 196)) | (1 << (HyperTalkParser.T__224 - 196)) | (1 << (HyperTalkParser.T__225 - 196)) | (1 << (HyperTalkParser.T__226 - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (HyperTalkParser.T__227 - 228)) | (1 << (HyperTalkParser.T__228 - 228)) | (1 << (HyperTalkParser.T__229 - 228)) | (1 << (HyperTalkParser.T__230 - 228)) | (1 << (HyperTalkParser.T__231 - 228)) | (1 << (HyperTalkParser.T__232 - 228)) | (1 << (HyperTalkParser.T__233 - 228)) | (1 << (HyperTalkParser.T__234 - 228)) | (1 << (HyperTalkParser.T__235 - 228)) | (1 << (HyperTalkParser.T__236 - 228)) | (1 << (HyperTalkParser.T__237 - 228)) | (1 << (HyperTalkParser.T__238 - 228)) | (1 << (HyperTalkParser.T__239 - 228)) | (1 << (HyperTalkParser.T__240 - 228)) | (1 << (HyperTalkParser.T__241 - 228)) | (1 << (HyperTalkParser.T__242 - 228)) | (1 << (HyperTalkParser.T__243 - 228)) | (1 << (HyperTalkParser.T__244 - 228)) | (1 << (HyperTalkParser.T__245 - 228)) | (1 << (HyperTalkParser.T__246 - 228)) | (1 << (HyperTalkParser.T__247 - 228)) | (1 << (HyperTalkParser.T__248 - 228)) | (1 << (HyperTalkParser.T__249 - 228)) | (1 << (HyperTalkParser.T__250 - 228)) | (1 << (HyperTalkParser.T__251 - 228)) | (1 << (HyperTalkParser.T__252 - 228)) | (1 << (HyperTalkParser.T__253 - 228)) | (1 << (HyperTalkParser.T__254 - 228)) | (1 << (HyperTalkParser.T__255 - 228)) | (1 << (HyperTalkParser.T__256 - 228)) | (1 << (HyperTalkParser.T__257 - 228)) | (1 << (HyperTalkParser.T__258 - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (HyperTalkParser.T__259 - 260)) | (1 << (HyperTalkParser.T__260 - 260)) | (1 << (HyperTalkParser.T__261 - 260)) | (1 << (HyperTalkParser.T__262 - 260)) | (1 << (HyperTalkParser.T__263 - 260)) | (1 << (HyperTalkParser.T__264 - 260)) | (1 << (HyperTalkParser.T__265 - 260)) | (1 << (HyperTalkParser.T__266 - 260)) | (1 << (HyperTalkParser.T__267 - 260)) | (1 << (HyperTalkParser.T__268 - 260)) | (1 << (HyperTalkParser.T__269 - 260)) | (1 << (HyperTalkParser.T__270 - 260)) | (1 << (HyperTalkParser.T__271 - 260)) | (1 << (HyperTalkParser.T__272 - 260)) | (1 << (HyperTalkParser.T__273 - 260)) | (1 << (HyperTalkParser.T__274 - 260)) | (1 << (HyperTalkParser.T__275 - 260)) | (1 << (HyperTalkParser.T__276 - 260)) | (1 << (HyperTalkParser.T__287 - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (HyperTalkParser.T__292 - 293)) | (1 << (HyperTalkParser.T__293 - 293)) | (1 << (HyperTalkParser.T__295 - 293)) | (1 << (HyperTalkParser.T__296 - 293)) | (1 << (HyperTalkParser.T__297 - 293)) | (1 << (HyperTalkParser.T__298 - 293)) | (1 << (HyperTalkParser.T__299 - 293)) | (1 << (HyperTalkParser.T__301 - 293)) | (1 << (HyperTalkParser.T__302 - 293)) | (1 << (HyperTalkParser.T__306 - 293)) | (1 << (HyperTalkParser.T__307 - 293)) | (1 << (HyperTalkParser.T__308 - 293)) | (1 << (HyperTalkParser.T__312 - 293)) | (1 << (HyperTalkParser.T__313 - 293)) | (1 << (HyperTalkParser.T__314 - 293)) | (1 << (HyperTalkParser.T__315 - 293)) | (1 << (HyperTalkParser.T__316 - 293)) | (1 << (HyperTalkParser.T__317 - 293)) | (1 << (HyperTalkParser.T__318 - 293)) | (1 << (HyperTalkParser.T__319 - 293)) | (1 << (HyperTalkParser.T__320 - 293)) | (1 << (HyperTalkParser.T__321 - 293)) | (1 << (HyperTalkParser.T__322 - 293)) | (1 << (HyperTalkParser.T__323 - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (HyperTalkParser.T__324 - 325)) | (1 << (HyperTalkParser.T__325 - 325)) | (1 << (HyperTalkParser.T__326 - 325)) | (1 << (HyperTalkParser.T__327 - 325)) | (1 << (HyperTalkParser.T__328 - 325)) | (1 << (HyperTalkParser.T__329 - 325)) | (1 << (HyperTalkParser.T__330 - 325)) | (1 << (HyperTalkParser.T__331 - 325)) | (1 << (HyperTalkParser.ID - 325)) | (1 << (HyperTalkParser.LITERAL - 325)))) !== 0)) {
	                this.state = 235;
	                this.statementList();
	            }

	            this.state = 238;
	            this.match(HyperTalkParser.T__1);
	            this.state = 239;
	            this.match(HyperTalkParser.ID);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 240;
	            this.match(HyperTalkParser.T__2);
	            this.state = 241;
	            this.match(HyperTalkParser.ID);
	            this.state = 242;
	            this.parameterList(0);
	            this.state = 244; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 243;
	                this.match(HyperTalkParser.NEWLINE);
	                this.state = 246; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===HyperTalkParser.NEWLINE);
	            this.state = 249;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << HyperTalkParser.T__4) | (1 << HyperTalkParser.T__5) | (1 << HyperTalkParser.T__6) | (1 << HyperTalkParser.T__9) | (1 << HyperTalkParser.T__10) | (1 << HyperTalkParser.T__12) | (1 << HyperTalkParser.T__15) | (1 << HyperTalkParser.T__17) | (1 << HyperTalkParser.T__18) | (1 << HyperTalkParser.T__19) | (1 << HyperTalkParser.T__20) | (1 << HyperTalkParser.T__22) | (1 << HyperTalkParser.T__23) | (1 << HyperTalkParser.T__25) | (1 << HyperTalkParser.T__26) | (1 << HyperTalkParser.T__27) | (1 << HyperTalkParser.T__28) | (1 << HyperTalkParser.T__29) | (1 << HyperTalkParser.T__30))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (HyperTalkParser.T__32 - 33)) | (1 << (HyperTalkParser.T__33 - 33)) | (1 << (HyperTalkParser.T__34 - 33)) | (1 << (HyperTalkParser.T__35 - 33)) | (1 << (HyperTalkParser.T__36 - 33)) | (1 << (HyperTalkParser.T__37 - 33)) | (1 << (HyperTalkParser.T__38 - 33)) | (1 << (HyperTalkParser.T__39 - 33)) | (1 << (HyperTalkParser.T__41 - 33)) | (1 << (HyperTalkParser.T__43 - 33)) | (1 << (HyperTalkParser.T__45 - 33)) | (1 << (HyperTalkParser.T__46 - 33)) | (1 << (HyperTalkParser.T__47 - 33)) | (1 << (HyperTalkParser.T__48 - 33)) | (1 << (HyperTalkParser.T__50 - 33)) | (1 << (HyperTalkParser.T__52 - 33)) | (1 << (HyperTalkParser.T__53 - 33)) | (1 << (HyperTalkParser.T__55 - 33)) | (1 << (HyperTalkParser.T__56 - 33)) | (1 << (HyperTalkParser.T__57 - 33)) | (1 << (HyperTalkParser.T__58 - 33)) | (1 << (HyperTalkParser.T__59 - 33)) | (1 << (HyperTalkParser.T__60 - 33)) | (1 << (HyperTalkParser.T__61 - 33)) | (1 << (HyperTalkParser.T__62 - 33)) | (1 << (HyperTalkParser.T__63 - 33)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (HyperTalkParser.T__66 - 67)) | (1 << (HyperTalkParser.T__68 - 67)) | (1 << (HyperTalkParser.T__69 - 67)) | (1 << (HyperTalkParser.T__73 - 67)) | (1 << (HyperTalkParser.T__74 - 67)) | (1 << (HyperTalkParser.T__75 - 67)) | (1 << (HyperTalkParser.T__76 - 67)) | (1 << (HyperTalkParser.T__77 - 67)) | (1 << (HyperTalkParser.T__78 - 67)) | (1 << (HyperTalkParser.T__79 - 67)) | (1 << (HyperTalkParser.T__85 - 67)) | (1 << (HyperTalkParser.T__86 - 67)) | (1 << (HyperTalkParser.T__87 - 67)) | (1 << (HyperTalkParser.T__88 - 67)) | (1 << (HyperTalkParser.T__89 - 67)) | (1 << (HyperTalkParser.T__90 - 67)) | (1 << (HyperTalkParser.T__92 - 67)) | (1 << (HyperTalkParser.T__96 - 67)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (HyperTalkParser.T__101 - 102)) | (1 << (HyperTalkParser.T__103 - 102)) | (1 << (HyperTalkParser.T__104 - 102)) | (1 << (HyperTalkParser.T__105 - 102)) | (1 << (HyperTalkParser.T__106 - 102)) | (1 << (HyperTalkParser.T__107 - 102)) | (1 << (HyperTalkParser.T__108 - 102)) | (1 << (HyperTalkParser.T__116 - 102)) | (1 << (HyperTalkParser.T__117 - 102)) | (1 << (HyperTalkParser.T__119 - 102)) | (1 << (HyperTalkParser.T__120 - 102)) | (1 << (HyperTalkParser.T__121 - 102)) | (1 << (HyperTalkParser.T__122 - 102)) | (1 << (HyperTalkParser.T__124 - 102)) | (1 << (HyperTalkParser.T__125 - 102)) | (1 << (HyperTalkParser.T__126 - 102)) | (1 << (HyperTalkParser.T__127 - 102)) | (1 << (HyperTalkParser.T__128 - 102)) | (1 << (HyperTalkParser.T__129 - 102)) | (1 << (HyperTalkParser.T__130 - 102)) | (1 << (HyperTalkParser.T__131 - 102)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (HyperTalkParser.T__159 - 160)) | (1 << (HyperTalkParser.T__161 - 160)) | (1 << (HyperTalkParser.T__162 - 160)) | (1 << (HyperTalkParser.T__164 - 160)) | (1 << (HyperTalkParser.T__165 - 160)) | (1 << (HyperTalkParser.T__166 - 160)) | (1 << (HyperTalkParser.T__172 - 160)) | (1 << (HyperTalkParser.T__173 - 160)) | (1 << (HyperTalkParser.T__176 - 160)) | (1 << (HyperTalkParser.T__180 - 160)) | (1 << (HyperTalkParser.T__181 - 160)) | (1 << (HyperTalkParser.T__184 - 160)) | (1 << (HyperTalkParser.T__189 - 160)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (HyperTalkParser.T__195 - 196)) | (1 << (HyperTalkParser.T__196 - 196)) | (1 << (HyperTalkParser.T__197 - 196)) | (1 << (HyperTalkParser.T__198 - 196)) | (1 << (HyperTalkParser.T__200 - 196)) | (1 << (HyperTalkParser.T__201 - 196)) | (1 << (HyperTalkParser.T__202 - 196)) | (1 << (HyperTalkParser.T__203 - 196)) | (1 << (HyperTalkParser.T__204 - 196)) | (1 << (HyperTalkParser.T__205 - 196)) | (1 << (HyperTalkParser.T__206 - 196)) | (1 << (HyperTalkParser.T__207 - 196)) | (1 << (HyperTalkParser.T__208 - 196)) | (1 << (HyperTalkParser.T__209 - 196)) | (1 << (HyperTalkParser.T__210 - 196)) | (1 << (HyperTalkParser.T__211 - 196)) | (1 << (HyperTalkParser.T__212 - 196)) | (1 << (HyperTalkParser.T__213 - 196)) | (1 << (HyperTalkParser.T__214 - 196)) | (1 << (HyperTalkParser.T__215 - 196)) | (1 << (HyperTalkParser.T__216 - 196)) | (1 << (HyperTalkParser.T__217 - 196)) | (1 << (HyperTalkParser.T__218 - 196)) | (1 << (HyperTalkParser.T__219 - 196)) | (1 << (HyperTalkParser.T__220 - 196)) | (1 << (HyperTalkParser.T__221 - 196)) | (1 << (HyperTalkParser.T__223 - 196)) | (1 << (HyperTalkParser.T__224 - 196)) | (1 << (HyperTalkParser.T__225 - 196)) | (1 << (HyperTalkParser.T__226 - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (HyperTalkParser.T__227 - 228)) | (1 << (HyperTalkParser.T__228 - 228)) | (1 << (HyperTalkParser.T__229 - 228)) | (1 << (HyperTalkParser.T__230 - 228)) | (1 << (HyperTalkParser.T__231 - 228)) | (1 << (HyperTalkParser.T__232 - 228)) | (1 << (HyperTalkParser.T__233 - 228)) | (1 << (HyperTalkParser.T__234 - 228)) | (1 << (HyperTalkParser.T__235 - 228)) | (1 << (HyperTalkParser.T__236 - 228)) | (1 << (HyperTalkParser.T__237 - 228)) | (1 << (HyperTalkParser.T__238 - 228)) | (1 << (HyperTalkParser.T__239 - 228)) | (1 << (HyperTalkParser.T__240 - 228)) | (1 << (HyperTalkParser.T__241 - 228)) | (1 << (HyperTalkParser.T__242 - 228)) | (1 << (HyperTalkParser.T__243 - 228)) | (1 << (HyperTalkParser.T__244 - 228)) | (1 << (HyperTalkParser.T__245 - 228)) | (1 << (HyperTalkParser.T__246 - 228)) | (1 << (HyperTalkParser.T__247 - 228)) | (1 << (HyperTalkParser.T__248 - 228)) | (1 << (HyperTalkParser.T__249 - 228)) | (1 << (HyperTalkParser.T__250 - 228)) | (1 << (HyperTalkParser.T__251 - 228)) | (1 << (HyperTalkParser.T__252 - 228)) | (1 << (HyperTalkParser.T__253 - 228)) | (1 << (HyperTalkParser.T__254 - 228)) | (1 << (HyperTalkParser.T__255 - 228)) | (1 << (HyperTalkParser.T__256 - 228)) | (1 << (HyperTalkParser.T__257 - 228)) | (1 << (HyperTalkParser.T__258 - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (HyperTalkParser.T__259 - 260)) | (1 << (HyperTalkParser.T__260 - 260)) | (1 << (HyperTalkParser.T__261 - 260)) | (1 << (HyperTalkParser.T__262 - 260)) | (1 << (HyperTalkParser.T__263 - 260)) | (1 << (HyperTalkParser.T__264 - 260)) | (1 << (HyperTalkParser.T__265 - 260)) | (1 << (HyperTalkParser.T__266 - 260)) | (1 << (HyperTalkParser.T__267 - 260)) | (1 << (HyperTalkParser.T__268 - 260)) | (1 << (HyperTalkParser.T__269 - 260)) | (1 << (HyperTalkParser.T__270 - 260)) | (1 << (HyperTalkParser.T__271 - 260)) | (1 << (HyperTalkParser.T__272 - 260)) | (1 << (HyperTalkParser.T__273 - 260)) | (1 << (HyperTalkParser.T__274 - 260)) | (1 << (HyperTalkParser.T__275 - 260)) | (1 << (HyperTalkParser.T__276 - 260)) | (1 << (HyperTalkParser.T__287 - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (HyperTalkParser.T__292 - 293)) | (1 << (HyperTalkParser.T__293 - 293)) | (1 << (HyperTalkParser.T__295 - 293)) | (1 << (HyperTalkParser.T__296 - 293)) | (1 << (HyperTalkParser.T__297 - 293)) | (1 << (HyperTalkParser.T__298 - 293)) | (1 << (HyperTalkParser.T__299 - 293)) | (1 << (HyperTalkParser.T__301 - 293)) | (1 << (HyperTalkParser.T__302 - 293)) | (1 << (HyperTalkParser.T__306 - 293)) | (1 << (HyperTalkParser.T__307 - 293)) | (1 << (HyperTalkParser.T__308 - 293)) | (1 << (HyperTalkParser.T__312 - 293)) | (1 << (HyperTalkParser.T__313 - 293)) | (1 << (HyperTalkParser.T__314 - 293)) | (1 << (HyperTalkParser.T__315 - 293)) | (1 << (HyperTalkParser.T__316 - 293)) | (1 << (HyperTalkParser.T__317 - 293)) | (1 << (HyperTalkParser.T__318 - 293)) | (1 << (HyperTalkParser.T__319 - 293)) | (1 << (HyperTalkParser.T__320 - 293)) | (1 << (HyperTalkParser.T__321 - 293)) | (1 << (HyperTalkParser.T__322 - 293)) | (1 << (HyperTalkParser.T__323 - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (HyperTalkParser.T__324 - 325)) | (1 << (HyperTalkParser.T__325 - 325)) | (1 << (HyperTalkParser.T__326 - 325)) | (1 << (HyperTalkParser.T__327 - 325)) | (1 << (HyperTalkParser.T__328 - 325)) | (1 << (HyperTalkParser.T__329 - 325)) | (1 << (HyperTalkParser.T__330 - 325)) | (1 << (HyperTalkParser.T__331 - 325)) | (1 << (HyperTalkParser.ID - 325)) | (1 << (HyperTalkParser.LITERAL - 325)))) !== 0)) {
	                this.state = 248;
	                this.statementList();
	            }

	            this.state = 251;
	            this.match(HyperTalkParser.T__1);
	            this.state = 252;
	            this.match(HyperTalkParser.ID);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handlerName() {
	    let localctx = new HandlerNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, HyperTalkParser.RULE_handlerName);
	    try {
	        this.state = 258;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HyperTalkParser.ID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 256;
	            this.match(HyperTalkParser.ID);
	            break;
	        case HyperTalkParser.T__10:
	        case HyperTalkParser.T__12:
	        case HyperTalkParser.T__15:
	        case HyperTalkParser.T__17:
	        case HyperTalkParser.T__18:
	        case HyperTalkParser.T__20:
	        case HyperTalkParser.T__22:
	        case HyperTalkParser.T__25:
	        case HyperTalkParser.T__27:
	        case HyperTalkParser.T__28:
	        case HyperTalkParser.T__29:
	        case HyperTalkParser.T__30:
	        case HyperTalkParser.T__33:
	        case HyperTalkParser.T__34:
	        case HyperTalkParser.T__38:
	        case HyperTalkParser.T__41:
	        case HyperTalkParser.T__43:
	        case HyperTalkParser.T__46:
	        case HyperTalkParser.T__47:
	        case HyperTalkParser.T__48:
	        case HyperTalkParser.T__50:
	        case HyperTalkParser.T__52:
	        case HyperTalkParser.T__53:
	        case HyperTalkParser.T__55:
	        case HyperTalkParser.T__57:
	        case HyperTalkParser.T__58:
	        case HyperTalkParser.T__59:
	        case HyperTalkParser.T__62:
	        case HyperTalkParser.T__63:
	        case HyperTalkParser.T__66:
	        case HyperTalkParser.T__68:
	        case HyperTalkParser.T__73:
	        case HyperTalkParser.T__74:
	        case HyperTalkParser.T__75:
	        case HyperTalkParser.T__76:
	        case HyperTalkParser.T__85:
	        case HyperTalkParser.T__86:
	        case HyperTalkParser.T__89:
	        case HyperTalkParser.T__90:
	        case HyperTalkParser.T__92:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 257;
	            this.commandName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	parameterList(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ParameterListContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 12;
	    this.enterRecursionRule(localctx, 12, HyperTalkParser.RULE_parameterList, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 261;
	        this.match(HyperTalkParser.ID);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 268;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,14,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ParameterListContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, HyperTalkParser.RULE_parameterList);
	                this.state = 263;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 264;
	                this.match(HyperTalkParser.T__3);
	                this.state = 265;
	                this.match(HyperTalkParser.ID); 
	            }
	            this.state = 270;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,14,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	statementList() {
	    let localctx = new StatementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, HyperTalkParser.RULE_statementList);
	    var _la = 0; // Token type
	    try {
	        this.state = 285;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 271;
	            this.statement();
	            this.state = 273; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 272;
	                this.match(HyperTalkParser.NEWLINE);
	                this.state = 275; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===HyperTalkParser.NEWLINE);
	            this.state = 277;
	            this.statementList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 279;
	            this.statement();
	            this.state = 281; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 280;
	                this.match(HyperTalkParser.NEWLINE);
	                this.state = 283; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===HyperTalkParser.NEWLINE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, HyperTalkParser.RULE_statement);
	    try {
	        this.state = 295;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 287;
	            this.commandStmnt();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 288;
	            this.functionCall();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 289;
	            this.messageStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 290;
	            this.expression(0);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 291;
	            this.ifStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 292;
	            this.repeatStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 293;
	            this.globalStmnt();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 294;
	            this.returnStmnt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	globalStmnt() {
	    let localctx = new GlobalStmntContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, HyperTalkParser.RULE_globalStmnt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 297;
	        this.match(HyperTalkParser.T__4);
	        this.state = 298;
	        this.parameterList(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStmnt() {
	    let localctx = new ReturnStmntContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, HyperTalkParser.RULE_returnStmnt);
	    try {
	        this.state = 303;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 300;
	            this.match(HyperTalkParser.T__5);
	            this.state = 301;
	            this.expression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 302;
	            this.match(HyperTalkParser.T__5);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement() {
	    let localctx = new IfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, HyperTalkParser.RULE_ifStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 305;
	        this.match(HyperTalkParser.T__6);
	        this.state = 306;
	        this.expression(0);
	        this.state = 307;
	        this.thenStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thenStatement() {
	    let localctx = new ThenStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, HyperTalkParser.RULE_thenStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 342;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 310;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.NEWLINE) {
	                this.state = 309;
	                this.match(HyperTalkParser.NEWLINE);
	            }

	            this.state = 312;
	            this.match(HyperTalkParser.T__7);
	            this.state = 313;
	            this.statement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 315;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.NEWLINE) {
	                this.state = 314;
	                this.match(HyperTalkParser.NEWLINE);
	            }

	            this.state = 317;
	            this.match(HyperTalkParser.T__7);
	            this.state = 318;
	            this.statement();
	            this.state = 320;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	            if(la_===1) {
	                this.state = 319;
	                this.match(HyperTalkParser.NEWLINE);

	            }
	            this.state = 323;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	            if(la_===1) {
	                this.state = 322;
	                this.elseStatement();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 326;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.NEWLINE) {
	                this.state = 325;
	                this.match(HyperTalkParser.NEWLINE);
	            }

	            this.state = 328;
	            this.match(HyperTalkParser.T__7);
	            this.state = 330; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 329;
	                this.match(HyperTalkParser.NEWLINE);
	                this.state = 332; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===HyperTalkParser.NEWLINE);
	            this.state = 335;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << HyperTalkParser.T__4) | (1 << HyperTalkParser.T__5) | (1 << HyperTalkParser.T__6) | (1 << HyperTalkParser.T__9) | (1 << HyperTalkParser.T__10) | (1 << HyperTalkParser.T__12) | (1 << HyperTalkParser.T__15) | (1 << HyperTalkParser.T__17) | (1 << HyperTalkParser.T__18) | (1 << HyperTalkParser.T__19) | (1 << HyperTalkParser.T__20) | (1 << HyperTalkParser.T__22) | (1 << HyperTalkParser.T__23) | (1 << HyperTalkParser.T__25) | (1 << HyperTalkParser.T__26) | (1 << HyperTalkParser.T__27) | (1 << HyperTalkParser.T__28) | (1 << HyperTalkParser.T__29) | (1 << HyperTalkParser.T__30))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (HyperTalkParser.T__32 - 33)) | (1 << (HyperTalkParser.T__33 - 33)) | (1 << (HyperTalkParser.T__34 - 33)) | (1 << (HyperTalkParser.T__35 - 33)) | (1 << (HyperTalkParser.T__36 - 33)) | (1 << (HyperTalkParser.T__37 - 33)) | (1 << (HyperTalkParser.T__38 - 33)) | (1 << (HyperTalkParser.T__39 - 33)) | (1 << (HyperTalkParser.T__41 - 33)) | (1 << (HyperTalkParser.T__43 - 33)) | (1 << (HyperTalkParser.T__45 - 33)) | (1 << (HyperTalkParser.T__46 - 33)) | (1 << (HyperTalkParser.T__47 - 33)) | (1 << (HyperTalkParser.T__48 - 33)) | (1 << (HyperTalkParser.T__50 - 33)) | (1 << (HyperTalkParser.T__52 - 33)) | (1 << (HyperTalkParser.T__53 - 33)) | (1 << (HyperTalkParser.T__55 - 33)) | (1 << (HyperTalkParser.T__56 - 33)) | (1 << (HyperTalkParser.T__57 - 33)) | (1 << (HyperTalkParser.T__58 - 33)) | (1 << (HyperTalkParser.T__59 - 33)) | (1 << (HyperTalkParser.T__60 - 33)) | (1 << (HyperTalkParser.T__61 - 33)) | (1 << (HyperTalkParser.T__62 - 33)) | (1 << (HyperTalkParser.T__63 - 33)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (HyperTalkParser.T__66 - 67)) | (1 << (HyperTalkParser.T__68 - 67)) | (1 << (HyperTalkParser.T__69 - 67)) | (1 << (HyperTalkParser.T__73 - 67)) | (1 << (HyperTalkParser.T__74 - 67)) | (1 << (HyperTalkParser.T__75 - 67)) | (1 << (HyperTalkParser.T__76 - 67)) | (1 << (HyperTalkParser.T__77 - 67)) | (1 << (HyperTalkParser.T__78 - 67)) | (1 << (HyperTalkParser.T__79 - 67)) | (1 << (HyperTalkParser.T__85 - 67)) | (1 << (HyperTalkParser.T__86 - 67)) | (1 << (HyperTalkParser.T__87 - 67)) | (1 << (HyperTalkParser.T__88 - 67)) | (1 << (HyperTalkParser.T__89 - 67)) | (1 << (HyperTalkParser.T__90 - 67)) | (1 << (HyperTalkParser.T__92 - 67)) | (1 << (HyperTalkParser.T__96 - 67)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (HyperTalkParser.T__101 - 102)) | (1 << (HyperTalkParser.T__103 - 102)) | (1 << (HyperTalkParser.T__104 - 102)) | (1 << (HyperTalkParser.T__105 - 102)) | (1 << (HyperTalkParser.T__106 - 102)) | (1 << (HyperTalkParser.T__107 - 102)) | (1 << (HyperTalkParser.T__108 - 102)) | (1 << (HyperTalkParser.T__116 - 102)) | (1 << (HyperTalkParser.T__117 - 102)) | (1 << (HyperTalkParser.T__119 - 102)) | (1 << (HyperTalkParser.T__120 - 102)) | (1 << (HyperTalkParser.T__121 - 102)) | (1 << (HyperTalkParser.T__122 - 102)) | (1 << (HyperTalkParser.T__124 - 102)) | (1 << (HyperTalkParser.T__125 - 102)) | (1 << (HyperTalkParser.T__126 - 102)) | (1 << (HyperTalkParser.T__127 - 102)) | (1 << (HyperTalkParser.T__128 - 102)) | (1 << (HyperTalkParser.T__129 - 102)) | (1 << (HyperTalkParser.T__130 - 102)) | (1 << (HyperTalkParser.T__131 - 102)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (HyperTalkParser.T__159 - 160)) | (1 << (HyperTalkParser.T__161 - 160)) | (1 << (HyperTalkParser.T__162 - 160)) | (1 << (HyperTalkParser.T__164 - 160)) | (1 << (HyperTalkParser.T__165 - 160)) | (1 << (HyperTalkParser.T__166 - 160)) | (1 << (HyperTalkParser.T__172 - 160)) | (1 << (HyperTalkParser.T__173 - 160)) | (1 << (HyperTalkParser.T__176 - 160)) | (1 << (HyperTalkParser.T__180 - 160)) | (1 << (HyperTalkParser.T__181 - 160)) | (1 << (HyperTalkParser.T__184 - 160)) | (1 << (HyperTalkParser.T__189 - 160)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (HyperTalkParser.T__195 - 196)) | (1 << (HyperTalkParser.T__196 - 196)) | (1 << (HyperTalkParser.T__197 - 196)) | (1 << (HyperTalkParser.T__198 - 196)) | (1 << (HyperTalkParser.T__200 - 196)) | (1 << (HyperTalkParser.T__201 - 196)) | (1 << (HyperTalkParser.T__202 - 196)) | (1 << (HyperTalkParser.T__203 - 196)) | (1 << (HyperTalkParser.T__204 - 196)) | (1 << (HyperTalkParser.T__205 - 196)) | (1 << (HyperTalkParser.T__206 - 196)) | (1 << (HyperTalkParser.T__207 - 196)) | (1 << (HyperTalkParser.T__208 - 196)) | (1 << (HyperTalkParser.T__209 - 196)) | (1 << (HyperTalkParser.T__210 - 196)) | (1 << (HyperTalkParser.T__211 - 196)) | (1 << (HyperTalkParser.T__212 - 196)) | (1 << (HyperTalkParser.T__213 - 196)) | (1 << (HyperTalkParser.T__214 - 196)) | (1 << (HyperTalkParser.T__215 - 196)) | (1 << (HyperTalkParser.T__216 - 196)) | (1 << (HyperTalkParser.T__217 - 196)) | (1 << (HyperTalkParser.T__218 - 196)) | (1 << (HyperTalkParser.T__219 - 196)) | (1 << (HyperTalkParser.T__220 - 196)) | (1 << (HyperTalkParser.T__221 - 196)) | (1 << (HyperTalkParser.T__223 - 196)) | (1 << (HyperTalkParser.T__224 - 196)) | (1 << (HyperTalkParser.T__225 - 196)) | (1 << (HyperTalkParser.T__226 - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (HyperTalkParser.T__227 - 228)) | (1 << (HyperTalkParser.T__228 - 228)) | (1 << (HyperTalkParser.T__229 - 228)) | (1 << (HyperTalkParser.T__230 - 228)) | (1 << (HyperTalkParser.T__231 - 228)) | (1 << (HyperTalkParser.T__232 - 228)) | (1 << (HyperTalkParser.T__233 - 228)) | (1 << (HyperTalkParser.T__234 - 228)) | (1 << (HyperTalkParser.T__235 - 228)) | (1 << (HyperTalkParser.T__236 - 228)) | (1 << (HyperTalkParser.T__237 - 228)) | (1 << (HyperTalkParser.T__238 - 228)) | (1 << (HyperTalkParser.T__239 - 228)) | (1 << (HyperTalkParser.T__240 - 228)) | (1 << (HyperTalkParser.T__241 - 228)) | (1 << (HyperTalkParser.T__242 - 228)) | (1 << (HyperTalkParser.T__243 - 228)) | (1 << (HyperTalkParser.T__244 - 228)) | (1 << (HyperTalkParser.T__245 - 228)) | (1 << (HyperTalkParser.T__246 - 228)) | (1 << (HyperTalkParser.T__247 - 228)) | (1 << (HyperTalkParser.T__248 - 228)) | (1 << (HyperTalkParser.T__249 - 228)) | (1 << (HyperTalkParser.T__250 - 228)) | (1 << (HyperTalkParser.T__251 - 228)) | (1 << (HyperTalkParser.T__252 - 228)) | (1 << (HyperTalkParser.T__253 - 228)) | (1 << (HyperTalkParser.T__254 - 228)) | (1 << (HyperTalkParser.T__255 - 228)) | (1 << (HyperTalkParser.T__256 - 228)) | (1 << (HyperTalkParser.T__257 - 228)) | (1 << (HyperTalkParser.T__258 - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (HyperTalkParser.T__259 - 260)) | (1 << (HyperTalkParser.T__260 - 260)) | (1 << (HyperTalkParser.T__261 - 260)) | (1 << (HyperTalkParser.T__262 - 260)) | (1 << (HyperTalkParser.T__263 - 260)) | (1 << (HyperTalkParser.T__264 - 260)) | (1 << (HyperTalkParser.T__265 - 260)) | (1 << (HyperTalkParser.T__266 - 260)) | (1 << (HyperTalkParser.T__267 - 260)) | (1 << (HyperTalkParser.T__268 - 260)) | (1 << (HyperTalkParser.T__269 - 260)) | (1 << (HyperTalkParser.T__270 - 260)) | (1 << (HyperTalkParser.T__271 - 260)) | (1 << (HyperTalkParser.T__272 - 260)) | (1 << (HyperTalkParser.T__273 - 260)) | (1 << (HyperTalkParser.T__274 - 260)) | (1 << (HyperTalkParser.T__275 - 260)) | (1 << (HyperTalkParser.T__276 - 260)) | (1 << (HyperTalkParser.T__287 - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (HyperTalkParser.T__292 - 293)) | (1 << (HyperTalkParser.T__293 - 293)) | (1 << (HyperTalkParser.T__295 - 293)) | (1 << (HyperTalkParser.T__296 - 293)) | (1 << (HyperTalkParser.T__297 - 293)) | (1 << (HyperTalkParser.T__298 - 293)) | (1 << (HyperTalkParser.T__299 - 293)) | (1 << (HyperTalkParser.T__301 - 293)) | (1 << (HyperTalkParser.T__302 - 293)) | (1 << (HyperTalkParser.T__306 - 293)) | (1 << (HyperTalkParser.T__307 - 293)) | (1 << (HyperTalkParser.T__308 - 293)) | (1 << (HyperTalkParser.T__312 - 293)) | (1 << (HyperTalkParser.T__313 - 293)) | (1 << (HyperTalkParser.T__314 - 293)) | (1 << (HyperTalkParser.T__315 - 293)) | (1 << (HyperTalkParser.T__316 - 293)) | (1 << (HyperTalkParser.T__317 - 293)) | (1 << (HyperTalkParser.T__318 - 293)) | (1 << (HyperTalkParser.T__319 - 293)) | (1 << (HyperTalkParser.T__320 - 293)) | (1 << (HyperTalkParser.T__321 - 293)) | (1 << (HyperTalkParser.T__322 - 293)) | (1 << (HyperTalkParser.T__323 - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (HyperTalkParser.T__324 - 325)) | (1 << (HyperTalkParser.T__325 - 325)) | (1 << (HyperTalkParser.T__326 - 325)) | (1 << (HyperTalkParser.T__327 - 325)) | (1 << (HyperTalkParser.T__328 - 325)) | (1 << (HyperTalkParser.T__329 - 325)) | (1 << (HyperTalkParser.T__330 - 325)) | (1 << (HyperTalkParser.T__331 - 325)) | (1 << (HyperTalkParser.ID - 325)) | (1 << (HyperTalkParser.LITERAL - 325)))) !== 0)) {
	                this.state = 334;
	                this.statementList();
	            }

	            this.state = 340;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case HyperTalkParser.T__8:
	                this.state = 337;
	                this.elseStatement();
	                break;
	            case HyperTalkParser.T__1:
	                this.state = 338;
	                this.match(HyperTalkParser.T__1);
	                this.state = 339;
	                this.match(HyperTalkParser.T__6);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elseStatement() {
	    let localctx = new ElseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, HyperTalkParser.RULE_elseStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 366;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 344;
	            this.match(HyperTalkParser.T__8);
	            this.state = 345;
	            this.statement();
	            this.state = 353;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	            if(la_===1) {
	                this.state = 347; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 346;
	                    this.match(HyperTalkParser.NEWLINE);
	                    this.state = 349; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===HyperTalkParser.NEWLINE);
	                this.state = 351;
	                this.match(HyperTalkParser.T__1);
	                this.state = 352;
	                this.match(HyperTalkParser.T__6);

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 355;
	            this.match(HyperTalkParser.T__8);
	            this.state = 357; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 356;
	                this.match(HyperTalkParser.NEWLINE);
	                this.state = 359; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===HyperTalkParser.NEWLINE);
	            this.state = 362;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << HyperTalkParser.T__4) | (1 << HyperTalkParser.T__5) | (1 << HyperTalkParser.T__6) | (1 << HyperTalkParser.T__9) | (1 << HyperTalkParser.T__10) | (1 << HyperTalkParser.T__12) | (1 << HyperTalkParser.T__15) | (1 << HyperTalkParser.T__17) | (1 << HyperTalkParser.T__18) | (1 << HyperTalkParser.T__19) | (1 << HyperTalkParser.T__20) | (1 << HyperTalkParser.T__22) | (1 << HyperTalkParser.T__23) | (1 << HyperTalkParser.T__25) | (1 << HyperTalkParser.T__26) | (1 << HyperTalkParser.T__27) | (1 << HyperTalkParser.T__28) | (1 << HyperTalkParser.T__29) | (1 << HyperTalkParser.T__30))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (HyperTalkParser.T__32 - 33)) | (1 << (HyperTalkParser.T__33 - 33)) | (1 << (HyperTalkParser.T__34 - 33)) | (1 << (HyperTalkParser.T__35 - 33)) | (1 << (HyperTalkParser.T__36 - 33)) | (1 << (HyperTalkParser.T__37 - 33)) | (1 << (HyperTalkParser.T__38 - 33)) | (1 << (HyperTalkParser.T__39 - 33)) | (1 << (HyperTalkParser.T__41 - 33)) | (1 << (HyperTalkParser.T__43 - 33)) | (1 << (HyperTalkParser.T__45 - 33)) | (1 << (HyperTalkParser.T__46 - 33)) | (1 << (HyperTalkParser.T__47 - 33)) | (1 << (HyperTalkParser.T__48 - 33)) | (1 << (HyperTalkParser.T__50 - 33)) | (1 << (HyperTalkParser.T__52 - 33)) | (1 << (HyperTalkParser.T__53 - 33)) | (1 << (HyperTalkParser.T__55 - 33)) | (1 << (HyperTalkParser.T__56 - 33)) | (1 << (HyperTalkParser.T__57 - 33)) | (1 << (HyperTalkParser.T__58 - 33)) | (1 << (HyperTalkParser.T__59 - 33)) | (1 << (HyperTalkParser.T__60 - 33)) | (1 << (HyperTalkParser.T__61 - 33)) | (1 << (HyperTalkParser.T__62 - 33)) | (1 << (HyperTalkParser.T__63 - 33)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (HyperTalkParser.T__66 - 67)) | (1 << (HyperTalkParser.T__68 - 67)) | (1 << (HyperTalkParser.T__69 - 67)) | (1 << (HyperTalkParser.T__73 - 67)) | (1 << (HyperTalkParser.T__74 - 67)) | (1 << (HyperTalkParser.T__75 - 67)) | (1 << (HyperTalkParser.T__76 - 67)) | (1 << (HyperTalkParser.T__77 - 67)) | (1 << (HyperTalkParser.T__78 - 67)) | (1 << (HyperTalkParser.T__79 - 67)) | (1 << (HyperTalkParser.T__85 - 67)) | (1 << (HyperTalkParser.T__86 - 67)) | (1 << (HyperTalkParser.T__87 - 67)) | (1 << (HyperTalkParser.T__88 - 67)) | (1 << (HyperTalkParser.T__89 - 67)) | (1 << (HyperTalkParser.T__90 - 67)) | (1 << (HyperTalkParser.T__92 - 67)) | (1 << (HyperTalkParser.T__96 - 67)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (HyperTalkParser.T__101 - 102)) | (1 << (HyperTalkParser.T__103 - 102)) | (1 << (HyperTalkParser.T__104 - 102)) | (1 << (HyperTalkParser.T__105 - 102)) | (1 << (HyperTalkParser.T__106 - 102)) | (1 << (HyperTalkParser.T__107 - 102)) | (1 << (HyperTalkParser.T__108 - 102)) | (1 << (HyperTalkParser.T__116 - 102)) | (1 << (HyperTalkParser.T__117 - 102)) | (1 << (HyperTalkParser.T__119 - 102)) | (1 << (HyperTalkParser.T__120 - 102)) | (1 << (HyperTalkParser.T__121 - 102)) | (1 << (HyperTalkParser.T__122 - 102)) | (1 << (HyperTalkParser.T__124 - 102)) | (1 << (HyperTalkParser.T__125 - 102)) | (1 << (HyperTalkParser.T__126 - 102)) | (1 << (HyperTalkParser.T__127 - 102)) | (1 << (HyperTalkParser.T__128 - 102)) | (1 << (HyperTalkParser.T__129 - 102)) | (1 << (HyperTalkParser.T__130 - 102)) | (1 << (HyperTalkParser.T__131 - 102)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (HyperTalkParser.T__159 - 160)) | (1 << (HyperTalkParser.T__161 - 160)) | (1 << (HyperTalkParser.T__162 - 160)) | (1 << (HyperTalkParser.T__164 - 160)) | (1 << (HyperTalkParser.T__165 - 160)) | (1 << (HyperTalkParser.T__166 - 160)) | (1 << (HyperTalkParser.T__172 - 160)) | (1 << (HyperTalkParser.T__173 - 160)) | (1 << (HyperTalkParser.T__176 - 160)) | (1 << (HyperTalkParser.T__180 - 160)) | (1 << (HyperTalkParser.T__181 - 160)) | (1 << (HyperTalkParser.T__184 - 160)) | (1 << (HyperTalkParser.T__189 - 160)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (HyperTalkParser.T__195 - 196)) | (1 << (HyperTalkParser.T__196 - 196)) | (1 << (HyperTalkParser.T__197 - 196)) | (1 << (HyperTalkParser.T__198 - 196)) | (1 << (HyperTalkParser.T__200 - 196)) | (1 << (HyperTalkParser.T__201 - 196)) | (1 << (HyperTalkParser.T__202 - 196)) | (1 << (HyperTalkParser.T__203 - 196)) | (1 << (HyperTalkParser.T__204 - 196)) | (1 << (HyperTalkParser.T__205 - 196)) | (1 << (HyperTalkParser.T__206 - 196)) | (1 << (HyperTalkParser.T__207 - 196)) | (1 << (HyperTalkParser.T__208 - 196)) | (1 << (HyperTalkParser.T__209 - 196)) | (1 << (HyperTalkParser.T__210 - 196)) | (1 << (HyperTalkParser.T__211 - 196)) | (1 << (HyperTalkParser.T__212 - 196)) | (1 << (HyperTalkParser.T__213 - 196)) | (1 << (HyperTalkParser.T__214 - 196)) | (1 << (HyperTalkParser.T__215 - 196)) | (1 << (HyperTalkParser.T__216 - 196)) | (1 << (HyperTalkParser.T__217 - 196)) | (1 << (HyperTalkParser.T__218 - 196)) | (1 << (HyperTalkParser.T__219 - 196)) | (1 << (HyperTalkParser.T__220 - 196)) | (1 << (HyperTalkParser.T__221 - 196)) | (1 << (HyperTalkParser.T__223 - 196)) | (1 << (HyperTalkParser.T__224 - 196)) | (1 << (HyperTalkParser.T__225 - 196)) | (1 << (HyperTalkParser.T__226 - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (HyperTalkParser.T__227 - 228)) | (1 << (HyperTalkParser.T__228 - 228)) | (1 << (HyperTalkParser.T__229 - 228)) | (1 << (HyperTalkParser.T__230 - 228)) | (1 << (HyperTalkParser.T__231 - 228)) | (1 << (HyperTalkParser.T__232 - 228)) | (1 << (HyperTalkParser.T__233 - 228)) | (1 << (HyperTalkParser.T__234 - 228)) | (1 << (HyperTalkParser.T__235 - 228)) | (1 << (HyperTalkParser.T__236 - 228)) | (1 << (HyperTalkParser.T__237 - 228)) | (1 << (HyperTalkParser.T__238 - 228)) | (1 << (HyperTalkParser.T__239 - 228)) | (1 << (HyperTalkParser.T__240 - 228)) | (1 << (HyperTalkParser.T__241 - 228)) | (1 << (HyperTalkParser.T__242 - 228)) | (1 << (HyperTalkParser.T__243 - 228)) | (1 << (HyperTalkParser.T__244 - 228)) | (1 << (HyperTalkParser.T__245 - 228)) | (1 << (HyperTalkParser.T__246 - 228)) | (1 << (HyperTalkParser.T__247 - 228)) | (1 << (HyperTalkParser.T__248 - 228)) | (1 << (HyperTalkParser.T__249 - 228)) | (1 << (HyperTalkParser.T__250 - 228)) | (1 << (HyperTalkParser.T__251 - 228)) | (1 << (HyperTalkParser.T__252 - 228)) | (1 << (HyperTalkParser.T__253 - 228)) | (1 << (HyperTalkParser.T__254 - 228)) | (1 << (HyperTalkParser.T__255 - 228)) | (1 << (HyperTalkParser.T__256 - 228)) | (1 << (HyperTalkParser.T__257 - 228)) | (1 << (HyperTalkParser.T__258 - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (HyperTalkParser.T__259 - 260)) | (1 << (HyperTalkParser.T__260 - 260)) | (1 << (HyperTalkParser.T__261 - 260)) | (1 << (HyperTalkParser.T__262 - 260)) | (1 << (HyperTalkParser.T__263 - 260)) | (1 << (HyperTalkParser.T__264 - 260)) | (1 << (HyperTalkParser.T__265 - 260)) | (1 << (HyperTalkParser.T__266 - 260)) | (1 << (HyperTalkParser.T__267 - 260)) | (1 << (HyperTalkParser.T__268 - 260)) | (1 << (HyperTalkParser.T__269 - 260)) | (1 << (HyperTalkParser.T__270 - 260)) | (1 << (HyperTalkParser.T__271 - 260)) | (1 << (HyperTalkParser.T__272 - 260)) | (1 << (HyperTalkParser.T__273 - 260)) | (1 << (HyperTalkParser.T__274 - 260)) | (1 << (HyperTalkParser.T__275 - 260)) | (1 << (HyperTalkParser.T__276 - 260)) | (1 << (HyperTalkParser.T__287 - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (HyperTalkParser.T__292 - 293)) | (1 << (HyperTalkParser.T__293 - 293)) | (1 << (HyperTalkParser.T__295 - 293)) | (1 << (HyperTalkParser.T__296 - 293)) | (1 << (HyperTalkParser.T__297 - 293)) | (1 << (HyperTalkParser.T__298 - 293)) | (1 << (HyperTalkParser.T__299 - 293)) | (1 << (HyperTalkParser.T__301 - 293)) | (1 << (HyperTalkParser.T__302 - 293)) | (1 << (HyperTalkParser.T__306 - 293)) | (1 << (HyperTalkParser.T__307 - 293)) | (1 << (HyperTalkParser.T__308 - 293)) | (1 << (HyperTalkParser.T__312 - 293)) | (1 << (HyperTalkParser.T__313 - 293)) | (1 << (HyperTalkParser.T__314 - 293)) | (1 << (HyperTalkParser.T__315 - 293)) | (1 << (HyperTalkParser.T__316 - 293)) | (1 << (HyperTalkParser.T__317 - 293)) | (1 << (HyperTalkParser.T__318 - 293)) | (1 << (HyperTalkParser.T__319 - 293)) | (1 << (HyperTalkParser.T__320 - 293)) | (1 << (HyperTalkParser.T__321 - 293)) | (1 << (HyperTalkParser.T__322 - 293)) | (1 << (HyperTalkParser.T__323 - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (HyperTalkParser.T__324 - 325)) | (1 << (HyperTalkParser.T__325 - 325)) | (1 << (HyperTalkParser.T__326 - 325)) | (1 << (HyperTalkParser.T__327 - 325)) | (1 << (HyperTalkParser.T__328 - 325)) | (1 << (HyperTalkParser.T__329 - 325)) | (1 << (HyperTalkParser.T__330 - 325)) | (1 << (HyperTalkParser.T__331 - 325)) | (1 << (HyperTalkParser.ID - 325)) | (1 << (HyperTalkParser.LITERAL - 325)))) !== 0)) {
	                this.state = 361;
	                this.statementList();
	            }

	            this.state = 364;
	            this.match(HyperTalkParser.T__1);
	            this.state = 365;
	            this.match(HyperTalkParser.T__6);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repeatStatement() {
	    let localctx = new RepeatStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, HyperTalkParser.RULE_repeatStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 389;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 368;
	            this.match(HyperTalkParser.T__9);
	            this.state = 369;
	            this.repeatRange();
	            this.state = 371; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 370;
	                this.match(HyperTalkParser.NEWLINE);
	                this.state = 373; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===HyperTalkParser.NEWLINE);
	            this.state = 375;
	            this.statementList();
	            this.state = 376;
	            this.match(HyperTalkParser.T__1);
	            this.state = 377;
	            this.match(HyperTalkParser.T__9);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 379;
	            this.match(HyperTalkParser.T__9);
	            this.state = 380;
	            this.repeatRange();
	            this.state = 382; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 381;
	                this.match(HyperTalkParser.NEWLINE);
	                this.state = 384; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===HyperTalkParser.NEWLINE);
	            this.state = 386;
	            this.match(HyperTalkParser.T__1);
	            this.state = 387;
	            this.match(HyperTalkParser.T__9);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	messageStatement() {
	    let localctx = new MessageStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, HyperTalkParser.RULE_messageStatement);
	    try {
	        this.state = 394;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 391;
	            this.match(HyperTalkParser.ID);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 392;
	            this.match(HyperTalkParser.ID);
	            this.state = 393;
	            this.listExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commandStmnt() {
	    let localctx = new CommandStmntContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, HyperTalkParser.RULE_commandStmnt);
	    var _la = 0; // Token type
	    try {
	        this.state = 917;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 396;
	            this.match(HyperTalkParser.T__10);
	            this.state = 397;
	            this.expression(0);
	            this.state = 398;
	            this.match(HyperTalkParser.T__11);
	            this.state = 399;
	            this.expression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 401;
	            this.match(HyperTalkParser.T__12);
	            this.state = 402;
	            this.expression(0);
	            this.state = 403;
	            this.match(HyperTalkParser.T__13);
	            this.state = 404;
	            this.factor();
	            this.state = 405;
	            this.match(HyperTalkParser.T__14);
	            this.state = 406;
	            this.factor();
	            this.state = 407;
	            this.match(HyperTalkParser.T__14);
	            this.state = 408;
	            this.factor();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 410;
	            this.match(HyperTalkParser.T__12);
	            this.state = 411;
	            this.expression(0);
	            this.state = 412;
	            this.match(HyperTalkParser.T__13);
	            this.state = 413;
	            this.factor();
	            this.state = 414;
	            this.match(HyperTalkParser.T__14);
	            this.state = 415;
	            this.factor();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 417;
	            this.match(HyperTalkParser.T__12);
	            this.state = 418;
	            this.expression(0);
	            this.state = 419;
	            this.match(HyperTalkParser.T__13);
	            this.state = 420;
	            this.factor();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 422;
	            this.match(HyperTalkParser.T__12);
	            this.state = 423;
	            this.expression(0);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 424;
	            this.match(HyperTalkParser.T__15);
	            this.state = 425;
	            this.expression(0);
	            this.state = 426;
	            this.match(HyperTalkParser.T__13);
	            this.state = 427;
	            this.expression(0);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 429;
	            this.match(HyperTalkParser.T__15);
	            this.state = 430;
	            this.expression(0);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 431;
	            this.match(HyperTalkParser.T__15);
	            this.state = 432;
	            this.match(HyperTalkParser.T__16);
	            this.state = 433;
	            this.expression(0);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 434;
	            this.match(HyperTalkParser.T__15);
	            this.state = 435;
	            this.match(HyperTalkParser.T__16);
	            this.state = 436;
	            this.expression(0);
	            this.state = 437;
	            this.match(HyperTalkParser.T__13);
	            this.state = 438;
	            this.expression(0);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 440;
	            this.match(HyperTalkParser.T__17);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 441;
	            this.match(HyperTalkParser.T__17);
	            this.state = 442;
	            this.expression(0);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 443;
	            this.match(HyperTalkParser.T__18);
	            this.state = 444;
	            this.toolExpression();
	            this.state = 446;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__19) {
	                this.state = 445;
	                this.match(HyperTalkParser.T__19);
	            }

	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 448;
	            this.match(HyperTalkParser.T__18);
	            this.state = 449;
	            this.match(HyperTalkParser.T__19);
	            this.state = 450;
	            this.toolExpression();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 451;
	            this.match(HyperTalkParser.T__20);
	            this.state = 452;
	            this.match(HyperTalkParser.T__21);
	            this.state = 453;
	            this.listExpression();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 454;
	            this.match(HyperTalkParser.T__20);
	            this.state = 455;
	            this.match(HyperTalkParser.T__21);
	            this.state = 456;
	            this.listExpression();
	            this.state = 457;
	            this.match(HyperTalkParser.T__13);
	            this.state = 458;
	            this.listExpression();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 460;
	            this.match(HyperTalkParser.T__22);
	            this.state = 461;
	            this.match(HyperTalkParser.T__16);
	            this.state = 462;
	            this.expression(0);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 463;
	            this.match(HyperTalkParser.T__23);
	            this.state = 464;
	            this.container();
	            this.state = 465;
	            this.match(HyperTalkParser.T__11);
	            this.state = 466;
	            this.convertible();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 468;
	            this.match(HyperTalkParser.T__23);
	            this.state = 469;
	            this.container();
	            this.state = 470;
	            this.match(HyperTalkParser.T__24);
	            this.state = 471;
	            this.convertible();
	            this.state = 472;
	            this.match(HyperTalkParser.T__11);
	            this.state = 473;
	            this.convertible();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 475;
	            this.match(HyperTalkParser.T__23);
	            this.state = 476;
	            this.expression(0);
	            this.state = 477;
	            this.match(HyperTalkParser.T__11);
	            this.state = 478;
	            this.convertible();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 480;
	            this.match(HyperTalkParser.T__23);
	            this.state = 481;
	            this.expression(0);
	            this.state = 482;
	            this.match(HyperTalkParser.T__24);
	            this.state = 483;
	            this.convertible();
	            this.state = 484;
	            this.match(HyperTalkParser.T__11);
	            this.state = 485;
	            this.convertible();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 487;
	            this.match(HyperTalkParser.T__25);
	            this.state = 488;
	            this.match(HyperTalkParser.T__26);
	            this.state = 489;
	            this.expression(0);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 490;
	            this.match(HyperTalkParser.T__27);
	            this.state = 491;
	            this.expression(0);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 492;
	            this.match(HyperTalkParser.T__28);
	            this.state = 493;
	            this.expression(0);
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 494;
	            this.match(HyperTalkParser.T__29);
	            this.state = 495;
	            this.expression(0);
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 496;
	            this.match(HyperTalkParser.T__30);
	            this.state = 497;
	            this.expression(0);
	            this.state = 498;
	            this.match(HyperTalkParser.T__31);
	            this.state = 499;
	            this.expression(0);
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 501;
	            this.match(HyperTalkParser.T__32);
	            this.state = 502;
	            this.expression(0);
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 503;
	            this.match(HyperTalkParser.T__33);
	            this.state = 504;
	            this.expression(0);
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 505;
	            this.match(HyperTalkParser.T__34);
	            this.state = 506;
	            this.match(HyperTalkParser.T__24);
	            this.state = 507;
	            this.listExpression();
	            this.state = 508;
	            this.match(HyperTalkParser.T__11);
	            this.state = 509;
	            this.listExpression();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 511;
	            this.match(HyperTalkParser.T__34);
	            this.state = 512;
	            this.match(HyperTalkParser.T__24);
	            this.state = 513;
	            this.listExpression();
	            this.state = 514;
	            this.match(HyperTalkParser.T__11);
	            this.state = 515;
	            this.listExpression();
	            this.state = 516;
	            this.match(HyperTalkParser.T__13);
	            this.state = 517;
	            this.listExpression();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 519;
	            this.match(HyperTalkParser.T__35);
	            this.state = 521;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__36) {
	                this.state = 520;
	                this.match(HyperTalkParser.T__36);
	            }

	            this.state = 523;
	            this.match(HyperTalkParser.T__37);
	            this.state = 524;
	            this.of();
	            this.state = 525;
	            this.expression(0);
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 527;
	            this.match(HyperTalkParser.T__38);
	            this.state = 528;
	            this.expression(0);
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 529;
	            this.match(HyperTalkParser.T__39);
	            this.state = 530;
	            this.handlerName();
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 531;
	            this.match(HyperTalkParser.T__39);
	            this.state = 532;
	            this.match(HyperTalkParser.T__9);
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 533;
	            this.match(HyperTalkParser.T__39);
	            this.state = 534;
	            this.match(HyperTalkParser.T__11);
	            this.state = 535;
	            this.match(HyperTalkParser.T__40);
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 536;
	            this.match(HyperTalkParser.T__41);
	            this.state = 537;
	            this.match(HyperTalkParser.T__42);
	            this.state = 538;
	            this.match(HyperTalkParser.T__11);
	            this.state = 539;
	            this.match(HyperTalkParser.T__16);
	            this.state = 540;
	            this.expression(0);
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 541;
	            this.match(HyperTalkParser.T__43);
	            this.state = 543;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	            if(la_===1) {
	                this.state = 542;
	                this.expression(0);

	            }
	            this.state = 546;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__44) {
	                this.state = 545;
	                this.match(HyperTalkParser.T__44);
	            }

	            this.state = 548;
	            this.expression(0);
	            this.state = 549;
	            this.of();
	            this.state = 550;
	            this.expression(0);
	            this.state = 551;
	            this.of();
	            this.state = 552;
	            this.match(HyperTalkParser.T__45);
	            this.state = 553;
	            this.cards();
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 555;
	            this.match(HyperTalkParser.T__43);
	            this.state = 557;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	            if(la_===1) {
	                this.state = 556;
	                this.expression(0);

	            }
	            this.state = 560;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__44) {
	                this.state = 559;
	                this.match(HyperTalkParser.T__44);
	            }

	            this.state = 562;
	            this.expression(0);
	            this.state = 563;
	            this.of();
	            this.state = 564;
	            this.expression(0);
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 566;
	            this.match(HyperTalkParser.T__43);
	            this.state = 568;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	            if(la_===1) {
	                this.state = 567;
	                this.expression(0);

	            }
	            this.state = 571;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__44) {
	                this.state = 570;
	                this.match(HyperTalkParser.T__44);
	            }

	            this.state = 573;
	            this.expression(0);
	            this.state = 574;
	            this.of();
	            this.state = 575;
	            this.match(HyperTalkParser.T__45);
	            this.state = 576;
	            this.cards();
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 578;
	            this.match(HyperTalkParser.T__43);
	            this.state = 580;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	            if(la_===1) {
	                this.state = 579;
	                this.expression(0);

	            }
	            this.state = 583;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__44) {
	                this.state = 582;
	                this.match(HyperTalkParser.T__44);
	            }

	            this.state = 585;
	            this.expression(0);
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 586;
	            this.match(HyperTalkParser.T__46);
	            this.state = 587;
	            this.expression(0);
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 588;
	            this.match(HyperTalkParser.T__47);
	            this.state = 590;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__11) {
	                this.state = 589;
	                this.match(HyperTalkParser.T__11);
	            }

	            this.state = 592;
	            this.expression(0);
	            this.state = 593;
	            this.match(HyperTalkParser.T__13);
	            this.state = 594;
	            this.match(HyperTalkParser.T__48);
	            this.state = 595;
	            this.expression(0);
	            break;

	        case 42:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 597;
	            this.match(HyperTalkParser.T__47);
	            this.state = 599;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__11) {
	                this.state = 598;
	                this.match(HyperTalkParser.T__11);
	            }

	            this.state = 601;
	            this.expression(0);
	            this.state = 602;
	            this.remoteNavOption();
	            break;

	        case 43:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 604;
	            this.match(HyperTalkParser.T__47);
	            this.state = 605;
	            this.match(HyperTalkParser.T__49);
	            break;

	        case 44:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 606;
	            this.match(HyperTalkParser.T__47);
	            this.state = 607;
	            this.match(HyperTalkParser.T__49);
	            this.state = 608;
	            this.match(HyperTalkParser.T__13);
	            this.state = 609;
	            this.match(HyperTalkParser.T__48);
	            this.state = 610;
	            this.expression(0);
	            break;

	        case 45:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 611;
	            this.match(HyperTalkParser.T__50);
	            this.state = 612;
	            this.expression(0);
	            break;

	        case 46:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 613;
	            this.match(HyperTalkParser.T__50);
	            this.state = 614;
	            this.card();
	            this.state = 615;
	            this.picture();
	            break;

	        case 47:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 617;
	            this.match(HyperTalkParser.T__50);
	            this.state = 618;
	            this.background();
	            this.state = 619;
	            this.picture();
	            break;

	        case 48:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 621;
	            this.match(HyperTalkParser.T__50);
	            this.state = 622;
	            this.picture();
	            this.state = 623;
	            this.of();
	            this.state = 624;
	            this.expression(0);
	            break;

	        case 49:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 626;
	            this.match(HyperTalkParser.T__50);
	            this.state = 627;
	            this.match(HyperTalkParser.T__51);
	            break;

	        case 50:
	            this.enterOuterAlt(localctx, 50);
	            this.state = 628;
	            this.match(HyperTalkParser.T__52);
	            this.state = 629;
	            this.match(HyperTalkParser.T__42);
	            this.state = 630;
	            this.match(HyperTalkParser.T__24);
	            this.state = 631;
	            this.match(HyperTalkParser.T__16);
	            this.state = 632;
	            this.expression(0);
	            break;

	        case 51:
	            this.enterOuterAlt(localctx, 51);
	            this.state = 633;
	            this.match(HyperTalkParser.T__53);
	            this.state = 634;
	            this.match(HyperTalkParser.T__54);
	            break;

	        case 52:
	            this.enterOuterAlt(localctx, 52);
	            this.state = 635;
	            this.match(HyperTalkParser.T__55);
	            this.state = 636;
	            this.expression(0);
	            this.state = 637;
	            this.match(HyperTalkParser.T__31);
	            this.state = 638;
	            this.expression(0);
	            break;

	        case 53:
	            this.enterOuterAlt(localctx, 53);
	            this.state = 640;
	            this.match(HyperTalkParser.T__56);
	            this.state = 641;
	            this.match(HyperTalkParser.T__9);
	            break;

	        case 54:
	            this.enterOuterAlt(localctx, 54);
	            this.state = 642;
	            this.match(HyperTalkParser.T__57);
	            this.state = 643;
	            this.match(HyperTalkParser.T__16);
	            this.state = 644;
	            this.expression(0);
	            break;

	        case 55:
	            this.enterOuterAlt(localctx, 55);
	            this.state = 645;
	            this.match(HyperTalkParser.T__58);
	            this.state = 646;
	            this.handlerName();
	            break;

	        case 56:
	            this.enterOuterAlt(localctx, 56);
	            this.state = 647;
	            this.match(HyperTalkParser.T__59);
	            this.state = 648;
	            this.musicExpression();
	            break;

	        case 57:
	            this.enterOuterAlt(localctx, 57);
	            this.state = 649;
	            this.match(HyperTalkParser.T__60);
	            this.state = 650;
	            this.card();
	            break;

	        case 58:
	            this.enterOuterAlt(localctx, 58);
	            this.state = 651;
	            this.match(HyperTalkParser.T__61);
	            this.state = 652;
	            this.card();
	            break;

	        case 59:
	            this.enterOuterAlt(localctx, 59);
	            this.state = 653;
	            this.match(HyperTalkParser.T__61);
	            this.state = 654;
	            this.expression(0);
	            break;

	        case 60:
	            this.enterOuterAlt(localctx, 60);
	            this.state = 655;
	            this.match(HyperTalkParser.T__62);
	            this.state = 656;
	            this.listExpression();
	            break;

	        case 61:
	            this.enterOuterAlt(localctx, 61);
	            this.state = 657;
	            this.match(HyperTalkParser.T__62);
	            this.state = 658;
	            this.listExpression();
	            this.state = 659;
	            this.preposition();
	            this.state = 660;
	            this.expression(0);
	            break;

	        case 62:
	            this.enterOuterAlt(localctx, 62);
	            this.state = 662;
	            this.match(HyperTalkParser.T__63);
	            this.state = 663;
	            this.match(HyperTalkParser.T__24);
	            this.state = 664;
	            this.match(HyperTalkParser.T__16);
	            this.state = 665;
	            this.expression(0);
	            break;

	        case 63:
	            this.enterOuterAlt(localctx, 63);
	            this.state = 666;
	            this.match(HyperTalkParser.T__63);
	            this.state = 667;
	            this.match(HyperTalkParser.T__24);
	            this.state = 668;
	            this.match(HyperTalkParser.T__16);
	            this.state = 669;
	            this.expression(0);
	            this.state = 670;
	            this.match(HyperTalkParser.T__64);
	            this.state = 671;
	            this.expression(0);
	            break;

	        case 64:
	            this.enterOuterAlt(localctx, 64);
	            this.state = 673;
	            this.match(HyperTalkParser.T__63);
	            this.state = 674;
	            this.match(HyperTalkParser.T__24);
	            this.state = 675;
	            this.match(HyperTalkParser.T__16);
	            this.state = 676;
	            this.expression(0);
	            this.state = 677;
	            this.match(HyperTalkParser.T__21);
	            this.state = 678;
	            this.expression(0);
	            this.state = 679;
	            this.match(HyperTalkParser.T__64);
	            this.state = 680;
	            this.expression(0);
	            break;

	        case 65:
	            this.enterOuterAlt(localctx, 65);
	            this.state = 682;
	            this.match(HyperTalkParser.T__63);
	            this.state = 683;
	            this.match(HyperTalkParser.T__24);
	            this.state = 684;
	            this.match(HyperTalkParser.T__16);
	            this.state = 685;
	            this.expression(0);
	            this.state = 686;
	            this.match(HyperTalkParser.T__65);
	            this.state = 687;
	            this.expression(0);
	            break;

	        case 66:
	            this.enterOuterAlt(localctx, 66);
	            this.state = 689;
	            this.match(HyperTalkParser.T__66);
	            this.state = 691;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__36) {
	                this.state = 690;
	                this.match(HyperTalkParser.T__36);
	            }

	            this.state = 693;
	            this.match(HyperTalkParser.T__67);
	            break;

	        case 67:
	            this.enterOuterAlt(localctx, 67);
	            this.state = 694;
	            this.match(HyperTalkParser.T__66);
	            this.state = 695;
	            this.match(HyperTalkParser.T__42);
	            break;

	        case 68:
	            this.enterOuterAlt(localctx, 68);
	            this.state = 696;
	            this.match(HyperTalkParser.T__68);
	            this.state = 697;
	            this.match(HyperTalkParser.T__69);
	            break;

	        case 69:
	            this.enterOuterAlt(localctx, 69);
	            this.state = 698;
	            this.match(HyperTalkParser.T__68);
	            this.state = 699;
	            this.match(HyperTalkParser.T__70);
	            this.state = 700;
	            this.of();
	            this.state = 701;
	            this.expression(0);
	            break;

	        case 70:
	            this.enterOuterAlt(localctx, 70);
	            this.state = 703;
	            this.match(HyperTalkParser.T__68);
	            this.state = 704;
	            this.match(HyperTalkParser.T__71);
	            this.state = 705;
	            this.match(HyperTalkParser.T__70);
	            this.state = 706;
	            this.of();
	            this.state = 707;
	            this.expression(0);
	            break;

	        case 71:
	            this.enterOuterAlt(localctx, 71);
	            this.state = 709;
	            this.match(HyperTalkParser.T__68);
	            this.state = 710;
	            this.match(HyperTalkParser.T__72);
	            this.state = 711;
	            this.match(HyperTalkParser.T__70);
	            this.state = 712;
	            this.of();
	            this.state = 713;
	            this.expression(0);
	            break;

	        case 72:
	            this.enterOuterAlt(localctx, 72);
	            this.state = 715;
	            this.match(HyperTalkParser.T__68);
	            this.state = 716;
	            this.expression(0);
	            break;

	        case 73:
	            this.enterOuterAlt(localctx, 73);
	            this.state = 717;
	            this.match(HyperTalkParser.T__68);
	            this.state = 718;
	            this.match(HyperTalkParser.T__71);
	            this.state = 719;
	            this.expression(0);
	            break;

	        case 74:
	            this.enterOuterAlt(localctx, 74);
	            this.state = 720;
	            this.match(HyperTalkParser.T__68);
	            this.state = 721;
	            this.match(HyperTalkParser.T__72);
	            this.state = 722;
	            this.expression(0);
	            break;

	        case 75:
	            this.enterOuterAlt(localctx, 75);
	            this.state = 723;
	            this.match(HyperTalkParser.T__73);
	            this.state = 724;
	            this.property();
	            this.state = 725;
	            this.match(HyperTalkParser.T__11);
	            this.state = 726;
	            this.propertyValue();
	            break;

	        case 76:
	            this.enterOuterAlt(localctx, 76);
	            this.state = 728;
	            this.match(HyperTalkParser.T__74);
	            this.state = 729;
	            this.listExpression();
	            this.state = 730;
	            this.match(HyperTalkParser.T__11);
	            this.state = 731;
	            this.expression(0);
	            break;

	        case 77:
	            this.enterOuterAlt(localctx, 77);
	            this.state = 733;
	            this.match(HyperTalkParser.T__75);
	            this.state = 734;
	            this.expression(0);
	            break;

	        case 78:
	            this.enterOuterAlt(localctx, 78);
	            this.state = 735;
	            this.match(HyperTalkParser.T__75);
	            this.state = 736;
	            this.card();
	            this.state = 737;
	            this.picture();
	            break;

	        case 79:
	            this.enterOuterAlt(localctx, 79);
	            this.state = 739;
	            this.match(HyperTalkParser.T__75);
	            this.state = 740;
	            this.background();
	            this.state = 741;
	            this.picture();
	            break;

	        case 80:
	            this.enterOuterAlt(localctx, 80);
	            this.state = 743;
	            this.match(HyperTalkParser.T__75);
	            this.state = 744;
	            this.picture();
	            this.state = 745;
	            this.of();
	            this.state = 746;
	            this.expression(0);
	            break;

	        case 81:
	            this.enterOuterAlt(localctx, 81);
	            this.state = 748;
	            this.match(HyperTalkParser.T__75);
	            this.state = 749;
	            this.match(HyperTalkParser.T__51);
	            break;

	        case 82:
	            this.enterOuterAlt(localctx, 82);
	            this.state = 750;
	            this.match(HyperTalkParser.T__76);
	            this.state = 751;
	            this.sortChunkType();
	            this.state = 752;
	            this.expression(0);
	            this.state = 753;
	            this.sortDirection();
	            this.state = 754;
	            this.sortStyle();
	            break;

	        case 83:
	            this.enterOuterAlt(localctx, 83);
	            this.state = 756;
	            this.match(HyperTalkParser.T__76);
	            this.state = 757;
	            this.sortChunkType();
	            this.state = 758;
	            this.expression(0);
	            this.state = 759;
	            this.sortDirection();
	            this.state = 760;
	            this.sortStyle();
	            this.state = 761;
	            this.match(HyperTalkParser.T__31);
	            this.state = 762;
	            this.expression(0);
	            break;

	        case 84:
	            this.enterOuterAlt(localctx, 84);
	            this.state = 764;
	            this.match(HyperTalkParser.T__76);
	            this.state = 765;
	            this.sortDirection();
	            this.state = 766;
	            this.sortStyle();
	            this.state = 767;
	            this.match(HyperTalkParser.T__31);
	            this.state = 768;
	            this.expression(0);
	            break;

	        case 85:
	            this.enterOuterAlt(localctx, 85);
	            this.state = 770;
	            this.match(HyperTalkParser.T__76);
	            this.state = 772;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__77) {
	                this.state = 771;
	                this.match(HyperTalkParser.T__77);
	            }

	            this.state = 774;
	            this.match(HyperTalkParser.T__78);
	            this.state = 775;
	            this.sortDirection();
	            this.state = 776;
	            this.sortStyle();
	            this.state = 777;
	            this.match(HyperTalkParser.T__31);
	            this.state = 778;
	            this.expression(0);
	            break;

	        case 86:
	            this.enterOuterAlt(localctx, 86);
	            this.state = 780;
	            this.match(HyperTalkParser.T__76);
	            this.state = 782;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__36) {
	                this.state = 781;
	                this.match(HyperTalkParser.T__36);
	            }

	            this.state = 784;
	            this.cards();
	            this.state = 789;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__24 || _la===HyperTalkParser.T__185 || _la===HyperTalkParser.T__303) {
	                this.state = 785;
	                this.of();
	                this.state = 786;
	                this.match(HyperTalkParser.T__77);
	                this.state = 787;
	                this.match(HyperTalkParser.T__78);
	            }

	            this.state = 791;
	            this.sortDirection();
	            this.state = 792;
	            this.sortStyle();
	            this.state = 793;
	            this.match(HyperTalkParser.T__31);
	            this.state = 794;
	            this.expression(0);
	            break;

	        case 87:
	            this.enterOuterAlt(localctx, 87);
	            this.state = 796;
	            this.match(HyperTalkParser.T__76);
	            this.state = 798;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__36) {
	                this.state = 797;
	                this.match(HyperTalkParser.T__36);
	            }

	            this.state = 800;
	            this.match(HyperTalkParser.T__45);
	            this.state = 801;
	            this.cards();
	            this.state = 806;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__24 || _la===HyperTalkParser.T__185 || _la===HyperTalkParser.T__303) {
	                this.state = 802;
	                this.of();
	                this.state = 803;
	                this.match(HyperTalkParser.T__77);
	                this.state = 804;
	                this.match(HyperTalkParser.T__78);
	            }

	            this.state = 808;
	            this.sortDirection();
	            this.state = 809;
	            this.sortStyle();
	            this.state = 810;
	            this.match(HyperTalkParser.T__31);
	            this.state = 811;
	            this.expression(0);
	            break;

	        case 88:
	            this.enterOuterAlt(localctx, 88);
	            this.state = 813;
	            this.match(HyperTalkParser.T__76);
	            this.state = 814;
	            this.expression(0);
	            this.state = 815;
	            this.sortDirection();
	            this.state = 816;
	            this.sortStyle();
	            this.state = 817;
	            this.match(HyperTalkParser.T__31);
	            this.state = 818;
	            this.expression(0);
	            break;

	        case 89:
	            this.enterOuterAlt(localctx, 89);
	            this.state = 820;
	            this.match(HyperTalkParser.T__76);
	            this.state = 822;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__36) {
	                this.state = 821;
	                this.match(HyperTalkParser.T__36);
	            }

	            this.state = 824;
	            this.cards();
	            this.state = 825;
	            this.of();
	            this.state = 826;
	            this.expression(0);
	            this.state = 827;
	            this.sortDirection();
	            this.state = 828;
	            this.sortStyle();
	            this.state = 829;
	            this.match(HyperTalkParser.T__31);
	            this.state = 830;
	            this.expression(0);
	            break;

	        case 90:
	            this.enterOuterAlt(localctx, 90);
	            this.state = 832;
	            this.match(HyperTalkParser.T__76);
	            this.state = 834;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__36) {
	                this.state = 833;
	                this.match(HyperTalkParser.T__36);
	            }

	            this.state = 836;
	            this.match(HyperTalkParser.T__45);
	            this.state = 837;
	            this.cards();
	            this.state = 838;
	            this.of();
	            this.state = 839;
	            this.expression(0);
	            this.state = 840;
	            this.sortDirection();
	            this.state = 841;
	            this.sortStyle();
	            this.state = 842;
	            this.match(HyperTalkParser.T__31);
	            this.state = 843;
	            this.expression(0);
	            break;

	        case 91:
	            this.enterOuterAlt(localctx, 91);
	            this.state = 845;
	            this.match(HyperTalkParser.T__79);
	            this.state = 846;
	            this.expression(0);
	            break;

	        case 92:
	            this.enterOuterAlt(localctx, 92);
	            this.state = 847;
	            this.match(HyperTalkParser.T__79);
	            this.state = 848;
	            this.expression(0);
	            this.state = 849;
	            this.match(HyperTalkParser.T__13);
	            this.state = 850;
	            localctx.gender = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (HyperTalkParser.T__80 - 81)) | (1 << (HyperTalkParser.T__81 - 81)) | (1 << (HyperTalkParser.T__82 - 81)) | (1 << (HyperTalkParser.T__83 - 81)))) !== 0))) {
	                localctx.gender = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 851;
	            this.match(HyperTalkParser.T__84);
	            break;

	        case 93:
	            this.enterOuterAlt(localctx, 93);
	            this.state = 853;
	            this.match(HyperTalkParser.T__79);
	            this.state = 854;
	            this.expression(0);
	            this.state = 855;
	            this.match(HyperTalkParser.T__13);
	            this.state = 856;
	            this.match(HyperTalkParser.T__84);
	            this.state = 857;
	            this.expression(0);
	            break;

	        case 94:
	            this.enterOuterAlt(localctx, 94);
	            this.state = 859;
	            this.match(HyperTalkParser.T__85);
	            this.state = 860;
	            this.expression(0);
	            this.state = 861;
	            this.match(HyperTalkParser.T__24);
	            this.state = 862;
	            this.expression(0);
	            break;

	        case 95:
	            this.enterOuterAlt(localctx, 95);
	            this.state = 864;
	            this.match(HyperTalkParser.T__86);
	            this.state = 865;
	            this.expression(0);
	            break;

	        case 96:
	            this.enterOuterAlt(localctx, 96);
	            this.state = 866;
	            this.match(HyperTalkParser.T__86);
	            this.state = 867;
	            this.expression(0);
	            this.state = 868;
	            this.match(HyperTalkParser.T__13);
	            this.state = 869;
	            _la = this._input.LA(1);
	            if(!(_la===HyperTalkParser.T__87 || _la===HyperTalkParser.T__88)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 97:
	            this.enterOuterAlt(localctx, 97);
	            this.state = 871;
	            this.match(HyperTalkParser.T__89);
	            this.state = 872;
	            this.match(HyperTalkParser.T__54);
	            break;

	        case 98:
	            this.enterOuterAlt(localctx, 98);
	            this.state = 873;
	            this.match(HyperTalkParser.T__89);
	            this.state = 874;
	            this.match(HyperTalkParser.T__54);
	            this.state = 875;
	            this.match(HyperTalkParser.T__13);
	            this.state = 876;
	            this.match(HyperTalkParser.T__48);
	            this.state = 877;
	            this.expression(0);
	            break;

	        case 99:
	            this.enterOuterAlt(localctx, 99);
	            this.state = 878;
	            this.match(HyperTalkParser.T__48);
	            this.state = 879;
	            this.expression(0);
	            break;

	        case 100:
	            this.enterOuterAlt(localctx, 100);
	            this.state = 880;
	            this.match(HyperTalkParser.T__90);
	            this.state = 881;
	            this.expression(0);
	            this.state = 882;
	            this.timeUnit();
	            break;

	        case 101:
	            this.enterOuterAlt(localctx, 101);
	            this.state = 884;
	            this.match(HyperTalkParser.T__90);
	            this.state = 885;
	            this.match(HyperTalkParser.T__64);
	            this.state = 886;
	            this.expression(0);
	            this.state = 887;
	            this.timeUnit();
	            break;

	        case 102:
	            this.enterOuterAlt(localctx, 102);
	            this.state = 889;
	            this.match(HyperTalkParser.T__90);
	            this.state = 890;
	            this.match(HyperTalkParser.T__65);
	            this.state = 891;
	            this.expression(0);
	            break;

	        case 103:
	            this.enterOuterAlt(localctx, 103);
	            this.state = 892;
	            this.match(HyperTalkParser.T__90);
	            this.state = 893;
	            this.match(HyperTalkParser.T__91);
	            this.state = 894;
	            this.expression(0);
	            break;

	        case 104:
	            this.enterOuterAlt(localctx, 104);
	            this.state = 895;
	            this.match(HyperTalkParser.T__92);
	            this.state = 896;
	            this.expression(0);
	            this.state = 897;
	            this.match(HyperTalkParser.T__11);
	            this.state = 898;
	            this.match(HyperTalkParser.T__16);
	            this.state = 899;
	            this.expression(0);
	            break;

	        case 105:
	            this.enterOuterAlt(localctx, 105);
	            this.state = 901;
	            this.match(HyperTalkParser.T__92);
	            this.state = 902;
	            this.expression(0);
	            this.state = 903;
	            this.match(HyperTalkParser.T__11);
	            this.state = 904;
	            this.match(HyperTalkParser.T__16);
	            this.state = 905;
	            this.expression(0);
	            this.state = 906;
	            this.match(HyperTalkParser.T__21);
	            this.state = 907;
	            _la = this._input.LA(1);
	            if(!(_la===HyperTalkParser.T__1 || _la===HyperTalkParser.T__93)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 106:
	            this.enterOuterAlt(localctx, 106);
	            this.state = 909;
	            this.match(HyperTalkParser.T__92);
	            this.state = 910;
	            this.expression(0);
	            this.state = 911;
	            this.match(HyperTalkParser.T__11);
	            this.state = 912;
	            this.match(HyperTalkParser.T__16);
	            this.state = 913;
	            this.expression(0);
	            this.state = 914;
	            this.match(HyperTalkParser.T__21);
	            this.state = 915;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	remoteNavOption() {
	    let localctx = new RemoteNavOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, HyperTalkParser.RULE_remoteNavOption);
	    try {
	        this.state = 930;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 919;
	            this.match(HyperTalkParser.T__94);
	            this.state = 920;
	            this.match(HyperTalkParser.T__95);
	            this.state = 921;
	            this.match(HyperTalkParser.T__96);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 922;
	            this.match(HyperTalkParser.T__94);
	            this.state = 923;
	            this.match(HyperTalkParser.T__95);
	            this.state = 924;
	            this.match(HyperTalkParser.T__96);
	            this.state = 925;
	            this.match(HyperTalkParser.T__97);
	            this.state = 926;
	            this.match(HyperTalkParser.T__98);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 927;
	            this.match(HyperTalkParser.T__97);
	            this.state = 928;
	            this.match(HyperTalkParser.T__98);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	convertible() {
	    let localctx = new ConvertibleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, HyperTalkParser.RULE_convertible);
	    try {
	        this.state = 937;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 932;
	            this.conversionFormat();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 933;
	            this.conversionFormat();
	            this.state = 934;
	            this.match(HyperTalkParser.T__99);
	            this.state = 935;
	            this.conversionFormat();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conversionFormat() {
	    let localctx = new ConversionFormatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, HyperTalkParser.RULE_conversionFormat);
	    try {
	        this.state = 947;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 939;
	            this.seconds();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 940;
	            this.match(HyperTalkParser.T__100);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 941;
	            this.length();
	            this.state = 942;
	            this.match(HyperTalkParser.T__101);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 944;
	            this.length();
	            this.state = 945;
	            this.match(HyperTalkParser.T__102);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	length() {
	    let localctx = new LengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, HyperTalkParser.RULE_length);
	    var _la = 0; // Token type
	    try {
	        this.state = 953;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HyperTalkParser.T__103:
	        case HyperTalkParser.T__104:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 949;
	            _la = this._input.LA(1);
	            if(!(_la===HyperTalkParser.T__103 || _la===HyperTalkParser.T__104)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case HyperTalkParser.T__105:
	        case HyperTalkParser.T__106:
	        case HyperTalkParser.T__107:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 950;
	            _la = this._input.LA(1);
	            if(!(((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (HyperTalkParser.T__105 - 106)) | (1 << (HyperTalkParser.T__106 - 106)) | (1 << (HyperTalkParser.T__107 - 106)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case HyperTalkParser.T__108:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 951;
	            this.match(HyperTalkParser.T__108);
	            break;
	        case HyperTalkParser.T__37:
	        case HyperTalkParser.T__45:
	        case HyperTalkParser.T__101:
	        case HyperTalkParser.T__102:
	        case HyperTalkParser.T__120:
	        case HyperTalkParser.T__121:
	        case HyperTalkParser.T__172:
	        case HyperTalkParser.T__173:
	        case HyperTalkParser.T__184:
	        case HyperTalkParser.T__266:
	        case HyperTalkParser.T__267:
	        case HyperTalkParser.T__268:
	        case HyperTalkParser.T__269:
	        case HyperTalkParser.T__270:
	        case HyperTalkParser.T__271:
	        case HyperTalkParser.T__272:
	        case HyperTalkParser.T__273:
	        case HyperTalkParser.T__274:
	        case HyperTalkParser.T__275:
	        case HyperTalkParser.ID:
	            this.enterOuterAlt(localctx, 4);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortDirection() {
	    let localctx = new SortDirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, HyperTalkParser.RULE_sortDirection);
	    try {
	        this.state = 958;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HyperTalkParser.T__109:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 955;
	            this.match(HyperTalkParser.T__109);
	            break;
	        case HyperTalkParser.T__110:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 956;
	            this.match(HyperTalkParser.T__110);
	            break;
	        case HyperTalkParser.EOF:
	        case HyperTalkParser.T__8:
	        case HyperTalkParser.T__31:
	        case HyperTalkParser.T__44:
	        case HyperTalkParser.T__70:
	        case HyperTalkParser.T__111:
	        case HyperTalkParser.T__112:
	        case HyperTalkParser.NEWLINE:
	            this.enterOuterAlt(localctx, 3);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortChunkType() {
	    let localctx = new SortChunkTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, HyperTalkParser.RULE_sortChunkType);
	    var _la = 0; // Token type
	    try {
	        this.state = 985;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 961;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__36) {
	                this.state = 960;
	                this.match(HyperTalkParser.T__36);
	            }

	            this.state = 963;
	            this.line();
	            this.state = 964;
	            this.of();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 967;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__36) {
	                this.state = 966;
	                this.match(HyperTalkParser.T__36);
	            }

	            this.state = 969;
	            this.item();
	            this.state = 970;
	            this.of();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 973;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__36) {
	                this.state = 972;
	                this.match(HyperTalkParser.T__36);
	            }

	            this.state = 975;
	            this.word();
	            this.state = 976;
	            this.of();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 979;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__36) {
	                this.state = 978;
	                this.match(HyperTalkParser.T__36);
	            }

	            this.state = 981;
	            this.character();
	            this.state = 982;
	            this.of();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortStyle() {
	    let localctx = new SortStyleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, HyperTalkParser.RULE_sortStyle);
	    try {
	        this.state = 992;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HyperTalkParser.T__70:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 987;
	            this.match(HyperTalkParser.T__70);
	            break;
	        case HyperTalkParser.T__111:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 988;
	            this.match(HyperTalkParser.T__111);
	            break;
	        case HyperTalkParser.T__44:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 989;
	            this.match(HyperTalkParser.T__44);
	            break;
	        case HyperTalkParser.T__112:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 990;
	            this.match(HyperTalkParser.T__112);
	            break;
	        case HyperTalkParser.EOF:
	        case HyperTalkParser.T__8:
	        case HyperTalkParser.T__31:
	        case HyperTalkParser.NEWLINE:
	            this.enterOuterAlt(localctx, 5);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repeatRange() {
	    let localctx = new RepeatRangeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, HyperTalkParser.RULE_repeatRange);
	    try {
	        this.state = 1002;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HyperTalkParser.T__65:
	        case HyperTalkParser.T__91:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 994;
	            this.duration();
	            break;
	        case HyperTalkParser.T__5:
	        case HyperTalkParser.T__19:
	        case HyperTalkParser.T__26:
	        case HyperTalkParser.T__36:
	        case HyperTalkParser.T__37:
	        case HyperTalkParser.T__45:
	        case HyperTalkParser.T__56:
	        case HyperTalkParser.T__61:
	        case HyperTalkParser.T__64:
	        case HyperTalkParser.T__69:
	        case HyperTalkParser.T__77:
	        case HyperTalkParser.T__78:
	        case HyperTalkParser.T__87:
	        case HyperTalkParser.T__88:
	        case HyperTalkParser.T__96:
	        case HyperTalkParser.T__101:
	        case HyperTalkParser.T__103:
	        case HyperTalkParser.T__104:
	        case HyperTalkParser.T__105:
	        case HyperTalkParser.T__106:
	        case HyperTalkParser.T__107:
	        case HyperTalkParser.T__108:
	        case HyperTalkParser.T__116:
	        case HyperTalkParser.T__117:
	        case HyperTalkParser.T__119:
	        case HyperTalkParser.T__120:
	        case HyperTalkParser.T__121:
	        case HyperTalkParser.T__122:
	        case HyperTalkParser.T__124:
	        case HyperTalkParser.T__125:
	        case HyperTalkParser.T__126:
	        case HyperTalkParser.T__127:
	        case HyperTalkParser.T__128:
	        case HyperTalkParser.T__129:
	        case HyperTalkParser.T__130:
	        case HyperTalkParser.T__131:
	        case HyperTalkParser.T__159:
	        case HyperTalkParser.T__161:
	        case HyperTalkParser.T__162:
	        case HyperTalkParser.T__164:
	        case HyperTalkParser.T__165:
	        case HyperTalkParser.T__166:
	        case HyperTalkParser.T__172:
	        case HyperTalkParser.T__173:
	        case HyperTalkParser.T__176:
	        case HyperTalkParser.T__180:
	        case HyperTalkParser.T__181:
	        case HyperTalkParser.T__184:
	        case HyperTalkParser.T__189:
	        case HyperTalkParser.T__195:
	        case HyperTalkParser.T__196:
	        case HyperTalkParser.T__197:
	        case HyperTalkParser.T__198:
	        case HyperTalkParser.T__200:
	        case HyperTalkParser.T__201:
	        case HyperTalkParser.T__202:
	        case HyperTalkParser.T__203:
	        case HyperTalkParser.T__204:
	        case HyperTalkParser.T__205:
	        case HyperTalkParser.T__206:
	        case HyperTalkParser.T__207:
	        case HyperTalkParser.T__208:
	        case HyperTalkParser.T__209:
	        case HyperTalkParser.T__210:
	        case HyperTalkParser.T__211:
	        case HyperTalkParser.T__212:
	        case HyperTalkParser.T__213:
	        case HyperTalkParser.T__214:
	        case HyperTalkParser.T__215:
	        case HyperTalkParser.T__216:
	        case HyperTalkParser.T__217:
	        case HyperTalkParser.T__218:
	        case HyperTalkParser.T__219:
	        case HyperTalkParser.T__220:
	        case HyperTalkParser.T__221:
	        case HyperTalkParser.T__223:
	        case HyperTalkParser.T__224:
	        case HyperTalkParser.T__225:
	        case HyperTalkParser.T__226:
	        case HyperTalkParser.T__227:
	        case HyperTalkParser.T__228:
	        case HyperTalkParser.T__229:
	        case HyperTalkParser.T__230:
	        case HyperTalkParser.T__231:
	        case HyperTalkParser.T__232:
	        case HyperTalkParser.T__233:
	        case HyperTalkParser.T__234:
	        case HyperTalkParser.T__235:
	        case HyperTalkParser.T__236:
	        case HyperTalkParser.T__237:
	        case HyperTalkParser.T__238:
	        case HyperTalkParser.T__239:
	        case HyperTalkParser.T__240:
	        case HyperTalkParser.T__241:
	        case HyperTalkParser.T__242:
	        case HyperTalkParser.T__243:
	        case HyperTalkParser.T__244:
	        case HyperTalkParser.T__245:
	        case HyperTalkParser.T__246:
	        case HyperTalkParser.T__247:
	        case HyperTalkParser.T__248:
	        case HyperTalkParser.T__249:
	        case HyperTalkParser.T__250:
	        case HyperTalkParser.T__251:
	        case HyperTalkParser.T__252:
	        case HyperTalkParser.T__253:
	        case HyperTalkParser.T__254:
	        case HyperTalkParser.T__255:
	        case HyperTalkParser.T__256:
	        case HyperTalkParser.T__257:
	        case HyperTalkParser.T__258:
	        case HyperTalkParser.T__259:
	        case HyperTalkParser.T__260:
	        case HyperTalkParser.T__261:
	        case HyperTalkParser.T__262:
	        case HyperTalkParser.T__263:
	        case HyperTalkParser.T__264:
	        case HyperTalkParser.T__265:
	        case HyperTalkParser.T__266:
	        case HyperTalkParser.T__267:
	        case HyperTalkParser.T__268:
	        case HyperTalkParser.T__269:
	        case HyperTalkParser.T__270:
	        case HyperTalkParser.T__271:
	        case HyperTalkParser.T__272:
	        case HyperTalkParser.T__273:
	        case HyperTalkParser.T__274:
	        case HyperTalkParser.T__275:
	        case HyperTalkParser.T__276:
	        case HyperTalkParser.T__287:
	        case HyperTalkParser.T__292:
	        case HyperTalkParser.T__293:
	        case HyperTalkParser.T__295:
	        case HyperTalkParser.T__296:
	        case HyperTalkParser.T__297:
	        case HyperTalkParser.T__298:
	        case HyperTalkParser.T__299:
	        case HyperTalkParser.T__301:
	        case HyperTalkParser.T__302:
	        case HyperTalkParser.T__306:
	        case HyperTalkParser.T__307:
	        case HyperTalkParser.T__308:
	        case HyperTalkParser.T__312:
	        case HyperTalkParser.T__313:
	        case HyperTalkParser.T__314:
	        case HyperTalkParser.T__315:
	        case HyperTalkParser.T__316:
	        case HyperTalkParser.T__317:
	        case HyperTalkParser.T__318:
	        case HyperTalkParser.T__319:
	        case HyperTalkParser.T__320:
	        case HyperTalkParser.T__321:
	        case HyperTalkParser.T__322:
	        case HyperTalkParser.T__323:
	        case HyperTalkParser.T__324:
	        case HyperTalkParser.T__325:
	        case HyperTalkParser.T__326:
	        case HyperTalkParser.T__327:
	        case HyperTalkParser.T__328:
	        case HyperTalkParser.T__329:
	        case HyperTalkParser.T__330:
	        case HyperTalkParser.T__331:
	        case HyperTalkParser.ID:
	        case HyperTalkParser.LITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 995;
	            this.count();
	            break;
	        case HyperTalkParser.T__13:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 996;
	            this.match(HyperTalkParser.T__13);
	            this.state = 997;
	            this.match(HyperTalkParser.ID);
	            this.state = 998;
	            this.match(HyperTalkParser.T__113);
	            this.state = 999;
	            this.range();
	            break;
	        case HyperTalkParser.T__114:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1000;
	            this.match(HyperTalkParser.T__114);
	            break;
	        case HyperTalkParser.NEWLINE:
	            this.enterOuterAlt(localctx, 5);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	duration() {
	    let localctx = new DurationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, HyperTalkParser.RULE_duration);
	    try {
	        this.state = 1008;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HyperTalkParser.T__65:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1004;
	            this.match(HyperTalkParser.T__65);
	            this.state = 1005;
	            this.expression(0);
	            break;
	        case HyperTalkParser.T__91:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1006;
	            this.match(HyperTalkParser.T__91);
	            this.state = 1007;
	            this.expression(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	count() {
	    let localctx = new CountContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, HyperTalkParser.RULE_count);
	    try {
	        this.state = 1020;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1010;
	            this.match(HyperTalkParser.T__64);
	            this.state = 1011;
	            this.expression(0);
	            this.state = 1012;
	            this.match(HyperTalkParser.T__115);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1014;
	            this.match(HyperTalkParser.T__64);
	            this.state = 1015;
	            this.expression(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1016;
	            this.expression(0);
	            this.state = 1017;
	            this.match(HyperTalkParser.T__115);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1019;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	range() {
	    let localctx = new RangeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, HyperTalkParser.RULE_range);
	    try {
	        this.state = 1031;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1022;
	            this.expression(0);
	            this.state = 1023;
	            this.match(HyperTalkParser.T__116);
	            this.state = 1024;
	            this.match(HyperTalkParser.T__11);
	            this.state = 1025;
	            this.expression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1027;
	            this.expression(0);
	            this.state = 1028;
	            this.match(HyperTalkParser.T__11);
	            this.state = 1029;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	chunk(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ChunkContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 56;
	    this.enterRecursionRule(localctx, 56, HyperTalkParser.RULE_chunk, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1090;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1034;
	            this.ordinal();
	            this.state = 1035;
	            this.character();
	            this.state = 1036;
	            this.of();
	            break;

	        case 2:
	            this.state = 1038;
	            this.character();
	            this.state = 1039;
	            this.expression(0);
	            this.state = 1040;
	            this.match(HyperTalkParser.T__11);
	            this.state = 1041;
	            this.expression(0);
	            this.state = 1042;
	            this.of();
	            break;

	        case 3:
	            this.state = 1044;
	            this.character();
	            this.state = 1045;
	            this.expression(0);
	            this.state = 1046;
	            this.of();
	            break;

	        case 4:
	            this.state = 1048;
	            this.ordinal();
	            this.state = 1049;
	            this.word();
	            this.state = 1050;
	            this.of();
	            break;

	        case 5:
	            this.state = 1052;
	            this.word();
	            this.state = 1053;
	            this.expression(0);
	            this.state = 1054;
	            this.match(HyperTalkParser.T__11);
	            this.state = 1055;
	            this.expression(0);
	            this.state = 1056;
	            this.of();
	            break;

	        case 6:
	            this.state = 1058;
	            this.word();
	            this.state = 1059;
	            this.expression(0);
	            this.state = 1060;
	            this.of();
	            break;

	        case 7:
	            this.state = 1062;
	            this.ordinal();
	            this.state = 1063;
	            this.item();
	            this.state = 1064;
	            this.of();
	            break;

	        case 8:
	            this.state = 1066;
	            this.item();
	            this.state = 1067;
	            this.expression(0);
	            this.state = 1068;
	            this.match(HyperTalkParser.T__11);
	            this.state = 1069;
	            this.expression(0);
	            this.state = 1070;
	            this.of();
	            break;

	        case 9:
	            this.state = 1072;
	            this.item();
	            this.state = 1073;
	            this.expression(0);
	            this.state = 1074;
	            this.of();
	            break;

	        case 10:
	            this.state = 1076;
	            this.ordinal();
	            this.state = 1077;
	            this.line();
	            this.state = 1078;
	            this.of();
	            break;

	        case 11:
	            this.state = 1080;
	            this.line();
	            this.state = 1081;
	            this.expression(0);
	            this.state = 1082;
	            this.match(HyperTalkParser.T__11);
	            this.state = 1083;
	            this.expression(0);
	            this.state = 1084;
	            this.of();
	            break;

	        case 12:
	            this.state = 1086;
	            this.line();
	            this.state = 1087;
	            this.expression(0);
	            this.state = 1088;
	            this.of();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1096;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,75,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ChunkContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, HyperTalkParser.RULE_chunk);
	                this.state = 1092;
	                if (!( this.precpred(this._ctx, 13))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                }
	                this.state = 1093;
	                this.chunk(14); 
	            }
	            this.state = 1098;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,75,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	menu() {
	    let localctx = new MenuContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, HyperTalkParser.RULE_menu);
	    try {
	        this.state = 1104;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HyperTalkParser.T__26:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1099;
	            this.match(HyperTalkParser.T__26);
	            this.state = 1100;
	            this.factor();
	            break;
	        case HyperTalkParser.T__36:
	        case HyperTalkParser.T__242:
	        case HyperTalkParser.T__243:
	        case HyperTalkParser.T__244:
	        case HyperTalkParser.T__245:
	        case HyperTalkParser.T__246:
	        case HyperTalkParser.T__247:
	        case HyperTalkParser.T__248:
	        case HyperTalkParser.T__249:
	        case HyperTalkParser.T__250:
	        case HyperTalkParser.T__251:
	        case HyperTalkParser.T__252:
	        case HyperTalkParser.T__253:
	        case HyperTalkParser.T__254:
	        case HyperTalkParser.T__255:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1101;
	            this.ordinal();
	            this.state = 1102;
	            this.match(HyperTalkParser.T__26);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	menuItem() {
	    let localctx = new MenuItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, HyperTalkParser.RULE_menuItem);
	    try {
	        this.state = 1116;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HyperTalkParser.T__117:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1106;
	            this.match(HyperTalkParser.T__117);
	            this.state = 1107;
	            this.factor();
	            this.state = 1108;
	            this.of();
	            this.state = 1109;
	            this.menu();
	            break;
	        case HyperTalkParser.T__36:
	        case HyperTalkParser.T__242:
	        case HyperTalkParser.T__243:
	        case HyperTalkParser.T__244:
	        case HyperTalkParser.T__245:
	        case HyperTalkParser.T__246:
	        case HyperTalkParser.T__247:
	        case HyperTalkParser.T__248:
	        case HyperTalkParser.T__249:
	        case HyperTalkParser.T__250:
	        case HyperTalkParser.T__251:
	        case HyperTalkParser.T__252:
	        case HyperTalkParser.T__253:
	        case HyperTalkParser.T__254:
	        case HyperTalkParser.T__255:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1111;
	            this.ordinal();
	            this.state = 1112;
	            this.match(HyperTalkParser.T__117);
	            this.state = 1113;
	            this.of();
	            this.state = 1114;
	            this.menu();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	property() {
	    let localctx = new PropertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, HyperTalkParser.RULE_property);
	    try {
	        this.state = 1120;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1118;
	            this.partProperty();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1119;
	            this.globalProperty();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	globalProperty() {
	    let localctx = new GlobalPropertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, HyperTalkParser.RULE_globalProperty);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1123;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HyperTalkParser.T__36) {
	            this.state = 1122;
	            this.match(HyperTalkParser.T__36);
	        }

	        this.state = 1125;
	        this.propertyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partProperty() {
	    let localctx = new PartPropertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, HyperTalkParser.RULE_partProperty);
	    var _la = 0; // Token type
	    try {
	        this.state = 1142;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1128;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__36) {
	                this.state = 1127;
	                this.match(HyperTalkParser.T__36);
	            }

	            this.state = 1130;
	            this.propertyName();
	            this.state = 1131;
	            this.of();
	            this.state = 1132;
	            this.factor();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1135;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__36) {
	                this.state = 1134;
	                this.match(HyperTalkParser.T__36);
	            }

	            this.state = 1137;
	            this.length();
	            this.state = 1138;
	            this.propertyName();
	            this.state = 1139;
	            this.of();
	            this.state = 1140;
	            this.factor();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	part() {
	    let localctx = new PartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, HyperTalkParser.RULE_part);
	    try {
	        this.state = 1160;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1144;
	            this.message();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1145;
	            this.card();
	            this.state = 1146;
	            this.match(HyperTalkParser.T__118);
	            this.state = 1147;
	            this.factor();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1149;
	            this.background();
	            this.state = 1150;
	            this.match(HyperTalkParser.T__118);
	            this.state = 1151;
	            this.factor();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1153;
	            this.match(HyperTalkParser.T__119);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1154;
	            this.buttonPart(0);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1155;
	            this.fieldPart(0);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1156;
	            this.bkgndPart(0);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1157;
	            this.cardPart(0);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1158;
	            this.stackPart();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1159;
	            this.windowPart();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stackPart() {
	    let localctx = new StackPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, HyperTalkParser.RULE_stackPart);
	    var _la = 0; // Token type
	    try {
	        this.state = 1169;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1163;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__77) {
	                this.state = 1162;
	                this.match(HyperTalkParser.T__77);
	            }

	            this.state = 1165;
	            this.stack();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1166;
	            this.stack();
	            this.state = 1167;
	            this.factor();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	buttonPart(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ButtonPartContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 72;
	    this.enterRecursionRule(localctx, 72, HyperTalkParser.RULE_buttonPart, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1204;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1173;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__287 || _la===HyperTalkParser.T__312) {
	                this.state = 1172;
	                this.card();
	            }

	            this.state = 1175;
	            this.button();
	            this.state = 1176;
	            this.match(HyperTalkParser.T__120);
	            this.state = 1177;
	            this.factor();
	            break;

	        case 2:
	            this.state = 1179;
	            this.background();
	            this.state = 1180;
	            this.button();
	            this.state = 1181;
	            this.match(HyperTalkParser.T__120);
	            this.state = 1182;
	            this.factor();
	            break;

	        case 3:
	            this.state = 1185;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__287 || _la===HyperTalkParser.T__312) {
	                this.state = 1184;
	                this.card();
	            }

	            this.state = 1187;
	            this.button();
	            this.state = 1188;
	            this.factor();
	            break;

	        case 4:
	            this.state = 1190;
	            this.background();
	            this.state = 1191;
	            this.button();
	            this.state = 1192;
	            this.factor();
	            break;

	        case 5:
	            this.state = 1194;
	            this.ordinal();
	            this.state = 1196;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__287 || _la===HyperTalkParser.T__312) {
	                this.state = 1195;
	                this.card();
	            }

	            this.state = 1198;
	            this.button();
	            break;

	        case 6:
	            this.state = 1200;
	            this.ordinal();
	            this.state = 1201;
	            this.background();
	            this.state = 1202;
	            this.button();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1212;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ButtonPartContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, HyperTalkParser.RULE_buttonPart);
	                this.state = 1206;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1207;
	                this.of();
	                this.state = 1208;
	                this.cardPart(0); 
	            }
	            this.state = 1214;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	fieldPart(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new FieldPartContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 74;
	    this.enterRecursionRule(localctx, 74, HyperTalkParser.RULE_fieldPart, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1248;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1216;
	            this.card();
	            this.state = 1217;
	            this.field();
	            this.state = 1218;
	            this.match(HyperTalkParser.T__120);
	            this.state = 1219;
	            this.factor();
	            break;

	        case 2:
	            this.state = 1222;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 314)) & ~0x1f) == 0 && ((1 << (_la - 314)) & ((1 << (HyperTalkParser.T__313 - 314)) | (1 << (HyperTalkParser.T__314 - 314)) | (1 << (HyperTalkParser.T__315 - 314)) | (1 << (HyperTalkParser.T__316 - 314)) | (1 << (HyperTalkParser.T__317 - 314)) | (1 << (HyperTalkParser.T__318 - 314)))) !== 0)) {
	                this.state = 1221;
	                this.background();
	            }

	            this.state = 1224;
	            this.field();
	            this.state = 1225;
	            this.match(HyperTalkParser.T__120);
	            this.state = 1226;
	            this.factor();
	            break;

	        case 3:
	            this.state = 1228;
	            this.card();
	            this.state = 1229;
	            this.field();
	            this.state = 1230;
	            this.factor();
	            break;

	        case 4:
	            this.state = 1233;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 314)) & ~0x1f) == 0 && ((1 << (_la - 314)) & ((1 << (HyperTalkParser.T__313 - 314)) | (1 << (HyperTalkParser.T__314 - 314)) | (1 << (HyperTalkParser.T__315 - 314)) | (1 << (HyperTalkParser.T__316 - 314)) | (1 << (HyperTalkParser.T__317 - 314)) | (1 << (HyperTalkParser.T__318 - 314)))) !== 0)) {
	                this.state = 1232;
	                this.background();
	            }

	            this.state = 1235;
	            this.field();
	            this.state = 1236;
	            this.factor();
	            break;

	        case 5:
	            this.state = 1238;
	            this.ordinal();
	            this.state = 1239;
	            this.card();
	            this.state = 1240;
	            this.field();
	            break;

	        case 6:
	            this.state = 1242;
	            this.ordinal();
	            this.state = 1244;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 314)) & ~0x1f) == 0 && ((1 << (_la - 314)) & ((1 << (HyperTalkParser.T__313 - 314)) | (1 << (HyperTalkParser.T__314 - 314)) | (1 << (HyperTalkParser.T__315 - 314)) | (1 << (HyperTalkParser.T__316 - 314)) | (1 << (HyperTalkParser.T__317 - 314)) | (1 << (HyperTalkParser.T__318 - 314)))) !== 0)) {
	                this.state = 1243;
	                this.background();
	            }

	            this.state = 1246;
	            this.field();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1256;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,95,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new FieldPartContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, HyperTalkParser.RULE_fieldPart);
	                this.state = 1250;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1251;
	                this.of();
	                this.state = 1252;
	                this.cardPart(0); 
	            }
	            this.state = 1258;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,95,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	cardPart(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new CardPartContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 76;
	    this.enterRecursionRule(localctx, 76, HyperTalkParser.RULE_cardPart, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1277;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1261;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__77) {
	                this.state = 1260;
	                this.match(HyperTalkParser.T__77);
	            }

	            this.state = 1263;
	            this.card();
	            break;

	        case 2:
	            this.state = 1264;
	            this.card();
	            this.state = 1265;
	            this.match(HyperTalkParser.T__120);
	            this.state = 1266;
	            this.factor();
	            break;

	        case 3:
	            this.state = 1268;
	            this.position();
	            this.state = 1269;
	            this.card();
	            break;

	        case 4:
	            this.state = 1271;
	            this.ordinal();
	            this.state = 1272;
	            this.card();
	            break;

	        case 5:
	            this.state = 1274;
	            this.card();
	            this.state = 1275;
	            this.factor();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1289;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,99,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1287;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new CardPartContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, HyperTalkParser.RULE_cardPart);
	                    this.state = 1279;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 1280;
	                    this.of();
	                    this.state = 1281;
	                    this.bkgndPart(0);
	                    break;

	                case 2:
	                    localctx = new CardPartContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, HyperTalkParser.RULE_cardPart);
	                    this.state = 1283;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 1284;
	                    this.of();
	                    this.state = 1285;
	                    this.stackPart();
	                    break;

	                } 
	            }
	            this.state = 1291;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,99,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	bkgndPart(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new BkgndPartContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 78;
	    this.enterRecursionRule(localctx, 78, HyperTalkParser.RULE_bkgndPart, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1310;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1294;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__77) {
	                this.state = 1293;
	                this.match(HyperTalkParser.T__77);
	            }

	            this.state = 1296;
	            this.background();
	            break;

	        case 2:
	            this.state = 1297;
	            this.background();
	            this.state = 1298;
	            this.match(HyperTalkParser.T__120);
	            this.state = 1299;
	            this.factor();
	            break;

	        case 3:
	            this.state = 1301;
	            this.background();
	            this.state = 1302;
	            this.factor();
	            break;

	        case 4:
	            this.state = 1304;
	            this.ordinal();
	            this.state = 1305;
	            this.background();
	            break;

	        case 5:
	            this.state = 1307;
	            this.position();
	            this.state = 1308;
	            this.background();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1318;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,102,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new BkgndPartContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, HyperTalkParser.RULE_bkgndPart);
	                this.state = 1312;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1313;
	                this.of();
	                this.state = 1314;
	                this.stackPart(); 
	            }
	            this.state = 1320;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,102,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	windowPart() {
	    let localctx = new WindowPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, HyperTalkParser.RULE_windowPart);
	    var _la = 0; // Token type
	    try {
	        this.state = 1352;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1322;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__36) {
	                this.state = 1321;
	                this.match(HyperTalkParser.T__36);
	            }

	            this.state = 1324;
	            this.card();
	            this.state = 1325;
	            this.match(HyperTalkParser.T__96);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1328;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__36) {
	                this.state = 1327;
	                this.match(HyperTalkParser.T__36);
	            }

	            this.state = 1330;
	            this.match(HyperTalkParser.T__19);
	            this.state = 1331;
	            this.match(HyperTalkParser.T__96);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1333;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__36) {
	                this.state = 1332;
	                this.match(HyperTalkParser.T__36);
	            }

	            this.state = 1335;
	            this.match(HyperTalkParser.T__121);
	            this.state = 1336;
	            this.match(HyperTalkParser.T__96);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1338;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__36) {
	                this.state = 1337;
	                this.match(HyperTalkParser.T__36);
	            }

	            this.state = 1340;
	            this.match(HyperTalkParser.T__122);
	            this.state = 1341;
	            this.match(HyperTalkParser.T__123);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1343;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__36) {
	                this.state = 1342;
	                this.match(HyperTalkParser.T__36);
	            }

	            this.state = 1345;
	            this.match(HyperTalkParser.T__124);
	            this.state = 1346;
	            this.match(HyperTalkParser.T__123);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1347;
	            this.match(HyperTalkParser.T__96);
	            this.state = 1348;
	            this.expression(0);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1349;
	            this.match(HyperTalkParser.T__96);
	            this.state = 1350;
	            this.match(HyperTalkParser.T__120);
	            this.state = 1351;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listExpression() {
	    let localctx = new ListExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, HyperTalkParser.RULE_listExpression);
	    try {
	        this.state = 1359;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1354;
	            this.expression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1355;
	            this.expression(0);
	            this.state = 1356;
	            this.match(HyperTalkParser.T__3);
	            this.state = 1357;
	            this.listExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 84;
	    this.enterRecursionRule(localctx, 84, HyperTalkParser.RULE_expression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1369;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1362;
	            this.factor();
	            break;

	        case 2:
	            this.state = 1363;
	            this.match(HyperTalkParser.T__125);
	            this.state = 1364;
	            this.expression(11);
	            break;

	        case 3:
	            this.state = 1365;
	            this.match(HyperTalkParser.T__126);
	            this.state = 1366;
	            this.expression(10);
	            break;

	        case 4:
	            this.state = 1367;
	            localctx.op = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (HyperTalkParser.T__127 - 128)) | (1 << (HyperTalkParser.T__128 - 128)) | (1 << (HyperTalkParser.T__129 - 128)) | (1 << (HyperTalkParser.T__130 - 128)) | (1 << (HyperTalkParser.T__131 - 128)))) !== 0))) {
	                localctx.op = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1368;
	            this.expression(9);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1397;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,112,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1395;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, HyperTalkParser.RULE_expression);
	                    this.state = 1371;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 1372;
	                    this.match(HyperTalkParser.T__132);
	                    this.state = 1373;
	                    this.expression(9);
	                    break;

	                case 2:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, HyperTalkParser.RULE_expression);
	                    this.state = 1374;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 1375;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (HyperTalkParser.T__133 - 134)) | (1 << (HyperTalkParser.T__134 - 134)) | (1 << (HyperTalkParser.T__135 - 134)) | (1 << (HyperTalkParser.T__136 - 134)))) !== 0))) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1376;
	                    this.expression(8);
	                    break;

	                case 3:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, HyperTalkParser.RULE_expression);
	                    this.state = 1377;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 1378;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===HyperTalkParser.T__126 || _la===HyperTalkParser.T__137)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1379;
	                    this.expression(7);
	                    break;

	                case 4:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, HyperTalkParser.RULE_expression);
	                    this.state = 1380;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 1381;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===HyperTalkParser.T__138 || _la===HyperTalkParser.T__139)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1382;
	                    this.expression(6);
	                    break;

	                case 5:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, HyperTalkParser.RULE_expression);
	                    this.state = 1383;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 1384;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 141)) & ~0x1f) == 0 && ((1 << (_la - 141)) & ((1 << (HyperTalkParser.T__140 - 141)) | (1 << (HyperTalkParser.T__141 - 141)) | (1 << (HyperTalkParser.T__142 - 141)) | (1 << (HyperTalkParser.T__143 - 141)) | (1 << (HyperTalkParser.T__144 - 141)) | (1 << (HyperTalkParser.T__145 - 141)) | (1 << (HyperTalkParser.T__146 - 141)) | (1 << (HyperTalkParser.T__147 - 141)) | (1 << (HyperTalkParser.T__148 - 141)) | (1 << (HyperTalkParser.T__149 - 141)) | (1 << (HyperTalkParser.T__150 - 141)) | (1 << (HyperTalkParser.T__151 - 141)) | (1 << (HyperTalkParser.T__152 - 141)) | (1 << (HyperTalkParser.T__153 - 141)) | (1 << (HyperTalkParser.T__154 - 141)))) !== 0))) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1385;
	                    this.expression(5);
	                    break;

	                case 6:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, HyperTalkParser.RULE_expression);
	                    this.state = 1386;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 1387;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===HyperTalkParser.T__113 || ((((_la - 156)) & ~0x1f) == 0 && ((1 << (_la - 156)) & ((1 << (HyperTalkParser.T__155 - 156)) | (1 << (HyperTalkParser.T__156 - 156)) | (1 << (HyperTalkParser.T__157 - 156)) | (1 << (HyperTalkParser.T__158 - 156)))) !== 0))) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1388;
	                    this.expression(4);
	                    break;

	                case 7:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, HyperTalkParser.RULE_expression);
	                    this.state = 1389;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 1390;
	                    this.match(HyperTalkParser.T__99);
	                    this.state = 1391;
	                    this.expression(3);
	                    break;

	                case 8:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, HyperTalkParser.RULE_expression);
	                    this.state = 1392;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 1393;
	                    this.match(HyperTalkParser.T__14);
	                    this.state = 1394;
	                    this.expression(2);
	                    break;

	                } 
	            }
	            this.state = 1399;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,112,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	factor() {
	    let localctx = new FactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, HyperTalkParser.RULE_factor);
	    try {
	        this.state = 1413;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1400;
	            this.literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1401;
	            this.match(HyperTalkParser.T__126);
	            this.state = 1402;
	            this.literal();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1403;
	            this.match(HyperTalkParser.T__159);
	            this.state = 1404;
	            this.expression(0);
	            this.state = 1405;
	            this.match(HyperTalkParser.T__160);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1407;
	            this.effectExpression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1408;
	            this.functionCall();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1409;
	            this.container();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1410;
	            this.chunk(0);
	            this.state = 1411;
	            this.factor();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	container() {
	    let localctx = new ContainerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, HyperTalkParser.RULE_container);
	    var _la = 0; // Token type
	    try {
	        this.state = 1428;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1415;
	            this.match(HyperTalkParser.ID);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1417;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__36) {
	                this.state = 1416;
	                this.match(HyperTalkParser.T__36);
	            }

	            this.state = 1419;
	            this.match(HyperTalkParser.T__161);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1420;
	            this.match(HyperTalkParser.T__162);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1421;
	            this.property();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1422;
	            this.menu();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1423;
	            this.menuItem();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1424;
	            this.part();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1425;
	            this.chunk(0);
	            this.state = 1426;
	            this.container();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	musicExpression() {
	    let localctx = new MusicExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, HyperTalkParser.RULE_musicExpression);
	    try {
	        this.state = 1443;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1430;
	            this.expression(0);
	            this.state = 1431;
	            this.expression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1433;
	            this.expression(0);
	            this.state = 1434;
	            this.match(HyperTalkParser.T__163);
	            this.state = 1435;
	            this.expression(0);
	            this.state = 1436;
	            this.expression(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1438;
	            this.expression(0);
	            this.state = 1439;
	            this.match(HyperTalkParser.T__163);
	            this.state = 1440;
	            this.expression(0);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1442;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	toolExpression() {
	    let localctx = new ToolExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, HyperTalkParser.RULE_toolExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 1463;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1445;
	            this.match(HyperTalkParser.T__70);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1446;
	            this.match(HyperTalkParser.T__68);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1447;
	            this.match(HyperTalkParser.T__164);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1448;
	            this.match(HyperTalkParser.T__165);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1449;
	            this.match(HyperTalkParser.T__166);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1451;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__167 || _la===HyperTalkParser.T__168) {
	                this.state = 1450;
	                _la = this._input.LA(1);
	                if(!(_la===HyperTalkParser.T__167 || _la===HyperTalkParser.T__168)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 1453;
	            _la = this._input.LA(1);
	            if(!(_la===HyperTalkParser.T__169 || _la===HyperTalkParser.T__170)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1455;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__171) {
	                this.state = 1454;
	                this.match(HyperTalkParser.T__171);
	            }

	            this.state = 1457;
	            _la = this._input.LA(1);
	            if(!(_la===HyperTalkParser.T__172 || _la===HyperTalkParser.T__173)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1458;
	            this.match(HyperTalkParser.T__174);
	            this.state = 1460;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__175) {
	                this.state = 1459;
	                this.match(HyperTalkParser.T__175);
	            }

	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1462;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	effectExpression() {
	    let localctx = new EffectExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, HyperTalkParser.RULE_effectExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 1490;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1466;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__176) {
	                this.state = 1465;
	                this.match(HyperTalkParser.T__176);
	            }

	            this.state = 1468;
	            this.effect();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1470;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__176) {
	                this.state = 1469;
	                this.match(HyperTalkParser.T__176);
	            }

	            this.state = 1472;
	            this.effect();
	            this.state = 1473;
	            this.match(HyperTalkParser.T__11);
	            this.state = 1474;
	            this.image();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1477;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__176) {
	                this.state = 1476;
	                this.match(HyperTalkParser.T__176);
	            }

	            this.state = 1479;
	            this.effect();
	            this.state = 1480;
	            this.speed();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1483;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__176) {
	                this.state = 1482;
	                this.match(HyperTalkParser.T__176);
	            }

	            this.state = 1485;
	            this.effect();
	            this.state = 1486;
	            this.speed();
	            this.state = 1487;
	            this.match(HyperTalkParser.T__11);
	            this.state = 1488;
	            this.image();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionCall() {
	    let localctx = new FunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, HyperTalkParser.RULE_functionCall);
	    var _la = 0; // Token type
	    try {
	        this.state = 1499;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HyperTalkParser.T__36:
	        case HyperTalkParser.T__184:
	        case HyperTalkParser.T__189:
	        case HyperTalkParser.T__195:
	        case HyperTalkParser.T__196:
	        case HyperTalkParser.T__197:
	        case HyperTalkParser.T__198:
	        case HyperTalkParser.T__200:
	        case HyperTalkParser.T__201:
	        case HyperTalkParser.T__202:
	        case HyperTalkParser.T__203:
	        case HyperTalkParser.T__204:
	        case HyperTalkParser.T__205:
	        case HyperTalkParser.T__206:
	        case HyperTalkParser.T__207:
	        case HyperTalkParser.T__208:
	        case HyperTalkParser.T__209:
	        case HyperTalkParser.T__210:
	        case HyperTalkParser.T__211:
	        case HyperTalkParser.T__212:
	        case HyperTalkParser.T__213:
	        case HyperTalkParser.T__214:
	        case HyperTalkParser.T__215:
	        case HyperTalkParser.T__216:
	        case HyperTalkParser.T__217:
	        case HyperTalkParser.T__218:
	        case HyperTalkParser.T__219:
	        case HyperTalkParser.T__220:
	        case HyperTalkParser.T__221:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1492;
	            this.builtInFunc();
	            break;
	        case HyperTalkParser.ID:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1493;
	            this.match(HyperTalkParser.ID);
	            this.state = 1494;
	            this.match(HyperTalkParser.T__159);
	            this.state = 1496;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << HyperTalkParser.T__5) | (1 << HyperTalkParser.T__19) | (1 << HyperTalkParser.T__26))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (HyperTalkParser.T__36 - 37)) | (1 << (HyperTalkParser.T__37 - 37)) | (1 << (HyperTalkParser.T__45 - 37)) | (1 << (HyperTalkParser.T__56 - 37)) | (1 << (HyperTalkParser.T__61 - 37)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (HyperTalkParser.T__69 - 70)) | (1 << (HyperTalkParser.T__77 - 70)) | (1 << (HyperTalkParser.T__78 - 70)) | (1 << (HyperTalkParser.T__87 - 70)) | (1 << (HyperTalkParser.T__88 - 70)) | (1 << (HyperTalkParser.T__96 - 70)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (HyperTalkParser.T__101 - 102)) | (1 << (HyperTalkParser.T__103 - 102)) | (1 << (HyperTalkParser.T__104 - 102)) | (1 << (HyperTalkParser.T__105 - 102)) | (1 << (HyperTalkParser.T__106 - 102)) | (1 << (HyperTalkParser.T__107 - 102)) | (1 << (HyperTalkParser.T__108 - 102)) | (1 << (HyperTalkParser.T__116 - 102)) | (1 << (HyperTalkParser.T__117 - 102)) | (1 << (HyperTalkParser.T__119 - 102)) | (1 << (HyperTalkParser.T__120 - 102)) | (1 << (HyperTalkParser.T__121 - 102)) | (1 << (HyperTalkParser.T__122 - 102)) | (1 << (HyperTalkParser.T__124 - 102)) | (1 << (HyperTalkParser.T__125 - 102)) | (1 << (HyperTalkParser.T__126 - 102)) | (1 << (HyperTalkParser.T__127 - 102)) | (1 << (HyperTalkParser.T__128 - 102)) | (1 << (HyperTalkParser.T__129 - 102)) | (1 << (HyperTalkParser.T__130 - 102)) | (1 << (HyperTalkParser.T__131 - 102)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (HyperTalkParser.T__159 - 160)) | (1 << (HyperTalkParser.T__161 - 160)) | (1 << (HyperTalkParser.T__162 - 160)) | (1 << (HyperTalkParser.T__164 - 160)) | (1 << (HyperTalkParser.T__165 - 160)) | (1 << (HyperTalkParser.T__166 - 160)) | (1 << (HyperTalkParser.T__172 - 160)) | (1 << (HyperTalkParser.T__173 - 160)) | (1 << (HyperTalkParser.T__176 - 160)) | (1 << (HyperTalkParser.T__180 - 160)) | (1 << (HyperTalkParser.T__181 - 160)) | (1 << (HyperTalkParser.T__184 - 160)) | (1 << (HyperTalkParser.T__189 - 160)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (HyperTalkParser.T__195 - 196)) | (1 << (HyperTalkParser.T__196 - 196)) | (1 << (HyperTalkParser.T__197 - 196)) | (1 << (HyperTalkParser.T__198 - 196)) | (1 << (HyperTalkParser.T__200 - 196)) | (1 << (HyperTalkParser.T__201 - 196)) | (1 << (HyperTalkParser.T__202 - 196)) | (1 << (HyperTalkParser.T__203 - 196)) | (1 << (HyperTalkParser.T__204 - 196)) | (1 << (HyperTalkParser.T__205 - 196)) | (1 << (HyperTalkParser.T__206 - 196)) | (1 << (HyperTalkParser.T__207 - 196)) | (1 << (HyperTalkParser.T__208 - 196)) | (1 << (HyperTalkParser.T__209 - 196)) | (1 << (HyperTalkParser.T__210 - 196)) | (1 << (HyperTalkParser.T__211 - 196)) | (1 << (HyperTalkParser.T__212 - 196)) | (1 << (HyperTalkParser.T__213 - 196)) | (1 << (HyperTalkParser.T__214 - 196)) | (1 << (HyperTalkParser.T__215 - 196)) | (1 << (HyperTalkParser.T__216 - 196)) | (1 << (HyperTalkParser.T__217 - 196)) | (1 << (HyperTalkParser.T__218 - 196)) | (1 << (HyperTalkParser.T__219 - 196)) | (1 << (HyperTalkParser.T__220 - 196)) | (1 << (HyperTalkParser.T__221 - 196)) | (1 << (HyperTalkParser.T__223 - 196)) | (1 << (HyperTalkParser.T__224 - 196)) | (1 << (HyperTalkParser.T__225 - 196)) | (1 << (HyperTalkParser.T__226 - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (HyperTalkParser.T__227 - 228)) | (1 << (HyperTalkParser.T__228 - 228)) | (1 << (HyperTalkParser.T__229 - 228)) | (1 << (HyperTalkParser.T__230 - 228)) | (1 << (HyperTalkParser.T__231 - 228)) | (1 << (HyperTalkParser.T__232 - 228)) | (1 << (HyperTalkParser.T__233 - 228)) | (1 << (HyperTalkParser.T__234 - 228)) | (1 << (HyperTalkParser.T__235 - 228)) | (1 << (HyperTalkParser.T__236 - 228)) | (1 << (HyperTalkParser.T__237 - 228)) | (1 << (HyperTalkParser.T__238 - 228)) | (1 << (HyperTalkParser.T__239 - 228)) | (1 << (HyperTalkParser.T__240 - 228)) | (1 << (HyperTalkParser.T__241 - 228)) | (1 << (HyperTalkParser.T__242 - 228)) | (1 << (HyperTalkParser.T__243 - 228)) | (1 << (HyperTalkParser.T__244 - 228)) | (1 << (HyperTalkParser.T__245 - 228)) | (1 << (HyperTalkParser.T__246 - 228)) | (1 << (HyperTalkParser.T__247 - 228)) | (1 << (HyperTalkParser.T__248 - 228)) | (1 << (HyperTalkParser.T__249 - 228)) | (1 << (HyperTalkParser.T__250 - 228)) | (1 << (HyperTalkParser.T__251 - 228)) | (1 << (HyperTalkParser.T__252 - 228)) | (1 << (HyperTalkParser.T__253 - 228)) | (1 << (HyperTalkParser.T__254 - 228)) | (1 << (HyperTalkParser.T__255 - 228)) | (1 << (HyperTalkParser.T__256 - 228)) | (1 << (HyperTalkParser.T__257 - 228)) | (1 << (HyperTalkParser.T__258 - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (HyperTalkParser.T__259 - 260)) | (1 << (HyperTalkParser.T__260 - 260)) | (1 << (HyperTalkParser.T__261 - 260)) | (1 << (HyperTalkParser.T__262 - 260)) | (1 << (HyperTalkParser.T__263 - 260)) | (1 << (HyperTalkParser.T__264 - 260)) | (1 << (HyperTalkParser.T__265 - 260)) | (1 << (HyperTalkParser.T__266 - 260)) | (1 << (HyperTalkParser.T__267 - 260)) | (1 << (HyperTalkParser.T__268 - 260)) | (1 << (HyperTalkParser.T__269 - 260)) | (1 << (HyperTalkParser.T__270 - 260)) | (1 << (HyperTalkParser.T__271 - 260)) | (1 << (HyperTalkParser.T__272 - 260)) | (1 << (HyperTalkParser.T__273 - 260)) | (1 << (HyperTalkParser.T__274 - 260)) | (1 << (HyperTalkParser.T__275 - 260)) | (1 << (HyperTalkParser.T__276 - 260)) | (1 << (HyperTalkParser.T__287 - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (HyperTalkParser.T__292 - 293)) | (1 << (HyperTalkParser.T__293 - 293)) | (1 << (HyperTalkParser.T__295 - 293)) | (1 << (HyperTalkParser.T__296 - 293)) | (1 << (HyperTalkParser.T__297 - 293)) | (1 << (HyperTalkParser.T__298 - 293)) | (1 << (HyperTalkParser.T__299 - 293)) | (1 << (HyperTalkParser.T__301 - 293)) | (1 << (HyperTalkParser.T__302 - 293)) | (1 << (HyperTalkParser.T__306 - 293)) | (1 << (HyperTalkParser.T__307 - 293)) | (1 << (HyperTalkParser.T__308 - 293)) | (1 << (HyperTalkParser.T__312 - 293)) | (1 << (HyperTalkParser.T__313 - 293)) | (1 << (HyperTalkParser.T__314 - 293)) | (1 << (HyperTalkParser.T__315 - 293)) | (1 << (HyperTalkParser.T__316 - 293)) | (1 << (HyperTalkParser.T__317 - 293)) | (1 << (HyperTalkParser.T__318 - 293)) | (1 << (HyperTalkParser.T__319 - 293)) | (1 << (HyperTalkParser.T__320 - 293)) | (1 << (HyperTalkParser.T__321 - 293)) | (1 << (HyperTalkParser.T__322 - 293)) | (1 << (HyperTalkParser.T__323 - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (HyperTalkParser.T__324 - 325)) | (1 << (HyperTalkParser.T__325 - 325)) | (1 << (HyperTalkParser.T__326 - 325)) | (1 << (HyperTalkParser.T__327 - 325)) | (1 << (HyperTalkParser.T__328 - 325)) | (1 << (HyperTalkParser.T__329 - 325)) | (1 << (HyperTalkParser.T__330 - 325)) | (1 << (HyperTalkParser.T__331 - 325)) | (1 << (HyperTalkParser.ID - 325)) | (1 << (HyperTalkParser.LITERAL - 325)))) !== 0)) {
	                this.state = 1495;
	                this.listExpression();
	            }

	            this.state = 1498;
	            this.match(HyperTalkParser.T__160);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	builtInFunc() {
	    let localctx = new BuiltInFuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, HyperTalkParser.RULE_builtInFunc);
	    var _la = 0; // Token type
	    try {
	        this.state = 1520;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1501;
	            this.match(HyperTalkParser.T__36);
	            this.state = 1502;
	            this.zeroArgFunc();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1504;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__36) {
	                this.state = 1503;
	                this.match(HyperTalkParser.T__36);
	            }

	            this.state = 1506;
	            this.singleArgFunc();
	            this.state = 1507;
	            this.of();
	            this.state = 1508;
	            this.factor();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1510;
	            this.singleArgFunc();
	            this.state = 1511;
	            this.match(HyperTalkParser.T__159);
	            this.state = 1512;
	            this.listExpression();
	            this.state = 1513;
	            this.match(HyperTalkParser.T__160);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1515;
	            this.multiArgFunc();
	            this.state = 1516;
	            this.match(HyperTalkParser.T__159);
	            this.state = 1517;
	            this.listExpression();
	            this.state = 1518;
	            this.match(HyperTalkParser.T__160);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	zeroArgFunc() {
	    let localctx = new ZeroArgFuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, HyperTalkParser.RULE_zeroArgFunc);
	    var _la = 0; // Token type
	    try {
	        this.state = 1596;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1522;
	            this.match(HyperTalkParser.T__177);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1523;
	            this.match(HyperTalkParser.T__178);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1524;
	            this.match(HyperTalkParser.T__179);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1525;
	            _la = this._input.LA(1);
	            if(!(_la===HyperTalkParser.T__87 || _la===HyperTalkParser.T__88)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1526;
	            this.match(HyperTalkParser.T__180);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1527;
	            this.match(HyperTalkParser.T__181);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1528;
	            this.match(HyperTalkParser.T__182);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1529;
	            this.seconds();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1530;
	            this.length();
	            this.state = 1531;
	            this.match(HyperTalkParser.T__102);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1533;
	            this.length();
	            this.state = 1534;
	            this.match(HyperTalkParser.T__101);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1536;
	            this.match(HyperTalkParser.T__19);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1537;
	            this.match(HyperTalkParser.T__183);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1538;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1539;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1541;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__287 || _la===HyperTalkParser.T__312) {
	                this.state = 1540;
	                this.card();
	            }

	            this.state = 1543;
	            this.match(HyperTalkParser.T__186);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1544;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1545;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1546;
	            this.background();
	            this.state = 1547;
	            this.match(HyperTalkParser.T__186);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1549;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1550;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1552;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__287 || _la===HyperTalkParser.T__312) {
	                this.state = 1551;
	                this.card();
	            }

	            this.state = 1554;
	            this.button();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1555;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1556;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1557;
	            this.background();
	            this.state = 1558;
	            this.button();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1560;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1561;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1562;
	            this.card();
	            this.state = 1563;
	            this.field();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1565;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1566;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1568;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 314)) & ~0x1f) == 0 && ((1 << (_la - 314)) & ((1 << (HyperTalkParser.T__313 - 314)) | (1 << (HyperTalkParser.T__314 - 314)) | (1 << (HyperTalkParser.T__315 - 314)) | (1 << (HyperTalkParser.T__316 - 314)) | (1 << (HyperTalkParser.T__317 - 314)) | (1 << (HyperTalkParser.T__318 - 314)))) !== 0)) {
	                this.state = 1567;
	                this.background();
	            }

	            this.state = 1570;
	            this.field();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1571;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1572;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1573;
	            this.cards();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1574;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1575;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1576;
	            this.background();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1577;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1578;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1579;
	            this.match(HyperTalkParser.T__45);
	            this.state = 1580;
	            this.cards();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1581;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1582;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1583;
	            this.match(HyperTalkParser.T__187);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 1584;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1585;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1586;
	            this.match(HyperTalkParser.T__188);
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 1587;
	            this.match(HyperTalkParser.T__187);
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 1588;
	            this.match(HyperTalkParser.T__189);
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 1589;
	            this.match(HyperTalkParser.T__190);
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 1590;
	            this.match(HyperTalkParser.T__191);
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 1591;
	            this.match(HyperTalkParser.T__162);
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 1592;
	            this.match(HyperTalkParser.T__192);
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 1593;
	            this.match(HyperTalkParser.T__193);
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 1594;
	            this.match(HyperTalkParser.T__188);
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 1595;
	            this.match(HyperTalkParser.T__194);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleArgFunc() {
	    let localctx = new SingleArgFuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, HyperTalkParser.RULE_singleArgFunc);
	    var _la = 0; // Token type
	    try {
	        this.state = 1684;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1598;
	            this.match(HyperTalkParser.T__195);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1599;
	            this.match(HyperTalkParser.T__196);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1600;
	            this.match(HyperTalkParser.T__197);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1601;
	            this.match(HyperTalkParser.T__198);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1602;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1603;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1605;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__287 || _la===HyperTalkParser.T__312) {
	                this.state = 1604;
	                this.card();
	            }

	            this.state = 1607;
	            this.match(HyperTalkParser.T__186);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1608;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1609;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1610;
	            this.background();
	            this.state = 1611;
	            this.match(HyperTalkParser.T__186);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1613;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1614;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1616;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__287 || _la===HyperTalkParser.T__312) {
	                this.state = 1615;
	                this.card();
	            }

	            this.state = 1618;
	            this.button();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1619;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1620;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1621;
	            this.background();
	            this.state = 1622;
	            this.button();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1624;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1625;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1626;
	            this.card();
	            this.state = 1627;
	            this.field();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1629;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1630;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1632;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 314)) & ~0x1f) == 0 && ((1 << (_la - 314)) & ((1 << (HyperTalkParser.T__313 - 314)) | (1 << (HyperTalkParser.T__314 - 314)) | (1 << (HyperTalkParser.T__315 - 314)) | (1 << (HyperTalkParser.T__316 - 314)) | (1 << (HyperTalkParser.T__317 - 314)) | (1 << (HyperTalkParser.T__318 - 314)))) !== 0)) {
	                this.state = 1631;
	                this.background();
	            }

	            this.state = 1634;
	            this.field();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1635;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1636;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1637;
	            this.cards();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1638;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1639;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1640;
	            this.background();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1641;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1642;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1643;
	            this.match(HyperTalkParser.T__45);
	            this.state = 1644;
	            this.cards();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1645;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1646;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1647;
	            this.character();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1648;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1649;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1650;
	            this.word();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1651;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1652;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1653;
	            this.item();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1654;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1655;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1656;
	            this.line();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1657;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1658;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1659;
	            this.match(HyperTalkParser.T__199);
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1660;
	            this.match(HyperTalkParser.T__184);
	            this.state = 1661;
	            this.match(HyperTalkParser.T__185);
	            this.state = 1662;
	            this.cards();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1663;
	            this.match(HyperTalkParser.T__184);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1664;
	            this.match(HyperTalkParser.T__200);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1665;
	            this.match(HyperTalkParser.T__201);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 1666;
	            this.match(HyperTalkParser.T__202);
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 1667;
	            this.match(HyperTalkParser.T__203);
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 1668;
	            this.match(HyperTalkParser.T__204);
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 1669;
	            this.match(HyperTalkParser.T__205);
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 1670;
	            this.match(HyperTalkParser.T__206);
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 1671;
	            this.match(HyperTalkParser.T__207);
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 1672;
	            this.match(HyperTalkParser.T__208);
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 1673;
	            this.match(HyperTalkParser.T__209);
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 1674;
	            this.match(HyperTalkParser.T__210);
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 1675;
	            this.match(HyperTalkParser.T__211);
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 1676;
	            this.match(HyperTalkParser.T__212);
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 1677;
	            this.match(HyperTalkParser.T__213);
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 1678;
	            this.match(HyperTalkParser.T__214);
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 1679;
	            this.match(HyperTalkParser.T__215);
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 1680;
	            this.match(HyperTalkParser.T__216);
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 1681;
	            this.match(HyperTalkParser.T__217);
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 1682;
	            this.match(HyperTalkParser.T__189);
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 1683;
	            this.match(HyperTalkParser.T__218);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiArgFunc() {
	    let localctx = new MultiArgFuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, HyperTalkParser.RULE_multiArgFunc);
	    try {
	        this.state = 1690;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HyperTalkParser.T__184:
	        case HyperTalkParser.T__189:
	        case HyperTalkParser.T__195:
	        case HyperTalkParser.T__196:
	        case HyperTalkParser.T__197:
	        case HyperTalkParser.T__198:
	        case HyperTalkParser.T__200:
	        case HyperTalkParser.T__201:
	        case HyperTalkParser.T__202:
	        case HyperTalkParser.T__203:
	        case HyperTalkParser.T__204:
	        case HyperTalkParser.T__205:
	        case HyperTalkParser.T__206:
	        case HyperTalkParser.T__207:
	        case HyperTalkParser.T__208:
	        case HyperTalkParser.T__209:
	        case HyperTalkParser.T__210:
	        case HyperTalkParser.T__211:
	        case HyperTalkParser.T__212:
	        case HyperTalkParser.T__213:
	        case HyperTalkParser.T__214:
	        case HyperTalkParser.T__215:
	        case HyperTalkParser.T__216:
	        case HyperTalkParser.T__217:
	        case HyperTalkParser.T__218:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1686;
	            this.singleArgFunc();
	            break;
	        case HyperTalkParser.T__219:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1687;
	            this.match(HyperTalkParser.T__219);
	            break;
	        case HyperTalkParser.T__220:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1688;
	            this.match(HyperTalkParser.T__220);
	            break;
	        case HyperTalkParser.T__221:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1689;
	            this.match(HyperTalkParser.T__221);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, HyperTalkParser.RULE_literal);
	    try {
	        this.state = 1698;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HyperTalkParser.T__5:
	        case HyperTalkParser.T__69:
	        case HyperTalkParser.T__223:
	        case HyperTalkParser.T__224:
	        case HyperTalkParser.T__225:
	        case HyperTalkParser.T__226:
	        case HyperTalkParser.T__227:
	        case HyperTalkParser.T__228:
	        case HyperTalkParser.T__229:
	        case HyperTalkParser.T__230:
	        case HyperTalkParser.T__231:
	        case HyperTalkParser.T__232:
	        case HyperTalkParser.T__233:
	        case HyperTalkParser.T__234:
	        case HyperTalkParser.T__235:
	        case HyperTalkParser.T__236:
	        case HyperTalkParser.T__237:
	        case HyperTalkParser.T__238:
	        case HyperTalkParser.T__239:
	        case HyperTalkParser.T__240:
	        case HyperTalkParser.T__241:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1692;
	            this.constant();
	            break;
	        case HyperTalkParser.T__87:
	        case HyperTalkParser.T__88:
	        case HyperTalkParser.T__180:
	        case HyperTalkParser.T__181:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1693;
	            this.modifierKey();
	            break;
	        case HyperTalkParser.T__116:
	        case HyperTalkParser.T__256:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1694;
	            this.mouseState();
	            break;
	        case HyperTalkParser.T__101:
	        case HyperTalkParser.T__172:
	        case HyperTalkParser.T__173:
	        case HyperTalkParser.T__184:
	        case HyperTalkParser.T__257:
	        case HyperTalkParser.T__258:
	        case HyperTalkParser.T__259:
	        case HyperTalkParser.T__260:
	        case HyperTalkParser.T__261:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1695;
	            this.knownType();
	            break;
	        case HyperTalkParser.T__262:
	        case HyperTalkParser.T__263:
	        case HyperTalkParser.T__264:
	        case HyperTalkParser.T__265:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1696;
	            this.findType();
	            break;
	        case HyperTalkParser.LITERAL:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1697;
	            this.match(HyperTalkParser.LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	preposition() {
	    let localctx = new PrepositionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, HyperTalkParser.RULE_preposition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1700;
	        _la = this._input.LA(1);
	        if(!(_la===HyperTalkParser.T__71 || _la===HyperTalkParser.T__72 || _la===HyperTalkParser.T__222)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant() {
	    let localctx = new ConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, HyperTalkParser.RULE_constant);
	    try {
	        this.state = 1713;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HyperTalkParser.T__231:
	        case HyperTalkParser.T__232:
	        case HyperTalkParser.T__233:
	        case HyperTalkParser.T__234:
	        case HyperTalkParser.T__235:
	        case HyperTalkParser.T__236:
	        case HyperTalkParser.T__237:
	        case HyperTalkParser.T__238:
	        case HyperTalkParser.T__239:
	        case HyperTalkParser.T__240:
	        case HyperTalkParser.T__241:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1702;
	            this.cardinalValue();
	            break;
	        case HyperTalkParser.T__69:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1703;
	            this.match(HyperTalkParser.T__69);
	            break;
	        case HyperTalkParser.T__223:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1704;
	            this.match(HyperTalkParser.T__223);
	            break;
	        case HyperTalkParser.T__224:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1705;
	            this.match(HyperTalkParser.T__224);
	            break;
	        case HyperTalkParser.T__5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1706;
	            this.match(HyperTalkParser.T__5);
	            break;
	        case HyperTalkParser.T__225:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1707;
	            this.match(HyperTalkParser.T__225);
	            break;
	        case HyperTalkParser.T__226:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1708;
	            this.match(HyperTalkParser.T__226);
	            break;
	        case HyperTalkParser.T__227:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1709;
	            this.match(HyperTalkParser.T__227);
	            break;
	        case HyperTalkParser.T__228:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1710;
	            this.match(HyperTalkParser.T__228);
	            break;
	        case HyperTalkParser.T__229:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1711;
	            this.match(HyperTalkParser.T__229);
	            break;
	        case HyperTalkParser.T__230:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1712;
	            this.match(HyperTalkParser.T__230);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cardinalValue() {
	    let localctx = new CardinalValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, HyperTalkParser.RULE_cardinalValue);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1715;
	        _la = this._input.LA(1);
	        if(!(((((_la - 232)) & ~0x1f) == 0 && ((1 << (_la - 232)) & ((1 << (HyperTalkParser.T__231 - 232)) | (1 << (HyperTalkParser.T__232 - 232)) | (1 << (HyperTalkParser.T__233 - 232)) | (1 << (HyperTalkParser.T__234 - 232)) | (1 << (HyperTalkParser.T__235 - 232)) | (1 << (HyperTalkParser.T__236 - 232)) | (1 << (HyperTalkParser.T__237 - 232)) | (1 << (HyperTalkParser.T__238 - 232)) | (1 << (HyperTalkParser.T__239 - 232)) | (1 << (HyperTalkParser.T__240 - 232)) | (1 << (HyperTalkParser.T__241 - 232)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ordinal() {
	    let localctx = new OrdinalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, HyperTalkParser.RULE_ordinal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1718;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HyperTalkParser.T__36) {
	            this.state = 1717;
	            this.match(HyperTalkParser.T__36);
	        }

	        this.state = 1720;
	        this.ordinalValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ordinalValue() {
	    let localctx = new OrdinalValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, HyperTalkParser.RULE_ordinalValue);
	    var _la = 0; // Token type
	    try {
	        this.state = 1735;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HyperTalkParser.T__242:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1722;
	            this.match(HyperTalkParser.T__242);
	            break;
	        case HyperTalkParser.T__243:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1723;
	            this.match(HyperTalkParser.T__243);
	            break;
	        case HyperTalkParser.T__244:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1724;
	            this.match(HyperTalkParser.T__244);
	            break;
	        case HyperTalkParser.T__245:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1725;
	            this.match(HyperTalkParser.T__245);
	            break;
	        case HyperTalkParser.T__246:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1726;
	            this.match(HyperTalkParser.T__246);
	            break;
	        case HyperTalkParser.T__247:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1727;
	            this.match(HyperTalkParser.T__247);
	            break;
	        case HyperTalkParser.T__248:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1728;
	            this.match(HyperTalkParser.T__248);
	            break;
	        case HyperTalkParser.T__249:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1729;
	            this.match(HyperTalkParser.T__249);
	            break;
	        case HyperTalkParser.T__250:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1730;
	            this.match(HyperTalkParser.T__250);
	            break;
	        case HyperTalkParser.T__251:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1731;
	            this.match(HyperTalkParser.T__251);
	            break;
	        case HyperTalkParser.T__252:
	        case HyperTalkParser.T__253:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1732;
	            _la = this._input.LA(1);
	            if(!(_la===HyperTalkParser.T__252 || _la===HyperTalkParser.T__253)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case HyperTalkParser.T__254:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1733;
	            this.match(HyperTalkParser.T__254);
	            break;
	        case HyperTalkParser.T__255:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1734;
	            this.match(HyperTalkParser.T__255);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mouseState() {
	    let localctx = new MouseStateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, HyperTalkParser.RULE_mouseState);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1737;
	        _la = this._input.LA(1);
	        if(!(_la===HyperTalkParser.T__116 || _la===HyperTalkParser.T__256)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifierKey() {
	    let localctx = new ModifierKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, HyperTalkParser.RULE_modifierKey);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1739;
	        _la = this._input.LA(1);
	        if(!(_la===HyperTalkParser.T__87 || _la===HyperTalkParser.T__88 || _la===HyperTalkParser.T__180 || _la===HyperTalkParser.T__181)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	knownType() {
	    let localctx = new KnownTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, HyperTalkParser.RULE_knownType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1741;
	        _la = this._input.LA(1);
	        if(!(_la===HyperTalkParser.T__101 || ((((_la - 173)) & ~0x1f) == 0 && ((1 << (_la - 173)) & ((1 << (HyperTalkParser.T__172 - 173)) | (1 << (HyperTalkParser.T__173 - 173)) | (1 << (HyperTalkParser.T__184 - 173)))) !== 0) || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (HyperTalkParser.T__257 - 258)) | (1 << (HyperTalkParser.T__258 - 258)) | (1 << (HyperTalkParser.T__259 - 258)) | (1 << (HyperTalkParser.T__260 - 258)) | (1 << (HyperTalkParser.T__261 - 258)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	findType() {
	    let localctx = new FindTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, HyperTalkParser.RULE_findType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1743;
	        _la = this._input.LA(1);
	        if(!(((((_la - 263)) & ~0x1f) == 0 && ((1 << (_la - 263)) & ((1 << (HyperTalkParser.T__262 - 263)) | (1 << (HyperTalkParser.T__263 - 263)) | (1 << (HyperTalkParser.T__264 - 263)) | (1 << (HyperTalkParser.T__265 - 263)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyName() {
	    let localctx = new PropertyNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, HyperTalkParser.RULE_propertyName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1745;
	        _la = this._input.LA(1);
	        if(!(_la===HyperTalkParser.T__37 || _la===HyperTalkParser.T__45 || _la===HyperTalkParser.T__120 || _la===HyperTalkParser.T__121 || ((((_la - 173)) & ~0x1f) == 0 && ((1 << (_la - 173)) & ((1 << (HyperTalkParser.T__172 - 173)) | (1 << (HyperTalkParser.T__173 - 173)) | (1 << (HyperTalkParser.T__184 - 173)))) !== 0) || ((((_la - 267)) & ~0x1f) == 0 && ((1 << (_la - 267)) & ((1 << (HyperTalkParser.T__266 - 267)) | (1 << (HyperTalkParser.T__267 - 267)) | (1 << (HyperTalkParser.T__268 - 267)) | (1 << (HyperTalkParser.T__269 - 267)) | (1 << (HyperTalkParser.T__270 - 267)) | (1 << (HyperTalkParser.T__271 - 267)) | (1 << (HyperTalkParser.T__272 - 267)) | (1 << (HyperTalkParser.T__273 - 267)) | (1 << (HyperTalkParser.T__274 - 267)) | (1 << (HyperTalkParser.T__275 - 267)))) !== 0) || _la===HyperTalkParser.ID)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyValue() {
	    let localctx = new PropertyValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, HyperTalkParser.RULE_propertyValue);
	    try {
	        this.state = 1755;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1747;
	            this.match(HyperTalkParser.T__276);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1748;
	            this.match(HyperTalkParser.T__26);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1749;
	            this.match(HyperTalkParser.T__270);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1750;
	            this.match(HyperTalkParser.T__271);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1751;
	            this.match(HyperTalkParser.T__272);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1752;
	            this.match(HyperTalkParser.T__273);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1753;
	            this.match(HyperTalkParser.T__274);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1754;
	            this.listExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commandName() {
	    let localctx = new CommandNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, HyperTalkParser.RULE_commandName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1757;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << HyperTalkParser.T__10) | (1 << HyperTalkParser.T__12) | (1 << HyperTalkParser.T__15) | (1 << HyperTalkParser.T__17) | (1 << HyperTalkParser.T__18) | (1 << HyperTalkParser.T__20) | (1 << HyperTalkParser.T__22) | (1 << HyperTalkParser.T__25) | (1 << HyperTalkParser.T__27) | (1 << HyperTalkParser.T__28) | (1 << HyperTalkParser.T__29) | (1 << HyperTalkParser.T__30))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (HyperTalkParser.T__33 - 34)) | (1 << (HyperTalkParser.T__34 - 34)) | (1 << (HyperTalkParser.T__38 - 34)) | (1 << (HyperTalkParser.T__41 - 34)) | (1 << (HyperTalkParser.T__43 - 34)) | (1 << (HyperTalkParser.T__46 - 34)) | (1 << (HyperTalkParser.T__47 - 34)) | (1 << (HyperTalkParser.T__48 - 34)) | (1 << (HyperTalkParser.T__50 - 34)) | (1 << (HyperTalkParser.T__52 - 34)) | (1 << (HyperTalkParser.T__53 - 34)) | (1 << (HyperTalkParser.T__55 - 34)) | (1 << (HyperTalkParser.T__57 - 34)) | (1 << (HyperTalkParser.T__58 - 34)) | (1 << (HyperTalkParser.T__59 - 34)) | (1 << (HyperTalkParser.T__62 - 34)) | (1 << (HyperTalkParser.T__63 - 34)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (HyperTalkParser.T__66 - 67)) | (1 << (HyperTalkParser.T__68 - 67)) | (1 << (HyperTalkParser.T__73 - 67)) | (1 << (HyperTalkParser.T__74 - 67)) | (1 << (HyperTalkParser.T__75 - 67)) | (1 << (HyperTalkParser.T__76 - 67)) | (1 << (HyperTalkParser.T__85 - 67)) | (1 << (HyperTalkParser.T__86 - 67)) | (1 << (HyperTalkParser.T__89 - 67)) | (1 << (HyperTalkParser.T__90 - 67)) | (1 << (HyperTalkParser.T__92 - 67)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	picture() {
	    let localctx = new PictureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, HyperTalkParser.RULE_picture);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1759;
	        _la = this._input.LA(1);
	        if(!(_la===HyperTalkParser.T__277 || _la===HyperTalkParser.T__278)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	seconds() {
	    let localctx = new SecondsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, HyperTalkParser.RULE_seconds);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1761;
	        _la = this._input.LA(1);
	        if(!(_la===HyperTalkParser.T__243 || ((((_la - 280)) & ~0x1f) == 0 && ((1 << (_la - 280)) & ((1 << (HyperTalkParser.T__279 - 280)) | (1 << (HyperTalkParser.T__280 - 280)) | (1 << (HyperTalkParser.T__281 - 280)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	speed() {
	    let localctx = new SpeedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, HyperTalkParser.RULE_speed);
	    var _la = 0; // Token type
	    try {
	        this.state = 1769;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1763;
	            this.match(HyperTalkParser.T__282);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1764;
	            _la = this._input.LA(1);
	            if(!(_la===HyperTalkParser.T__283 || _la===HyperTalkParser.T__284)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1765;
	            this.match(HyperTalkParser.T__285);
	            this.state = 1766;
	            this.match(HyperTalkParser.T__282);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1767;
	            this.match(HyperTalkParser.T__285);
	            this.state = 1768;
	            _la = this._input.LA(1);
	            if(!(_la===HyperTalkParser.T__283 || _la===HyperTalkParser.T__284)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	image() {
	    let localctx = new ImageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, HyperTalkParser.RULE_image);
	    var _la = 0; // Token type
	    try {
	        this.state = 1776;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HyperTalkParser.T__286:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1771;
	            this.match(HyperTalkParser.T__286);
	            break;
	        case HyperTalkParser.T__287:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1772;
	            this.match(HyperTalkParser.T__287);
	            break;
	        case HyperTalkParser.T__288:
	        case HyperTalkParser.T__289:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1773;
	            _la = this._input.LA(1);
	            if(!(_la===HyperTalkParser.T__288 || _la===HyperTalkParser.T__289)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case HyperTalkParser.T__290:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1774;
	            this.match(HyperTalkParser.T__290);
	            break;
	        case HyperTalkParser.T__291:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1775;
	            this.match(HyperTalkParser.T__291);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	effect() {
	    let localctx = new EffectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, HyperTalkParser.RULE_effect);
	    try {
	        this.state = 1843;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1778;
	            this.match(HyperTalkParser.T__292);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1779;
	            this.match(HyperTalkParser.T__293);
	            this.state = 1780;
	            this.match(HyperTalkParser.T__294);
	            this.state = 1781;
	            this.match(HyperTalkParser.T__57);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1782;
	            this.match(HyperTalkParser.T__293);
	            this.state = 1783;
	            this.match(HyperTalkParser.T__294);
	            this.state = 1784;
	            this.match(HyperTalkParser.T__22);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1785;
	            this.match(HyperTalkParser.T__295);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1786;
	            this.match(HyperTalkParser.T__296);
	            this.state = 1787;
	            this.match(HyperTalkParser.T__57);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1788;
	            this.match(HyperTalkParser.T__296);
	            this.state = 1789;
	            this.match(HyperTalkParser.T__22);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1790;
	            this.match(HyperTalkParser.T__276);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1791;
	            this.match(HyperTalkParser.T__61);
	            this.state = 1792;
	            this.match(HyperTalkParser.T__256);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1793;
	            this.match(HyperTalkParser.T__61);
	            this.state = 1794;
	            this.match(HyperTalkParser.T__116);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1795;
	            this.match(HyperTalkParser.T__61);
	            this.state = 1796;
	            this.match(HyperTalkParser.T__271);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1797;
	            this.match(HyperTalkParser.T__61);
	            this.state = 1798;
	            this.match(HyperTalkParser.T__272);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1799;
	            this.match(HyperTalkParser.T__275);
	            this.state = 1800;
	            this.match(HyperTalkParser.T__116);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1801;
	            this.match(HyperTalkParser.T__275);
	            this.state = 1802;
	            this.match(HyperTalkParser.T__256);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1803;
	            this.match(HyperTalkParser.T__275);
	            this.state = 1804;
	            this.match(HyperTalkParser.T__271);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1805;
	            this.match(HyperTalkParser.T__275);
	            this.state = 1806;
	            this.match(HyperTalkParser.T__272);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1807;
	            this.match(HyperTalkParser.T__297);
	            this.state = 1808;
	            this.match(HyperTalkParser.T__11);
	            this.state = 1809;
	            this.match(HyperTalkParser.T__273);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1810;
	            this.match(HyperTalkParser.T__297);
	            this.state = 1811;
	            this.match(HyperTalkParser.T__11);
	            this.state = 1812;
	            this.match(HyperTalkParser.T__274);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1813;
	            this.match(HyperTalkParser.T__297);
	            this.state = 1814;
	            this.match(HyperTalkParser.T__11);
	            this.state = 1815;
	            this.match(HyperTalkParser.T__270);
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1816;
	            this.match(HyperTalkParser.T__298);
	            this.state = 1817;
	            this.match(HyperTalkParser.T__24);
	            this.state = 1818;
	            this.match(HyperTalkParser.T__273);
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1819;
	            this.match(HyperTalkParser.T__298);
	            this.state = 1820;
	            this.match(HyperTalkParser.T__24);
	            this.state = 1821;
	            this.match(HyperTalkParser.T__274);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1822;
	            this.match(HyperTalkParser.T__298);
	            this.state = 1823;
	            this.match(HyperTalkParser.T__24);
	            this.state = 1824;
	            this.match(HyperTalkParser.T__270);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1825;
	            this.match(HyperTalkParser.T__299);
	            this.state = 1826;
	            this.match(HyperTalkParser.T__300);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 1827;
	            this.match(HyperTalkParser.T__301);
	            this.state = 1828;
	            this.match(HyperTalkParser.T__256);
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 1829;
	            this.match(HyperTalkParser.T__301);
	            this.state = 1830;
	            this.match(HyperTalkParser.T__116);
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 1831;
	            this.match(HyperTalkParser.T__301);
	            this.state = 1832;
	            this.match(HyperTalkParser.T__271);
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 1833;
	            this.match(HyperTalkParser.T__301);
	            this.state = 1834;
	            this.match(HyperTalkParser.T__272);
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 1835;
	            this.match(HyperTalkParser.T__302);
	            this.state = 1836;
	            this.match(HyperTalkParser.T__303);
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 1837;
	            this.match(HyperTalkParser.T__302);
	            this.state = 1838;
	            this.match(HyperTalkParser.T__304);
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 1839;
	            this.match(HyperTalkParser.T__302);
	            this.state = 1840;
	            this.match(HyperTalkParser.T__57);
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 1841;
	            this.match(HyperTalkParser.T__302);
	            this.state = 1842;
	            this.match(HyperTalkParser.T__22);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeUnit() {
	    let localctx = new TimeUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, HyperTalkParser.RULE_timeUnit);
	    try {
	        this.state = 1848;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HyperTalkParser.T__182:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1845;
	            this.match(HyperTalkParser.T__182);
	            break;
	        case HyperTalkParser.T__305:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1846;
	            this.match(HyperTalkParser.T__305);
	            break;
	        case HyperTalkParser.T__243:
	        case HyperTalkParser.T__279:
	        case HyperTalkParser.T__280:
	        case HyperTalkParser.T__281:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1847;
	            this.seconds();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	position() {
	    let localctx = new PositionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, HyperTalkParser.RULE_position);
	    var _la = 0; // Token type
	    try {
	        this.state = 1859;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1851;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__36) {
	                this.state = 1850;
	                this.match(HyperTalkParser.T__36);
	            }

	            this.state = 1853;
	            this.match(HyperTalkParser.T__56);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1855;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HyperTalkParser.T__36) {
	                this.state = 1854;
	                this.match(HyperTalkParser.T__36);
	            }

	            this.state = 1857;
	            _la = this._input.LA(1);
	            if(!(_la===HyperTalkParser.T__306 || _la===HyperTalkParser.T__307)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1858;
	            this.match(HyperTalkParser.T__77);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	message() {
	    let localctx = new MessageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, HyperTalkParser.RULE_message);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1862;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HyperTalkParser.T__36) {
	            this.state = 1861;
	            this.match(HyperTalkParser.T__36);
	        }

	        this.state = 1864;
	        _la = this._input.LA(1);
	        if(!(_la===HyperTalkParser.T__122 || _la===HyperTalkParser.T__308)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1868;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1865;
	            this.match(HyperTalkParser.T__309);
	            break;

	        case 2:
	            this.state = 1866;
	            this.match(HyperTalkParser.T__96);
	            break;

	        case 3:
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cards() {
	    let localctx = new CardsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, HyperTalkParser.RULE_cards);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1870;
	        _la = this._input.LA(1);
	        if(!(_la===HyperTalkParser.T__310 || _la===HyperTalkParser.T__311)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	card() {
	    let localctx = new CardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, HyperTalkParser.RULE_card);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1872;
	        _la = this._input.LA(1);
	        if(!(_la===HyperTalkParser.T__287 || _la===HyperTalkParser.T__312)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	background() {
	    let localctx = new BackgroundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, HyperTalkParser.RULE_background);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1874;
	        _la = this._input.LA(1);
	        if(!(((((_la - 314)) & ~0x1f) == 0 && ((1 << (_la - 314)) & ((1 << (HyperTalkParser.T__313 - 314)) | (1 << (HyperTalkParser.T__314 - 314)) | (1 << (HyperTalkParser.T__315 - 314)) | (1 << (HyperTalkParser.T__316 - 314)) | (1 << (HyperTalkParser.T__317 - 314)) | (1 << (HyperTalkParser.T__318 - 314)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	button() {
	    let localctx = new ButtonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, HyperTalkParser.RULE_button);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1876;
	        _la = this._input.LA(1);
	        if(!(_la===HyperTalkParser.T__165 || ((((_la - 320)) & ~0x1f) == 0 && ((1 << (_la - 320)) & ((1 << (HyperTalkParser.T__319 - 320)) | (1 << (HyperTalkParser.T__320 - 320)) | (1 << (HyperTalkParser.T__321 - 320)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	field() {
	    let localctx = new FieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, HyperTalkParser.RULE_field);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1878;
	        _la = this._input.LA(1);
	        if(!(_la===HyperTalkParser.T__164 || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & ((1 << (HyperTalkParser.T__322 - 323)) | (1 << (HyperTalkParser.T__323 - 323)) | (1 << (HyperTalkParser.T__324 - 323)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stack() {
	    let localctx = new StackContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, HyperTalkParser.RULE_stack);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1880;
	        this.match(HyperTalkParser.T__78);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	character() {
	    let localctx = new CharacterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, HyperTalkParser.RULE_character);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1882;
	        _la = this._input.LA(1);
	        if(!(_la===HyperTalkParser.T__263 || ((((_la - 326)) & ~0x1f) == 0 && ((1 << (_la - 326)) & ((1 << (HyperTalkParser.T__325 - 326)) | (1 << (HyperTalkParser.T__326 - 326)) | (1 << (HyperTalkParser.T__327 - 326)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	word() {
	    let localctx = new WordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, HyperTalkParser.RULE_word);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1884;
	        _la = this._input.LA(1);
	        if(!(_la===HyperTalkParser.T__262 || _la===HyperTalkParser.T__328)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	line() {
	    let localctx = new LineContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, HyperTalkParser.RULE_line);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1886;
	        _la = this._input.LA(1);
	        if(!(_la===HyperTalkParser.T__166 || _la===HyperTalkParser.T__329)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	item() {
	    let localctx = new ItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, HyperTalkParser.RULE_item);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1888;
	        _la = this._input.LA(1);
	        if(!(_la===HyperTalkParser.T__330 || _la===HyperTalkParser.T__331)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	of() {
	    let localctx = new OfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, HyperTalkParser.RULE_of);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1890;
	        _la = this._input.LA(1);
	        if(!(_la===HyperTalkParser.T__24 || _la===HyperTalkParser.T__185 || _la===HyperTalkParser.T__303)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

HyperTalkParser.EOF = antlr4.Token.EOF;
HyperTalkParser.T__0 = 1;
HyperTalkParser.T__1 = 2;
HyperTalkParser.T__2 = 3;
HyperTalkParser.T__3 = 4;
HyperTalkParser.T__4 = 5;
HyperTalkParser.T__5 = 6;
HyperTalkParser.T__6 = 7;
HyperTalkParser.T__7 = 8;
HyperTalkParser.T__8 = 9;
HyperTalkParser.T__9 = 10;
HyperTalkParser.T__10 = 11;
HyperTalkParser.T__11 = 12;
HyperTalkParser.T__12 = 13;
HyperTalkParser.T__13 = 14;
HyperTalkParser.T__14 = 15;
HyperTalkParser.T__15 = 16;
HyperTalkParser.T__16 = 17;
HyperTalkParser.T__17 = 18;
HyperTalkParser.T__18 = 19;
HyperTalkParser.T__19 = 20;
HyperTalkParser.T__20 = 21;
HyperTalkParser.T__21 = 22;
HyperTalkParser.T__22 = 23;
HyperTalkParser.T__23 = 24;
HyperTalkParser.T__24 = 25;
HyperTalkParser.T__25 = 26;
HyperTalkParser.T__26 = 27;
HyperTalkParser.T__27 = 28;
HyperTalkParser.T__28 = 29;
HyperTalkParser.T__29 = 30;
HyperTalkParser.T__30 = 31;
HyperTalkParser.T__31 = 32;
HyperTalkParser.T__32 = 33;
HyperTalkParser.T__33 = 34;
HyperTalkParser.T__34 = 35;
HyperTalkParser.T__35 = 36;
HyperTalkParser.T__36 = 37;
HyperTalkParser.T__37 = 38;
HyperTalkParser.T__38 = 39;
HyperTalkParser.T__39 = 40;
HyperTalkParser.T__40 = 41;
HyperTalkParser.T__41 = 42;
HyperTalkParser.T__42 = 43;
HyperTalkParser.T__43 = 44;
HyperTalkParser.T__44 = 45;
HyperTalkParser.T__45 = 46;
HyperTalkParser.T__46 = 47;
HyperTalkParser.T__47 = 48;
HyperTalkParser.T__48 = 49;
HyperTalkParser.T__49 = 50;
HyperTalkParser.T__50 = 51;
HyperTalkParser.T__51 = 52;
HyperTalkParser.T__52 = 53;
HyperTalkParser.T__53 = 54;
HyperTalkParser.T__54 = 55;
HyperTalkParser.T__55 = 56;
HyperTalkParser.T__56 = 57;
HyperTalkParser.T__57 = 58;
HyperTalkParser.T__58 = 59;
HyperTalkParser.T__59 = 60;
HyperTalkParser.T__60 = 61;
HyperTalkParser.T__61 = 62;
HyperTalkParser.T__62 = 63;
HyperTalkParser.T__63 = 64;
HyperTalkParser.T__64 = 65;
HyperTalkParser.T__65 = 66;
HyperTalkParser.T__66 = 67;
HyperTalkParser.T__67 = 68;
HyperTalkParser.T__68 = 69;
HyperTalkParser.T__69 = 70;
HyperTalkParser.T__70 = 71;
HyperTalkParser.T__71 = 72;
HyperTalkParser.T__72 = 73;
HyperTalkParser.T__73 = 74;
HyperTalkParser.T__74 = 75;
HyperTalkParser.T__75 = 76;
HyperTalkParser.T__76 = 77;
HyperTalkParser.T__77 = 78;
HyperTalkParser.T__78 = 79;
HyperTalkParser.T__79 = 80;
HyperTalkParser.T__80 = 81;
HyperTalkParser.T__81 = 82;
HyperTalkParser.T__82 = 83;
HyperTalkParser.T__83 = 84;
HyperTalkParser.T__84 = 85;
HyperTalkParser.T__85 = 86;
HyperTalkParser.T__86 = 87;
HyperTalkParser.T__87 = 88;
HyperTalkParser.T__88 = 89;
HyperTalkParser.T__89 = 90;
HyperTalkParser.T__90 = 91;
HyperTalkParser.T__91 = 92;
HyperTalkParser.T__92 = 93;
HyperTalkParser.T__93 = 94;
HyperTalkParser.T__94 = 95;
HyperTalkParser.T__95 = 96;
HyperTalkParser.T__96 = 97;
HyperTalkParser.T__97 = 98;
HyperTalkParser.T__98 = 99;
HyperTalkParser.T__99 = 100;
HyperTalkParser.T__100 = 101;
HyperTalkParser.T__101 = 102;
HyperTalkParser.T__102 = 103;
HyperTalkParser.T__103 = 104;
HyperTalkParser.T__104 = 105;
HyperTalkParser.T__105 = 106;
HyperTalkParser.T__106 = 107;
HyperTalkParser.T__107 = 108;
HyperTalkParser.T__108 = 109;
HyperTalkParser.T__109 = 110;
HyperTalkParser.T__110 = 111;
HyperTalkParser.T__111 = 112;
HyperTalkParser.T__112 = 113;
HyperTalkParser.T__113 = 114;
HyperTalkParser.T__114 = 115;
HyperTalkParser.T__115 = 116;
HyperTalkParser.T__116 = 117;
HyperTalkParser.T__117 = 118;
HyperTalkParser.T__118 = 119;
HyperTalkParser.T__119 = 120;
HyperTalkParser.T__120 = 121;
HyperTalkParser.T__121 = 122;
HyperTalkParser.T__122 = 123;
HyperTalkParser.T__123 = 124;
HyperTalkParser.T__124 = 125;
HyperTalkParser.T__125 = 126;
HyperTalkParser.T__126 = 127;
HyperTalkParser.T__127 = 128;
HyperTalkParser.T__128 = 129;
HyperTalkParser.T__129 = 130;
HyperTalkParser.T__130 = 131;
HyperTalkParser.T__131 = 132;
HyperTalkParser.T__132 = 133;
HyperTalkParser.T__133 = 134;
HyperTalkParser.T__134 = 135;
HyperTalkParser.T__135 = 136;
HyperTalkParser.T__136 = 137;
HyperTalkParser.T__137 = 138;
HyperTalkParser.T__138 = 139;
HyperTalkParser.T__139 = 140;
HyperTalkParser.T__140 = 141;
HyperTalkParser.T__141 = 142;
HyperTalkParser.T__142 = 143;
HyperTalkParser.T__143 = 144;
HyperTalkParser.T__144 = 145;
HyperTalkParser.T__145 = 146;
HyperTalkParser.T__146 = 147;
HyperTalkParser.T__147 = 148;
HyperTalkParser.T__148 = 149;
HyperTalkParser.T__149 = 150;
HyperTalkParser.T__150 = 151;
HyperTalkParser.T__151 = 152;
HyperTalkParser.T__152 = 153;
HyperTalkParser.T__153 = 154;
HyperTalkParser.T__154 = 155;
HyperTalkParser.T__155 = 156;
HyperTalkParser.T__156 = 157;
HyperTalkParser.T__157 = 158;
HyperTalkParser.T__158 = 159;
HyperTalkParser.T__159 = 160;
HyperTalkParser.T__160 = 161;
HyperTalkParser.T__161 = 162;
HyperTalkParser.T__162 = 163;
HyperTalkParser.T__163 = 164;
HyperTalkParser.T__164 = 165;
HyperTalkParser.T__165 = 166;
HyperTalkParser.T__166 = 167;
HyperTalkParser.T__167 = 168;
HyperTalkParser.T__168 = 169;
HyperTalkParser.T__169 = 170;
HyperTalkParser.T__170 = 171;
HyperTalkParser.T__171 = 172;
HyperTalkParser.T__172 = 173;
HyperTalkParser.T__173 = 174;
HyperTalkParser.T__174 = 175;
HyperTalkParser.T__175 = 176;
HyperTalkParser.T__176 = 177;
HyperTalkParser.T__177 = 178;
HyperTalkParser.T__178 = 179;
HyperTalkParser.T__179 = 180;
HyperTalkParser.T__180 = 181;
HyperTalkParser.T__181 = 182;
HyperTalkParser.T__182 = 183;
HyperTalkParser.T__183 = 184;
HyperTalkParser.T__184 = 185;
HyperTalkParser.T__185 = 186;
HyperTalkParser.T__186 = 187;
HyperTalkParser.T__187 = 188;
HyperTalkParser.T__188 = 189;
HyperTalkParser.T__189 = 190;
HyperTalkParser.T__190 = 191;
HyperTalkParser.T__191 = 192;
HyperTalkParser.T__192 = 193;
HyperTalkParser.T__193 = 194;
HyperTalkParser.T__194 = 195;
HyperTalkParser.T__195 = 196;
HyperTalkParser.T__196 = 197;
HyperTalkParser.T__197 = 198;
HyperTalkParser.T__198 = 199;
HyperTalkParser.T__199 = 200;
HyperTalkParser.T__200 = 201;
HyperTalkParser.T__201 = 202;
HyperTalkParser.T__202 = 203;
HyperTalkParser.T__203 = 204;
HyperTalkParser.T__204 = 205;
HyperTalkParser.T__205 = 206;
HyperTalkParser.T__206 = 207;
HyperTalkParser.T__207 = 208;
HyperTalkParser.T__208 = 209;
HyperTalkParser.T__209 = 210;
HyperTalkParser.T__210 = 211;
HyperTalkParser.T__211 = 212;
HyperTalkParser.T__212 = 213;
HyperTalkParser.T__213 = 214;
HyperTalkParser.T__214 = 215;
HyperTalkParser.T__215 = 216;
HyperTalkParser.T__216 = 217;
HyperTalkParser.T__217 = 218;
HyperTalkParser.T__218 = 219;
HyperTalkParser.T__219 = 220;
HyperTalkParser.T__220 = 221;
HyperTalkParser.T__221 = 222;
HyperTalkParser.T__222 = 223;
HyperTalkParser.T__223 = 224;
HyperTalkParser.T__224 = 225;
HyperTalkParser.T__225 = 226;
HyperTalkParser.T__226 = 227;
HyperTalkParser.T__227 = 228;
HyperTalkParser.T__228 = 229;
HyperTalkParser.T__229 = 230;
HyperTalkParser.T__230 = 231;
HyperTalkParser.T__231 = 232;
HyperTalkParser.T__232 = 233;
HyperTalkParser.T__233 = 234;
HyperTalkParser.T__234 = 235;
HyperTalkParser.T__235 = 236;
HyperTalkParser.T__236 = 237;
HyperTalkParser.T__237 = 238;
HyperTalkParser.T__238 = 239;
HyperTalkParser.T__239 = 240;
HyperTalkParser.T__240 = 241;
HyperTalkParser.T__241 = 242;
HyperTalkParser.T__242 = 243;
HyperTalkParser.T__243 = 244;
HyperTalkParser.T__244 = 245;
HyperTalkParser.T__245 = 246;
HyperTalkParser.T__246 = 247;
HyperTalkParser.T__247 = 248;
HyperTalkParser.T__248 = 249;
HyperTalkParser.T__249 = 250;
HyperTalkParser.T__250 = 251;
HyperTalkParser.T__251 = 252;
HyperTalkParser.T__252 = 253;
HyperTalkParser.T__253 = 254;
HyperTalkParser.T__254 = 255;
HyperTalkParser.T__255 = 256;
HyperTalkParser.T__256 = 257;
HyperTalkParser.T__257 = 258;
HyperTalkParser.T__258 = 259;
HyperTalkParser.T__259 = 260;
HyperTalkParser.T__260 = 261;
HyperTalkParser.T__261 = 262;
HyperTalkParser.T__262 = 263;
HyperTalkParser.T__263 = 264;
HyperTalkParser.T__264 = 265;
HyperTalkParser.T__265 = 266;
HyperTalkParser.T__266 = 267;
HyperTalkParser.T__267 = 268;
HyperTalkParser.T__268 = 269;
HyperTalkParser.T__269 = 270;
HyperTalkParser.T__270 = 271;
HyperTalkParser.T__271 = 272;
HyperTalkParser.T__272 = 273;
HyperTalkParser.T__273 = 274;
HyperTalkParser.T__274 = 275;
HyperTalkParser.T__275 = 276;
HyperTalkParser.T__276 = 277;
HyperTalkParser.T__277 = 278;
HyperTalkParser.T__278 = 279;
HyperTalkParser.T__279 = 280;
HyperTalkParser.T__280 = 281;
HyperTalkParser.T__281 = 282;
HyperTalkParser.T__282 = 283;
HyperTalkParser.T__283 = 284;
HyperTalkParser.T__284 = 285;
HyperTalkParser.T__285 = 286;
HyperTalkParser.T__286 = 287;
HyperTalkParser.T__287 = 288;
HyperTalkParser.T__288 = 289;
HyperTalkParser.T__289 = 290;
HyperTalkParser.T__290 = 291;
HyperTalkParser.T__291 = 292;
HyperTalkParser.T__292 = 293;
HyperTalkParser.T__293 = 294;
HyperTalkParser.T__294 = 295;
HyperTalkParser.T__295 = 296;
HyperTalkParser.T__296 = 297;
HyperTalkParser.T__297 = 298;
HyperTalkParser.T__298 = 299;
HyperTalkParser.T__299 = 300;
HyperTalkParser.T__300 = 301;
HyperTalkParser.T__301 = 302;
HyperTalkParser.T__302 = 303;
HyperTalkParser.T__303 = 304;
HyperTalkParser.T__304 = 305;
HyperTalkParser.T__305 = 306;
HyperTalkParser.T__306 = 307;
HyperTalkParser.T__307 = 308;
HyperTalkParser.T__308 = 309;
HyperTalkParser.T__309 = 310;
HyperTalkParser.T__310 = 311;
HyperTalkParser.T__311 = 312;
HyperTalkParser.T__312 = 313;
HyperTalkParser.T__313 = 314;
HyperTalkParser.T__314 = 315;
HyperTalkParser.T__315 = 316;
HyperTalkParser.T__316 = 317;
HyperTalkParser.T__317 = 318;
HyperTalkParser.T__318 = 319;
HyperTalkParser.T__319 = 320;
HyperTalkParser.T__320 = 321;
HyperTalkParser.T__321 = 322;
HyperTalkParser.T__322 = 323;
HyperTalkParser.T__323 = 324;
HyperTalkParser.T__324 = 325;
HyperTalkParser.T__325 = 326;
HyperTalkParser.T__326 = 327;
HyperTalkParser.T__327 = 328;
HyperTalkParser.T__328 = 329;
HyperTalkParser.T__329 = 330;
HyperTalkParser.T__330 = 331;
HyperTalkParser.T__331 = 332;
HyperTalkParser.ID = 333;
HyperTalkParser.BREAK = 334;
HyperTalkParser.LITERAL = 335;
HyperTalkParser.INTEGER_LITERAL = 336;
HyperTalkParser.NUMBER_LITERAL = 337;
HyperTalkParser.STRING_LITERAL = 338;
HyperTalkParser.ALPHA = 339;
HyperTalkParser.DIGIT = 340;
HyperTalkParser.COMMENT = 341;
HyperTalkParser.NEWLINE = 342;
HyperTalkParser.WHITESPACE = 343;
HyperTalkParser.UNLEXED_CHAR = 344;

HyperTalkParser.RULE_script = 0;
HyperTalkParser.RULE_scriptlet = 1;
HyperTalkParser.RULE_multilineScriptlet = 2;
HyperTalkParser.RULE_handler = 3;
HyperTalkParser.RULE_function_ = 4;
HyperTalkParser.RULE_handlerName = 5;
HyperTalkParser.RULE_parameterList = 6;
HyperTalkParser.RULE_statementList = 7;
HyperTalkParser.RULE_statement = 8;
HyperTalkParser.RULE_globalStmnt = 9;
HyperTalkParser.RULE_returnStmnt = 10;
HyperTalkParser.RULE_ifStatement = 11;
HyperTalkParser.RULE_thenStatement = 12;
HyperTalkParser.RULE_elseStatement = 13;
HyperTalkParser.RULE_repeatStatement = 14;
HyperTalkParser.RULE_messageStatement = 15;
HyperTalkParser.RULE_commandStmnt = 16;
HyperTalkParser.RULE_remoteNavOption = 17;
HyperTalkParser.RULE_convertible = 18;
HyperTalkParser.RULE_conversionFormat = 19;
HyperTalkParser.RULE_length = 20;
HyperTalkParser.RULE_sortDirection = 21;
HyperTalkParser.RULE_sortChunkType = 22;
HyperTalkParser.RULE_sortStyle = 23;
HyperTalkParser.RULE_repeatRange = 24;
HyperTalkParser.RULE_duration = 25;
HyperTalkParser.RULE_count = 26;
HyperTalkParser.RULE_range = 27;
HyperTalkParser.RULE_chunk = 28;
HyperTalkParser.RULE_menu = 29;
HyperTalkParser.RULE_menuItem = 30;
HyperTalkParser.RULE_property = 31;
HyperTalkParser.RULE_globalProperty = 32;
HyperTalkParser.RULE_partProperty = 33;
HyperTalkParser.RULE_part = 34;
HyperTalkParser.RULE_stackPart = 35;
HyperTalkParser.RULE_buttonPart = 36;
HyperTalkParser.RULE_fieldPart = 37;
HyperTalkParser.RULE_cardPart = 38;
HyperTalkParser.RULE_bkgndPart = 39;
HyperTalkParser.RULE_windowPart = 40;
HyperTalkParser.RULE_listExpression = 41;
HyperTalkParser.RULE_expression = 42;
HyperTalkParser.RULE_factor = 43;
HyperTalkParser.RULE_container = 44;
HyperTalkParser.RULE_musicExpression = 45;
HyperTalkParser.RULE_toolExpression = 46;
HyperTalkParser.RULE_effectExpression = 47;
HyperTalkParser.RULE_functionCall = 48;
HyperTalkParser.RULE_builtInFunc = 49;
HyperTalkParser.RULE_zeroArgFunc = 50;
HyperTalkParser.RULE_singleArgFunc = 51;
HyperTalkParser.RULE_multiArgFunc = 52;
HyperTalkParser.RULE_literal = 53;
HyperTalkParser.RULE_preposition = 54;
HyperTalkParser.RULE_constant = 55;
HyperTalkParser.RULE_cardinalValue = 56;
HyperTalkParser.RULE_ordinal = 57;
HyperTalkParser.RULE_ordinalValue = 58;
HyperTalkParser.RULE_mouseState = 59;
HyperTalkParser.RULE_modifierKey = 60;
HyperTalkParser.RULE_knownType = 61;
HyperTalkParser.RULE_findType = 62;
HyperTalkParser.RULE_propertyName = 63;
HyperTalkParser.RULE_propertyValue = 64;
HyperTalkParser.RULE_commandName = 65;
HyperTalkParser.RULE_picture = 66;
HyperTalkParser.RULE_seconds = 67;
HyperTalkParser.RULE_speed = 68;
HyperTalkParser.RULE_image = 69;
HyperTalkParser.RULE_effect = 70;
HyperTalkParser.RULE_timeUnit = 71;
HyperTalkParser.RULE_position = 72;
HyperTalkParser.RULE_message = 73;
HyperTalkParser.RULE_cards = 74;
HyperTalkParser.RULE_card = 75;
HyperTalkParser.RULE_background = 76;
HyperTalkParser.RULE_button = 77;
HyperTalkParser.RULE_field = 78;
HyperTalkParser.RULE_stack = 79;
HyperTalkParser.RULE_character = 80;
HyperTalkParser.RULE_word = 81;
HyperTalkParser.RULE_line = 82;
HyperTalkParser.RULE_item = 83;
HyperTalkParser.RULE_of = 84;

class ScriptContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_script;
    }

	handler() {
	    return this.getTypedRuleContext(HandlerContext,0);
	};

	script() {
	    return this.getTypedRuleContext(ScriptContext,0);
	};

	function_() {
	    return this.getTypedRuleContext(Function_Context,0);
	};

	NEWLINE() {
	    return this.getToken(HyperTalkParser.NEWLINE, 0);
	};

	EOF() {
	    return this.getToken(HyperTalkParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterScript(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitScript(this);
		}
	}


}



class ScriptletContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_scriptlet;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	EOF() {
	    return this.getToken(HyperTalkParser.EOF, 0);
	};

	multilineScriptlet() {
	    return this.getTypedRuleContext(MultilineScriptletContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterScriptlet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitScriptlet(this);
		}
	}


}



class MultilineScriptletContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_multilineScriptlet;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	NEWLINE() {
	    return this.getToken(HyperTalkParser.NEWLINE, 0);
	};

	multilineScriptlet() {
	    return this.getTypedRuleContext(MultilineScriptletContext,0);
	};

	EOF() {
	    return this.getToken(HyperTalkParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterMultilineScriptlet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitMultilineScriptlet(this);
		}
	}


}



class HandlerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_handler;
    }

	handlerName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(HandlerNameContext);
	    } else {
	        return this.getTypedRuleContext(HandlerNameContext,i);
	    }
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HyperTalkParser.NEWLINE);
	    } else {
	        return this.getToken(HyperTalkParser.NEWLINE, i);
	    }
	};


	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	parameterList() {
	    return this.getTypedRuleContext(ParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterHandler(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitHandler(this);
		}
	}


}



class Function_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_function_;
    }

	ID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HyperTalkParser.ID);
	    } else {
	        return this.getToken(HyperTalkParser.ID, i);
	    }
	};


	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HyperTalkParser.NEWLINE);
	    } else {
	        return this.getToken(HyperTalkParser.NEWLINE, i);
	    }
	};


	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	parameterList() {
	    return this.getTypedRuleContext(ParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterFunction_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitFunction_(this);
		}
	}


}



class HandlerNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_handlerName;
    }

	ID() {
	    return this.getToken(HyperTalkParser.ID, 0);
	};

	commandName() {
	    return this.getTypedRuleContext(CommandNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterHandlerName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitHandlerName(this);
		}
	}


}



class ParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_parameterList;
    }

	ID() {
	    return this.getToken(HyperTalkParser.ID, 0);
	};

	parameterList() {
	    return this.getTypedRuleContext(ParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitParameterList(this);
		}
	}


}



class StatementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_statementList;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HyperTalkParser.NEWLINE);
	    } else {
	        return this.getToken(HyperTalkParser.NEWLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterStatementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitStatementList(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_statement;
    }

	commandStmnt() {
	    return this.getTypedRuleContext(CommandStmntContext,0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	messageStatement() {
	    return this.getTypedRuleContext(MessageStatementContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ifStatement() {
	    return this.getTypedRuleContext(IfStatementContext,0);
	};

	repeatStatement() {
	    return this.getTypedRuleContext(RepeatStatementContext,0);
	};

	globalStmnt() {
	    return this.getTypedRuleContext(GlobalStmntContext,0);
	};

	returnStmnt() {
	    return this.getTypedRuleContext(ReturnStmntContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitStatement(this);
		}
	}


}



class GlobalStmntContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_globalStmnt;
    }

	parameterList() {
	    return this.getTypedRuleContext(ParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterGlobalStmnt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitGlobalStmnt(this);
		}
	}


}



class ReturnStmntContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_returnStmnt;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterReturnStmnt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitReturnStmnt(this);
		}
	}


}



class IfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_ifStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	thenStatement() {
	    return this.getTypedRuleContext(ThenStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitIfStatement(this);
		}
	}


}



class ThenStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_thenStatement;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HyperTalkParser.NEWLINE);
	    } else {
	        return this.getToken(HyperTalkParser.NEWLINE, i);
	    }
	};


	elseStatement() {
	    return this.getTypedRuleContext(ElseStatementContext,0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterThenStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitThenStatement(this);
		}
	}


}



class ElseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_elseStatement;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HyperTalkParser.NEWLINE);
	    } else {
	        return this.getToken(HyperTalkParser.NEWLINE, i);
	    }
	};


	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterElseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitElseStatement(this);
		}
	}


}



class RepeatStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_repeatStatement;
    }

	repeatRange() {
	    return this.getTypedRuleContext(RepeatRangeContext,0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HyperTalkParser.NEWLINE);
	    } else {
	        return this.getToken(HyperTalkParser.NEWLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterRepeatStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitRepeatStatement(this);
		}
	}


}



class MessageStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_messageStatement;
    }

	ID() {
	    return this.getToken(HyperTalkParser.ID, 0);
	};

	listExpression() {
	    return this.getTypedRuleContext(ListExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterMessageStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitMessageStatement(this);
		}
	}


}



class CommandStmntContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_commandStmnt;
        this.gender = null; // Token
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	factor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FactorContext);
	    } else {
	        return this.getTypedRuleContext(FactorContext,i);
	    }
	};

	toolExpression() {
	    return this.getTypedRuleContext(ToolExpressionContext,0);
	};

	listExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ListExpressionContext,i);
	    }
	};

	container() {
	    return this.getTypedRuleContext(ContainerContext,0);
	};

	convertible = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConvertibleContext);
	    } else {
	        return this.getTypedRuleContext(ConvertibleContext,i);
	    }
	};

	of = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OfContext);
	    } else {
	        return this.getTypedRuleContext(OfContext,i);
	    }
	};

	handlerName() {
	    return this.getTypedRuleContext(HandlerNameContext,0);
	};

	cards() {
	    return this.getTypedRuleContext(CardsContext,0);
	};

	remoteNavOption() {
	    return this.getTypedRuleContext(RemoteNavOptionContext,0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	picture() {
	    return this.getTypedRuleContext(PictureContext,0);
	};

	background() {
	    return this.getTypedRuleContext(BackgroundContext,0);
	};

	musicExpression() {
	    return this.getTypedRuleContext(MusicExpressionContext,0);
	};

	preposition() {
	    return this.getTypedRuleContext(PrepositionContext,0);
	};

	property() {
	    return this.getTypedRuleContext(PropertyContext,0);
	};

	propertyValue() {
	    return this.getTypedRuleContext(PropertyValueContext,0);
	};

	sortChunkType() {
	    return this.getTypedRuleContext(SortChunkTypeContext,0);
	};

	sortDirection() {
	    return this.getTypedRuleContext(SortDirectionContext,0);
	};

	sortStyle() {
	    return this.getTypedRuleContext(SortStyleContext,0);
	};

	timeUnit() {
	    return this.getTypedRuleContext(TimeUnitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterCommandStmnt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitCommandStmnt(this);
		}
	}


}



class RemoteNavOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_remoteNavOption;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterRemoteNavOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitRemoteNavOption(this);
		}
	}


}



class ConvertibleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_convertible;
    }

	conversionFormat = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConversionFormatContext);
	    } else {
	        return this.getTypedRuleContext(ConversionFormatContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterConvertible(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitConvertible(this);
		}
	}


}



class ConversionFormatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_conversionFormat;
    }

	seconds() {
	    return this.getTypedRuleContext(SecondsContext,0);
	};

	length() {
	    return this.getTypedRuleContext(LengthContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterConversionFormat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitConversionFormat(this);
		}
	}


}



class LengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_length;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitLength(this);
		}
	}


}



class SortDirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_sortDirection;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterSortDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitSortDirection(this);
		}
	}


}



class SortChunkTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_sortChunkType;
    }

	line() {
	    return this.getTypedRuleContext(LineContext,0);
	};

	of() {
	    return this.getTypedRuleContext(OfContext,0);
	};

	item() {
	    return this.getTypedRuleContext(ItemContext,0);
	};

	word() {
	    return this.getTypedRuleContext(WordContext,0);
	};

	character() {
	    return this.getTypedRuleContext(CharacterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterSortChunkType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitSortChunkType(this);
		}
	}


}



class SortStyleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_sortStyle;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterSortStyle(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitSortStyle(this);
		}
	}


}



class RepeatRangeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_repeatRange;
    }

	duration() {
	    return this.getTypedRuleContext(DurationContext,0);
	};

	count() {
	    return this.getTypedRuleContext(CountContext,0);
	};

	ID() {
	    return this.getToken(HyperTalkParser.ID, 0);
	};

	range() {
	    return this.getTypedRuleContext(RangeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterRepeatRange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitRepeatRange(this);
		}
	}


}



class DurationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_duration;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterDuration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitDuration(this);
		}
	}


}



class CountContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_count;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterCount(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitCount(this);
		}
	}


}



class RangeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_range;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterRange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitRange(this);
		}
	}


}



class ChunkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_chunk;
    }

	ordinal() {
	    return this.getTypedRuleContext(OrdinalContext,0);
	};

	character() {
	    return this.getTypedRuleContext(CharacterContext,0);
	};

	of() {
	    return this.getTypedRuleContext(OfContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	word() {
	    return this.getTypedRuleContext(WordContext,0);
	};

	item() {
	    return this.getTypedRuleContext(ItemContext,0);
	};

	line() {
	    return this.getTypedRuleContext(LineContext,0);
	};

	chunk = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ChunkContext);
	    } else {
	        return this.getTypedRuleContext(ChunkContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterChunk(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitChunk(this);
		}
	}


}



class MenuContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_menu;
    }

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	ordinal() {
	    return this.getTypedRuleContext(OrdinalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterMenu(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitMenu(this);
		}
	}


}



class MenuItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_menuItem;
    }

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	of() {
	    return this.getTypedRuleContext(OfContext,0);
	};

	menu() {
	    return this.getTypedRuleContext(MenuContext,0);
	};

	ordinal() {
	    return this.getTypedRuleContext(OrdinalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterMenuItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitMenuItem(this);
		}
	}


}



class PropertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_property;
    }

	partProperty() {
	    return this.getTypedRuleContext(PartPropertyContext,0);
	};

	globalProperty() {
	    return this.getTypedRuleContext(GlobalPropertyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitProperty(this);
		}
	}


}



class GlobalPropertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_globalProperty;
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterGlobalProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitGlobalProperty(this);
		}
	}


}



class PartPropertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_partProperty;
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	of() {
	    return this.getTypedRuleContext(OfContext,0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	length() {
	    return this.getTypedRuleContext(LengthContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterPartProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitPartProperty(this);
		}
	}


}



class PartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_part;
    }

	message() {
	    return this.getTypedRuleContext(MessageContext,0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	background() {
	    return this.getTypedRuleContext(BackgroundContext,0);
	};

	buttonPart() {
	    return this.getTypedRuleContext(ButtonPartContext,0);
	};

	fieldPart() {
	    return this.getTypedRuleContext(FieldPartContext,0);
	};

	bkgndPart() {
	    return this.getTypedRuleContext(BkgndPartContext,0);
	};

	cardPart() {
	    return this.getTypedRuleContext(CardPartContext,0);
	};

	stackPart() {
	    return this.getTypedRuleContext(StackPartContext,0);
	};

	windowPart() {
	    return this.getTypedRuleContext(WindowPartContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitPart(this);
		}
	}


}



class StackPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_stackPart;
    }

	stack() {
	    return this.getTypedRuleContext(StackContext,0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterStackPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitStackPart(this);
		}
	}


}



class ButtonPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_buttonPart;
    }

	button() {
	    return this.getTypedRuleContext(ButtonContext,0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	background() {
	    return this.getTypedRuleContext(BackgroundContext,0);
	};

	ordinal() {
	    return this.getTypedRuleContext(OrdinalContext,0);
	};

	buttonPart() {
	    return this.getTypedRuleContext(ButtonPartContext,0);
	};

	of() {
	    return this.getTypedRuleContext(OfContext,0);
	};

	cardPart() {
	    return this.getTypedRuleContext(CardPartContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterButtonPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitButtonPart(this);
		}
	}


}



class FieldPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_fieldPart;
    }

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	field() {
	    return this.getTypedRuleContext(FieldContext,0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	background() {
	    return this.getTypedRuleContext(BackgroundContext,0);
	};

	ordinal() {
	    return this.getTypedRuleContext(OrdinalContext,0);
	};

	fieldPart() {
	    return this.getTypedRuleContext(FieldPartContext,0);
	};

	of() {
	    return this.getTypedRuleContext(OfContext,0);
	};

	cardPart() {
	    return this.getTypedRuleContext(CardPartContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterFieldPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitFieldPart(this);
		}
	}


}



class CardPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_cardPart;
    }

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	position() {
	    return this.getTypedRuleContext(PositionContext,0);
	};

	ordinal() {
	    return this.getTypedRuleContext(OrdinalContext,0);
	};

	cardPart() {
	    return this.getTypedRuleContext(CardPartContext,0);
	};

	of() {
	    return this.getTypedRuleContext(OfContext,0);
	};

	bkgndPart() {
	    return this.getTypedRuleContext(BkgndPartContext,0);
	};

	stackPart() {
	    return this.getTypedRuleContext(StackPartContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterCardPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitCardPart(this);
		}
	}


}



class BkgndPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_bkgndPart;
    }

	background() {
	    return this.getTypedRuleContext(BackgroundContext,0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	ordinal() {
	    return this.getTypedRuleContext(OrdinalContext,0);
	};

	position() {
	    return this.getTypedRuleContext(PositionContext,0);
	};

	bkgndPart() {
	    return this.getTypedRuleContext(BkgndPartContext,0);
	};

	of() {
	    return this.getTypedRuleContext(OfContext,0);
	};

	stackPart() {
	    return this.getTypedRuleContext(StackPartContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterBkgndPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitBkgndPart(this);
		}
	}


}



class WindowPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_windowPart;
    }

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterWindowPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitWindowPart(this);
		}
	}


}



class ListExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_listExpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	listExpression() {
	    return this.getTypedRuleContext(ListExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterListExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitListExpression(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_expression;
        this.op = null; // Token
    }

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitExpression(this);
		}
	}


}



class FactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_factor;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	effectExpression() {
	    return this.getTypedRuleContext(EffectExpressionContext,0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	container() {
	    return this.getTypedRuleContext(ContainerContext,0);
	};

	chunk() {
	    return this.getTypedRuleContext(ChunkContext,0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitFactor(this);
		}
	}


}



class ContainerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_container;
    }

	ID() {
	    return this.getToken(HyperTalkParser.ID, 0);
	};

	property() {
	    return this.getTypedRuleContext(PropertyContext,0);
	};

	menu() {
	    return this.getTypedRuleContext(MenuContext,0);
	};

	menuItem() {
	    return this.getTypedRuleContext(MenuItemContext,0);
	};

	part() {
	    return this.getTypedRuleContext(PartContext,0);
	};

	chunk() {
	    return this.getTypedRuleContext(ChunkContext,0);
	};

	container() {
	    return this.getTypedRuleContext(ContainerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterContainer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitContainer(this);
		}
	}


}



class MusicExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_musicExpression;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterMusicExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitMusicExpression(this);
		}
	}


}



class ToolExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_toolExpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterToolExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitToolExpression(this);
		}
	}


}



class EffectExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_effectExpression;
    }

	effect() {
	    return this.getTypedRuleContext(EffectContext,0);
	};

	image() {
	    return this.getTypedRuleContext(ImageContext,0);
	};

	speed() {
	    return this.getTypedRuleContext(SpeedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterEffectExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitEffectExpression(this);
		}
	}


}



class FunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_functionCall;
    }

	builtInFunc() {
	    return this.getTypedRuleContext(BuiltInFuncContext,0);
	};

	ID() {
	    return this.getToken(HyperTalkParser.ID, 0);
	};

	listExpression() {
	    return this.getTypedRuleContext(ListExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitFunctionCall(this);
		}
	}


}



class BuiltInFuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_builtInFunc;
    }

	zeroArgFunc() {
	    return this.getTypedRuleContext(ZeroArgFuncContext,0);
	};

	singleArgFunc() {
	    return this.getTypedRuleContext(SingleArgFuncContext,0);
	};

	of() {
	    return this.getTypedRuleContext(OfContext,0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	listExpression() {
	    return this.getTypedRuleContext(ListExpressionContext,0);
	};

	multiArgFunc() {
	    return this.getTypedRuleContext(MultiArgFuncContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterBuiltInFunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitBuiltInFunc(this);
		}
	}


}



class ZeroArgFuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_zeroArgFunc;
    }

	seconds() {
	    return this.getTypedRuleContext(SecondsContext,0);
	};

	length() {
	    return this.getTypedRuleContext(LengthContext,0);
	};

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	background() {
	    return this.getTypedRuleContext(BackgroundContext,0);
	};

	button() {
	    return this.getTypedRuleContext(ButtonContext,0);
	};

	field() {
	    return this.getTypedRuleContext(FieldContext,0);
	};

	cards() {
	    return this.getTypedRuleContext(CardsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterZeroArgFunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitZeroArgFunc(this);
		}
	}


}



class SingleArgFuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_singleArgFunc;
    }

	card() {
	    return this.getTypedRuleContext(CardContext,0);
	};

	background() {
	    return this.getTypedRuleContext(BackgroundContext,0);
	};

	button() {
	    return this.getTypedRuleContext(ButtonContext,0);
	};

	field() {
	    return this.getTypedRuleContext(FieldContext,0);
	};

	cards() {
	    return this.getTypedRuleContext(CardsContext,0);
	};

	character() {
	    return this.getTypedRuleContext(CharacterContext,0);
	};

	word() {
	    return this.getTypedRuleContext(WordContext,0);
	};

	item() {
	    return this.getTypedRuleContext(ItemContext,0);
	};

	line() {
	    return this.getTypedRuleContext(LineContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterSingleArgFunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitSingleArgFunc(this);
		}
	}


}



class MultiArgFuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_multiArgFunc;
    }

	singleArgFunc() {
	    return this.getTypedRuleContext(SingleArgFuncContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterMultiArgFunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitMultiArgFunc(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_literal;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	modifierKey() {
	    return this.getTypedRuleContext(ModifierKeyContext,0);
	};

	mouseState() {
	    return this.getTypedRuleContext(MouseStateContext,0);
	};

	knownType() {
	    return this.getTypedRuleContext(KnownTypeContext,0);
	};

	findType() {
	    return this.getTypedRuleContext(FindTypeContext,0);
	};

	LITERAL() {
	    return this.getToken(HyperTalkParser.LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class PrepositionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_preposition;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterPreposition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitPreposition(this);
		}
	}


}



class ConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_constant;
    }

	cardinalValue() {
	    return this.getTypedRuleContext(CardinalValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitConstant(this);
		}
	}


}



class CardinalValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_cardinalValue;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterCardinalValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitCardinalValue(this);
		}
	}


}



class OrdinalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_ordinal;
    }

	ordinalValue() {
	    return this.getTypedRuleContext(OrdinalValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterOrdinal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitOrdinal(this);
		}
	}


}



class OrdinalValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_ordinalValue;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterOrdinalValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitOrdinalValue(this);
		}
	}


}



class MouseStateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_mouseState;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterMouseState(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitMouseState(this);
		}
	}


}



class ModifierKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_modifierKey;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterModifierKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitModifierKey(this);
		}
	}


}



class KnownTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_knownType;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterKnownType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitKnownType(this);
		}
	}


}



class FindTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_findType;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterFindType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitFindType(this);
		}
	}


}



class PropertyNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_propertyName;
    }

	ID() {
	    return this.getToken(HyperTalkParser.ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterPropertyName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitPropertyName(this);
		}
	}


}



class PropertyValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_propertyValue;
    }

	listExpression() {
	    return this.getTypedRuleContext(ListExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterPropertyValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitPropertyValue(this);
		}
	}


}



class CommandNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_commandName;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterCommandName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitCommandName(this);
		}
	}


}



class PictureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_picture;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterPicture(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitPicture(this);
		}
	}


}



class SecondsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_seconds;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterSeconds(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitSeconds(this);
		}
	}


}



class SpeedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_speed;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterSpeed(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitSpeed(this);
		}
	}


}



class ImageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_image;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterImage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitImage(this);
		}
	}


}



class EffectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_effect;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterEffect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitEffect(this);
		}
	}


}



class TimeUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_timeUnit;
    }

	seconds() {
	    return this.getTypedRuleContext(SecondsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterTimeUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitTimeUnit(this);
		}
	}


}



class PositionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_position;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterPosition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitPosition(this);
		}
	}


}



class MessageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_message;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterMessage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitMessage(this);
		}
	}


}



class CardsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_cards;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterCards(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitCards(this);
		}
	}


}



class CardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_card;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterCard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitCard(this);
		}
	}


}



class BackgroundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_background;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterBackground(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitBackground(this);
		}
	}


}



class ButtonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_button;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterButton(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitButton(this);
		}
	}


}



class FieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_field;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitField(this);
		}
	}


}



class StackContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_stack;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterStack(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitStack(this);
		}
	}


}



class CharacterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_character;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterCharacter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitCharacter(this);
		}
	}


}



class WordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_word;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterWord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitWord(this);
		}
	}


}



class LineContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_line;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterLine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitLine(this);
		}
	}


}



class ItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_item;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitItem(this);
		}
	}


}



class OfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HyperTalkParser.RULE_of;
    }


	enterRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.enterOf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HyperTalkListener ) {
	        listener.exitOf(this);
		}
	}


}




HyperTalkParser.ScriptContext = ScriptContext; 
HyperTalkParser.ScriptletContext = ScriptletContext; 
HyperTalkParser.MultilineScriptletContext = MultilineScriptletContext; 
HyperTalkParser.HandlerContext = HandlerContext; 
HyperTalkParser.Function_Context = Function_Context; 
HyperTalkParser.HandlerNameContext = HandlerNameContext; 
HyperTalkParser.ParameterListContext = ParameterListContext; 
HyperTalkParser.StatementListContext = StatementListContext; 
HyperTalkParser.StatementContext = StatementContext; 
HyperTalkParser.GlobalStmntContext = GlobalStmntContext; 
HyperTalkParser.ReturnStmntContext = ReturnStmntContext; 
HyperTalkParser.IfStatementContext = IfStatementContext; 
HyperTalkParser.ThenStatementContext = ThenStatementContext; 
HyperTalkParser.ElseStatementContext = ElseStatementContext; 
HyperTalkParser.RepeatStatementContext = RepeatStatementContext; 
HyperTalkParser.MessageStatementContext = MessageStatementContext; 
HyperTalkParser.CommandStmntContext = CommandStmntContext; 
HyperTalkParser.RemoteNavOptionContext = RemoteNavOptionContext; 
HyperTalkParser.ConvertibleContext = ConvertibleContext; 
HyperTalkParser.ConversionFormatContext = ConversionFormatContext; 
HyperTalkParser.LengthContext = LengthContext; 
HyperTalkParser.SortDirectionContext = SortDirectionContext; 
HyperTalkParser.SortChunkTypeContext = SortChunkTypeContext; 
HyperTalkParser.SortStyleContext = SortStyleContext; 
HyperTalkParser.RepeatRangeContext = RepeatRangeContext; 
HyperTalkParser.DurationContext = DurationContext; 
HyperTalkParser.CountContext = CountContext; 
HyperTalkParser.RangeContext = RangeContext; 
HyperTalkParser.ChunkContext = ChunkContext; 
HyperTalkParser.MenuContext = MenuContext; 
HyperTalkParser.MenuItemContext = MenuItemContext; 
HyperTalkParser.PropertyContext = PropertyContext; 
HyperTalkParser.GlobalPropertyContext = GlobalPropertyContext; 
HyperTalkParser.PartPropertyContext = PartPropertyContext; 
HyperTalkParser.PartContext = PartContext; 
HyperTalkParser.StackPartContext = StackPartContext; 
HyperTalkParser.ButtonPartContext = ButtonPartContext; 
HyperTalkParser.FieldPartContext = FieldPartContext; 
HyperTalkParser.CardPartContext = CardPartContext; 
HyperTalkParser.BkgndPartContext = BkgndPartContext; 
HyperTalkParser.WindowPartContext = WindowPartContext; 
HyperTalkParser.ListExpressionContext = ListExpressionContext; 
HyperTalkParser.ExpressionContext = ExpressionContext; 
HyperTalkParser.FactorContext = FactorContext; 
HyperTalkParser.ContainerContext = ContainerContext; 
HyperTalkParser.MusicExpressionContext = MusicExpressionContext; 
HyperTalkParser.ToolExpressionContext = ToolExpressionContext; 
HyperTalkParser.EffectExpressionContext = EffectExpressionContext; 
HyperTalkParser.FunctionCallContext = FunctionCallContext; 
HyperTalkParser.BuiltInFuncContext = BuiltInFuncContext; 
HyperTalkParser.ZeroArgFuncContext = ZeroArgFuncContext; 
HyperTalkParser.SingleArgFuncContext = SingleArgFuncContext; 
HyperTalkParser.MultiArgFuncContext = MultiArgFuncContext; 
HyperTalkParser.LiteralContext = LiteralContext; 
HyperTalkParser.PrepositionContext = PrepositionContext; 
HyperTalkParser.ConstantContext = ConstantContext; 
HyperTalkParser.CardinalValueContext = CardinalValueContext; 
HyperTalkParser.OrdinalContext = OrdinalContext; 
HyperTalkParser.OrdinalValueContext = OrdinalValueContext; 
HyperTalkParser.MouseStateContext = MouseStateContext; 
HyperTalkParser.ModifierKeyContext = ModifierKeyContext; 
HyperTalkParser.KnownTypeContext = KnownTypeContext; 
HyperTalkParser.FindTypeContext = FindTypeContext; 
HyperTalkParser.PropertyNameContext = PropertyNameContext; 
HyperTalkParser.PropertyValueContext = PropertyValueContext; 
HyperTalkParser.CommandNameContext = CommandNameContext; 
HyperTalkParser.PictureContext = PictureContext; 
HyperTalkParser.SecondsContext = SecondsContext; 
HyperTalkParser.SpeedContext = SpeedContext; 
HyperTalkParser.ImageContext = ImageContext; 
HyperTalkParser.EffectContext = EffectContext; 
HyperTalkParser.TimeUnitContext = TimeUnitContext; 
HyperTalkParser.PositionContext = PositionContext; 
HyperTalkParser.MessageContext = MessageContext; 
HyperTalkParser.CardsContext = CardsContext; 
HyperTalkParser.CardContext = CardContext; 
HyperTalkParser.BackgroundContext = BackgroundContext; 
HyperTalkParser.ButtonContext = ButtonContext; 
HyperTalkParser.FieldContext = FieldContext; 
HyperTalkParser.StackContext = StackContext; 
HyperTalkParser.CharacterContext = CharacterContext; 
HyperTalkParser.WordContext = WordContext; 
HyperTalkParser.LineContext = LineContext; 
HyperTalkParser.ItemContext = ItemContext; 
HyperTalkParser.OfContext = OfContext; 
