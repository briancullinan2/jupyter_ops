// Generated from Resources/Parsers/css3/css3.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import css3Listener from './css3Listener.js';
const serializedATN = [4,1,62,1112,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,1,0,1,0,1,0,5,0,162,8,0,10,0,12,0,165,9,0,5,0,167,8,0,10,0,12,0,
170,9,0,1,0,1,0,5,0,174,8,0,10,0,12,0,177,9,0,5,0,179,8,0,10,0,12,0,182,
9,0,1,0,1,0,5,0,186,8,0,10,0,12,0,189,9,0,5,0,191,8,0,10,0,12,0,194,9,0,
1,0,1,0,5,0,198,8,0,10,0,12,0,201,9,0,5,0,203,8,0,10,0,12,0,206,9,0,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,220,8,1,1,2,1,2,1,2,1,2,
1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
1,2,1,2,1,2,1,2,3,2,248,8,2,1,3,1,3,1,3,1,3,1,3,3,3,255,8,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,267,8,3,1,3,1,3,1,3,3,3,272,8,3,1,4,1,4,
1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,5,6,287,8,6,10,6,12,6,290,9,
6,3,6,292,8,6,1,6,1,6,1,7,3,7,297,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,306,
8,7,10,7,12,7,309,9,7,1,7,1,7,1,7,1,7,1,7,5,7,316,8,7,10,7,12,7,319,9,7,
3,7,321,8,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,332,8,9,1,9,1,9,1,9,
1,10,1,10,1,10,1,11,1,11,1,11,3,11,343,8,11,1,11,1,11,1,11,3,11,348,8,11,
1,11,1,11,1,11,3,11,353,8,11,5,11,355,8,11,10,11,12,11,358,9,11,1,11,1,11,
1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,5,13,372,8,13,10,13,12,
13,375,9,13,1,14,1,14,1,14,1,14,1,14,1,14,5,14,383,8,14,10,14,12,14,386,
9,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,396,8,15,1,16,1,16,3,16,
400,8,16,1,16,1,16,1,16,1,16,1,16,5,16,407,8,16,10,16,12,16,410,9,16,1,16,
1,16,1,16,1,16,1,16,4,16,417,8,16,11,16,12,16,418,3,16,421,8,16,1,17,3,17,
424,8,17,1,17,1,17,1,18,1,18,3,18,430,8,18,1,18,1,18,1,19,1,19,1,20,3,20,
437,8,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,3,22,447,8,22,1,22,1,22,
1,22,1,22,1,22,1,22,3,22,455,8,22,1,22,1,22,3,22,459,8,22,1,22,1,22,1,23,
1,23,3,23,465,8,23,1,23,1,23,3,23,469,8,23,1,24,1,24,1,24,1,24,1,24,1,25,
1,25,1,25,1,25,1,25,1,25,1,25,3,25,483,8,25,1,25,4,25,486,8,25,11,25,12,
25,487,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,3,27,
502,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,512,8,28,1,29,1,29,
1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,523,8,29,1,30,1,30,1,30,1,30,3,30,
529,8,30,1,30,1,30,1,30,1,30,5,30,535,8,30,10,30,12,30,538,9,30,1,30,1,30,
1,30,3,30,543,8,30,1,30,1,30,1,30,3,30,548,8,30,1,31,1,31,5,31,552,8,31,
10,31,12,31,555,9,31,1,31,1,31,1,31,1,31,1,31,3,31,562,8,31,5,31,564,8,31,
10,31,12,31,567,9,31,1,32,1,32,1,32,1,32,1,32,3,32,574,8,32,1,32,1,32,1,
32,1,32,1,32,3,32,581,8,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,4,34,
591,8,34,11,34,12,34,592,1,35,1,35,3,35,597,8,35,1,35,5,35,600,8,35,10,35,
12,35,603,9,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
3,36,631,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,
1,39,1,39,1,39,1,40,3,40,649,8,40,1,40,1,40,1,41,3,41,654,8,41,1,41,1,41,
1,42,3,42,659,8,42,1,42,1,42,1,43,3,43,664,8,43,1,43,1,43,1,44,1,44,1,44,
1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
1,44,5,44,701,8,44,10,44,12,44,704,9,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
44,5,44,713,8,44,10,44,12,44,716,9,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
5,44,725,8,44,10,44,12,44,728,9,44,1,44,1,44,1,44,3,44,733,8,44,1,45,1,45,
1,45,5,45,738,8,45,10,45,12,45,741,9,45,1,45,1,45,1,45,3,45,746,8,45,1,46,
1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,761,8,47,
1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,5,48,774,8,48,10,
48,12,48,777,9,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
1,49,1,49,3,49,792,8,49,1,50,1,50,1,50,5,50,797,8,50,10,50,12,50,800,9,50,
1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,3,52,815,
8,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,825,8,53,1,54,1,54,1,54,
1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,4,55,843,
8,55,11,55,12,55,844,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,4,
56,857,8,56,11,56,12,56,858,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,5,58,
869,8,58,10,58,12,58,872,9,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,
59,1,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
1,61,5,61,898,8,61,10,61,12,61,901,9,61,1,62,1,62,1,62,1,62,1,62,1,62,1,
62,1,62,1,62,1,62,5,62,913,8,62,10,62,12,62,916,9,62,1,63,1,63,1,63,1,63,
1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,
63,936,8,63,1,64,1,64,1,64,1,64,1,64,3,64,943,8,64,1,64,1,64,1,64,3,64,948,
8,64,5,64,950,8,64,10,64,12,64,953,9,64,1,64,1,64,1,64,1,65,1,65,1,65,1,
65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,968,8,65,1,66,1,66,1,66,1,66,1,66,
1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,3,67,986,8,67,1,67,
1,67,1,67,5,67,991,8,67,10,67,12,67,994,9,67,1,68,1,68,1,68,1,68,1,68,1,
68,1,68,5,68,1003,8,68,10,68,12,68,1006,9,68,1,69,1,69,1,69,1,69,1,69,3,
69,1013,8,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1025,
8,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,5,71,1037,8,71,10,
71,12,71,1040,9,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,72,5,72,1051,
8,72,10,72,12,72,1054,9,72,1,73,1,73,1,73,1,73,1,73,5,73,1061,8,73,10,73,
12,73,1064,9,73,3,73,1066,8,73,1,74,1,74,1,74,1,74,1,74,3,74,1073,8,74,1,
74,1,74,1,74,1,74,3,74,1079,8,74,5,74,1081,8,74,10,74,12,74,1084,9,74,1,
74,1,74,1,74,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,5,76,1099,
8,76,10,76,12,76,1102,9,76,1,77,1,77,1,78,5,78,1107,8,78,10,78,12,78,1110,
9,78,1,78,0,0,79,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,0,9,1,0,16,19,
2,0,30,30,44,44,1,0,32,33,3,0,11,11,20,21,45,47,1,0,37,38,2,0,2,2,62,62,
2,0,29,29,52,53,4,0,32,34,50,50,52,53,61,61,1,0,16,17,1208,0,158,1,0,0,0,
2,219,1,0,0,0,4,247,1,0,0,0,6,271,1,0,0,0,8,273,1,0,0,0,10,275,1,0,0,0,12,
291,1,0,0,0,14,320,1,0,0,0,16,322,1,0,0,0,18,324,1,0,0,0,20,336,1,0,0,0,
22,339,1,0,0,0,24,362,1,0,0,0,26,366,1,0,0,0,28,376,1,0,0,0,30,395,1,0,0,
0,32,420,1,0,0,0,34,423,1,0,0,0,36,429,1,0,0,0,38,433,1,0,0,0,40,436,1,0,
0,0,42,440,1,0,0,0,44,443,1,0,0,0,46,462,1,0,0,0,48,470,1,0,0,0,50,485,1,
0,0,0,52,489,1,0,0,0,54,501,1,0,0,0,56,511,1,0,0,0,58,522,1,0,0,0,60,547,
1,0,0,0,62,553,1,0,0,0,64,580,1,0,0,0,66,582,1,0,0,0,68,590,1,0,0,0,70,594,
1,0,0,0,72,630,1,0,0,0,74,632,1,0,0,0,76,638,1,0,0,0,78,644,1,0,0,0,80,648,
1,0,0,0,82,653,1,0,0,0,84,658,1,0,0,0,86,663,1,0,0,0,88,732,1,0,0,0,90,734,
1,0,0,0,92,747,1,0,0,0,94,760,1,0,0,0,96,762,1,0,0,0,98,791,1,0,0,0,100,
793,1,0,0,0,102,804,1,0,0,0,104,814,1,0,0,0,106,824,1,0,0,0,108,826,1,0,
0,0,110,832,1,0,0,0,112,846,1,0,0,0,114,860,1,0,0,0,116,865,1,0,0,0,118,
875,1,0,0,0,120,882,1,0,0,0,122,888,1,0,0,0,124,902,1,0,0,0,126,935,1,0,
0,0,128,937,1,0,0,0,130,967,1,0,0,0,132,969,1,0,0,0,134,992,1,0,0,0,136,
995,1,0,0,0,138,1007,1,0,0,0,140,1017,1,0,0,0,142,1029,1,0,0,0,144,1044,
1,0,0,0,146,1065,1,0,0,0,148,1067,1,0,0,0,150,1088,1,0,0,0,152,1090,1,0,
0,0,154,1103,1,0,0,0,156,1108,1,0,0,0,158,168,3,156,78,0,159,163,3,2,1,0,
160,162,7,0,0,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,163,164,
1,0,0,0,164,167,1,0,0,0,165,163,1,0,0,0,166,159,1,0,0,0,167,170,1,0,0,0,
168,166,1,0,0,0,168,169,1,0,0,0,169,180,1,0,0,0,170,168,1,0,0,0,171,175,
3,4,2,0,172,174,7,0,0,0,173,172,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,
175,176,1,0,0,0,176,179,1,0,0,0,177,175,1,0,0,0,178,171,1,0,0,0,179,182,
1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,192,1,0,0,0,182,180,1,0,0,0,
183,187,3,6,3,0,184,186,7,0,0,0,185,184,1,0,0,0,186,189,1,0,0,0,187,185,
1,0,0,0,187,188,1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,0,190,183,1,0,0,0,
191,194,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,204,1,0,0,0,194,192,
1,0,0,0,195,199,3,98,49,0,196,198,7,0,0,0,197,196,1,0,0,0,198,201,1,0,0,
0,199,197,1,0,0,0,199,200,1,0,0,0,200,203,1,0,0,0,201,199,1,0,0,0,202,195,
1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,1,1,0,0,0,206,
204,1,0,0,0,207,208,5,27,0,0,208,209,3,156,78,0,209,210,5,44,0,0,210,211,
3,156,78,0,211,212,5,1,0,0,212,213,3,156,78,0,213,220,1,0,0,0,214,215,5,
27,0,0,215,216,3,156,78,0,216,217,5,44,0,0,217,218,3,156,78,0,218,220,1,
0,0,0,219,207,1,0,0,0,219,214,1,0,0,0,220,3,1,0,0,0,221,222,5,23,0,0,222,
223,3,156,78,0,223,224,7,1,0,0,224,225,3,156,78,0,225,226,3,12,6,0,226,227,
5,1,0,0,227,228,3,156,78,0,228,248,1,0,0,0,229,230,5,23,0,0,230,231,3,156,
78,0,231,232,7,1,0,0,232,233,3,156,78,0,233,234,5,1,0,0,234,235,3,156,78,
0,235,248,1,0,0,0,236,237,5,23,0,0,237,238,3,156,78,0,238,239,7,1,0,0,239,
240,3,156,78,0,240,241,3,12,6,0,241,248,1,0,0,0,242,243,5,23,0,0,243,244,
3,156,78,0,244,245,7,1,0,0,245,246,3,156,78,0,246,248,1,0,0,0,247,221,1,
0,0,0,247,229,1,0,0,0,247,236,1,0,0,0,247,242,1,0,0,0,248,5,1,0,0,0,249,
250,5,26,0,0,250,254,3,156,78,0,251,252,3,8,4,0,252,253,3,156,78,0,253,255,
1,0,0,0,254,251,1,0,0,0,254,255,1,0,0,0,255,256,1,0,0,0,256,257,7,1,0,0,
257,258,3,156,78,0,258,259,5,1,0,0,259,260,3,156,78,0,260,272,1,0,0,0,261,
262,5,26,0,0,262,266,3,156,78,0,263,264,3,8,4,0,264,265,3,156,78,0,265,267,
1,0,0,0,266,263,1,0,0,0,266,267,1,0,0,0,267,268,1,0,0,0,268,269,7,1,0,0,
269,270,3,156,78,0,270,272,1,0,0,0,271,249,1,0,0,0,271,261,1,0,0,0,272,7,
1,0,0,0,273,274,3,154,77,0,274,9,1,0,0,0,275,276,5,25,0,0,276,277,3,156,
78,0,277,278,3,12,6,0,278,279,3,100,50,0,279,280,3,156,78,0,280,11,1,0,0,
0,281,288,3,14,7,0,282,283,5,40,0,0,283,284,3,156,78,0,284,285,3,14,7,0,
285,287,1,0,0,0,286,282,1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,288,289,
1,0,0,0,289,292,1,0,0,0,290,288,1,0,0,0,291,281,1,0,0,0,291,292,1,0,0,0,
292,293,1,0,0,0,293,294,3,156,78,0,294,13,1,0,0,0,295,297,7,2,0,0,296,295,
1,0,0,0,296,297,1,0,0,0,297,298,1,0,0,0,298,299,3,156,78,0,299,300,3,16,
8,0,300,307,3,156,78,0,301,302,5,34,0,0,302,303,3,156,78,0,303,304,3,18,
9,0,304,306,1,0,0,0,305,301,1,0,0,0,306,309,1,0,0,0,307,305,1,0,0,0,307,
308,1,0,0,0,308,321,1,0,0,0,309,307,1,0,0,0,310,317,3,18,9,0,311,312,5,34,
0,0,312,313,3,156,78,0,313,314,3,18,9,0,314,316,1,0,0,0,315,311,1,0,0,0,
316,319,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,321,1,0,0,0,319,317,
1,0,0,0,320,296,1,0,0,0,320,310,1,0,0,0,321,15,1,0,0,0,322,323,3,154,77,
0,323,17,1,0,0,0,324,325,5,2,0,0,325,326,3,156,78,0,326,331,3,20,10,0,327,
328,5,3,0,0,328,329,3,156,78,0,329,330,3,70,35,0,330,332,1,0,0,0,331,327,
1,0,0,0,331,332,1,0,0,0,332,333,1,0,0,0,333,334,5,4,0,0,334,335,3,156,78,
0,335,19,1,0,0,0,336,337,3,154,77,0,337,338,3,156,78,0,338,21,1,0,0,0,339,
340,5,24,0,0,340,342,3,156,78,0,341,343,3,24,12,0,342,341,1,0,0,0,342,343,
1,0,0,0,343,344,1,0,0,0,344,345,5,5,0,0,345,347,3,156,78,0,346,348,3,64,
32,0,347,346,1,0,0,0,347,348,1,0,0,0,348,356,1,0,0,0,349,350,5,1,0,0,350,
352,3,156,78,0,351,353,3,64,32,0,352,351,1,0,0,0,352,353,1,0,0,0,353,355,
1,0,0,0,354,349,1,0,0,0,355,358,1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,
357,359,1,0,0,0,358,356,1,0,0,0,359,360,5,6,0,0,360,361,3,156,78,0,361,23,
1,0,0,0,362,363,5,3,0,0,363,364,3,154,77,0,364,365,3,156,78,0,365,25,1,0,
0,0,366,373,3,28,14,0,367,368,5,40,0,0,368,369,3,156,78,0,369,370,3,28,14,
0,370,372,1,0,0,0,371,367,1,0,0,0,372,375,1,0,0,0,373,371,1,0,0,0,373,374,
1,0,0,0,374,27,1,0,0,0,375,373,1,0,0,0,376,377,3,32,16,0,377,384,3,156,78,
0,378,379,3,30,15,0,379,380,3,32,16,0,380,381,3,156,78,0,381,383,1,0,0,0,
382,378,1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,29,1,
0,0,0,386,384,1,0,0,0,387,388,5,37,0,0,388,396,3,156,78,0,389,390,5,39,0,
0,390,396,3,156,78,0,391,392,5,41,0,0,392,396,3,156,78,0,393,394,5,17,0,
0,394,396,3,156,78,0,395,387,1,0,0,0,395,389,1,0,0,0,395,391,1,0,0,0,395,
393,1,0,0,0,396,31,1,0,0,0,397,400,3,34,17,0,398,400,3,40,20,0,399,397,1,
0,0,0,399,398,1,0,0,0,400,408,1,0,0,0,401,407,5,22,0,0,402,407,3,42,21,0,
403,407,3,44,22,0,404,407,3,46,23,0,405,407,3,52,26,0,406,401,1,0,0,0,406,
402,1,0,0,0,406,403,1,0,0,0,406,404,1,0,0,0,406,405,1,0,0,0,407,410,1,0,
0,0,408,406,1,0,0,0,408,409,1,0,0,0,409,421,1,0,0,0,410,408,1,0,0,0,411,
417,5,22,0,0,412,417,3,42,21,0,413,417,3,44,22,0,414,417,3,46,23,0,415,417,
3,52,26,0,416,411,1,0,0,0,416,412,1,0,0,0,416,413,1,0,0,0,416,414,1,0,0,
0,416,415,1,0,0,0,417,418,1,0,0,0,418,416,1,0,0,0,418,419,1,0,0,0,419,421,
1,0,0,0,420,399,1,0,0,0,420,416,1,0,0,0,421,33,1,0,0,0,422,424,3,36,18,0,
423,422,1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,426,3,38,19,0,426,35,
1,0,0,0,427,430,3,154,77,0,428,430,5,7,0,0,429,427,1,0,0,0,429,428,1,0,0,
0,429,430,1,0,0,0,430,431,1,0,0,0,431,432,5,8,0,0,432,37,1,0,0,0,433,434,
3,154,77,0,434,39,1,0,0,0,435,437,3,36,18,0,436,435,1,0,0,0,436,437,1,0,
0,0,437,438,1,0,0,0,438,439,5,7,0,0,439,41,1,0,0,0,440,441,5,9,0,0,441,442,
3,154,77,0,442,43,1,0,0,0,443,444,5,10,0,0,444,446,3,156,78,0,445,447,3,
36,18,0,446,445,1,0,0,0,446,447,1,0,0,0,447,448,1,0,0,0,448,449,3,154,77,
0,449,458,3,156,78,0,450,451,7,3,0,0,451,454,3,156,78,0,452,455,3,154,77,
0,453,455,5,44,0,0,454,452,1,0,0,0,454,453,1,0,0,0,455,456,1,0,0,0,456,457,
3,156,78,0,457,459,1,0,0,0,458,450,1,0,0,0,458,459,1,0,0,0,459,460,1,0,0,
0,460,461,5,12,0,0,461,45,1,0,0,0,462,464,5,3,0,0,463,465,5,3,0,0,464,463,
1,0,0,0,464,465,1,0,0,0,465,468,1,0,0,0,466,469,3,154,77,0,467,469,3,48,
24,0,468,466,1,0,0,0,468,467,1,0,0,0,469,47,1,0,0,0,470,471,5,62,0,0,471,
472,3,156,78,0,472,473,3,50,25,0,473,474,5,4,0,0,474,49,1,0,0,0,475,483,
5,37,0,0,476,483,5,38,0,0,477,483,5,35,0,0,478,483,5,36,0,0,479,483,5,43,
0,0,480,483,5,44,0,0,481,483,3,154,77,0,482,475,1,0,0,0,482,476,1,0,0,0,
482,477,1,0,0,0,482,478,1,0,0,0,482,479,1,0,0,0,482,480,1,0,0,0,482,481,
1,0,0,0,483,484,1,0,0,0,484,486,3,156,78,0,485,482,1,0,0,0,486,487,1,0,0,
0,487,485,1,0,0,0,487,488,1,0,0,0,488,51,1,0,0,0,489,490,5,42,0,0,490,491,
3,156,78,0,491,492,3,54,27,0,492,493,3,156,78,0,493,494,5,4,0,0,494,53,1,
0,0,0,495,502,3,34,17,0,496,502,3,40,20,0,497,502,5,22,0,0,498,502,3,42,
21,0,499,502,3,44,22,0,500,502,3,46,23,0,501,495,1,0,0,0,501,496,1,0,0,0,
501,497,1,0,0,0,501,498,1,0,0,0,501,499,1,0,0,0,501,500,1,0,0,0,502,55,1,
0,0,0,503,504,5,13,0,0,504,512,3,156,78,0,505,506,5,40,0,0,506,512,3,156,
78,0,507,508,5,17,0,0,508,512,3,156,78,0,509,510,5,11,0,0,510,512,3,156,
78,0,511,503,1,0,0,0,511,505,1,0,0,0,511,507,1,0,0,0,511,509,1,0,0,0,512,
57,1,0,0,0,513,514,3,154,77,0,514,515,3,156,78,0,515,523,1,0,0,0,516,517,
5,59,0,0,517,523,3,156,78,0,518,519,5,7,0,0,519,523,3,154,77,0,520,521,5,
14,0,0,521,523,3,154,77,0,522,513,1,0,0,0,522,516,1,0,0,0,522,518,1,0,0,
0,522,520,1,0,0,0,523,59,1,0,0,0,524,525,3,26,13,0,525,526,5,5,0,0,526,528,
3,156,78,0,527,529,3,62,31,0,528,527,1,0,0,0,528,529,1,0,0,0,529,530,1,0,
0,0,530,531,5,6,0,0,531,532,3,156,78,0,532,548,1,0,0,0,533,535,3,88,44,0,
534,533,1,0,0,0,535,538,1,0,0,0,536,534,1,0,0,0,536,537,1,0,0,0,537,539,
1,0,0,0,538,536,1,0,0,0,539,540,5,5,0,0,540,542,3,156,78,0,541,543,3,62,
31,0,542,541,1,0,0,0,542,543,1,0,0,0,543,544,1,0,0,0,544,545,5,6,0,0,545,
546,3,156,78,0,546,548,1,0,0,0,547,524,1,0,0,0,547,536,1,0,0,0,548,61,1,
0,0,0,549,550,5,1,0,0,550,552,3,156,78,0,551,549,1,0,0,0,552,555,1,0,0,0,
553,551,1,0,0,0,553,554,1,0,0,0,554,556,1,0,0,0,555,553,1,0,0,0,556,557,
3,64,32,0,557,565,3,156,78,0,558,559,5,1,0,0,559,561,3,156,78,0,560,562,
3,64,32,0,561,560,1,0,0,0,561,562,1,0,0,0,562,564,1,0,0,0,563,558,1,0,0,
0,564,567,1,0,0,0,565,563,1,0,0,0,565,566,1,0,0,0,566,63,1,0,0,0,567,565,
1,0,0,0,568,569,3,58,29,0,569,570,5,3,0,0,570,571,3,156,78,0,571,573,3,70,
35,0,572,574,3,66,33,0,573,572,1,0,0,0,573,574,1,0,0,0,574,581,1,0,0,0,575,
576,3,58,29,0,576,577,5,3,0,0,577,578,3,156,78,0,578,579,3,68,34,0,579,581,
1,0,0,0,580,568,1,0,0,0,580,575,1,0,0,0,581,65,1,0,0,0,582,583,5,28,0,0,
583,584,3,156,78,0,584,67,1,0,0,0,585,591,3,88,44,0,586,591,3,96,48,0,587,
588,3,92,46,0,588,589,3,156,78,0,589,591,1,0,0,0,590,585,1,0,0,0,590,586,
1,0,0,0,590,587,1,0,0,0,591,592,1,0,0,0,592,590,1,0,0,0,592,593,1,0,0,0,
593,69,1,0,0,0,594,601,3,72,36,0,595,597,3,56,28,0,596,595,1,0,0,0,596,597,
1,0,0,0,597,598,1,0,0,0,598,600,3,72,36,0,599,596,1,0,0,0,600,603,1,0,0,
0,601,599,1,0,0,0,601,602,1,0,0,0,602,71,1,0,0,0,603,601,1,0,0,0,604,605,
3,80,40,0,605,606,3,156,78,0,606,631,1,0,0,0,607,608,3,82,41,0,608,609,3,
156,78,0,609,631,1,0,0,0,610,611,3,84,42,0,611,612,3,156,78,0,612,631,1,
0,0,0,613,614,5,44,0,0,614,631,3,156,78,0,615,616,5,31,0,0,616,631,3,156,
78,0,617,618,3,154,77,0,618,619,3,156,78,0,619,631,1,0,0,0,620,631,3,118,
59,0,621,622,5,30,0,0,622,631,3,156,78,0,623,631,3,78,39,0,624,631,3,120,
60,0,625,631,3,74,37,0,626,627,3,86,43,0,627,628,3,156,78,0,628,631,1,0,
0,0,629,631,3,76,38,0,630,604,1,0,0,0,630,607,1,0,0,0,630,610,1,0,0,0,630,
613,1,0,0,0,630,615,1,0,0,0,630,617,1,0,0,0,630,620,1,0,0,0,630,621,1,0,
0,0,630,623,1,0,0,0,630,624,1,0,0,0,630,625,1,0,0,0,630,626,1,0,0,0,630,
629,1,0,0,0,631,73,1,0,0,0,632,633,5,62,0,0,633,634,3,156,78,0,634,635,3,
70,35,0,635,636,5,4,0,0,636,637,3,156,78,0,637,75,1,0,0,0,638,639,5,58,0,
0,639,640,3,156,78,0,640,641,3,70,35,0,641,642,5,4,0,0,642,643,3,156,78,
0,643,77,1,0,0,0,644,645,5,22,0,0,645,646,3,156,78,0,646,79,1,0,0,0,647,
649,7,4,0,0,648,647,1,0,0,0,648,649,1,0,0,0,649,650,1,0,0,0,650,651,5,43,
0,0,651,81,1,0,0,0,652,654,7,4,0,0,653,652,1,0,0,0,653,654,1,0,0,0,654,655,
1,0,0,0,655,656,5,29,0,0,656,83,1,0,0,0,657,659,7,4,0,0,658,657,1,0,0,0,
658,659,1,0,0,0,659,660,1,0,0,0,660,661,5,35,0,0,661,85,1,0,0,0,662,664,
7,4,0,0,663,662,1,0,0,0,663,664,1,0,0,0,664,665,1,0,0,0,665,666,5,36,0,0,
666,87,1,0,0,0,667,668,3,154,77,0,668,669,3,156,78,0,669,733,1,0,0,0,670,
671,3,80,40,0,671,672,3,156,78,0,672,733,1,0,0,0,673,674,3,82,41,0,674,675,
3,156,78,0,675,733,1,0,0,0,676,677,3,84,42,0,677,678,3,156,78,0,678,733,
1,0,0,0,679,680,3,86,43,0,680,681,3,156,78,0,681,733,1,0,0,0,682,683,5,44,
0,0,683,733,3,156,78,0,684,685,5,30,0,0,685,733,3,156,78,0,686,687,5,22,
0,0,687,733,3,156,78,0,688,689,5,31,0,0,689,733,3,156,78,0,690,691,5,20,
0,0,691,733,3,156,78,0,692,693,5,21,0,0,693,733,3,156,78,0,694,695,5,3,0,
0,695,733,3,156,78,0,696,697,5,62,0,0,697,702,3,156,78,0,698,701,3,88,44,
0,699,701,3,94,47,0,700,698,1,0,0,0,700,699,1,0,0,0,701,704,1,0,0,0,702,
700,1,0,0,0,702,703,1,0,0,0,703,705,1,0,0,0,704,702,1,0,0,0,705,706,5,4,
0,0,706,707,3,156,78,0,707,733,1,0,0,0,708,709,5,2,0,0,709,714,3,156,78,
0,710,713,3,88,44,0,711,713,3,94,47,0,712,710,1,0,0,0,712,711,1,0,0,0,713,
716,1,0,0,0,714,712,1,0,0,0,714,715,1,0,0,0,715,717,1,0,0,0,716,714,1,0,
0,0,717,718,5,4,0,0,718,719,3,156,78,0,719,733,1,0,0,0,720,721,5,10,0,0,
721,726,3,156,78,0,722,725,3,88,44,0,723,725,3,94,47,0,724,722,1,0,0,0,724,
723,1,0,0,0,725,728,1,0,0,0,726,724,1,0,0,0,726,727,1,0,0,0,727,729,1,0,
0,0,728,726,1,0,0,0,729,730,5,12,0,0,730,731,3,156,78,0,731,733,1,0,0,0,
732,667,1,0,0,0,732,670,1,0,0,0,732,673,1,0,0,0,732,676,1,0,0,0,732,679,
1,0,0,0,732,682,1,0,0,0,732,684,1,0,0,0,732,686,1,0,0,0,732,688,1,0,0,0,
732,690,1,0,0,0,732,692,1,0,0,0,732,694,1,0,0,0,732,696,1,0,0,0,732,708,
1,0,0,0,732,720,1,0,0,0,733,89,1,0,0,0,734,735,3,92,46,0,735,739,3,156,78,
0,736,738,3,88,44,0,737,736,1,0,0,0,738,741,1,0,0,0,739,737,1,0,0,0,739,
740,1,0,0,0,740,745,1,0,0,0,741,739,1,0,0,0,742,746,3,96,48,0,743,744,5,
1,0,0,744,746,3,156,78,0,745,742,1,0,0,0,745,743,1,0,0,0,746,91,1,0,0,0,
747,748,5,15,0,0,748,749,3,154,77,0,749,93,1,0,0,0,750,761,3,96,48,0,751,
752,3,92,46,0,752,753,3,156,78,0,753,761,1,0,0,0,754,755,5,1,0,0,755,761,
3,156,78,0,756,757,5,18,0,0,757,761,3,156,78,0,758,759,5,19,0,0,759,761,
3,156,78,0,760,750,1,0,0,0,760,751,1,0,0,0,760,754,1,0,0,0,760,756,1,0,0,
0,760,758,1,0,0,0,761,95,1,0,0,0,762,763,5,5,0,0,763,775,3,156,78,0,764,
774,3,62,31,0,765,774,3,98,49,0,766,774,3,88,44,0,767,774,3,96,48,0,768,
769,3,92,46,0,769,770,3,156,78,0,770,774,1,0,0,0,771,772,5,1,0,0,772,774,
3,156,78,0,773,764,1,0,0,0,773,765,1,0,0,0,773,766,1,0,0,0,773,767,1,0,0,
0,773,768,1,0,0,0,773,771,1,0,0,0,774,777,1,0,0,0,775,773,1,0,0,0,775,776,
1,0,0,0,776,778,1,0,0,0,777,775,1,0,0,0,778,779,5,6,0,0,779,780,3,156,78,
0,780,97,1,0,0,0,781,792,3,60,30,0,782,792,3,10,5,0,783,792,3,22,11,0,784,
792,3,128,64,0,785,792,3,132,66,0,786,792,3,102,51,0,787,792,3,138,69,0,
788,792,3,140,70,0,789,792,3,142,71,0,790,792,3,90,45,0,791,781,1,0,0,0,
791,782,1,0,0,0,791,783,1,0,0,0,791,784,1,0,0,0,791,785,1,0,0,0,791,786,
1,0,0,0,791,787,1,0,0,0,791,788,1,0,0,0,791,789,1,0,0,0,791,790,1,0,0,0,
792,99,1,0,0,0,793,794,5,5,0,0,794,798,3,156,78,0,795,797,3,98,49,0,796,
795,1,0,0,0,797,800,1,0,0,0,798,796,1,0,0,0,798,799,1,0,0,0,799,801,1,0,
0,0,800,798,1,0,0,0,801,802,5,6,0,0,802,803,3,156,78,0,803,101,1,0,0,0,804,
805,5,49,0,0,805,806,3,156,78,0,806,807,3,104,52,0,807,808,3,156,78,0,808,
809,3,100,50,0,809,103,1,0,0,0,810,815,3,108,54,0,811,815,3,110,55,0,812,
815,3,112,56,0,813,815,3,106,53,0,814,810,1,0,0,0,814,811,1,0,0,0,814,812,
1,0,0,0,814,813,1,0,0,0,815,105,1,0,0,0,816,817,5,2,0,0,817,818,3,156,78,
0,818,819,3,104,52,0,819,820,3,156,78,0,820,821,5,4,0,0,821,825,1,0,0,0,
822,825,3,114,57,0,823,825,3,116,58,0,824,816,1,0,0,0,824,822,1,0,0,0,824,
823,1,0,0,0,825,107,1,0,0,0,826,827,5,33,0,0,827,828,3,156,78,0,828,829,
5,17,0,0,829,830,3,156,78,0,830,831,3,106,53,0,831,109,1,0,0,0,832,842,3,
106,53,0,833,834,3,156,78,0,834,835,5,17,0,0,835,836,3,156,78,0,836,837,
5,34,0,0,837,838,3,156,78,0,838,839,5,17,0,0,839,840,3,156,78,0,840,841,
3,106,53,0,841,843,1,0,0,0,842,833,1,0,0,0,843,844,1,0,0,0,844,842,1,0,0,
0,844,845,1,0,0,0,845,111,1,0,0,0,846,856,3,106,53,0,847,848,3,156,78,0,
848,849,5,17,0,0,849,850,3,156,78,0,850,851,5,50,0,0,851,852,3,156,78,0,
852,853,5,17,0,0,853,854,3,156,78,0,854,855,3,106,53,0,855,857,1,0,0,0,856,
847,1,0,0,0,857,858,1,0,0,0,858,856,1,0,0,0,858,859,1,0,0,0,859,113,1,0,
0,0,860,861,5,2,0,0,861,862,3,156,78,0,862,863,3,64,32,0,863,864,5,4,0,0,
864,115,1,0,0,0,865,870,7,5,0,0,866,869,3,88,44,0,867,869,3,94,47,0,868,
866,1,0,0,0,868,867,1,0,0,0,869,872,1,0,0,0,870,868,1,0,0,0,870,871,1,0,
0,0,871,873,1,0,0,0,872,870,1,0,0,0,873,874,5,4,0,0,874,117,1,0,0,0,875,
876,5,60,0,0,876,877,3,156,78,0,877,878,5,59,0,0,878,879,3,156,78,0,879,
880,5,4,0,0,880,881,3,156,78,0,881,119,1,0,0,0,882,883,5,54,0,0,883,884,
3,156,78,0,884,885,3,122,61,0,885,886,5,4,0,0,886,887,3,156,78,0,887,121,
1,0,0,0,888,899,3,124,62,0,889,890,5,17,0,0,890,891,3,156,78,0,891,892,7,
4,0,0,892,893,3,156,78,0,893,894,5,17,0,0,894,895,3,156,78,0,895,896,3,124,
62,0,896,898,1,0,0,0,897,889,1,0,0,0,898,901,1,0,0,0,899,897,1,0,0,0,899,
900,1,0,0,0,900,123,1,0,0,0,901,899,1,0,0,0,902,914,3,126,63,0,903,904,5,
7,0,0,904,905,3,156,78,0,905,906,3,126,63,0,906,913,1,0,0,0,907,908,5,13,
0,0,908,909,3,156,78,0,909,910,3,80,40,0,910,911,3,156,78,0,911,913,1,0,
0,0,912,903,1,0,0,0,912,907,1,0,0,0,913,916,1,0,0,0,914,912,1,0,0,0,914,
915,1,0,0,0,915,125,1,0,0,0,916,914,1,0,0,0,917,918,3,80,40,0,918,919,3,
156,78,0,919,936,1,0,0,0,920,921,3,84,42,0,921,922,3,156,78,0,922,936,1,
0,0,0,923,924,3,86,43,0,924,925,3,156,78,0,925,936,1,0,0,0,926,927,3,82,
41,0,927,928,3,156,78,0,928,936,1,0,0,0,929,930,5,2,0,0,930,931,3,156,78,
0,931,932,3,122,61,0,932,933,5,4,0,0,933,934,3,156,78,0,934,936,1,0,0,0,
935,917,1,0,0,0,935,920,1,0,0,0,935,923,1,0,0,0,935,926,1,0,0,0,935,929,
1,0,0,0,936,127,1,0,0,0,937,938,5,48,0,0,938,939,3,156,78,0,939,940,5,5,
0,0,940,942,3,156,78,0,941,943,3,130,65,0,942,941,1,0,0,0,942,943,1,0,0,
0,943,951,1,0,0,0,944,945,5,1,0,0,945,947,3,156,78,0,946,948,3,130,65,0,
947,946,1,0,0,0,947,948,1,0,0,0,948,950,1,0,0,0,949,944,1,0,0,0,950,953,
1,0,0,0,951,949,1,0,0,0,951,952,1,0,0,0,952,954,1,0,0,0,953,951,1,0,0,0,
954,955,5,6,0,0,955,956,3,156,78,0,956,129,1,0,0,0,957,958,3,58,29,0,958,
959,5,3,0,0,959,960,3,156,78,0,960,961,3,70,35,0,961,968,1,0,0,0,962,963,
3,58,29,0,963,964,5,3,0,0,964,965,3,156,78,0,965,966,3,68,34,0,966,968,1,
0,0,0,967,957,1,0,0,0,967,962,1,0,0,0,968,131,1,0,0,0,969,970,5,51,0,0,970,
971,3,156,78,0,971,972,5,17,0,0,972,973,3,156,78,0,973,974,3,154,77,0,974,
975,3,156,78,0,975,976,5,5,0,0,976,977,3,156,78,0,977,978,3,134,67,0,978,
979,5,6,0,0,979,980,3,156,78,0,980,133,1,0,0,0,981,982,3,136,68,0,982,983,
5,5,0,0,983,985,3,156,78,0,984,986,3,62,31,0,985,984,1,0,0,0,985,986,1,0,
0,0,986,987,1,0,0,0,987,988,5,6,0,0,988,989,3,156,78,0,989,991,1,0,0,0,990,
981,1,0,0,0,991,994,1,0,0,0,992,990,1,0,0,0,992,993,1,0,0,0,993,135,1,0,
0,0,994,992,1,0,0,0,995,996,7,6,0,0,996,1004,3,156,78,0,997,998,5,40,0,0,
998,999,3,156,78,0,999,1000,7,6,0,0,1000,1001,3,156,78,0,1001,1003,1,0,0,
0,1002,997,1,0,0,0,1003,1006,1,0,0,0,1004,1002,1,0,0,0,1004,1005,1,0,0,0,
1005,137,1,0,0,0,1006,1004,1,0,0,0,1007,1008,5,55,0,0,1008,1009,3,156,78,
0,1009,1010,5,5,0,0,1010,1012,3,156,78,0,1011,1013,3,62,31,0,1012,1011,1,
0,0,0,1012,1013,1,0,0,0,1013,1014,1,0,0,0,1014,1015,5,6,0,0,1015,1016,3,
156,78,0,1016,139,1,0,0,0,1017,1018,5,56,0,0,1018,1019,3,156,78,0,1019,1020,
3,154,77,0,1020,1021,3,156,78,0,1021,1022,5,5,0,0,1022,1024,3,156,78,0,1023,
1025,3,62,31,0,1024,1023,1,0,0,0,1024,1025,1,0,0,0,1025,1026,1,0,0,0,1026,
1027,5,6,0,0,1027,1028,3,156,78,0,1028,141,1,0,0,0,1029,1030,5,57,0,0,1030,
1031,3,156,78,0,1031,1032,3,144,72,0,1032,1033,3,156,78,0,1033,1034,5,5,
0,0,1034,1038,3,156,78,0,1035,1037,3,148,74,0,1036,1035,1,0,0,0,1037,1040,
1,0,0,0,1038,1036,1,0,0,0,1038,1039,1,0,0,0,1039,1041,1,0,0,0,1040,1038,
1,0,0,0,1041,1042,5,6,0,0,1042,1043,3,156,78,0,1043,143,1,0,0,0,1044,1052,
3,146,73,0,1045,1046,3,156,78,0,1046,1047,5,40,0,0,1047,1048,3,156,78,0,
1048,1049,3,146,73,0,1049,1051,1,0,0,0,1050,1045,1,0,0,0,1051,1054,1,0,0,
0,1052,1050,1,0,0,0,1052,1053,1,0,0,0,1053,145,1,0,0,0,1054,1052,1,0,0,0,
1055,1066,5,44,0,0,1056,1062,3,154,77,0,1057,1058,3,156,78,0,1058,1059,3,
154,77,0,1059,1061,1,0,0,0,1060,1057,1,0,0,0,1061,1064,1,0,0,0,1062,1060,
1,0,0,0,1062,1063,1,0,0,0,1063,1066,1,0,0,0,1064,1062,1,0,0,0,1065,1055,
1,0,0,0,1065,1056,1,0,0,0,1066,147,1,0,0,0,1067,1068,3,150,75,0,1068,1069,
3,156,78,0,1069,1070,5,5,0,0,1070,1072,3,156,78,0,1071,1073,3,152,76,0,1072,
1071,1,0,0,0,1072,1073,1,0,0,0,1073,1082,1,0,0,0,1074,1075,3,156,78,0,1075,
1076,5,1,0,0,1076,1078,3,156,78,0,1077,1079,3,152,76,0,1078,1077,1,0,0,0,
1078,1079,1,0,0,0,1079,1081,1,0,0,0,1080,1074,1,0,0,0,1081,1084,1,0,0,0,
1082,1080,1,0,0,0,1082,1083,1,0,0,0,1083,1085,1,0,0,0,1084,1082,1,0,0,0,
1085,1086,5,6,0,0,1086,1087,3,156,78,0,1087,149,1,0,0,0,1088,1089,3,92,46,
0,1089,151,1,0,0,0,1090,1091,3,154,77,0,1091,1092,3,156,78,0,1092,1093,5,
3,0,0,1093,1094,3,156,78,0,1094,1100,3,80,40,0,1095,1096,3,156,78,0,1096,
1097,3,80,40,0,1097,1099,1,0,0,0,1098,1095,1,0,0,0,1099,1102,1,0,0,0,1100,
1098,1,0,0,0,1100,1101,1,0,0,0,1101,153,1,0,0,0,1102,1100,1,0,0,0,1103,1104,
7,7,0,0,1104,155,1,0,0,0,1105,1107,7,8,0,0,1106,1105,1,0,0,0,1107,1110,1,
0,0,0,1108,1106,1,0,0,0,1108,1109,1,0,0,0,1109,157,1,0,0,0,1110,1108,1,0,
0,0,106,163,168,175,180,187,192,199,204,219,247,254,266,271,288,291,296,
307,317,320,331,342,347,352,356,373,384,395,399,406,408,416,418,420,423,
429,436,446,454,458,464,468,482,487,501,511,522,528,536,542,547,553,561,
565,573,580,590,592,596,601,630,648,653,658,663,700,702,712,714,724,726,
732,739,745,760,773,775,791,798,814,824,844,858,868,870,899,912,914,935,
942,947,951,967,985,992,1004,1012,1024,1038,1052,1062,1065,1072,1078,1082,
1100,1108];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class css3Parser extends antlr4.Parser {

    static grammarFileName = "css3.g4";
    static literalNames = [ null, "';'", "'('", "':'", "')'", "'{'", "'}'", 
                            "'*'", "'|'", "'.'", "'['", "'='", "']'", "'/'", 
                            "'_'", "'@'", null, null, "'<!--'", "'-->'", 
                            "'~='", "'|='", null, null, null, null, null, 
                            "'@charset '", null, null, null, null, null, 
                            null, null, null, null, "'+'", "'-'", "'>'", 
                            "','", "'~'", null, null, null, "'^='", "'$='", 
                            "'*='", null, null, null, null, null, null, 
                            "'calc('", null, null, null, null, null, "'var('" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             "Comment", "Space", "Cdo", "Cdc", "Includes", 
                             "DashMatch", "Hash", "Import", "Page", "Media", 
                             "Namespace", "Charset", "Important", "Percentage", 
                             "Uri", "UnicodeRange", "MediaOnly", "Not", 
                             "And", "Dimension", "UnknownDimension", "Plus", 
                             "Minus", "Greater", "Comma", "Tilde", "PseudoNot", 
                             "Number", "String_", "PrefixMatch", "SuffixMatch", 
                             "SubstringMatch", "FontFace", "Supports", "Or", 
                             "Keyframes", "From", "To", "Calc", "Viewport", 
                             "CounterStyle", "FontFeatureValues", "DxImageTransform", 
                             "Variable", "Var", "Ident", "Function_" ];
    static ruleNames = [ "stylesheet", "charset", "imports", "namespace_", 
                         "namespacePrefix", "media", "mediaQueryList", "mediaQuery", 
                         "mediaType", "mediaExpression", "mediaFeature", 
                         "page", "pseudoPage", "selectorGroup", "selector", 
                         "combinator", "simpleSelectorSequence", "typeSelector", 
                         "typeNamespacePrefix", "elementName", "universal", 
                         "className", "attrib", "pseudo", "functionalPseudo", 
                         "expression", "negation", "negationArg", "operator_", 
                         "property_", "ruleset", "declarationList", "declaration", 
                         "prio", "value", "expr", "term", "function_", "dxImageTransform", 
                         "hexcolor", "number", "percentage", "dimension", 
                         "unknownDimension", "any_", "atRule", "atKeyword", 
                         "unused", "block", "nestedStatement", "groupRuleBody", 
                         "supportsRule", "supportsCondition", "supportsConditionInParens", 
                         "supportsNegation", "supportsConjunction", "supportsDisjunction", 
                         "supportsDeclarationCondition", "generalEnclosed", 
                         "var_", "calc", "calcSum", "calcProduct", "calcValue", 
                         "fontFaceRule", "fontFaceDeclaration", "keyframesRule", 
                         "keyframesBlocks", "keyframeSelector", "viewport", 
                         "counterStyle", "fontFeatureValuesRule", "fontFamilyNameList", 
                         "fontFamilyName", "featureValueBlock", "featureType", 
                         "featureValueDefinition", "ident", "ws" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = css3Parser.ruleNames;
        this.literalNames = css3Parser.literalNames;
        this.symbolicNames = css3Parser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	stylesheet() {
	    let localctx = new StylesheetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, css3Parser.RULE_stylesheet);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 158;
	        this.ws();
	        this.state = 168;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===css3Parser.Charset) {
	            this.state = 159;
	            this.charset();
	            this.state = 163;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.Comment) | (1 << css3Parser.Space) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc))) !== 0)) {
	                this.state = 160;
	                _la = this._input.LA(1);
	                if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.Comment) | (1 << css3Parser.Space) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc))) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 165;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 170;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 180;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===css3Parser.Import) {
	            this.state = 171;
	            this.imports();
	            this.state = 175;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.Comment) | (1 << css3Parser.Space) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc))) !== 0)) {
	                this.state = 172;
	                _la = this._input.LA(1);
	                if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.Comment) | (1 << css3Parser.Space) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc))) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 177;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 182;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 192;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===css3Parser.Namespace) {
	            this.state = 183;
	            this.namespace_();
	            this.state = 187;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.Comment) | (1 << css3Parser.Space) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc))) !== 0)) {
	                this.state = 184;
	                _la = this._input.LA(1);
	                if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.Comment) | (1 << css3Parser.Space) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc))) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 189;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 194;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 204;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__4) | (1 << css3Parser.T__6) | (1 << css3Parser.T__7) | (1 << css3Parser.T__8) | (1 << css3Parser.T__9) | (1 << css3Parser.T__14) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Page) | (1 << css3Parser.Media) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Dimension - 32)) | (1 << (css3Parser.UnknownDimension - 32)) | (1 << (css3Parser.Plus - 32)) | (1 << (css3Parser.Minus - 32)) | (1 << (css3Parser.PseudoNot - 32)) | (1 << (css3Parser.Number - 32)) | (1 << (css3Parser.String_ - 32)) | (1 << (css3Parser.FontFace - 32)) | (1 << (css3Parser.Supports - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.Keyframes - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Viewport - 32)) | (1 << (css3Parser.CounterStyle - 32)) | (1 << (css3Parser.FontFeatureValues - 32)) | (1 << (css3Parser.Ident - 32)) | (1 << (css3Parser.Function_ - 32)))) !== 0)) {
	            this.state = 195;
	            this.nestedStatement();
	            this.state = 199;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.Comment) | (1 << css3Parser.Space) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc))) !== 0)) {
	                this.state = 196;
	                _la = this._input.LA(1);
	                if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.Comment) | (1 << css3Parser.Space) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc))) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 201;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 206;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charset() {
	    let localctx = new CharsetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, css3Parser.RULE_charset);
	    try {
	        this.state = 219;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new GoodCharsetContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 207;
	            this.match(css3Parser.Charset);
	            this.state = 208;
	            this.ws();
	            this.state = 209;
	            this.match(css3Parser.String_);
	            this.state = 210;
	            this.ws();
	            this.state = 211;
	            this.match(css3Parser.T__0);
	            this.state = 212;
	            this.ws();
	            break;

	        case 2:
	            localctx = new BadCharsetContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 214;
	            this.match(css3Parser.Charset);
	            this.state = 215;
	            this.ws();
	            this.state = 216;
	            this.match(css3Parser.String_);
	            this.state = 217;
	            this.ws();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	imports() {
	    let localctx = new ImportsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, css3Parser.RULE_imports);
	    var _la = 0; // Token type
	    try {
	        this.state = 247;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new GoodImportContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 221;
	            this.match(css3Parser.Import);
	            this.state = 222;
	            this.ws();
	            this.state = 223;
	            _la = this._input.LA(1);
	            if(!(_la===css3Parser.Uri || _la===css3Parser.String_)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 224;
	            this.ws();
	            this.state = 225;
	            this.mediaQueryList();
	            this.state = 226;
	            this.match(css3Parser.T__0);
	            this.state = 227;
	            this.ws();
	            break;

	        case 2:
	            localctx = new GoodImportContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 229;
	            this.match(css3Parser.Import);
	            this.state = 230;
	            this.ws();
	            this.state = 231;
	            _la = this._input.LA(1);
	            if(!(_la===css3Parser.Uri || _la===css3Parser.String_)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 232;
	            this.ws();
	            this.state = 233;
	            this.match(css3Parser.T__0);
	            this.state = 234;
	            this.ws();
	            break;

	        case 3:
	            localctx = new BadImportContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 236;
	            this.match(css3Parser.Import);
	            this.state = 237;
	            this.ws();
	            this.state = 238;
	            _la = this._input.LA(1);
	            if(!(_la===css3Parser.Uri || _la===css3Parser.String_)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 239;
	            this.ws();
	            this.state = 240;
	            this.mediaQueryList();
	            break;

	        case 4:
	            localctx = new BadImportContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 242;
	            this.match(css3Parser.Import);
	            this.state = 243;
	            this.ws();
	            this.state = 244;
	            _la = this._input.LA(1);
	            if(!(_la===css3Parser.Uri || _la===css3Parser.String_)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 245;
	            this.ws();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespace_() {
	    let localctx = new Namespace_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, css3Parser.RULE_namespace_);
	    var _la = 0; // Token type
	    try {
	        this.state = 271;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new GoodNamespaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 249;
	            this.match(css3Parser.Namespace);
	            this.state = 250;
	            this.ws();
	            this.state = 254;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
	                this.state = 251;
	                this.namespacePrefix();
	                this.state = 252;
	                this.ws();
	            }

	            this.state = 256;
	            _la = this._input.LA(1);
	            if(!(_la===css3Parser.Uri || _la===css3Parser.String_)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 257;
	            this.ws();
	            this.state = 258;
	            this.match(css3Parser.T__0);
	            this.state = 259;
	            this.ws();
	            break;

	        case 2:
	            localctx = new BadNamespaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 261;
	            this.match(css3Parser.Namespace);
	            this.state = 262;
	            this.ws();
	            this.state = 266;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
	                this.state = 263;
	                this.namespacePrefix();
	                this.state = 264;
	                this.ws();
	            }

	            this.state = 268;
	            _la = this._input.LA(1);
	            if(!(_la===css3Parser.Uri || _la===css3Parser.String_)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 269;
	            this.ws();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespacePrefix() {
	    let localctx = new NamespacePrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, css3Parser.RULE_namespacePrefix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 273;
	        this.ident();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	media() {
	    let localctx = new MediaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, css3Parser.RULE_media);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 275;
	        this.match(css3Parser.Media);
	        this.state = 276;
	        this.ws();
	        this.state = 277;
	        this.mediaQueryList();
	        this.state = 278;
	        this.groupRuleBody();
	        this.state = 279;
	        this.ws();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mediaQueryList() {
	    let localctx = new MediaQueryListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, css3Parser.RULE_mediaQueryList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 291;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        if(la_===1) {
	            this.state = 281;
	            this.mediaQuery();
	            this.state = 288;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===css3Parser.Comma) {
	                this.state = 282;
	                this.match(css3Parser.Comma);
	                this.state = 283;
	                this.ws();
	                this.state = 284;
	                this.mediaQuery();
	                this.state = 290;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	        this.state = 293;
	        this.ws();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mediaQuery() {
	    let localctx = new MediaQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, css3Parser.RULE_mediaQuery);
	    var _la = 0; // Token type
	    try {
	        this.state = 320;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case css3Parser.Comment:
	        case css3Parser.Space:
	        case css3Parser.MediaOnly:
	        case css3Parser.Not:
	        case css3Parser.And:
	        case css3Parser.Or:
	        case css3Parser.From:
	        case css3Parser.To:
	        case css3Parser.Ident:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 296;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	            if(la_===1) {
	                this.state = 295;
	                _la = this._input.LA(1);
	                if(!(_la===css3Parser.MediaOnly || _la===css3Parser.Not)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 298;
	            this.ws();
	            this.state = 299;
	            this.mediaType();
	            this.state = 300;
	            this.ws();
	            this.state = 307;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,16,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 301;
	                    this.match(css3Parser.And);
	                    this.state = 302;
	                    this.ws();
	                    this.state = 303;
	                    this.mediaExpression(); 
	                }
	                this.state = 309;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,16,this._ctx);
	            }

	            break;
	        case css3Parser.T__1:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 310;
	            this.mediaExpression();
	            this.state = 317;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,17,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 311;
	                    this.match(css3Parser.And);
	                    this.state = 312;
	                    this.ws();
	                    this.state = 313;
	                    this.mediaExpression(); 
	                }
	                this.state = 319;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,17,this._ctx);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mediaType() {
	    let localctx = new MediaTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, css3Parser.RULE_mediaType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 322;
	        this.ident();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mediaExpression() {
	    let localctx = new MediaExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, css3Parser.RULE_mediaExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 324;
	        this.match(css3Parser.T__1);
	        this.state = 325;
	        this.ws();
	        this.state = 326;
	        this.mediaFeature();
	        this.state = 331;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===css3Parser.T__2) {
	            this.state = 327;
	            this.match(css3Parser.T__2);
	            this.state = 328;
	            this.ws();
	            this.state = 329;
	            this.expr();
	        }

	        this.state = 333;
	        this.match(css3Parser.T__3);
	        this.state = 334;
	        this.ws();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mediaFeature() {
	    let localctx = new MediaFeatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, css3Parser.RULE_mediaFeature);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 336;
	        this.ident();
	        this.state = 337;
	        this.ws();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	page() {
	    let localctx = new PageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, css3Parser.RULE_page);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 339;
	        this.match(css3Parser.Page);
	        this.state = 340;
	        this.ws();
	        this.state = 342;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===css3Parser.T__2) {
	            this.state = 341;
	            this.pseudoPage();
	        }

	        this.state = 344;
	        this.match(css3Parser.T__4);
	        this.state = 345;
	        this.ws();
	        this.state = 347;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===css3Parser.T__6 || _la===css3Parser.T__13 || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Variable - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
	            this.state = 346;
	            this.declaration();
	        }

	        this.state = 356;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===css3Parser.T__0) {
	            this.state = 349;
	            this.match(css3Parser.T__0);
	            this.state = 350;
	            this.ws();
	            this.state = 352;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===css3Parser.T__6 || _la===css3Parser.T__13 || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Variable - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
	                this.state = 351;
	                this.declaration();
	            }

	            this.state = 358;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 359;
	        this.match(css3Parser.T__5);
	        this.state = 360;
	        this.ws();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pseudoPage() {
	    let localctx = new PseudoPageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, css3Parser.RULE_pseudoPage);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 362;
	        this.match(css3Parser.T__2);
	        this.state = 363;
	        this.ident();
	        this.state = 364;
	        this.ws();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectorGroup() {
	    let localctx = new SelectorGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, css3Parser.RULE_selectorGroup);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 366;
	        this.selector();
	        this.state = 373;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===css3Parser.Comma) {
	            this.state = 367;
	            this.match(css3Parser.Comma);
	            this.state = 368;
	            this.ws();
	            this.state = 369;
	            this.selector();
	            this.state = 375;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selector() {
	    let localctx = new SelectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, css3Parser.RULE_selector);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 376;
	        this.simpleSelectorSequence();
	        this.state = 377;
	        this.ws();
	        this.state = 384;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 17)) & ~0x1f) == 0 && ((1 << (_la - 17)) & ((1 << (css3Parser.Space - 17)) | (1 << (css3Parser.Plus - 17)) | (1 << (css3Parser.Greater - 17)) | (1 << (css3Parser.Tilde - 17)))) !== 0)) {
	            this.state = 378;
	            this.combinator();
	            this.state = 379;
	            this.simpleSelectorSequence();
	            this.state = 380;
	            this.ws();
	            this.state = 386;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	combinator() {
	    let localctx = new CombinatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, css3Parser.RULE_combinator);
	    try {
	        this.state = 395;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case css3Parser.Plus:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 387;
	            this.match(css3Parser.Plus);
	            this.state = 388;
	            this.ws();
	            break;
	        case css3Parser.Greater:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 389;
	            this.match(css3Parser.Greater);
	            this.state = 390;
	            this.ws();
	            break;
	        case css3Parser.Tilde:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 391;
	            this.match(css3Parser.Tilde);
	            this.state = 392;
	            this.ws();
	            break;
	        case css3Parser.Space:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 393;
	            this.match(css3Parser.Space);
	            this.state = 394;
	            this.ws();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleSelectorSequence() {
	    let localctx = new SimpleSelectorSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, css3Parser.RULE_simpleSelectorSequence);
	    var _la = 0; // Token type
	    try {
	        this.state = 420;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case css3Parser.T__6:
	        case css3Parser.T__7:
	        case css3Parser.MediaOnly:
	        case css3Parser.Not:
	        case css3Parser.And:
	        case css3Parser.Or:
	        case css3Parser.From:
	        case css3Parser.To:
	        case css3Parser.Ident:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 399;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 397;
	                this.typeSelector();
	                break;

	            case 2:
	                this.state = 398;
	                this.universal();
	                break;

	            }
	            this.state = 408;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__2) | (1 << css3Parser.T__8) | (1 << css3Parser.T__9) | (1 << css3Parser.Hash))) !== 0) || _la===css3Parser.PseudoNot) {
	                this.state = 406;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case css3Parser.Hash:
	                    this.state = 401;
	                    this.match(css3Parser.Hash);
	                    break;
	                case css3Parser.T__8:
	                    this.state = 402;
	                    this.className();
	                    break;
	                case css3Parser.T__9:
	                    this.state = 403;
	                    this.attrib();
	                    break;
	                case css3Parser.T__2:
	                    this.state = 404;
	                    this.pseudo();
	                    break;
	                case css3Parser.PseudoNot:
	                    this.state = 405;
	                    this.negation();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 410;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case css3Parser.T__2:
	        case css3Parser.T__8:
	        case css3Parser.T__9:
	        case css3Parser.Hash:
	        case css3Parser.PseudoNot:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 416; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 416;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case css3Parser.Hash:
	                    this.state = 411;
	                    this.match(css3Parser.Hash);
	                    break;
	                case css3Parser.T__8:
	                    this.state = 412;
	                    this.className();
	                    break;
	                case css3Parser.T__9:
	                    this.state = 413;
	                    this.attrib();
	                    break;
	                case css3Parser.T__2:
	                    this.state = 414;
	                    this.pseudo();
	                    break;
	                case css3Parser.PseudoNot:
	                    this.state = 415;
	                    this.negation();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 418; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__2) | (1 << css3Parser.T__8) | (1 << css3Parser.T__9) | (1 << css3Parser.Hash))) !== 0) || _la===css3Parser.PseudoNot);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSelector() {
	    let localctx = new TypeSelectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, css3Parser.RULE_typeSelector);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 423;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        if(la_===1) {
	            this.state = 422;
	            this.typeNamespacePrefix();

	        }
	        this.state = 425;
	        this.elementName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeNamespacePrefix() {
	    let localctx = new TypeNamespacePrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, css3Parser.RULE_typeNamespacePrefix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 429;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case css3Parser.MediaOnly:
	        case css3Parser.Not:
	        case css3Parser.And:
	        case css3Parser.Or:
	        case css3Parser.From:
	        case css3Parser.To:
	        case css3Parser.Ident:
	        	this.state = 427;
	        	this.ident();
	        	break;
	        case css3Parser.T__6:
	        	this.state = 428;
	        	this.match(css3Parser.T__6);
	        	break;
	        case css3Parser.T__7:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 431;
	        this.match(css3Parser.T__7);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementName() {
	    let localctx = new ElementNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, css3Parser.RULE_elementName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 433;
	        this.ident();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	universal() {
	    let localctx = new UniversalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, css3Parser.RULE_universal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 436;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        if(la_===1) {
	            this.state = 435;
	            this.typeNamespacePrefix();

	        }
	        this.state = 438;
	        this.match(css3Parser.T__6);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	className() {
	    let localctx = new ClassNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, css3Parser.RULE_className);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 440;
	        this.match(css3Parser.T__8);
	        this.state = 441;
	        this.ident();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attrib() {
	    let localctx = new AttribContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, css3Parser.RULE_attrib);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 443;
	        this.match(css3Parser.T__9);
	        this.state = 444;
	        this.ws();
	        this.state = 446;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        if(la_===1) {
	            this.state = 445;
	            this.typeNamespacePrefix();

	        }
	        this.state = 448;
	        this.ident();
	        this.state = 449;
	        this.ws();
	        this.state = 458;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__10) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch))) !== 0) || ((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (css3Parser.PrefixMatch - 45)) | (1 << (css3Parser.SuffixMatch - 45)) | (1 << (css3Parser.SubstringMatch - 45)))) !== 0)) {
	            this.state = 450;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__10) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch))) !== 0) || ((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (css3Parser.PrefixMatch - 45)) | (1 << (css3Parser.SuffixMatch - 45)) | (1 << (css3Parser.SubstringMatch - 45)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 451;
	            this.ws();
	            this.state = 454;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case css3Parser.MediaOnly:
	            case css3Parser.Not:
	            case css3Parser.And:
	            case css3Parser.Or:
	            case css3Parser.From:
	            case css3Parser.To:
	            case css3Parser.Ident:
	                this.state = 452;
	                this.ident();
	                break;
	            case css3Parser.String_:
	                this.state = 453;
	                this.match(css3Parser.String_);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 456;
	            this.ws();
	        }

	        this.state = 460;
	        this.match(css3Parser.T__11);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pseudo() {
	    let localctx = new PseudoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, css3Parser.RULE_pseudo);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 462;
	        this.match(css3Parser.T__2);
	        this.state = 464;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===css3Parser.T__2) {
	            this.state = 463;
	            this.match(css3Parser.T__2);
	        }

	        this.state = 468;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case css3Parser.MediaOnly:
	        case css3Parser.Not:
	        case css3Parser.And:
	        case css3Parser.Or:
	        case css3Parser.From:
	        case css3Parser.To:
	        case css3Parser.Ident:
	            this.state = 466;
	            this.ident();
	            break;
	        case css3Parser.Function_:
	            this.state = 467;
	            this.functionalPseudo();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionalPseudo() {
	    let localctx = new FunctionalPseudoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, css3Parser.RULE_functionalPseudo);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 470;
	        this.match(css3Parser.Function_);
	        this.state = 471;
	        this.ws();
	        this.state = 472;
	        this.expression();
	        this.state = 473;
	        this.match(css3Parser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, css3Parser.RULE_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 485; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 482;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case css3Parser.Plus:
	                this.state = 475;
	                this.match(css3Parser.Plus);
	                break;
	            case css3Parser.Minus:
	                this.state = 476;
	                this.match(css3Parser.Minus);
	                break;
	            case css3Parser.Dimension:
	                this.state = 477;
	                this.match(css3Parser.Dimension);
	                break;
	            case css3Parser.UnknownDimension:
	                this.state = 478;
	                this.match(css3Parser.UnknownDimension);
	                break;
	            case css3Parser.Number:
	                this.state = 479;
	                this.match(css3Parser.Number);
	                break;
	            case css3Parser.String_:
	                this.state = 480;
	                this.match(css3Parser.String_);
	                break;
	            case css3Parser.MediaOnly:
	            case css3Parser.Not:
	            case css3Parser.And:
	            case css3Parser.Or:
	            case css3Parser.From:
	            case css3Parser.To:
	            case css3Parser.Ident:
	                this.state = 481;
	                this.ident();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 484;
	            this.ws();
	            this.state = 487; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Dimension - 32)) | (1 << (css3Parser.UnknownDimension - 32)) | (1 << (css3Parser.Plus - 32)) | (1 << (css3Parser.Minus - 32)) | (1 << (css3Parser.Number - 32)) | (1 << (css3Parser.String_ - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	negation() {
	    let localctx = new NegationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, css3Parser.RULE_negation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 489;
	        this.match(css3Parser.PseudoNot);
	        this.state = 490;
	        this.ws();
	        this.state = 491;
	        this.negationArg();
	        this.state = 492;
	        this.ws();
	        this.state = 493;
	        this.match(css3Parser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	negationArg() {
	    let localctx = new NegationArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, css3Parser.RULE_negationArg);
	    try {
	        this.state = 501;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 495;
	            this.typeSelector();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 496;
	            this.universal();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 497;
	            this.match(css3Parser.Hash);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 498;
	            this.className();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 499;
	            this.attrib();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 500;
	            this.pseudo();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operator_() {
	    let localctx = new Operator_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, css3Parser.RULE_operator_);
	    try {
	        this.state = 511;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case css3Parser.T__12:
	            localctx = new GoodOperatorContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 503;
	            this.match(css3Parser.T__12);
	            this.state = 504;
	            this.ws();
	            break;
	        case css3Parser.Comma:
	            localctx = new GoodOperatorContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 505;
	            this.match(css3Parser.Comma);
	            this.state = 506;
	            this.ws();
	            break;
	        case css3Parser.Space:
	            localctx = new GoodOperatorContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 507;
	            this.match(css3Parser.Space);
	            this.state = 508;
	            this.ws();
	            break;
	        case css3Parser.T__10:
	            localctx = new BadOperatorContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 509;
	            this.match(css3Parser.T__10);
	            this.state = 510;
	            this.ws();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	property_() {
	    let localctx = new Property_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, css3Parser.RULE_property_);
	    try {
	        this.state = 522;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case css3Parser.MediaOnly:
	        case css3Parser.Not:
	        case css3Parser.And:
	        case css3Parser.Or:
	        case css3Parser.From:
	        case css3Parser.To:
	        case css3Parser.Ident:
	            localctx = new GoodPropertyContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 513;
	            this.ident();
	            this.state = 514;
	            this.ws();
	            break;
	        case css3Parser.Variable:
	            localctx = new GoodPropertyContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 516;
	            this.match(css3Parser.Variable);
	            this.state = 517;
	            this.ws();
	            break;
	        case css3Parser.T__6:
	            localctx = new BadPropertyContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 518;
	            this.match(css3Parser.T__6);
	            this.state = 519;
	            this.ident();
	            break;
	        case css3Parser.T__13:
	            localctx = new BadPropertyContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 520;
	            this.match(css3Parser.T__13);
	            this.state = 521;
	            this.ident();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ruleset() {
	    let localctx = new RulesetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, css3Parser.RULE_ruleset);
	    var _la = 0; // Token type
	    try {
	        this.state = 547;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new KnownRulesetContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 524;
	            this.selectorGroup();
	            this.state = 525;
	            this.match(css3Parser.T__4);
	            this.state = 526;
	            this.ws();
	            this.state = 528;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__6) | (1 << css3Parser.T__13))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Variable - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
	                this.state = 527;
	                this.declarationList();
	            }

	            this.state = 530;
	            this.match(css3Parser.T__5);
	            this.state = 531;
	            this.ws();
	            break;

	        case 2:
	            localctx = new UnknownRulesetContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 536;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__9) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Dimension - 32)) | (1 << (css3Parser.UnknownDimension - 32)) | (1 << (css3Parser.Plus - 32)) | (1 << (css3Parser.Minus - 32)) | (1 << (css3Parser.Number - 32)) | (1 << (css3Parser.String_ - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Ident - 32)) | (1 << (css3Parser.Function_ - 32)))) !== 0)) {
	                this.state = 533;
	                this.any_();
	                this.state = 538;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 539;
	            this.match(css3Parser.T__4);
	            this.state = 540;
	            this.ws();
	            this.state = 542;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__6) | (1 << css3Parser.T__13))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Variable - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
	                this.state = 541;
	                this.declarationList();
	            }

	            this.state = 544;
	            this.match(css3Parser.T__5);
	            this.state = 545;
	            this.ws();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarationList() {
	    let localctx = new DeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, css3Parser.RULE_declarationList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 553;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===css3Parser.T__0) {
	            this.state = 549;
	            this.match(css3Parser.T__0);
	            this.state = 550;
	            this.ws();
	            this.state = 555;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 556;
	        this.declaration();
	        this.state = 557;
	        this.ws();
	        this.state = 565;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 558;
	                this.match(css3Parser.T__0);
	                this.state = 559;
	                this.ws();
	                this.state = 561;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	                if(la_===1) {
	                    this.state = 560;
	                    this.declaration();

	                } 
	            }
	            this.state = 567;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration() {
	    let localctx = new DeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, css3Parser.RULE_declaration);
	    var _la = 0; // Token type
	    try {
	        this.state = 580;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new KnownDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 568;
	            this.property_();
	            this.state = 569;
	            this.match(css3Parser.T__2);
	            this.state = 570;
	            this.ws();
	            this.state = 571;
	            this.expr();
	            this.state = 573;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===css3Parser.Important) {
	                this.state = 572;
	                this.prio();
	            }

	            break;

	        case 2:
	            localctx = new UnknownDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 575;
	            this.property_();
	            this.state = 576;
	            this.match(css3Parser.T__2);
	            this.state = 577;
	            this.ws();
	            this.state = 578;
	            this.value();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prio() {
	    let localctx = new PrioContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, css3Parser.RULE_prio);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 582;
	        this.match(css3Parser.Important);
	        this.state = 583;
	        this.ws();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value() {
	    let localctx = new ValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, css3Parser.RULE_value);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 590; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 590;
	        		this._errHandler.sync(this);
	        		switch(this._input.LA(1)) {
	        		case css3Parser.T__1:
	        		case css3Parser.T__2:
	        		case css3Parser.T__9:
	        		case css3Parser.Includes:
	        		case css3Parser.DashMatch:
	        		case css3Parser.Hash:
	        		case css3Parser.Percentage:
	        		case css3Parser.Uri:
	        		case css3Parser.UnicodeRange:
	        		case css3Parser.MediaOnly:
	        		case css3Parser.Not:
	        		case css3Parser.And:
	        		case css3Parser.Dimension:
	        		case css3Parser.UnknownDimension:
	        		case css3Parser.Plus:
	        		case css3Parser.Minus:
	        		case css3Parser.Number:
	        		case css3Parser.String_:
	        		case css3Parser.Or:
	        		case css3Parser.From:
	        		case css3Parser.To:
	        		case css3Parser.Ident:
	        		case css3Parser.Function_:
	        		    this.state = 585;
	        		    this.any_();
	        		    break;
	        		case css3Parser.T__4:
	        		    this.state = 586;
	        		    this.block();
	        		    break;
	        		case css3Parser.T__14:
	        		    this.state = 587;
	        		    this.atKeyword();
	        		    this.state = 588;
	        		    this.ws();
	        		    break;
	        		default:
	        		    throw new antlr4.error.NoViableAltException(this);
	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 592; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,56, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr() {
	    let localctx = new ExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, css3Parser.RULE_expr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 594;
	        this.term();
	        this.state = 601;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,58,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 596;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 11)) & ~0x1f) == 0 && ((1 << (_la - 11)) & ((1 << (css3Parser.T__10 - 11)) | (1 << (css3Parser.T__12 - 11)) | (1 << (css3Parser.Space - 11)) | (1 << (css3Parser.Comma - 11)))) !== 0)) {
	                    this.state = 595;
	                    this.operator_();
	                }

	                this.state = 598;
	                this.term(); 
	            }
	            this.state = 603;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,58,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	term() {
	    let localctx = new TermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, css3Parser.RULE_term);
	    try {
	        this.state = 630;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new KnownTermContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 604;
	            this.number();
	            this.state = 605;
	            this.ws();
	            break;

	        case 2:
	            localctx = new KnownTermContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 607;
	            this.percentage();
	            this.state = 608;
	            this.ws();
	            break;

	        case 3:
	            localctx = new KnownTermContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 610;
	            this.dimension();
	            this.state = 611;
	            this.ws();
	            break;

	        case 4:
	            localctx = new KnownTermContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 613;
	            this.match(css3Parser.String_);
	            this.state = 614;
	            this.ws();
	            break;

	        case 5:
	            localctx = new KnownTermContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 615;
	            this.match(css3Parser.UnicodeRange);
	            this.state = 616;
	            this.ws();
	            break;

	        case 6:
	            localctx = new KnownTermContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 617;
	            this.ident();
	            this.state = 618;
	            this.ws();
	            break;

	        case 7:
	            localctx = new KnownTermContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 620;
	            this.var_();
	            break;

	        case 8:
	            localctx = new KnownTermContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 621;
	            this.match(css3Parser.Uri);
	            this.state = 622;
	            this.ws();
	            break;

	        case 9:
	            localctx = new KnownTermContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 623;
	            this.hexcolor();
	            break;

	        case 10:
	            localctx = new KnownTermContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 624;
	            this.calc();
	            break;

	        case 11:
	            localctx = new KnownTermContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 625;
	            this.function_();
	            break;

	        case 12:
	            localctx = new UnknownTermContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 626;
	            this.unknownDimension();
	            this.state = 627;
	            this.ws();
	            break;

	        case 13:
	            localctx = new BadTermContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 629;
	            this.dxImageTransform();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_() {
	    let localctx = new Function_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, css3Parser.RULE_function_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 632;
	        this.match(css3Parser.Function_);
	        this.state = 633;
	        this.ws();
	        this.state = 634;
	        this.expr();
	        this.state = 635;
	        this.match(css3Parser.T__3);
	        this.state = 636;
	        this.ws();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dxImageTransform() {
	    let localctx = new DxImageTransformContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, css3Parser.RULE_dxImageTransform);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 638;
	        this.match(css3Parser.DxImageTransform);
	        this.state = 639;
	        this.ws();
	        this.state = 640;
	        this.expr();
	        this.state = 641;
	        this.match(css3Parser.T__3);
	        this.state = 642;
	        this.ws();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hexcolor() {
	    let localctx = new HexcolorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, css3Parser.RULE_hexcolor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 644;
	        this.match(css3Parser.Hash);
	        this.state = 645;
	        this.ws();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	number() {
	    let localctx = new NumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, css3Parser.RULE_number);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 648;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===css3Parser.Plus || _la===css3Parser.Minus) {
	            this.state = 647;
	            _la = this._input.LA(1);
	            if(!(_la===css3Parser.Plus || _la===css3Parser.Minus)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 650;
	        this.match(css3Parser.Number);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	percentage() {
	    let localctx = new PercentageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, css3Parser.RULE_percentage);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 653;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===css3Parser.Plus || _la===css3Parser.Minus) {
	            this.state = 652;
	            _la = this._input.LA(1);
	            if(!(_la===css3Parser.Plus || _la===css3Parser.Minus)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 655;
	        this.match(css3Parser.Percentage);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dimension() {
	    let localctx = new DimensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, css3Parser.RULE_dimension);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 658;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===css3Parser.Plus || _la===css3Parser.Minus) {
	            this.state = 657;
	            _la = this._input.LA(1);
	            if(!(_la===css3Parser.Plus || _la===css3Parser.Minus)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 660;
	        this.match(css3Parser.Dimension);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unknownDimension() {
	    let localctx = new UnknownDimensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, css3Parser.RULE_unknownDimension);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 663;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===css3Parser.Plus || _la===css3Parser.Minus) {
	            this.state = 662;
	            _la = this._input.LA(1);
	            if(!(_la===css3Parser.Plus || _la===css3Parser.Minus)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 665;
	        this.match(css3Parser.UnknownDimension);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	any_() {
	    let localctx = new Any_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, css3Parser.RULE_any_);
	    var _la = 0; // Token type
	    try {
	        this.state = 732;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 667;
	            this.ident();
	            this.state = 668;
	            this.ws();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 670;
	            this.number();
	            this.state = 671;
	            this.ws();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 673;
	            this.percentage();
	            this.state = 674;
	            this.ws();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 676;
	            this.dimension();
	            this.state = 677;
	            this.ws();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 679;
	            this.unknownDimension();
	            this.state = 680;
	            this.ws();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 682;
	            this.match(css3Parser.String_);
	            this.state = 683;
	            this.ws();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 684;
	            this.match(css3Parser.Uri);
	            this.state = 685;
	            this.ws();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 686;
	            this.match(css3Parser.Hash);
	            this.state = 687;
	            this.ws();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 688;
	            this.match(css3Parser.UnicodeRange);
	            this.state = 689;
	            this.ws();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 690;
	            this.match(css3Parser.Includes);
	            this.state = 691;
	            this.ws();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 692;
	            this.match(css3Parser.DashMatch);
	            this.state = 693;
	            this.ws();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 694;
	            this.match(css3Parser.T__2);
	            this.state = 695;
	            this.ws();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 696;
	            this.match(css3Parser.Function_);
	            this.state = 697;
	            this.ws();
	            this.state = 702;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__4) | (1 << css3Parser.T__9) | (1 << css3Parser.T__14) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Dimension - 32)) | (1 << (css3Parser.UnknownDimension - 32)) | (1 << (css3Parser.Plus - 32)) | (1 << (css3Parser.Minus - 32)) | (1 << (css3Parser.Number - 32)) | (1 << (css3Parser.String_ - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Ident - 32)) | (1 << (css3Parser.Function_ - 32)))) !== 0)) {
	                this.state = 700;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case css3Parser.T__1:
	                case css3Parser.T__2:
	                case css3Parser.T__9:
	                case css3Parser.Includes:
	                case css3Parser.DashMatch:
	                case css3Parser.Hash:
	                case css3Parser.Percentage:
	                case css3Parser.Uri:
	                case css3Parser.UnicodeRange:
	                case css3Parser.MediaOnly:
	                case css3Parser.Not:
	                case css3Parser.And:
	                case css3Parser.Dimension:
	                case css3Parser.UnknownDimension:
	                case css3Parser.Plus:
	                case css3Parser.Minus:
	                case css3Parser.Number:
	                case css3Parser.String_:
	                case css3Parser.Or:
	                case css3Parser.From:
	                case css3Parser.To:
	                case css3Parser.Ident:
	                case css3Parser.Function_:
	                    this.state = 698;
	                    this.any_();
	                    break;
	                case css3Parser.T__0:
	                case css3Parser.T__4:
	                case css3Parser.T__14:
	                case css3Parser.Cdo:
	                case css3Parser.Cdc:
	                    this.state = 699;
	                    this.unused();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 704;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 705;
	            this.match(css3Parser.T__3);
	            this.state = 706;
	            this.ws();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 708;
	            this.match(css3Parser.T__1);
	            this.state = 709;
	            this.ws();
	            this.state = 714;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__4) | (1 << css3Parser.T__9) | (1 << css3Parser.T__14) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Dimension - 32)) | (1 << (css3Parser.UnknownDimension - 32)) | (1 << (css3Parser.Plus - 32)) | (1 << (css3Parser.Minus - 32)) | (1 << (css3Parser.Number - 32)) | (1 << (css3Parser.String_ - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Ident - 32)) | (1 << (css3Parser.Function_ - 32)))) !== 0)) {
	                this.state = 712;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case css3Parser.T__1:
	                case css3Parser.T__2:
	                case css3Parser.T__9:
	                case css3Parser.Includes:
	                case css3Parser.DashMatch:
	                case css3Parser.Hash:
	                case css3Parser.Percentage:
	                case css3Parser.Uri:
	                case css3Parser.UnicodeRange:
	                case css3Parser.MediaOnly:
	                case css3Parser.Not:
	                case css3Parser.And:
	                case css3Parser.Dimension:
	                case css3Parser.UnknownDimension:
	                case css3Parser.Plus:
	                case css3Parser.Minus:
	                case css3Parser.Number:
	                case css3Parser.String_:
	                case css3Parser.Or:
	                case css3Parser.From:
	                case css3Parser.To:
	                case css3Parser.Ident:
	                case css3Parser.Function_:
	                    this.state = 710;
	                    this.any_();
	                    break;
	                case css3Parser.T__0:
	                case css3Parser.T__4:
	                case css3Parser.T__14:
	                case css3Parser.Cdo:
	                case css3Parser.Cdc:
	                    this.state = 711;
	                    this.unused();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 716;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 717;
	            this.match(css3Parser.T__3);
	            this.state = 718;
	            this.ws();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 720;
	            this.match(css3Parser.T__9);
	            this.state = 721;
	            this.ws();
	            this.state = 726;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__4) | (1 << css3Parser.T__9) | (1 << css3Parser.T__14) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Dimension - 32)) | (1 << (css3Parser.UnknownDimension - 32)) | (1 << (css3Parser.Plus - 32)) | (1 << (css3Parser.Minus - 32)) | (1 << (css3Parser.Number - 32)) | (1 << (css3Parser.String_ - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Ident - 32)) | (1 << (css3Parser.Function_ - 32)))) !== 0)) {
	                this.state = 724;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case css3Parser.T__1:
	                case css3Parser.T__2:
	                case css3Parser.T__9:
	                case css3Parser.Includes:
	                case css3Parser.DashMatch:
	                case css3Parser.Hash:
	                case css3Parser.Percentage:
	                case css3Parser.Uri:
	                case css3Parser.UnicodeRange:
	                case css3Parser.MediaOnly:
	                case css3Parser.Not:
	                case css3Parser.And:
	                case css3Parser.Dimension:
	                case css3Parser.UnknownDimension:
	                case css3Parser.Plus:
	                case css3Parser.Minus:
	                case css3Parser.Number:
	                case css3Parser.String_:
	                case css3Parser.Or:
	                case css3Parser.From:
	                case css3Parser.To:
	                case css3Parser.Ident:
	                case css3Parser.Function_:
	                    this.state = 722;
	                    this.any_();
	                    break;
	                case css3Parser.T__0:
	                case css3Parser.T__4:
	                case css3Parser.T__14:
	                case css3Parser.Cdo:
	                case css3Parser.Cdc:
	                    this.state = 723;
	                    this.unused();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 728;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 729;
	            this.match(css3Parser.T__11);
	            this.state = 730;
	            this.ws();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atRule() {
	    let localctx = new AtRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, css3Parser.RULE_atRule);
	    var _la = 0; // Token type
	    try {
	        localctx = new UnknownAtRuleContext(this, localctx);
	        this.enterOuterAlt(localctx, 1);
	        this.state = 734;
	        this.atKeyword();
	        this.state = 735;
	        this.ws();
	        this.state = 739;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__9) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Dimension - 32)) | (1 << (css3Parser.UnknownDimension - 32)) | (1 << (css3Parser.Plus - 32)) | (1 << (css3Parser.Minus - 32)) | (1 << (css3Parser.Number - 32)) | (1 << (css3Parser.String_ - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Ident - 32)) | (1 << (css3Parser.Function_ - 32)))) !== 0)) {
	            this.state = 736;
	            this.any_();
	            this.state = 741;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 745;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case css3Parser.T__4:
	            this.state = 742;
	            this.block();
	            break;
	        case css3Parser.T__0:
	            this.state = 743;
	            this.match(css3Parser.T__0);
	            this.state = 744;
	            this.ws();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atKeyword() {
	    let localctx = new AtKeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, css3Parser.RULE_atKeyword);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 747;
	        this.match(css3Parser.T__14);
	        this.state = 748;
	        this.ident();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unused() {
	    let localctx = new UnusedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, css3Parser.RULE_unused);
	    try {
	        this.state = 760;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case css3Parser.T__4:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 750;
	            this.block();
	            break;
	        case css3Parser.T__14:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 751;
	            this.atKeyword();
	            this.state = 752;
	            this.ws();
	            break;
	        case css3Parser.T__0:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 754;
	            this.match(css3Parser.T__0);
	            this.state = 755;
	            this.ws();
	            break;
	        case css3Parser.Cdo:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 756;
	            this.match(css3Parser.Cdo);
	            this.state = 757;
	            this.ws();
	            break;
	        case css3Parser.Cdc:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 758;
	            this.match(css3Parser.Cdc);
	            this.state = 759;
	            this.ws();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, css3Parser.RULE_block);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 762;
	        this.match(css3Parser.T__4);
	        this.state = 763;
	        this.ws();
	        this.state = 775;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__4) | (1 << css3Parser.T__6) | (1 << css3Parser.T__7) | (1 << css3Parser.T__8) | (1 << css3Parser.T__9) | (1 << css3Parser.T__13) | (1 << css3Parser.T__14) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Page) | (1 << css3Parser.Media) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Dimension - 32)) | (1 << (css3Parser.UnknownDimension - 32)) | (1 << (css3Parser.Plus - 32)) | (1 << (css3Parser.Minus - 32)) | (1 << (css3Parser.PseudoNot - 32)) | (1 << (css3Parser.Number - 32)) | (1 << (css3Parser.String_ - 32)) | (1 << (css3Parser.FontFace - 32)) | (1 << (css3Parser.Supports - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.Keyframes - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Viewport - 32)) | (1 << (css3Parser.CounterStyle - 32)) | (1 << (css3Parser.FontFeatureValues - 32)) | (1 << (css3Parser.Variable - 32)) | (1 << (css3Parser.Ident - 32)) | (1 << (css3Parser.Function_ - 32)))) !== 0)) {
	            this.state = 773;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 764;
	                this.declarationList();
	                break;

	            case 2:
	                this.state = 765;
	                this.nestedStatement();
	                break;

	            case 3:
	                this.state = 766;
	                this.any_();
	                break;

	            case 4:
	                this.state = 767;
	                this.block();
	                break;

	            case 5:
	                this.state = 768;
	                this.atKeyword();
	                this.state = 769;
	                this.ws();
	                break;

	            case 6:
	                this.state = 771;
	                this.match(css3Parser.T__0);
	                this.state = 772;
	                this.ws();
	                break;

	            }
	            this.state = 777;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 778;
	        this.match(css3Parser.T__5);
	        this.state = 779;
	        this.ws();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedStatement() {
	    let localctx = new NestedStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, css3Parser.RULE_nestedStatement);
	    try {
	        this.state = 791;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case css3Parser.T__1:
	        case css3Parser.T__2:
	        case css3Parser.T__4:
	        case css3Parser.T__6:
	        case css3Parser.T__7:
	        case css3Parser.T__8:
	        case css3Parser.T__9:
	        case css3Parser.Includes:
	        case css3Parser.DashMatch:
	        case css3Parser.Hash:
	        case css3Parser.Percentage:
	        case css3Parser.Uri:
	        case css3Parser.UnicodeRange:
	        case css3Parser.MediaOnly:
	        case css3Parser.Not:
	        case css3Parser.And:
	        case css3Parser.Dimension:
	        case css3Parser.UnknownDimension:
	        case css3Parser.Plus:
	        case css3Parser.Minus:
	        case css3Parser.PseudoNot:
	        case css3Parser.Number:
	        case css3Parser.String_:
	        case css3Parser.Or:
	        case css3Parser.From:
	        case css3Parser.To:
	        case css3Parser.Ident:
	        case css3Parser.Function_:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 781;
	            this.ruleset();
	            break;
	        case css3Parser.Media:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 782;
	            this.media();
	            break;
	        case css3Parser.Page:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 783;
	            this.page();
	            break;
	        case css3Parser.FontFace:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 784;
	            this.fontFaceRule();
	            break;
	        case css3Parser.Keyframes:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 785;
	            this.keyframesRule();
	            break;
	        case css3Parser.Supports:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 786;
	            this.supportsRule();
	            break;
	        case css3Parser.Viewport:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 787;
	            this.viewport();
	            break;
	        case css3Parser.CounterStyle:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 788;
	            this.counterStyle();
	            break;
	        case css3Parser.FontFeatureValues:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 789;
	            this.fontFeatureValuesRule();
	            break;
	        case css3Parser.T__14:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 790;
	            this.atRule();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupRuleBody() {
	    let localctx = new GroupRuleBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, css3Parser.RULE_groupRuleBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 793;
	        this.match(css3Parser.T__4);
	        this.state = 794;
	        this.ws();
	        this.state = 798;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__4) | (1 << css3Parser.T__6) | (1 << css3Parser.T__7) | (1 << css3Parser.T__8) | (1 << css3Parser.T__9) | (1 << css3Parser.T__14) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Page) | (1 << css3Parser.Media) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Dimension - 32)) | (1 << (css3Parser.UnknownDimension - 32)) | (1 << (css3Parser.Plus - 32)) | (1 << (css3Parser.Minus - 32)) | (1 << (css3Parser.PseudoNot - 32)) | (1 << (css3Parser.Number - 32)) | (1 << (css3Parser.String_ - 32)) | (1 << (css3Parser.FontFace - 32)) | (1 << (css3Parser.Supports - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.Keyframes - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Viewport - 32)) | (1 << (css3Parser.CounterStyle - 32)) | (1 << (css3Parser.FontFeatureValues - 32)) | (1 << (css3Parser.Ident - 32)) | (1 << (css3Parser.Function_ - 32)))) !== 0)) {
	            this.state = 795;
	            this.nestedStatement();
	            this.state = 800;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 801;
	        this.match(css3Parser.T__5);
	        this.state = 802;
	        this.ws();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	supportsRule() {
	    let localctx = new SupportsRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, css3Parser.RULE_supportsRule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 804;
	        this.match(css3Parser.Supports);
	        this.state = 805;
	        this.ws();
	        this.state = 806;
	        this.supportsCondition();
	        this.state = 807;
	        this.ws();
	        this.state = 808;
	        this.groupRuleBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	supportsCondition() {
	    let localctx = new SupportsConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, css3Parser.RULE_supportsCondition);
	    try {
	        this.state = 814;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 810;
	            this.supportsNegation();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 811;
	            this.supportsConjunction();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 812;
	            this.supportsDisjunction();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 813;
	            this.supportsConditionInParens();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	supportsConditionInParens() {
	    let localctx = new SupportsConditionInParensContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, css3Parser.RULE_supportsConditionInParens);
	    try {
	        this.state = 824;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 816;
	            this.match(css3Parser.T__1);
	            this.state = 817;
	            this.ws();
	            this.state = 818;
	            this.supportsCondition();
	            this.state = 819;
	            this.ws();
	            this.state = 820;
	            this.match(css3Parser.T__3);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 822;
	            this.supportsDeclarationCondition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 823;
	            this.generalEnclosed();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	supportsNegation() {
	    let localctx = new SupportsNegationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, css3Parser.RULE_supportsNegation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 826;
	        this.match(css3Parser.Not);
	        this.state = 827;
	        this.ws();
	        this.state = 828;
	        this.match(css3Parser.Space);
	        this.state = 829;
	        this.ws();
	        this.state = 830;
	        this.supportsConditionInParens();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	supportsConjunction() {
	    let localctx = new SupportsConjunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, css3Parser.RULE_supportsConjunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 832;
	        this.supportsConditionInParens();
	        this.state = 842; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 833;
	        		this.ws();
	        		this.state = 834;
	        		this.match(css3Parser.Space);
	        		this.state = 835;
	        		this.ws();
	        		this.state = 836;
	        		this.match(css3Parser.And);
	        		this.state = 837;
	        		this.ws();
	        		this.state = 838;
	        		this.match(css3Parser.Space);
	        		this.state = 839;
	        		this.ws();
	        		this.state = 840;
	        		this.supportsConditionInParens();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 844; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,80, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	supportsDisjunction() {
	    let localctx = new SupportsDisjunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, css3Parser.RULE_supportsDisjunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 846;
	        this.supportsConditionInParens();
	        this.state = 856; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 847;
	        		this.ws();
	        		this.state = 848;
	        		this.match(css3Parser.Space);
	        		this.state = 849;
	        		this.ws();
	        		this.state = 850;
	        		this.match(css3Parser.Or);
	        		this.state = 851;
	        		this.ws();
	        		this.state = 852;
	        		this.match(css3Parser.Space);
	        		this.state = 853;
	        		this.ws();
	        		this.state = 854;
	        		this.supportsConditionInParens();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 858; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,81, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	supportsDeclarationCondition() {
	    let localctx = new SupportsDeclarationConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, css3Parser.RULE_supportsDeclarationCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 860;
	        this.match(css3Parser.T__1);
	        this.state = 861;
	        this.ws();
	        this.state = 862;
	        this.declaration();
	        this.state = 863;
	        this.match(css3Parser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalEnclosed() {
	    let localctx = new GeneralEnclosedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, css3Parser.RULE_generalEnclosed);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 865;
	        _la = this._input.LA(1);
	        if(!(_la===css3Parser.T__1 || _la===css3Parser.Function_)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 870;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__4) | (1 << css3Parser.T__9) | (1 << css3Parser.T__14) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Dimension - 32)) | (1 << (css3Parser.UnknownDimension - 32)) | (1 << (css3Parser.Plus - 32)) | (1 << (css3Parser.Minus - 32)) | (1 << (css3Parser.Number - 32)) | (1 << (css3Parser.String_ - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Ident - 32)) | (1 << (css3Parser.Function_ - 32)))) !== 0)) {
	            this.state = 868;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case css3Parser.T__1:
	            case css3Parser.T__2:
	            case css3Parser.T__9:
	            case css3Parser.Includes:
	            case css3Parser.DashMatch:
	            case css3Parser.Hash:
	            case css3Parser.Percentage:
	            case css3Parser.Uri:
	            case css3Parser.UnicodeRange:
	            case css3Parser.MediaOnly:
	            case css3Parser.Not:
	            case css3Parser.And:
	            case css3Parser.Dimension:
	            case css3Parser.UnknownDimension:
	            case css3Parser.Plus:
	            case css3Parser.Minus:
	            case css3Parser.Number:
	            case css3Parser.String_:
	            case css3Parser.Or:
	            case css3Parser.From:
	            case css3Parser.To:
	            case css3Parser.Ident:
	            case css3Parser.Function_:
	                this.state = 866;
	                this.any_();
	                break;
	            case css3Parser.T__0:
	            case css3Parser.T__4:
	            case css3Parser.T__14:
	            case css3Parser.Cdo:
	            case css3Parser.Cdc:
	                this.state = 867;
	                this.unused();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 872;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 873;
	        this.match(css3Parser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	var_() {
	    let localctx = new Var_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, css3Parser.RULE_var_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 875;
	        this.match(css3Parser.Var);
	        this.state = 876;
	        this.ws();
	        this.state = 877;
	        this.match(css3Parser.Variable);
	        this.state = 878;
	        this.ws();
	        this.state = 879;
	        this.match(css3Parser.T__3);
	        this.state = 880;
	        this.ws();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	calc() {
	    let localctx = new CalcContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, css3Parser.RULE_calc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 882;
	        this.match(css3Parser.Calc);
	        this.state = 883;
	        this.ws();
	        this.state = 884;
	        this.calcSum();
	        this.state = 885;
	        this.match(css3Parser.T__3);
	        this.state = 886;
	        this.ws();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	calcSum() {
	    let localctx = new CalcSumContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, css3Parser.RULE_calcSum);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 888;
	        this.calcProduct();
	        this.state = 899;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===css3Parser.Space) {
	            this.state = 889;
	            this.match(css3Parser.Space);
	            this.state = 890;
	            this.ws();
	            this.state = 891;
	            _la = this._input.LA(1);
	            if(!(_la===css3Parser.Plus || _la===css3Parser.Minus)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 892;
	            this.ws();
	            this.state = 893;
	            this.match(css3Parser.Space);
	            this.state = 894;
	            this.ws();
	            this.state = 895;
	            this.calcProduct();
	            this.state = 901;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	calcProduct() {
	    let localctx = new CalcProductContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, css3Parser.RULE_calcProduct);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 902;
	        this.calcValue();
	        this.state = 914;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===css3Parser.T__6 || _la===css3Parser.T__12) {
	            this.state = 912;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case css3Parser.T__6:
	                this.state = 903;
	                this.match(css3Parser.T__6);
	                this.state = 904;
	                this.ws();
	                this.state = 905;
	                this.calcValue();
	                break;
	            case css3Parser.T__12:
	                this.state = 907;
	                this.match(css3Parser.T__12);
	                this.state = 908;
	                this.ws();
	                this.state = 909;
	                this.number();
	                this.state = 910;
	                this.ws();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 916;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	calcValue() {
	    let localctx = new CalcValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, css3Parser.RULE_calcValue);
	    try {
	        this.state = 935;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 917;
	            this.number();
	            this.state = 918;
	            this.ws();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 920;
	            this.dimension();
	            this.state = 921;
	            this.ws();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 923;
	            this.unknownDimension();
	            this.state = 924;
	            this.ws();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 926;
	            this.percentage();
	            this.state = 927;
	            this.ws();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 929;
	            this.match(css3Parser.T__1);
	            this.state = 930;
	            this.ws();
	            this.state = 931;
	            this.calcSum();
	            this.state = 932;
	            this.match(css3Parser.T__3);
	            this.state = 933;
	            this.ws();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fontFaceRule() {
	    let localctx = new FontFaceRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, css3Parser.RULE_fontFaceRule);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 937;
	        this.match(css3Parser.FontFace);
	        this.state = 938;
	        this.ws();
	        this.state = 939;
	        this.match(css3Parser.T__4);
	        this.state = 940;
	        this.ws();
	        this.state = 942;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===css3Parser.T__6 || _la===css3Parser.T__13 || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Variable - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
	            this.state = 941;
	            this.fontFaceDeclaration();
	        }

	        this.state = 951;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===css3Parser.T__0) {
	            this.state = 944;
	            this.match(css3Parser.T__0);
	            this.state = 945;
	            this.ws();
	            this.state = 947;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===css3Parser.T__6 || _la===css3Parser.T__13 || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Variable - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
	                this.state = 946;
	                this.fontFaceDeclaration();
	            }

	            this.state = 953;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 954;
	        this.match(css3Parser.T__5);
	        this.state = 955;
	        this.ws();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fontFaceDeclaration() {
	    let localctx = new FontFaceDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, css3Parser.RULE_fontFaceDeclaration);
	    try {
	        this.state = 967;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new KnownFontFaceDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 957;
	            this.property_();
	            this.state = 958;
	            this.match(css3Parser.T__2);
	            this.state = 959;
	            this.ws();
	            this.state = 960;
	            this.expr();
	            break;

	        case 2:
	            localctx = new UnknownFontFaceDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 962;
	            this.property_();
	            this.state = 963;
	            this.match(css3Parser.T__2);
	            this.state = 964;
	            this.ws();
	            this.state = 965;
	            this.value();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyframesRule() {
	    let localctx = new KeyframesRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, css3Parser.RULE_keyframesRule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 969;
	        this.match(css3Parser.Keyframes);
	        this.state = 970;
	        this.ws();
	        this.state = 971;
	        this.match(css3Parser.Space);
	        this.state = 972;
	        this.ws();
	        this.state = 973;
	        this.ident();
	        this.state = 974;
	        this.ws();
	        this.state = 975;
	        this.match(css3Parser.T__4);
	        this.state = 976;
	        this.ws();
	        this.state = 977;
	        this.keyframesBlocks();
	        this.state = 978;
	        this.match(css3Parser.T__5);
	        this.state = 979;
	        this.ws();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyframesBlocks() {
	    let localctx = new KeyframesBlocksContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, css3Parser.RULE_keyframesBlocks);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 992;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (css3Parser.Percentage - 29)) | (1 << (css3Parser.From - 29)) | (1 << (css3Parser.To - 29)))) !== 0)) {
	            this.state = 981;
	            this.keyframeSelector();
	            this.state = 982;
	            this.match(css3Parser.T__4);
	            this.state = 983;
	            this.ws();
	            this.state = 985;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__6) | (1 << css3Parser.T__13))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Variable - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
	                this.state = 984;
	                this.declarationList();
	            }

	            this.state = 987;
	            this.match(css3Parser.T__5);
	            this.state = 988;
	            this.ws();
	            this.state = 994;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyframeSelector() {
	    let localctx = new KeyframeSelectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, css3Parser.RULE_keyframeSelector);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 995;
	        _la = this._input.LA(1);
	        if(!(((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (css3Parser.Percentage - 29)) | (1 << (css3Parser.From - 29)) | (1 << (css3Parser.To - 29)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 996;
	        this.ws();
	        this.state = 1004;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===css3Parser.Comma) {
	            this.state = 997;
	            this.match(css3Parser.Comma);
	            this.state = 998;
	            this.ws();
	            this.state = 999;
	            _la = this._input.LA(1);
	            if(!(((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (css3Parser.Percentage - 29)) | (1 << (css3Parser.From - 29)) | (1 << (css3Parser.To - 29)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1000;
	            this.ws();
	            this.state = 1006;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	viewport() {
	    let localctx = new ViewportContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, css3Parser.RULE_viewport);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1007;
	        this.match(css3Parser.Viewport);
	        this.state = 1008;
	        this.ws();
	        this.state = 1009;
	        this.match(css3Parser.T__4);
	        this.state = 1010;
	        this.ws();
	        this.state = 1012;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__6) | (1 << css3Parser.T__13))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Variable - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
	            this.state = 1011;
	            this.declarationList();
	        }

	        this.state = 1014;
	        this.match(css3Parser.T__5);
	        this.state = 1015;
	        this.ws();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	counterStyle() {
	    let localctx = new CounterStyleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, css3Parser.RULE_counterStyle);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1017;
	        this.match(css3Parser.CounterStyle);
	        this.state = 1018;
	        this.ws();
	        this.state = 1019;
	        this.ident();
	        this.state = 1020;
	        this.ws();
	        this.state = 1021;
	        this.match(css3Parser.T__4);
	        this.state = 1022;
	        this.ws();
	        this.state = 1024;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__6) | (1 << css3Parser.T__13))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Variable - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
	            this.state = 1023;
	            this.declarationList();
	        }

	        this.state = 1026;
	        this.match(css3Parser.T__5);
	        this.state = 1027;
	        this.ws();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fontFeatureValuesRule() {
	    let localctx = new FontFeatureValuesRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, css3Parser.RULE_fontFeatureValuesRule);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1029;
	        this.match(css3Parser.FontFeatureValues);
	        this.state = 1030;
	        this.ws();
	        this.state = 1031;
	        this.fontFamilyNameList();
	        this.state = 1032;
	        this.ws();
	        this.state = 1033;
	        this.match(css3Parser.T__4);
	        this.state = 1034;
	        this.ws();
	        this.state = 1038;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===css3Parser.T__14) {
	            this.state = 1035;
	            this.featureValueBlock();
	            this.state = 1040;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1041;
	        this.match(css3Parser.T__5);
	        this.state = 1042;
	        this.ws();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fontFamilyNameList() {
	    let localctx = new FontFamilyNameListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, css3Parser.RULE_fontFamilyNameList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1044;
	        this.fontFamilyName();
	        this.state = 1052;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,98,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1045;
	                this.ws();
	                this.state = 1046;
	                this.match(css3Parser.Comma);
	                this.state = 1047;
	                this.ws();
	                this.state = 1048;
	                this.fontFamilyName(); 
	            }
	            this.state = 1054;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,98,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fontFamilyName() {
	    let localctx = new FontFamilyNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, css3Parser.RULE_fontFamilyName);
	    try {
	        this.state = 1065;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case css3Parser.String_:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1055;
	            this.match(css3Parser.String_);
	            break;
	        case css3Parser.MediaOnly:
	        case css3Parser.Not:
	        case css3Parser.And:
	        case css3Parser.Or:
	        case css3Parser.From:
	        case css3Parser.To:
	        case css3Parser.Ident:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1056;
	            this.ident();
	            this.state = 1062;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,99,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1057;
	                    this.ws();
	                    this.state = 1058;
	                    this.ident(); 
	                }
	                this.state = 1064;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,99,this._ctx);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	featureValueBlock() {
	    let localctx = new FeatureValueBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, css3Parser.RULE_featureValueBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1067;
	        this.featureType();
	        this.state = 1068;
	        this.ws();
	        this.state = 1069;
	        this.match(css3Parser.T__4);
	        this.state = 1070;
	        this.ws();
	        this.state = 1072;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
	            this.state = 1071;
	            this.featureValueDefinition();
	        }

	        this.state = 1082;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.Comment) | (1 << css3Parser.Space))) !== 0)) {
	            this.state = 1074;
	            this.ws();
	            this.state = 1075;
	            this.match(css3Parser.T__0);
	            this.state = 1076;
	            this.ws();
	            this.state = 1078;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
	                this.state = 1077;
	                this.featureValueDefinition();
	            }

	            this.state = 1084;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1085;
	        this.match(css3Parser.T__5);
	        this.state = 1086;
	        this.ws();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	featureType() {
	    let localctx = new FeatureTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, css3Parser.RULE_featureType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1088;
	        this.atKeyword();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	featureValueDefinition() {
	    let localctx = new FeatureValueDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, css3Parser.RULE_featureValueDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1090;
	        this.ident();
	        this.state = 1091;
	        this.ws();
	        this.state = 1092;
	        this.match(css3Parser.T__2);
	        this.state = 1093;
	        this.ws();
	        this.state = 1094;
	        this.number();
	        this.state = 1100;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,104,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1095;
	                this.ws();
	                this.state = 1096;
	                this.number(); 
	            }
	            this.state = 1102;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,104,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ident() {
	    let localctx = new IdentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, css3Parser.RULE_ident);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1103;
	        _la = this._input.LA(1);
	        if(!(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ws() {
	    let localctx = new WsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, css3Parser.RULE_ws);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1108;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,105,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1105;
	                _la = this._input.LA(1);
	                if(!(_la===css3Parser.Comment || _la===css3Parser.Space)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                } 
	            }
	            this.state = 1110;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,105,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

css3Parser.EOF = antlr4.Token.EOF;
css3Parser.T__0 = 1;
css3Parser.T__1 = 2;
css3Parser.T__2 = 3;
css3Parser.T__3 = 4;
css3Parser.T__4 = 5;
css3Parser.T__5 = 6;
css3Parser.T__6 = 7;
css3Parser.T__7 = 8;
css3Parser.T__8 = 9;
css3Parser.T__9 = 10;
css3Parser.T__10 = 11;
css3Parser.T__11 = 12;
css3Parser.T__12 = 13;
css3Parser.T__13 = 14;
css3Parser.T__14 = 15;
css3Parser.Comment = 16;
css3Parser.Space = 17;
css3Parser.Cdo = 18;
css3Parser.Cdc = 19;
css3Parser.Includes = 20;
css3Parser.DashMatch = 21;
css3Parser.Hash = 22;
css3Parser.Import = 23;
css3Parser.Page = 24;
css3Parser.Media = 25;
css3Parser.Namespace = 26;
css3Parser.Charset = 27;
css3Parser.Important = 28;
css3Parser.Percentage = 29;
css3Parser.Uri = 30;
css3Parser.UnicodeRange = 31;
css3Parser.MediaOnly = 32;
css3Parser.Not = 33;
css3Parser.And = 34;
css3Parser.Dimension = 35;
css3Parser.UnknownDimension = 36;
css3Parser.Plus = 37;
css3Parser.Minus = 38;
css3Parser.Greater = 39;
css3Parser.Comma = 40;
css3Parser.Tilde = 41;
css3Parser.PseudoNot = 42;
css3Parser.Number = 43;
css3Parser.String_ = 44;
css3Parser.PrefixMatch = 45;
css3Parser.SuffixMatch = 46;
css3Parser.SubstringMatch = 47;
css3Parser.FontFace = 48;
css3Parser.Supports = 49;
css3Parser.Or = 50;
css3Parser.Keyframes = 51;
css3Parser.From = 52;
css3Parser.To = 53;
css3Parser.Calc = 54;
css3Parser.Viewport = 55;
css3Parser.CounterStyle = 56;
css3Parser.FontFeatureValues = 57;
css3Parser.DxImageTransform = 58;
css3Parser.Variable = 59;
css3Parser.Var = 60;
css3Parser.Ident = 61;
css3Parser.Function_ = 62;

css3Parser.RULE_stylesheet = 0;
css3Parser.RULE_charset = 1;
css3Parser.RULE_imports = 2;
css3Parser.RULE_namespace_ = 3;
css3Parser.RULE_namespacePrefix = 4;
css3Parser.RULE_media = 5;
css3Parser.RULE_mediaQueryList = 6;
css3Parser.RULE_mediaQuery = 7;
css3Parser.RULE_mediaType = 8;
css3Parser.RULE_mediaExpression = 9;
css3Parser.RULE_mediaFeature = 10;
css3Parser.RULE_page = 11;
css3Parser.RULE_pseudoPage = 12;
css3Parser.RULE_selectorGroup = 13;
css3Parser.RULE_selector = 14;
css3Parser.RULE_combinator = 15;
css3Parser.RULE_simpleSelectorSequence = 16;
css3Parser.RULE_typeSelector = 17;
css3Parser.RULE_typeNamespacePrefix = 18;
css3Parser.RULE_elementName = 19;
css3Parser.RULE_universal = 20;
css3Parser.RULE_className = 21;
css3Parser.RULE_attrib = 22;
css3Parser.RULE_pseudo = 23;
css3Parser.RULE_functionalPseudo = 24;
css3Parser.RULE_expression = 25;
css3Parser.RULE_negation = 26;
css3Parser.RULE_negationArg = 27;
css3Parser.RULE_operator_ = 28;
css3Parser.RULE_property_ = 29;
css3Parser.RULE_ruleset = 30;
css3Parser.RULE_declarationList = 31;
css3Parser.RULE_declaration = 32;
css3Parser.RULE_prio = 33;
css3Parser.RULE_value = 34;
css3Parser.RULE_expr = 35;
css3Parser.RULE_term = 36;
css3Parser.RULE_function_ = 37;
css3Parser.RULE_dxImageTransform = 38;
css3Parser.RULE_hexcolor = 39;
css3Parser.RULE_number = 40;
css3Parser.RULE_percentage = 41;
css3Parser.RULE_dimension = 42;
css3Parser.RULE_unknownDimension = 43;
css3Parser.RULE_any_ = 44;
css3Parser.RULE_atRule = 45;
css3Parser.RULE_atKeyword = 46;
css3Parser.RULE_unused = 47;
css3Parser.RULE_block = 48;
css3Parser.RULE_nestedStatement = 49;
css3Parser.RULE_groupRuleBody = 50;
css3Parser.RULE_supportsRule = 51;
css3Parser.RULE_supportsCondition = 52;
css3Parser.RULE_supportsConditionInParens = 53;
css3Parser.RULE_supportsNegation = 54;
css3Parser.RULE_supportsConjunction = 55;
css3Parser.RULE_supportsDisjunction = 56;
css3Parser.RULE_supportsDeclarationCondition = 57;
css3Parser.RULE_generalEnclosed = 58;
css3Parser.RULE_var_ = 59;
css3Parser.RULE_calc = 60;
css3Parser.RULE_calcSum = 61;
css3Parser.RULE_calcProduct = 62;
css3Parser.RULE_calcValue = 63;
css3Parser.RULE_fontFaceRule = 64;
css3Parser.RULE_fontFaceDeclaration = 65;
css3Parser.RULE_keyframesRule = 66;
css3Parser.RULE_keyframesBlocks = 67;
css3Parser.RULE_keyframeSelector = 68;
css3Parser.RULE_viewport = 69;
css3Parser.RULE_counterStyle = 70;
css3Parser.RULE_fontFeatureValuesRule = 71;
css3Parser.RULE_fontFamilyNameList = 72;
css3Parser.RULE_fontFamilyName = 73;
css3Parser.RULE_featureValueBlock = 74;
css3Parser.RULE_featureType = 75;
css3Parser.RULE_featureValueDefinition = 76;
css3Parser.RULE_ident = 77;
css3Parser.RULE_ws = 78;

class StylesheetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_stylesheet;
    }

	ws() {
	    return this.getTypedRuleContext(WsContext,0);
	};

	charset = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CharsetContext);
	    } else {
	        return this.getTypedRuleContext(CharsetContext,i);
	    }
	};

	imports = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportsContext);
	    } else {
	        return this.getTypedRuleContext(ImportsContext,i);
	    }
	};

	namespace_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Namespace_Context);
	    } else {
	        return this.getTypedRuleContext(Namespace_Context,i);
	    }
	};

	nestedStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NestedStatementContext);
	    } else {
	        return this.getTypedRuleContext(NestedStatementContext,i);
	    }
	};

	Comment = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.Comment);
	    } else {
	        return this.getToken(css3Parser.Comment, i);
	    }
	};


	Space = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.Space);
	    } else {
	        return this.getToken(css3Parser.Space, i);
	    }
	};


	Cdo = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.Cdo);
	    } else {
	        return this.getToken(css3Parser.Cdo, i);
	    }
	};


	Cdc = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.Cdc);
	    } else {
	        return this.getToken(css3Parser.Cdc, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterStylesheet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitStylesheet(this);
		}
	}


}



class CharsetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_charset;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BadCharsetContext extends CharsetContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Charset() {
	    return this.getToken(css3Parser.Charset, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	String_() {
	    return this.getToken(css3Parser.String_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterBadCharset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitBadCharset(this);
		}
	}


}

css3Parser.BadCharsetContext = BadCharsetContext;

class GoodCharsetContext extends CharsetContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Charset() {
	    return this.getToken(css3Parser.Charset, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	String_() {
	    return this.getToken(css3Parser.String_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterGoodCharset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitGoodCharset(this);
		}
	}


}

css3Parser.GoodCharsetContext = GoodCharsetContext;

class ImportsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_imports;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BadImportContext extends ImportsContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Import() {
	    return this.getToken(css3Parser.Import, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	mediaQueryList() {
	    return this.getTypedRuleContext(MediaQueryListContext,0);
	};

	String_() {
	    return this.getToken(css3Parser.String_, 0);
	};

	Uri() {
	    return this.getToken(css3Parser.Uri, 0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterBadImport(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitBadImport(this);
		}
	}


}

css3Parser.BadImportContext = BadImportContext;

class GoodImportContext extends ImportsContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Import() {
	    return this.getToken(css3Parser.Import, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	mediaQueryList() {
	    return this.getTypedRuleContext(MediaQueryListContext,0);
	};

	String_() {
	    return this.getToken(css3Parser.String_, 0);
	};

	Uri() {
	    return this.getToken(css3Parser.Uri, 0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterGoodImport(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitGoodImport(this);
		}
	}


}

css3Parser.GoodImportContext = GoodImportContext;

class Namespace_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_namespace_;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class GoodNamespaceContext extends Namespace_Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Namespace() {
	    return this.getToken(css3Parser.Namespace, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	String_() {
	    return this.getToken(css3Parser.String_, 0);
	};

	Uri() {
	    return this.getToken(css3Parser.Uri, 0);
	};

	namespacePrefix() {
	    return this.getTypedRuleContext(NamespacePrefixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterGoodNamespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitGoodNamespace(this);
		}
	}


}

css3Parser.GoodNamespaceContext = GoodNamespaceContext;

class BadNamespaceContext extends Namespace_Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Namespace() {
	    return this.getToken(css3Parser.Namespace, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	String_() {
	    return this.getToken(css3Parser.String_, 0);
	};

	Uri() {
	    return this.getToken(css3Parser.Uri, 0);
	};

	namespacePrefix() {
	    return this.getTypedRuleContext(NamespacePrefixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterBadNamespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitBadNamespace(this);
		}
	}


}

css3Parser.BadNamespaceContext = BadNamespaceContext;

class NamespacePrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_namespacePrefix;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterNamespacePrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitNamespacePrefix(this);
		}
	}


}



class MediaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_media;
    }

	Media() {
	    return this.getToken(css3Parser.Media, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	mediaQueryList() {
	    return this.getTypedRuleContext(MediaQueryListContext,0);
	};

	groupRuleBody() {
	    return this.getTypedRuleContext(GroupRuleBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterMedia(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitMedia(this);
		}
	}


}



class MediaQueryListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_mediaQueryList;
    }

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	mediaQuery = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MediaQueryContext);
	    } else {
	        return this.getTypedRuleContext(MediaQueryContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.Comma);
	    } else {
	        return this.getToken(css3Parser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterMediaQueryList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitMediaQueryList(this);
		}
	}


}



class MediaQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_mediaQuery;
    }

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	mediaType() {
	    return this.getTypedRuleContext(MediaTypeContext,0);
	};

	And = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.And);
	    } else {
	        return this.getToken(css3Parser.And, i);
	    }
	};


	mediaExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MediaExpressionContext);
	    } else {
	        return this.getTypedRuleContext(MediaExpressionContext,i);
	    }
	};

	MediaOnly() {
	    return this.getToken(css3Parser.MediaOnly, 0);
	};

	Not() {
	    return this.getToken(css3Parser.Not, 0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterMediaQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitMediaQuery(this);
		}
	}


}



class MediaTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_mediaType;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterMediaType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitMediaType(this);
		}
	}


}



class MediaExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_mediaExpression;
    }

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	mediaFeature() {
	    return this.getTypedRuleContext(MediaFeatureContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterMediaExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitMediaExpression(this);
		}
	}


}



class MediaFeatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_mediaFeature;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	ws() {
	    return this.getTypedRuleContext(WsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterMediaFeature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitMediaFeature(this);
		}
	}


}



class PageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_page;
    }

	Page() {
	    return this.getToken(css3Parser.Page, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	pseudoPage() {
	    return this.getTypedRuleContext(PseudoPageContext,0);
	};

	declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclarationContext);
	    } else {
	        return this.getTypedRuleContext(DeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterPage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitPage(this);
		}
	}


}



class PseudoPageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_pseudoPage;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	ws() {
	    return this.getTypedRuleContext(WsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterPseudoPage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitPseudoPage(this);
		}
	}


}



class SelectorGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_selectorGroup;
    }

	selector = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectorContext);
	    } else {
	        return this.getTypedRuleContext(SelectorContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.Comma);
	    } else {
	        return this.getToken(css3Parser.Comma, i);
	    }
	};


	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterSelectorGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitSelectorGroup(this);
		}
	}


}



class SelectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_selector;
    }

	simpleSelectorSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleSelectorSequenceContext);
	    } else {
	        return this.getTypedRuleContext(SimpleSelectorSequenceContext,i);
	    }
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	combinator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CombinatorContext);
	    } else {
	        return this.getTypedRuleContext(CombinatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterSelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitSelector(this);
		}
	}


}



class CombinatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_combinator;
    }

	Plus() {
	    return this.getToken(css3Parser.Plus, 0);
	};

	ws() {
	    return this.getTypedRuleContext(WsContext,0);
	};

	Greater() {
	    return this.getToken(css3Parser.Greater, 0);
	};

	Tilde() {
	    return this.getToken(css3Parser.Tilde, 0);
	};

	Space() {
	    return this.getToken(css3Parser.Space, 0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterCombinator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitCombinator(this);
		}
	}


}



class SimpleSelectorSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_simpleSelectorSequence;
    }

	typeSelector() {
	    return this.getTypedRuleContext(TypeSelectorContext,0);
	};

	universal() {
	    return this.getTypedRuleContext(UniversalContext,0);
	};

	Hash = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.Hash);
	    } else {
	        return this.getToken(css3Parser.Hash, i);
	    }
	};


	className = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassNameContext);
	    } else {
	        return this.getTypedRuleContext(ClassNameContext,i);
	    }
	};

	attrib = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AttribContext);
	    } else {
	        return this.getTypedRuleContext(AttribContext,i);
	    }
	};

	pseudo = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PseudoContext);
	    } else {
	        return this.getTypedRuleContext(PseudoContext,i);
	    }
	};

	negation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NegationContext);
	    } else {
	        return this.getTypedRuleContext(NegationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterSimpleSelectorSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitSimpleSelectorSequence(this);
		}
	}


}



class TypeSelectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_typeSelector;
    }

	elementName() {
	    return this.getTypedRuleContext(ElementNameContext,0);
	};

	typeNamespacePrefix() {
	    return this.getTypedRuleContext(TypeNamespacePrefixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterTypeSelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitTypeSelector(this);
		}
	}


}



class TypeNamespacePrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_typeNamespacePrefix;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterTypeNamespacePrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitTypeNamespacePrefix(this);
		}
	}


}



class ElementNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_elementName;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterElementName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitElementName(this);
		}
	}


}



class UniversalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_universal;
    }

	typeNamespacePrefix() {
	    return this.getTypedRuleContext(TypeNamespacePrefixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterUniversal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitUniversal(this);
		}
	}


}



class ClassNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_className;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterClassName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitClassName(this);
		}
	}


}



class AttribContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_attrib;
    }

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	typeNamespacePrefix() {
	    return this.getTypedRuleContext(TypeNamespacePrefixContext,0);
	};

	PrefixMatch() {
	    return this.getToken(css3Parser.PrefixMatch, 0);
	};

	SuffixMatch() {
	    return this.getToken(css3Parser.SuffixMatch, 0);
	};

	SubstringMatch() {
	    return this.getToken(css3Parser.SubstringMatch, 0);
	};

	Includes() {
	    return this.getToken(css3Parser.Includes, 0);
	};

	DashMatch() {
	    return this.getToken(css3Parser.DashMatch, 0);
	};

	String_() {
	    return this.getToken(css3Parser.String_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterAttrib(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitAttrib(this);
		}
	}


}



class PseudoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_pseudo;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	functionalPseudo() {
	    return this.getTypedRuleContext(FunctionalPseudoContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterPseudo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitPseudo(this);
		}
	}


}



class FunctionalPseudoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_functionalPseudo;
    }

	Function_() {
	    return this.getToken(css3Parser.Function_, 0);
	};

	ws() {
	    return this.getTypedRuleContext(WsContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterFunctionalPseudo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitFunctionalPseudo(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_expression;
    }

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	Plus = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.Plus);
	    } else {
	        return this.getToken(css3Parser.Plus, i);
	    }
	};


	Minus = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.Minus);
	    } else {
	        return this.getToken(css3Parser.Minus, i);
	    }
	};


	Dimension = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.Dimension);
	    } else {
	        return this.getToken(css3Parser.Dimension, i);
	    }
	};


	UnknownDimension = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.UnknownDimension);
	    } else {
	        return this.getToken(css3Parser.UnknownDimension, i);
	    }
	};


	Number = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.Number);
	    } else {
	        return this.getToken(css3Parser.Number, i);
	    }
	};


	String_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.String_);
	    } else {
	        return this.getToken(css3Parser.String_, i);
	    }
	};


	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitExpression(this);
		}
	}


}



class NegationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_negation;
    }

	PseudoNot() {
	    return this.getToken(css3Parser.PseudoNot, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	negationArg() {
	    return this.getTypedRuleContext(NegationArgContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterNegation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitNegation(this);
		}
	}


}



class NegationArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_negationArg;
    }

	typeSelector() {
	    return this.getTypedRuleContext(TypeSelectorContext,0);
	};

	universal() {
	    return this.getTypedRuleContext(UniversalContext,0);
	};

	Hash() {
	    return this.getToken(css3Parser.Hash, 0);
	};

	className() {
	    return this.getTypedRuleContext(ClassNameContext,0);
	};

	attrib() {
	    return this.getTypedRuleContext(AttribContext,0);
	};

	pseudo() {
	    return this.getTypedRuleContext(PseudoContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterNegationArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitNegationArg(this);
		}
	}


}



class Operator_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_operator_;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BadOperatorContext extends Operator_Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ws() {
	    return this.getTypedRuleContext(WsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterBadOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitBadOperator(this);
		}
	}


}

css3Parser.BadOperatorContext = BadOperatorContext;

class GoodOperatorContext extends Operator_Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ws() {
	    return this.getTypedRuleContext(WsContext,0);
	};

	Comma() {
	    return this.getToken(css3Parser.Comma, 0);
	};

	Space() {
	    return this.getToken(css3Parser.Space, 0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterGoodOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitGoodOperator(this);
		}
	}


}

css3Parser.GoodOperatorContext = GoodOperatorContext;

class Property_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_property_;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BadPropertyContext extends Property_Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterBadProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitBadProperty(this);
		}
	}


}

css3Parser.BadPropertyContext = BadPropertyContext;

class GoodPropertyContext extends Property_Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	ws() {
	    return this.getTypedRuleContext(WsContext,0);
	};

	Variable() {
	    return this.getToken(css3Parser.Variable, 0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterGoodProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitGoodProperty(this);
		}
	}


}

css3Parser.GoodPropertyContext = GoodPropertyContext;

class RulesetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_ruleset;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class UnknownRulesetContext extends RulesetContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	any_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Any_Context);
	    } else {
	        return this.getTypedRuleContext(Any_Context,i);
	    }
	};

	declarationList() {
	    return this.getTypedRuleContext(DeclarationListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterUnknownRuleset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitUnknownRuleset(this);
		}
	}


}

css3Parser.UnknownRulesetContext = UnknownRulesetContext;

class KnownRulesetContext extends RulesetContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	selectorGroup() {
	    return this.getTypedRuleContext(SelectorGroupContext,0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	declarationList() {
	    return this.getTypedRuleContext(DeclarationListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterKnownRuleset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitKnownRuleset(this);
		}
	}


}

css3Parser.KnownRulesetContext = KnownRulesetContext;

class DeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_declarationList;
    }

	declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclarationContext);
	    } else {
	        return this.getTypedRuleContext(DeclarationContext,i);
	    }
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitDeclarationList(this);
		}
	}


}



class DeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_declaration;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class UnknownDeclarationContext extends DeclarationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	property_() {
	    return this.getTypedRuleContext(Property_Context,0);
	};

	ws() {
	    return this.getTypedRuleContext(WsContext,0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterUnknownDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitUnknownDeclaration(this);
		}
	}


}

css3Parser.UnknownDeclarationContext = UnknownDeclarationContext;

class KnownDeclarationContext extends DeclarationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	property_() {
	    return this.getTypedRuleContext(Property_Context,0);
	};

	ws() {
	    return this.getTypedRuleContext(WsContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	prio() {
	    return this.getTypedRuleContext(PrioContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterKnownDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitKnownDeclaration(this);
		}
	}


}

css3Parser.KnownDeclarationContext = KnownDeclarationContext;

class PrioContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_prio;
    }

	Important() {
	    return this.getToken(css3Parser.Important, 0);
	};

	ws() {
	    return this.getTypedRuleContext(WsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterPrio(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitPrio(this);
		}
	}


}



class ValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_value;
    }

	any_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Any_Context);
	    } else {
	        return this.getTypedRuleContext(Any_Context,i);
	    }
	};

	block = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockContext);
	    } else {
	        return this.getTypedRuleContext(BlockContext,i);
	    }
	};

	atKeyword = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AtKeywordContext);
	    } else {
	        return this.getTypedRuleContext(AtKeywordContext,i);
	    }
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitValue(this);
		}
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_expr;
    }

	term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermContext);
	    } else {
	        return this.getTypedRuleContext(TermContext,i);
	    }
	};

	operator_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Operator_Context);
	    } else {
	        return this.getTypedRuleContext(Operator_Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitExpr(this);
		}
	}


}



class TermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BadTermContext extends TermContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	dxImageTransform() {
	    return this.getTypedRuleContext(DxImageTransformContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterBadTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitBadTerm(this);
		}
	}


}

css3Parser.BadTermContext = BadTermContext;

class KnownTermContext extends TermContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	ws() {
	    return this.getTypedRuleContext(WsContext,0);
	};

	percentage() {
	    return this.getTypedRuleContext(PercentageContext,0);
	};

	dimension() {
	    return this.getTypedRuleContext(DimensionContext,0);
	};

	String_() {
	    return this.getToken(css3Parser.String_, 0);
	};

	UnicodeRange() {
	    return this.getToken(css3Parser.UnicodeRange, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	var_() {
	    return this.getTypedRuleContext(Var_Context,0);
	};

	Uri() {
	    return this.getToken(css3Parser.Uri, 0);
	};

	hexcolor() {
	    return this.getTypedRuleContext(HexcolorContext,0);
	};

	calc() {
	    return this.getTypedRuleContext(CalcContext,0);
	};

	function_() {
	    return this.getTypedRuleContext(Function_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterKnownTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitKnownTerm(this);
		}
	}


}

css3Parser.KnownTermContext = KnownTermContext;

class UnknownTermContext extends TermContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	unknownDimension() {
	    return this.getTypedRuleContext(UnknownDimensionContext,0);
	};

	ws() {
	    return this.getTypedRuleContext(WsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterUnknownTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitUnknownTerm(this);
		}
	}


}

css3Parser.UnknownTermContext = UnknownTermContext;

class Function_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_function_;
    }

	Function_() {
	    return this.getToken(css3Parser.Function_, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterFunction_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitFunction_(this);
		}
	}


}



class DxImageTransformContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_dxImageTransform;
    }

	DxImageTransform() {
	    return this.getToken(css3Parser.DxImageTransform, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterDxImageTransform(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitDxImageTransform(this);
		}
	}


}



class HexcolorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_hexcolor;
    }

	Hash() {
	    return this.getToken(css3Parser.Hash, 0);
	};

	ws() {
	    return this.getTypedRuleContext(WsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterHexcolor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitHexcolor(this);
		}
	}


}



class NumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_number;
    }

	Number() {
	    return this.getToken(css3Parser.Number, 0);
	};

	Plus() {
	    return this.getToken(css3Parser.Plus, 0);
	};

	Minus() {
	    return this.getToken(css3Parser.Minus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterNumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitNumber(this);
		}
	}


}



class PercentageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_percentage;
    }

	Percentage() {
	    return this.getToken(css3Parser.Percentage, 0);
	};

	Plus() {
	    return this.getToken(css3Parser.Plus, 0);
	};

	Minus() {
	    return this.getToken(css3Parser.Minus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterPercentage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitPercentage(this);
		}
	}


}



class DimensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_dimension;
    }

	Dimension() {
	    return this.getToken(css3Parser.Dimension, 0);
	};

	Plus() {
	    return this.getToken(css3Parser.Plus, 0);
	};

	Minus() {
	    return this.getToken(css3Parser.Minus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterDimension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitDimension(this);
		}
	}


}



class UnknownDimensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_unknownDimension;
    }

	UnknownDimension() {
	    return this.getToken(css3Parser.UnknownDimension, 0);
	};

	Plus() {
	    return this.getToken(css3Parser.Plus, 0);
	};

	Minus() {
	    return this.getToken(css3Parser.Minus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterUnknownDimension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitUnknownDimension(this);
		}
	}


}



class Any_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_any_;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	percentage() {
	    return this.getTypedRuleContext(PercentageContext,0);
	};

	dimension() {
	    return this.getTypedRuleContext(DimensionContext,0);
	};

	unknownDimension() {
	    return this.getTypedRuleContext(UnknownDimensionContext,0);
	};

	String_() {
	    return this.getToken(css3Parser.String_, 0);
	};

	Uri() {
	    return this.getToken(css3Parser.Uri, 0);
	};

	Hash() {
	    return this.getToken(css3Parser.Hash, 0);
	};

	UnicodeRange() {
	    return this.getToken(css3Parser.UnicodeRange, 0);
	};

	Includes() {
	    return this.getToken(css3Parser.Includes, 0);
	};

	DashMatch() {
	    return this.getToken(css3Parser.DashMatch, 0);
	};

	Function_() {
	    return this.getToken(css3Parser.Function_, 0);
	};

	any_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Any_Context);
	    } else {
	        return this.getTypedRuleContext(Any_Context,i);
	    }
	};

	unused = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnusedContext);
	    } else {
	        return this.getTypedRuleContext(UnusedContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterAny_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitAny_(this);
		}
	}


}



class AtRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_atRule;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class UnknownAtRuleContext extends AtRuleContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	atKeyword() {
	    return this.getTypedRuleContext(AtKeywordContext,0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	any_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Any_Context);
	    } else {
	        return this.getTypedRuleContext(Any_Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterUnknownAtRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitUnknownAtRule(this);
		}
	}


}

css3Parser.UnknownAtRuleContext = UnknownAtRuleContext;

class AtKeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_atKeyword;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterAtKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitAtKeyword(this);
		}
	}


}



class UnusedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_unused;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	atKeyword() {
	    return this.getTypedRuleContext(AtKeywordContext,0);
	};

	ws() {
	    return this.getTypedRuleContext(WsContext,0);
	};

	Cdo() {
	    return this.getToken(css3Parser.Cdo, 0);
	};

	Cdc() {
	    return this.getToken(css3Parser.Cdc, 0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterUnused(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitUnused(this);
		}
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_block;
    }

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	declarationList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclarationListContext);
	    } else {
	        return this.getTypedRuleContext(DeclarationListContext,i);
	    }
	};

	nestedStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NestedStatementContext);
	    } else {
	        return this.getTypedRuleContext(NestedStatementContext,i);
	    }
	};

	any_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Any_Context);
	    } else {
	        return this.getTypedRuleContext(Any_Context,i);
	    }
	};

	block = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockContext);
	    } else {
	        return this.getTypedRuleContext(BlockContext,i);
	    }
	};

	atKeyword = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AtKeywordContext);
	    } else {
	        return this.getTypedRuleContext(AtKeywordContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitBlock(this);
		}
	}


}



class NestedStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_nestedStatement;
    }

	ruleset() {
	    return this.getTypedRuleContext(RulesetContext,0);
	};

	media() {
	    return this.getTypedRuleContext(MediaContext,0);
	};

	page() {
	    return this.getTypedRuleContext(PageContext,0);
	};

	fontFaceRule() {
	    return this.getTypedRuleContext(FontFaceRuleContext,0);
	};

	keyframesRule() {
	    return this.getTypedRuleContext(KeyframesRuleContext,0);
	};

	supportsRule() {
	    return this.getTypedRuleContext(SupportsRuleContext,0);
	};

	viewport() {
	    return this.getTypedRuleContext(ViewportContext,0);
	};

	counterStyle() {
	    return this.getTypedRuleContext(CounterStyleContext,0);
	};

	fontFeatureValuesRule() {
	    return this.getTypedRuleContext(FontFeatureValuesRuleContext,0);
	};

	atRule() {
	    return this.getTypedRuleContext(AtRuleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterNestedStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitNestedStatement(this);
		}
	}


}



class GroupRuleBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_groupRuleBody;
    }

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	nestedStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NestedStatementContext);
	    } else {
	        return this.getTypedRuleContext(NestedStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterGroupRuleBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitGroupRuleBody(this);
		}
	}


}



class SupportsRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_supportsRule;
    }

	Supports() {
	    return this.getToken(css3Parser.Supports, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	supportsCondition() {
	    return this.getTypedRuleContext(SupportsConditionContext,0);
	};

	groupRuleBody() {
	    return this.getTypedRuleContext(GroupRuleBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterSupportsRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitSupportsRule(this);
		}
	}


}



class SupportsConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_supportsCondition;
    }

	supportsNegation() {
	    return this.getTypedRuleContext(SupportsNegationContext,0);
	};

	supportsConjunction() {
	    return this.getTypedRuleContext(SupportsConjunctionContext,0);
	};

	supportsDisjunction() {
	    return this.getTypedRuleContext(SupportsDisjunctionContext,0);
	};

	supportsConditionInParens() {
	    return this.getTypedRuleContext(SupportsConditionInParensContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterSupportsCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitSupportsCondition(this);
		}
	}


}



class SupportsConditionInParensContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_supportsConditionInParens;
    }

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	supportsCondition() {
	    return this.getTypedRuleContext(SupportsConditionContext,0);
	};

	supportsDeclarationCondition() {
	    return this.getTypedRuleContext(SupportsDeclarationConditionContext,0);
	};

	generalEnclosed() {
	    return this.getTypedRuleContext(GeneralEnclosedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterSupportsConditionInParens(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitSupportsConditionInParens(this);
		}
	}


}



class SupportsNegationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_supportsNegation;
    }

	Not() {
	    return this.getToken(css3Parser.Not, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	Space() {
	    return this.getToken(css3Parser.Space, 0);
	};

	supportsConditionInParens() {
	    return this.getTypedRuleContext(SupportsConditionInParensContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterSupportsNegation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitSupportsNegation(this);
		}
	}


}



class SupportsConjunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_supportsConjunction;
    }

	supportsConditionInParens = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SupportsConditionInParensContext);
	    } else {
	        return this.getTypedRuleContext(SupportsConditionInParensContext,i);
	    }
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	Space = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.Space);
	    } else {
	        return this.getToken(css3Parser.Space, i);
	    }
	};


	And = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.And);
	    } else {
	        return this.getToken(css3Parser.And, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterSupportsConjunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitSupportsConjunction(this);
		}
	}


}



class SupportsDisjunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_supportsDisjunction;
    }

	supportsConditionInParens = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SupportsConditionInParensContext);
	    } else {
	        return this.getTypedRuleContext(SupportsConditionInParensContext,i);
	    }
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	Space = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.Space);
	    } else {
	        return this.getToken(css3Parser.Space, i);
	    }
	};


	Or = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.Or);
	    } else {
	        return this.getToken(css3Parser.Or, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterSupportsDisjunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitSupportsDisjunction(this);
		}
	}


}



class SupportsDeclarationConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_supportsDeclarationCondition;
    }

	ws() {
	    return this.getTypedRuleContext(WsContext,0);
	};

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterSupportsDeclarationCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitSupportsDeclarationCondition(this);
		}
	}


}



class GeneralEnclosedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_generalEnclosed;
    }

	Function_() {
	    return this.getToken(css3Parser.Function_, 0);
	};

	any_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Any_Context);
	    } else {
	        return this.getTypedRuleContext(Any_Context,i);
	    }
	};

	unused = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnusedContext);
	    } else {
	        return this.getTypedRuleContext(UnusedContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterGeneralEnclosed(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitGeneralEnclosed(this);
		}
	}


}



class Var_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_var_;
    }

	Var() {
	    return this.getToken(css3Parser.Var, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	Variable() {
	    return this.getToken(css3Parser.Variable, 0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterVar_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitVar_(this);
		}
	}


}



class CalcContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_calc;
    }

	Calc() {
	    return this.getToken(css3Parser.Calc, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	calcSum() {
	    return this.getTypedRuleContext(CalcSumContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterCalc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitCalc(this);
		}
	}


}



class CalcSumContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_calcSum;
    }

	calcProduct = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CalcProductContext);
	    } else {
	        return this.getTypedRuleContext(CalcProductContext,i);
	    }
	};

	Space = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.Space);
	    } else {
	        return this.getToken(css3Parser.Space, i);
	    }
	};


	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	Plus = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.Plus);
	    } else {
	        return this.getToken(css3Parser.Plus, i);
	    }
	};


	Minus = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.Minus);
	    } else {
	        return this.getToken(css3Parser.Minus, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterCalcSum(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitCalcSum(this);
		}
	}


}



class CalcProductContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_calcProduct;
    }

	calcValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CalcValueContext);
	    } else {
	        return this.getTypedRuleContext(CalcValueContext,i);
	    }
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	number = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumberContext);
	    } else {
	        return this.getTypedRuleContext(NumberContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterCalcProduct(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitCalcProduct(this);
		}
	}


}



class CalcValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_calcValue;
    }

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	dimension() {
	    return this.getTypedRuleContext(DimensionContext,0);
	};

	unknownDimension() {
	    return this.getTypedRuleContext(UnknownDimensionContext,0);
	};

	percentage() {
	    return this.getTypedRuleContext(PercentageContext,0);
	};

	calcSum() {
	    return this.getTypedRuleContext(CalcSumContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterCalcValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitCalcValue(this);
		}
	}


}



class FontFaceRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_fontFaceRule;
    }

	FontFace() {
	    return this.getToken(css3Parser.FontFace, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	fontFaceDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FontFaceDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(FontFaceDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterFontFaceRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitFontFaceRule(this);
		}
	}


}



class FontFaceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_fontFaceDeclaration;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class KnownFontFaceDeclarationContext extends FontFaceDeclarationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	property_() {
	    return this.getTypedRuleContext(Property_Context,0);
	};

	ws() {
	    return this.getTypedRuleContext(WsContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterKnownFontFaceDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitKnownFontFaceDeclaration(this);
		}
	}


}

css3Parser.KnownFontFaceDeclarationContext = KnownFontFaceDeclarationContext;

class UnknownFontFaceDeclarationContext extends FontFaceDeclarationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	property_() {
	    return this.getTypedRuleContext(Property_Context,0);
	};

	ws() {
	    return this.getTypedRuleContext(WsContext,0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterUnknownFontFaceDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitUnknownFontFaceDeclaration(this);
		}
	}


}

css3Parser.UnknownFontFaceDeclarationContext = UnknownFontFaceDeclarationContext;

class KeyframesRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_keyframesRule;
    }

	Keyframes() {
	    return this.getToken(css3Parser.Keyframes, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	Space() {
	    return this.getToken(css3Parser.Space, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	keyframesBlocks() {
	    return this.getTypedRuleContext(KeyframesBlocksContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterKeyframesRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitKeyframesRule(this);
		}
	}


}



class KeyframesBlocksContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_keyframesBlocks;
    }

	keyframeSelector = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KeyframeSelectorContext);
	    } else {
	        return this.getTypedRuleContext(KeyframeSelectorContext,i);
	    }
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	declarationList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclarationListContext);
	    } else {
	        return this.getTypedRuleContext(DeclarationListContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterKeyframesBlocks(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitKeyframesBlocks(this);
		}
	}


}



class KeyframeSelectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_keyframeSelector;
    }

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	From = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.From);
	    } else {
	        return this.getToken(css3Parser.From, i);
	    }
	};


	To = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.To);
	    } else {
	        return this.getToken(css3Parser.To, i);
	    }
	};


	Percentage = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.Percentage);
	    } else {
	        return this.getToken(css3Parser.Percentage, i);
	    }
	};


	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.Comma);
	    } else {
	        return this.getToken(css3Parser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterKeyframeSelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitKeyframeSelector(this);
		}
	}


}



class ViewportContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_viewport;
    }

	Viewport() {
	    return this.getToken(css3Parser.Viewport, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	declarationList() {
	    return this.getTypedRuleContext(DeclarationListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterViewport(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitViewport(this);
		}
	}


}



class CounterStyleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_counterStyle;
    }

	CounterStyle() {
	    return this.getToken(css3Parser.CounterStyle, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	declarationList() {
	    return this.getTypedRuleContext(DeclarationListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterCounterStyle(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitCounterStyle(this);
		}
	}


}



class FontFeatureValuesRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_fontFeatureValuesRule;
    }

	FontFeatureValues() {
	    return this.getToken(css3Parser.FontFeatureValues, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	fontFamilyNameList() {
	    return this.getTypedRuleContext(FontFamilyNameListContext,0);
	};

	featureValueBlock = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FeatureValueBlockContext);
	    } else {
	        return this.getTypedRuleContext(FeatureValueBlockContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterFontFeatureValuesRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitFontFeatureValuesRule(this);
		}
	}


}



class FontFamilyNameListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_fontFamilyNameList;
    }

	fontFamilyName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FontFamilyNameContext);
	    } else {
	        return this.getTypedRuleContext(FontFamilyNameContext,i);
	    }
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.Comma);
	    } else {
	        return this.getToken(css3Parser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterFontFamilyNameList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitFontFamilyNameList(this);
		}
	}


}



class FontFamilyNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_fontFamilyName;
    }

	String_() {
	    return this.getToken(css3Parser.String_, 0);
	};

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterFontFamilyName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitFontFamilyName(this);
		}
	}


}



class FeatureValueBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_featureValueBlock;
    }

	featureType() {
	    return this.getTypedRuleContext(FeatureTypeContext,0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	featureValueDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FeatureValueDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(FeatureValueDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterFeatureValueBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitFeatureValueBlock(this);
		}
	}


}



class FeatureTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_featureType;
    }

	atKeyword() {
	    return this.getTypedRuleContext(AtKeywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterFeatureType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitFeatureType(this);
		}
	}


}



class FeatureValueDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_featureValueDefinition;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	number = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumberContext);
	    } else {
	        return this.getTypedRuleContext(NumberContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterFeatureValueDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitFeatureValueDefinition(this);
		}
	}


}



class IdentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_ident;
    }

	Ident() {
	    return this.getToken(css3Parser.Ident, 0);
	};

	MediaOnly() {
	    return this.getToken(css3Parser.MediaOnly, 0);
	};

	Not() {
	    return this.getToken(css3Parser.Not, 0);
	};

	And() {
	    return this.getToken(css3Parser.And, 0);
	};

	Or() {
	    return this.getToken(css3Parser.Or, 0);
	};

	From() {
	    return this.getToken(css3Parser.From, 0);
	};

	To() {
	    return this.getToken(css3Parser.To, 0);
	};

	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterIdent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitIdent(this);
		}
	}


}



class WsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = css3Parser.RULE_ws;
    }

	Comment = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.Comment);
	    } else {
	        return this.getToken(css3Parser.Comment, i);
	    }
	};


	Space = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(css3Parser.Space);
	    } else {
	        return this.getToken(css3Parser.Space, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.enterWs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof css3Listener ) {
	        listener.exitWs(this);
		}
	}


}




css3Parser.StylesheetContext = StylesheetContext; 
css3Parser.CharsetContext = CharsetContext; 
css3Parser.ImportsContext = ImportsContext; 
css3Parser.Namespace_Context = Namespace_Context; 
css3Parser.NamespacePrefixContext = NamespacePrefixContext; 
css3Parser.MediaContext = MediaContext; 
css3Parser.MediaQueryListContext = MediaQueryListContext; 
css3Parser.MediaQueryContext = MediaQueryContext; 
css3Parser.MediaTypeContext = MediaTypeContext; 
css3Parser.MediaExpressionContext = MediaExpressionContext; 
css3Parser.MediaFeatureContext = MediaFeatureContext; 
css3Parser.PageContext = PageContext; 
css3Parser.PseudoPageContext = PseudoPageContext; 
css3Parser.SelectorGroupContext = SelectorGroupContext; 
css3Parser.SelectorContext = SelectorContext; 
css3Parser.CombinatorContext = CombinatorContext; 
css3Parser.SimpleSelectorSequenceContext = SimpleSelectorSequenceContext; 
css3Parser.TypeSelectorContext = TypeSelectorContext; 
css3Parser.TypeNamespacePrefixContext = TypeNamespacePrefixContext; 
css3Parser.ElementNameContext = ElementNameContext; 
css3Parser.UniversalContext = UniversalContext; 
css3Parser.ClassNameContext = ClassNameContext; 
css3Parser.AttribContext = AttribContext; 
css3Parser.PseudoContext = PseudoContext; 
css3Parser.FunctionalPseudoContext = FunctionalPseudoContext; 
css3Parser.ExpressionContext = ExpressionContext; 
css3Parser.NegationContext = NegationContext; 
css3Parser.NegationArgContext = NegationArgContext; 
css3Parser.Operator_Context = Operator_Context; 
css3Parser.Property_Context = Property_Context; 
css3Parser.RulesetContext = RulesetContext; 
css3Parser.DeclarationListContext = DeclarationListContext; 
css3Parser.DeclarationContext = DeclarationContext; 
css3Parser.PrioContext = PrioContext; 
css3Parser.ValueContext = ValueContext; 
css3Parser.ExprContext = ExprContext; 
css3Parser.TermContext = TermContext; 
css3Parser.Function_Context = Function_Context; 
css3Parser.DxImageTransformContext = DxImageTransformContext; 
css3Parser.HexcolorContext = HexcolorContext; 
css3Parser.NumberContext = NumberContext; 
css3Parser.PercentageContext = PercentageContext; 
css3Parser.DimensionContext = DimensionContext; 
css3Parser.UnknownDimensionContext = UnknownDimensionContext; 
css3Parser.Any_Context = Any_Context; 
css3Parser.AtRuleContext = AtRuleContext; 
css3Parser.AtKeywordContext = AtKeywordContext; 
css3Parser.UnusedContext = UnusedContext; 
css3Parser.BlockContext = BlockContext; 
css3Parser.NestedStatementContext = NestedStatementContext; 
css3Parser.GroupRuleBodyContext = GroupRuleBodyContext; 
css3Parser.SupportsRuleContext = SupportsRuleContext; 
css3Parser.SupportsConditionContext = SupportsConditionContext; 
css3Parser.SupportsConditionInParensContext = SupportsConditionInParensContext; 
css3Parser.SupportsNegationContext = SupportsNegationContext; 
css3Parser.SupportsConjunctionContext = SupportsConjunctionContext; 
css3Parser.SupportsDisjunctionContext = SupportsDisjunctionContext; 
css3Parser.SupportsDeclarationConditionContext = SupportsDeclarationConditionContext; 
css3Parser.GeneralEnclosedContext = GeneralEnclosedContext; 
css3Parser.Var_Context = Var_Context; 
css3Parser.CalcContext = CalcContext; 
css3Parser.CalcSumContext = CalcSumContext; 
css3Parser.CalcProductContext = CalcProductContext; 
css3Parser.CalcValueContext = CalcValueContext; 
css3Parser.FontFaceRuleContext = FontFaceRuleContext; 
css3Parser.FontFaceDeclarationContext = FontFaceDeclarationContext; 
css3Parser.KeyframesRuleContext = KeyframesRuleContext; 
css3Parser.KeyframesBlocksContext = KeyframesBlocksContext; 
css3Parser.KeyframeSelectorContext = KeyframeSelectorContext; 
css3Parser.ViewportContext = ViewportContext; 
css3Parser.CounterStyleContext = CounterStyleContext; 
css3Parser.FontFeatureValuesRuleContext = FontFeatureValuesRuleContext; 
css3Parser.FontFamilyNameListContext = FontFamilyNameListContext; 
css3Parser.FontFamilyNameContext = FontFamilyNameContext; 
css3Parser.FeatureValueBlockContext = FeatureValueBlockContext; 
css3Parser.FeatureTypeContext = FeatureTypeContext; 
css3Parser.FeatureValueDefinitionContext = FeatureValueDefinitionContext; 
css3Parser.IdentContext = IdentContext; 
css3Parser.WsContext = WsContext; 
