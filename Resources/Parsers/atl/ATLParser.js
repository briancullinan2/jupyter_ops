// Generated from ./atl/ATL.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import ATLListener from './ATLListener.js';
const serializedATN = [4,1,87,1021,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,1,0,1,0,1,0,3,0,190,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,201,8,
1,10,1,12,1,204,9,1,1,1,5,1,207,8,1,10,1,12,1,210,9,1,1,2,1,2,1,2,5,2,215,
8,2,10,2,12,2,218,9,2,1,3,1,3,1,3,5,3,223,8,3,10,3,12,3,226,9,3,1,4,1,4,
1,5,1,5,1,5,1,5,5,5,234,8,5,10,5,12,5,237,9,5,1,5,5,5,240,8,5,10,5,12,5,
243,9,5,1,6,1,6,1,6,1,6,1,6,1,6,5,6,251,8,6,10,6,12,6,254,9,6,1,6,5,6,257,
8,6,10,6,12,6,260,9,6,1,7,1,7,1,7,1,7,1,8,1,8,3,8,268,8,8,1,9,1,9,1,9,1,
9,1,10,3,10,275,8,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,3,12,286,
8,12,1,13,1,13,1,13,1,13,1,13,5,13,293,8,13,10,13,12,13,296,9,13,3,13,298,
8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,
15,1,15,1,15,1,16,1,16,3,16,318,8,16,1,17,1,17,3,17,322,8,17,1,18,3,18,325,
8,18,1,18,1,18,3,18,329,8,18,1,18,3,18,332,8,18,1,18,1,18,1,18,1,18,3,18,
338,8,18,1,18,1,18,1,18,1,18,1,18,5,18,345,8,18,10,18,12,18,348,9,18,1,18,
3,18,351,8,18,1,18,3,18,354,8,18,1,18,3,18,357,8,18,1,18,1,18,1,19,1,19,
1,19,1,19,1,19,1,19,1,19,1,20,3,20,369,8,20,1,20,3,20,372,8,20,1,20,1,20,
1,20,1,20,1,20,1,20,5,20,380,8,20,10,20,12,20,383,9,20,3,20,385,8,20,1,20,
1,20,1,20,1,20,1,20,5,20,392,8,20,10,20,12,20,395,9,20,1,20,3,20,398,8,20,
1,20,3,20,401,8,20,1,20,3,20,404,8,20,1,20,1,20,1,21,1,21,1,21,1,21,5,21,
412,8,21,10,21,12,21,415,9,21,1,21,1,21,1,21,1,21,3,21,421,8,21,1,22,1,22,
1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,432,8,23,10,23,12,23,435,9,23,3,
23,437,8,23,1,24,1,24,1,24,1,24,5,24,443,8,24,10,24,12,24,446,9,24,1,25,
1,25,3,25,450,8,25,1,26,1,26,1,26,1,26,1,26,3,26,457,8,26,1,26,1,26,3,26,
461,8,26,1,26,1,26,1,26,1,26,5,26,467,8,26,10,26,12,26,470,9,26,3,26,472,
8,26,1,26,3,26,475,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
1,27,1,27,3,27,489,8,27,1,27,1,27,1,27,1,27,5,27,495,8,27,10,27,12,27,498,
9,27,3,27,500,8,27,1,27,3,27,503,8,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,
5,29,512,8,29,10,29,12,29,515,9,29,1,29,1,29,1,30,1,30,1,30,1,30,3,30,523,
8,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,
33,1,33,5,33,540,8,33,10,33,12,33,543,9,33,1,33,3,33,546,8,33,1,33,1,33,
1,33,1,33,5,33,552,8,33,10,33,12,33,555,9,33,1,33,3,33,558,8,33,3,33,560,
8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,5,34,570,8,34,10,34,12,34,573,
9,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,3,37,587,
8,37,1,38,1,38,1,38,1,38,1,38,5,38,594,8,38,10,38,12,38,597,9,38,1,38,1,
38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,5,39,608,8,39,10,39,12,39,611,9,39,
1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,5,40,624,8,40,10,
40,12,40,627,9,40,3,40,629,8,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,5,41,
638,8,41,10,41,12,41,641,9,41,3,41,643,8,41,1,41,1,41,1,42,1,42,1,43,1,43,
1,44,1,44,1,45,1,45,1,45,3,45,656,8,45,1,46,1,46,3,46,660,8,46,1,47,1,47,
1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,
52,1,52,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,
1,56,1,56,1,56,1,57,1,57,1,57,1,57,3,57,700,8,57,1,58,1,58,1,58,1,58,1,58,
5,58,707,8,58,10,58,12,58,710,9,58,3,58,712,8,58,1,58,1,58,1,59,1,59,1,59,
1,59,1,59,5,59,721,8,59,10,59,12,59,724,9,59,3,59,726,8,59,1,59,1,59,1,60,
1,60,1,60,1,60,1,60,5,60,735,8,60,10,60,12,60,738,9,60,3,60,740,8,60,1,60,
1,60,1,61,1,61,1,61,1,61,1,61,5,61,749,8,61,10,61,12,61,752,9,61,3,61,754,
8,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,5,62,763,8,62,10,62,12,62,766,9,
62,3,62,768,8,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,
1,64,1,64,5,64,783,8,64,10,64,12,64,786,9,64,3,64,788,8,64,1,64,1,64,1,65,
1,65,1,65,3,65,795,8,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
3,66,807,8,66,1,67,1,67,1,68,1,68,1,68,1,68,1,68,5,68,816,8,68,10,68,12,
68,819,9,68,3,68,821,8,68,1,68,1,68,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,
70,1,70,1,70,1,70,1,71,1,71,1,71,3,71,839,8,71,1,72,1,72,3,72,843,8,72,1,
73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,77,1,77,1,77,3,77,858,
8,77,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,
80,1,80,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,3,82,884,8,82,1,82,
1,82,1,82,1,82,3,82,890,8,82,5,82,892,8,82,10,82,12,82,895,9,82,1,83,1,83,
1,83,1,83,1,83,3,83,902,8,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
5,84,913,8,84,10,84,12,84,916,9,84,1,85,1,85,1,85,1,85,1,85,5,85,923,8,85,
10,85,12,85,926,9,85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,
86,1,86,1,86,5,86,941,8,86,10,86,12,86,944,9,86,1,87,1,87,1,87,1,87,1,87,
1,87,1,87,1,87,1,87,5,87,955,8,87,10,87,12,87,958,9,87,1,88,3,88,961,8,88,
1,88,3,88,964,8,88,1,88,3,88,967,8,88,1,88,1,88,1,88,1,88,3,88,973,8,88,
1,88,1,88,1,88,1,88,1,88,5,88,980,8,88,10,88,12,88,983,9,88,1,88,3,88,986,
8,88,1,88,3,88,989,8,88,1,88,3,88,992,8,88,1,88,1,88,1,89,1,89,1,90,1,90,
1,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,
92,1,92,1,92,1,92,1,92,3,92,1019,8,92,1,92,0,0,93,0,2,4,6,8,10,12,14,16,
18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
184,0,3,2,0,81,81,84,84,1,0,5,6,1,0,41,42,1067,0,189,1,0,0,0,2,191,1,0,0,
0,4,211,1,0,0,0,6,219,1,0,0,0,8,227,1,0,0,0,10,229,1,0,0,0,12,244,1,0,0,
0,14,261,1,0,0,0,16,267,1,0,0,0,18,269,1,0,0,0,20,274,1,0,0,0,22,280,1,0,
0,0,24,285,1,0,0,0,26,287,1,0,0,0,28,305,1,0,0,0,30,309,1,0,0,0,32,317,1,
0,0,0,34,321,1,0,0,0,36,324,1,0,0,0,38,360,1,0,0,0,40,368,1,0,0,0,42,407,
1,0,0,0,44,422,1,0,0,0,46,424,1,0,0,0,48,438,1,0,0,0,50,449,1,0,0,0,52,451,
1,0,0,0,54,476,1,0,0,0,56,504,1,0,0,0,58,508,1,0,0,0,60,522,1,0,0,0,62,524,
1,0,0,0,64,529,1,0,0,0,66,532,1,0,0,0,68,561,1,0,0,0,70,576,1,0,0,0,72,580,
1,0,0,0,74,586,1,0,0,0,76,588,1,0,0,0,78,602,1,0,0,0,80,618,1,0,0,0,82,632,
1,0,0,0,84,646,1,0,0,0,86,648,1,0,0,0,88,650,1,0,0,0,90,655,1,0,0,0,92,659,
1,0,0,0,94,661,1,0,0,0,96,663,1,0,0,0,98,665,1,0,0,0,100,667,1,0,0,0,102,
669,1,0,0,0,104,677,1,0,0,0,106,679,1,0,0,0,108,681,1,0,0,0,110,686,1,0,
0,0,112,692,1,0,0,0,114,699,1,0,0,0,116,701,1,0,0,0,118,715,1,0,0,0,120,
729,1,0,0,0,122,743,1,0,0,0,124,757,1,0,0,0,126,771,1,0,0,0,128,777,1,0,
0,0,130,791,1,0,0,0,132,806,1,0,0,0,134,808,1,0,0,0,136,810,1,0,0,0,138,
824,1,0,0,0,140,828,1,0,0,0,142,838,1,0,0,0,144,842,1,0,0,0,146,844,1,0,
0,0,148,846,1,0,0,0,150,848,1,0,0,0,152,850,1,0,0,0,154,857,1,0,0,0,156,
859,1,0,0,0,158,864,1,0,0,0,160,869,1,0,0,0,162,874,1,0,0,0,164,879,1,0,
0,0,166,901,1,0,0,0,168,903,1,0,0,0,170,917,1,0,0,0,172,927,1,0,0,0,174,
945,1,0,0,0,176,960,1,0,0,0,178,995,1,0,0,0,180,997,1,0,0,0,182,999,1,0,
0,0,184,1018,1,0,0,0,186,190,3,2,1,0,187,190,3,10,5,0,188,190,3,12,6,0,189,
186,1,0,0,0,189,187,1,0,0,0,189,188,1,0,0,0,190,1,1,0,0,0,191,192,5,1,0,
0,192,193,7,0,0,0,193,194,5,2,0,0,194,195,5,3,0,0,195,196,3,4,2,0,196,197,
3,8,4,0,197,198,3,6,3,0,198,202,5,2,0,0,199,201,3,14,7,0,200,199,1,0,0,0,
201,204,1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,208,1,0,0,0,204,202,
1,0,0,0,205,207,3,16,8,0,206,205,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,
208,209,1,0,0,0,209,3,1,0,0,0,210,208,1,0,0,0,211,216,3,70,35,0,212,213,
5,4,0,0,213,215,3,70,35,0,214,212,1,0,0,0,215,218,1,0,0,0,216,214,1,0,0,
0,216,217,1,0,0,0,217,5,1,0,0,0,218,216,1,0,0,0,219,224,3,70,35,0,220,221,
5,4,0,0,221,223,3,70,35,0,222,220,1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,
0,224,225,1,0,0,0,225,7,1,0,0,0,226,224,1,0,0,0,227,228,7,1,0,0,228,9,1,
0,0,0,229,230,5,7,0,0,230,231,7,0,0,0,231,235,5,2,0,0,232,234,3,14,7,0,233,
232,1,0,0,0,234,237,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,241,1,0,
0,0,237,235,1,0,0,0,238,240,3,18,9,0,239,238,1,0,0,0,240,243,1,0,0,0,241,
239,1,0,0,0,241,242,1,0,0,0,242,11,1,0,0,0,243,241,1,0,0,0,244,245,5,8,0,
0,245,246,7,0,0,0,246,247,5,9,0,0,247,248,3,74,37,0,248,252,5,2,0,0,249,
251,3,14,7,0,250,249,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,252,253,1,0,
0,0,253,258,1,0,0,0,254,252,1,0,0,0,255,257,3,18,9,0,256,255,1,0,0,0,257,
260,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,13,1,0,0,0,260,258,1,0,0,
0,261,262,5,10,0,0,262,263,5,81,0,0,263,264,5,2,0,0,264,15,1,0,0,0,265,268,
3,18,9,0,266,268,3,32,16,0,267,265,1,0,0,0,267,266,1,0,0,0,268,17,1,0,0,
0,269,270,5,11,0,0,270,271,3,20,10,0,271,272,5,2,0,0,272,19,1,0,0,0,273,
275,3,22,11,0,274,273,1,0,0,0,274,275,1,0,0,0,275,276,1,0,0,0,276,277,5,
12,0,0,277,278,5,13,0,0,278,279,3,24,12,0,279,21,1,0,0,0,280,281,5,14,0,
0,281,282,3,132,66,0,282,23,1,0,0,0,283,286,3,26,13,0,284,286,3,30,15,0,
285,283,1,0,0,0,285,284,1,0,0,0,286,25,1,0,0,0,287,288,5,84,0,0,288,297,
5,15,0,0,289,294,3,28,14,0,290,291,5,4,0,0,291,293,3,28,14,0,292,290,1,0,
0,0,293,296,1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,298,1,0,0,0,296,
294,1,0,0,0,297,289,1,0,0,0,297,298,1,0,0,0,298,299,1,0,0,0,299,300,5,16,
0,0,300,301,5,13,0,0,301,302,3,132,66,0,302,303,5,9,0,0,303,304,3,74,37,
0,304,27,1,0,0,0,305,306,5,84,0,0,306,307,5,13,0,0,307,308,3,132,66,0,308,
29,1,0,0,0,309,310,5,84,0,0,310,311,5,13,0,0,311,312,3,132,66,0,312,313,
5,9,0,0,313,314,3,74,37,0,314,31,1,0,0,0,315,318,3,40,20,0,316,318,3,34,
17,0,317,315,1,0,0,0,317,316,1,0,0,0,318,33,1,0,0,0,319,322,3,36,18,0,320,
322,3,176,88,0,321,319,1,0,0,0,321,320,1,0,0,0,322,35,1,0,0,0,323,325,5,
17,0,0,324,323,1,0,0,0,324,325,1,0,0,0,325,326,1,0,0,0,326,328,5,18,0,0,
327,329,5,19,0,0,328,327,1,0,0,0,328,329,1,0,0,0,329,331,1,0,0,0,330,332,
5,5,0,0,331,330,1,0,0,0,331,332,1,0,0,0,332,333,1,0,0,0,333,334,5,20,0,0,
334,337,5,84,0,0,335,336,5,21,0,0,336,338,5,84,0,0,337,335,1,0,0,0,337,338,
1,0,0,0,338,339,1,0,0,0,339,340,5,22,0,0,340,350,3,42,21,0,341,342,5,23,
0,0,342,346,5,22,0,0,343,345,3,38,19,0,344,343,1,0,0,0,345,348,1,0,0,0,346,
344,1,0,0,0,346,347,1,0,0,0,347,349,1,0,0,0,348,346,1,0,0,0,349,351,5,24,
0,0,350,341,1,0,0,0,350,351,1,0,0,0,351,353,1,0,0,0,352,354,3,48,24,0,353,
352,1,0,0,0,353,354,1,0,0,0,354,356,1,0,0,0,355,357,3,58,29,0,356,355,1,
0,0,0,356,357,1,0,0,0,357,358,1,0,0,0,358,359,5,24,0,0,359,37,1,0,0,0,360,
361,5,84,0,0,361,362,5,13,0,0,362,363,3,132,66,0,363,364,5,9,0,0,364,365,
3,74,37,0,365,366,5,2,0,0,366,39,1,0,0,0,367,369,5,25,0,0,368,367,1,0,0,
0,368,369,1,0,0,0,369,371,1,0,0,0,370,372,5,26,0,0,371,370,1,0,0,0,371,372,
1,0,0,0,372,373,1,0,0,0,373,374,5,20,0,0,374,375,5,84,0,0,375,384,5,15,0,
0,376,381,3,28,14,0,377,378,5,4,0,0,378,380,3,28,14,0,379,377,1,0,0,0,380,
383,1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,385,1,0,0,0,383,381,1,0,
0,0,384,376,1,0,0,0,384,385,1,0,0,0,385,386,1,0,0,0,386,387,5,16,0,0,387,
397,5,22,0,0,388,389,5,23,0,0,389,393,5,22,0,0,390,392,3,38,19,0,391,390,
1,0,0,0,392,395,1,0,0,0,393,391,1,0,0,0,393,394,1,0,0,0,394,396,1,0,0,0,
395,393,1,0,0,0,396,398,5,24,0,0,397,388,1,0,0,0,397,398,1,0,0,0,398,400,
1,0,0,0,399,401,3,48,24,0,400,399,1,0,0,0,400,401,1,0,0,0,401,403,1,0,0,
0,402,404,3,58,29,0,403,402,1,0,0,0,403,404,1,0,0,0,404,405,1,0,0,0,405,
406,5,24,0,0,406,41,1,0,0,0,407,408,5,6,0,0,408,413,3,44,22,0,409,410,5,
4,0,0,410,412,3,44,22,0,411,409,1,0,0,0,412,415,1,0,0,0,413,411,1,0,0,0,
413,414,1,0,0,0,414,420,1,0,0,0,415,413,1,0,0,0,416,417,5,15,0,0,417,418,
3,74,37,0,418,419,5,16,0,0,419,421,1,0,0,0,420,416,1,0,0,0,420,421,1,0,0,
0,421,43,1,0,0,0,422,423,3,46,23,0,423,45,1,0,0,0,424,425,5,84,0,0,425,426,
5,13,0,0,426,436,3,132,66,0,427,428,5,27,0,0,428,433,5,84,0,0,429,430,5,
4,0,0,430,432,5,84,0,0,431,429,1,0,0,0,432,435,1,0,0,0,433,431,1,0,0,0,433,
434,1,0,0,0,434,437,1,0,0,0,435,433,1,0,0,0,436,427,1,0,0,0,436,437,1,0,
0,0,437,47,1,0,0,0,438,439,5,28,0,0,439,444,3,50,25,0,440,441,5,4,0,0,441,
443,3,50,25,0,442,440,1,0,0,0,443,446,1,0,0,0,444,442,1,0,0,0,444,445,1,
0,0,0,445,49,1,0,0,0,446,444,1,0,0,0,447,450,3,52,26,0,448,450,3,54,27,0,
449,447,1,0,0,0,449,448,1,0,0,0,450,51,1,0,0,0,451,452,5,84,0,0,452,453,
5,13,0,0,453,456,3,132,66,0,454,455,5,27,0,0,455,457,5,84,0,0,456,454,1,
0,0,0,456,457,1,0,0,0,457,460,1,0,0,0,458,459,5,29,0,0,459,461,5,84,0,0,
460,458,1,0,0,0,460,461,1,0,0,0,461,474,1,0,0,0,462,471,5,15,0,0,463,468,
3,56,28,0,464,465,5,4,0,0,465,467,3,56,28,0,466,464,1,0,0,0,467,470,1,0,
0,0,468,466,1,0,0,0,468,469,1,0,0,0,469,472,1,0,0,0,470,468,1,0,0,0,471,
463,1,0,0,0,471,472,1,0,0,0,472,473,1,0,0,0,473,475,5,16,0,0,474,462,1,0,
0,0,474,475,1,0,0,0,475,53,1,0,0,0,476,477,5,84,0,0,477,478,5,13,0,0,478,
479,5,30,0,0,479,480,3,132,66,0,480,481,5,31,0,0,481,482,5,15,0,0,482,483,
3,86,43,0,483,484,5,27,0,0,484,485,3,74,37,0,485,488,5,16,0,0,486,487,5,
29,0,0,487,489,5,84,0,0,488,486,1,0,0,0,488,489,1,0,0,0,489,502,1,0,0,0,
490,499,5,15,0,0,491,496,3,56,28,0,492,493,5,4,0,0,493,495,3,56,28,0,494,
492,1,0,0,0,495,498,1,0,0,0,496,494,1,0,0,0,496,497,1,0,0,0,497,500,1,0,
0,0,498,496,1,0,0,0,499,491,1,0,0,0,499,500,1,0,0,0,500,501,1,0,0,0,501,
503,5,16,0,0,502,490,1,0,0,0,502,503,1,0,0,0,503,55,1,0,0,0,504,505,5,84,
0,0,505,506,5,32,0,0,506,507,3,74,37,0,507,57,1,0,0,0,508,509,5,33,0,0,509,
513,5,22,0,0,510,512,3,60,30,0,511,510,1,0,0,0,512,515,1,0,0,0,513,511,1,
0,0,0,513,514,1,0,0,0,514,516,1,0,0,0,515,513,1,0,0,0,516,517,5,24,0,0,517,
59,1,0,0,0,518,523,3,66,33,0,519,523,3,64,32,0,520,523,3,62,31,0,521,523,
3,68,34,0,522,518,1,0,0,0,522,519,1,0,0,0,522,520,1,0,0,0,522,521,1,0,0,
0,523,61,1,0,0,0,524,525,3,74,37,0,525,526,5,32,0,0,526,527,3,74,37,0,527,
528,5,2,0,0,528,63,1,0,0,0,529,530,3,74,37,0,530,531,5,2,0,0,531,65,1,0,
0,0,532,533,5,34,0,0,533,534,5,15,0,0,534,535,3,74,37,0,535,545,5,16,0,0,
536,546,3,60,30,0,537,541,5,22,0,0,538,540,3,60,30,0,539,538,1,0,0,0,540,
543,1,0,0,0,541,539,1,0,0,0,541,542,1,0,0,0,542,544,1,0,0,0,543,541,1,0,
0,0,544,546,5,24,0,0,545,536,1,0,0,0,545,537,1,0,0,0,546,559,1,0,0,0,547,
557,5,35,0,0,548,558,3,60,30,0,549,553,5,22,0,0,550,552,3,60,30,0,551,550,
1,0,0,0,552,555,1,0,0,0,553,551,1,0,0,0,553,554,1,0,0,0,554,556,1,0,0,0,
555,553,1,0,0,0,556,558,5,24,0,0,557,548,1,0,0,0,557,549,1,0,0,0,558,560,
1,0,0,0,559,547,1,0,0,0,559,560,1,0,0,0,560,67,1,0,0,0,561,562,5,36,0,0,
562,563,5,15,0,0,563,564,3,86,43,0,564,565,5,27,0,0,565,566,3,74,37,0,566,
567,5,16,0,0,567,571,5,22,0,0,568,570,3,60,30,0,569,568,1,0,0,0,570,573,
1,0,0,0,571,569,1,0,0,0,571,572,1,0,0,0,572,574,1,0,0,0,573,571,1,0,0,0,
574,575,5,24,0,0,575,69,1,0,0,0,576,577,5,84,0,0,577,578,5,13,0,0,578,579,
5,84,0,0,579,71,1,0,0,0,580,581,5,84,0,0,581,582,5,37,0,0,582,583,7,0,0,
0,583,73,1,0,0,0,584,587,3,174,87,0,585,587,3,108,54,0,586,584,1,0,0,0,586,
585,1,0,0,0,587,75,1,0,0,0,588,589,5,84,0,0,589,590,5,15,0,0,590,595,3,86,
43,0,591,592,5,4,0,0,592,594,3,86,43,0,593,591,1,0,0,0,594,597,1,0,0,0,595,
593,1,0,0,0,595,596,1,0,0,0,596,598,1,0,0,0,597,595,1,0,0,0,598,599,5,38,
0,0,599,600,3,74,37,0,600,601,5,16,0,0,601,77,1,0,0,0,602,603,5,39,0,0,603,
604,5,15,0,0,604,609,3,86,43,0,605,606,5,4,0,0,606,608,3,86,43,0,607,605,
1,0,0,0,608,611,1,0,0,0,609,607,1,0,0,0,609,610,1,0,0,0,610,612,1,0,0,0,
611,609,1,0,0,0,612,613,5,2,0,0,613,614,3,110,55,0,614,615,5,38,0,0,615,
616,3,74,37,0,616,617,5,16,0,0,617,79,1,0,0,0,618,619,5,84,0,0,619,628,5,
15,0,0,620,625,3,74,37,0,621,622,5,4,0,0,622,624,3,74,37,0,623,621,1,0,0,
0,624,627,1,0,0,0,625,623,1,0,0,0,625,626,1,0,0,0,626,629,1,0,0,0,627,625,
1,0,0,0,628,620,1,0,0,0,628,629,1,0,0,0,629,630,1,0,0,0,630,631,5,16,0,0,
631,81,1,0,0,0,632,633,5,84,0,0,633,642,5,15,0,0,634,639,3,74,37,0,635,636,
5,4,0,0,636,638,3,74,37,0,637,635,1,0,0,0,638,641,1,0,0,0,639,637,1,0,0,
0,639,640,1,0,0,0,640,643,1,0,0,0,641,639,1,0,0,0,642,634,1,0,0,0,642,643,
1,0,0,0,643,644,1,0,0,0,644,645,5,16,0,0,645,83,1,0,0,0,646,647,5,84,0,0,
647,85,1,0,0,0,648,649,5,84,0,0,649,87,1,0,0,0,650,651,5,40,0,0,651,89,1,
0,0,0,652,656,3,92,46,0,653,656,3,94,47,0,654,656,3,100,50,0,655,652,1,0,
0,0,655,653,1,0,0,0,655,654,1,0,0,0,656,91,1,0,0,0,657,660,3,96,48,0,658,
660,3,98,49,0,659,657,1,0,0,0,659,658,1,0,0,0,660,93,1,0,0,0,661,662,7,2,
0,0,662,95,1,0,0,0,663,664,5,82,0,0,664,97,1,0,0,0,665,666,5,83,0,0,666,
99,1,0,0,0,667,668,5,81,0,0,668,101,1,0,0,0,669,670,5,34,0,0,670,671,3,74,
37,0,671,672,5,43,0,0,672,673,3,74,37,0,673,674,5,35,0,0,674,675,3,74,37,
0,675,676,5,44,0,0,676,103,1,0,0,0,677,678,5,84,0,0,678,105,1,0,0,0,679,
680,5,45,0,0,680,107,1,0,0,0,681,682,5,46,0,0,682,683,3,110,55,0,683,684,
5,27,0,0,684,685,3,74,37,0,685,109,1,0,0,0,686,687,5,84,0,0,687,688,5,13,
0,0,688,689,3,132,66,0,689,690,5,9,0,0,690,691,3,74,37,0,691,111,1,0,0,0,
692,693,5,47,0,0,693,694,5,84,0,0,694,113,1,0,0,0,695,700,3,116,58,0,696,
700,3,118,59,0,697,700,3,120,60,0,698,700,3,122,61,0,699,695,1,0,0,0,699,
696,1,0,0,0,699,697,1,0,0,0,699,698,1,0,0,0,700,115,1,0,0,0,701,702,5,48,
0,0,702,711,5,22,0,0,703,708,3,74,37,0,704,705,5,4,0,0,705,707,3,74,37,0,
706,704,1,0,0,0,707,710,1,0,0,0,708,706,1,0,0,0,708,709,1,0,0,0,709,712,
1,0,0,0,710,708,1,0,0,0,711,703,1,0,0,0,711,712,1,0,0,0,712,713,1,0,0,0,
713,714,5,24,0,0,714,117,1,0,0,0,715,716,5,49,0,0,716,725,5,22,0,0,717,722,
3,74,37,0,718,719,5,4,0,0,719,721,3,74,37,0,720,718,1,0,0,0,721,724,1,0,
0,0,722,720,1,0,0,0,722,723,1,0,0,0,723,726,1,0,0,0,724,722,1,0,0,0,725,
717,1,0,0,0,725,726,1,0,0,0,726,727,1,0,0,0,727,728,5,24,0,0,728,119,1,0,
0,0,729,730,5,50,0,0,730,739,5,22,0,0,731,736,3,74,37,0,732,733,5,4,0,0,
733,735,3,74,37,0,734,732,1,0,0,0,735,738,1,0,0,0,736,734,1,0,0,0,736,737,
1,0,0,0,737,740,1,0,0,0,738,736,1,0,0,0,739,731,1,0,0,0,739,740,1,0,0,0,
740,741,1,0,0,0,741,742,5,24,0,0,742,121,1,0,0,0,743,744,5,51,0,0,744,753,
5,22,0,0,745,750,3,74,37,0,746,747,5,4,0,0,747,749,3,74,37,0,748,746,1,0,
0,0,749,752,1,0,0,0,750,748,1,0,0,0,750,751,1,0,0,0,751,754,1,0,0,0,752,
750,1,0,0,0,753,745,1,0,0,0,753,754,1,0,0,0,754,755,1,0,0,0,755,756,5,24,
0,0,756,123,1,0,0,0,757,758,5,52,0,0,758,767,5,22,0,0,759,764,3,126,63,0,
760,761,5,4,0,0,761,763,3,126,63,0,762,760,1,0,0,0,763,766,1,0,0,0,764,762,
1,0,0,0,764,765,1,0,0,0,765,768,1,0,0,0,766,764,1,0,0,0,767,759,1,0,0,0,
767,768,1,0,0,0,768,769,1,0,0,0,769,770,5,24,0,0,770,125,1,0,0,0,771,772,
5,15,0,0,772,773,3,74,37,0,773,774,5,4,0,0,774,775,3,74,37,0,775,776,5,16,
0,0,776,127,1,0,0,0,777,778,5,53,0,0,778,787,5,22,0,0,779,784,3,130,65,0,
780,781,5,4,0,0,781,783,3,130,65,0,782,780,1,0,0,0,783,786,1,0,0,0,784,782,
1,0,0,0,784,785,1,0,0,0,785,788,1,0,0,0,786,784,1,0,0,0,787,779,1,0,0,0,
787,788,1,0,0,0,788,789,1,0,0,0,789,790,5,24,0,0,790,129,1,0,0,0,791,794,
5,84,0,0,792,793,5,13,0,0,793,795,3,132,66,0,794,792,1,0,0,0,794,795,1,0,
0,0,795,796,1,0,0,0,796,797,5,9,0,0,797,798,3,74,37,0,798,131,1,0,0,0,799,
807,3,72,36,0,800,807,3,134,67,0,801,807,3,136,68,0,802,807,3,140,70,0,803,
807,3,142,71,0,804,807,3,154,77,0,805,807,3,178,89,0,806,799,1,0,0,0,806,
800,1,0,0,0,806,801,1,0,0,0,806,802,1,0,0,0,806,803,1,0,0,0,806,804,1,0,
0,0,806,805,1,0,0,0,807,133,1,0,0,0,808,809,3,180,90,0,809,135,1,0,0,0,810,
811,5,54,0,0,811,820,5,15,0,0,812,817,3,138,69,0,813,814,5,4,0,0,814,816,
3,138,69,0,815,813,1,0,0,0,816,819,1,0,0,0,817,815,1,0,0,0,817,818,1,0,0,
0,818,821,1,0,0,0,819,817,1,0,0,0,820,812,1,0,0,0,820,821,1,0,0,0,821,822,
1,0,0,0,822,823,5,16,0,0,823,137,1,0,0,0,824,825,5,84,0,0,825,826,5,13,0,
0,826,827,3,132,66,0,827,139,1,0,0,0,828,829,5,52,0,0,829,830,5,15,0,0,830,
831,3,132,66,0,831,832,5,4,0,0,832,833,3,132,66,0,833,834,5,16,0,0,834,141,
1,0,0,0,835,839,3,144,72,0,836,839,3,150,75,0,837,839,3,152,76,0,838,835,
1,0,0,0,838,836,1,0,0,0,838,837,1,0,0,0,839,143,1,0,0,0,840,843,3,146,73,
0,841,843,3,148,74,0,842,840,1,0,0,0,842,841,1,0,0,0,843,145,1,0,0,0,844,
845,5,55,0,0,845,147,1,0,0,0,846,847,5,56,0,0,847,149,1,0,0,0,848,849,5,
57,0,0,849,151,1,0,0,0,850,851,5,58,0,0,851,153,1,0,0,0,852,858,3,156,78,
0,853,858,3,158,79,0,854,858,3,160,80,0,855,858,3,162,81,0,856,858,3,182,
91,0,857,852,1,0,0,0,857,853,1,0,0,0,857,854,1,0,0,0,857,855,1,0,0,0,857,
856,1,0,0,0,858,155,1,0,0,0,859,860,5,48,0,0,860,861,5,15,0,0,861,862,3,
132,66,0,862,863,5,16,0,0,863,157,1,0,0,0,864,865,5,49,0,0,865,866,5,15,
0,0,866,867,3,132,66,0,867,868,5,16,0,0,868,159,1,0,0,0,869,870,5,50,0,0,
870,871,5,15,0,0,871,872,3,132,66,0,872,873,5,16,0,0,873,161,1,0,0,0,874,
875,5,51,0,0,875,876,5,15,0,0,876,877,3,132,66,0,877,878,5,16,0,0,878,163,
1,0,0,0,879,893,3,184,92,0,880,883,5,59,0,0,881,884,3,82,41,0,882,884,3,
84,42,0,883,881,1,0,0,0,883,882,1,0,0,0,884,892,1,0,0,0,885,889,5,60,0,0,
886,890,3,76,38,0,887,890,3,78,39,0,888,890,3,80,40,0,889,886,1,0,0,0,889,
887,1,0,0,0,889,888,1,0,0,0,890,892,1,0,0,0,891,880,1,0,0,0,891,885,1,0,
0,0,892,895,1,0,0,0,893,891,1,0,0,0,893,894,1,0,0,0,894,165,1,0,0,0,895,
893,1,0,0,0,896,897,5,61,0,0,897,902,3,164,82,0,898,899,5,62,0,0,899,902,
3,164,82,0,900,902,3,164,82,0,901,896,1,0,0,0,901,898,1,0,0,0,901,900,1,
0,0,0,902,167,1,0,0,0,903,914,3,166,83,0,904,905,5,63,0,0,905,913,3,166,
83,0,906,907,5,64,0,0,907,913,3,166,83,0,908,909,5,65,0,0,909,913,3,166,
83,0,910,911,5,66,0,0,911,913,3,166,83,0,912,904,1,0,0,0,912,906,1,0,0,0,
912,908,1,0,0,0,912,910,1,0,0,0,913,916,1,0,0,0,914,912,1,0,0,0,914,915,
1,0,0,0,915,169,1,0,0,0,916,914,1,0,0,0,917,924,3,168,84,0,918,919,5,67,
0,0,919,923,3,168,84,0,920,921,5,62,0,0,921,923,3,168,84,0,922,918,1,0,0,
0,922,920,1,0,0,0,923,926,1,0,0,0,924,922,1,0,0,0,924,925,1,0,0,0,925,171,
1,0,0,0,926,924,1,0,0,0,927,942,3,170,85,0,928,929,5,9,0,0,929,941,3,170,
85,0,930,931,5,68,0,0,931,941,3,170,85,0,932,933,5,69,0,0,933,941,3,170,
85,0,934,935,5,70,0,0,935,941,3,170,85,0,936,937,5,71,0,0,937,941,3,170,
85,0,938,939,5,72,0,0,939,941,3,170,85,0,940,928,1,0,0,0,940,930,1,0,0,0,
940,932,1,0,0,0,940,934,1,0,0,0,940,936,1,0,0,0,940,938,1,0,0,0,941,944,
1,0,0,0,942,940,1,0,0,0,942,943,1,0,0,0,943,173,1,0,0,0,944,942,1,0,0,0,
945,956,3,172,86,0,946,947,5,73,0,0,947,955,3,172,86,0,948,949,5,74,0,0,
949,955,3,172,86,0,950,951,5,75,0,0,951,955,3,172,86,0,952,953,5,76,0,0,
953,955,3,172,86,0,954,946,1,0,0,0,954,948,1,0,0,0,954,950,1,0,0,0,954,952,
1,0,0,0,955,958,1,0,0,0,956,954,1,0,0,0,956,957,1,0,0,0,957,175,1,0,0,0,
958,956,1,0,0,0,959,961,5,77,0,0,960,959,1,0,0,0,960,961,1,0,0,0,961,963,
1,0,0,0,962,964,5,19,0,0,963,962,1,0,0,0,963,964,1,0,0,0,964,966,1,0,0,0,
965,967,5,5,0,0,966,965,1,0,0,0,966,967,1,0,0,0,967,968,1,0,0,0,968,969,
5,20,0,0,969,972,5,84,0,0,970,971,5,21,0,0,971,973,5,84,0,0,972,970,1,0,
0,0,972,973,1,0,0,0,973,974,1,0,0,0,974,975,5,22,0,0,975,985,3,42,21,0,976,
977,5,23,0,0,977,981,5,22,0,0,978,980,3,38,19,0,979,978,1,0,0,0,980,983,
1,0,0,0,981,979,1,0,0,0,981,982,1,0,0,0,982,984,1,0,0,0,983,981,1,0,0,0,
984,986,5,24,0,0,985,976,1,0,0,0,985,986,1,0,0,0,986,988,1,0,0,0,987,989,
3,48,24,0,988,987,1,0,0,0,988,989,1,0,0,0,989,991,1,0,0,0,990,992,3,58,29,
0,991,990,1,0,0,0,991,992,1,0,0,0,992,993,1,0,0,0,993,994,5,24,0,0,994,177,
1,0,0,0,995,996,5,78,0,0,996,179,1,0,0,0,997,998,5,79,0,0,998,181,1,0,0,
0,999,1000,5,80,0,0,1000,1001,5,15,0,0,1001,1002,3,132,66,0,1002,1003,5,
16,0,0,1003,183,1,0,0,0,1004,1019,3,104,52,0,1005,1019,3,88,44,0,1006,1019,
3,90,45,0,1007,1019,3,102,51,0,1008,1019,3,106,53,0,1009,1019,3,112,56,0,
1010,1019,3,114,57,0,1011,1019,3,124,62,0,1012,1019,3,128,64,0,1013,1019,
3,132,66,0,1014,1015,5,15,0,0,1015,1016,3,74,37,0,1016,1017,5,16,0,0,1017,
1019,1,0,0,0,1018,1004,1,0,0,0,1018,1005,1,0,0,0,1018,1006,1,0,0,0,1018,
1007,1,0,0,0,1018,1008,1,0,0,0,1018,1009,1,0,0,0,1018,1010,1,0,0,0,1018,
1011,1,0,0,0,1018,1012,1,0,0,0,1018,1013,1,0,0,0,1018,1014,1,0,0,0,1019,
185,1,0,0,0,106,189,202,208,216,224,235,241,252,258,267,274,285,294,297,
317,321,324,328,331,337,346,350,353,356,368,371,381,384,393,397,400,403,
413,420,433,436,444,449,456,460,468,471,474,488,496,499,502,513,522,541,
545,553,557,559,571,586,595,609,625,628,639,642,655,659,699,708,711,722,
725,736,739,750,753,764,767,784,787,794,806,817,820,838,842,857,883,889,
891,893,901,912,914,922,924,940,942,954,956,960,963,966,972,981,985,988,
991,1018];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class ATLParser extends antlr4.Parser {

    static grammarFileName = "ATL.g4";
    static literalNames = [ null, "'module'", "';'", "'create'", "','", 
                            "'refining'", "'from'", "'library'", "'query'", 
                            "'='", "'uses'", "'helper'", "'def'", "':'", 
                            "'context'", "'('", "')'", "'unique'", "'lazy'", 
                            "'abstract'", "'rule'", "'extends'", "'{'", 
                            "'using'", "'}'", "'entrypoint'", "'endpoint'", 
                            "'in'", "'to'", "'mapsTo'", "'distinct'", "'foreach'", 
                            "'<-'", "'do'", "'if'", "'else'", "'for'", "'!'", 
                            "'|'", "'iterate'", "'OclUndefined'", "'true'", 
                            "'false'", "'then'", "'endif'", "'super'", "'let'", 
                            "'#'", "'Bag'", "'Set'", "'OrderedSet'", "'Sequence'", 
                            "'Map'", "'Tuple'", "'TupleType'", "'Integer'", 
                            "'Real'", "'Boolean'", "'String'", "'.'", "'->'", 
                            "'not'", "'-'", "'*'", "'/'", "'div'", "'mod'", 
                            "'+'", "'>'", "'<'", "'>='", "'<='", "'<>'", 
                            "'and'", "'or'", "'xor'", "'implies'", "'nodefault'", 
                            "'OclType'", "'OclAny'", "'Collection'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, "STRING", "INTEGER", "FLOAT", "IDENTIFIER", 
                             "WS", "COMMENT", "LINE_COMMENT" ];
    static ruleNames = [ "unit", "module", "targetModelPattern", "sourceModelPattern", 
                         "transformationMode", "library_", "query", "libraryRef", 
                         "moduleElement", "helper", "oclFeatureDefinition", 
                         "oclContextDefinition", "oclFeature", "operation", 
                         "parameter", "attribute", "arule", "matchedRule", 
                         "lazyMatchedRule", "ruleVariableDeclaration", "calledRule", 
                         "inPattern", "inPatternElement", "simpleInPatternElement", 
                         "outPattern", "outPatternElement", "simpleOutPatternElement", 
                         "forEachOutPatternElement", "binding", "actionBlock", 
                         "statement", "bindingStat", "expressionStat", "ifStat", 
                         "forStat", "oclModel", "oclModelElement", "oclExpression", 
                         "iteratorExp", "iterateExp", "collectionOperationCallExp", 
                         "operationCallExp", "navigationOrAttributeCallExp", 
                         "iterator", "oclUndefinedExp", "primitiveExp", 
                         "numericExp", "booleanExp", "integerExp", "realExp", 
                         "stringExp", "ifExp", "variableExp", "superExp", 
                         "letExp", "variableDeclaration", "enumLiteralExp", 
                         "collectionExp", "bagExp", "setExp", "orderedSetExp", 
                         "sequenceExp", "mapExp", "mapElement", "tupleExp", 
                         "tuplePart", "oclType", "oclAnyType", "tupleType", 
                         "tupleTypeAttribute", "mapType", "primitive", "numericType", 
                         "integerType", "realType", "booleanType", "stringType", 
                         "collectionType", "bagType", "setType", "orderedSetType", 
                         "sequenceType", "priority_0", "priority_1", "priority_2", 
                         "priority_3", "priority_4", "priority_5", "matchedRule_abstractContents", 
                         "oclType_abstractContents", "oclAnyType_abstractContents", 
                         "collectionType_abstractContents", "primary_oclExpression" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = ATLParser.ruleNames;
        this.literalNames = ATLParser.literalNames;
        this.symbolicNames = ATLParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	unit() {
	    let localctx = new UnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, ATLParser.RULE_unit);
	    try {
	        this.state = 189;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ATLParser.T__0:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 186;
	            this.module();
	            break;
	        case ATLParser.T__6:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 187;
	            this.library_();
	            break;
	        case ATLParser.T__7:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 188;
	            this.query();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	module() {
	    let localctx = new ModuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, ATLParser.RULE_module);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 191;
	        this.match(ATLParser.T__0);
	        this.state = 192;
	        _la = this._input.LA(1);
	        if(!(_la===ATLParser.STRING || _la===ATLParser.IDENTIFIER)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 193;
	        this.match(ATLParser.T__1);
	        this.state = 194;
	        this.match(ATLParser.T__2);
	        this.state = 195;
	        this.targetModelPattern();
	        this.state = 196;
	        this.transformationMode();
	        this.state = 197;
	        this.sourceModelPattern();
	        this.state = 198;
	        this.match(ATLParser.T__1);
	        this.state = 202;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ATLParser.T__9) {
	            this.state = 199;
	            this.libraryRef();
	            this.state = 204;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 208;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ATLParser.T__4) | (1 << ATLParser.T__10) | (1 << ATLParser.T__16) | (1 << ATLParser.T__17) | (1 << ATLParser.T__18) | (1 << ATLParser.T__19) | (1 << ATLParser.T__24) | (1 << ATLParser.T__25))) !== 0) || _la===ATLParser.T__76) {
	            this.state = 205;
	            this.moduleElement();
	            this.state = 210;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	targetModelPattern() {
	    let localctx = new TargetModelPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, ATLParser.RULE_targetModelPattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 211;
	        this.oclModel();
	        this.state = 216;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ATLParser.T__3) {
	            this.state = 212;
	            this.match(ATLParser.T__3);
	            this.state = 213;
	            this.oclModel();
	            this.state = 218;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceModelPattern() {
	    let localctx = new SourceModelPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, ATLParser.RULE_sourceModelPattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 219;
	        this.oclModel();
	        this.state = 224;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ATLParser.T__3) {
	            this.state = 220;
	            this.match(ATLParser.T__3);
	            this.state = 221;
	            this.oclModel();
	            this.state = 226;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transformationMode() {
	    let localctx = new TransformationModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, ATLParser.RULE_transformationMode);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 227;
	        _la = this._input.LA(1);
	        if(!(_la===ATLParser.T__4 || _la===ATLParser.T__5)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	library_() {
	    let localctx = new Library_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, ATLParser.RULE_library_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 229;
	        this.match(ATLParser.T__6);
	        this.state = 230;
	        _la = this._input.LA(1);
	        if(!(_la===ATLParser.STRING || _la===ATLParser.IDENTIFIER)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 231;
	        this.match(ATLParser.T__1);
	        this.state = 235;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ATLParser.T__9) {
	            this.state = 232;
	            this.libraryRef();
	            this.state = 237;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 241;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ATLParser.T__10) {
	            this.state = 238;
	            this.helper();
	            this.state = 243;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	query() {
	    let localctx = new QueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, ATLParser.RULE_query);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 244;
	        this.match(ATLParser.T__7);
	        this.state = 245;
	        _la = this._input.LA(1);
	        if(!(_la===ATLParser.STRING || _la===ATLParser.IDENTIFIER)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 246;
	        this.match(ATLParser.T__8);
	        this.state = 247;
	        this.oclExpression();
	        this.state = 248;
	        this.match(ATLParser.T__1);
	        this.state = 252;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ATLParser.T__9) {
	            this.state = 249;
	            this.libraryRef();
	            this.state = 254;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 258;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ATLParser.T__10) {
	            this.state = 255;
	            this.helper();
	            this.state = 260;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryRef() {
	    let localctx = new LibraryRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, ATLParser.RULE_libraryRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 261;
	        this.match(ATLParser.T__9);
	        this.state = 262;
	        this.match(ATLParser.STRING);
	        this.state = 263;
	        this.match(ATLParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleElement() {
	    let localctx = new ModuleElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, ATLParser.RULE_moduleElement);
	    try {
	        this.state = 267;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ATLParser.T__10:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 265;
	            this.helper();
	            break;
	        case ATLParser.T__4:
	        case ATLParser.T__16:
	        case ATLParser.T__17:
	        case ATLParser.T__18:
	        case ATLParser.T__19:
	        case ATLParser.T__24:
	        case ATLParser.T__25:
	        case ATLParser.T__76:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 266;
	            this.arule();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	helper() {
	    let localctx = new HelperContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, ATLParser.RULE_helper);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 269;
	        this.match(ATLParser.T__10);
	        this.state = 270;
	        this.oclFeatureDefinition();
	        this.state = 271;
	        this.match(ATLParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oclFeatureDefinition() {
	    let localctx = new OclFeatureDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, ATLParser.RULE_oclFeatureDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 274;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__13) {
	            this.state = 273;
	            this.oclContextDefinition();
	        }

	        this.state = 276;
	        this.match(ATLParser.T__11);
	        this.state = 277;
	        this.match(ATLParser.T__12);
	        this.state = 278;
	        this.oclFeature();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oclContextDefinition() {
	    let localctx = new OclContextDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, ATLParser.RULE_oclContextDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 280;
	        this.match(ATLParser.T__13);
	        this.state = 281;
	        this.oclType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oclFeature() {
	    let localctx = new OclFeatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, ATLParser.RULE_oclFeature);
	    try {
	        this.state = 285;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 283;
	            this.operation();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 284;
	            this.attribute();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operation() {
	    let localctx = new OperationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, ATLParser.RULE_operation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 287;
	        this.match(ATLParser.IDENTIFIER);
	        this.state = 288;
	        this.match(ATLParser.T__14);
	        this.state = 297;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.IDENTIFIER) {
	            this.state = 289;
	            this.parameter();
	            this.state = 294;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ATLParser.T__3) {
	                this.state = 290;
	                this.match(ATLParser.T__3);
	                this.state = 291;
	                this.parameter();
	                this.state = 296;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 299;
	        this.match(ATLParser.T__15);
	        this.state = 300;
	        this.match(ATLParser.T__12);
	        this.state = 301;
	        this.oclType();
	        this.state = 302;
	        this.match(ATLParser.T__8);
	        this.state = 303;
	        this.oclExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameter() {
	    let localctx = new ParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, ATLParser.RULE_parameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 305;
	        this.match(ATLParser.IDENTIFIER);
	        this.state = 306;
	        this.match(ATLParser.T__12);
	        this.state = 307;
	        this.oclType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute() {
	    let localctx = new AttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, ATLParser.RULE_attribute);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 309;
	        this.match(ATLParser.IDENTIFIER);
	        this.state = 310;
	        this.match(ATLParser.T__12);
	        this.state = 311;
	        this.oclType();
	        this.state = 312;
	        this.match(ATLParser.T__8);
	        this.state = 313;
	        this.oclExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arule() {
	    let localctx = new AruleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, ATLParser.RULE_arule);
	    try {
	        this.state = 317;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 315;
	            this.calledRule();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 316;
	            this.matchedRule();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchedRule() {
	    let localctx = new MatchedRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, ATLParser.RULE_matchedRule);
	    try {
	        this.state = 321;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ATLParser.T__16:
	        case ATLParser.T__17:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 319;
	            this.lazyMatchedRule();
	            break;
	        case ATLParser.T__4:
	        case ATLParser.T__18:
	        case ATLParser.T__19:
	        case ATLParser.T__76:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 320;
	            this.matchedRule_abstractContents();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lazyMatchedRule() {
	    let localctx = new LazyMatchedRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, ATLParser.RULE_lazyMatchedRule);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 324;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__16) {
	            this.state = 323;
	            this.match(ATLParser.T__16);
	        }

	        this.state = 326;
	        this.match(ATLParser.T__17);
	        this.state = 328;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__18) {
	            this.state = 327;
	            this.match(ATLParser.T__18);
	        }

	        this.state = 331;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__4) {
	            this.state = 330;
	            this.match(ATLParser.T__4);
	        }

	        this.state = 333;
	        this.match(ATLParser.T__19);
	        this.state = 334;
	        this.match(ATLParser.IDENTIFIER);
	        this.state = 337;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__20) {
	            this.state = 335;
	            this.match(ATLParser.T__20);
	            this.state = 336;
	            this.match(ATLParser.IDENTIFIER);
	        }

	        this.state = 339;
	        this.match(ATLParser.T__21);
	        this.state = 340;
	        this.inPattern();
	        this.state = 350;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__22) {
	            this.state = 341;
	            this.match(ATLParser.T__22);
	            this.state = 342;
	            this.match(ATLParser.T__21);
	            this.state = 346;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ATLParser.IDENTIFIER) {
	                this.state = 343;
	                this.ruleVariableDeclaration();
	                this.state = 348;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 349;
	            this.match(ATLParser.T__23);
	        }

	        this.state = 353;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__27) {
	            this.state = 352;
	            this.outPattern();
	        }

	        this.state = 356;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__32) {
	            this.state = 355;
	            this.actionBlock();
	        }

	        this.state = 358;
	        this.match(ATLParser.T__23);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ruleVariableDeclaration() {
	    let localctx = new RuleVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, ATLParser.RULE_ruleVariableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 360;
	        this.match(ATLParser.IDENTIFIER);
	        this.state = 361;
	        this.match(ATLParser.T__12);
	        this.state = 362;
	        this.oclType();
	        this.state = 363;
	        this.match(ATLParser.T__8);
	        this.state = 364;
	        this.oclExpression();
	        this.state = 365;
	        this.match(ATLParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	calledRule() {
	    let localctx = new CalledRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, ATLParser.RULE_calledRule);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 368;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__24) {
	            this.state = 367;
	            this.match(ATLParser.T__24);
	        }

	        this.state = 371;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__25) {
	            this.state = 370;
	            this.match(ATLParser.T__25);
	        }

	        this.state = 373;
	        this.match(ATLParser.T__19);
	        this.state = 374;
	        this.match(ATLParser.IDENTIFIER);
	        this.state = 375;
	        this.match(ATLParser.T__14);
	        this.state = 384;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.IDENTIFIER) {
	            this.state = 376;
	            this.parameter();
	            this.state = 381;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ATLParser.T__3) {
	                this.state = 377;
	                this.match(ATLParser.T__3);
	                this.state = 378;
	                this.parameter();
	                this.state = 383;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 386;
	        this.match(ATLParser.T__15);
	        this.state = 387;
	        this.match(ATLParser.T__21);
	        this.state = 397;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__22) {
	            this.state = 388;
	            this.match(ATLParser.T__22);
	            this.state = 389;
	            this.match(ATLParser.T__21);
	            this.state = 393;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ATLParser.IDENTIFIER) {
	                this.state = 390;
	                this.ruleVariableDeclaration();
	                this.state = 395;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 396;
	            this.match(ATLParser.T__23);
	        }

	        this.state = 400;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__27) {
	            this.state = 399;
	            this.outPattern();
	        }

	        this.state = 403;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__32) {
	            this.state = 402;
	            this.actionBlock();
	        }

	        this.state = 405;
	        this.match(ATLParser.T__23);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inPattern() {
	    let localctx = new InPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, ATLParser.RULE_inPattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 407;
	        this.match(ATLParser.T__5);
	        this.state = 408;
	        this.inPatternElement();
	        this.state = 413;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ATLParser.T__3) {
	            this.state = 409;
	            this.match(ATLParser.T__3);
	            this.state = 410;
	            this.inPatternElement();
	            this.state = 415;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__14) {
	            this.state = 416;
	            this.match(ATLParser.T__14);
	            this.state = 417;
	            this.oclExpression();
	            this.state = 418;
	            this.match(ATLParser.T__15);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inPatternElement() {
	    let localctx = new InPatternElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, ATLParser.RULE_inPatternElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 422;
	        this.simpleInPatternElement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleInPatternElement() {
	    let localctx = new SimpleInPatternElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, ATLParser.RULE_simpleInPatternElement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 424;
	        this.match(ATLParser.IDENTIFIER);
	        this.state = 425;
	        this.match(ATLParser.T__12);
	        this.state = 426;
	        this.oclType();
	        this.state = 436;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__26) {
	            this.state = 427;
	            this.match(ATLParser.T__26);
	            this.state = 428;
	            this.match(ATLParser.IDENTIFIER);
	            this.state = 433;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,34,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 429;
	                    this.match(ATLParser.T__3);
	                    this.state = 430;
	                    this.match(ATLParser.IDENTIFIER); 
	                }
	                this.state = 435;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,34,this._ctx);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	outPattern() {
	    let localctx = new OutPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, ATLParser.RULE_outPattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 438;
	        this.match(ATLParser.T__27);
	        this.state = 439;
	        this.outPatternElement();
	        this.state = 444;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ATLParser.T__3) {
	            this.state = 440;
	            this.match(ATLParser.T__3);
	            this.state = 441;
	            this.outPatternElement();
	            this.state = 446;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	outPatternElement() {
	    let localctx = new OutPatternElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, ATLParser.RULE_outPatternElement);
	    try {
	        this.state = 449;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 447;
	            this.simpleOutPatternElement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 448;
	            this.forEachOutPatternElement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleOutPatternElement() {
	    let localctx = new SimpleOutPatternElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, ATLParser.RULE_simpleOutPatternElement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 451;
	        this.match(ATLParser.IDENTIFIER);
	        this.state = 452;
	        this.match(ATLParser.T__12);
	        this.state = 453;
	        this.oclType();
	        this.state = 456;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__26) {
	            this.state = 454;
	            this.match(ATLParser.T__26);
	            this.state = 455;
	            this.match(ATLParser.IDENTIFIER);
	        }

	        this.state = 460;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__28) {
	            this.state = 458;
	            this.match(ATLParser.T__28);
	            this.state = 459;
	            this.match(ATLParser.IDENTIFIER);
	        }

	        this.state = 474;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__14) {
	            this.state = 462;
	            this.match(ATLParser.T__14);
	            this.state = 471;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ATLParser.IDENTIFIER) {
	                this.state = 463;
	                this.binding();
	                this.state = 468;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===ATLParser.T__3) {
	                    this.state = 464;
	                    this.match(ATLParser.T__3);
	                    this.state = 465;
	                    this.binding();
	                    this.state = 470;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 473;
	            this.match(ATLParser.T__15);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forEachOutPatternElement() {
	    let localctx = new ForEachOutPatternElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, ATLParser.RULE_forEachOutPatternElement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 476;
	        this.match(ATLParser.IDENTIFIER);
	        this.state = 477;
	        this.match(ATLParser.T__12);
	        this.state = 478;
	        this.match(ATLParser.T__29);
	        this.state = 479;
	        this.oclType();
	        this.state = 480;
	        this.match(ATLParser.T__30);
	        this.state = 481;
	        this.match(ATLParser.T__14);
	        this.state = 482;
	        this.iterator();
	        this.state = 483;
	        this.match(ATLParser.T__26);
	        this.state = 484;
	        this.oclExpression();
	        this.state = 485;
	        this.match(ATLParser.T__15);
	        this.state = 488;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__28) {
	            this.state = 486;
	            this.match(ATLParser.T__28);
	            this.state = 487;
	            this.match(ATLParser.IDENTIFIER);
	        }

	        this.state = 502;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__14) {
	            this.state = 490;
	            this.match(ATLParser.T__14);
	            this.state = 499;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ATLParser.IDENTIFIER) {
	                this.state = 491;
	                this.binding();
	                this.state = 496;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===ATLParser.T__3) {
	                    this.state = 492;
	                    this.match(ATLParser.T__3);
	                    this.state = 493;
	                    this.binding();
	                    this.state = 498;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 501;
	            this.match(ATLParser.T__15);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binding() {
	    let localctx = new BindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, ATLParser.RULE_binding);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 504;
	        this.match(ATLParser.IDENTIFIER);
	        this.state = 505;
	        this.match(ATLParser.T__31);
	        this.state = 506;
	        this.oclExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	actionBlock() {
	    let localctx = new ActionBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, ATLParser.RULE_actionBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 508;
	        this.match(ATLParser.T__32);
	        this.state = 509;
	        this.match(ATLParser.T__21);
	        this.state = 513;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ATLParser.T__14 || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ATLParser.T__33 - 34)) | (1 << (ATLParser.T__35 - 34)) | (1 << (ATLParser.T__39 - 34)) | (1 << (ATLParser.T__40 - 34)) | (1 << (ATLParser.T__41 - 34)) | (1 << (ATLParser.T__44 - 34)) | (1 << (ATLParser.T__45 - 34)) | (1 << (ATLParser.T__46 - 34)) | (1 << (ATLParser.T__47 - 34)) | (1 << (ATLParser.T__48 - 34)) | (1 << (ATLParser.T__49 - 34)) | (1 << (ATLParser.T__50 - 34)) | (1 << (ATLParser.T__51 - 34)) | (1 << (ATLParser.T__52 - 34)) | (1 << (ATLParser.T__53 - 34)) | (1 << (ATLParser.T__54 - 34)) | (1 << (ATLParser.T__55 - 34)) | (1 << (ATLParser.T__56 - 34)) | (1 << (ATLParser.T__57 - 34)) | (1 << (ATLParser.T__60 - 34)) | (1 << (ATLParser.T__61 - 34)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (ATLParser.T__77 - 78)) | (1 << (ATLParser.T__78 - 78)) | (1 << (ATLParser.T__79 - 78)) | (1 << (ATLParser.STRING - 78)) | (1 << (ATLParser.INTEGER - 78)) | (1 << (ATLParser.FLOAT - 78)) | (1 << (ATLParser.IDENTIFIER - 78)))) !== 0)) {
	            this.state = 510;
	            this.statement();
	            this.state = 515;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 516;
	        this.match(ATLParser.T__23);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, ATLParser.RULE_statement);
	    try {
	        this.state = 522;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 518;
	            this.ifStat();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 519;
	            this.expressionStat();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 520;
	            this.bindingStat();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 521;
	            this.forStat();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingStat() {
	    let localctx = new BindingStatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, ATLParser.RULE_bindingStat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 524;
	        this.oclExpression();
	        this.state = 525;
	        this.match(ATLParser.T__31);
	        this.state = 526;
	        this.oclExpression();
	        this.state = 527;
	        this.match(ATLParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStat() {
	    let localctx = new ExpressionStatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, ATLParser.RULE_expressionStat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 529;
	        this.oclExpression();
	        this.state = 530;
	        this.match(ATLParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStat() {
	    let localctx = new IfStatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, ATLParser.RULE_ifStat);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 532;
	        this.match(ATLParser.T__33);
	        this.state = 533;
	        this.match(ATLParser.T__14);
	        this.state = 534;
	        this.oclExpression();
	        this.state = 535;
	        this.match(ATLParser.T__15);
	        this.state = 545;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ATLParser.T__14:
	        case ATLParser.T__33:
	        case ATLParser.T__35:
	        case ATLParser.T__39:
	        case ATLParser.T__40:
	        case ATLParser.T__41:
	        case ATLParser.T__44:
	        case ATLParser.T__45:
	        case ATLParser.T__46:
	        case ATLParser.T__47:
	        case ATLParser.T__48:
	        case ATLParser.T__49:
	        case ATLParser.T__50:
	        case ATLParser.T__51:
	        case ATLParser.T__52:
	        case ATLParser.T__53:
	        case ATLParser.T__54:
	        case ATLParser.T__55:
	        case ATLParser.T__56:
	        case ATLParser.T__57:
	        case ATLParser.T__60:
	        case ATLParser.T__61:
	        case ATLParser.T__77:
	        case ATLParser.T__78:
	        case ATLParser.T__79:
	        case ATLParser.STRING:
	        case ATLParser.INTEGER:
	        case ATLParser.FLOAT:
	        case ATLParser.IDENTIFIER:
	            this.state = 536;
	            this.statement();
	            break;
	        case ATLParser.T__21:
	            this.state = 537;
	            this.match(ATLParser.T__21);
	            this.state = 541;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ATLParser.T__14 || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ATLParser.T__33 - 34)) | (1 << (ATLParser.T__35 - 34)) | (1 << (ATLParser.T__39 - 34)) | (1 << (ATLParser.T__40 - 34)) | (1 << (ATLParser.T__41 - 34)) | (1 << (ATLParser.T__44 - 34)) | (1 << (ATLParser.T__45 - 34)) | (1 << (ATLParser.T__46 - 34)) | (1 << (ATLParser.T__47 - 34)) | (1 << (ATLParser.T__48 - 34)) | (1 << (ATLParser.T__49 - 34)) | (1 << (ATLParser.T__50 - 34)) | (1 << (ATLParser.T__51 - 34)) | (1 << (ATLParser.T__52 - 34)) | (1 << (ATLParser.T__53 - 34)) | (1 << (ATLParser.T__54 - 34)) | (1 << (ATLParser.T__55 - 34)) | (1 << (ATLParser.T__56 - 34)) | (1 << (ATLParser.T__57 - 34)) | (1 << (ATLParser.T__60 - 34)) | (1 << (ATLParser.T__61 - 34)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (ATLParser.T__77 - 78)) | (1 << (ATLParser.T__78 - 78)) | (1 << (ATLParser.T__79 - 78)) | (1 << (ATLParser.STRING - 78)) | (1 << (ATLParser.INTEGER - 78)) | (1 << (ATLParser.FLOAT - 78)) | (1 << (ATLParser.IDENTIFIER - 78)))) !== 0)) {
	                this.state = 538;
	                this.statement();
	                this.state = 543;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 544;
	            this.match(ATLParser.T__23);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 559;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	        if(la_===1) {
	            this.state = 547;
	            this.match(ATLParser.T__34);
	            this.state = 557;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ATLParser.T__14:
	            case ATLParser.T__33:
	            case ATLParser.T__35:
	            case ATLParser.T__39:
	            case ATLParser.T__40:
	            case ATLParser.T__41:
	            case ATLParser.T__44:
	            case ATLParser.T__45:
	            case ATLParser.T__46:
	            case ATLParser.T__47:
	            case ATLParser.T__48:
	            case ATLParser.T__49:
	            case ATLParser.T__50:
	            case ATLParser.T__51:
	            case ATLParser.T__52:
	            case ATLParser.T__53:
	            case ATLParser.T__54:
	            case ATLParser.T__55:
	            case ATLParser.T__56:
	            case ATLParser.T__57:
	            case ATLParser.T__60:
	            case ATLParser.T__61:
	            case ATLParser.T__77:
	            case ATLParser.T__78:
	            case ATLParser.T__79:
	            case ATLParser.STRING:
	            case ATLParser.INTEGER:
	            case ATLParser.FLOAT:
	            case ATLParser.IDENTIFIER:
	                this.state = 548;
	                this.statement();
	                break;
	            case ATLParser.T__21:
	                this.state = 549;
	                this.match(ATLParser.T__21);
	                this.state = 553;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===ATLParser.T__14 || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ATLParser.T__33 - 34)) | (1 << (ATLParser.T__35 - 34)) | (1 << (ATLParser.T__39 - 34)) | (1 << (ATLParser.T__40 - 34)) | (1 << (ATLParser.T__41 - 34)) | (1 << (ATLParser.T__44 - 34)) | (1 << (ATLParser.T__45 - 34)) | (1 << (ATLParser.T__46 - 34)) | (1 << (ATLParser.T__47 - 34)) | (1 << (ATLParser.T__48 - 34)) | (1 << (ATLParser.T__49 - 34)) | (1 << (ATLParser.T__50 - 34)) | (1 << (ATLParser.T__51 - 34)) | (1 << (ATLParser.T__52 - 34)) | (1 << (ATLParser.T__53 - 34)) | (1 << (ATLParser.T__54 - 34)) | (1 << (ATLParser.T__55 - 34)) | (1 << (ATLParser.T__56 - 34)) | (1 << (ATLParser.T__57 - 34)) | (1 << (ATLParser.T__60 - 34)) | (1 << (ATLParser.T__61 - 34)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (ATLParser.T__77 - 78)) | (1 << (ATLParser.T__78 - 78)) | (1 << (ATLParser.T__79 - 78)) | (1 << (ATLParser.STRING - 78)) | (1 << (ATLParser.INTEGER - 78)) | (1 << (ATLParser.FLOAT - 78)) | (1 << (ATLParser.IDENTIFIER - 78)))) !== 0)) {
	                    this.state = 550;
	                    this.statement();
	                    this.state = 555;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 556;
	                this.match(ATLParser.T__23);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forStat() {
	    let localctx = new ForStatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, ATLParser.RULE_forStat);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 561;
	        this.match(ATLParser.T__35);
	        this.state = 562;
	        this.match(ATLParser.T__14);
	        this.state = 563;
	        this.iterator();
	        this.state = 564;
	        this.match(ATLParser.T__26);
	        this.state = 565;
	        this.oclExpression();
	        this.state = 566;
	        this.match(ATLParser.T__15);
	        this.state = 567;
	        this.match(ATLParser.T__21);
	        this.state = 571;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ATLParser.T__14 || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ATLParser.T__33 - 34)) | (1 << (ATLParser.T__35 - 34)) | (1 << (ATLParser.T__39 - 34)) | (1 << (ATLParser.T__40 - 34)) | (1 << (ATLParser.T__41 - 34)) | (1 << (ATLParser.T__44 - 34)) | (1 << (ATLParser.T__45 - 34)) | (1 << (ATLParser.T__46 - 34)) | (1 << (ATLParser.T__47 - 34)) | (1 << (ATLParser.T__48 - 34)) | (1 << (ATLParser.T__49 - 34)) | (1 << (ATLParser.T__50 - 34)) | (1 << (ATLParser.T__51 - 34)) | (1 << (ATLParser.T__52 - 34)) | (1 << (ATLParser.T__53 - 34)) | (1 << (ATLParser.T__54 - 34)) | (1 << (ATLParser.T__55 - 34)) | (1 << (ATLParser.T__56 - 34)) | (1 << (ATLParser.T__57 - 34)) | (1 << (ATLParser.T__60 - 34)) | (1 << (ATLParser.T__61 - 34)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (ATLParser.T__77 - 78)) | (1 << (ATLParser.T__78 - 78)) | (1 << (ATLParser.T__79 - 78)) | (1 << (ATLParser.STRING - 78)) | (1 << (ATLParser.INTEGER - 78)) | (1 << (ATLParser.FLOAT - 78)) | (1 << (ATLParser.IDENTIFIER - 78)))) !== 0)) {
	            this.state = 568;
	            this.statement();
	            this.state = 573;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 574;
	        this.match(ATLParser.T__23);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oclModel() {
	    let localctx = new OclModelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, ATLParser.RULE_oclModel);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 576;
	        this.match(ATLParser.IDENTIFIER);
	        this.state = 577;
	        this.match(ATLParser.T__12);
	        this.state = 578;
	        this.match(ATLParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oclModelElement() {
	    let localctx = new OclModelElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, ATLParser.RULE_oclModelElement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 580;
	        this.match(ATLParser.IDENTIFIER);
	        this.state = 581;
	        this.match(ATLParser.T__36);
	        this.state = 582;
	        _la = this._input.LA(1);
	        if(!(_la===ATLParser.STRING || _la===ATLParser.IDENTIFIER)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oclExpression() {
	    let localctx = new OclExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, ATLParser.RULE_oclExpression);
	    try {
	        this.state = 586;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ATLParser.T__14:
	        case ATLParser.T__33:
	        case ATLParser.T__39:
	        case ATLParser.T__40:
	        case ATLParser.T__41:
	        case ATLParser.T__44:
	        case ATLParser.T__46:
	        case ATLParser.T__47:
	        case ATLParser.T__48:
	        case ATLParser.T__49:
	        case ATLParser.T__50:
	        case ATLParser.T__51:
	        case ATLParser.T__52:
	        case ATLParser.T__53:
	        case ATLParser.T__54:
	        case ATLParser.T__55:
	        case ATLParser.T__56:
	        case ATLParser.T__57:
	        case ATLParser.T__60:
	        case ATLParser.T__61:
	        case ATLParser.T__77:
	        case ATLParser.T__78:
	        case ATLParser.T__79:
	        case ATLParser.STRING:
	        case ATLParser.INTEGER:
	        case ATLParser.FLOAT:
	        case ATLParser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 584;
	            this.priority_5();
	            break;
	        case ATLParser.T__45:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 585;
	            this.letExp();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iteratorExp() {
	    let localctx = new IteratorExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, ATLParser.RULE_iteratorExp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 588;
	        this.match(ATLParser.IDENTIFIER);
	        this.state = 589;
	        this.match(ATLParser.T__14);
	        this.state = 590;
	        this.iterator();
	        this.state = 595;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ATLParser.T__3) {
	            this.state = 591;
	            this.match(ATLParser.T__3);
	            this.state = 592;
	            this.iterator();
	            this.state = 597;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 598;
	        this.match(ATLParser.T__37);
	        this.state = 599;
	        this.oclExpression();
	        this.state = 600;
	        this.match(ATLParser.T__15);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iterateExp() {
	    let localctx = new IterateExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, ATLParser.RULE_iterateExp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 602;
	        this.match(ATLParser.T__38);
	        this.state = 603;
	        this.match(ATLParser.T__14);
	        this.state = 604;
	        this.iterator();
	        this.state = 609;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ATLParser.T__3) {
	            this.state = 605;
	            this.match(ATLParser.T__3);
	            this.state = 606;
	            this.iterator();
	            this.state = 611;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 612;
	        this.match(ATLParser.T__1);
	        this.state = 613;
	        this.variableDeclaration();
	        this.state = 614;
	        this.match(ATLParser.T__37);
	        this.state = 615;
	        this.oclExpression();
	        this.state = 616;
	        this.match(ATLParser.T__15);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collectionOperationCallExp() {
	    let localctx = new CollectionOperationCallExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, ATLParser.RULE_collectionOperationCallExp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 618;
	        this.match(ATLParser.IDENTIFIER);
	        this.state = 619;
	        this.match(ATLParser.T__14);
	        this.state = 628;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__14 || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ATLParser.T__33 - 34)) | (1 << (ATLParser.T__39 - 34)) | (1 << (ATLParser.T__40 - 34)) | (1 << (ATLParser.T__41 - 34)) | (1 << (ATLParser.T__44 - 34)) | (1 << (ATLParser.T__45 - 34)) | (1 << (ATLParser.T__46 - 34)) | (1 << (ATLParser.T__47 - 34)) | (1 << (ATLParser.T__48 - 34)) | (1 << (ATLParser.T__49 - 34)) | (1 << (ATLParser.T__50 - 34)) | (1 << (ATLParser.T__51 - 34)) | (1 << (ATLParser.T__52 - 34)) | (1 << (ATLParser.T__53 - 34)) | (1 << (ATLParser.T__54 - 34)) | (1 << (ATLParser.T__55 - 34)) | (1 << (ATLParser.T__56 - 34)) | (1 << (ATLParser.T__57 - 34)) | (1 << (ATLParser.T__60 - 34)) | (1 << (ATLParser.T__61 - 34)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (ATLParser.T__77 - 78)) | (1 << (ATLParser.T__78 - 78)) | (1 << (ATLParser.T__79 - 78)) | (1 << (ATLParser.STRING - 78)) | (1 << (ATLParser.INTEGER - 78)) | (1 << (ATLParser.FLOAT - 78)) | (1 << (ATLParser.IDENTIFIER - 78)))) !== 0)) {
	            this.state = 620;
	            this.oclExpression();
	            this.state = 625;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ATLParser.T__3) {
	                this.state = 621;
	                this.match(ATLParser.T__3);
	                this.state = 622;
	                this.oclExpression();
	                this.state = 627;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 630;
	        this.match(ATLParser.T__15);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operationCallExp() {
	    let localctx = new OperationCallExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, ATLParser.RULE_operationCallExp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 632;
	        this.match(ATLParser.IDENTIFIER);
	        this.state = 633;
	        this.match(ATLParser.T__14);
	        this.state = 642;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__14 || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ATLParser.T__33 - 34)) | (1 << (ATLParser.T__39 - 34)) | (1 << (ATLParser.T__40 - 34)) | (1 << (ATLParser.T__41 - 34)) | (1 << (ATLParser.T__44 - 34)) | (1 << (ATLParser.T__45 - 34)) | (1 << (ATLParser.T__46 - 34)) | (1 << (ATLParser.T__47 - 34)) | (1 << (ATLParser.T__48 - 34)) | (1 << (ATLParser.T__49 - 34)) | (1 << (ATLParser.T__50 - 34)) | (1 << (ATLParser.T__51 - 34)) | (1 << (ATLParser.T__52 - 34)) | (1 << (ATLParser.T__53 - 34)) | (1 << (ATLParser.T__54 - 34)) | (1 << (ATLParser.T__55 - 34)) | (1 << (ATLParser.T__56 - 34)) | (1 << (ATLParser.T__57 - 34)) | (1 << (ATLParser.T__60 - 34)) | (1 << (ATLParser.T__61 - 34)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (ATLParser.T__77 - 78)) | (1 << (ATLParser.T__78 - 78)) | (1 << (ATLParser.T__79 - 78)) | (1 << (ATLParser.STRING - 78)) | (1 << (ATLParser.INTEGER - 78)) | (1 << (ATLParser.FLOAT - 78)) | (1 << (ATLParser.IDENTIFIER - 78)))) !== 0)) {
	            this.state = 634;
	            this.oclExpression();
	            this.state = 639;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ATLParser.T__3) {
	                this.state = 635;
	                this.match(ATLParser.T__3);
	                this.state = 636;
	                this.oclExpression();
	                this.state = 641;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 644;
	        this.match(ATLParser.T__15);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	navigationOrAttributeCallExp() {
	    let localctx = new NavigationOrAttributeCallExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, ATLParser.RULE_navigationOrAttributeCallExp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 646;
	        this.match(ATLParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iterator() {
	    let localctx = new IteratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, ATLParser.RULE_iterator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 648;
	        this.match(ATLParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oclUndefinedExp() {
	    let localctx = new OclUndefinedExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, ATLParser.RULE_oclUndefinedExp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 650;
	        this.match(ATLParser.T__39);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveExp() {
	    let localctx = new PrimitiveExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, ATLParser.RULE_primitiveExp);
	    try {
	        this.state = 655;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ATLParser.INTEGER:
	        case ATLParser.FLOAT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 652;
	            this.numericExp();
	            break;
	        case ATLParser.T__40:
	        case ATLParser.T__41:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 653;
	            this.booleanExp();
	            break;
	        case ATLParser.STRING:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 654;
	            this.stringExp();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericExp() {
	    let localctx = new NumericExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, ATLParser.RULE_numericExp);
	    try {
	        this.state = 659;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ATLParser.INTEGER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 657;
	            this.integerExp();
	            break;
	        case ATLParser.FLOAT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 658;
	            this.realExp();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanExp() {
	    let localctx = new BooleanExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, ATLParser.RULE_booleanExp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 661;
	        _la = this._input.LA(1);
	        if(!(_la===ATLParser.T__40 || _la===ATLParser.T__41)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integerExp() {
	    let localctx = new IntegerExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, ATLParser.RULE_integerExp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 663;
	        this.match(ATLParser.INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	realExp() {
	    let localctx = new RealExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, ATLParser.RULE_realExp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 665;
	        this.match(ATLParser.FLOAT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringExp() {
	    let localctx = new StringExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, ATLParser.RULE_stringExp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 667;
	        this.match(ATLParser.STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifExp() {
	    let localctx = new IfExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, ATLParser.RULE_ifExp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 669;
	        this.match(ATLParser.T__33);
	        this.state = 670;
	        this.oclExpression();
	        this.state = 671;
	        this.match(ATLParser.T__42);
	        this.state = 672;
	        this.oclExpression();
	        this.state = 673;
	        this.match(ATLParser.T__34);
	        this.state = 674;
	        this.oclExpression();
	        this.state = 675;
	        this.match(ATLParser.T__43);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableExp() {
	    let localctx = new VariableExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, ATLParser.RULE_variableExp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 677;
	        this.match(ATLParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	superExp() {
	    let localctx = new SuperExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, ATLParser.RULE_superExp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 679;
	        this.match(ATLParser.T__44);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letExp() {
	    let localctx = new LetExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, ATLParser.RULE_letExp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 681;
	        this.match(ATLParser.T__45);
	        this.state = 682;
	        this.variableDeclaration();
	        this.state = 683;
	        this.match(ATLParser.T__26);
	        this.state = 684;
	        this.oclExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaration() {
	    let localctx = new VariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, ATLParser.RULE_variableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 686;
	        this.match(ATLParser.IDENTIFIER);
	        this.state = 687;
	        this.match(ATLParser.T__12);
	        this.state = 688;
	        this.oclType();
	        this.state = 689;
	        this.match(ATLParser.T__8);
	        this.state = 690;
	        this.oclExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumLiteralExp() {
	    let localctx = new EnumLiteralExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, ATLParser.RULE_enumLiteralExp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 692;
	        this.match(ATLParser.T__46);
	        this.state = 693;
	        this.match(ATLParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collectionExp() {
	    let localctx = new CollectionExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, ATLParser.RULE_collectionExp);
	    try {
	        this.state = 699;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ATLParser.T__47:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 695;
	            this.bagExp();
	            break;
	        case ATLParser.T__48:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 696;
	            this.setExp();
	            break;
	        case ATLParser.T__49:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 697;
	            this.orderedSetExp();
	            break;
	        case ATLParser.T__50:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 698;
	            this.sequenceExp();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bagExp() {
	    let localctx = new BagExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, ATLParser.RULE_bagExp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 701;
	        this.match(ATLParser.T__47);
	        this.state = 702;
	        this.match(ATLParser.T__21);
	        this.state = 711;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__14 || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ATLParser.T__33 - 34)) | (1 << (ATLParser.T__39 - 34)) | (1 << (ATLParser.T__40 - 34)) | (1 << (ATLParser.T__41 - 34)) | (1 << (ATLParser.T__44 - 34)) | (1 << (ATLParser.T__45 - 34)) | (1 << (ATLParser.T__46 - 34)) | (1 << (ATLParser.T__47 - 34)) | (1 << (ATLParser.T__48 - 34)) | (1 << (ATLParser.T__49 - 34)) | (1 << (ATLParser.T__50 - 34)) | (1 << (ATLParser.T__51 - 34)) | (1 << (ATLParser.T__52 - 34)) | (1 << (ATLParser.T__53 - 34)) | (1 << (ATLParser.T__54 - 34)) | (1 << (ATLParser.T__55 - 34)) | (1 << (ATLParser.T__56 - 34)) | (1 << (ATLParser.T__57 - 34)) | (1 << (ATLParser.T__60 - 34)) | (1 << (ATLParser.T__61 - 34)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (ATLParser.T__77 - 78)) | (1 << (ATLParser.T__78 - 78)) | (1 << (ATLParser.T__79 - 78)) | (1 << (ATLParser.STRING - 78)) | (1 << (ATLParser.INTEGER - 78)) | (1 << (ATLParser.FLOAT - 78)) | (1 << (ATLParser.IDENTIFIER - 78)))) !== 0)) {
	            this.state = 703;
	            this.oclExpression();
	            this.state = 708;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ATLParser.T__3) {
	                this.state = 704;
	                this.match(ATLParser.T__3);
	                this.state = 705;
	                this.oclExpression();
	                this.state = 710;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 713;
	        this.match(ATLParser.T__23);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setExp() {
	    let localctx = new SetExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, ATLParser.RULE_setExp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 715;
	        this.match(ATLParser.T__48);
	        this.state = 716;
	        this.match(ATLParser.T__21);
	        this.state = 725;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__14 || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ATLParser.T__33 - 34)) | (1 << (ATLParser.T__39 - 34)) | (1 << (ATLParser.T__40 - 34)) | (1 << (ATLParser.T__41 - 34)) | (1 << (ATLParser.T__44 - 34)) | (1 << (ATLParser.T__45 - 34)) | (1 << (ATLParser.T__46 - 34)) | (1 << (ATLParser.T__47 - 34)) | (1 << (ATLParser.T__48 - 34)) | (1 << (ATLParser.T__49 - 34)) | (1 << (ATLParser.T__50 - 34)) | (1 << (ATLParser.T__51 - 34)) | (1 << (ATLParser.T__52 - 34)) | (1 << (ATLParser.T__53 - 34)) | (1 << (ATLParser.T__54 - 34)) | (1 << (ATLParser.T__55 - 34)) | (1 << (ATLParser.T__56 - 34)) | (1 << (ATLParser.T__57 - 34)) | (1 << (ATLParser.T__60 - 34)) | (1 << (ATLParser.T__61 - 34)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (ATLParser.T__77 - 78)) | (1 << (ATLParser.T__78 - 78)) | (1 << (ATLParser.T__79 - 78)) | (1 << (ATLParser.STRING - 78)) | (1 << (ATLParser.INTEGER - 78)) | (1 << (ATLParser.FLOAT - 78)) | (1 << (ATLParser.IDENTIFIER - 78)))) !== 0)) {
	            this.state = 717;
	            this.oclExpression();
	            this.state = 722;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ATLParser.T__3) {
	                this.state = 718;
	                this.match(ATLParser.T__3);
	                this.state = 719;
	                this.oclExpression();
	                this.state = 724;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 727;
	        this.match(ATLParser.T__23);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderedSetExp() {
	    let localctx = new OrderedSetExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, ATLParser.RULE_orderedSetExp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 729;
	        this.match(ATLParser.T__49);
	        this.state = 730;
	        this.match(ATLParser.T__21);
	        this.state = 739;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__14 || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ATLParser.T__33 - 34)) | (1 << (ATLParser.T__39 - 34)) | (1 << (ATLParser.T__40 - 34)) | (1 << (ATLParser.T__41 - 34)) | (1 << (ATLParser.T__44 - 34)) | (1 << (ATLParser.T__45 - 34)) | (1 << (ATLParser.T__46 - 34)) | (1 << (ATLParser.T__47 - 34)) | (1 << (ATLParser.T__48 - 34)) | (1 << (ATLParser.T__49 - 34)) | (1 << (ATLParser.T__50 - 34)) | (1 << (ATLParser.T__51 - 34)) | (1 << (ATLParser.T__52 - 34)) | (1 << (ATLParser.T__53 - 34)) | (1 << (ATLParser.T__54 - 34)) | (1 << (ATLParser.T__55 - 34)) | (1 << (ATLParser.T__56 - 34)) | (1 << (ATLParser.T__57 - 34)) | (1 << (ATLParser.T__60 - 34)) | (1 << (ATLParser.T__61 - 34)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (ATLParser.T__77 - 78)) | (1 << (ATLParser.T__78 - 78)) | (1 << (ATLParser.T__79 - 78)) | (1 << (ATLParser.STRING - 78)) | (1 << (ATLParser.INTEGER - 78)) | (1 << (ATLParser.FLOAT - 78)) | (1 << (ATLParser.IDENTIFIER - 78)))) !== 0)) {
	            this.state = 731;
	            this.oclExpression();
	            this.state = 736;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ATLParser.T__3) {
	                this.state = 732;
	                this.match(ATLParser.T__3);
	                this.state = 733;
	                this.oclExpression();
	                this.state = 738;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 741;
	        this.match(ATLParser.T__23);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sequenceExp() {
	    let localctx = new SequenceExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, ATLParser.RULE_sequenceExp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 743;
	        this.match(ATLParser.T__50);
	        this.state = 744;
	        this.match(ATLParser.T__21);
	        this.state = 753;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__14 || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ATLParser.T__33 - 34)) | (1 << (ATLParser.T__39 - 34)) | (1 << (ATLParser.T__40 - 34)) | (1 << (ATLParser.T__41 - 34)) | (1 << (ATLParser.T__44 - 34)) | (1 << (ATLParser.T__45 - 34)) | (1 << (ATLParser.T__46 - 34)) | (1 << (ATLParser.T__47 - 34)) | (1 << (ATLParser.T__48 - 34)) | (1 << (ATLParser.T__49 - 34)) | (1 << (ATLParser.T__50 - 34)) | (1 << (ATLParser.T__51 - 34)) | (1 << (ATLParser.T__52 - 34)) | (1 << (ATLParser.T__53 - 34)) | (1 << (ATLParser.T__54 - 34)) | (1 << (ATLParser.T__55 - 34)) | (1 << (ATLParser.T__56 - 34)) | (1 << (ATLParser.T__57 - 34)) | (1 << (ATLParser.T__60 - 34)) | (1 << (ATLParser.T__61 - 34)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (ATLParser.T__77 - 78)) | (1 << (ATLParser.T__78 - 78)) | (1 << (ATLParser.T__79 - 78)) | (1 << (ATLParser.STRING - 78)) | (1 << (ATLParser.INTEGER - 78)) | (1 << (ATLParser.FLOAT - 78)) | (1 << (ATLParser.IDENTIFIER - 78)))) !== 0)) {
	            this.state = 745;
	            this.oclExpression();
	            this.state = 750;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ATLParser.T__3) {
	                this.state = 746;
	                this.match(ATLParser.T__3);
	                this.state = 747;
	                this.oclExpression();
	                this.state = 752;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 755;
	        this.match(ATLParser.T__23);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapExp() {
	    let localctx = new MapExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, ATLParser.RULE_mapExp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 757;
	        this.match(ATLParser.T__51);
	        this.state = 758;
	        this.match(ATLParser.T__21);
	        this.state = 767;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__14) {
	            this.state = 759;
	            this.mapElement();
	            this.state = 764;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ATLParser.T__3) {
	                this.state = 760;
	                this.match(ATLParser.T__3);
	                this.state = 761;
	                this.mapElement();
	                this.state = 766;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 769;
	        this.match(ATLParser.T__23);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapElement() {
	    let localctx = new MapElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, ATLParser.RULE_mapElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 771;
	        this.match(ATLParser.T__14);
	        this.state = 772;
	        this.oclExpression();
	        this.state = 773;
	        this.match(ATLParser.T__3);
	        this.state = 774;
	        this.oclExpression();
	        this.state = 775;
	        this.match(ATLParser.T__15);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tupleExp() {
	    let localctx = new TupleExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, ATLParser.RULE_tupleExp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 777;
	        this.match(ATLParser.T__52);
	        this.state = 778;
	        this.match(ATLParser.T__21);
	        this.state = 787;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.IDENTIFIER) {
	            this.state = 779;
	            this.tuplePart();
	            this.state = 784;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ATLParser.T__3) {
	                this.state = 780;
	                this.match(ATLParser.T__3);
	                this.state = 781;
	                this.tuplePart();
	                this.state = 786;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 789;
	        this.match(ATLParser.T__23);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tuplePart() {
	    let localctx = new TuplePartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, ATLParser.RULE_tuplePart);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 791;
	        this.match(ATLParser.IDENTIFIER);
	        this.state = 794;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__12) {
	            this.state = 792;
	            this.match(ATLParser.T__12);
	            this.state = 793;
	            this.oclType();
	        }

	        this.state = 796;
	        this.match(ATLParser.T__8);
	        this.state = 797;
	        this.oclExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oclType() {
	    let localctx = new OclTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, ATLParser.RULE_oclType);
	    try {
	        this.state = 806;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ATLParser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 799;
	            this.oclModelElement();
	            break;
	        case ATLParser.T__78:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 800;
	            this.oclAnyType();
	            break;
	        case ATLParser.T__53:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 801;
	            this.tupleType();
	            break;
	        case ATLParser.T__51:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 802;
	            this.mapType();
	            break;
	        case ATLParser.T__54:
	        case ATLParser.T__55:
	        case ATLParser.T__56:
	        case ATLParser.T__57:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 803;
	            this.primitive();
	            break;
	        case ATLParser.T__47:
	        case ATLParser.T__48:
	        case ATLParser.T__49:
	        case ATLParser.T__50:
	        case ATLParser.T__79:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 804;
	            this.collectionType();
	            break;
	        case ATLParser.T__77:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 805;
	            this.oclType_abstractContents();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oclAnyType() {
	    let localctx = new OclAnyTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, ATLParser.RULE_oclAnyType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 808;
	        this.oclAnyType_abstractContents();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tupleType() {
	    let localctx = new TupleTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, ATLParser.RULE_tupleType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 810;
	        this.match(ATLParser.T__53);
	        this.state = 811;
	        this.match(ATLParser.T__14);
	        this.state = 820;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.IDENTIFIER) {
	            this.state = 812;
	            this.tupleTypeAttribute();
	            this.state = 817;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ATLParser.T__3) {
	                this.state = 813;
	                this.match(ATLParser.T__3);
	                this.state = 814;
	                this.tupleTypeAttribute();
	                this.state = 819;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 822;
	        this.match(ATLParser.T__15);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tupleTypeAttribute() {
	    let localctx = new TupleTypeAttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, ATLParser.RULE_tupleTypeAttribute);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 824;
	        this.match(ATLParser.IDENTIFIER);
	        this.state = 825;
	        this.match(ATLParser.T__12);
	        this.state = 826;
	        this.oclType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapType() {
	    let localctx = new MapTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, ATLParser.RULE_mapType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 828;
	        this.match(ATLParser.T__51);
	        this.state = 829;
	        this.match(ATLParser.T__14);
	        this.state = 830;
	        this.oclType();
	        this.state = 831;
	        this.match(ATLParser.T__3);
	        this.state = 832;
	        this.oclType();
	        this.state = 833;
	        this.match(ATLParser.T__15);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitive() {
	    let localctx = new PrimitiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, ATLParser.RULE_primitive);
	    try {
	        this.state = 838;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ATLParser.T__54:
	        case ATLParser.T__55:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 835;
	            this.numericType();
	            break;
	        case ATLParser.T__56:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 836;
	            this.booleanType();
	            break;
	        case ATLParser.T__57:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 837;
	            this.stringType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericType() {
	    let localctx = new NumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, ATLParser.RULE_numericType);
	    try {
	        this.state = 842;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ATLParser.T__54:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 840;
	            this.integerType();
	            break;
	        case ATLParser.T__55:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 841;
	            this.realType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integerType() {
	    let localctx = new IntegerTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, ATLParser.RULE_integerType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 844;
	        this.match(ATLParser.T__54);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	realType() {
	    let localctx = new RealTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, ATLParser.RULE_realType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 846;
	        this.match(ATLParser.T__55);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanType() {
	    let localctx = new BooleanTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, ATLParser.RULE_booleanType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 848;
	        this.match(ATLParser.T__56);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringType() {
	    let localctx = new StringTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, ATLParser.RULE_stringType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 850;
	        this.match(ATLParser.T__57);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collectionType() {
	    let localctx = new CollectionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, ATLParser.RULE_collectionType);
	    try {
	        this.state = 857;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ATLParser.T__47:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 852;
	            this.bagType();
	            break;
	        case ATLParser.T__48:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 853;
	            this.setType();
	            break;
	        case ATLParser.T__49:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 854;
	            this.orderedSetType();
	            break;
	        case ATLParser.T__50:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 855;
	            this.sequenceType();
	            break;
	        case ATLParser.T__79:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 856;
	            this.collectionType_abstractContents();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bagType() {
	    let localctx = new BagTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, ATLParser.RULE_bagType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 859;
	        this.match(ATLParser.T__47);
	        this.state = 860;
	        this.match(ATLParser.T__14);
	        this.state = 861;
	        this.oclType();
	        this.state = 862;
	        this.match(ATLParser.T__15);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setType() {
	    let localctx = new SetTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, ATLParser.RULE_setType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 864;
	        this.match(ATLParser.T__48);
	        this.state = 865;
	        this.match(ATLParser.T__14);
	        this.state = 866;
	        this.oclType();
	        this.state = 867;
	        this.match(ATLParser.T__15);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderedSetType() {
	    let localctx = new OrderedSetTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, ATLParser.RULE_orderedSetType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 869;
	        this.match(ATLParser.T__49);
	        this.state = 870;
	        this.match(ATLParser.T__14);
	        this.state = 871;
	        this.oclType();
	        this.state = 872;
	        this.match(ATLParser.T__15);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sequenceType() {
	    let localctx = new SequenceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, ATLParser.RULE_sequenceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 874;
	        this.match(ATLParser.T__50);
	        this.state = 875;
	        this.match(ATLParser.T__14);
	        this.state = 876;
	        this.oclType();
	        this.state = 877;
	        this.match(ATLParser.T__15);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	priority_0() {
	    let localctx = new Priority_0Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, ATLParser.RULE_priority_0);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 879;
	        this.primary_oclExpression();
	        this.state = 893;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ATLParser.T__58 || _la===ATLParser.T__59) {
	            this.state = 891;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ATLParser.T__58:
	                this.state = 880;
	                this.match(ATLParser.T__58);
	                this.state = 883;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 881;
	                    this.operationCallExp();
	                    break;

	                case 2:
	                    this.state = 882;
	                    this.navigationOrAttributeCallExp();
	                    break;

	                }
	                break;
	            case ATLParser.T__59:
	                this.state = 885;
	                this.match(ATLParser.T__59);
	                this.state = 889;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 886;
	                    this.iteratorExp();
	                    break;

	                case 2:
	                    this.state = 887;
	                    this.iterateExp();
	                    break;

	                case 3:
	                    this.state = 888;
	                    this.collectionOperationCallExp();
	                    break;

	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 895;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	priority_1() {
	    let localctx = new Priority_1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, ATLParser.RULE_priority_1);
	    try {
	        this.state = 901;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ATLParser.T__60:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 896;
	            this.match(ATLParser.T__60);
	            this.state = 897;
	            this.priority_0();
	            break;
	        case ATLParser.T__61:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 898;
	            this.match(ATLParser.T__61);
	            this.state = 899;
	            this.priority_0();
	            break;
	        case ATLParser.T__14:
	        case ATLParser.T__33:
	        case ATLParser.T__39:
	        case ATLParser.T__40:
	        case ATLParser.T__41:
	        case ATLParser.T__44:
	        case ATLParser.T__46:
	        case ATLParser.T__47:
	        case ATLParser.T__48:
	        case ATLParser.T__49:
	        case ATLParser.T__50:
	        case ATLParser.T__51:
	        case ATLParser.T__52:
	        case ATLParser.T__53:
	        case ATLParser.T__54:
	        case ATLParser.T__55:
	        case ATLParser.T__56:
	        case ATLParser.T__57:
	        case ATLParser.T__77:
	        case ATLParser.T__78:
	        case ATLParser.T__79:
	        case ATLParser.STRING:
	        case ATLParser.INTEGER:
	        case ATLParser.FLOAT:
	        case ATLParser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 900;
	            this.priority_0();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	priority_2() {
	    let localctx = new Priority_2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, ATLParser.RULE_priority_2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 903;
	        this.priority_1();
	        this.state = 914;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 63)) & ~0x1f) == 0 && ((1 << (_la - 63)) & ((1 << (ATLParser.T__62 - 63)) | (1 << (ATLParser.T__63 - 63)) | (1 << (ATLParser.T__64 - 63)) | (1 << (ATLParser.T__65 - 63)))) !== 0)) {
	            this.state = 912;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ATLParser.T__62:
	                this.state = 904;
	                this.match(ATLParser.T__62);
	                this.state = 905;
	                this.priority_1();
	                break;
	            case ATLParser.T__63:
	                this.state = 906;
	                this.match(ATLParser.T__63);
	                this.state = 907;
	                this.priority_1();
	                break;
	            case ATLParser.T__64:
	                this.state = 908;
	                this.match(ATLParser.T__64);
	                this.state = 909;
	                this.priority_1();
	                break;
	            case ATLParser.T__65:
	                this.state = 910;
	                this.match(ATLParser.T__65);
	                this.state = 911;
	                this.priority_1();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 916;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	priority_3() {
	    let localctx = new Priority_3Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, ATLParser.RULE_priority_3);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 917;
	        this.priority_2();
	        this.state = 924;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ATLParser.T__61 || _la===ATLParser.T__66) {
	            this.state = 922;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ATLParser.T__66:
	                this.state = 918;
	                this.match(ATLParser.T__66);
	                this.state = 919;
	                this.priority_2();
	                break;
	            case ATLParser.T__61:
	                this.state = 920;
	                this.match(ATLParser.T__61);
	                this.state = 921;
	                this.priority_2();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 926;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	priority_4() {
	    let localctx = new Priority_4Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, ATLParser.RULE_priority_4);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 927;
	        this.priority_3();
	        this.state = 942;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ATLParser.T__8 || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (ATLParser.T__67 - 68)) | (1 << (ATLParser.T__68 - 68)) | (1 << (ATLParser.T__69 - 68)) | (1 << (ATLParser.T__70 - 68)) | (1 << (ATLParser.T__71 - 68)))) !== 0)) {
	            this.state = 940;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ATLParser.T__8:
	                this.state = 928;
	                this.match(ATLParser.T__8);
	                this.state = 929;
	                this.priority_3();
	                break;
	            case ATLParser.T__67:
	                this.state = 930;
	                this.match(ATLParser.T__67);
	                this.state = 931;
	                this.priority_3();
	                break;
	            case ATLParser.T__68:
	                this.state = 932;
	                this.match(ATLParser.T__68);
	                this.state = 933;
	                this.priority_3();
	                break;
	            case ATLParser.T__69:
	                this.state = 934;
	                this.match(ATLParser.T__69);
	                this.state = 935;
	                this.priority_3();
	                break;
	            case ATLParser.T__70:
	                this.state = 936;
	                this.match(ATLParser.T__70);
	                this.state = 937;
	                this.priority_3();
	                break;
	            case ATLParser.T__71:
	                this.state = 938;
	                this.match(ATLParser.T__71);
	                this.state = 939;
	                this.priority_3();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 944;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	priority_5() {
	    let localctx = new Priority_5Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, ATLParser.RULE_priority_5);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 945;
	        this.priority_4();
	        this.state = 956;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (ATLParser.T__72 - 73)) | (1 << (ATLParser.T__73 - 73)) | (1 << (ATLParser.T__74 - 73)) | (1 << (ATLParser.T__75 - 73)))) !== 0)) {
	            this.state = 954;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ATLParser.T__72:
	                this.state = 946;
	                this.match(ATLParser.T__72);
	                this.state = 947;
	                this.priority_4();
	                break;
	            case ATLParser.T__73:
	                this.state = 948;
	                this.match(ATLParser.T__73);
	                this.state = 949;
	                this.priority_4();
	                break;
	            case ATLParser.T__74:
	                this.state = 950;
	                this.match(ATLParser.T__74);
	                this.state = 951;
	                this.priority_4();
	                break;
	            case ATLParser.T__75:
	                this.state = 952;
	                this.match(ATLParser.T__75);
	                this.state = 953;
	                this.priority_4();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 958;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchedRule_abstractContents() {
	    let localctx = new MatchedRule_abstractContentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, ATLParser.RULE_matchedRule_abstractContents);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 960;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__76) {
	            this.state = 959;
	            this.match(ATLParser.T__76);
	        }

	        this.state = 963;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__18) {
	            this.state = 962;
	            this.match(ATLParser.T__18);
	        }

	        this.state = 966;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__4) {
	            this.state = 965;
	            this.match(ATLParser.T__4);
	        }

	        this.state = 968;
	        this.match(ATLParser.T__19);
	        this.state = 969;
	        this.match(ATLParser.IDENTIFIER);
	        this.state = 972;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__20) {
	            this.state = 970;
	            this.match(ATLParser.T__20);
	            this.state = 971;
	            this.match(ATLParser.IDENTIFIER);
	        }

	        this.state = 974;
	        this.match(ATLParser.T__21);
	        this.state = 975;
	        this.inPattern();
	        this.state = 985;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__22) {
	            this.state = 976;
	            this.match(ATLParser.T__22);
	            this.state = 977;
	            this.match(ATLParser.T__21);
	            this.state = 981;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ATLParser.IDENTIFIER) {
	                this.state = 978;
	                this.ruleVariableDeclaration();
	                this.state = 983;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 984;
	            this.match(ATLParser.T__23);
	        }

	        this.state = 988;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__27) {
	            this.state = 987;
	            this.outPattern();
	        }

	        this.state = 991;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ATLParser.T__32) {
	            this.state = 990;
	            this.actionBlock();
	        }

	        this.state = 993;
	        this.match(ATLParser.T__23);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oclType_abstractContents() {
	    let localctx = new OclType_abstractContentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, ATLParser.RULE_oclType_abstractContents);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 995;
	        this.match(ATLParser.T__77);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oclAnyType_abstractContents() {
	    let localctx = new OclAnyType_abstractContentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, ATLParser.RULE_oclAnyType_abstractContents);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 997;
	        this.match(ATLParser.T__78);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collectionType_abstractContents() {
	    let localctx = new CollectionType_abstractContentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, ATLParser.RULE_collectionType_abstractContents);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 999;
	        this.match(ATLParser.T__79);
	        this.state = 1000;
	        this.match(ATLParser.T__14);
	        this.state = 1001;
	        this.oclType();
	        this.state = 1002;
	        this.match(ATLParser.T__15);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary_oclExpression() {
	    let localctx = new Primary_oclExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, ATLParser.RULE_primary_oclExpression);
	    try {
	        this.state = 1018;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1004;
	            this.variableExp();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1005;
	            this.oclUndefinedExp();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1006;
	            this.primitiveExp();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1007;
	            this.ifExp();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1008;
	            this.superExp();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1009;
	            this.enumLiteralExp();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1010;
	            this.collectionExp();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1011;
	            this.mapExp();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1012;
	            this.tupleExp();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1013;
	            this.oclType();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1014;
	            this.match(ATLParser.T__14);
	            this.state = 1015;
	            this.oclExpression();
	            this.state = 1016;
	            this.match(ATLParser.T__15);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

ATLParser.EOF = antlr4.Token.EOF;
ATLParser.T__0 = 1;
ATLParser.T__1 = 2;
ATLParser.T__2 = 3;
ATLParser.T__3 = 4;
ATLParser.T__4 = 5;
ATLParser.T__5 = 6;
ATLParser.T__6 = 7;
ATLParser.T__7 = 8;
ATLParser.T__8 = 9;
ATLParser.T__9 = 10;
ATLParser.T__10 = 11;
ATLParser.T__11 = 12;
ATLParser.T__12 = 13;
ATLParser.T__13 = 14;
ATLParser.T__14 = 15;
ATLParser.T__15 = 16;
ATLParser.T__16 = 17;
ATLParser.T__17 = 18;
ATLParser.T__18 = 19;
ATLParser.T__19 = 20;
ATLParser.T__20 = 21;
ATLParser.T__21 = 22;
ATLParser.T__22 = 23;
ATLParser.T__23 = 24;
ATLParser.T__24 = 25;
ATLParser.T__25 = 26;
ATLParser.T__26 = 27;
ATLParser.T__27 = 28;
ATLParser.T__28 = 29;
ATLParser.T__29 = 30;
ATLParser.T__30 = 31;
ATLParser.T__31 = 32;
ATLParser.T__32 = 33;
ATLParser.T__33 = 34;
ATLParser.T__34 = 35;
ATLParser.T__35 = 36;
ATLParser.T__36 = 37;
ATLParser.T__37 = 38;
ATLParser.T__38 = 39;
ATLParser.T__39 = 40;
ATLParser.T__40 = 41;
ATLParser.T__41 = 42;
ATLParser.T__42 = 43;
ATLParser.T__43 = 44;
ATLParser.T__44 = 45;
ATLParser.T__45 = 46;
ATLParser.T__46 = 47;
ATLParser.T__47 = 48;
ATLParser.T__48 = 49;
ATLParser.T__49 = 50;
ATLParser.T__50 = 51;
ATLParser.T__51 = 52;
ATLParser.T__52 = 53;
ATLParser.T__53 = 54;
ATLParser.T__54 = 55;
ATLParser.T__55 = 56;
ATLParser.T__56 = 57;
ATLParser.T__57 = 58;
ATLParser.T__58 = 59;
ATLParser.T__59 = 60;
ATLParser.T__60 = 61;
ATLParser.T__61 = 62;
ATLParser.T__62 = 63;
ATLParser.T__63 = 64;
ATLParser.T__64 = 65;
ATLParser.T__65 = 66;
ATLParser.T__66 = 67;
ATLParser.T__67 = 68;
ATLParser.T__68 = 69;
ATLParser.T__69 = 70;
ATLParser.T__70 = 71;
ATLParser.T__71 = 72;
ATLParser.T__72 = 73;
ATLParser.T__73 = 74;
ATLParser.T__74 = 75;
ATLParser.T__75 = 76;
ATLParser.T__76 = 77;
ATLParser.T__77 = 78;
ATLParser.T__78 = 79;
ATLParser.T__79 = 80;
ATLParser.STRING = 81;
ATLParser.INTEGER = 82;
ATLParser.FLOAT = 83;
ATLParser.IDENTIFIER = 84;
ATLParser.WS = 85;
ATLParser.COMMENT = 86;
ATLParser.LINE_COMMENT = 87;

ATLParser.RULE_unit = 0;
ATLParser.RULE_module = 1;
ATLParser.RULE_targetModelPattern = 2;
ATLParser.RULE_sourceModelPattern = 3;
ATLParser.RULE_transformationMode = 4;
ATLParser.RULE_library_ = 5;
ATLParser.RULE_query = 6;
ATLParser.RULE_libraryRef = 7;
ATLParser.RULE_moduleElement = 8;
ATLParser.RULE_helper = 9;
ATLParser.RULE_oclFeatureDefinition = 10;
ATLParser.RULE_oclContextDefinition = 11;
ATLParser.RULE_oclFeature = 12;
ATLParser.RULE_operation = 13;
ATLParser.RULE_parameter = 14;
ATLParser.RULE_attribute = 15;
ATLParser.RULE_arule = 16;
ATLParser.RULE_matchedRule = 17;
ATLParser.RULE_lazyMatchedRule = 18;
ATLParser.RULE_ruleVariableDeclaration = 19;
ATLParser.RULE_calledRule = 20;
ATLParser.RULE_inPattern = 21;
ATLParser.RULE_inPatternElement = 22;
ATLParser.RULE_simpleInPatternElement = 23;
ATLParser.RULE_outPattern = 24;
ATLParser.RULE_outPatternElement = 25;
ATLParser.RULE_simpleOutPatternElement = 26;
ATLParser.RULE_forEachOutPatternElement = 27;
ATLParser.RULE_binding = 28;
ATLParser.RULE_actionBlock = 29;
ATLParser.RULE_statement = 30;
ATLParser.RULE_bindingStat = 31;
ATLParser.RULE_expressionStat = 32;
ATLParser.RULE_ifStat = 33;
ATLParser.RULE_forStat = 34;
ATLParser.RULE_oclModel = 35;
ATLParser.RULE_oclModelElement = 36;
ATLParser.RULE_oclExpression = 37;
ATLParser.RULE_iteratorExp = 38;
ATLParser.RULE_iterateExp = 39;
ATLParser.RULE_collectionOperationCallExp = 40;
ATLParser.RULE_operationCallExp = 41;
ATLParser.RULE_navigationOrAttributeCallExp = 42;
ATLParser.RULE_iterator = 43;
ATLParser.RULE_oclUndefinedExp = 44;
ATLParser.RULE_primitiveExp = 45;
ATLParser.RULE_numericExp = 46;
ATLParser.RULE_booleanExp = 47;
ATLParser.RULE_integerExp = 48;
ATLParser.RULE_realExp = 49;
ATLParser.RULE_stringExp = 50;
ATLParser.RULE_ifExp = 51;
ATLParser.RULE_variableExp = 52;
ATLParser.RULE_superExp = 53;
ATLParser.RULE_letExp = 54;
ATLParser.RULE_variableDeclaration = 55;
ATLParser.RULE_enumLiteralExp = 56;
ATLParser.RULE_collectionExp = 57;
ATLParser.RULE_bagExp = 58;
ATLParser.RULE_setExp = 59;
ATLParser.RULE_orderedSetExp = 60;
ATLParser.RULE_sequenceExp = 61;
ATLParser.RULE_mapExp = 62;
ATLParser.RULE_mapElement = 63;
ATLParser.RULE_tupleExp = 64;
ATLParser.RULE_tuplePart = 65;
ATLParser.RULE_oclType = 66;
ATLParser.RULE_oclAnyType = 67;
ATLParser.RULE_tupleType = 68;
ATLParser.RULE_tupleTypeAttribute = 69;
ATLParser.RULE_mapType = 70;
ATLParser.RULE_primitive = 71;
ATLParser.RULE_numericType = 72;
ATLParser.RULE_integerType = 73;
ATLParser.RULE_realType = 74;
ATLParser.RULE_booleanType = 75;
ATLParser.RULE_stringType = 76;
ATLParser.RULE_collectionType = 77;
ATLParser.RULE_bagType = 78;
ATLParser.RULE_setType = 79;
ATLParser.RULE_orderedSetType = 80;
ATLParser.RULE_sequenceType = 81;
ATLParser.RULE_priority_0 = 82;
ATLParser.RULE_priority_1 = 83;
ATLParser.RULE_priority_2 = 84;
ATLParser.RULE_priority_3 = 85;
ATLParser.RULE_priority_4 = 86;
ATLParser.RULE_priority_5 = 87;
ATLParser.RULE_matchedRule_abstractContents = 88;
ATLParser.RULE_oclType_abstractContents = 89;
ATLParser.RULE_oclAnyType_abstractContents = 90;
ATLParser.RULE_collectionType_abstractContents = 91;
ATLParser.RULE_primary_oclExpression = 92;

class UnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_unit;
    }

	module() {
	    return this.getTypedRuleContext(ModuleContext,0);
	};

	library_() {
	    return this.getTypedRuleContext(Library_Context,0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitUnit(this);
		}
	}


}



class ModuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_module;
    }

	targetModelPattern() {
	    return this.getTypedRuleContext(TargetModelPatternContext,0);
	};

	transformationMode() {
	    return this.getTypedRuleContext(TransformationModeContext,0);
	};

	sourceModelPattern() {
	    return this.getTypedRuleContext(SourceModelPatternContext,0);
	};

	STRING() {
	    return this.getToken(ATLParser.STRING, 0);
	};

	IDENTIFIER() {
	    return this.getToken(ATLParser.IDENTIFIER, 0);
	};

	libraryRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LibraryRefContext);
	    } else {
	        return this.getTypedRuleContext(LibraryRefContext,i);
	    }
	};

	moduleElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModuleElementContext);
	    } else {
	        return this.getTypedRuleContext(ModuleElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterModule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitModule(this);
		}
	}


}



class TargetModelPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_targetModelPattern;
    }

	oclModel = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OclModelContext);
	    } else {
	        return this.getTypedRuleContext(OclModelContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterTargetModelPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitTargetModelPattern(this);
		}
	}


}



class SourceModelPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_sourceModelPattern;
    }

	oclModel = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OclModelContext);
	    } else {
	        return this.getTypedRuleContext(OclModelContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterSourceModelPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitSourceModelPattern(this);
		}
	}


}



class TransformationModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_transformationMode;
    }


	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterTransformationMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitTransformationMode(this);
		}
	}


}



class Library_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_library_;
    }

	STRING() {
	    return this.getToken(ATLParser.STRING, 0);
	};

	IDENTIFIER() {
	    return this.getToken(ATLParser.IDENTIFIER, 0);
	};

	libraryRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LibraryRefContext);
	    } else {
	        return this.getTypedRuleContext(LibraryRefContext,i);
	    }
	};

	helper = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(HelperContext);
	    } else {
	        return this.getTypedRuleContext(HelperContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterLibrary_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitLibrary_(this);
		}
	}


}



class QueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_query;
    }

	oclExpression() {
	    return this.getTypedRuleContext(OclExpressionContext,0);
	};

	STRING() {
	    return this.getToken(ATLParser.STRING, 0);
	};

	IDENTIFIER() {
	    return this.getToken(ATLParser.IDENTIFIER, 0);
	};

	libraryRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LibraryRefContext);
	    } else {
	        return this.getTypedRuleContext(LibraryRefContext,i);
	    }
	};

	helper = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(HelperContext);
	    } else {
	        return this.getTypedRuleContext(HelperContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitQuery(this);
		}
	}


}



class LibraryRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_libraryRef;
    }

	STRING() {
	    return this.getToken(ATLParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterLibraryRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitLibraryRef(this);
		}
	}


}



class ModuleElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_moduleElement;
    }

	helper() {
	    return this.getTypedRuleContext(HelperContext,0);
	};

	arule() {
	    return this.getTypedRuleContext(AruleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterModuleElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitModuleElement(this);
		}
	}


}



class HelperContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_helper;
    }

	oclFeatureDefinition() {
	    return this.getTypedRuleContext(OclFeatureDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterHelper(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitHelper(this);
		}
	}


}



class OclFeatureDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_oclFeatureDefinition;
    }

	oclFeature() {
	    return this.getTypedRuleContext(OclFeatureContext,0);
	};

	oclContextDefinition() {
	    return this.getTypedRuleContext(OclContextDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterOclFeatureDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitOclFeatureDefinition(this);
		}
	}


}



class OclContextDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_oclContextDefinition;
    }

	oclType() {
	    return this.getTypedRuleContext(OclTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterOclContextDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitOclContextDefinition(this);
		}
	}


}



class OclFeatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_oclFeature;
    }

	operation() {
	    return this.getTypedRuleContext(OperationContext,0);
	};

	attribute() {
	    return this.getTypedRuleContext(AttributeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterOclFeature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitOclFeature(this);
		}
	}


}



class OperationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_operation;
    }

	IDENTIFIER() {
	    return this.getToken(ATLParser.IDENTIFIER, 0);
	};

	oclType() {
	    return this.getTypedRuleContext(OclTypeContext,0);
	};

	oclExpression() {
	    return this.getTypedRuleContext(OclExpressionContext,0);
	};

	parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterContext);
	    } else {
	        return this.getTypedRuleContext(ParameterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterOperation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitOperation(this);
		}
	}


}



class ParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_parameter;
    }

	IDENTIFIER() {
	    return this.getToken(ATLParser.IDENTIFIER, 0);
	};

	oclType() {
	    return this.getTypedRuleContext(OclTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitParameter(this);
		}
	}


}



class AttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_attribute;
    }

	IDENTIFIER() {
	    return this.getToken(ATLParser.IDENTIFIER, 0);
	};

	oclType() {
	    return this.getTypedRuleContext(OclTypeContext,0);
	};

	oclExpression() {
	    return this.getTypedRuleContext(OclExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitAttribute(this);
		}
	}


}



class AruleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_arule;
    }

	calledRule() {
	    return this.getTypedRuleContext(CalledRuleContext,0);
	};

	matchedRule() {
	    return this.getTypedRuleContext(MatchedRuleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterArule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitArule(this);
		}
	}


}



class MatchedRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_matchedRule;
    }

	lazyMatchedRule() {
	    return this.getTypedRuleContext(LazyMatchedRuleContext,0);
	};

	matchedRule_abstractContents() {
	    return this.getTypedRuleContext(MatchedRule_abstractContentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterMatchedRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitMatchedRule(this);
		}
	}


}



class LazyMatchedRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_lazyMatchedRule;
    }

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ATLParser.IDENTIFIER);
	    } else {
	        return this.getToken(ATLParser.IDENTIFIER, i);
	    }
	};


	inPattern() {
	    return this.getTypedRuleContext(InPatternContext,0);
	};

	outPattern() {
	    return this.getTypedRuleContext(OutPatternContext,0);
	};

	actionBlock() {
	    return this.getTypedRuleContext(ActionBlockContext,0);
	};

	ruleVariableDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RuleVariableDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(RuleVariableDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterLazyMatchedRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitLazyMatchedRule(this);
		}
	}


}



class RuleVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_ruleVariableDeclaration;
    }

	IDENTIFIER() {
	    return this.getToken(ATLParser.IDENTIFIER, 0);
	};

	oclType() {
	    return this.getTypedRuleContext(OclTypeContext,0);
	};

	oclExpression() {
	    return this.getTypedRuleContext(OclExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterRuleVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitRuleVariableDeclaration(this);
		}
	}


}



class CalledRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_calledRule;
    }

	IDENTIFIER() {
	    return this.getToken(ATLParser.IDENTIFIER, 0);
	};

	parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterContext);
	    } else {
	        return this.getTypedRuleContext(ParameterContext,i);
	    }
	};

	outPattern() {
	    return this.getTypedRuleContext(OutPatternContext,0);
	};

	actionBlock() {
	    return this.getTypedRuleContext(ActionBlockContext,0);
	};

	ruleVariableDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RuleVariableDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(RuleVariableDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterCalledRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitCalledRule(this);
		}
	}


}



class InPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_inPattern;
    }

	inPatternElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InPatternElementContext);
	    } else {
	        return this.getTypedRuleContext(InPatternElementContext,i);
	    }
	};

	oclExpression() {
	    return this.getTypedRuleContext(OclExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterInPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitInPattern(this);
		}
	}


}



class InPatternElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_inPatternElement;
    }

	simpleInPatternElement() {
	    return this.getTypedRuleContext(SimpleInPatternElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterInPatternElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitInPatternElement(this);
		}
	}


}



class SimpleInPatternElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_simpleInPatternElement;
    }

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ATLParser.IDENTIFIER);
	    } else {
	        return this.getToken(ATLParser.IDENTIFIER, i);
	    }
	};


	oclType() {
	    return this.getTypedRuleContext(OclTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterSimpleInPatternElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitSimpleInPatternElement(this);
		}
	}


}



class OutPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_outPattern;
    }

	outPatternElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OutPatternElementContext);
	    } else {
	        return this.getTypedRuleContext(OutPatternElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterOutPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitOutPattern(this);
		}
	}


}



class OutPatternElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_outPatternElement;
    }

	simpleOutPatternElement() {
	    return this.getTypedRuleContext(SimpleOutPatternElementContext,0);
	};

	forEachOutPatternElement() {
	    return this.getTypedRuleContext(ForEachOutPatternElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterOutPatternElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitOutPatternElement(this);
		}
	}


}



class SimpleOutPatternElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_simpleOutPatternElement;
    }

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ATLParser.IDENTIFIER);
	    } else {
	        return this.getToken(ATLParser.IDENTIFIER, i);
	    }
	};


	oclType() {
	    return this.getTypedRuleContext(OclTypeContext,0);
	};

	binding = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BindingContext);
	    } else {
	        return this.getTypedRuleContext(BindingContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterSimpleOutPatternElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitSimpleOutPatternElement(this);
		}
	}


}



class ForEachOutPatternElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_forEachOutPatternElement;
    }

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ATLParser.IDENTIFIER);
	    } else {
	        return this.getToken(ATLParser.IDENTIFIER, i);
	    }
	};


	oclType() {
	    return this.getTypedRuleContext(OclTypeContext,0);
	};

	iterator() {
	    return this.getTypedRuleContext(IteratorContext,0);
	};

	oclExpression() {
	    return this.getTypedRuleContext(OclExpressionContext,0);
	};

	binding = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BindingContext);
	    } else {
	        return this.getTypedRuleContext(BindingContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterForEachOutPatternElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitForEachOutPatternElement(this);
		}
	}


}



class BindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_binding;
    }

	IDENTIFIER() {
	    return this.getToken(ATLParser.IDENTIFIER, 0);
	};

	oclExpression() {
	    return this.getTypedRuleContext(OclExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterBinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitBinding(this);
		}
	}


}



class ActionBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_actionBlock;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterActionBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitActionBlock(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_statement;
    }

	ifStat() {
	    return this.getTypedRuleContext(IfStatContext,0);
	};

	expressionStat() {
	    return this.getTypedRuleContext(ExpressionStatContext,0);
	};

	bindingStat() {
	    return this.getTypedRuleContext(BindingStatContext,0);
	};

	forStat() {
	    return this.getTypedRuleContext(ForStatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitStatement(this);
		}
	}


}



class BindingStatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_bindingStat;
    }

	oclExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OclExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OclExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterBindingStat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitBindingStat(this);
		}
	}


}



class ExpressionStatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_expressionStat;
    }

	oclExpression() {
	    return this.getTypedRuleContext(OclExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterExpressionStat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitExpressionStat(this);
		}
	}


}



class IfStatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_ifStat;
    }

	oclExpression() {
	    return this.getTypedRuleContext(OclExpressionContext,0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterIfStat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitIfStat(this);
		}
	}


}



class ForStatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_forStat;
    }

	iterator() {
	    return this.getTypedRuleContext(IteratorContext,0);
	};

	oclExpression() {
	    return this.getTypedRuleContext(OclExpressionContext,0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterForStat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitForStat(this);
		}
	}


}



class OclModelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_oclModel;
    }

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ATLParser.IDENTIFIER);
	    } else {
	        return this.getToken(ATLParser.IDENTIFIER, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterOclModel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitOclModel(this);
		}
	}


}



class OclModelElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_oclModelElement;
    }

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ATLParser.IDENTIFIER);
	    } else {
	        return this.getToken(ATLParser.IDENTIFIER, i);
	    }
	};


	STRING() {
	    return this.getToken(ATLParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterOclModelElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitOclModelElement(this);
		}
	}


}



class OclExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_oclExpression;
    }

	priority_5() {
	    return this.getTypedRuleContext(Priority_5Context,0);
	};

	letExp() {
	    return this.getTypedRuleContext(LetExpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterOclExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitOclExpression(this);
		}
	}


}



class IteratorExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_iteratorExp;
    }

	IDENTIFIER() {
	    return this.getToken(ATLParser.IDENTIFIER, 0);
	};

	iterator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IteratorContext);
	    } else {
	        return this.getTypedRuleContext(IteratorContext,i);
	    }
	};

	oclExpression() {
	    return this.getTypedRuleContext(OclExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterIteratorExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitIteratorExp(this);
		}
	}


}



class IterateExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_iterateExp;
    }

	iterator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IteratorContext);
	    } else {
	        return this.getTypedRuleContext(IteratorContext,i);
	    }
	};

	variableDeclaration() {
	    return this.getTypedRuleContext(VariableDeclarationContext,0);
	};

	oclExpression() {
	    return this.getTypedRuleContext(OclExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterIterateExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitIterateExp(this);
		}
	}


}



class CollectionOperationCallExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_collectionOperationCallExp;
    }

	IDENTIFIER() {
	    return this.getToken(ATLParser.IDENTIFIER, 0);
	};

	oclExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OclExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OclExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterCollectionOperationCallExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitCollectionOperationCallExp(this);
		}
	}


}



class OperationCallExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_operationCallExp;
    }

	IDENTIFIER() {
	    return this.getToken(ATLParser.IDENTIFIER, 0);
	};

	oclExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OclExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OclExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterOperationCallExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitOperationCallExp(this);
		}
	}


}



class NavigationOrAttributeCallExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_navigationOrAttributeCallExp;
    }

	IDENTIFIER() {
	    return this.getToken(ATLParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterNavigationOrAttributeCallExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitNavigationOrAttributeCallExp(this);
		}
	}


}



class IteratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_iterator;
    }

	IDENTIFIER() {
	    return this.getToken(ATLParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterIterator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitIterator(this);
		}
	}


}



class OclUndefinedExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_oclUndefinedExp;
    }


	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterOclUndefinedExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitOclUndefinedExp(this);
		}
	}


}



class PrimitiveExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_primitiveExp;
    }

	numericExp() {
	    return this.getTypedRuleContext(NumericExpContext,0);
	};

	booleanExp() {
	    return this.getTypedRuleContext(BooleanExpContext,0);
	};

	stringExp() {
	    return this.getTypedRuleContext(StringExpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterPrimitiveExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitPrimitiveExp(this);
		}
	}


}



class NumericExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_numericExp;
    }

	integerExp() {
	    return this.getTypedRuleContext(IntegerExpContext,0);
	};

	realExp() {
	    return this.getTypedRuleContext(RealExpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterNumericExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitNumericExp(this);
		}
	}


}



class BooleanExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_booleanExp;
    }


	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterBooleanExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitBooleanExp(this);
		}
	}


}



class IntegerExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_integerExp;
    }

	INTEGER() {
	    return this.getToken(ATLParser.INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterIntegerExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitIntegerExp(this);
		}
	}


}



class RealExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_realExp;
    }

	FLOAT() {
	    return this.getToken(ATLParser.FLOAT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterRealExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitRealExp(this);
		}
	}


}



class StringExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_stringExp;
    }

	STRING() {
	    return this.getToken(ATLParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterStringExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitStringExp(this);
		}
	}


}



class IfExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_ifExp;
    }

	oclExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OclExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OclExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterIfExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitIfExp(this);
		}
	}


}



class VariableExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_variableExp;
    }

	IDENTIFIER() {
	    return this.getToken(ATLParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterVariableExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitVariableExp(this);
		}
	}


}



class SuperExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_superExp;
    }


	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterSuperExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitSuperExp(this);
		}
	}


}



class LetExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_letExp;
    }

	variableDeclaration() {
	    return this.getTypedRuleContext(VariableDeclarationContext,0);
	};

	oclExpression() {
	    return this.getTypedRuleContext(OclExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterLetExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitLetExp(this);
		}
	}


}



class VariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_variableDeclaration;
    }

	IDENTIFIER() {
	    return this.getToken(ATLParser.IDENTIFIER, 0);
	};

	oclType() {
	    return this.getTypedRuleContext(OclTypeContext,0);
	};

	oclExpression() {
	    return this.getTypedRuleContext(OclExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitVariableDeclaration(this);
		}
	}


}



class EnumLiteralExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_enumLiteralExp;
    }

	IDENTIFIER() {
	    return this.getToken(ATLParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterEnumLiteralExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitEnumLiteralExp(this);
		}
	}


}



class CollectionExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_collectionExp;
    }

	bagExp() {
	    return this.getTypedRuleContext(BagExpContext,0);
	};

	setExp() {
	    return this.getTypedRuleContext(SetExpContext,0);
	};

	orderedSetExp() {
	    return this.getTypedRuleContext(OrderedSetExpContext,0);
	};

	sequenceExp() {
	    return this.getTypedRuleContext(SequenceExpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterCollectionExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitCollectionExp(this);
		}
	}


}



class BagExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_bagExp;
    }

	oclExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OclExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OclExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterBagExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitBagExp(this);
		}
	}


}



class SetExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_setExp;
    }

	oclExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OclExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OclExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterSetExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitSetExp(this);
		}
	}


}



class OrderedSetExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_orderedSetExp;
    }

	oclExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OclExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OclExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterOrderedSetExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitOrderedSetExp(this);
		}
	}


}



class SequenceExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_sequenceExp;
    }

	oclExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OclExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OclExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterSequenceExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitSequenceExp(this);
		}
	}


}



class MapExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_mapExp;
    }

	mapElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MapElementContext);
	    } else {
	        return this.getTypedRuleContext(MapElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterMapExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitMapExp(this);
		}
	}


}



class MapElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_mapElement;
    }

	oclExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OclExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OclExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterMapElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitMapElement(this);
		}
	}


}



class TupleExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_tupleExp;
    }

	tuplePart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TuplePartContext);
	    } else {
	        return this.getTypedRuleContext(TuplePartContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterTupleExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitTupleExp(this);
		}
	}


}



class TuplePartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_tuplePart;
    }

	IDENTIFIER() {
	    return this.getToken(ATLParser.IDENTIFIER, 0);
	};

	oclExpression() {
	    return this.getTypedRuleContext(OclExpressionContext,0);
	};

	oclType() {
	    return this.getTypedRuleContext(OclTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterTuplePart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitTuplePart(this);
		}
	}


}



class OclTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_oclType;
    }

	oclModelElement() {
	    return this.getTypedRuleContext(OclModelElementContext,0);
	};

	oclAnyType() {
	    return this.getTypedRuleContext(OclAnyTypeContext,0);
	};

	tupleType() {
	    return this.getTypedRuleContext(TupleTypeContext,0);
	};

	mapType() {
	    return this.getTypedRuleContext(MapTypeContext,0);
	};

	primitive() {
	    return this.getTypedRuleContext(PrimitiveContext,0);
	};

	collectionType() {
	    return this.getTypedRuleContext(CollectionTypeContext,0);
	};

	oclType_abstractContents() {
	    return this.getTypedRuleContext(OclType_abstractContentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterOclType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitOclType(this);
		}
	}


}



class OclAnyTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_oclAnyType;
    }

	oclAnyType_abstractContents() {
	    return this.getTypedRuleContext(OclAnyType_abstractContentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterOclAnyType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitOclAnyType(this);
		}
	}


}



class TupleTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_tupleType;
    }

	tupleTypeAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TupleTypeAttributeContext);
	    } else {
	        return this.getTypedRuleContext(TupleTypeAttributeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterTupleType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitTupleType(this);
		}
	}


}



class TupleTypeAttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_tupleTypeAttribute;
    }

	IDENTIFIER() {
	    return this.getToken(ATLParser.IDENTIFIER, 0);
	};

	oclType() {
	    return this.getTypedRuleContext(OclTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterTupleTypeAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitTupleTypeAttribute(this);
		}
	}


}



class MapTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_mapType;
    }

	oclType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OclTypeContext);
	    } else {
	        return this.getTypedRuleContext(OclTypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterMapType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitMapType(this);
		}
	}


}



class PrimitiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_primitive;
    }

	numericType() {
	    return this.getTypedRuleContext(NumericTypeContext,0);
	};

	booleanType() {
	    return this.getTypedRuleContext(BooleanTypeContext,0);
	};

	stringType() {
	    return this.getTypedRuleContext(StringTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterPrimitive(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitPrimitive(this);
		}
	}


}



class NumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_numericType;
    }

	integerType() {
	    return this.getTypedRuleContext(IntegerTypeContext,0);
	};

	realType() {
	    return this.getTypedRuleContext(RealTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitNumericType(this);
		}
	}


}



class IntegerTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_integerType;
    }


	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterIntegerType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitIntegerType(this);
		}
	}


}



class RealTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_realType;
    }


	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterRealType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitRealType(this);
		}
	}


}



class BooleanTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_booleanType;
    }


	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterBooleanType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitBooleanType(this);
		}
	}


}



class StringTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_stringType;
    }


	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterStringType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitStringType(this);
		}
	}


}



class CollectionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_collectionType;
    }

	bagType() {
	    return this.getTypedRuleContext(BagTypeContext,0);
	};

	setType() {
	    return this.getTypedRuleContext(SetTypeContext,0);
	};

	orderedSetType() {
	    return this.getTypedRuleContext(OrderedSetTypeContext,0);
	};

	sequenceType() {
	    return this.getTypedRuleContext(SequenceTypeContext,0);
	};

	collectionType_abstractContents() {
	    return this.getTypedRuleContext(CollectionType_abstractContentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterCollectionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitCollectionType(this);
		}
	}


}



class BagTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_bagType;
    }

	oclType() {
	    return this.getTypedRuleContext(OclTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterBagType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitBagType(this);
		}
	}


}



class SetTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_setType;
    }

	oclType() {
	    return this.getTypedRuleContext(OclTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterSetType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitSetType(this);
		}
	}


}



class OrderedSetTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_orderedSetType;
    }

	oclType() {
	    return this.getTypedRuleContext(OclTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterOrderedSetType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitOrderedSetType(this);
		}
	}


}



class SequenceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_sequenceType;
    }

	oclType() {
	    return this.getTypedRuleContext(OclTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterSequenceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitSequenceType(this);
		}
	}


}



class Priority_0Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_priority_0;
    }

	primary_oclExpression() {
	    return this.getTypedRuleContext(Primary_oclExpressionContext,0);
	};

	operationCallExp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OperationCallExpContext);
	    } else {
	        return this.getTypedRuleContext(OperationCallExpContext,i);
	    }
	};

	navigationOrAttributeCallExp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NavigationOrAttributeCallExpContext);
	    } else {
	        return this.getTypedRuleContext(NavigationOrAttributeCallExpContext,i);
	    }
	};

	iteratorExp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IteratorExpContext);
	    } else {
	        return this.getTypedRuleContext(IteratorExpContext,i);
	    }
	};

	iterateExp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IterateExpContext);
	    } else {
	        return this.getTypedRuleContext(IterateExpContext,i);
	    }
	};

	collectionOperationCallExp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CollectionOperationCallExpContext);
	    } else {
	        return this.getTypedRuleContext(CollectionOperationCallExpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterPriority_0(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitPriority_0(this);
		}
	}


}



class Priority_1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_priority_1;
    }

	priority_0() {
	    return this.getTypedRuleContext(Priority_0Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterPriority_1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitPriority_1(this);
		}
	}


}



class Priority_2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_priority_2;
    }

	priority_1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Priority_1Context);
	    } else {
	        return this.getTypedRuleContext(Priority_1Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterPriority_2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitPriority_2(this);
		}
	}


}



class Priority_3Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_priority_3;
    }

	priority_2 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Priority_2Context);
	    } else {
	        return this.getTypedRuleContext(Priority_2Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterPriority_3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitPriority_3(this);
		}
	}


}



class Priority_4Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_priority_4;
    }

	priority_3 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Priority_3Context);
	    } else {
	        return this.getTypedRuleContext(Priority_3Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterPriority_4(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitPriority_4(this);
		}
	}


}



class Priority_5Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_priority_5;
    }

	priority_4 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Priority_4Context);
	    } else {
	        return this.getTypedRuleContext(Priority_4Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterPriority_5(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitPriority_5(this);
		}
	}


}



class MatchedRule_abstractContentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_matchedRule_abstractContents;
    }

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ATLParser.IDENTIFIER);
	    } else {
	        return this.getToken(ATLParser.IDENTIFIER, i);
	    }
	};


	inPattern() {
	    return this.getTypedRuleContext(InPatternContext,0);
	};

	outPattern() {
	    return this.getTypedRuleContext(OutPatternContext,0);
	};

	actionBlock() {
	    return this.getTypedRuleContext(ActionBlockContext,0);
	};

	ruleVariableDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RuleVariableDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(RuleVariableDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterMatchedRule_abstractContents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitMatchedRule_abstractContents(this);
		}
	}


}



class OclType_abstractContentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_oclType_abstractContents;
    }


	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterOclType_abstractContents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitOclType_abstractContents(this);
		}
	}


}



class OclAnyType_abstractContentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_oclAnyType_abstractContents;
    }


	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterOclAnyType_abstractContents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitOclAnyType_abstractContents(this);
		}
	}


}



class CollectionType_abstractContentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_collectionType_abstractContents;
    }

	oclType() {
	    return this.getTypedRuleContext(OclTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterCollectionType_abstractContents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitCollectionType_abstractContents(this);
		}
	}


}



class Primary_oclExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ATLParser.RULE_primary_oclExpression;
    }

	variableExp() {
	    return this.getTypedRuleContext(VariableExpContext,0);
	};

	oclUndefinedExp() {
	    return this.getTypedRuleContext(OclUndefinedExpContext,0);
	};

	primitiveExp() {
	    return this.getTypedRuleContext(PrimitiveExpContext,0);
	};

	ifExp() {
	    return this.getTypedRuleContext(IfExpContext,0);
	};

	superExp() {
	    return this.getTypedRuleContext(SuperExpContext,0);
	};

	enumLiteralExp() {
	    return this.getTypedRuleContext(EnumLiteralExpContext,0);
	};

	collectionExp() {
	    return this.getTypedRuleContext(CollectionExpContext,0);
	};

	mapExp() {
	    return this.getTypedRuleContext(MapExpContext,0);
	};

	tupleExp() {
	    return this.getTypedRuleContext(TupleExpContext,0);
	};

	oclType() {
	    return this.getTypedRuleContext(OclTypeContext,0);
	};

	oclExpression() {
	    return this.getTypedRuleContext(OclExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.enterPrimary_oclExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ATLListener ) {
	        listener.exitPrimary_oclExpression(this);
		}
	}


}




ATLParser.UnitContext = UnitContext; 
ATLParser.ModuleContext = ModuleContext; 
ATLParser.TargetModelPatternContext = TargetModelPatternContext; 
ATLParser.SourceModelPatternContext = SourceModelPatternContext; 
ATLParser.TransformationModeContext = TransformationModeContext; 
ATLParser.Library_Context = Library_Context; 
ATLParser.QueryContext = QueryContext; 
ATLParser.LibraryRefContext = LibraryRefContext; 
ATLParser.ModuleElementContext = ModuleElementContext; 
ATLParser.HelperContext = HelperContext; 
ATLParser.OclFeatureDefinitionContext = OclFeatureDefinitionContext; 
ATLParser.OclContextDefinitionContext = OclContextDefinitionContext; 
ATLParser.OclFeatureContext = OclFeatureContext; 
ATLParser.OperationContext = OperationContext; 
ATLParser.ParameterContext = ParameterContext; 
ATLParser.AttributeContext = AttributeContext; 
ATLParser.AruleContext = AruleContext; 
ATLParser.MatchedRuleContext = MatchedRuleContext; 
ATLParser.LazyMatchedRuleContext = LazyMatchedRuleContext; 
ATLParser.RuleVariableDeclarationContext = RuleVariableDeclarationContext; 
ATLParser.CalledRuleContext = CalledRuleContext; 
ATLParser.InPatternContext = InPatternContext; 
ATLParser.InPatternElementContext = InPatternElementContext; 
ATLParser.SimpleInPatternElementContext = SimpleInPatternElementContext; 
ATLParser.OutPatternContext = OutPatternContext; 
ATLParser.OutPatternElementContext = OutPatternElementContext; 
ATLParser.SimpleOutPatternElementContext = SimpleOutPatternElementContext; 
ATLParser.ForEachOutPatternElementContext = ForEachOutPatternElementContext; 
ATLParser.BindingContext = BindingContext; 
ATLParser.ActionBlockContext = ActionBlockContext; 
ATLParser.StatementContext = StatementContext; 
ATLParser.BindingStatContext = BindingStatContext; 
ATLParser.ExpressionStatContext = ExpressionStatContext; 
ATLParser.IfStatContext = IfStatContext; 
ATLParser.ForStatContext = ForStatContext; 
ATLParser.OclModelContext = OclModelContext; 
ATLParser.OclModelElementContext = OclModelElementContext; 
ATLParser.OclExpressionContext = OclExpressionContext; 
ATLParser.IteratorExpContext = IteratorExpContext; 
ATLParser.IterateExpContext = IterateExpContext; 
ATLParser.CollectionOperationCallExpContext = CollectionOperationCallExpContext; 
ATLParser.OperationCallExpContext = OperationCallExpContext; 
ATLParser.NavigationOrAttributeCallExpContext = NavigationOrAttributeCallExpContext; 
ATLParser.IteratorContext = IteratorContext; 
ATLParser.OclUndefinedExpContext = OclUndefinedExpContext; 
ATLParser.PrimitiveExpContext = PrimitiveExpContext; 
ATLParser.NumericExpContext = NumericExpContext; 
ATLParser.BooleanExpContext = BooleanExpContext; 
ATLParser.IntegerExpContext = IntegerExpContext; 
ATLParser.RealExpContext = RealExpContext; 
ATLParser.StringExpContext = StringExpContext; 
ATLParser.IfExpContext = IfExpContext; 
ATLParser.VariableExpContext = VariableExpContext; 
ATLParser.SuperExpContext = SuperExpContext; 
ATLParser.LetExpContext = LetExpContext; 
ATLParser.VariableDeclarationContext = VariableDeclarationContext; 
ATLParser.EnumLiteralExpContext = EnumLiteralExpContext; 
ATLParser.CollectionExpContext = CollectionExpContext; 
ATLParser.BagExpContext = BagExpContext; 
ATLParser.SetExpContext = SetExpContext; 
ATLParser.OrderedSetExpContext = OrderedSetExpContext; 
ATLParser.SequenceExpContext = SequenceExpContext; 
ATLParser.MapExpContext = MapExpContext; 
ATLParser.MapElementContext = MapElementContext; 
ATLParser.TupleExpContext = TupleExpContext; 
ATLParser.TuplePartContext = TuplePartContext; 
ATLParser.OclTypeContext = OclTypeContext; 
ATLParser.OclAnyTypeContext = OclAnyTypeContext; 
ATLParser.TupleTypeContext = TupleTypeContext; 
ATLParser.TupleTypeAttributeContext = TupleTypeAttributeContext; 
ATLParser.MapTypeContext = MapTypeContext; 
ATLParser.PrimitiveContext = PrimitiveContext; 
ATLParser.NumericTypeContext = NumericTypeContext; 
ATLParser.IntegerTypeContext = IntegerTypeContext; 
ATLParser.RealTypeContext = RealTypeContext; 
ATLParser.BooleanTypeContext = BooleanTypeContext; 
ATLParser.StringTypeContext = StringTypeContext; 
ATLParser.CollectionTypeContext = CollectionTypeContext; 
ATLParser.BagTypeContext = BagTypeContext; 
ATLParser.SetTypeContext = SetTypeContext; 
ATLParser.OrderedSetTypeContext = OrderedSetTypeContext; 
ATLParser.SequenceTypeContext = SequenceTypeContext; 
ATLParser.Priority_0Context = Priority_0Context; 
ATLParser.Priority_1Context = Priority_1Context; 
ATLParser.Priority_2Context = Priority_2Context; 
ATLParser.Priority_3Context = Priority_3Context; 
ATLParser.Priority_4Context = Priority_4Context; 
ATLParser.Priority_5Context = Priority_5Context; 
ATLParser.MatchedRule_abstractContentsContext = MatchedRule_abstractContentsContext; 
ATLParser.OclType_abstractContentsContext = OclType_abstractContentsContext; 
ATLParser.OclAnyType_abstractContentsContext = OclAnyType_abstractContentsContext; 
ATLParser.CollectionType_abstractContentsContext = CollectionType_abstractContentsContext; 
ATLParser.Primary_oclExpressionContext = Primary_oclExpressionContext; 
