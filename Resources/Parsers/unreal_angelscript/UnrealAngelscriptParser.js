// Generated from Resources/Parsers/unreal_angelscript/UnrealAngelscriptParser.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import UnrealAngelscriptParserListener from './UnrealAngelscriptParserListener.js';
const serializedATN = [4,1,124,1357,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,1,0,3,0,278,8,0,1,0,1,0,1,1,1,1,1,1,5,1,285,8,1,
10,1,12,1,288,9,1,1,2,1,2,1,2,3,2,293,8,2,1,3,1,3,1,3,3,3,298,8,3,1,3,1,
3,1,4,1,4,1,4,3,4,305,8,4,1,4,1,4,1,5,1,5,1,5,3,5,312,8,5,1,5,1,5,1,6,1,
6,1,6,1,6,5,6,320,8,6,10,6,12,6,323,9,6,1,6,1,6,1,6,3,6,328,8,6,1,6,1,6,
3,6,332,8,6,1,6,1,6,1,6,1,6,3,6,338,8,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,
5,8,348,8,8,10,8,12,8,351,9,8,1,9,1,9,1,10,4,10,356,8,10,11,10,12,10,357,
1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,367,8,10,1,11,1,11,3,11,371,8,11,
1,12,1,12,1,12,1,12,1,12,1,12,3,12,379,8,12,3,12,381,8,12,1,13,1,13,1,13,
1,14,1,14,1,14,1,14,3,14,390,8,14,1,14,1,14,1,14,1,14,1,14,5,14,397,8,14,
10,14,12,14,400,9,14,1,15,1,15,3,15,404,8,15,1,15,1,15,1,16,1,16,3,16,410,
8,16,1,16,1,16,1,17,1,17,1,17,1,17,3,17,418,8,17,3,17,420,8,17,1,18,1,18,
1,19,1,19,1,19,5,19,427,8,19,10,19,12,19,430,9,19,1,20,1,20,3,20,434,8,20,
1,21,3,21,437,8,21,1,21,1,21,3,21,441,8,21,1,22,3,22,444,8,22,1,22,1,22,
1,22,1,23,1,23,3,23,451,8,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,3,24,460,
8,24,1,24,1,24,1,24,1,24,1,24,3,24,467,8,24,1,24,1,24,3,24,471,8,24,1,24,
1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,484,8,24,1,24,1,24,
3,24,488,8,24,1,24,1,24,1,24,1,24,3,24,494,8,24,1,24,1,24,1,24,1,24,1,24,
3,24,501,8,24,1,24,1,24,1,24,1,24,1,24,3,24,508,8,24,1,24,1,24,5,24,512,
8,24,10,24,12,24,515,9,24,1,25,1,25,1,26,3,26,520,8,26,1,26,1,26,1,26,3,
26,525,8,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,536,8,26,1,
27,1,27,1,27,1,27,3,27,542,8,27,1,27,1,27,1,27,1,27,1,27,3,27,549,8,27,1,
28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,3,30,559,8,30,1,30,1,30,3,30,563,8,
30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,574,8,31,1,32,1,32,
1,32,5,32,579,8,32,10,32,12,32,582,9,32,1,33,1,33,1,33,5,33,587,8,33,10,
33,12,33,590,9,33,1,34,1,34,1,34,1,34,5,34,596,8,34,10,34,12,34,599,9,34,
1,35,1,35,1,35,1,35,3,35,605,8,35,1,36,1,36,1,36,5,36,610,8,36,10,36,12,
36,613,9,36,1,37,1,37,1,37,5,37,618,8,37,10,37,12,37,621,9,37,1,38,1,38,
1,38,5,38,626,8,38,10,38,12,38,629,9,38,1,39,1,39,1,39,5,39,634,8,39,10,
39,12,39,637,9,39,1,40,1,40,1,40,5,40,642,8,40,10,40,12,40,645,9,40,1,41,
1,41,1,41,5,41,650,8,41,10,41,12,41,653,9,41,1,42,1,42,1,42,5,42,658,8,42,
10,42,12,42,661,9,42,1,43,1,43,1,43,1,43,1,43,1,43,3,43,669,8,43,1,44,1,
44,1,44,1,44,1,44,3,44,676,8,44,1,45,1,45,1,46,1,46,1,46,5,46,683,8,46,10,
46,12,46,686,9,46,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,697,
8,48,3,48,699,8,48,1,49,1,49,1,49,1,49,3,49,705,8,49,1,49,1,49,1,49,1,50,
3,50,711,8,50,1,50,1,50,1,51,1,51,3,51,717,8,51,1,51,1,51,1,52,4,52,722,
8,52,11,52,12,52,723,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,733,8,53,1,
53,1,53,1,53,1,53,1,53,1,53,3,53,741,8,53,1,54,1,54,1,54,1,54,1,54,1,54,
3,54,749,8,54,3,54,751,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,771,8,55,1,55,1,55,3,55,
775,8,55,1,55,1,55,1,55,1,55,3,55,781,8,55,1,55,1,55,1,55,3,55,786,8,55,
1,56,1,56,3,56,790,8,56,1,57,1,57,1,57,1,58,1,58,3,58,797,8,58,1,59,1,59,
1,59,1,59,1,59,3,59,804,8,59,1,59,1,59,3,59,808,8,59,1,59,1,59,1,60,1,60,
1,61,4,61,815,8,61,11,61,12,61,816,1,62,1,62,1,62,1,62,1,62,3,62,824,8,62,
1,63,1,63,1,63,1,63,3,63,830,8,63,1,64,1,64,1,64,1,64,1,64,1,65,3,65,838,
8,65,1,65,1,65,3,65,842,8,65,1,65,1,65,1,66,1,66,1,67,1,67,3,67,850,8,67,
1,68,4,68,853,8,68,11,68,12,68,854,1,69,1,69,1,70,1,70,1,71,1,71,1,71,3,
71,864,8,71,1,72,1,72,1,72,1,72,1,72,3,72,871,8,72,1,73,4,73,874,8,73,11,
73,12,73,875,1,74,4,74,879,8,74,11,74,12,74,880,1,75,3,75,884,8,75,1,75,
1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,
75,1,75,1,75,3,75,904,8,75,1,76,1,76,1,77,1,77,1,77,3,77,911,8,77,1,78,1,
78,1,78,3,78,916,8,78,1,78,1,78,1,79,1,79,3,79,922,8,79,1,79,1,79,3,79,926,
8,79,1,79,1,79,3,79,930,8,79,1,79,3,79,933,8,79,1,80,1,80,1,81,1,81,1,81,
1,81,3,81,941,8,81,3,81,943,8,81,1,81,1,81,1,82,1,82,3,82,949,8,82,1,82,
3,82,952,8,82,1,82,3,82,955,8,82,1,83,1,83,1,83,3,83,960,8,83,1,83,1,83,
1,84,1,84,1,85,1,85,1,85,1,86,1,86,1,86,5,86,972,8,86,10,86,12,86,975,9,
86,1,87,1,87,1,87,3,87,980,8,87,1,88,1,88,1,89,1,89,3,89,986,8,89,1,90,1,
90,1,91,1,91,1,91,3,91,993,8,91,1,91,1,91,3,91,997,8,91,1,91,1,91,1,92,1,
92,1,93,1,93,1,93,1,93,1,93,1,93,1,94,3,94,1010,8,94,1,94,1,94,1,95,4,95,
1015,8,95,11,95,12,95,1016,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,
1,96,1,96,1,96,1,96,4,96,1032,8,96,11,96,12,96,1033,3,96,1036,8,96,1,97,
1,97,1,97,5,97,1041,8,97,10,97,12,97,1044,9,97,1,98,1,98,3,98,1048,8,98,
1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,1060,8,100,
1,100,3,100,1063,8,100,5,100,1065,8,100,10,100,12,100,1068,9,100,1,101,1,
101,3,101,1072,8,101,1,101,1,101,3,101,1076,8,101,1,101,3,101,1079,8,101,
1,102,1,102,1,103,1,103,1,104,1,104,1,105,1,105,1,106,1,106,1,106,5,106,
1092,8,106,10,106,12,106,1095,9,106,1,107,1,107,3,107,1099,8,107,1,107,1,
107,3,107,1103,8,107,1,108,3,108,1106,8,108,1,108,3,108,1109,8,108,1,108,
3,108,1112,8,108,1,108,3,108,1115,8,108,1,108,1,108,3,108,1119,8,108,1,108,
1,108,1,109,1,109,1,109,1,109,1,109,3,109,1128,8,109,1,110,1,110,1,110,1,
110,1,110,3,110,1135,8,110,1,111,1,111,1,111,3,111,1140,8,111,1,112,1,112,
3,112,1144,8,112,1,113,1,113,1,113,5,113,1149,8,113,10,113,12,113,1152,9,
113,1,113,3,113,1155,8,113,1,114,1,114,1,114,3,114,1160,8,114,3,114,1162,
8,114,1,114,1,114,1,115,1,115,1,116,1,116,1,116,3,116,1171,8,116,1,116,1,
116,1,117,3,117,1176,8,117,1,117,1,117,1,117,3,117,1181,8,117,3,117,1183,
8,117,1,117,3,117,1186,8,117,1,118,3,118,1189,8,118,1,118,1,118,1,119,1,
119,1,120,1,120,1,121,1,121,1,121,1,121,4,121,1201,8,121,11,121,12,121,1202,
1,122,1,122,1,122,1,122,3,122,1209,8,122,1,123,3,123,1212,8,123,1,123,3,
123,1215,8,123,1,123,3,123,1218,8,123,1,123,3,123,1221,8,123,1,123,1,123,
3,123,1225,8,123,1,123,1,123,1,124,1,124,1,124,5,124,1232,8,124,10,124,12,
124,1235,9,124,1,125,1,125,3,125,1239,8,125,1,125,3,125,1242,8,125,3,125,
1244,8,125,1,125,3,125,1247,8,125,1,125,1,125,1,125,3,125,1252,8,125,1,126,
4,126,1255,8,126,11,126,12,126,1256,1,127,1,127,1,128,1,128,1,128,1,129,
1,129,1,129,5,129,1267,8,129,10,129,12,129,1270,9,129,1,130,1,130,1,130,
3,130,1275,8,130,1,130,1,130,1,130,3,130,1280,8,130,1,130,1,130,3,130,1284,
8,130,1,131,3,131,1287,8,131,1,131,1,131,3,131,1291,8,131,1,132,1,132,1,
133,1,133,1,134,1,134,1,134,1,135,1,135,1,135,1,135,3,135,1304,8,135,1,136,
1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,
1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,
1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,
1,136,1,136,1,136,3,136,1346,8,136,1,137,1,137,1,137,1,137,1,137,1,137,1,
137,3,137,1355,8,137,1,137,1,854,3,28,48,200,138,0,2,4,6,8,10,12,14,16,18,
20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,
220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
256,258,260,262,264,266,268,270,272,274,0,18,1,0,7,8,2,0,45,45,62,62,2,0,
78,78,82,82,1,0,101,102,2,0,72,74,78,81,1,0,74,76,1,0,72,73,2,0,83,84,97,
98,1,0,95,96,2,0,82,82,85,94,1,0,15,17,1,0,66,71,2,0,78,78,99,99,2,0,68,
68,70,70,2,0,69,69,71,71,2,0,37,37,59,59,3,0,14,14,46,46,53,53,1,0,54,56,
1483,0,277,1,0,0,0,2,281,1,0,0,0,4,289,1,0,0,0,6,294,1,0,0,0,8,301,1,0,0,
0,10,308,1,0,0,0,12,337,1,0,0,0,14,339,1,0,0,0,16,344,1,0,0,0,18,352,1,0,
0,0,20,366,1,0,0,0,22,370,1,0,0,0,24,380,1,0,0,0,26,382,1,0,0,0,28,385,1,
0,0,0,30,401,1,0,0,0,32,407,1,0,0,0,34,419,1,0,0,0,36,421,1,0,0,0,38,423,
1,0,0,0,40,433,1,0,0,0,42,440,1,0,0,0,44,443,1,0,0,0,46,448,1,0,0,0,48,487,
1,0,0,0,50,516,1,0,0,0,52,535,1,0,0,0,54,548,1,0,0,0,56,550,1,0,0,0,58,552,
1,0,0,0,60,562,1,0,0,0,62,573,1,0,0,0,64,575,1,0,0,0,66,583,1,0,0,0,68,591,
1,0,0,0,70,604,1,0,0,0,72,606,1,0,0,0,74,614,1,0,0,0,76,622,1,0,0,0,78,630,
1,0,0,0,80,638,1,0,0,0,82,646,1,0,0,0,84,654,1,0,0,0,86,662,1,0,0,0,88,675,
1,0,0,0,90,677,1,0,0,0,92,679,1,0,0,0,94,687,1,0,0,0,96,698,1,0,0,0,98,704,
1,0,0,0,100,710,1,0,0,0,102,714,1,0,0,0,104,721,1,0,0,0,106,740,1,0,0,0,
108,750,1,0,0,0,110,785,1,0,0,0,112,789,1,0,0,0,114,791,1,0,0,0,116,796,
1,0,0,0,118,807,1,0,0,0,120,811,1,0,0,0,122,814,1,0,0,0,124,823,1,0,0,0,
126,829,1,0,0,0,128,831,1,0,0,0,130,837,1,0,0,0,132,845,1,0,0,0,134,849,
1,0,0,0,136,852,1,0,0,0,138,856,1,0,0,0,140,858,1,0,0,0,142,863,1,0,0,0,
144,870,1,0,0,0,146,873,1,0,0,0,148,878,1,0,0,0,150,903,1,0,0,0,152,905,
1,0,0,0,154,910,1,0,0,0,156,912,1,0,0,0,158,932,1,0,0,0,160,934,1,0,0,0,
162,936,1,0,0,0,164,946,1,0,0,0,166,956,1,0,0,0,168,963,1,0,0,0,170,965,
1,0,0,0,172,968,1,0,0,0,174,976,1,0,0,0,176,981,1,0,0,0,178,985,1,0,0,0,
180,987,1,0,0,0,182,989,1,0,0,0,184,1000,1,0,0,0,186,1002,1,0,0,0,188,1009,
1,0,0,0,190,1014,1,0,0,0,192,1035,1,0,0,0,194,1037,1,0,0,0,196,1045,1,0,
0,0,198,1049,1,0,0,0,200,1052,1,0,0,0,202,1069,1,0,0,0,204,1080,1,0,0,0,
206,1082,1,0,0,0,208,1084,1,0,0,0,210,1086,1,0,0,0,212,1088,1,0,0,0,214,
1096,1,0,0,0,216,1105,1,0,0,0,218,1127,1,0,0,0,220,1134,1,0,0,0,222,1139,
1,0,0,0,224,1143,1,0,0,0,226,1145,1,0,0,0,228,1156,1,0,0,0,230,1165,1,0,
0,0,232,1167,1,0,0,0,234,1175,1,0,0,0,236,1188,1,0,0,0,238,1192,1,0,0,0,
240,1194,1,0,0,0,242,1200,1,0,0,0,244,1208,1,0,0,0,246,1211,1,0,0,0,248,
1228,1,0,0,0,250,1251,1,0,0,0,252,1254,1,0,0,0,254,1258,1,0,0,0,256,1260,
1,0,0,0,258,1263,1,0,0,0,260,1283,1,0,0,0,262,1290,1,0,0,0,264,1292,1,0,
0,0,266,1294,1,0,0,0,268,1296,1,0,0,0,270,1299,1,0,0,0,272,1345,1,0,0,0,
274,1354,1,0,0,0,276,278,3,122,61,0,277,276,1,0,0,0,277,278,1,0,0,0,278,
279,1,0,0,0,279,280,5,0,0,1,280,1,1,0,0,0,281,286,3,4,2,0,282,283,5,103,
0,0,283,285,3,4,2,0,284,282,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,
287,1,0,0,0,287,3,1,0,0,0,288,286,1,0,0,0,289,292,5,109,0,0,290,291,5,82,
0,0,291,293,3,92,46,0,292,290,1,0,0,0,292,293,1,0,0,0,293,5,1,0,0,0,294,
295,7,0,0,0,295,297,5,66,0,0,296,298,3,2,1,0,297,296,1,0,0,0,297,298,1,0,
0,0,298,299,1,0,0,0,299,300,5,67,0,0,300,7,1,0,0,0,301,302,5,9,0,0,302,304,
5,66,0,0,303,305,3,2,1,0,304,303,1,0,0,0,304,305,1,0,0,0,305,306,1,0,0,0,
306,307,5,67,0,0,307,9,1,0,0,0,308,309,5,10,0,0,309,311,5,66,0,0,310,312,
3,2,1,0,311,310,1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,314,5,67,0,0,
314,11,1,0,0,0,315,316,5,11,0,0,316,321,5,109,0,0,317,318,5,108,0,0,318,
320,5,109,0,0,319,317,1,0,0,0,320,323,1,0,0,0,321,319,1,0,0,0,321,322,1,
0,0,0,322,324,1,0,0,0,323,321,1,0,0,0,324,338,5,107,0,0,325,327,5,11,0,0,
326,328,3,136,68,0,327,326,1,0,0,0,327,328,1,0,0,0,328,329,1,0,0,0,329,331,
3,198,99,0,330,332,3,252,126,0,331,330,1,0,0,0,331,332,1,0,0,0,332,333,1,
0,0,0,333,334,5,12,0,0,334,335,5,4,0,0,335,336,5,107,0,0,336,338,1,0,0,0,
337,315,1,0,0,0,337,325,1,0,0,0,338,13,1,0,0,0,339,340,5,109,0,0,340,341,
5,83,0,0,341,342,3,16,8,0,342,343,5,84,0,0,343,15,1,0,0,0,344,349,3,136,
68,0,345,346,5,103,0,0,346,348,3,136,68,0,347,345,1,0,0,0,348,351,1,0,0,
0,349,347,1,0,0,0,349,350,1,0,0,0,350,17,1,0,0,0,351,349,1,0,0,0,352,353,
7,1,0,0,353,19,1,0,0,0,354,356,3,274,137,0,355,354,1,0,0,0,356,357,1,0,0,
0,357,355,1,0,0,0,357,358,1,0,0,0,358,367,1,0,0,0,359,367,5,61,0,0,360,361,
5,66,0,0,361,362,3,92,46,0,362,363,5,67,0,0,363,367,1,0,0,0,364,367,3,22,
11,0,365,367,3,30,15,0,366,355,1,0,0,0,366,359,1,0,0,0,366,360,1,0,0,0,366,
364,1,0,0,0,366,365,1,0,0,0,367,21,1,0,0,0,368,371,3,24,12,0,369,371,3,26,
13,0,370,368,1,0,0,0,370,369,1,0,0,0,371,23,1,0,0,0,372,381,5,109,0,0,373,
381,3,268,134,0,374,381,3,270,135,0,375,378,5,80,0,0,376,379,3,230,115,0,
377,379,3,156,78,0,378,376,1,0,0,0,378,377,1,0,0,0,379,381,1,0,0,0,380,372,
1,0,0,0,380,373,1,0,0,0,380,374,1,0,0,0,380,375,1,0,0,0,381,25,1,0,0,0,382,
383,3,28,14,0,383,384,3,24,12,0,384,27,1,0,0,0,385,389,6,14,-1,0,386,390,
3,154,77,0,387,390,3,178,89,0,388,390,3,156,78,0,389,386,1,0,0,0,389,387,
1,0,0,0,389,388,1,0,0,0,389,390,1,0,0,0,390,391,1,0,0,0,391,392,5,106,0,
0,392,398,1,0,0,0,393,394,10,1,0,0,394,395,5,109,0,0,395,397,5,106,0,0,396,
393,1,0,0,0,397,400,1,0,0,0,398,396,1,0,0,0,398,399,1,0,0,0,399,29,1,0,0,
0,400,398,1,0,0,0,401,403,3,32,16,0,402,404,3,46,23,0,403,402,1,0,0,0,403,
404,1,0,0,0,404,405,1,0,0,0,405,406,3,102,51,0,406,31,1,0,0,0,407,409,5,
68,0,0,408,410,3,34,17,0,409,408,1,0,0,0,409,410,1,0,0,0,410,411,1,0,0,0,
411,412,5,69,0,0,412,33,1,0,0,0,413,420,3,38,19,0,414,417,3,36,18,0,415,
416,5,103,0,0,416,418,3,38,19,0,417,415,1,0,0,0,417,418,1,0,0,0,418,420,
1,0,0,0,419,413,1,0,0,0,419,414,1,0,0,0,420,35,1,0,0,0,421,422,7,2,0,0,422,
37,1,0,0,0,423,428,3,40,20,0,424,425,5,103,0,0,425,427,3,40,20,0,426,424,
1,0,0,0,427,430,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,39,1,0,0,0,430,
428,1,0,0,0,431,434,3,42,21,0,432,434,3,44,22,0,433,431,1,0,0,0,433,432,
1,0,0,0,434,41,1,0,0,0,435,437,5,78,0,0,436,435,1,0,0,0,436,437,1,0,0,0,
437,438,1,0,0,0,438,441,5,109,0,0,439,441,5,61,0,0,440,436,1,0,0,0,440,439,
1,0,0,0,441,43,1,0,0,0,442,444,5,78,0,0,443,442,1,0,0,0,443,444,1,0,0,0,
444,445,1,0,0,0,445,446,5,109,0,0,446,447,3,220,110,0,447,45,1,0,0,0,448,
450,5,66,0,0,449,451,3,210,105,0,450,449,1,0,0,0,450,451,1,0,0,0,451,452,
1,0,0,0,452,453,5,67,0,0,453,47,1,0,0,0,454,455,6,24,-1,0,455,488,3,20,10,
0,456,457,3,152,76,0,457,459,5,66,0,0,458,460,3,50,25,0,459,458,1,0,0,0,
459,460,1,0,0,0,460,461,1,0,0,0,461,462,5,67,0,0,462,488,1,0,0,0,463,470,
3,150,75,0,464,466,5,66,0,0,465,467,3,50,25,0,466,465,1,0,0,0,466,467,1,
0,0,0,467,468,1,0,0,0,468,471,5,67,0,0,469,471,3,228,114,0,470,464,1,0,0,
0,470,469,1,0,0,0,471,488,1,0,0,0,472,473,5,6,0,0,473,474,5,83,0,0,474,475,
3,208,104,0,475,476,5,84,0,0,476,477,5,66,0,0,477,478,3,92,46,0,478,479,
5,67,0,0,479,488,1,0,0,0,480,483,5,66,0,0,481,484,3,92,46,0,482,484,3,208,
104,0,483,481,1,0,0,0,483,482,1,0,0,0,484,485,1,0,0,0,485,486,5,67,0,0,486,
488,1,0,0,0,487,454,1,0,0,0,487,456,1,0,0,0,487,463,1,0,0,0,487,472,1,0,
0,0,487,480,1,0,0,0,488,513,1,0,0,0,489,490,10,8,0,0,490,493,5,68,0,0,491,
494,3,92,46,0,492,494,3,228,114,0,493,491,1,0,0,0,493,492,1,0,0,0,494,495,
1,0,0,0,495,496,5,69,0,0,496,512,1,0,0,0,497,498,10,6,0,0,498,500,5,66,0,
0,499,501,3,50,25,0,500,499,1,0,0,0,500,501,1,0,0,0,501,502,1,0,0,0,502,
512,5,67,0,0,503,504,10,4,0,0,504,507,5,108,0,0,505,508,3,22,11,0,506,508,
3,52,26,0,507,505,1,0,0,0,507,506,1,0,0,0,508,512,1,0,0,0,509,510,10,3,0,
0,510,512,7,3,0,0,511,489,1,0,0,0,511,497,1,0,0,0,511,503,1,0,0,0,511,509,
1,0,0,0,512,515,1,0,0,0,513,511,1,0,0,0,513,514,1,0,0,0,514,49,1,0,0,0,515,
513,1,0,0,0,516,517,3,226,113,0,517,51,1,0,0,0,518,520,3,28,14,0,519,518,
1,0,0,0,519,520,1,0,0,0,520,524,1,0,0,0,521,522,3,154,77,0,522,523,5,106,
0,0,523,525,1,0,0,0,524,521,1,0,0,0,524,525,1,0,0,0,525,526,1,0,0,0,526,
527,5,80,0,0,527,536,3,154,77,0,528,529,3,28,14,0,529,530,5,106,0,0,530,
531,5,80,0,0,531,532,3,154,77,0,532,536,1,0,0,0,533,534,5,80,0,0,534,536,
3,156,78,0,535,519,1,0,0,0,535,528,1,0,0,0,535,533,1,0,0,0,536,53,1,0,0,
0,537,549,3,48,24,0,538,542,5,101,0,0,539,542,5,102,0,0,540,542,3,56,28,
0,541,538,1,0,0,0,541,539,1,0,0,0,541,540,1,0,0,0,542,543,1,0,0,0,543,549,
3,54,27,0,544,545,5,66,0,0,545,546,3,208,104,0,546,547,5,67,0,0,547,549,
1,0,0,0,548,537,1,0,0,0,548,541,1,0,0,0,548,544,1,0,0,0,549,55,1,0,0,0,550,
551,7,4,0,0,551,57,1,0,0,0,552,553,5,66,0,0,553,554,3,50,25,0,554,555,5,
67,0,0,555,59,1,0,0,0,556,558,5,66,0,0,557,559,3,50,25,0,558,557,1,0,0,0,
558,559,1,0,0,0,559,560,1,0,0,0,560,563,5,67,0,0,561,563,3,228,114,0,562,
556,1,0,0,0,562,561,1,0,0,0,563,61,1,0,0,0,564,574,3,54,27,0,565,566,5,6,
0,0,566,567,5,83,0,0,567,568,3,208,104,0,568,569,5,84,0,0,569,570,5,66,0,
0,570,571,3,62,31,0,571,572,5,67,0,0,572,574,1,0,0,0,573,564,1,0,0,0,573,
565,1,0,0,0,574,63,1,0,0,0,575,580,3,62,31,0,576,577,7,5,0,0,577,579,3,62,
31,0,578,576,1,0,0,0,579,582,1,0,0,0,580,578,1,0,0,0,580,581,1,0,0,0,581,
65,1,0,0,0,582,580,1,0,0,0,583,588,3,64,32,0,584,585,7,6,0,0,585,587,3,64,
32,0,586,584,1,0,0,0,587,590,1,0,0,0,588,586,1,0,0,0,588,589,1,0,0,0,589,
67,1,0,0,0,590,588,1,0,0,0,591,597,3,66,33,0,592,593,3,70,35,0,593,594,3,
66,33,0,594,596,1,0,0,0,595,592,1,0,0,0,596,599,1,0,0,0,597,595,1,0,0,0,
597,598,1,0,0,0,598,69,1,0,0,0,599,597,1,0,0,0,600,601,5,84,0,0,601,605,
5,84,0,0,602,603,5,83,0,0,603,605,5,83,0,0,604,600,1,0,0,0,604,602,1,0,0,
0,605,71,1,0,0,0,606,611,3,68,34,0,607,608,7,7,0,0,608,610,3,68,34,0,609,
607,1,0,0,0,610,613,1,0,0,0,611,609,1,0,0,0,611,612,1,0,0,0,612,73,1,0,0,
0,613,611,1,0,0,0,614,619,3,72,36,0,615,616,7,8,0,0,616,618,3,72,36,0,617,
615,1,0,0,0,618,621,1,0,0,0,619,617,1,0,0,0,619,620,1,0,0,0,620,75,1,0,0,
0,621,619,1,0,0,0,622,627,3,74,37,0,623,624,5,78,0,0,624,626,3,74,37,0,625,
623,1,0,0,0,626,629,1,0,0,0,627,625,1,0,0,0,627,628,1,0,0,0,628,77,1,0,0,
0,629,627,1,0,0,0,630,635,3,76,38,0,631,632,5,77,0,0,632,634,3,76,38,0,633,
631,1,0,0,0,634,637,1,0,0,0,635,633,1,0,0,0,635,636,1,0,0,0,636,79,1,0,0,
0,637,635,1,0,0,0,638,643,3,78,39,0,639,640,5,79,0,0,640,642,3,78,39,0,641,
639,1,0,0,0,642,645,1,0,0,0,643,641,1,0,0,0,643,644,1,0,0,0,644,81,1,0,0,
0,645,643,1,0,0,0,646,651,3,80,40,0,647,648,5,99,0,0,648,650,3,80,40,0,649,
647,1,0,0,0,650,653,1,0,0,0,651,649,1,0,0,0,651,652,1,0,0,0,652,83,1,0,0,
0,653,651,1,0,0,0,654,659,3,82,41,0,655,656,5,100,0,0,656,658,3,82,41,0,
657,655,1,0,0,0,658,661,1,0,0,0,659,657,1,0,0,0,659,660,1,0,0,0,660,85,1,
0,0,0,661,659,1,0,0,0,662,668,3,84,42,0,663,664,5,104,0,0,664,665,3,92,46,
0,665,666,5,105,0,0,666,667,3,88,44,0,667,669,1,0,0,0,668,663,1,0,0,0,668,
669,1,0,0,0,669,87,1,0,0,0,670,676,3,86,43,0,671,672,3,84,42,0,672,673,3,
90,45,0,673,674,3,224,112,0,674,676,1,0,0,0,675,670,1,0,0,0,675,671,1,0,
0,0,676,89,1,0,0,0,677,678,7,9,0,0,678,91,1,0,0,0,679,684,3,88,44,0,680,
681,5,103,0,0,681,683,3,88,44,0,682,680,1,0,0,0,683,686,1,0,0,0,684,682,
1,0,0,0,684,685,1,0,0,0,685,93,1,0,0,0,686,684,1,0,0,0,687,688,3,86,43,0,
688,95,1,0,0,0,689,699,3,98,49,0,690,699,3,120,60,0,691,697,3,100,50,0,692,
697,3,102,51,0,693,697,3,106,53,0,694,697,3,110,55,0,695,697,3,118,59,0,
696,691,1,0,0,0,696,692,1,0,0,0,696,693,1,0,0,0,696,694,1,0,0,0,696,695,
1,0,0,0,697,699,1,0,0,0,698,689,1,0,0,0,698,690,1,0,0,0,698,696,1,0,0,0,
699,97,1,0,0,0,700,705,5,109,0,0,701,702,5,34,0,0,702,705,3,94,47,0,703,
705,5,40,0,0,704,700,1,0,0,0,704,701,1,0,0,0,704,703,1,0,0,0,705,706,1,0,
0,0,706,707,5,105,0,0,707,708,3,96,48,0,708,99,1,0,0,0,709,711,3,92,46,0,
710,709,1,0,0,0,710,711,1,0,0,0,711,712,1,0,0,0,712,713,5,107,0,0,713,101,
1,0,0,0,714,716,5,70,0,0,715,717,3,104,52,0,716,715,1,0,0,0,716,717,1,0,
0,0,717,718,1,0,0,0,718,719,5,71,0,0,719,103,1,0,0,0,720,722,3,96,48,0,721,
720,1,0,0,0,722,723,1,0,0,0,723,721,1,0,0,0,723,724,1,0,0,0,724,105,1,0,
0,0,725,726,5,49,0,0,726,727,5,66,0,0,727,728,3,108,54,0,728,729,5,67,0,
0,729,732,3,96,48,0,730,731,5,42,0,0,731,733,3,96,48,0,732,730,1,0,0,0,732,
733,1,0,0,0,733,741,1,0,0,0,734,735,5,60,0,0,735,736,5,66,0,0,736,737,3,
108,54,0,737,738,5,67,0,0,738,739,3,96,48,0,739,741,1,0,0,0,740,725,1,0,
0,0,740,734,1,0,0,0,741,107,1,0,0,0,742,751,3,92,46,0,743,744,3,136,68,0,
744,748,3,198,99,0,745,746,5,82,0,0,746,749,3,224,112,0,747,749,3,228,114,
0,748,745,1,0,0,0,748,747,1,0,0,0,749,751,1,0,0,0,750,742,1,0,0,0,750,743,
1,0,0,0,751,109,1,0,0,0,752,753,5,65,0,0,753,754,5,66,0,0,754,755,3,108,
54,0,755,756,5,67,0,0,756,757,3,96,48,0,757,786,1,0,0,0,758,759,5,41,0,0,
759,760,3,96,48,0,760,761,5,65,0,0,761,762,5,66,0,0,762,763,3,92,46,0,763,
764,5,67,0,0,764,765,5,107,0,0,765,786,1,0,0,0,766,767,5,47,0,0,767,780,
5,66,0,0,768,770,3,112,56,0,769,771,3,108,54,0,770,769,1,0,0,0,770,771,1,
0,0,0,771,772,1,0,0,0,772,774,5,107,0,0,773,775,3,92,46,0,774,773,1,0,0,
0,774,775,1,0,0,0,775,781,1,0,0,0,776,777,3,114,57,0,777,778,5,105,0,0,778,
779,3,116,58,0,779,781,1,0,0,0,780,768,1,0,0,0,780,776,1,0,0,0,781,782,1,
0,0,0,782,783,5,67,0,0,783,784,3,96,48,0,784,786,1,0,0,0,785,752,1,0,0,0,
785,758,1,0,0,0,785,766,1,0,0,0,786,111,1,0,0,0,787,790,3,100,50,0,788,790,
3,130,65,0,789,787,1,0,0,0,789,788,1,0,0,0,790,113,1,0,0,0,791,792,3,136,
68,0,792,793,5,109,0,0,793,115,1,0,0,0,794,797,3,92,46,0,795,797,3,228,114,
0,796,794,1,0,0,0,796,795,1,0,0,0,797,117,1,0,0,0,798,808,5,33,0,0,799,808,
5,39,0,0,800,803,5,57,0,0,801,804,3,92,46,0,802,804,3,228,114,0,803,801,
1,0,0,0,803,802,1,0,0,0,803,804,1,0,0,0,804,808,1,0,0,0,805,806,5,48,0,0,
806,808,5,109,0,0,807,798,1,0,0,0,807,799,1,0,0,0,807,800,1,0,0,0,807,805,
1,0,0,0,808,809,1,0,0,0,809,810,5,107,0,0,810,119,1,0,0,0,811,812,3,126,
63,0,812,121,1,0,0,0,813,815,3,124,62,0,814,813,1,0,0,0,815,816,1,0,0,0,
816,814,1,0,0,0,816,817,1,0,0,0,817,123,1,0,0,0,818,824,3,12,6,0,819,824,
3,126,63,0,820,824,3,216,108,0,821,824,3,182,91,0,822,824,3,132,66,0,823,
818,1,0,0,0,823,819,1,0,0,0,823,820,1,0,0,0,823,821,1,0,0,0,823,822,1,0,
0,0,824,125,1,0,0,0,825,830,3,130,65,0,826,830,3,186,93,0,827,830,3,128,
64,0,828,830,3,166,83,0,829,825,1,0,0,0,829,826,1,0,0,0,829,827,1,0,0,0,
829,828,1,0,0,0,830,127,1,0,0,0,831,832,5,109,0,0,832,833,5,82,0,0,833,834,
3,208,104,0,834,835,5,107,0,0,835,129,1,0,0,0,836,838,3,136,68,0,837,836,
1,0,0,0,837,838,1,0,0,0,838,841,1,0,0,0,839,842,3,194,97,0,840,842,3,88,
44,0,841,839,1,0,0,0,841,840,1,0,0,0,841,842,1,0,0,0,842,843,1,0,0,0,843,
844,5,107,0,0,844,131,1,0,0,0,845,846,5,107,0,0,846,133,1,0,0,0,847,850,
3,142,71,0,848,850,3,138,69,0,849,847,1,0,0,0,849,848,1,0,0,0,850,135,1,
0,0,0,851,853,3,134,67,0,852,851,1,0,0,0,853,854,1,0,0,0,854,855,1,0,0,0,
854,852,1,0,0,0,855,137,1,0,0,0,856,857,5,63,0,0,857,139,1,0,0,0,858,859,
5,109,0,0,859,141,1,0,0,0,860,864,3,144,72,0,861,864,3,232,116,0,862,864,
3,162,81,0,863,860,1,0,0,0,863,861,1,0,0,0,863,862,1,0,0,0,864,143,1,0,0,
0,865,871,3,150,75,0,866,871,3,158,79,0,867,871,5,38,0,0,868,871,5,78,0,
0,869,871,5,13,0,0,870,865,1,0,0,0,870,866,1,0,0,0,870,867,1,0,0,0,870,868,
1,0,0,0,870,869,1,0,0,0,871,145,1,0,0,0,872,874,3,142,71,0,873,872,1,0,0,
0,874,875,1,0,0,0,875,873,1,0,0,0,875,876,1,0,0,0,876,147,1,0,0,0,877,879,
3,144,72,0,878,877,1,0,0,0,879,880,1,0,0,0,880,878,1,0,0,0,880,881,1,0,0,
0,881,149,1,0,0,0,882,884,3,28,14,0,883,882,1,0,0,0,883,884,1,0,0,0,884,
885,1,0,0,0,885,904,3,154,77,0,886,904,3,14,7,0,887,904,5,19,0,0,888,904,
5,20,0,0,889,904,5,21,0,0,890,904,5,22,0,0,891,904,5,23,0,0,892,904,5,24,
0,0,893,904,5,25,0,0,894,904,5,26,0,0,895,904,5,27,0,0,896,904,5,28,0,0,
897,904,5,29,0,0,898,904,5,30,0,0,899,904,5,31,0,0,900,904,5,64,0,0,901,
904,5,32,0,0,902,904,3,156,78,0,903,883,1,0,0,0,903,886,1,0,0,0,903,887,
1,0,0,0,903,888,1,0,0,0,903,889,1,0,0,0,903,890,1,0,0,0,903,891,1,0,0,0,
903,892,1,0,0,0,903,893,1,0,0,0,903,894,1,0,0,0,903,895,1,0,0,0,903,896,
1,0,0,0,903,897,1,0,0,0,903,898,1,0,0,0,903,899,1,0,0,0,903,900,1,0,0,0,
903,901,1,0,0,0,903,902,1,0,0,0,904,151,1,0,0,0,905,906,7,10,0,0,906,153,
1,0,0,0,907,911,3,230,115,0,908,911,3,160,80,0,909,911,3,140,70,0,910,907,
1,0,0,0,910,908,1,0,0,0,910,909,1,0,0,0,911,155,1,0,0,0,912,915,5,66,0,0,
913,916,3,92,46,0,914,916,5,32,0,0,915,913,1,0,0,0,915,914,1,0,0,0,916,917,
1,0,0,0,917,918,5,67,0,0,918,157,1,0,0,0,919,925,3,240,120,0,920,922,3,28,
14,0,921,920,1,0,0,0,921,922,1,0,0,0,922,923,1,0,0,0,923,926,5,109,0,0,924,
926,3,28,14,0,925,921,1,0,0,0,925,924,1,0,0,0,926,933,1,0,0,0,927,929,5,
43,0,0,928,930,3,28,14,0,929,928,1,0,0,0,929,930,1,0,0,0,930,931,1,0,0,0,
931,933,5,109,0,0,932,919,1,0,0,0,932,927,1,0,0,0,933,159,1,0,0,0,934,935,
5,109,0,0,935,161,1,0,0,0,936,937,3,164,82,0,937,942,5,70,0,0,938,940,3,
172,86,0,939,941,5,103,0,0,940,939,1,0,0,0,940,941,1,0,0,0,941,943,1,0,0,
0,942,938,1,0,0,0,942,943,1,0,0,0,943,944,1,0,0,0,944,945,5,71,0,0,945,163,
1,0,0,0,946,951,3,168,84,0,947,949,3,28,14,0,948,947,1,0,0,0,948,949,1,0,
0,0,949,950,1,0,0,0,950,952,5,109,0,0,951,948,1,0,0,0,951,952,1,0,0,0,952,
954,1,0,0,0,953,955,3,170,85,0,954,953,1,0,0,0,954,955,1,0,0,0,955,165,1,
0,0,0,956,957,3,168,84,0,957,959,5,109,0,0,958,960,3,170,85,0,959,958,1,
0,0,0,959,960,1,0,0,0,960,961,1,0,0,0,961,962,5,107,0,0,962,167,1,0,0,0,
963,964,5,43,0,0,964,169,1,0,0,0,965,966,5,105,0,0,966,967,3,146,73,0,967,
171,1,0,0,0,968,973,3,174,87,0,969,970,5,103,0,0,970,972,3,174,87,0,971,
969,1,0,0,0,972,975,1,0,0,0,973,971,1,0,0,0,973,974,1,0,0,0,974,173,1,0,
0,0,975,973,1,0,0,0,976,979,3,176,88,0,977,978,5,82,0,0,978,980,3,94,47,
0,979,977,1,0,0,0,979,980,1,0,0,0,980,175,1,0,0,0,981,982,5,109,0,0,982,
177,1,0,0,0,983,986,3,180,90,0,984,986,3,184,92,0,985,983,1,0,0,0,985,984,
1,0,0,0,986,179,1,0,0,0,987,988,5,109,0,0,988,181,1,0,0,0,989,992,5,50,0,
0,990,993,5,109,0,0,991,993,3,180,90,0,992,990,1,0,0,0,992,991,1,0,0,0,992,
993,1,0,0,0,993,994,1,0,0,0,994,996,5,70,0,0,995,997,3,122,61,0,996,995,
1,0,0,0,996,997,1,0,0,0,997,998,1,0,0,0,998,999,5,71,0,0,999,183,1,0,0,0,
1000,1001,5,109,0,0,1001,185,1,0,0,0,1002,1003,5,50,0,0,1003,1004,5,109,
0,0,1004,1005,5,82,0,0,1005,1006,3,188,94,0,1006,1007,5,107,0,0,1007,187,
1,0,0,0,1008,1010,3,28,14,0,1009,1008,1,0,0,0,1009,1010,1,0,0,0,1010,1011,
1,0,0,0,1011,1012,3,178,89,0,1012,189,1,0,0,0,1013,1015,3,192,96,0,1014,
1013,1,0,0,0,1015,1016,1,0,0,0,1016,1014,1,0,0,0,1016,1017,1,0,0,0,1017,
191,1,0,0,0,1018,1019,5,66,0,0,1019,1020,3,190,95,0,1020,1021,5,67,0,0,1021,
1036,1,0,0,0,1022,1023,5,68,0,0,1023,1024,3,190,95,0,1024,1025,5,69,0,0,
1025,1036,1,0,0,0,1026,1027,5,70,0,0,1027,1028,3,190,95,0,1028,1029,5,71,
0,0,1029,1036,1,0,0,0,1030,1032,8,11,0,0,1031,1030,1,0,0,0,1032,1033,1,0,
0,0,1033,1031,1,0,0,0,1033,1034,1,0,0,0,1034,1036,1,0,0,0,1035,1018,1,0,
0,0,1035,1022,1,0,0,0,1035,1026,1,0,0,0,1035,1031,1,0,0,0,1036,193,1,0,0,
0,1037,1042,3,196,98,0,1038,1039,5,103,0,0,1039,1041,3,196,98,0,1040,1038,
1,0,0,0,1041,1044,1,0,0,0,1042,1040,1,0,0,0,1042,1043,1,0,0,0,1043,195,1,
0,0,0,1044,1042,1,0,0,0,1045,1047,5,109,0,0,1046,1048,3,220,110,0,1047,1046,
1,0,0,0,1047,1048,1,0,0,0,1048,197,1,0,0,0,1049,1050,3,200,100,0,1050,1051,
3,202,101,0,1051,199,1,0,0,0,1052,1053,6,100,-1,0,1053,1054,3,206,103,0,
1054,1066,1,0,0,0,1055,1062,10,1,0,0,1056,1063,3,202,101,0,1057,1059,5,68,
0,0,1058,1060,3,94,47,0,1059,1058,1,0,0,0,1059,1060,1,0,0,0,1060,1061,1,
0,0,0,1061,1063,5,69,0,0,1062,1056,1,0,0,0,1062,1057,1,0,0,0,1063,1065,1,
0,0,0,1064,1055,1,0,0,0,1065,1068,1,0,0,0,1066,1064,1,0,0,0,1066,1067,1,
0,0,0,1067,201,1,0,0,0,1068,1066,1,0,0,0,1069,1071,5,66,0,0,1070,1072,3,
210,105,0,1071,1070,1,0,0,0,1071,1072,1,0,0,0,1072,1073,1,0,0,0,1073,1075,
5,67,0,0,1074,1076,5,38,0,0,1075,1074,1,0,0,0,1075,1076,1,0,0,0,1076,1078,
1,0,0,0,1077,1079,3,204,102,0,1078,1077,1,0,0,0,1078,1079,1,0,0,0,1079,203,
1,0,0,0,1080,1081,7,12,0,0,1081,205,1,0,0,0,1082,1083,3,22,11,0,1083,207,
1,0,0,0,1084,1085,3,146,73,0,1085,209,1,0,0,0,1086,1087,3,212,106,0,1087,
211,1,0,0,0,1088,1093,3,214,107,0,1089,1090,5,103,0,0,1090,1092,3,214,107,
0,1091,1089,1,0,0,0,1092,1095,1,0,0,0,1093,1091,1,0,0,0,1093,1094,1,0,0,
0,1094,213,1,0,0,0,1095,1093,1,0,0,0,1096,1098,3,136,68,0,1097,1099,5,109,
0,0,1098,1097,1,0,0,0,1098,1099,1,0,0,0,1099,1102,1,0,0,0,1100,1101,5,82,
0,0,1101,1103,3,224,112,0,1102,1100,1,0,0,0,1102,1103,1,0,0,0,1103,215,1,
0,0,0,1104,1106,3,10,5,0,1105,1104,1,0,0,0,1105,1106,1,0,0,0,1106,1108,1,
0,0,0,1107,1109,3,266,133,0,1108,1107,1,0,0,0,1108,1109,1,0,0,0,1109,1111,
1,0,0,0,1110,1112,5,18,0,0,1111,1110,1,0,0,0,1111,1112,1,0,0,0,1112,1114,
1,0,0,0,1113,1115,3,136,68,0,1114,1113,1,0,0,0,1114,1115,1,0,0,0,1115,1116,
1,0,0,0,1116,1118,3,198,99,0,1117,1119,3,252,126,0,1118,1117,1,0,0,0,1118,
1119,1,0,0,0,1119,1120,1,0,0,0,1120,1121,3,218,109,0,1121,217,1,0,0,0,1122,
1128,3,102,51,0,1123,1124,5,82,0,0,1124,1125,5,40,0,0,1125,1128,5,107,0,
0,1126,1128,5,107,0,0,1127,1122,1,0,0,0,1127,1123,1,0,0,0,1127,1126,1,0,
0,0,1128,219,1,0,0,0,1129,1135,3,222,111,0,1130,1131,5,66,0,0,1131,1132,
3,50,25,0,1132,1133,5,67,0,0,1133,1135,1,0,0,0,1134,1129,1,0,0,0,1134,1130,
1,0,0,0,1135,221,1,0,0,0,1136,1137,5,82,0,0,1137,1140,3,224,112,0,1138,1140,
3,228,114,0,1139,1136,1,0,0,0,1139,1138,1,0,0,0,1140,223,1,0,0,0,1141,1144,
3,88,44,0,1142,1144,3,228,114,0,1143,1141,1,0,0,0,1143,1142,1,0,0,0,1144,
225,1,0,0,0,1145,1150,3,224,112,0,1146,1147,5,103,0,0,1147,1149,3,224,112,
0,1148,1146,1,0,0,0,1149,1152,1,0,0,0,1150,1148,1,0,0,0,1150,1151,1,0,0,
0,1151,1154,1,0,0,0,1152,1150,1,0,0,0,1153,1155,5,103,0,0,1154,1153,1,0,
0,0,1154,1155,1,0,0,0,1155,227,1,0,0,0,1156,1161,7,13,0,0,1157,1159,3,226,
113,0,1158,1160,5,103,0,0,1159,1158,1,0,0,0,1159,1160,1,0,0,0,1160,1162,
1,0,0,0,1161,1157,1,0,0,0,1161,1162,1,0,0,0,1162,1163,1,0,0,0,1163,1164,
7,14,0,0,1164,229,1,0,0,0,1165,1166,5,109,0,0,1166,231,1,0,0,0,1167,1168,
3,234,117,0,1168,1170,5,70,0,0,1169,1171,3,242,121,0,1170,1169,1,0,0,0,1170,
1171,1,0,0,0,1171,1172,1,0,0,0,1172,1173,5,71,0,0,1173,233,1,0,0,0,1174,
1176,3,6,3,0,1175,1174,1,0,0,0,1175,1176,1,0,0,0,1176,1177,1,0,0,0,1177,
1182,3,240,120,0,1178,1180,3,236,118,0,1179,1181,3,238,119,0,1180,1179,1,
0,0,0,1180,1181,1,0,0,0,1181,1183,1,0,0,0,1182,1178,1,0,0,0,1182,1183,1,
0,0,0,1183,1185,1,0,0,0,1184,1186,3,256,128,0,1185,1184,1,0,0,0,1185,1186,
1,0,0,0,1186,235,1,0,0,0,1187,1189,3,28,14,0,1188,1187,1,0,0,0,1188,1189,
1,0,0,0,1189,1190,1,0,0,0,1190,1191,3,230,115,0,1191,237,1,0,0,0,1192,1193,
5,46,0,0,1193,239,1,0,0,0,1194,1195,7,15,0,0,1195,241,1,0,0,0,1196,1201,
3,244,122,0,1197,1198,3,266,133,0,1198,1199,5,105,0,0,1199,1201,1,0,0,0,
1200,1196,1,0,0,0,1200,1197,1,0,0,0,1201,1202,1,0,0,0,1202,1200,1,0,0,0,
1202,1203,1,0,0,0,1203,243,1,0,0,0,1204,1209,3,246,123,0,1205,1209,3,216,
108,0,1206,1209,3,128,64,0,1207,1209,3,132,66,0,1208,1204,1,0,0,0,1208,1205,
1,0,0,0,1208,1206,1,0,0,0,1208,1207,1,0,0,0,1209,245,1,0,0,0,1210,1212,3,
8,4,0,1211,1210,1,0,0,0,1211,1212,1,0,0,0,1212,1214,1,0,0,0,1213,1215,3,
266,133,0,1214,1213,1,0,0,0,1214,1215,1,0,0,0,1215,1217,1,0,0,0,1216,1218,
5,40,0,0,1217,1216,1,0,0,0,1217,1218,1,0,0,0,1218,1220,1,0,0,0,1219,1221,
3,136,68,0,1220,1219,1,0,0,0,1220,1221,1,0,0,0,1221,1224,1,0,0,0,1222,1225,
3,248,124,0,1223,1225,3,88,44,0,1224,1222,1,0,0,0,1224,1223,1,0,0,0,1224,
1225,1,0,0,0,1225,1226,1,0,0,0,1226,1227,5,107,0,0,1227,247,1,0,0,0,1228,
1233,3,250,125,0,1229,1230,5,103,0,0,1230,1232,3,250,125,0,1231,1229,1,0,
0,0,1232,1235,1,0,0,0,1233,1231,1,0,0,0,1233,1234,1,0,0,0,1234,249,1,0,0,
0,1235,1233,1,0,0,0,1236,1243,3,198,99,0,1237,1239,3,252,126,0,1238,1237,
1,0,0,0,1238,1239,1,0,0,0,1239,1244,1,0,0,0,1240,1242,3,222,111,0,1241,1240,
1,0,0,0,1241,1242,1,0,0,0,1242,1244,1,0,0,0,1243,1238,1,0,0,0,1243,1241,
1,0,0,0,1244,1252,1,0,0,0,1245,1247,5,109,0,0,1246,1245,1,0,0,0,1246,1247,
1,0,0,0,1247,1248,1,0,0,0,1248,1249,5,105,0,0,1249,1252,3,94,47,0,1250,1252,
5,109,0,0,1251,1236,1,0,0,0,1251,1246,1,0,0,0,1251,1250,1,0,0,0,1252,251,
1,0,0,0,1253,1255,3,254,127,0,1254,1253,1,0,0,0,1255,1256,1,0,0,0,1256,1254,
1,0,0,0,1256,1257,1,0,0,0,1257,253,1,0,0,0,1258,1259,7,16,0,0,1259,255,1,
0,0,0,1260,1261,5,105,0,0,1261,1262,3,258,129,0,1262,257,1,0,0,0,1263,1268,
3,260,130,0,1264,1265,5,103,0,0,1265,1267,3,260,130,0,1266,1264,1,0,0,0,
1267,1270,1,0,0,0,1268,1266,1,0,0,0,1268,1269,1,0,0,0,1269,259,1,0,0,0,1270,
1268,1,0,0,0,1271,1284,3,264,132,0,1272,1274,5,63,0,0,1273,1275,3,266,133,
0,1274,1273,1,0,0,0,1274,1275,1,0,0,0,1275,1276,1,0,0,0,1276,1284,3,264,
132,0,1277,1279,3,266,133,0,1278,1280,5,63,0,0,1279,1278,1,0,0,0,1279,1280,
1,0,0,0,1280,1281,1,0,0,0,1281,1282,3,264,132,0,1282,1284,1,0,0,0,1283,1271,
1,0,0,0,1283,1272,1,0,0,0,1283,1277,1,0,0,0,1284,261,1,0,0,0,1285,1287,3,
28,14,0,1286,1285,1,0,0,0,1286,1287,1,0,0,0,1287,1288,1,0,0,0,1288,1291,
3,230,115,0,1289,1291,3,156,78,0,1290,1286,1,0,0,0,1290,1289,1,0,0,0,1291,
263,1,0,0,0,1292,1293,3,262,131,0,1293,265,1,0,0,0,1294,1295,7,17,0,0,1295,
267,1,0,0,0,1296,1297,5,52,0,0,1297,1298,3,272,136,0,1298,269,1,0,0,0,1299,
1303,5,52,0,0,1300,1301,5,4,0,0,1301,1304,5,109,0,0,1302,1304,5,117,0,0,
1303,1300,1,0,0,0,1303,1302,1,0,0,0,1304,271,1,0,0,0,1305,1346,1,0,0,0,1306,
1346,5,72,0,0,1307,1346,5,73,0,0,1308,1346,5,74,0,0,1309,1346,5,75,0,0,1310,
1346,5,76,0,0,1311,1346,5,77,0,0,1312,1346,5,78,0,0,1313,1346,5,79,0,0,1314,
1346,5,80,0,0,1315,1346,5,81,0,0,1316,1346,5,82,0,0,1317,1346,5,84,0,0,1318,
1346,5,83,0,0,1319,1346,5,98,0,0,1320,1346,5,85,0,0,1321,1346,5,86,0,0,1322,
1346,5,87,0,0,1323,1346,5,89,0,0,1324,1346,5,90,0,0,1325,1346,5,91,0,0,1326,
1346,5,92,0,0,1327,1328,5,83,0,0,1328,1346,5,83,0,0,1329,1330,5,84,0,0,1330,
1346,5,84,0,0,1331,1346,5,94,0,0,1332,1346,5,93,0,0,1333,1346,5,95,0,0,1334,
1346,5,96,0,0,1335,1346,5,97,0,0,1336,1346,5,99,0,0,1337,1346,5,100,0,0,
1338,1346,5,101,0,0,1339,1346,5,102,0,0,1340,1346,5,103,0,0,1341,1342,5,
66,0,0,1342,1346,5,67,0,0,1343,1344,5,68,0,0,1344,1346,5,69,0,0,1345,1305,
1,0,0,0,1345,1306,1,0,0,0,1345,1307,1,0,0,0,1345,1308,1,0,0,0,1345,1309,
1,0,0,0,1345,1310,1,0,0,0,1345,1311,1,0,0,0,1345,1312,1,0,0,0,1345,1313,
1,0,0,0,1345,1314,1,0,0,0,1345,1315,1,0,0,0,1345,1316,1,0,0,0,1345,1317,
1,0,0,0,1345,1318,1,0,0,0,1345,1319,1,0,0,0,1345,1320,1,0,0,0,1345,1321,
1,0,0,0,1345,1322,1,0,0,0,1345,1323,1,0,0,0,1345,1324,1,0,0,0,1345,1325,
1,0,0,0,1345,1326,1,0,0,0,1345,1327,1,0,0,0,1345,1329,1,0,0,0,1345,1331,
1,0,0,0,1345,1332,1,0,0,0,1345,1333,1,0,0,0,1345,1334,1,0,0,0,1345,1335,
1,0,0,0,1345,1336,1,0,0,0,1345,1337,1,0,0,0,1345,1338,1,0,0,0,1345,1339,
1,0,0,0,1345,1340,1,0,0,0,1345,1341,1,0,0,0,1345,1343,1,0,0,0,1346,273,1,
0,0,0,1347,1355,5,1,0,0,1348,1355,5,2,0,0,1349,1355,5,3,0,0,1350,1355,5,
4,0,0,1351,1355,3,18,9,0,1352,1355,5,5,0,0,1353,1355,5,51,0,0,1354,1347,
1,0,0,0,1354,1348,1,0,0,0,1354,1349,1,0,0,0,1354,1350,1,0,0,0,1354,1351,
1,0,0,0,1354,1352,1,0,0,0,1354,1353,1,0,0,0,1355,275,1,0,0,0,166,277,286,
292,297,304,311,321,327,331,337,349,357,366,370,378,380,389,398,403,409,
417,419,428,433,436,440,443,450,459,466,470,483,487,493,500,507,511,513,
519,524,535,541,548,558,562,573,580,588,597,604,611,619,627,635,643,651,
659,668,675,684,696,698,704,710,716,723,732,740,748,750,770,774,780,785,
789,796,803,807,816,823,829,837,841,849,854,863,870,875,880,883,903,910,
915,921,925,929,932,940,942,948,951,954,959,973,979,985,992,996,1009,1016,
1033,1035,1042,1047,1059,1062,1066,1071,1075,1078,1093,1098,1102,1105,1108,
1111,1114,1118,1127,1134,1139,1143,1150,1154,1159,1161,1170,1175,1180,1182,
1185,1188,1200,1202,1208,1211,1214,1217,1220,1224,1233,1238,1241,1243,1246,
1251,1256,1268,1274,1279,1283,1286,1290,1303,1345,1354];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class UnrealAngelscriptParser extends antlr4.Parser {

    static grammarFileName = "UnrealAngelscriptParser.g4";
    static literalNames = [ null, null, null, null, null, null, "'Cast'", 
                            "'UCLASS'", "'USTRUCT'", "'UPROPERTY'", "'UFUNCTION'", 
                            "'import'", "'from'", "'out'", "'property'", 
                            "'ensure'", "'ensureAlways'", "'check'", "'mixin'", 
                            "'int'", "'int8'", "'int16'", "'int32'", "'int64'", 
                            "'uint'", "'uint8'", "'uint16'", "'uint32'", 
                            "'uint64'", "'float'", "'double'", "'bool'", 
                            "'auto'", "'break'", "'case'", "'catch'", "'char'", 
                            "'class'", "'const'", "'continue'", "'default'", 
                            "'do'", "'else'", "'enum'", "'export'", "'false'", 
                            "'final'", "'for'", "'goto'", "'if'", "'namespace'", 
                            "'nullptr'", "'operator'", "'override'", "'private'", 
                            "'protected'", "'public'", "'return'", "'short'", 
                            "'struct'", "'switch'", "'this'", "'true'", 
                            "'virtual'", "'void'", "'while'", "'('", "')'", 
                            "'['", "']'", "'{'", "'}'", "'+'", "'-'", "'*'", 
                            "'/'", "'%'", null, "'&'", "'|'", "'~'", "'!'", 
                            "'='", "'<'", "'>'", "'+='", "'-='", "'*='", 
                            "'/='", "'%='", "'^='", "'&='", "'|='", "'<<='", 
                            "'>>='", "'=='", "'!='", "'<='", "'>='", "'&&'", 
                            "'||'", "'++'", "'--'", "','", "'?'", "':'", 
                            "'::'", "';'", "'.'" ];
    static symbolicNames = [ null, "IntegerLiteral", "CharacterLiteral", 
                             "FloatingLiteral", "StringLiteral", "UserDefinedLiteral", 
                             "Cast", "UClass", "UStruct", "UProperty", "UFunction", 
                             "Import", "From", "Out", "Property", "Ensure", 
                             "EnsureAlways", "Check", "Mixin", "Int", "Int8", 
                             "Int16", "Int32", "Int64", "UInt", "UInt8", 
                             "UInt16", "UInt32", "UInt64", "Float", "Double", 
                             "Bool", "Auto", "Break", "Case", "Catch", "Char", 
                             "Class", "Const", "Continue", "Default", "Do", 
                             "Else", "Enum", "Export", "False_", "Final", 
                             "For", "Goto", "If", "Namespace", "Nullptr", 
                             "Operator", "Override", "Private", "Protected", 
                             "Public", "Return", "Short", "Struct", "Switch", 
                             "This", "True_", "Virtual", "Void", "While", 
                             "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
                             "LeftBrace", "RightBrace", "Plus", "Minus", 
                             "Star", "Div", "Mod", "Xor", "And", "Or", "Tilde", 
                             "Not", "Assign", "Less", "Greater", "PlusAssign", 
                             "MinusAssign", "StarAssign", "DivAssign", "ModAssign", 
                             "XorAssign", "AndAssign", "OrAssign", "LeftShiftAssign", 
                             "RightShiftAssign", "Equal", "NotEqual", "LessEqual", 
                             "GreaterEqual", "AndAnd", "OrOr", "PlusPlus", 
                             "MinusMinus", "Comma", "Question", "Colon", 
                             "Doublecolon", "Semi", "Dot", "Identifier", 
                             "DecimalLiteral", "OctalLiteral", "HexadecimalLiteral", 
                             "BinaryLiteral", "Integersuffix", "UserDefinedIntegerLiteral", 
                             "UserDefinedFloatingLiteral", "UserDefinedStringLiteral", 
                             "UserDefinedCharacterLiteral", "Whitespace", 
                             "Newline", "BlockComment", "LineComment", "PreprocessorBranchRemoval", 
                             "Preprocessor" ];
    static ruleNames = [ "script", "annotationList", "annotation", "utype", 
                         "uproperty", "ufunction", "moduleImport", "asGeneric", 
                         "simpleTypeSpecifierList", "booleanLiteral", "primaryExpression", 
                         "idExpression", "unqualifiedId", "qualifiedId", 
                         "nestedNameSpecifier", "lambdaExpression", "lambdaIntroducer", 
                         "lambdaCapture", "captureDefault", "captureList", 
                         "capture", "simpleCapture", "initcapture", "lambdaDeclarator", 
                         "postfixExpression", "expressionList", "pseudoDestructorName", 
                         "unaryExpression", "unaryOperator", "newPlacement", 
                         "newInitializer_", "castExpression", "multiplicativeExpression", 
                         "additiveExpression", "shiftExpression", "shiftOperator", 
                         "relationalExpression", "equalityExpression", "andExpression", 
                         "exclusiveOrExpression", "inclusiveOrExpression", 
                         "logicalAndExpression", "logicalOrExpression", 
                         "conditionalExpression", "assignmentExpression", 
                         "assignmentOperator", "expression", "constantExpression", 
                         "statement", "labeledStatement", "expressionStatement", 
                         "compoundStatement", "statementSeq", "selectionStatement", 
                         "condition", "iterationStatement", "forInitStatement", 
                         "forRangeDeclaration", "forRangeInitializer", "jumpStatement", 
                         "declarationStatement", "declarationseq", "declaration", 
                         "blockDeclaration", "aliasDeclaration", "simpleDeclaration", 
                         "emptyDeclaration_", "declSpecifier", "declSpecifierSeq", 
                         "functionSpecifier", "typedefName", "typeSpecifier", 
                         "trailingTypeSpecifier", "typeSpecifierSeq", "trailingTypeSpecifierSeq", 
                         "simpleTypeSpecifier", "assertSpecifier", "theTypeName", 
                         "decltypeSpecifier", "elaboratedTypeSpecifier", 
                         "enumName", "enumSpecifier", "enumHead", "opaqueEnumDeclaration", 
                         "enumkey", "enumbase", "enumeratorList", "enumeratorDefinition", 
                         "enumerator", "namespaceName", "originalNamespaceName", 
                         "namespaceDefinition", "namespaceAlias", "namespaceAliasDefinition", 
                         "qualifiednamespacespecifier", "balancedTokenSeq", 
                         "balancedtoken", "initDeclaratorList", "initDeclarator", 
                         "declarator", "declaratorDef", "parametersAndQualifiers", 
                         "refqualifier", "declaratorid", "theTypeId", "parameterDeclarationClause", 
                         "parameterDeclarationList", "parameterDeclaration", 
                         "functionDefinition", "functionBody", "initializer", 
                         "braceOrEqualInitializer", "initializerClause", 
                         "initializerList", "bracedInitList", "className", 
                         "classSpecifier", "classHead", "classHeadName", 
                         "classVirtSpecifier", "classKey", "memberSpecification", 
                         "memberdeclaration", "propertyDefinition", "memberDeclaratorList", 
                         "memberDeclarator", "postFuncSpecifierSeq", "virtualSpecifier", 
                         "baseClause", "baseSpecifierList", "baseSpecifier", 
                         "classOrDeclType", "baseTypeSpecifier", "accessSpecifier", 
                         "operatorFunctionId", "literalOperatorId", "theOperator", 
                         "literal" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = UnrealAngelscriptParser.ruleNames;
        this.literalNames = UnrealAngelscriptParser.literalNames;
        this.symbolicNames = UnrealAngelscriptParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 14:
    	    		return this.nestedNameSpecifier_sempred(localctx, predIndex);
    	case 24:
    	    		return this.postfixExpression_sempred(localctx, predIndex);
    	case 100:
    	    		return this.declaratorDef_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    nestedNameSpecifier_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    postfixExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 8);
    		case 2:
    			return this.precpred(this._ctx, 6);
    		case 3:
    			return this.precpred(this._ctx, 4);
    		case 4:
    			return this.precpred(this._ctx, 3);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    declaratorDef_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	script() {
	    let localctx = new ScriptContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, UnrealAngelscriptParser.RULE_script);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 277;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << UnrealAngelscriptParser.IntegerLiteral) | (1 << UnrealAngelscriptParser.CharacterLiteral) | (1 << UnrealAngelscriptParser.FloatingLiteral) | (1 << UnrealAngelscriptParser.StringLiteral) | (1 << UnrealAngelscriptParser.UserDefinedLiteral) | (1 << UnrealAngelscriptParser.Cast) | (1 << UnrealAngelscriptParser.UClass) | (1 << UnrealAngelscriptParser.UStruct) | (1 << UnrealAngelscriptParser.UFunction) | (1 << UnrealAngelscriptParser.Import) | (1 << UnrealAngelscriptParser.Out) | (1 << UnrealAngelscriptParser.Ensure) | (1 << UnrealAngelscriptParser.EnsureAlways) | (1 << UnrealAngelscriptParser.Check) | (1 << UnrealAngelscriptParser.Mixin) | (1 << UnrealAngelscriptParser.Int) | (1 << UnrealAngelscriptParser.Int8) | (1 << UnrealAngelscriptParser.Int16) | (1 << UnrealAngelscriptParser.Int32) | (1 << UnrealAngelscriptParser.Int64) | (1 << UnrealAngelscriptParser.UInt) | (1 << UnrealAngelscriptParser.UInt8) | (1 << UnrealAngelscriptParser.UInt16) | (1 << UnrealAngelscriptParser.UInt32) | (1 << UnrealAngelscriptParser.UInt64) | (1 << UnrealAngelscriptParser.Float) | (1 << UnrealAngelscriptParser.Double) | (1 << UnrealAngelscriptParser.Bool))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (UnrealAngelscriptParser.Auto - 32)) | (1 << (UnrealAngelscriptParser.Class - 32)) | (1 << (UnrealAngelscriptParser.Const - 32)) | (1 << (UnrealAngelscriptParser.Enum - 32)) | (1 << (UnrealAngelscriptParser.False_ - 32)) | (1 << (UnrealAngelscriptParser.Namespace - 32)) | (1 << (UnrealAngelscriptParser.Nullptr - 32)) | (1 << (UnrealAngelscriptParser.Operator - 32)) | (1 << (UnrealAngelscriptParser.Private - 32)) | (1 << (UnrealAngelscriptParser.Protected - 32)) | (1 << (UnrealAngelscriptParser.Public - 32)) | (1 << (UnrealAngelscriptParser.Struct - 32)) | (1 << (UnrealAngelscriptParser.This - 32)) | (1 << (UnrealAngelscriptParser.True_ - 32)) | (1 << (UnrealAngelscriptParser.Virtual - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (UnrealAngelscriptParser.Void - 64)) | (1 << (UnrealAngelscriptParser.LeftParen - 64)) | (1 << (UnrealAngelscriptParser.LeftBracket - 64)) | (1 << (UnrealAngelscriptParser.Plus - 64)) | (1 << (UnrealAngelscriptParser.Minus - 64)) | (1 << (UnrealAngelscriptParser.Star - 64)) | (1 << (UnrealAngelscriptParser.And - 64)) | (1 << (UnrealAngelscriptParser.Or - 64)) | (1 << (UnrealAngelscriptParser.Tilde - 64)) | (1 << (UnrealAngelscriptParser.Not - 64)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (UnrealAngelscriptParser.PlusPlus - 101)) | (1 << (UnrealAngelscriptParser.MinusMinus - 101)) | (1 << (UnrealAngelscriptParser.Doublecolon - 101)) | (1 << (UnrealAngelscriptParser.Semi - 101)) | (1 << (UnrealAngelscriptParser.Identifier - 101)))) !== 0)) {
	            this.state = 276;
	            this.declarationseq();
	        }

	        this.state = 279;
	        this.match(UnrealAngelscriptParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationList() {
	    let localctx = new AnnotationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, UnrealAngelscriptParser.RULE_annotationList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 281;
	        this.annotation();
	        this.state = 286;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===UnrealAngelscriptParser.Comma) {
	            this.state = 282;
	            this.match(UnrealAngelscriptParser.Comma);
	            this.state = 283;
	            this.annotation();
	            this.state = 288;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation() {
	    let localctx = new AnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, UnrealAngelscriptParser.RULE_annotation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 289;
	        this.match(UnrealAngelscriptParser.Identifier);
	        this.state = 292;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===UnrealAngelscriptParser.Assign) {
	            this.state = 290;
	            this.match(UnrealAngelscriptParser.Assign);
	            this.state = 291;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	utype() {
	    let localctx = new UtypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, UnrealAngelscriptParser.RULE_utype);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 294;
	        _la = this._input.LA(1);
	        if(!(_la===UnrealAngelscriptParser.UClass || _la===UnrealAngelscriptParser.UStruct)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 295;
	        this.match(UnrealAngelscriptParser.LeftParen);
	        this.state = 297;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===UnrealAngelscriptParser.Identifier) {
	            this.state = 296;
	            this.annotationList();
	        }

	        this.state = 299;
	        this.match(UnrealAngelscriptParser.RightParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uproperty() {
	    let localctx = new UpropertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, UnrealAngelscriptParser.RULE_uproperty);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 301;
	        this.match(UnrealAngelscriptParser.UProperty);
	        this.state = 302;
	        this.match(UnrealAngelscriptParser.LeftParen);
	        this.state = 304;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===UnrealAngelscriptParser.Identifier) {
	            this.state = 303;
	            this.annotationList();
	        }

	        this.state = 306;
	        this.match(UnrealAngelscriptParser.RightParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ufunction() {
	    let localctx = new UfunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, UnrealAngelscriptParser.RULE_ufunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 308;
	        this.match(UnrealAngelscriptParser.UFunction);
	        this.state = 309;
	        this.match(UnrealAngelscriptParser.LeftParen);
	        this.state = 311;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===UnrealAngelscriptParser.Identifier) {
	            this.state = 310;
	            this.annotationList();
	        }

	        this.state = 313;
	        this.match(UnrealAngelscriptParser.RightParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleImport() {
	    let localctx = new ModuleImportContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, UnrealAngelscriptParser.RULE_moduleImport);
	    var _la = 0; // Token type
	    try {
	        this.state = 337;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 315;
	            this.match(UnrealAngelscriptParser.Import);
	            this.state = 316;
	            this.match(UnrealAngelscriptParser.Identifier);
	            this.state = 321;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===UnrealAngelscriptParser.Dot) {
	                this.state = 317;
	                this.match(UnrealAngelscriptParser.Dot);
	                this.state = 318;
	                this.match(UnrealAngelscriptParser.Identifier);
	                this.state = 323;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 324;
	            this.match(UnrealAngelscriptParser.Semi);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 325;
	            this.match(UnrealAngelscriptParser.Import);
	            this.state = 327;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	            if(la_===1) {
	                this.state = 326;
	                this.declSpecifierSeq();

	            }
	            this.state = 329;
	            this.declarator();
	            this.state = 331;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===UnrealAngelscriptParser.Property || _la===UnrealAngelscriptParser.Final || _la===UnrealAngelscriptParser.Override) {
	                this.state = 330;
	                this.postFuncSpecifierSeq();
	            }

	            this.state = 333;
	            this.match(UnrealAngelscriptParser.From);
	            this.state = 334;
	            this.match(UnrealAngelscriptParser.StringLiteral);
	            this.state = 335;
	            this.match(UnrealAngelscriptParser.Semi);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	asGeneric() {
	    let localctx = new AsGenericContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, UnrealAngelscriptParser.RULE_asGeneric);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 339;
	        this.match(UnrealAngelscriptParser.Identifier);
	        this.state = 340;
	        this.match(UnrealAngelscriptParser.Less);
	        this.state = 341;
	        this.simpleTypeSpecifierList();
	        this.state = 342;
	        this.match(UnrealAngelscriptParser.Greater);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleTypeSpecifierList() {
	    let localctx = new SimpleTypeSpecifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, UnrealAngelscriptParser.RULE_simpleTypeSpecifierList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 344;
	        this.declSpecifierSeq();
	        this.state = 349;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===UnrealAngelscriptParser.Comma) {
	            this.state = 345;
	            this.match(UnrealAngelscriptParser.Comma);
	            this.state = 346;
	            this.declSpecifierSeq();
	            this.state = 351;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanLiteral() {
	    let localctx = new BooleanLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, UnrealAngelscriptParser.RULE_booleanLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 352;
	        _la = this._input.LA(1);
	        if(!(_la===UnrealAngelscriptParser.False_ || _la===UnrealAngelscriptParser.True_)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryExpression() {
	    let localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, UnrealAngelscriptParser.RULE_primaryExpression);
	    try {
	        this.state = 366;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 355; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 354;
	            		this.literal();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 357; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,11, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 359;
	            this.match(UnrealAngelscriptParser.This);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 360;
	            this.match(UnrealAngelscriptParser.LeftParen);
	            this.state = 361;
	            this.expression();
	            this.state = 362;
	            this.match(UnrealAngelscriptParser.RightParen);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 364;
	            this.idExpression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 365;
	            this.lambdaExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	idExpression() {
	    let localctx = new IdExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, UnrealAngelscriptParser.RULE_idExpression);
	    try {
	        this.state = 370;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 368;
	            this.unqualifiedId();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 369;
	            this.qualifiedId();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unqualifiedId() {
	    let localctx = new UnqualifiedIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, UnrealAngelscriptParser.RULE_unqualifiedId);
	    try {
	        this.state = 380;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 372;
	            this.match(UnrealAngelscriptParser.Identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 373;
	            this.operatorFunctionId();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 374;
	            this.literalOperatorId();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 375;
	            this.match(UnrealAngelscriptParser.Tilde);
	            this.state = 378;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case UnrealAngelscriptParser.Identifier:
	                this.state = 376;
	                this.className();
	                break;
	            case UnrealAngelscriptParser.LeftParen:
	                this.state = 377;
	                this.decltypeSpecifier();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedId() {
	    let localctx = new QualifiedIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, UnrealAngelscriptParser.RULE_qualifiedId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 382;
	        this.nestedNameSpecifier(0);
	        this.state = 383;
	        this.unqualifiedId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	nestedNameSpecifier(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new NestedNameSpecifierContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 28;
	    this.enterRecursionRule(localctx, 28, UnrealAngelscriptParser.RULE_nestedNameSpecifier, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 389;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        if(la_===1) {
	            this.state = 386;
	            this.theTypeName();

	        } else if(la_===2) {
	            this.state = 387;
	            this.namespaceName();

	        } else if(la_===3) {
	            this.state = 388;
	            this.decltypeSpecifier();

	        }
	        this.state = 391;
	        this.match(UnrealAngelscriptParser.Doublecolon);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 398;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,17,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new NestedNameSpecifierContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, UnrealAngelscriptParser.RULE_nestedNameSpecifier);
	                this.state = 393;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 394;
	                this.match(UnrealAngelscriptParser.Identifier);
	                this.state = 395;
	                this.match(UnrealAngelscriptParser.Doublecolon); 
	            }
	            this.state = 400;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,17,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	lambdaExpression() {
	    let localctx = new LambdaExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, UnrealAngelscriptParser.RULE_lambdaExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 401;
	        this.lambdaIntroducer();
	        this.state = 403;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===UnrealAngelscriptParser.LeftParen) {
	            this.state = 402;
	            this.lambdaDeclarator();
	        }

	        this.state = 405;
	        this.compoundStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaIntroducer() {
	    let localctx = new LambdaIntroducerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, UnrealAngelscriptParser.RULE_lambdaIntroducer);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 407;
	        this.match(UnrealAngelscriptParser.LeftBracket);
	        this.state = 409;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (UnrealAngelscriptParser.This - 61)) | (1 << (UnrealAngelscriptParser.And - 61)) | (1 << (UnrealAngelscriptParser.Assign - 61)))) !== 0) || _la===UnrealAngelscriptParser.Identifier) {
	            this.state = 408;
	            this.lambdaCapture();
	        }

	        this.state = 411;
	        this.match(UnrealAngelscriptParser.RightBracket);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaCapture() {
	    let localctx = new LambdaCaptureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, UnrealAngelscriptParser.RULE_lambdaCapture);
	    var _la = 0; // Token type
	    try {
	        this.state = 419;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 413;
	            this.captureList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 414;
	            this.captureDefault();
	            this.state = 417;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===UnrealAngelscriptParser.Comma) {
	                this.state = 415;
	                this.match(UnrealAngelscriptParser.Comma);
	                this.state = 416;
	                this.captureList();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	captureDefault() {
	    let localctx = new CaptureDefaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, UnrealAngelscriptParser.RULE_captureDefault);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 421;
	        _la = this._input.LA(1);
	        if(!(_la===UnrealAngelscriptParser.And || _la===UnrealAngelscriptParser.Assign)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	captureList() {
	    let localctx = new CaptureListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, UnrealAngelscriptParser.RULE_captureList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 423;
	        this.capture();
	        this.state = 428;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===UnrealAngelscriptParser.Comma) {
	            this.state = 424;
	            this.match(UnrealAngelscriptParser.Comma);
	            this.state = 425;
	            this.capture();
	            this.state = 430;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	capture() {
	    let localctx = new CaptureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, UnrealAngelscriptParser.RULE_capture);
	    try {
	        this.state = 433;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 431;
	            this.simpleCapture();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 432;
	            this.initcapture();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleCapture() {
	    let localctx = new SimpleCaptureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, UnrealAngelscriptParser.RULE_simpleCapture);
	    var _la = 0; // Token type
	    try {
	        this.state = 440;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case UnrealAngelscriptParser.And:
	        case UnrealAngelscriptParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 436;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===UnrealAngelscriptParser.And) {
	                this.state = 435;
	                this.match(UnrealAngelscriptParser.And);
	            }

	            this.state = 438;
	            this.match(UnrealAngelscriptParser.Identifier);
	            break;
	        case UnrealAngelscriptParser.This:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 439;
	            this.match(UnrealAngelscriptParser.This);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initcapture() {
	    let localctx = new InitcaptureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, UnrealAngelscriptParser.RULE_initcapture);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 443;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===UnrealAngelscriptParser.And) {
	            this.state = 442;
	            this.match(UnrealAngelscriptParser.And);
	        }

	        this.state = 445;
	        this.match(UnrealAngelscriptParser.Identifier);
	        this.state = 446;
	        this.initializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaDeclarator() {
	    let localctx = new LambdaDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, UnrealAngelscriptParser.RULE_lambdaDeclarator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 448;
	        this.match(UnrealAngelscriptParser.LeftParen);
	        this.state = 450;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 7)) & ~0x1f) == 0 && ((1 << (_la - 7)) & ((1 << (UnrealAngelscriptParser.UClass - 7)) | (1 << (UnrealAngelscriptParser.UStruct - 7)) | (1 << (UnrealAngelscriptParser.Out - 7)) | (1 << (UnrealAngelscriptParser.Int - 7)) | (1 << (UnrealAngelscriptParser.Int8 - 7)) | (1 << (UnrealAngelscriptParser.Int16 - 7)) | (1 << (UnrealAngelscriptParser.Int32 - 7)) | (1 << (UnrealAngelscriptParser.Int64 - 7)) | (1 << (UnrealAngelscriptParser.UInt - 7)) | (1 << (UnrealAngelscriptParser.UInt8 - 7)) | (1 << (UnrealAngelscriptParser.UInt16 - 7)) | (1 << (UnrealAngelscriptParser.UInt32 - 7)) | (1 << (UnrealAngelscriptParser.UInt64 - 7)) | (1 << (UnrealAngelscriptParser.Float - 7)) | (1 << (UnrealAngelscriptParser.Double - 7)) | (1 << (UnrealAngelscriptParser.Bool - 7)) | (1 << (UnrealAngelscriptParser.Auto - 7)) | (1 << (UnrealAngelscriptParser.Class - 7)) | (1 << (UnrealAngelscriptParser.Const - 7)))) !== 0) || ((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (UnrealAngelscriptParser.Enum - 43)) | (1 << (UnrealAngelscriptParser.Struct - 43)) | (1 << (UnrealAngelscriptParser.Virtual - 43)) | (1 << (UnrealAngelscriptParser.Void - 43)) | (1 << (UnrealAngelscriptParser.LeftParen - 43)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (UnrealAngelscriptParser.And - 78)) | (1 << (UnrealAngelscriptParser.Doublecolon - 78)) | (1 << (UnrealAngelscriptParser.Identifier - 78)))) !== 0)) {
	            this.state = 449;
	            this.parameterDeclarationClause();
	        }

	        this.state = 452;
	        this.match(UnrealAngelscriptParser.RightParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	postfixExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new PostfixExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 48;
	    this.enterRecursionRule(localctx, 48, UnrealAngelscriptParser.RULE_postfixExpression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 487;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 455;
	            this.primaryExpression();
	            break;

	        case 2:
	            this.state = 456;
	            this.assertSpecifier();
	            this.state = 457;
	            this.match(UnrealAngelscriptParser.LeftParen);
	            this.state = 459;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (UnrealAngelscriptParser.IntegerLiteral - 1)) | (1 << (UnrealAngelscriptParser.CharacterLiteral - 1)) | (1 << (UnrealAngelscriptParser.FloatingLiteral - 1)) | (1 << (UnrealAngelscriptParser.StringLiteral - 1)) | (1 << (UnrealAngelscriptParser.UserDefinedLiteral - 1)) | (1 << (UnrealAngelscriptParser.Cast - 1)) | (1 << (UnrealAngelscriptParser.Ensure - 1)) | (1 << (UnrealAngelscriptParser.EnsureAlways - 1)) | (1 << (UnrealAngelscriptParser.Check - 1)) | (1 << (UnrealAngelscriptParser.Int - 1)) | (1 << (UnrealAngelscriptParser.Int8 - 1)) | (1 << (UnrealAngelscriptParser.Int16 - 1)) | (1 << (UnrealAngelscriptParser.Int32 - 1)) | (1 << (UnrealAngelscriptParser.Int64 - 1)) | (1 << (UnrealAngelscriptParser.UInt - 1)) | (1 << (UnrealAngelscriptParser.UInt8 - 1)) | (1 << (UnrealAngelscriptParser.UInt16 - 1)) | (1 << (UnrealAngelscriptParser.UInt32 - 1)) | (1 << (UnrealAngelscriptParser.UInt64 - 1)) | (1 << (UnrealAngelscriptParser.Float - 1)) | (1 << (UnrealAngelscriptParser.Double - 1)) | (1 << (UnrealAngelscriptParser.Bool - 1)) | (1 << (UnrealAngelscriptParser.Auto - 1)))) !== 0) || ((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (UnrealAngelscriptParser.False_ - 45)) | (1 << (UnrealAngelscriptParser.Nullptr - 45)) | (1 << (UnrealAngelscriptParser.Operator - 45)) | (1 << (UnrealAngelscriptParser.This - 45)) | (1 << (UnrealAngelscriptParser.True_ - 45)) | (1 << (UnrealAngelscriptParser.Void - 45)) | (1 << (UnrealAngelscriptParser.LeftParen - 45)) | (1 << (UnrealAngelscriptParser.LeftBracket - 45)) | (1 << (UnrealAngelscriptParser.LeftBrace - 45)) | (1 << (UnrealAngelscriptParser.Plus - 45)) | (1 << (UnrealAngelscriptParser.Minus - 45)) | (1 << (UnrealAngelscriptParser.Star - 45)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (UnrealAngelscriptParser.And - 78)) | (1 << (UnrealAngelscriptParser.Or - 78)) | (1 << (UnrealAngelscriptParser.Tilde - 78)) | (1 << (UnrealAngelscriptParser.Not - 78)) | (1 << (UnrealAngelscriptParser.PlusPlus - 78)) | (1 << (UnrealAngelscriptParser.MinusMinus - 78)) | (1 << (UnrealAngelscriptParser.Doublecolon - 78)) | (1 << (UnrealAngelscriptParser.Identifier - 78)))) !== 0)) {
	                this.state = 458;
	                this.expressionList();
	            }

	            this.state = 461;
	            this.match(UnrealAngelscriptParser.RightParen);
	            break;

	        case 3:
	            this.state = 463;
	            this.simpleTypeSpecifier();
	            this.state = 470;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case UnrealAngelscriptParser.LeftParen:
	                this.state = 464;
	                this.match(UnrealAngelscriptParser.LeftParen);
	                this.state = 466;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (UnrealAngelscriptParser.IntegerLiteral - 1)) | (1 << (UnrealAngelscriptParser.CharacterLiteral - 1)) | (1 << (UnrealAngelscriptParser.FloatingLiteral - 1)) | (1 << (UnrealAngelscriptParser.StringLiteral - 1)) | (1 << (UnrealAngelscriptParser.UserDefinedLiteral - 1)) | (1 << (UnrealAngelscriptParser.Cast - 1)) | (1 << (UnrealAngelscriptParser.Ensure - 1)) | (1 << (UnrealAngelscriptParser.EnsureAlways - 1)) | (1 << (UnrealAngelscriptParser.Check - 1)) | (1 << (UnrealAngelscriptParser.Int - 1)) | (1 << (UnrealAngelscriptParser.Int8 - 1)) | (1 << (UnrealAngelscriptParser.Int16 - 1)) | (1 << (UnrealAngelscriptParser.Int32 - 1)) | (1 << (UnrealAngelscriptParser.Int64 - 1)) | (1 << (UnrealAngelscriptParser.UInt - 1)) | (1 << (UnrealAngelscriptParser.UInt8 - 1)) | (1 << (UnrealAngelscriptParser.UInt16 - 1)) | (1 << (UnrealAngelscriptParser.UInt32 - 1)) | (1 << (UnrealAngelscriptParser.UInt64 - 1)) | (1 << (UnrealAngelscriptParser.Float - 1)) | (1 << (UnrealAngelscriptParser.Double - 1)) | (1 << (UnrealAngelscriptParser.Bool - 1)) | (1 << (UnrealAngelscriptParser.Auto - 1)))) !== 0) || ((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (UnrealAngelscriptParser.False_ - 45)) | (1 << (UnrealAngelscriptParser.Nullptr - 45)) | (1 << (UnrealAngelscriptParser.Operator - 45)) | (1 << (UnrealAngelscriptParser.This - 45)) | (1 << (UnrealAngelscriptParser.True_ - 45)) | (1 << (UnrealAngelscriptParser.Void - 45)) | (1 << (UnrealAngelscriptParser.LeftParen - 45)) | (1 << (UnrealAngelscriptParser.LeftBracket - 45)) | (1 << (UnrealAngelscriptParser.LeftBrace - 45)) | (1 << (UnrealAngelscriptParser.Plus - 45)) | (1 << (UnrealAngelscriptParser.Minus - 45)) | (1 << (UnrealAngelscriptParser.Star - 45)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (UnrealAngelscriptParser.And - 78)) | (1 << (UnrealAngelscriptParser.Or - 78)) | (1 << (UnrealAngelscriptParser.Tilde - 78)) | (1 << (UnrealAngelscriptParser.Not - 78)) | (1 << (UnrealAngelscriptParser.PlusPlus - 78)) | (1 << (UnrealAngelscriptParser.MinusMinus - 78)) | (1 << (UnrealAngelscriptParser.Doublecolon - 78)) | (1 << (UnrealAngelscriptParser.Identifier - 78)))) !== 0)) {
	                    this.state = 465;
	                    this.expressionList();
	                }

	                this.state = 468;
	                this.match(UnrealAngelscriptParser.RightParen);
	                break;
	            case UnrealAngelscriptParser.LeftBracket:
	            case UnrealAngelscriptParser.LeftBrace:
	                this.state = 469;
	                this.bracedInitList();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            this.state = 472;
	            this.match(UnrealAngelscriptParser.Cast);
	            this.state = 473;
	            this.match(UnrealAngelscriptParser.Less);
	            this.state = 474;
	            this.theTypeId();
	            this.state = 475;
	            this.match(UnrealAngelscriptParser.Greater);
	            this.state = 476;
	            this.match(UnrealAngelscriptParser.LeftParen);
	            this.state = 477;
	            this.expression();
	            this.state = 478;
	            this.match(UnrealAngelscriptParser.RightParen);
	            break;

	        case 5:
	            this.state = 480;
	            this.match(UnrealAngelscriptParser.LeftParen);
	            this.state = 483;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 481;
	                this.expression();
	                break;

	            case 2:
	                this.state = 482;
	                this.theTypeId();
	                break;

	            }
	            this.state = 485;
	            this.match(UnrealAngelscriptParser.RightParen);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 513;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 511;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, UnrealAngelscriptParser.RULE_postfixExpression);
	                    this.state = 489;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 490;
	                    this.match(UnrealAngelscriptParser.LeftBracket);
	                    this.state = 493;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 491;
	                        this.expression();
	                        break;

	                    case 2:
	                        this.state = 492;
	                        this.bracedInitList();
	                        break;

	                    }
	                    this.state = 495;
	                    this.match(UnrealAngelscriptParser.RightBracket);
	                    break;

	                case 2:
	                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, UnrealAngelscriptParser.RULE_postfixExpression);
	                    this.state = 497;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 498;
	                    this.match(UnrealAngelscriptParser.LeftParen);
	                    this.state = 500;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (UnrealAngelscriptParser.IntegerLiteral - 1)) | (1 << (UnrealAngelscriptParser.CharacterLiteral - 1)) | (1 << (UnrealAngelscriptParser.FloatingLiteral - 1)) | (1 << (UnrealAngelscriptParser.StringLiteral - 1)) | (1 << (UnrealAngelscriptParser.UserDefinedLiteral - 1)) | (1 << (UnrealAngelscriptParser.Cast - 1)) | (1 << (UnrealAngelscriptParser.Ensure - 1)) | (1 << (UnrealAngelscriptParser.EnsureAlways - 1)) | (1 << (UnrealAngelscriptParser.Check - 1)) | (1 << (UnrealAngelscriptParser.Int - 1)) | (1 << (UnrealAngelscriptParser.Int8 - 1)) | (1 << (UnrealAngelscriptParser.Int16 - 1)) | (1 << (UnrealAngelscriptParser.Int32 - 1)) | (1 << (UnrealAngelscriptParser.Int64 - 1)) | (1 << (UnrealAngelscriptParser.UInt - 1)) | (1 << (UnrealAngelscriptParser.UInt8 - 1)) | (1 << (UnrealAngelscriptParser.UInt16 - 1)) | (1 << (UnrealAngelscriptParser.UInt32 - 1)) | (1 << (UnrealAngelscriptParser.UInt64 - 1)) | (1 << (UnrealAngelscriptParser.Float - 1)) | (1 << (UnrealAngelscriptParser.Double - 1)) | (1 << (UnrealAngelscriptParser.Bool - 1)) | (1 << (UnrealAngelscriptParser.Auto - 1)))) !== 0) || ((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (UnrealAngelscriptParser.False_ - 45)) | (1 << (UnrealAngelscriptParser.Nullptr - 45)) | (1 << (UnrealAngelscriptParser.Operator - 45)) | (1 << (UnrealAngelscriptParser.This - 45)) | (1 << (UnrealAngelscriptParser.True_ - 45)) | (1 << (UnrealAngelscriptParser.Void - 45)) | (1 << (UnrealAngelscriptParser.LeftParen - 45)) | (1 << (UnrealAngelscriptParser.LeftBracket - 45)) | (1 << (UnrealAngelscriptParser.LeftBrace - 45)) | (1 << (UnrealAngelscriptParser.Plus - 45)) | (1 << (UnrealAngelscriptParser.Minus - 45)) | (1 << (UnrealAngelscriptParser.Star - 45)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (UnrealAngelscriptParser.And - 78)) | (1 << (UnrealAngelscriptParser.Or - 78)) | (1 << (UnrealAngelscriptParser.Tilde - 78)) | (1 << (UnrealAngelscriptParser.Not - 78)) | (1 << (UnrealAngelscriptParser.PlusPlus - 78)) | (1 << (UnrealAngelscriptParser.MinusMinus - 78)) | (1 << (UnrealAngelscriptParser.Doublecolon - 78)) | (1 << (UnrealAngelscriptParser.Identifier - 78)))) !== 0)) {
	                        this.state = 499;
	                        this.expressionList();
	                    }

	                    this.state = 502;
	                    this.match(UnrealAngelscriptParser.RightParen);
	                    break;

	                case 3:
	                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, UnrealAngelscriptParser.RULE_postfixExpression);
	                    this.state = 503;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 504;
	                    this.match(UnrealAngelscriptParser.Dot);
	                    this.state = 507;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 505;
	                        this.idExpression();
	                        break;

	                    case 2:
	                        this.state = 506;
	                        this.pseudoDestructorName();
	                        break;

	                    }
	                    break;

	                case 4:
	                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, UnrealAngelscriptParser.RULE_postfixExpression);
	                    this.state = 509;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 510;
	                    _la = this._input.LA(1);
	                    if(!(_la===UnrealAngelscriptParser.PlusPlus || _la===UnrealAngelscriptParser.MinusMinus)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    break;

	                } 
	            }
	            this.state = 515;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	expressionList() {
	    let localctx = new ExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, UnrealAngelscriptParser.RULE_expressionList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 516;
	        this.initializerList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pseudoDestructorName() {
	    let localctx = new PseudoDestructorNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, UnrealAngelscriptParser.RULE_pseudoDestructorName);
	    var _la = 0; // Token type
	    try {
	        this.state = 535;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 519;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	            if(la_===1) {
	                this.state = 518;
	                this.nestedNameSpecifier(0);

	            }
	            this.state = 524;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===UnrealAngelscriptParser.Identifier) {
	                this.state = 521;
	                this.theTypeName();
	                this.state = 522;
	                this.match(UnrealAngelscriptParser.Doublecolon);
	            }

	            this.state = 526;
	            this.match(UnrealAngelscriptParser.Tilde);
	            this.state = 527;
	            this.theTypeName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 528;
	            this.nestedNameSpecifier(0);
	            this.state = 529;
	            this.match(UnrealAngelscriptParser.Doublecolon);
	            this.state = 530;
	            this.match(UnrealAngelscriptParser.Tilde);
	            this.state = 531;
	            this.theTypeName();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 533;
	            this.match(UnrealAngelscriptParser.Tilde);
	            this.state = 534;
	            this.decltypeSpecifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpression() {
	    let localctx = new UnaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, UnrealAngelscriptParser.RULE_unaryExpression);
	    try {
	        this.state = 548;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 537;
	            this.postfixExpression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 541;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case UnrealAngelscriptParser.PlusPlus:
	                this.state = 538;
	                this.match(UnrealAngelscriptParser.PlusPlus);
	                break;
	            case UnrealAngelscriptParser.MinusMinus:
	                this.state = 539;
	                this.match(UnrealAngelscriptParser.MinusMinus);
	                break;
	            case UnrealAngelscriptParser.Plus:
	            case UnrealAngelscriptParser.Minus:
	            case UnrealAngelscriptParser.Star:
	            case UnrealAngelscriptParser.And:
	            case UnrealAngelscriptParser.Or:
	            case UnrealAngelscriptParser.Tilde:
	            case UnrealAngelscriptParser.Not:
	                this.state = 540;
	                this.unaryOperator();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 543;
	            this.unaryExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 544;
	            this.match(UnrealAngelscriptParser.LeftParen);
	            this.state = 545;
	            this.theTypeId();
	            this.state = 546;
	            this.match(UnrealAngelscriptParser.RightParen);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryOperator() {
	    let localctx = new UnaryOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, UnrealAngelscriptParser.RULE_unaryOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 550;
	        _la = this._input.LA(1);
	        if(!(((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (UnrealAngelscriptParser.Plus - 72)) | (1 << (UnrealAngelscriptParser.Minus - 72)) | (1 << (UnrealAngelscriptParser.Star - 72)) | (1 << (UnrealAngelscriptParser.And - 72)) | (1 << (UnrealAngelscriptParser.Or - 72)) | (1 << (UnrealAngelscriptParser.Tilde - 72)) | (1 << (UnrealAngelscriptParser.Not - 72)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	newPlacement() {
	    let localctx = new NewPlacementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, UnrealAngelscriptParser.RULE_newPlacement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 552;
	        this.match(UnrealAngelscriptParser.LeftParen);
	        this.state = 553;
	        this.expressionList();
	        this.state = 554;
	        this.match(UnrealAngelscriptParser.RightParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	newInitializer_() {
	    let localctx = new NewInitializer_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, UnrealAngelscriptParser.RULE_newInitializer_);
	    var _la = 0; // Token type
	    try {
	        this.state = 562;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case UnrealAngelscriptParser.LeftParen:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 556;
	            this.match(UnrealAngelscriptParser.LeftParen);
	            this.state = 558;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (UnrealAngelscriptParser.IntegerLiteral - 1)) | (1 << (UnrealAngelscriptParser.CharacterLiteral - 1)) | (1 << (UnrealAngelscriptParser.FloatingLiteral - 1)) | (1 << (UnrealAngelscriptParser.StringLiteral - 1)) | (1 << (UnrealAngelscriptParser.UserDefinedLiteral - 1)) | (1 << (UnrealAngelscriptParser.Cast - 1)) | (1 << (UnrealAngelscriptParser.Ensure - 1)) | (1 << (UnrealAngelscriptParser.EnsureAlways - 1)) | (1 << (UnrealAngelscriptParser.Check - 1)) | (1 << (UnrealAngelscriptParser.Int - 1)) | (1 << (UnrealAngelscriptParser.Int8 - 1)) | (1 << (UnrealAngelscriptParser.Int16 - 1)) | (1 << (UnrealAngelscriptParser.Int32 - 1)) | (1 << (UnrealAngelscriptParser.Int64 - 1)) | (1 << (UnrealAngelscriptParser.UInt - 1)) | (1 << (UnrealAngelscriptParser.UInt8 - 1)) | (1 << (UnrealAngelscriptParser.UInt16 - 1)) | (1 << (UnrealAngelscriptParser.UInt32 - 1)) | (1 << (UnrealAngelscriptParser.UInt64 - 1)) | (1 << (UnrealAngelscriptParser.Float - 1)) | (1 << (UnrealAngelscriptParser.Double - 1)) | (1 << (UnrealAngelscriptParser.Bool - 1)) | (1 << (UnrealAngelscriptParser.Auto - 1)))) !== 0) || ((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (UnrealAngelscriptParser.False_ - 45)) | (1 << (UnrealAngelscriptParser.Nullptr - 45)) | (1 << (UnrealAngelscriptParser.Operator - 45)) | (1 << (UnrealAngelscriptParser.This - 45)) | (1 << (UnrealAngelscriptParser.True_ - 45)) | (1 << (UnrealAngelscriptParser.Void - 45)) | (1 << (UnrealAngelscriptParser.LeftParen - 45)) | (1 << (UnrealAngelscriptParser.LeftBracket - 45)) | (1 << (UnrealAngelscriptParser.LeftBrace - 45)) | (1 << (UnrealAngelscriptParser.Plus - 45)) | (1 << (UnrealAngelscriptParser.Minus - 45)) | (1 << (UnrealAngelscriptParser.Star - 45)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (UnrealAngelscriptParser.And - 78)) | (1 << (UnrealAngelscriptParser.Or - 78)) | (1 << (UnrealAngelscriptParser.Tilde - 78)) | (1 << (UnrealAngelscriptParser.Not - 78)) | (1 << (UnrealAngelscriptParser.PlusPlus - 78)) | (1 << (UnrealAngelscriptParser.MinusMinus - 78)) | (1 << (UnrealAngelscriptParser.Doublecolon - 78)) | (1 << (UnrealAngelscriptParser.Identifier - 78)))) !== 0)) {
	                this.state = 557;
	                this.expressionList();
	            }

	            this.state = 560;
	            this.match(UnrealAngelscriptParser.RightParen);
	            break;
	        case UnrealAngelscriptParser.LeftBracket:
	        case UnrealAngelscriptParser.LeftBrace:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 561;
	            this.bracedInitList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castExpression() {
	    let localctx = new CastExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, UnrealAngelscriptParser.RULE_castExpression);
	    try {
	        this.state = 573;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 564;
	            this.unaryExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 565;
	            this.match(UnrealAngelscriptParser.Cast);
	            this.state = 566;
	            this.match(UnrealAngelscriptParser.Less);
	            this.state = 567;
	            this.theTypeId();
	            this.state = 568;
	            this.match(UnrealAngelscriptParser.Greater);
	            this.state = 569;
	            this.match(UnrealAngelscriptParser.LeftParen);
	            this.state = 570;
	            this.castExpression();
	            this.state = 571;
	            this.match(UnrealAngelscriptParser.RightParen);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicativeExpression() {
	    let localctx = new MultiplicativeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, UnrealAngelscriptParser.RULE_multiplicativeExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 575;
	        this.castExpression();
	        this.state = 580;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (UnrealAngelscriptParser.Star - 74)) | (1 << (UnrealAngelscriptParser.Div - 74)) | (1 << (UnrealAngelscriptParser.Mod - 74)))) !== 0)) {
	            this.state = 576;
	            _la = this._input.LA(1);
	            if(!(((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (UnrealAngelscriptParser.Star - 74)) | (1 << (UnrealAngelscriptParser.Div - 74)) | (1 << (UnrealAngelscriptParser.Mod - 74)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 577;
	            this.castExpression();
	            this.state = 582;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additiveExpression() {
	    let localctx = new AdditiveExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, UnrealAngelscriptParser.RULE_additiveExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 583;
	        this.multiplicativeExpression();
	        this.state = 588;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===UnrealAngelscriptParser.Plus || _la===UnrealAngelscriptParser.Minus) {
	            this.state = 584;
	            _la = this._input.LA(1);
	            if(!(_la===UnrealAngelscriptParser.Plus || _la===UnrealAngelscriptParser.Minus)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 585;
	            this.multiplicativeExpression();
	            this.state = 590;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shiftExpression() {
	    let localctx = new ShiftExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, UnrealAngelscriptParser.RULE_shiftExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 591;
	        this.additiveExpression();
	        this.state = 597;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,48,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 592;
	                this.shiftOperator();
	                this.state = 593;
	                this.additiveExpression(); 
	            }
	            this.state = 599;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,48,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shiftOperator() {
	    let localctx = new ShiftOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, UnrealAngelscriptParser.RULE_shiftOperator);
	    try {
	        this.state = 604;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case UnrealAngelscriptParser.Greater:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 600;
	            this.match(UnrealAngelscriptParser.Greater);
	            this.state = 601;
	            this.match(UnrealAngelscriptParser.Greater);
	            break;
	        case UnrealAngelscriptParser.Less:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 602;
	            this.match(UnrealAngelscriptParser.Less);
	            this.state = 603;
	            this.match(UnrealAngelscriptParser.Less);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationalExpression() {
	    let localctx = new RelationalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, UnrealAngelscriptParser.RULE_relationalExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 606;
	        this.shiftExpression();
	        this.state = 611;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (UnrealAngelscriptParser.Less - 83)) | (1 << (UnrealAngelscriptParser.Greater - 83)) | (1 << (UnrealAngelscriptParser.LessEqual - 83)) | (1 << (UnrealAngelscriptParser.GreaterEqual - 83)))) !== 0)) {
	            this.state = 607;
	            _la = this._input.LA(1);
	            if(!(((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (UnrealAngelscriptParser.Less - 83)) | (1 << (UnrealAngelscriptParser.Greater - 83)) | (1 << (UnrealAngelscriptParser.LessEqual - 83)) | (1 << (UnrealAngelscriptParser.GreaterEqual - 83)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 608;
	            this.shiftExpression();
	            this.state = 613;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equalityExpression() {
	    let localctx = new EqualityExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, UnrealAngelscriptParser.RULE_equalityExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 614;
	        this.relationalExpression();
	        this.state = 619;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===UnrealAngelscriptParser.Equal || _la===UnrealAngelscriptParser.NotEqual) {
	            this.state = 615;
	            _la = this._input.LA(1);
	            if(!(_la===UnrealAngelscriptParser.Equal || _la===UnrealAngelscriptParser.NotEqual)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 616;
	            this.relationalExpression();
	            this.state = 621;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	andExpression() {
	    let localctx = new AndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, UnrealAngelscriptParser.RULE_andExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 622;
	        this.equalityExpression();
	        this.state = 627;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===UnrealAngelscriptParser.And) {
	            this.state = 623;
	            this.match(UnrealAngelscriptParser.And);
	            this.state = 624;
	            this.equalityExpression();
	            this.state = 629;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exclusiveOrExpression() {
	    let localctx = new ExclusiveOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, UnrealAngelscriptParser.RULE_exclusiveOrExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 630;
	        this.andExpression();
	        this.state = 635;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===UnrealAngelscriptParser.Xor) {
	            this.state = 631;
	            this.match(UnrealAngelscriptParser.Xor);
	            this.state = 632;
	            this.andExpression();
	            this.state = 637;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inclusiveOrExpression() {
	    let localctx = new InclusiveOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, UnrealAngelscriptParser.RULE_inclusiveOrExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 638;
	        this.exclusiveOrExpression();
	        this.state = 643;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===UnrealAngelscriptParser.Or) {
	            this.state = 639;
	            this.match(UnrealAngelscriptParser.Or);
	            this.state = 640;
	            this.exclusiveOrExpression();
	            this.state = 645;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalAndExpression() {
	    let localctx = new LogicalAndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, UnrealAngelscriptParser.RULE_logicalAndExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 646;
	        this.inclusiveOrExpression();
	        this.state = 651;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===UnrealAngelscriptParser.AndAnd) {
	            this.state = 647;
	            this.match(UnrealAngelscriptParser.AndAnd);
	            this.state = 648;
	            this.inclusiveOrExpression();
	            this.state = 653;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalOrExpression() {
	    let localctx = new LogicalOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, UnrealAngelscriptParser.RULE_logicalOrExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 654;
	        this.logicalAndExpression();
	        this.state = 659;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===UnrealAngelscriptParser.OrOr) {
	            this.state = 655;
	            this.match(UnrealAngelscriptParser.OrOr);
	            this.state = 656;
	            this.logicalAndExpression();
	            this.state = 661;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalExpression() {
	    let localctx = new ConditionalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, UnrealAngelscriptParser.RULE_conditionalExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 662;
	        this.logicalOrExpression();
	        this.state = 668;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===UnrealAngelscriptParser.Question) {
	            this.state = 663;
	            this.match(UnrealAngelscriptParser.Question);
	            this.state = 664;
	            this.expression();
	            this.state = 665;
	            this.match(UnrealAngelscriptParser.Colon);
	            this.state = 666;
	            this.assignmentExpression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentExpression() {
	    let localctx = new AssignmentExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, UnrealAngelscriptParser.RULE_assignmentExpression);
	    try {
	        this.state = 675;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 670;
	            this.conditionalExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 671;
	            this.logicalOrExpression();
	            this.state = 672;
	            this.assignmentOperator();
	            this.state = 673;
	            this.initializerClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentOperator() {
	    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, UnrealAngelscriptParser.RULE_assignmentOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 677;
	        _la = this._input.LA(1);
	        if(!(((((_la - 82)) & ~0x1f) == 0 && ((1 << (_la - 82)) & ((1 << (UnrealAngelscriptParser.Assign - 82)) | (1 << (UnrealAngelscriptParser.PlusAssign - 82)) | (1 << (UnrealAngelscriptParser.MinusAssign - 82)) | (1 << (UnrealAngelscriptParser.StarAssign - 82)) | (1 << (UnrealAngelscriptParser.DivAssign - 82)) | (1 << (UnrealAngelscriptParser.ModAssign - 82)) | (1 << (UnrealAngelscriptParser.XorAssign - 82)) | (1 << (UnrealAngelscriptParser.AndAssign - 82)) | (1 << (UnrealAngelscriptParser.OrAssign - 82)) | (1 << (UnrealAngelscriptParser.LeftShiftAssign - 82)) | (1 << (UnrealAngelscriptParser.RightShiftAssign - 82)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, UnrealAngelscriptParser.RULE_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 679;
	        this.assignmentExpression();
	        this.state = 684;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,59,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 680;
	                this.match(UnrealAngelscriptParser.Comma);
	                this.state = 681;
	                this.assignmentExpression(); 
	            }
	            this.state = 686;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,59,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantExpression() {
	    let localctx = new ConstantExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, UnrealAngelscriptParser.RULE_constantExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 687;
	        this.conditionalExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, UnrealAngelscriptParser.RULE_statement);
	    try {
	        this.state = 698;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 689;
	            this.labeledStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 690;
	            this.declarationStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 696;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case UnrealAngelscriptParser.IntegerLiteral:
	            case UnrealAngelscriptParser.CharacterLiteral:
	            case UnrealAngelscriptParser.FloatingLiteral:
	            case UnrealAngelscriptParser.StringLiteral:
	            case UnrealAngelscriptParser.UserDefinedLiteral:
	            case UnrealAngelscriptParser.Cast:
	            case UnrealAngelscriptParser.Ensure:
	            case UnrealAngelscriptParser.EnsureAlways:
	            case UnrealAngelscriptParser.Check:
	            case UnrealAngelscriptParser.Int:
	            case UnrealAngelscriptParser.Int8:
	            case UnrealAngelscriptParser.Int16:
	            case UnrealAngelscriptParser.Int32:
	            case UnrealAngelscriptParser.Int64:
	            case UnrealAngelscriptParser.UInt:
	            case UnrealAngelscriptParser.UInt8:
	            case UnrealAngelscriptParser.UInt16:
	            case UnrealAngelscriptParser.UInt32:
	            case UnrealAngelscriptParser.UInt64:
	            case UnrealAngelscriptParser.Float:
	            case UnrealAngelscriptParser.Double:
	            case UnrealAngelscriptParser.Bool:
	            case UnrealAngelscriptParser.Auto:
	            case UnrealAngelscriptParser.False_:
	            case UnrealAngelscriptParser.Nullptr:
	            case UnrealAngelscriptParser.Operator:
	            case UnrealAngelscriptParser.This:
	            case UnrealAngelscriptParser.True_:
	            case UnrealAngelscriptParser.Void:
	            case UnrealAngelscriptParser.LeftParen:
	            case UnrealAngelscriptParser.LeftBracket:
	            case UnrealAngelscriptParser.Plus:
	            case UnrealAngelscriptParser.Minus:
	            case UnrealAngelscriptParser.Star:
	            case UnrealAngelscriptParser.And:
	            case UnrealAngelscriptParser.Or:
	            case UnrealAngelscriptParser.Tilde:
	            case UnrealAngelscriptParser.Not:
	            case UnrealAngelscriptParser.PlusPlus:
	            case UnrealAngelscriptParser.MinusMinus:
	            case UnrealAngelscriptParser.Doublecolon:
	            case UnrealAngelscriptParser.Semi:
	            case UnrealAngelscriptParser.Identifier:
	                this.state = 691;
	                this.expressionStatement();
	                break;
	            case UnrealAngelscriptParser.LeftBrace:
	                this.state = 692;
	                this.compoundStatement();
	                break;
	            case UnrealAngelscriptParser.If:
	            case UnrealAngelscriptParser.Switch:
	                this.state = 693;
	                this.selectionStatement();
	                break;
	            case UnrealAngelscriptParser.Do:
	            case UnrealAngelscriptParser.For:
	            case UnrealAngelscriptParser.While:
	                this.state = 694;
	                this.iterationStatement();
	                break;
	            case UnrealAngelscriptParser.Break:
	            case UnrealAngelscriptParser.Continue:
	            case UnrealAngelscriptParser.Goto:
	            case UnrealAngelscriptParser.Return:
	                this.state = 695;
	                this.jumpStatement();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledStatement() {
	    let localctx = new LabeledStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, UnrealAngelscriptParser.RULE_labeledStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 704;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case UnrealAngelscriptParser.Identifier:
	            this.state = 700;
	            this.match(UnrealAngelscriptParser.Identifier);
	            break;
	        case UnrealAngelscriptParser.Case:
	            this.state = 701;
	            this.match(UnrealAngelscriptParser.Case);
	            this.state = 702;
	            this.constantExpression();
	            break;
	        case UnrealAngelscriptParser.Default:
	            this.state = 703;
	            this.match(UnrealAngelscriptParser.Default);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 706;
	        this.match(UnrealAngelscriptParser.Colon);
	        this.state = 707;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStatement() {
	    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, UnrealAngelscriptParser.RULE_expressionStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 710;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (UnrealAngelscriptParser.IntegerLiteral - 1)) | (1 << (UnrealAngelscriptParser.CharacterLiteral - 1)) | (1 << (UnrealAngelscriptParser.FloatingLiteral - 1)) | (1 << (UnrealAngelscriptParser.StringLiteral - 1)) | (1 << (UnrealAngelscriptParser.UserDefinedLiteral - 1)) | (1 << (UnrealAngelscriptParser.Cast - 1)) | (1 << (UnrealAngelscriptParser.Ensure - 1)) | (1 << (UnrealAngelscriptParser.EnsureAlways - 1)) | (1 << (UnrealAngelscriptParser.Check - 1)) | (1 << (UnrealAngelscriptParser.Int - 1)) | (1 << (UnrealAngelscriptParser.Int8 - 1)) | (1 << (UnrealAngelscriptParser.Int16 - 1)) | (1 << (UnrealAngelscriptParser.Int32 - 1)) | (1 << (UnrealAngelscriptParser.Int64 - 1)) | (1 << (UnrealAngelscriptParser.UInt - 1)) | (1 << (UnrealAngelscriptParser.UInt8 - 1)) | (1 << (UnrealAngelscriptParser.UInt16 - 1)) | (1 << (UnrealAngelscriptParser.UInt32 - 1)) | (1 << (UnrealAngelscriptParser.UInt64 - 1)) | (1 << (UnrealAngelscriptParser.Float - 1)) | (1 << (UnrealAngelscriptParser.Double - 1)) | (1 << (UnrealAngelscriptParser.Bool - 1)) | (1 << (UnrealAngelscriptParser.Auto - 1)))) !== 0) || ((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (UnrealAngelscriptParser.False_ - 45)) | (1 << (UnrealAngelscriptParser.Nullptr - 45)) | (1 << (UnrealAngelscriptParser.Operator - 45)) | (1 << (UnrealAngelscriptParser.This - 45)) | (1 << (UnrealAngelscriptParser.True_ - 45)) | (1 << (UnrealAngelscriptParser.Void - 45)) | (1 << (UnrealAngelscriptParser.LeftParen - 45)) | (1 << (UnrealAngelscriptParser.LeftBracket - 45)) | (1 << (UnrealAngelscriptParser.Plus - 45)) | (1 << (UnrealAngelscriptParser.Minus - 45)) | (1 << (UnrealAngelscriptParser.Star - 45)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (UnrealAngelscriptParser.And - 78)) | (1 << (UnrealAngelscriptParser.Or - 78)) | (1 << (UnrealAngelscriptParser.Tilde - 78)) | (1 << (UnrealAngelscriptParser.Not - 78)) | (1 << (UnrealAngelscriptParser.PlusPlus - 78)) | (1 << (UnrealAngelscriptParser.MinusMinus - 78)) | (1 << (UnrealAngelscriptParser.Doublecolon - 78)) | (1 << (UnrealAngelscriptParser.Identifier - 78)))) !== 0)) {
	            this.state = 709;
	            this.expression();
	        }

	        this.state = 712;
	        this.match(UnrealAngelscriptParser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compoundStatement() {
	    let localctx = new CompoundStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, UnrealAngelscriptParser.RULE_compoundStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 714;
	        this.match(UnrealAngelscriptParser.LeftBrace);
	        this.state = 716;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << UnrealAngelscriptParser.IntegerLiteral) | (1 << UnrealAngelscriptParser.CharacterLiteral) | (1 << UnrealAngelscriptParser.FloatingLiteral) | (1 << UnrealAngelscriptParser.StringLiteral) | (1 << UnrealAngelscriptParser.UserDefinedLiteral) | (1 << UnrealAngelscriptParser.Cast) | (1 << UnrealAngelscriptParser.UClass) | (1 << UnrealAngelscriptParser.UStruct) | (1 << UnrealAngelscriptParser.Out) | (1 << UnrealAngelscriptParser.Ensure) | (1 << UnrealAngelscriptParser.EnsureAlways) | (1 << UnrealAngelscriptParser.Check) | (1 << UnrealAngelscriptParser.Int) | (1 << UnrealAngelscriptParser.Int8) | (1 << UnrealAngelscriptParser.Int16) | (1 << UnrealAngelscriptParser.Int32) | (1 << UnrealAngelscriptParser.Int64) | (1 << UnrealAngelscriptParser.UInt) | (1 << UnrealAngelscriptParser.UInt8) | (1 << UnrealAngelscriptParser.UInt16) | (1 << UnrealAngelscriptParser.UInt32) | (1 << UnrealAngelscriptParser.UInt64) | (1 << UnrealAngelscriptParser.Float) | (1 << UnrealAngelscriptParser.Double) | (1 << UnrealAngelscriptParser.Bool))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (UnrealAngelscriptParser.Auto - 32)) | (1 << (UnrealAngelscriptParser.Break - 32)) | (1 << (UnrealAngelscriptParser.Case - 32)) | (1 << (UnrealAngelscriptParser.Class - 32)) | (1 << (UnrealAngelscriptParser.Const - 32)) | (1 << (UnrealAngelscriptParser.Continue - 32)) | (1 << (UnrealAngelscriptParser.Default - 32)) | (1 << (UnrealAngelscriptParser.Do - 32)) | (1 << (UnrealAngelscriptParser.Enum - 32)) | (1 << (UnrealAngelscriptParser.False_ - 32)) | (1 << (UnrealAngelscriptParser.For - 32)) | (1 << (UnrealAngelscriptParser.Goto - 32)) | (1 << (UnrealAngelscriptParser.If - 32)) | (1 << (UnrealAngelscriptParser.Namespace - 32)) | (1 << (UnrealAngelscriptParser.Nullptr - 32)) | (1 << (UnrealAngelscriptParser.Operator - 32)) | (1 << (UnrealAngelscriptParser.Return - 32)) | (1 << (UnrealAngelscriptParser.Struct - 32)) | (1 << (UnrealAngelscriptParser.Switch - 32)) | (1 << (UnrealAngelscriptParser.This - 32)) | (1 << (UnrealAngelscriptParser.True_ - 32)) | (1 << (UnrealAngelscriptParser.Virtual - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (UnrealAngelscriptParser.Void - 64)) | (1 << (UnrealAngelscriptParser.While - 64)) | (1 << (UnrealAngelscriptParser.LeftParen - 64)) | (1 << (UnrealAngelscriptParser.LeftBracket - 64)) | (1 << (UnrealAngelscriptParser.LeftBrace - 64)) | (1 << (UnrealAngelscriptParser.Plus - 64)) | (1 << (UnrealAngelscriptParser.Minus - 64)) | (1 << (UnrealAngelscriptParser.Star - 64)) | (1 << (UnrealAngelscriptParser.And - 64)) | (1 << (UnrealAngelscriptParser.Or - 64)) | (1 << (UnrealAngelscriptParser.Tilde - 64)) | (1 << (UnrealAngelscriptParser.Not - 64)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (UnrealAngelscriptParser.PlusPlus - 101)) | (1 << (UnrealAngelscriptParser.MinusMinus - 101)) | (1 << (UnrealAngelscriptParser.Doublecolon - 101)) | (1 << (UnrealAngelscriptParser.Semi - 101)) | (1 << (UnrealAngelscriptParser.Identifier - 101)))) !== 0)) {
	            this.state = 715;
	            this.statementSeq();
	        }

	        this.state = 718;
	        this.match(UnrealAngelscriptParser.RightBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementSeq() {
	    let localctx = new StatementSeqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, UnrealAngelscriptParser.RULE_statementSeq);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 721; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 720;
	            this.statement();
	            this.state = 723; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << UnrealAngelscriptParser.IntegerLiteral) | (1 << UnrealAngelscriptParser.CharacterLiteral) | (1 << UnrealAngelscriptParser.FloatingLiteral) | (1 << UnrealAngelscriptParser.StringLiteral) | (1 << UnrealAngelscriptParser.UserDefinedLiteral) | (1 << UnrealAngelscriptParser.Cast) | (1 << UnrealAngelscriptParser.UClass) | (1 << UnrealAngelscriptParser.UStruct) | (1 << UnrealAngelscriptParser.Out) | (1 << UnrealAngelscriptParser.Ensure) | (1 << UnrealAngelscriptParser.EnsureAlways) | (1 << UnrealAngelscriptParser.Check) | (1 << UnrealAngelscriptParser.Int) | (1 << UnrealAngelscriptParser.Int8) | (1 << UnrealAngelscriptParser.Int16) | (1 << UnrealAngelscriptParser.Int32) | (1 << UnrealAngelscriptParser.Int64) | (1 << UnrealAngelscriptParser.UInt) | (1 << UnrealAngelscriptParser.UInt8) | (1 << UnrealAngelscriptParser.UInt16) | (1 << UnrealAngelscriptParser.UInt32) | (1 << UnrealAngelscriptParser.UInt64) | (1 << UnrealAngelscriptParser.Float) | (1 << UnrealAngelscriptParser.Double) | (1 << UnrealAngelscriptParser.Bool))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (UnrealAngelscriptParser.Auto - 32)) | (1 << (UnrealAngelscriptParser.Break - 32)) | (1 << (UnrealAngelscriptParser.Case - 32)) | (1 << (UnrealAngelscriptParser.Class - 32)) | (1 << (UnrealAngelscriptParser.Const - 32)) | (1 << (UnrealAngelscriptParser.Continue - 32)) | (1 << (UnrealAngelscriptParser.Default - 32)) | (1 << (UnrealAngelscriptParser.Do - 32)) | (1 << (UnrealAngelscriptParser.Enum - 32)) | (1 << (UnrealAngelscriptParser.False_ - 32)) | (1 << (UnrealAngelscriptParser.For - 32)) | (1 << (UnrealAngelscriptParser.Goto - 32)) | (1 << (UnrealAngelscriptParser.If - 32)) | (1 << (UnrealAngelscriptParser.Namespace - 32)) | (1 << (UnrealAngelscriptParser.Nullptr - 32)) | (1 << (UnrealAngelscriptParser.Operator - 32)) | (1 << (UnrealAngelscriptParser.Return - 32)) | (1 << (UnrealAngelscriptParser.Struct - 32)) | (1 << (UnrealAngelscriptParser.Switch - 32)) | (1 << (UnrealAngelscriptParser.This - 32)) | (1 << (UnrealAngelscriptParser.True_ - 32)) | (1 << (UnrealAngelscriptParser.Virtual - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (UnrealAngelscriptParser.Void - 64)) | (1 << (UnrealAngelscriptParser.While - 64)) | (1 << (UnrealAngelscriptParser.LeftParen - 64)) | (1 << (UnrealAngelscriptParser.LeftBracket - 64)) | (1 << (UnrealAngelscriptParser.LeftBrace - 64)) | (1 << (UnrealAngelscriptParser.Plus - 64)) | (1 << (UnrealAngelscriptParser.Minus - 64)) | (1 << (UnrealAngelscriptParser.Star - 64)) | (1 << (UnrealAngelscriptParser.And - 64)) | (1 << (UnrealAngelscriptParser.Or - 64)) | (1 << (UnrealAngelscriptParser.Tilde - 64)) | (1 << (UnrealAngelscriptParser.Not - 64)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (UnrealAngelscriptParser.PlusPlus - 101)) | (1 << (UnrealAngelscriptParser.MinusMinus - 101)) | (1 << (UnrealAngelscriptParser.Doublecolon - 101)) | (1 << (UnrealAngelscriptParser.Semi - 101)) | (1 << (UnrealAngelscriptParser.Identifier - 101)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectionStatement() {
	    let localctx = new SelectionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, UnrealAngelscriptParser.RULE_selectionStatement);
	    try {
	        this.state = 740;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case UnrealAngelscriptParser.If:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 725;
	            this.match(UnrealAngelscriptParser.If);
	            this.state = 726;
	            this.match(UnrealAngelscriptParser.LeftParen);
	            this.state = 727;
	            this.condition();
	            this.state = 728;
	            this.match(UnrealAngelscriptParser.RightParen);
	            this.state = 729;
	            this.statement();
	            this.state = 732;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
	            if(la_===1) {
	                this.state = 730;
	                this.match(UnrealAngelscriptParser.Else);
	                this.state = 731;
	                this.statement();

	            }
	            break;
	        case UnrealAngelscriptParser.Switch:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 734;
	            this.match(UnrealAngelscriptParser.Switch);
	            this.state = 735;
	            this.match(UnrealAngelscriptParser.LeftParen);
	            this.state = 736;
	            this.condition();
	            this.state = 737;
	            this.match(UnrealAngelscriptParser.RightParen);
	            this.state = 738;
	            this.statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	condition() {
	    let localctx = new ConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, UnrealAngelscriptParser.RULE_condition);
	    try {
	        this.state = 750;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 742;
	            this.expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 743;
	            this.declSpecifierSeq();
	            this.state = 744;
	            this.declarator();
	            this.state = 748;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case UnrealAngelscriptParser.Assign:
	                this.state = 745;
	                this.match(UnrealAngelscriptParser.Assign);
	                this.state = 746;
	                this.initializerClause();
	                break;
	            case UnrealAngelscriptParser.LeftBracket:
	            case UnrealAngelscriptParser.LeftBrace:
	                this.state = 747;
	                this.bracedInitList();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iterationStatement() {
	    let localctx = new IterationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, UnrealAngelscriptParser.RULE_iterationStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 785;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case UnrealAngelscriptParser.While:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 752;
	            this.match(UnrealAngelscriptParser.While);
	            this.state = 753;
	            this.match(UnrealAngelscriptParser.LeftParen);
	            this.state = 754;
	            this.condition();
	            this.state = 755;
	            this.match(UnrealAngelscriptParser.RightParen);
	            this.state = 756;
	            this.statement();
	            break;
	        case UnrealAngelscriptParser.Do:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 758;
	            this.match(UnrealAngelscriptParser.Do);
	            this.state = 759;
	            this.statement();
	            this.state = 760;
	            this.match(UnrealAngelscriptParser.While);
	            this.state = 761;
	            this.match(UnrealAngelscriptParser.LeftParen);
	            this.state = 762;
	            this.expression();
	            this.state = 763;
	            this.match(UnrealAngelscriptParser.RightParen);
	            this.state = 764;
	            this.match(UnrealAngelscriptParser.Semi);
	            break;
	        case UnrealAngelscriptParser.For:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 766;
	            this.match(UnrealAngelscriptParser.For);
	            this.state = 767;
	            this.match(UnrealAngelscriptParser.LeftParen);
	            this.state = 780;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 768;
	                this.forInitStatement();
	                this.state = 770;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << UnrealAngelscriptParser.IntegerLiteral) | (1 << UnrealAngelscriptParser.CharacterLiteral) | (1 << UnrealAngelscriptParser.FloatingLiteral) | (1 << UnrealAngelscriptParser.StringLiteral) | (1 << UnrealAngelscriptParser.UserDefinedLiteral) | (1 << UnrealAngelscriptParser.Cast) | (1 << UnrealAngelscriptParser.UClass) | (1 << UnrealAngelscriptParser.UStruct) | (1 << UnrealAngelscriptParser.Out) | (1 << UnrealAngelscriptParser.Ensure) | (1 << UnrealAngelscriptParser.EnsureAlways) | (1 << UnrealAngelscriptParser.Check) | (1 << UnrealAngelscriptParser.Int) | (1 << UnrealAngelscriptParser.Int8) | (1 << UnrealAngelscriptParser.Int16) | (1 << UnrealAngelscriptParser.Int32) | (1 << UnrealAngelscriptParser.Int64) | (1 << UnrealAngelscriptParser.UInt) | (1 << UnrealAngelscriptParser.UInt8) | (1 << UnrealAngelscriptParser.UInt16) | (1 << UnrealAngelscriptParser.UInt32) | (1 << UnrealAngelscriptParser.UInt64) | (1 << UnrealAngelscriptParser.Float) | (1 << UnrealAngelscriptParser.Double) | (1 << UnrealAngelscriptParser.Bool))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (UnrealAngelscriptParser.Auto - 32)) | (1 << (UnrealAngelscriptParser.Class - 32)) | (1 << (UnrealAngelscriptParser.Const - 32)) | (1 << (UnrealAngelscriptParser.Enum - 32)) | (1 << (UnrealAngelscriptParser.False_ - 32)) | (1 << (UnrealAngelscriptParser.Nullptr - 32)) | (1 << (UnrealAngelscriptParser.Operator - 32)) | (1 << (UnrealAngelscriptParser.Struct - 32)) | (1 << (UnrealAngelscriptParser.This - 32)) | (1 << (UnrealAngelscriptParser.True_ - 32)) | (1 << (UnrealAngelscriptParser.Virtual - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (UnrealAngelscriptParser.Void - 64)) | (1 << (UnrealAngelscriptParser.LeftParen - 64)) | (1 << (UnrealAngelscriptParser.LeftBracket - 64)) | (1 << (UnrealAngelscriptParser.Plus - 64)) | (1 << (UnrealAngelscriptParser.Minus - 64)) | (1 << (UnrealAngelscriptParser.Star - 64)) | (1 << (UnrealAngelscriptParser.And - 64)) | (1 << (UnrealAngelscriptParser.Or - 64)) | (1 << (UnrealAngelscriptParser.Tilde - 64)) | (1 << (UnrealAngelscriptParser.Not - 64)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (UnrealAngelscriptParser.PlusPlus - 101)) | (1 << (UnrealAngelscriptParser.MinusMinus - 101)) | (1 << (UnrealAngelscriptParser.Doublecolon - 101)) | (1 << (UnrealAngelscriptParser.Identifier - 101)))) !== 0)) {
	                    this.state = 769;
	                    this.condition();
	                }

	                this.state = 772;
	                this.match(UnrealAngelscriptParser.Semi);
	                this.state = 774;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (UnrealAngelscriptParser.IntegerLiteral - 1)) | (1 << (UnrealAngelscriptParser.CharacterLiteral - 1)) | (1 << (UnrealAngelscriptParser.FloatingLiteral - 1)) | (1 << (UnrealAngelscriptParser.StringLiteral - 1)) | (1 << (UnrealAngelscriptParser.UserDefinedLiteral - 1)) | (1 << (UnrealAngelscriptParser.Cast - 1)) | (1 << (UnrealAngelscriptParser.Ensure - 1)) | (1 << (UnrealAngelscriptParser.EnsureAlways - 1)) | (1 << (UnrealAngelscriptParser.Check - 1)) | (1 << (UnrealAngelscriptParser.Int - 1)) | (1 << (UnrealAngelscriptParser.Int8 - 1)) | (1 << (UnrealAngelscriptParser.Int16 - 1)) | (1 << (UnrealAngelscriptParser.Int32 - 1)) | (1 << (UnrealAngelscriptParser.Int64 - 1)) | (1 << (UnrealAngelscriptParser.UInt - 1)) | (1 << (UnrealAngelscriptParser.UInt8 - 1)) | (1 << (UnrealAngelscriptParser.UInt16 - 1)) | (1 << (UnrealAngelscriptParser.UInt32 - 1)) | (1 << (UnrealAngelscriptParser.UInt64 - 1)) | (1 << (UnrealAngelscriptParser.Float - 1)) | (1 << (UnrealAngelscriptParser.Double - 1)) | (1 << (UnrealAngelscriptParser.Bool - 1)) | (1 << (UnrealAngelscriptParser.Auto - 1)))) !== 0) || ((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (UnrealAngelscriptParser.False_ - 45)) | (1 << (UnrealAngelscriptParser.Nullptr - 45)) | (1 << (UnrealAngelscriptParser.Operator - 45)) | (1 << (UnrealAngelscriptParser.This - 45)) | (1 << (UnrealAngelscriptParser.True_ - 45)) | (1 << (UnrealAngelscriptParser.Void - 45)) | (1 << (UnrealAngelscriptParser.LeftParen - 45)) | (1 << (UnrealAngelscriptParser.LeftBracket - 45)) | (1 << (UnrealAngelscriptParser.Plus - 45)) | (1 << (UnrealAngelscriptParser.Minus - 45)) | (1 << (UnrealAngelscriptParser.Star - 45)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (UnrealAngelscriptParser.And - 78)) | (1 << (UnrealAngelscriptParser.Or - 78)) | (1 << (UnrealAngelscriptParser.Tilde - 78)) | (1 << (UnrealAngelscriptParser.Not - 78)) | (1 << (UnrealAngelscriptParser.PlusPlus - 78)) | (1 << (UnrealAngelscriptParser.MinusMinus - 78)) | (1 << (UnrealAngelscriptParser.Doublecolon - 78)) | (1 << (UnrealAngelscriptParser.Identifier - 78)))) !== 0)) {
	                    this.state = 773;
	                    this.expression();
	                }

	                break;

	            case 2:
	                this.state = 776;
	                this.forRangeDeclaration();
	                this.state = 777;
	                this.match(UnrealAngelscriptParser.Colon);
	                this.state = 778;
	                this.forRangeInitializer();
	                break;

	            }
	            this.state = 782;
	            this.match(UnrealAngelscriptParser.RightParen);
	            this.state = 783;
	            this.statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forInitStatement() {
	    let localctx = new ForInitStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, UnrealAngelscriptParser.RULE_forInitStatement);
	    try {
	        this.state = 789;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 787;
	            this.expressionStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 788;
	            this.simpleDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forRangeDeclaration() {
	    let localctx = new ForRangeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, UnrealAngelscriptParser.RULE_forRangeDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 791;
	        this.declSpecifierSeq();
	        this.state = 792;
	        this.match(UnrealAngelscriptParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forRangeInitializer() {
	    let localctx = new ForRangeInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, UnrealAngelscriptParser.RULE_forRangeInitializer);
	    try {
	        this.state = 796;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 794;
	            this.expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 795;
	            this.bracedInitList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jumpStatement() {
	    let localctx = new JumpStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, UnrealAngelscriptParser.RULE_jumpStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 807;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case UnrealAngelscriptParser.Break:
	            this.state = 798;
	            this.match(UnrealAngelscriptParser.Break);
	            break;
	        case UnrealAngelscriptParser.Continue:
	            this.state = 799;
	            this.match(UnrealAngelscriptParser.Continue);
	            break;
	        case UnrealAngelscriptParser.Return:
	            this.state = 800;
	            this.match(UnrealAngelscriptParser.Return);
	            this.state = 803;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
	            if(la_===1) {
	                this.state = 801;
	                this.expression();

	            } else if(la_===2) {
	                this.state = 802;
	                this.bracedInitList();

	            }
	            break;
	        case UnrealAngelscriptParser.Goto:
	            this.state = 805;
	            this.match(UnrealAngelscriptParser.Goto);
	            this.state = 806;
	            this.match(UnrealAngelscriptParser.Identifier);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 809;
	        this.match(UnrealAngelscriptParser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarationStatement() {
	    let localctx = new DeclarationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, UnrealAngelscriptParser.RULE_declarationStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 811;
	        this.blockDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarationseq() {
	    let localctx = new DeclarationseqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, UnrealAngelscriptParser.RULE_declarationseq);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 814; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 813;
	            this.declaration();
	            this.state = 816; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << UnrealAngelscriptParser.IntegerLiteral) | (1 << UnrealAngelscriptParser.CharacterLiteral) | (1 << UnrealAngelscriptParser.FloatingLiteral) | (1 << UnrealAngelscriptParser.StringLiteral) | (1 << UnrealAngelscriptParser.UserDefinedLiteral) | (1 << UnrealAngelscriptParser.Cast) | (1 << UnrealAngelscriptParser.UClass) | (1 << UnrealAngelscriptParser.UStruct) | (1 << UnrealAngelscriptParser.UFunction) | (1 << UnrealAngelscriptParser.Import) | (1 << UnrealAngelscriptParser.Out) | (1 << UnrealAngelscriptParser.Ensure) | (1 << UnrealAngelscriptParser.EnsureAlways) | (1 << UnrealAngelscriptParser.Check) | (1 << UnrealAngelscriptParser.Mixin) | (1 << UnrealAngelscriptParser.Int) | (1 << UnrealAngelscriptParser.Int8) | (1 << UnrealAngelscriptParser.Int16) | (1 << UnrealAngelscriptParser.Int32) | (1 << UnrealAngelscriptParser.Int64) | (1 << UnrealAngelscriptParser.UInt) | (1 << UnrealAngelscriptParser.UInt8) | (1 << UnrealAngelscriptParser.UInt16) | (1 << UnrealAngelscriptParser.UInt32) | (1 << UnrealAngelscriptParser.UInt64) | (1 << UnrealAngelscriptParser.Float) | (1 << UnrealAngelscriptParser.Double) | (1 << UnrealAngelscriptParser.Bool))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (UnrealAngelscriptParser.Auto - 32)) | (1 << (UnrealAngelscriptParser.Class - 32)) | (1 << (UnrealAngelscriptParser.Const - 32)) | (1 << (UnrealAngelscriptParser.Enum - 32)) | (1 << (UnrealAngelscriptParser.False_ - 32)) | (1 << (UnrealAngelscriptParser.Namespace - 32)) | (1 << (UnrealAngelscriptParser.Nullptr - 32)) | (1 << (UnrealAngelscriptParser.Operator - 32)) | (1 << (UnrealAngelscriptParser.Private - 32)) | (1 << (UnrealAngelscriptParser.Protected - 32)) | (1 << (UnrealAngelscriptParser.Public - 32)) | (1 << (UnrealAngelscriptParser.Struct - 32)) | (1 << (UnrealAngelscriptParser.This - 32)) | (1 << (UnrealAngelscriptParser.True_ - 32)) | (1 << (UnrealAngelscriptParser.Virtual - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (UnrealAngelscriptParser.Void - 64)) | (1 << (UnrealAngelscriptParser.LeftParen - 64)) | (1 << (UnrealAngelscriptParser.LeftBracket - 64)) | (1 << (UnrealAngelscriptParser.Plus - 64)) | (1 << (UnrealAngelscriptParser.Minus - 64)) | (1 << (UnrealAngelscriptParser.Star - 64)) | (1 << (UnrealAngelscriptParser.And - 64)) | (1 << (UnrealAngelscriptParser.Or - 64)) | (1 << (UnrealAngelscriptParser.Tilde - 64)) | (1 << (UnrealAngelscriptParser.Not - 64)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (UnrealAngelscriptParser.PlusPlus - 101)) | (1 << (UnrealAngelscriptParser.MinusMinus - 101)) | (1 << (UnrealAngelscriptParser.Doublecolon - 101)) | (1 << (UnrealAngelscriptParser.Semi - 101)) | (1 << (UnrealAngelscriptParser.Identifier - 101)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration() {
	    let localctx = new DeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, UnrealAngelscriptParser.RULE_declaration);
	    try {
	        this.state = 823;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 818;
	            this.moduleImport();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 819;
	            this.blockDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 820;
	            this.functionDefinition();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 821;
	            this.namespaceDefinition();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 822;
	            this.emptyDeclaration_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockDeclaration() {
	    let localctx = new BlockDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, UnrealAngelscriptParser.RULE_blockDeclaration);
	    try {
	        this.state = 829;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 825;
	            this.simpleDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 826;
	            this.namespaceAliasDefinition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 827;
	            this.aliasDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 828;
	            this.opaqueEnumDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aliasDeclaration() {
	    let localctx = new AliasDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, UnrealAngelscriptParser.RULE_aliasDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 831;
	        this.match(UnrealAngelscriptParser.Identifier);
	        this.state = 832;
	        this.match(UnrealAngelscriptParser.Assign);
	        this.state = 833;
	        this.theTypeId();
	        this.state = 834;
	        this.match(UnrealAngelscriptParser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleDeclaration() {
	    let localctx = new SimpleDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, UnrealAngelscriptParser.RULE_simpleDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 837;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	        if(la_===1) {
	            this.state = 836;
	            this.declSpecifierSeq();

	        }
	        this.state = 841;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        if(la_===1) {
	            this.state = 839;
	            this.initDeclaratorList();

	        } else if(la_===2) {
	            this.state = 840;
	            this.assignmentExpression();

	        }
	        this.state = 843;
	        this.match(UnrealAngelscriptParser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyDeclaration_() {
	    let localctx = new EmptyDeclaration_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, UnrealAngelscriptParser.RULE_emptyDeclaration_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 845;
	        this.match(UnrealAngelscriptParser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declSpecifier() {
	    let localctx = new DeclSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, UnrealAngelscriptParser.RULE_declSpecifier);
	    try {
	        this.state = 849;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case UnrealAngelscriptParser.UClass:
	        case UnrealAngelscriptParser.UStruct:
	        case UnrealAngelscriptParser.Out:
	        case UnrealAngelscriptParser.Int:
	        case UnrealAngelscriptParser.Int8:
	        case UnrealAngelscriptParser.Int16:
	        case UnrealAngelscriptParser.Int32:
	        case UnrealAngelscriptParser.Int64:
	        case UnrealAngelscriptParser.UInt:
	        case UnrealAngelscriptParser.UInt8:
	        case UnrealAngelscriptParser.UInt16:
	        case UnrealAngelscriptParser.UInt32:
	        case UnrealAngelscriptParser.UInt64:
	        case UnrealAngelscriptParser.Float:
	        case UnrealAngelscriptParser.Double:
	        case UnrealAngelscriptParser.Bool:
	        case UnrealAngelscriptParser.Auto:
	        case UnrealAngelscriptParser.Class:
	        case UnrealAngelscriptParser.Const:
	        case UnrealAngelscriptParser.Enum:
	        case UnrealAngelscriptParser.Struct:
	        case UnrealAngelscriptParser.Void:
	        case UnrealAngelscriptParser.LeftParen:
	        case UnrealAngelscriptParser.And:
	        case UnrealAngelscriptParser.Doublecolon:
	        case UnrealAngelscriptParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 847;
	            this.typeSpecifier();
	            break;
	        case UnrealAngelscriptParser.Virtual:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 848;
	            this.functionSpecifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declSpecifierSeq() {
	    let localctx = new DeclSpecifierSeqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, UnrealAngelscriptParser.RULE_declSpecifierSeq);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 852; 
	        this._errHandler.sync(this);
	        var _alt = 1+1;
	        do {
	        	switch (_alt) {
	        	case 1+1:
	        		this.state = 851;
	        		this.declSpecifier();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 854; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,84, this._ctx);
	        } while ( _alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionSpecifier() {
	    let localctx = new FunctionSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, UnrealAngelscriptParser.RULE_functionSpecifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 856;
	        this.match(UnrealAngelscriptParser.Virtual);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typedefName() {
	    let localctx = new TypedefNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, UnrealAngelscriptParser.RULE_typedefName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 858;
	        this.match(UnrealAngelscriptParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSpecifier() {
	    let localctx = new TypeSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, UnrealAngelscriptParser.RULE_typeSpecifier);
	    try {
	        this.state = 863;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 860;
	            this.trailingTypeSpecifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 861;
	            this.classSpecifier();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 862;
	            this.enumSpecifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trailingTypeSpecifier() {
	    let localctx = new TrailingTypeSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, UnrealAngelscriptParser.RULE_trailingTypeSpecifier);
	    try {
	        this.state = 870;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case UnrealAngelscriptParser.Int:
	        case UnrealAngelscriptParser.Int8:
	        case UnrealAngelscriptParser.Int16:
	        case UnrealAngelscriptParser.Int32:
	        case UnrealAngelscriptParser.Int64:
	        case UnrealAngelscriptParser.UInt:
	        case UnrealAngelscriptParser.UInt8:
	        case UnrealAngelscriptParser.UInt16:
	        case UnrealAngelscriptParser.UInt32:
	        case UnrealAngelscriptParser.UInt64:
	        case UnrealAngelscriptParser.Float:
	        case UnrealAngelscriptParser.Double:
	        case UnrealAngelscriptParser.Bool:
	        case UnrealAngelscriptParser.Auto:
	        case UnrealAngelscriptParser.Void:
	        case UnrealAngelscriptParser.LeftParen:
	        case UnrealAngelscriptParser.Doublecolon:
	        case UnrealAngelscriptParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 865;
	            this.simpleTypeSpecifier();
	            break;
	        case UnrealAngelscriptParser.Class:
	        case UnrealAngelscriptParser.Enum:
	        case UnrealAngelscriptParser.Struct:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 866;
	            this.elaboratedTypeSpecifier();
	            break;
	        case UnrealAngelscriptParser.Const:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 867;
	            this.match(UnrealAngelscriptParser.Const);
	            break;
	        case UnrealAngelscriptParser.And:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 868;
	            this.match(UnrealAngelscriptParser.And);
	            break;
	        case UnrealAngelscriptParser.Out:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 869;
	            this.match(UnrealAngelscriptParser.Out);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSpecifierSeq() {
	    let localctx = new TypeSpecifierSeqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, UnrealAngelscriptParser.RULE_typeSpecifierSeq);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 873; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 872;
	            this.typeSpecifier();
	            this.state = 875; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 7)) & ~0x1f) == 0 && ((1 << (_la - 7)) & ((1 << (UnrealAngelscriptParser.UClass - 7)) | (1 << (UnrealAngelscriptParser.UStruct - 7)) | (1 << (UnrealAngelscriptParser.Out - 7)) | (1 << (UnrealAngelscriptParser.Int - 7)) | (1 << (UnrealAngelscriptParser.Int8 - 7)) | (1 << (UnrealAngelscriptParser.Int16 - 7)) | (1 << (UnrealAngelscriptParser.Int32 - 7)) | (1 << (UnrealAngelscriptParser.Int64 - 7)) | (1 << (UnrealAngelscriptParser.UInt - 7)) | (1 << (UnrealAngelscriptParser.UInt8 - 7)) | (1 << (UnrealAngelscriptParser.UInt16 - 7)) | (1 << (UnrealAngelscriptParser.UInt32 - 7)) | (1 << (UnrealAngelscriptParser.UInt64 - 7)) | (1 << (UnrealAngelscriptParser.Float - 7)) | (1 << (UnrealAngelscriptParser.Double - 7)) | (1 << (UnrealAngelscriptParser.Bool - 7)) | (1 << (UnrealAngelscriptParser.Auto - 7)) | (1 << (UnrealAngelscriptParser.Class - 7)) | (1 << (UnrealAngelscriptParser.Const - 7)))) !== 0) || ((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (UnrealAngelscriptParser.Enum - 43)) | (1 << (UnrealAngelscriptParser.Struct - 43)) | (1 << (UnrealAngelscriptParser.Void - 43)) | (1 << (UnrealAngelscriptParser.LeftParen - 43)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (UnrealAngelscriptParser.And - 78)) | (1 << (UnrealAngelscriptParser.Doublecolon - 78)) | (1 << (UnrealAngelscriptParser.Identifier - 78)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trailingTypeSpecifierSeq() {
	    let localctx = new TrailingTypeSpecifierSeqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, UnrealAngelscriptParser.RULE_trailingTypeSpecifierSeq);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 878; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 877;
	            this.trailingTypeSpecifier();
	            this.state = 880; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 13)) & ~0x1f) == 0 && ((1 << (_la - 13)) & ((1 << (UnrealAngelscriptParser.Out - 13)) | (1 << (UnrealAngelscriptParser.Int - 13)) | (1 << (UnrealAngelscriptParser.Int8 - 13)) | (1 << (UnrealAngelscriptParser.Int16 - 13)) | (1 << (UnrealAngelscriptParser.Int32 - 13)) | (1 << (UnrealAngelscriptParser.Int64 - 13)) | (1 << (UnrealAngelscriptParser.UInt - 13)) | (1 << (UnrealAngelscriptParser.UInt8 - 13)) | (1 << (UnrealAngelscriptParser.UInt16 - 13)) | (1 << (UnrealAngelscriptParser.UInt32 - 13)) | (1 << (UnrealAngelscriptParser.UInt64 - 13)) | (1 << (UnrealAngelscriptParser.Float - 13)) | (1 << (UnrealAngelscriptParser.Double - 13)) | (1 << (UnrealAngelscriptParser.Bool - 13)) | (1 << (UnrealAngelscriptParser.Auto - 13)) | (1 << (UnrealAngelscriptParser.Class - 13)) | (1 << (UnrealAngelscriptParser.Const - 13)) | (1 << (UnrealAngelscriptParser.Enum - 13)))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (UnrealAngelscriptParser.Struct - 59)) | (1 << (UnrealAngelscriptParser.Void - 59)) | (1 << (UnrealAngelscriptParser.LeftParen - 59)) | (1 << (UnrealAngelscriptParser.And - 59)))) !== 0) || _la===UnrealAngelscriptParser.Doublecolon || _la===UnrealAngelscriptParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleTypeSpecifier() {
	    let localctx = new SimpleTypeSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, UnrealAngelscriptParser.RULE_simpleTypeSpecifier);
	    try {
	        this.state = 903;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 883;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	            if(la_===1) {
	                this.state = 882;
	                this.nestedNameSpecifier(0);

	            }
	            this.state = 885;
	            this.theTypeName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 886;
	            this.asGeneric();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 887;
	            this.match(UnrealAngelscriptParser.Int);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 888;
	            this.match(UnrealAngelscriptParser.Int8);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 889;
	            this.match(UnrealAngelscriptParser.Int16);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 890;
	            this.match(UnrealAngelscriptParser.Int32);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 891;
	            this.match(UnrealAngelscriptParser.Int64);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 892;
	            this.match(UnrealAngelscriptParser.UInt);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 893;
	            this.match(UnrealAngelscriptParser.UInt8);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 894;
	            this.match(UnrealAngelscriptParser.UInt16);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 895;
	            this.match(UnrealAngelscriptParser.UInt32);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 896;
	            this.match(UnrealAngelscriptParser.UInt64);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 897;
	            this.match(UnrealAngelscriptParser.Float);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 898;
	            this.match(UnrealAngelscriptParser.Double);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 899;
	            this.match(UnrealAngelscriptParser.Bool);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 900;
	            this.match(UnrealAngelscriptParser.Void);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 901;
	            this.match(UnrealAngelscriptParser.Auto);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 902;
	            this.decltypeSpecifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assertSpecifier() {
	    let localctx = new AssertSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, UnrealAngelscriptParser.RULE_assertSpecifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 905;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << UnrealAngelscriptParser.Ensure) | (1 << UnrealAngelscriptParser.EnsureAlways) | (1 << UnrealAngelscriptParser.Check))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	theTypeName() {
	    let localctx = new TheTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, UnrealAngelscriptParser.RULE_theTypeName);
	    try {
	        this.state = 910;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 907;
	            this.className();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 908;
	            this.enumName();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 909;
	            this.typedefName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decltypeSpecifier() {
	    let localctx = new DecltypeSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, UnrealAngelscriptParser.RULE_decltypeSpecifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 912;
	        this.match(UnrealAngelscriptParser.LeftParen);
	        this.state = 915;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 913;
	            this.expression();
	            break;

	        case 2:
	            this.state = 914;
	            this.match(UnrealAngelscriptParser.Auto);
	            break;

	        }
	        this.state = 917;
	        this.match(UnrealAngelscriptParser.RightParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elaboratedTypeSpecifier() {
	    let localctx = new ElaboratedTypeSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, UnrealAngelscriptParser.RULE_elaboratedTypeSpecifier);
	    try {
	        this.state = 932;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case UnrealAngelscriptParser.Class:
	        case UnrealAngelscriptParser.Struct:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 919;
	            this.classKey();
	            this.state = 925;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 921;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	                if(la_===1) {
	                    this.state = 920;
	                    this.nestedNameSpecifier(0);

	                }
	                this.state = 923;
	                this.match(UnrealAngelscriptParser.Identifier);
	                break;

	            case 2:
	                this.state = 924;
	                this.nestedNameSpecifier(0);
	                break;

	            }
	            break;
	        case UnrealAngelscriptParser.Enum:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 927;
	            this.match(UnrealAngelscriptParser.Enum);
	            this.state = 929;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	            if(la_===1) {
	                this.state = 928;
	                this.nestedNameSpecifier(0);

	            }
	            this.state = 931;
	            this.match(UnrealAngelscriptParser.Identifier);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumName() {
	    let localctx = new EnumNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, UnrealAngelscriptParser.RULE_enumName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 934;
	        this.match(UnrealAngelscriptParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumSpecifier() {
	    let localctx = new EnumSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, UnrealAngelscriptParser.RULE_enumSpecifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 936;
	        this.enumHead();
	        this.state = 937;
	        this.match(UnrealAngelscriptParser.LeftBrace);
	        this.state = 942;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===UnrealAngelscriptParser.Identifier) {
	            this.state = 938;
	            this.enumeratorList();
	            this.state = 940;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===UnrealAngelscriptParser.Comma) {
	                this.state = 939;
	                this.match(UnrealAngelscriptParser.Comma);
	            }

	        }

	        this.state = 944;
	        this.match(UnrealAngelscriptParser.RightBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumHead() {
	    let localctx = new EnumHeadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, UnrealAngelscriptParser.RULE_enumHead);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 946;
	        this.enumkey();
	        this.state = 951;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===UnrealAngelscriptParser.LeftParen || _la===UnrealAngelscriptParser.Doublecolon || _la===UnrealAngelscriptParser.Identifier) {
	            this.state = 948;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	            if(la_===1) {
	                this.state = 947;
	                this.nestedNameSpecifier(0);

	            }
	            this.state = 950;
	            this.match(UnrealAngelscriptParser.Identifier);
	        }

	        this.state = 954;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===UnrealAngelscriptParser.Colon) {
	            this.state = 953;
	            this.enumbase();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opaqueEnumDeclaration() {
	    let localctx = new OpaqueEnumDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, UnrealAngelscriptParser.RULE_opaqueEnumDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 956;
	        this.enumkey();
	        this.state = 957;
	        this.match(UnrealAngelscriptParser.Identifier);
	        this.state = 959;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===UnrealAngelscriptParser.Colon) {
	            this.state = 958;
	            this.enumbase();
	        }

	        this.state = 961;
	        this.match(UnrealAngelscriptParser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumkey() {
	    let localctx = new EnumkeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, UnrealAngelscriptParser.RULE_enumkey);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 963;
	        this.match(UnrealAngelscriptParser.Enum);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumbase() {
	    let localctx = new EnumbaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, UnrealAngelscriptParser.RULE_enumbase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 965;
	        this.match(UnrealAngelscriptParser.Colon);
	        this.state = 966;
	        this.typeSpecifierSeq();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumeratorList() {
	    let localctx = new EnumeratorListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, UnrealAngelscriptParser.RULE_enumeratorList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 968;
	        this.enumeratorDefinition();
	        this.state = 973;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,103,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 969;
	                this.match(UnrealAngelscriptParser.Comma);
	                this.state = 970;
	                this.enumeratorDefinition(); 
	            }
	            this.state = 975;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,103,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumeratorDefinition() {
	    let localctx = new EnumeratorDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, UnrealAngelscriptParser.RULE_enumeratorDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 976;
	        this.enumerator();
	        this.state = 979;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===UnrealAngelscriptParser.Assign) {
	            this.state = 977;
	            this.match(UnrealAngelscriptParser.Assign);
	            this.state = 978;
	            this.constantExpression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumerator() {
	    let localctx = new EnumeratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, UnrealAngelscriptParser.RULE_enumerator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 981;
	        this.match(UnrealAngelscriptParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespaceName() {
	    let localctx = new NamespaceNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, UnrealAngelscriptParser.RULE_namespaceName);
	    try {
	        this.state = 985;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 983;
	            this.originalNamespaceName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 984;
	            this.namespaceAlias();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	originalNamespaceName() {
	    let localctx = new OriginalNamespaceNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, UnrealAngelscriptParser.RULE_originalNamespaceName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 987;
	        this.match(UnrealAngelscriptParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespaceDefinition() {
	    let localctx = new NamespaceDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, UnrealAngelscriptParser.RULE_namespaceDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 989;
	        this.match(UnrealAngelscriptParser.Namespace);
	        this.state = 992;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	        if(la_===1) {
	            this.state = 990;
	            this.match(UnrealAngelscriptParser.Identifier);

	        } else if(la_===2) {
	            this.state = 991;
	            this.originalNamespaceName();

	        }
	        this.state = 994;
	        this.match(UnrealAngelscriptParser.LeftBrace);
	        this.state = 996;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << UnrealAngelscriptParser.IntegerLiteral) | (1 << UnrealAngelscriptParser.CharacterLiteral) | (1 << UnrealAngelscriptParser.FloatingLiteral) | (1 << UnrealAngelscriptParser.StringLiteral) | (1 << UnrealAngelscriptParser.UserDefinedLiteral) | (1 << UnrealAngelscriptParser.Cast) | (1 << UnrealAngelscriptParser.UClass) | (1 << UnrealAngelscriptParser.UStruct) | (1 << UnrealAngelscriptParser.UFunction) | (1 << UnrealAngelscriptParser.Import) | (1 << UnrealAngelscriptParser.Out) | (1 << UnrealAngelscriptParser.Ensure) | (1 << UnrealAngelscriptParser.EnsureAlways) | (1 << UnrealAngelscriptParser.Check) | (1 << UnrealAngelscriptParser.Mixin) | (1 << UnrealAngelscriptParser.Int) | (1 << UnrealAngelscriptParser.Int8) | (1 << UnrealAngelscriptParser.Int16) | (1 << UnrealAngelscriptParser.Int32) | (1 << UnrealAngelscriptParser.Int64) | (1 << UnrealAngelscriptParser.UInt) | (1 << UnrealAngelscriptParser.UInt8) | (1 << UnrealAngelscriptParser.UInt16) | (1 << UnrealAngelscriptParser.UInt32) | (1 << UnrealAngelscriptParser.UInt64) | (1 << UnrealAngelscriptParser.Float) | (1 << UnrealAngelscriptParser.Double) | (1 << UnrealAngelscriptParser.Bool))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (UnrealAngelscriptParser.Auto - 32)) | (1 << (UnrealAngelscriptParser.Class - 32)) | (1 << (UnrealAngelscriptParser.Const - 32)) | (1 << (UnrealAngelscriptParser.Enum - 32)) | (1 << (UnrealAngelscriptParser.False_ - 32)) | (1 << (UnrealAngelscriptParser.Namespace - 32)) | (1 << (UnrealAngelscriptParser.Nullptr - 32)) | (1 << (UnrealAngelscriptParser.Operator - 32)) | (1 << (UnrealAngelscriptParser.Private - 32)) | (1 << (UnrealAngelscriptParser.Protected - 32)) | (1 << (UnrealAngelscriptParser.Public - 32)) | (1 << (UnrealAngelscriptParser.Struct - 32)) | (1 << (UnrealAngelscriptParser.This - 32)) | (1 << (UnrealAngelscriptParser.True_ - 32)) | (1 << (UnrealAngelscriptParser.Virtual - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (UnrealAngelscriptParser.Void - 64)) | (1 << (UnrealAngelscriptParser.LeftParen - 64)) | (1 << (UnrealAngelscriptParser.LeftBracket - 64)) | (1 << (UnrealAngelscriptParser.Plus - 64)) | (1 << (UnrealAngelscriptParser.Minus - 64)) | (1 << (UnrealAngelscriptParser.Star - 64)) | (1 << (UnrealAngelscriptParser.And - 64)) | (1 << (UnrealAngelscriptParser.Or - 64)) | (1 << (UnrealAngelscriptParser.Tilde - 64)) | (1 << (UnrealAngelscriptParser.Not - 64)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (UnrealAngelscriptParser.PlusPlus - 101)) | (1 << (UnrealAngelscriptParser.MinusMinus - 101)) | (1 << (UnrealAngelscriptParser.Doublecolon - 101)) | (1 << (UnrealAngelscriptParser.Semi - 101)) | (1 << (UnrealAngelscriptParser.Identifier - 101)))) !== 0)) {
	            this.state = 995;
	            localctx.namespaceBody = this.declarationseq();
	        }

	        this.state = 998;
	        this.match(UnrealAngelscriptParser.RightBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespaceAlias() {
	    let localctx = new NamespaceAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, UnrealAngelscriptParser.RULE_namespaceAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1000;
	        this.match(UnrealAngelscriptParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespaceAliasDefinition() {
	    let localctx = new NamespaceAliasDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, UnrealAngelscriptParser.RULE_namespaceAliasDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1002;
	        this.match(UnrealAngelscriptParser.Namespace);
	        this.state = 1003;
	        this.match(UnrealAngelscriptParser.Identifier);
	        this.state = 1004;
	        this.match(UnrealAngelscriptParser.Assign);
	        this.state = 1005;
	        this.qualifiednamespacespecifier();
	        this.state = 1006;
	        this.match(UnrealAngelscriptParser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiednamespacespecifier() {
	    let localctx = new QualifiednamespacespecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, UnrealAngelscriptParser.RULE_qualifiednamespacespecifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1009;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
	        if(la_===1) {
	            this.state = 1008;
	            this.nestedNameSpecifier(0);

	        }
	        this.state = 1011;
	        this.namespaceName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	balancedTokenSeq() {
	    let localctx = new BalancedTokenSeqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, UnrealAngelscriptParser.RULE_balancedTokenSeq);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1014; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1013;
	            this.balancedtoken();
	            this.state = 1016; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << UnrealAngelscriptParser.IntegerLiteral) | (1 << UnrealAngelscriptParser.CharacterLiteral) | (1 << UnrealAngelscriptParser.FloatingLiteral) | (1 << UnrealAngelscriptParser.StringLiteral) | (1 << UnrealAngelscriptParser.UserDefinedLiteral) | (1 << UnrealAngelscriptParser.Cast) | (1 << UnrealAngelscriptParser.UClass) | (1 << UnrealAngelscriptParser.UStruct) | (1 << UnrealAngelscriptParser.UProperty) | (1 << UnrealAngelscriptParser.UFunction) | (1 << UnrealAngelscriptParser.Import) | (1 << UnrealAngelscriptParser.From) | (1 << UnrealAngelscriptParser.Out) | (1 << UnrealAngelscriptParser.Property) | (1 << UnrealAngelscriptParser.Ensure) | (1 << UnrealAngelscriptParser.EnsureAlways) | (1 << UnrealAngelscriptParser.Check) | (1 << UnrealAngelscriptParser.Mixin) | (1 << UnrealAngelscriptParser.Int) | (1 << UnrealAngelscriptParser.Int8) | (1 << UnrealAngelscriptParser.Int16) | (1 << UnrealAngelscriptParser.Int32) | (1 << UnrealAngelscriptParser.Int64) | (1 << UnrealAngelscriptParser.UInt) | (1 << UnrealAngelscriptParser.UInt8) | (1 << UnrealAngelscriptParser.UInt16) | (1 << UnrealAngelscriptParser.UInt32) | (1 << UnrealAngelscriptParser.UInt64) | (1 << UnrealAngelscriptParser.Float) | (1 << UnrealAngelscriptParser.Double) | (1 << UnrealAngelscriptParser.Bool))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (UnrealAngelscriptParser.Auto - 32)) | (1 << (UnrealAngelscriptParser.Break - 32)) | (1 << (UnrealAngelscriptParser.Case - 32)) | (1 << (UnrealAngelscriptParser.Catch - 32)) | (1 << (UnrealAngelscriptParser.Char - 32)) | (1 << (UnrealAngelscriptParser.Class - 32)) | (1 << (UnrealAngelscriptParser.Const - 32)) | (1 << (UnrealAngelscriptParser.Continue - 32)) | (1 << (UnrealAngelscriptParser.Default - 32)) | (1 << (UnrealAngelscriptParser.Do - 32)) | (1 << (UnrealAngelscriptParser.Else - 32)) | (1 << (UnrealAngelscriptParser.Enum - 32)) | (1 << (UnrealAngelscriptParser.Export - 32)) | (1 << (UnrealAngelscriptParser.False_ - 32)) | (1 << (UnrealAngelscriptParser.Final - 32)) | (1 << (UnrealAngelscriptParser.For - 32)) | (1 << (UnrealAngelscriptParser.Goto - 32)) | (1 << (UnrealAngelscriptParser.If - 32)) | (1 << (UnrealAngelscriptParser.Namespace - 32)) | (1 << (UnrealAngelscriptParser.Nullptr - 32)) | (1 << (UnrealAngelscriptParser.Operator - 32)) | (1 << (UnrealAngelscriptParser.Override - 32)) | (1 << (UnrealAngelscriptParser.Private - 32)) | (1 << (UnrealAngelscriptParser.Protected - 32)) | (1 << (UnrealAngelscriptParser.Public - 32)) | (1 << (UnrealAngelscriptParser.Return - 32)) | (1 << (UnrealAngelscriptParser.Short - 32)) | (1 << (UnrealAngelscriptParser.Struct - 32)) | (1 << (UnrealAngelscriptParser.Switch - 32)) | (1 << (UnrealAngelscriptParser.This - 32)) | (1 << (UnrealAngelscriptParser.True_ - 32)) | (1 << (UnrealAngelscriptParser.Virtual - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (UnrealAngelscriptParser.Void - 64)) | (1 << (UnrealAngelscriptParser.While - 64)) | (1 << (UnrealAngelscriptParser.LeftParen - 64)) | (1 << (UnrealAngelscriptParser.LeftBracket - 64)) | (1 << (UnrealAngelscriptParser.LeftBrace - 64)) | (1 << (UnrealAngelscriptParser.Plus - 64)) | (1 << (UnrealAngelscriptParser.Minus - 64)) | (1 << (UnrealAngelscriptParser.Star - 64)) | (1 << (UnrealAngelscriptParser.Div - 64)) | (1 << (UnrealAngelscriptParser.Mod - 64)) | (1 << (UnrealAngelscriptParser.Xor - 64)) | (1 << (UnrealAngelscriptParser.And - 64)) | (1 << (UnrealAngelscriptParser.Or - 64)) | (1 << (UnrealAngelscriptParser.Tilde - 64)) | (1 << (UnrealAngelscriptParser.Not - 64)) | (1 << (UnrealAngelscriptParser.Assign - 64)) | (1 << (UnrealAngelscriptParser.Less - 64)) | (1 << (UnrealAngelscriptParser.Greater - 64)) | (1 << (UnrealAngelscriptParser.PlusAssign - 64)) | (1 << (UnrealAngelscriptParser.MinusAssign - 64)) | (1 << (UnrealAngelscriptParser.StarAssign - 64)) | (1 << (UnrealAngelscriptParser.DivAssign - 64)) | (1 << (UnrealAngelscriptParser.ModAssign - 64)) | (1 << (UnrealAngelscriptParser.XorAssign - 64)) | (1 << (UnrealAngelscriptParser.AndAssign - 64)) | (1 << (UnrealAngelscriptParser.OrAssign - 64)) | (1 << (UnrealAngelscriptParser.LeftShiftAssign - 64)) | (1 << (UnrealAngelscriptParser.RightShiftAssign - 64)) | (1 << (UnrealAngelscriptParser.Equal - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (UnrealAngelscriptParser.NotEqual - 96)) | (1 << (UnrealAngelscriptParser.LessEqual - 96)) | (1 << (UnrealAngelscriptParser.GreaterEqual - 96)) | (1 << (UnrealAngelscriptParser.AndAnd - 96)) | (1 << (UnrealAngelscriptParser.OrOr - 96)) | (1 << (UnrealAngelscriptParser.PlusPlus - 96)) | (1 << (UnrealAngelscriptParser.MinusMinus - 96)) | (1 << (UnrealAngelscriptParser.Comma - 96)) | (1 << (UnrealAngelscriptParser.Question - 96)) | (1 << (UnrealAngelscriptParser.Colon - 96)) | (1 << (UnrealAngelscriptParser.Doublecolon - 96)) | (1 << (UnrealAngelscriptParser.Semi - 96)) | (1 << (UnrealAngelscriptParser.Dot - 96)) | (1 << (UnrealAngelscriptParser.Identifier - 96)) | (1 << (UnrealAngelscriptParser.DecimalLiteral - 96)) | (1 << (UnrealAngelscriptParser.OctalLiteral - 96)) | (1 << (UnrealAngelscriptParser.HexadecimalLiteral - 96)) | (1 << (UnrealAngelscriptParser.BinaryLiteral - 96)) | (1 << (UnrealAngelscriptParser.Integersuffix - 96)) | (1 << (UnrealAngelscriptParser.UserDefinedIntegerLiteral - 96)) | (1 << (UnrealAngelscriptParser.UserDefinedFloatingLiteral - 96)) | (1 << (UnrealAngelscriptParser.UserDefinedStringLiteral - 96)) | (1 << (UnrealAngelscriptParser.UserDefinedCharacterLiteral - 96)) | (1 << (UnrealAngelscriptParser.Whitespace - 96)) | (1 << (UnrealAngelscriptParser.Newline - 96)) | (1 << (UnrealAngelscriptParser.BlockComment - 96)) | (1 << (UnrealAngelscriptParser.LineComment - 96)) | (1 << (UnrealAngelscriptParser.PreprocessorBranchRemoval - 96)) | (1 << (UnrealAngelscriptParser.Preprocessor - 96)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	balancedtoken() {
	    let localctx = new BalancedtokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, UnrealAngelscriptParser.RULE_balancedtoken);
	    var _la = 0; // Token type
	    try {
	        this.state = 1035;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case UnrealAngelscriptParser.LeftParen:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1018;
	            this.match(UnrealAngelscriptParser.LeftParen);
	            this.state = 1019;
	            this.balancedTokenSeq();
	            this.state = 1020;
	            this.match(UnrealAngelscriptParser.RightParen);
	            break;
	        case UnrealAngelscriptParser.LeftBracket:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1022;
	            this.match(UnrealAngelscriptParser.LeftBracket);
	            this.state = 1023;
	            this.balancedTokenSeq();
	            this.state = 1024;
	            this.match(UnrealAngelscriptParser.RightBracket);
	            break;
	        case UnrealAngelscriptParser.LeftBrace:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1026;
	            this.match(UnrealAngelscriptParser.LeftBrace);
	            this.state = 1027;
	            this.balancedTokenSeq();
	            this.state = 1028;
	            this.match(UnrealAngelscriptParser.RightBrace);
	            break;
	        case UnrealAngelscriptParser.IntegerLiteral:
	        case UnrealAngelscriptParser.CharacterLiteral:
	        case UnrealAngelscriptParser.FloatingLiteral:
	        case UnrealAngelscriptParser.StringLiteral:
	        case UnrealAngelscriptParser.UserDefinedLiteral:
	        case UnrealAngelscriptParser.Cast:
	        case UnrealAngelscriptParser.UClass:
	        case UnrealAngelscriptParser.UStruct:
	        case UnrealAngelscriptParser.UProperty:
	        case UnrealAngelscriptParser.UFunction:
	        case UnrealAngelscriptParser.Import:
	        case UnrealAngelscriptParser.From:
	        case UnrealAngelscriptParser.Out:
	        case UnrealAngelscriptParser.Property:
	        case UnrealAngelscriptParser.Ensure:
	        case UnrealAngelscriptParser.EnsureAlways:
	        case UnrealAngelscriptParser.Check:
	        case UnrealAngelscriptParser.Mixin:
	        case UnrealAngelscriptParser.Int:
	        case UnrealAngelscriptParser.Int8:
	        case UnrealAngelscriptParser.Int16:
	        case UnrealAngelscriptParser.Int32:
	        case UnrealAngelscriptParser.Int64:
	        case UnrealAngelscriptParser.UInt:
	        case UnrealAngelscriptParser.UInt8:
	        case UnrealAngelscriptParser.UInt16:
	        case UnrealAngelscriptParser.UInt32:
	        case UnrealAngelscriptParser.UInt64:
	        case UnrealAngelscriptParser.Float:
	        case UnrealAngelscriptParser.Double:
	        case UnrealAngelscriptParser.Bool:
	        case UnrealAngelscriptParser.Auto:
	        case UnrealAngelscriptParser.Break:
	        case UnrealAngelscriptParser.Case:
	        case UnrealAngelscriptParser.Catch:
	        case UnrealAngelscriptParser.Char:
	        case UnrealAngelscriptParser.Class:
	        case UnrealAngelscriptParser.Const:
	        case UnrealAngelscriptParser.Continue:
	        case UnrealAngelscriptParser.Default:
	        case UnrealAngelscriptParser.Do:
	        case UnrealAngelscriptParser.Else:
	        case UnrealAngelscriptParser.Enum:
	        case UnrealAngelscriptParser.Export:
	        case UnrealAngelscriptParser.False_:
	        case UnrealAngelscriptParser.Final:
	        case UnrealAngelscriptParser.For:
	        case UnrealAngelscriptParser.Goto:
	        case UnrealAngelscriptParser.If:
	        case UnrealAngelscriptParser.Namespace:
	        case UnrealAngelscriptParser.Nullptr:
	        case UnrealAngelscriptParser.Operator:
	        case UnrealAngelscriptParser.Override:
	        case UnrealAngelscriptParser.Private:
	        case UnrealAngelscriptParser.Protected:
	        case UnrealAngelscriptParser.Public:
	        case UnrealAngelscriptParser.Return:
	        case UnrealAngelscriptParser.Short:
	        case UnrealAngelscriptParser.Struct:
	        case UnrealAngelscriptParser.Switch:
	        case UnrealAngelscriptParser.This:
	        case UnrealAngelscriptParser.True_:
	        case UnrealAngelscriptParser.Virtual:
	        case UnrealAngelscriptParser.Void:
	        case UnrealAngelscriptParser.While:
	        case UnrealAngelscriptParser.Plus:
	        case UnrealAngelscriptParser.Minus:
	        case UnrealAngelscriptParser.Star:
	        case UnrealAngelscriptParser.Div:
	        case UnrealAngelscriptParser.Mod:
	        case UnrealAngelscriptParser.Xor:
	        case UnrealAngelscriptParser.And:
	        case UnrealAngelscriptParser.Or:
	        case UnrealAngelscriptParser.Tilde:
	        case UnrealAngelscriptParser.Not:
	        case UnrealAngelscriptParser.Assign:
	        case UnrealAngelscriptParser.Less:
	        case UnrealAngelscriptParser.Greater:
	        case UnrealAngelscriptParser.PlusAssign:
	        case UnrealAngelscriptParser.MinusAssign:
	        case UnrealAngelscriptParser.StarAssign:
	        case UnrealAngelscriptParser.DivAssign:
	        case UnrealAngelscriptParser.ModAssign:
	        case UnrealAngelscriptParser.XorAssign:
	        case UnrealAngelscriptParser.AndAssign:
	        case UnrealAngelscriptParser.OrAssign:
	        case UnrealAngelscriptParser.LeftShiftAssign:
	        case UnrealAngelscriptParser.RightShiftAssign:
	        case UnrealAngelscriptParser.Equal:
	        case UnrealAngelscriptParser.NotEqual:
	        case UnrealAngelscriptParser.LessEqual:
	        case UnrealAngelscriptParser.GreaterEqual:
	        case UnrealAngelscriptParser.AndAnd:
	        case UnrealAngelscriptParser.OrOr:
	        case UnrealAngelscriptParser.PlusPlus:
	        case UnrealAngelscriptParser.MinusMinus:
	        case UnrealAngelscriptParser.Comma:
	        case UnrealAngelscriptParser.Question:
	        case UnrealAngelscriptParser.Colon:
	        case UnrealAngelscriptParser.Doublecolon:
	        case UnrealAngelscriptParser.Semi:
	        case UnrealAngelscriptParser.Dot:
	        case UnrealAngelscriptParser.Identifier:
	        case UnrealAngelscriptParser.DecimalLiteral:
	        case UnrealAngelscriptParser.OctalLiteral:
	        case UnrealAngelscriptParser.HexadecimalLiteral:
	        case UnrealAngelscriptParser.BinaryLiteral:
	        case UnrealAngelscriptParser.Integersuffix:
	        case UnrealAngelscriptParser.UserDefinedIntegerLiteral:
	        case UnrealAngelscriptParser.UserDefinedFloatingLiteral:
	        case UnrealAngelscriptParser.UserDefinedStringLiteral:
	        case UnrealAngelscriptParser.UserDefinedCharacterLiteral:
	        case UnrealAngelscriptParser.Whitespace:
	        case UnrealAngelscriptParser.Newline:
	        case UnrealAngelscriptParser.BlockComment:
	        case UnrealAngelscriptParser.LineComment:
	        case UnrealAngelscriptParser.PreprocessorBranchRemoval:
	        case UnrealAngelscriptParser.Preprocessor:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1031; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1030;
	            		_la = this._input.LA(1);
	            		if(_la<=0 || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (UnrealAngelscriptParser.LeftParen - 66)) | (1 << (UnrealAngelscriptParser.RightParen - 66)) | (1 << (UnrealAngelscriptParser.LeftBracket - 66)) | (1 << (UnrealAngelscriptParser.RightBracket - 66)) | (1 << (UnrealAngelscriptParser.LeftBrace - 66)) | (1 << (UnrealAngelscriptParser.RightBrace - 66)))) !== 0)) {
	            		this._errHandler.recoverInline(this);
	            		}
	            		else {
	            			this._errHandler.reportMatch(this);
	            		    this.consume();
	            		}
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1033; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,110, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initDeclaratorList() {
	    let localctx = new InitDeclaratorListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, UnrealAngelscriptParser.RULE_initDeclaratorList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1037;
	        this.initDeclarator();
	        this.state = 1042;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===UnrealAngelscriptParser.Comma) {
	            this.state = 1038;
	            this.match(UnrealAngelscriptParser.Comma);
	            this.state = 1039;
	            this.initDeclarator();
	            this.state = 1044;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initDeclarator() {
	    let localctx = new InitDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, UnrealAngelscriptParser.RULE_initDeclarator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1045;
	        this.match(UnrealAngelscriptParser.Identifier);
	        this.state = 1047;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (UnrealAngelscriptParser.LeftParen - 66)) | (1 << (UnrealAngelscriptParser.LeftBracket - 66)) | (1 << (UnrealAngelscriptParser.LeftBrace - 66)) | (1 << (UnrealAngelscriptParser.Assign - 66)))) !== 0)) {
	            this.state = 1046;
	            this.initializer();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarator() {
	    let localctx = new DeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, UnrealAngelscriptParser.RULE_declarator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1049;
	        this.declaratorDef(0);
	        this.state = 1050;
	        this.parametersAndQualifiers();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	declaratorDef(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new DeclaratorDefContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 200;
	    this.enterRecursionRule(localctx, 200, UnrealAngelscriptParser.RULE_declaratorDef, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1053;
	        this.declaratorid();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1066;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,116,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new DeclaratorDefContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, UnrealAngelscriptParser.RULE_declaratorDef);
	                this.state = 1055;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1062;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case UnrealAngelscriptParser.LeftParen:
	                    this.state = 1056;
	                    this.parametersAndQualifiers();
	                    break;
	                case UnrealAngelscriptParser.LeftBracket:
	                    this.state = 1057;
	                    this.match(UnrealAngelscriptParser.LeftBracket);
	                    this.state = 1059;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (UnrealAngelscriptParser.IntegerLiteral - 1)) | (1 << (UnrealAngelscriptParser.CharacterLiteral - 1)) | (1 << (UnrealAngelscriptParser.FloatingLiteral - 1)) | (1 << (UnrealAngelscriptParser.StringLiteral - 1)) | (1 << (UnrealAngelscriptParser.UserDefinedLiteral - 1)) | (1 << (UnrealAngelscriptParser.Cast - 1)) | (1 << (UnrealAngelscriptParser.Ensure - 1)) | (1 << (UnrealAngelscriptParser.EnsureAlways - 1)) | (1 << (UnrealAngelscriptParser.Check - 1)) | (1 << (UnrealAngelscriptParser.Int - 1)) | (1 << (UnrealAngelscriptParser.Int8 - 1)) | (1 << (UnrealAngelscriptParser.Int16 - 1)) | (1 << (UnrealAngelscriptParser.Int32 - 1)) | (1 << (UnrealAngelscriptParser.Int64 - 1)) | (1 << (UnrealAngelscriptParser.UInt - 1)) | (1 << (UnrealAngelscriptParser.UInt8 - 1)) | (1 << (UnrealAngelscriptParser.UInt16 - 1)) | (1 << (UnrealAngelscriptParser.UInt32 - 1)) | (1 << (UnrealAngelscriptParser.UInt64 - 1)) | (1 << (UnrealAngelscriptParser.Float - 1)) | (1 << (UnrealAngelscriptParser.Double - 1)) | (1 << (UnrealAngelscriptParser.Bool - 1)) | (1 << (UnrealAngelscriptParser.Auto - 1)))) !== 0) || ((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (UnrealAngelscriptParser.False_ - 45)) | (1 << (UnrealAngelscriptParser.Nullptr - 45)) | (1 << (UnrealAngelscriptParser.Operator - 45)) | (1 << (UnrealAngelscriptParser.This - 45)) | (1 << (UnrealAngelscriptParser.True_ - 45)) | (1 << (UnrealAngelscriptParser.Void - 45)) | (1 << (UnrealAngelscriptParser.LeftParen - 45)) | (1 << (UnrealAngelscriptParser.LeftBracket - 45)) | (1 << (UnrealAngelscriptParser.Plus - 45)) | (1 << (UnrealAngelscriptParser.Minus - 45)) | (1 << (UnrealAngelscriptParser.Star - 45)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (UnrealAngelscriptParser.And - 78)) | (1 << (UnrealAngelscriptParser.Or - 78)) | (1 << (UnrealAngelscriptParser.Tilde - 78)) | (1 << (UnrealAngelscriptParser.Not - 78)) | (1 << (UnrealAngelscriptParser.PlusPlus - 78)) | (1 << (UnrealAngelscriptParser.MinusMinus - 78)) | (1 << (UnrealAngelscriptParser.Doublecolon - 78)) | (1 << (UnrealAngelscriptParser.Identifier - 78)))) !== 0)) {
	                        this.state = 1058;
	                        this.constantExpression();
	                    }

	                    this.state = 1061;
	                    this.match(UnrealAngelscriptParser.RightBracket);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 1068;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,116,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	parametersAndQualifiers() {
	    let localctx = new ParametersAndQualifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, UnrealAngelscriptParser.RULE_parametersAndQualifiers);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1069;
	        this.match(UnrealAngelscriptParser.LeftParen);
	        this.state = 1071;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 7)) & ~0x1f) == 0 && ((1 << (_la - 7)) & ((1 << (UnrealAngelscriptParser.UClass - 7)) | (1 << (UnrealAngelscriptParser.UStruct - 7)) | (1 << (UnrealAngelscriptParser.Out - 7)) | (1 << (UnrealAngelscriptParser.Int - 7)) | (1 << (UnrealAngelscriptParser.Int8 - 7)) | (1 << (UnrealAngelscriptParser.Int16 - 7)) | (1 << (UnrealAngelscriptParser.Int32 - 7)) | (1 << (UnrealAngelscriptParser.Int64 - 7)) | (1 << (UnrealAngelscriptParser.UInt - 7)) | (1 << (UnrealAngelscriptParser.UInt8 - 7)) | (1 << (UnrealAngelscriptParser.UInt16 - 7)) | (1 << (UnrealAngelscriptParser.UInt32 - 7)) | (1 << (UnrealAngelscriptParser.UInt64 - 7)) | (1 << (UnrealAngelscriptParser.Float - 7)) | (1 << (UnrealAngelscriptParser.Double - 7)) | (1 << (UnrealAngelscriptParser.Bool - 7)) | (1 << (UnrealAngelscriptParser.Auto - 7)) | (1 << (UnrealAngelscriptParser.Class - 7)) | (1 << (UnrealAngelscriptParser.Const - 7)))) !== 0) || ((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (UnrealAngelscriptParser.Enum - 43)) | (1 << (UnrealAngelscriptParser.Struct - 43)) | (1 << (UnrealAngelscriptParser.Virtual - 43)) | (1 << (UnrealAngelscriptParser.Void - 43)) | (1 << (UnrealAngelscriptParser.LeftParen - 43)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (UnrealAngelscriptParser.And - 78)) | (1 << (UnrealAngelscriptParser.Doublecolon - 78)) | (1 << (UnrealAngelscriptParser.Identifier - 78)))) !== 0)) {
	            this.state = 1070;
	            this.parameterDeclarationClause();
	        }

	        this.state = 1073;
	        this.match(UnrealAngelscriptParser.RightParen);
	        this.state = 1075;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
	        if(la_===1) {
	            this.state = 1074;
	            this.match(UnrealAngelscriptParser.Const);

	        }
	        this.state = 1078;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
	        if(la_===1) {
	            this.state = 1077;
	            this.refqualifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refqualifier() {
	    let localctx = new RefqualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, UnrealAngelscriptParser.RULE_refqualifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1080;
	        _la = this._input.LA(1);
	        if(!(_la===UnrealAngelscriptParser.And || _la===UnrealAngelscriptParser.AndAnd)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaratorid() {
	    let localctx = new DeclaratoridContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, UnrealAngelscriptParser.RULE_declaratorid);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1082;
	        this.idExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	theTypeId() {
	    let localctx = new TheTypeIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, UnrealAngelscriptParser.RULE_theTypeId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1084;
	        this.typeSpecifierSeq();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterDeclarationClause() {
	    let localctx = new ParameterDeclarationClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, UnrealAngelscriptParser.RULE_parameterDeclarationClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1086;
	        this.parameterDeclarationList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterDeclarationList() {
	    let localctx = new ParameterDeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, UnrealAngelscriptParser.RULE_parameterDeclarationList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1088;
	        this.parameterDeclaration();
	        this.state = 1093;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===UnrealAngelscriptParser.Comma) {
	            this.state = 1089;
	            this.match(UnrealAngelscriptParser.Comma);
	            this.state = 1090;
	            this.parameterDeclaration();
	            this.state = 1095;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterDeclaration() {
	    let localctx = new ParameterDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, UnrealAngelscriptParser.RULE_parameterDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1096;
	        this.declSpecifierSeq();
	        this.state = 1098;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===UnrealAngelscriptParser.Identifier) {
	            this.state = 1097;
	            this.match(UnrealAngelscriptParser.Identifier);
	        }

	        this.state = 1102;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===UnrealAngelscriptParser.Assign) {
	            this.state = 1100;
	            this.match(UnrealAngelscriptParser.Assign);
	            this.state = 1101;
	            this.initializerClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDefinition() {
	    let localctx = new FunctionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, UnrealAngelscriptParser.RULE_functionDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1105;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===UnrealAngelscriptParser.UFunction) {
	            this.state = 1104;
	            this.ufunction();
	        }

	        this.state = 1108;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (UnrealAngelscriptParser.Private - 54)) | (1 << (UnrealAngelscriptParser.Protected - 54)) | (1 << (UnrealAngelscriptParser.Public - 54)))) !== 0)) {
	            this.state = 1107;
	            this.accessSpecifier();
	        }

	        this.state = 1111;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===UnrealAngelscriptParser.Mixin) {
	            this.state = 1110;
	            this.match(UnrealAngelscriptParser.Mixin);
	        }

	        this.state = 1114;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	        if(la_===1) {
	            this.state = 1113;
	            this.declSpecifierSeq();

	        }
	        this.state = 1116;
	        this.declarator();
	        this.state = 1118;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===UnrealAngelscriptParser.Property || _la===UnrealAngelscriptParser.Final || _la===UnrealAngelscriptParser.Override) {
	            this.state = 1117;
	            this.postFuncSpecifierSeq();
	        }

	        this.state = 1120;
	        this.functionBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionBody() {
	    let localctx = new FunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, UnrealAngelscriptParser.RULE_functionBody);
	    try {
	        this.state = 1127;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case UnrealAngelscriptParser.LeftBrace:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1122;
	            this.compoundStatement();
	            break;
	        case UnrealAngelscriptParser.Assign:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1123;
	            this.match(UnrealAngelscriptParser.Assign);
	            this.state = 1124;
	            this.match(UnrealAngelscriptParser.Default);
	            this.state = 1125;
	            this.match(UnrealAngelscriptParser.Semi);
	            break;
	        case UnrealAngelscriptParser.Semi:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1126;
	            this.match(UnrealAngelscriptParser.Semi);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializer() {
	    let localctx = new InitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, UnrealAngelscriptParser.RULE_initializer);
	    try {
	        this.state = 1134;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case UnrealAngelscriptParser.LeftBracket:
	        case UnrealAngelscriptParser.LeftBrace:
	        case UnrealAngelscriptParser.Assign:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1129;
	            this.braceOrEqualInitializer();
	            break;
	        case UnrealAngelscriptParser.LeftParen:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1130;
	            this.match(UnrealAngelscriptParser.LeftParen);
	            this.state = 1131;
	            this.expressionList();
	            this.state = 1132;
	            this.match(UnrealAngelscriptParser.RightParen);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	braceOrEqualInitializer() {
	    let localctx = new BraceOrEqualInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, UnrealAngelscriptParser.RULE_braceOrEqualInitializer);
	    try {
	        this.state = 1139;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case UnrealAngelscriptParser.Assign:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1136;
	            this.match(UnrealAngelscriptParser.Assign);
	            this.state = 1137;
	            this.initializerClause();
	            break;
	        case UnrealAngelscriptParser.LeftBracket:
	        case UnrealAngelscriptParser.LeftBrace:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1138;
	            this.bracedInitList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializerClause() {
	    let localctx = new InitializerClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, UnrealAngelscriptParser.RULE_initializerClause);
	    try {
	        this.state = 1143;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1141;
	            this.assignmentExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1142;
	            this.bracedInitList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializerList() {
	    let localctx = new InitializerListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, UnrealAngelscriptParser.RULE_initializerList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1145;
	        this.initializerClause();
	        this.state = 1150;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,132,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1146;
	                this.match(UnrealAngelscriptParser.Comma);
	                this.state = 1147;
	                this.initializerClause(); 
	            }
	            this.state = 1152;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,132,this._ctx);
	        }

	        this.state = 1154;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
	        if(la_===1) {
	            this.state = 1153;
	            this.match(UnrealAngelscriptParser.Comma);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bracedInitList() {
	    let localctx = new BracedInitListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, UnrealAngelscriptParser.RULE_bracedInitList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1156;
	        _la = this._input.LA(1);
	        if(!(_la===UnrealAngelscriptParser.LeftBracket || _la===UnrealAngelscriptParser.LeftBrace)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1161;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (UnrealAngelscriptParser.IntegerLiteral - 1)) | (1 << (UnrealAngelscriptParser.CharacterLiteral - 1)) | (1 << (UnrealAngelscriptParser.FloatingLiteral - 1)) | (1 << (UnrealAngelscriptParser.StringLiteral - 1)) | (1 << (UnrealAngelscriptParser.UserDefinedLiteral - 1)) | (1 << (UnrealAngelscriptParser.Cast - 1)) | (1 << (UnrealAngelscriptParser.Ensure - 1)) | (1 << (UnrealAngelscriptParser.EnsureAlways - 1)) | (1 << (UnrealAngelscriptParser.Check - 1)) | (1 << (UnrealAngelscriptParser.Int - 1)) | (1 << (UnrealAngelscriptParser.Int8 - 1)) | (1 << (UnrealAngelscriptParser.Int16 - 1)) | (1 << (UnrealAngelscriptParser.Int32 - 1)) | (1 << (UnrealAngelscriptParser.Int64 - 1)) | (1 << (UnrealAngelscriptParser.UInt - 1)) | (1 << (UnrealAngelscriptParser.UInt8 - 1)) | (1 << (UnrealAngelscriptParser.UInt16 - 1)) | (1 << (UnrealAngelscriptParser.UInt32 - 1)) | (1 << (UnrealAngelscriptParser.UInt64 - 1)) | (1 << (UnrealAngelscriptParser.Float - 1)) | (1 << (UnrealAngelscriptParser.Double - 1)) | (1 << (UnrealAngelscriptParser.Bool - 1)) | (1 << (UnrealAngelscriptParser.Auto - 1)))) !== 0) || ((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (UnrealAngelscriptParser.False_ - 45)) | (1 << (UnrealAngelscriptParser.Nullptr - 45)) | (1 << (UnrealAngelscriptParser.Operator - 45)) | (1 << (UnrealAngelscriptParser.This - 45)) | (1 << (UnrealAngelscriptParser.True_ - 45)) | (1 << (UnrealAngelscriptParser.Void - 45)) | (1 << (UnrealAngelscriptParser.LeftParen - 45)) | (1 << (UnrealAngelscriptParser.LeftBracket - 45)) | (1 << (UnrealAngelscriptParser.LeftBrace - 45)) | (1 << (UnrealAngelscriptParser.Plus - 45)) | (1 << (UnrealAngelscriptParser.Minus - 45)) | (1 << (UnrealAngelscriptParser.Star - 45)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (UnrealAngelscriptParser.And - 78)) | (1 << (UnrealAngelscriptParser.Or - 78)) | (1 << (UnrealAngelscriptParser.Tilde - 78)) | (1 << (UnrealAngelscriptParser.Not - 78)) | (1 << (UnrealAngelscriptParser.PlusPlus - 78)) | (1 << (UnrealAngelscriptParser.MinusMinus - 78)) | (1 << (UnrealAngelscriptParser.Doublecolon - 78)) | (1 << (UnrealAngelscriptParser.Identifier - 78)))) !== 0)) {
	            this.state = 1157;
	            this.initializerList();
	            this.state = 1159;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===UnrealAngelscriptParser.Comma) {
	                this.state = 1158;
	                this.match(UnrealAngelscriptParser.Comma);
	            }

	        }

	        this.state = 1163;
	        _la = this._input.LA(1);
	        if(!(_la===UnrealAngelscriptParser.RightBracket || _la===UnrealAngelscriptParser.RightBrace)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	className() {
	    let localctx = new ClassNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, UnrealAngelscriptParser.RULE_className);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1165;
	        this.match(UnrealAngelscriptParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classSpecifier() {
	    let localctx = new ClassSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, UnrealAngelscriptParser.RULE_classSpecifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1167;
	        this.classHead();
	        this.state = 1168;
	        this.match(UnrealAngelscriptParser.LeftBrace);
	        this.state = 1170;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << UnrealAngelscriptParser.IntegerLiteral) | (1 << UnrealAngelscriptParser.CharacterLiteral) | (1 << UnrealAngelscriptParser.FloatingLiteral) | (1 << UnrealAngelscriptParser.StringLiteral) | (1 << UnrealAngelscriptParser.UserDefinedLiteral) | (1 << UnrealAngelscriptParser.Cast) | (1 << UnrealAngelscriptParser.UClass) | (1 << UnrealAngelscriptParser.UStruct) | (1 << UnrealAngelscriptParser.UProperty) | (1 << UnrealAngelscriptParser.UFunction) | (1 << UnrealAngelscriptParser.Out) | (1 << UnrealAngelscriptParser.Ensure) | (1 << UnrealAngelscriptParser.EnsureAlways) | (1 << UnrealAngelscriptParser.Check) | (1 << UnrealAngelscriptParser.Mixin) | (1 << UnrealAngelscriptParser.Int) | (1 << UnrealAngelscriptParser.Int8) | (1 << UnrealAngelscriptParser.Int16) | (1 << UnrealAngelscriptParser.Int32) | (1 << UnrealAngelscriptParser.Int64) | (1 << UnrealAngelscriptParser.UInt) | (1 << UnrealAngelscriptParser.UInt8) | (1 << UnrealAngelscriptParser.UInt16) | (1 << UnrealAngelscriptParser.UInt32) | (1 << UnrealAngelscriptParser.UInt64) | (1 << UnrealAngelscriptParser.Float) | (1 << UnrealAngelscriptParser.Double) | (1 << UnrealAngelscriptParser.Bool))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (UnrealAngelscriptParser.Auto - 32)) | (1 << (UnrealAngelscriptParser.Class - 32)) | (1 << (UnrealAngelscriptParser.Const - 32)) | (1 << (UnrealAngelscriptParser.Default - 32)) | (1 << (UnrealAngelscriptParser.Enum - 32)) | (1 << (UnrealAngelscriptParser.False_ - 32)) | (1 << (UnrealAngelscriptParser.Nullptr - 32)) | (1 << (UnrealAngelscriptParser.Operator - 32)) | (1 << (UnrealAngelscriptParser.Private - 32)) | (1 << (UnrealAngelscriptParser.Protected - 32)) | (1 << (UnrealAngelscriptParser.Public - 32)) | (1 << (UnrealAngelscriptParser.Struct - 32)) | (1 << (UnrealAngelscriptParser.This - 32)) | (1 << (UnrealAngelscriptParser.True_ - 32)) | (1 << (UnrealAngelscriptParser.Virtual - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (UnrealAngelscriptParser.Void - 64)) | (1 << (UnrealAngelscriptParser.LeftParen - 64)) | (1 << (UnrealAngelscriptParser.LeftBracket - 64)) | (1 << (UnrealAngelscriptParser.Plus - 64)) | (1 << (UnrealAngelscriptParser.Minus - 64)) | (1 << (UnrealAngelscriptParser.Star - 64)) | (1 << (UnrealAngelscriptParser.And - 64)) | (1 << (UnrealAngelscriptParser.Or - 64)) | (1 << (UnrealAngelscriptParser.Tilde - 64)) | (1 << (UnrealAngelscriptParser.Not - 64)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (UnrealAngelscriptParser.PlusPlus - 101)) | (1 << (UnrealAngelscriptParser.MinusMinus - 101)) | (1 << (UnrealAngelscriptParser.Colon - 101)) | (1 << (UnrealAngelscriptParser.Doublecolon - 101)) | (1 << (UnrealAngelscriptParser.Semi - 101)) | (1 << (UnrealAngelscriptParser.Identifier - 101)))) !== 0)) {
	            this.state = 1169;
	            this.memberSpecification();
	        }

	        this.state = 1172;
	        this.match(UnrealAngelscriptParser.RightBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classHead() {
	    let localctx = new ClassHeadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, UnrealAngelscriptParser.RULE_classHead);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1175;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===UnrealAngelscriptParser.UClass || _la===UnrealAngelscriptParser.UStruct) {
	            this.state = 1174;
	            this.utype();
	        }

	        this.state = 1177;
	        this.classKey();
	        this.state = 1182;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===UnrealAngelscriptParser.LeftParen || _la===UnrealAngelscriptParser.Doublecolon || _la===UnrealAngelscriptParser.Identifier) {
	            this.state = 1178;
	            this.classHeadName();
	            this.state = 1180;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===UnrealAngelscriptParser.Final) {
	                this.state = 1179;
	                this.classVirtSpecifier();
	            }

	        }

	        this.state = 1185;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===UnrealAngelscriptParser.Colon) {
	            this.state = 1184;
	            this.baseClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classHeadName() {
	    let localctx = new ClassHeadNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, UnrealAngelscriptParser.RULE_classHeadName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1188;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
	        if(la_===1) {
	            this.state = 1187;
	            this.nestedNameSpecifier(0);

	        }
	        this.state = 1190;
	        this.className();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classVirtSpecifier() {
	    let localctx = new ClassVirtSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, UnrealAngelscriptParser.RULE_classVirtSpecifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1192;
	        this.match(UnrealAngelscriptParser.Final);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classKey() {
	    let localctx = new ClassKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, UnrealAngelscriptParser.RULE_classKey);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1194;
	        _la = this._input.LA(1);
	        if(!(_la===UnrealAngelscriptParser.Class || _la===UnrealAngelscriptParser.Struct)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memberSpecification() {
	    let localctx = new MemberSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, UnrealAngelscriptParser.RULE_memberSpecification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1200; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1200;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1196;
	                this.memberdeclaration();
	                break;

	            case 2:
	                this.state = 1197;
	                this.accessSpecifier();
	                this.state = 1198;
	                this.match(UnrealAngelscriptParser.Colon);
	                break;

	            }
	            this.state = 1202; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << UnrealAngelscriptParser.IntegerLiteral) | (1 << UnrealAngelscriptParser.CharacterLiteral) | (1 << UnrealAngelscriptParser.FloatingLiteral) | (1 << UnrealAngelscriptParser.StringLiteral) | (1 << UnrealAngelscriptParser.UserDefinedLiteral) | (1 << UnrealAngelscriptParser.Cast) | (1 << UnrealAngelscriptParser.UClass) | (1 << UnrealAngelscriptParser.UStruct) | (1 << UnrealAngelscriptParser.UProperty) | (1 << UnrealAngelscriptParser.UFunction) | (1 << UnrealAngelscriptParser.Out) | (1 << UnrealAngelscriptParser.Ensure) | (1 << UnrealAngelscriptParser.EnsureAlways) | (1 << UnrealAngelscriptParser.Check) | (1 << UnrealAngelscriptParser.Mixin) | (1 << UnrealAngelscriptParser.Int) | (1 << UnrealAngelscriptParser.Int8) | (1 << UnrealAngelscriptParser.Int16) | (1 << UnrealAngelscriptParser.Int32) | (1 << UnrealAngelscriptParser.Int64) | (1 << UnrealAngelscriptParser.UInt) | (1 << UnrealAngelscriptParser.UInt8) | (1 << UnrealAngelscriptParser.UInt16) | (1 << UnrealAngelscriptParser.UInt32) | (1 << UnrealAngelscriptParser.UInt64) | (1 << UnrealAngelscriptParser.Float) | (1 << UnrealAngelscriptParser.Double) | (1 << UnrealAngelscriptParser.Bool))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (UnrealAngelscriptParser.Auto - 32)) | (1 << (UnrealAngelscriptParser.Class - 32)) | (1 << (UnrealAngelscriptParser.Const - 32)) | (1 << (UnrealAngelscriptParser.Default - 32)) | (1 << (UnrealAngelscriptParser.Enum - 32)) | (1 << (UnrealAngelscriptParser.False_ - 32)) | (1 << (UnrealAngelscriptParser.Nullptr - 32)) | (1 << (UnrealAngelscriptParser.Operator - 32)) | (1 << (UnrealAngelscriptParser.Private - 32)) | (1 << (UnrealAngelscriptParser.Protected - 32)) | (1 << (UnrealAngelscriptParser.Public - 32)) | (1 << (UnrealAngelscriptParser.Struct - 32)) | (1 << (UnrealAngelscriptParser.This - 32)) | (1 << (UnrealAngelscriptParser.True_ - 32)) | (1 << (UnrealAngelscriptParser.Virtual - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (UnrealAngelscriptParser.Void - 64)) | (1 << (UnrealAngelscriptParser.LeftParen - 64)) | (1 << (UnrealAngelscriptParser.LeftBracket - 64)) | (1 << (UnrealAngelscriptParser.Plus - 64)) | (1 << (UnrealAngelscriptParser.Minus - 64)) | (1 << (UnrealAngelscriptParser.Star - 64)) | (1 << (UnrealAngelscriptParser.And - 64)) | (1 << (UnrealAngelscriptParser.Or - 64)) | (1 << (UnrealAngelscriptParser.Tilde - 64)) | (1 << (UnrealAngelscriptParser.Not - 64)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (UnrealAngelscriptParser.PlusPlus - 101)) | (1 << (UnrealAngelscriptParser.MinusMinus - 101)) | (1 << (UnrealAngelscriptParser.Colon - 101)) | (1 << (UnrealAngelscriptParser.Doublecolon - 101)) | (1 << (UnrealAngelscriptParser.Semi - 101)) | (1 << (UnrealAngelscriptParser.Identifier - 101)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memberdeclaration() {
	    let localctx = new MemberdeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, UnrealAngelscriptParser.RULE_memberdeclaration);
	    try {
	        this.state = 1208;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1204;
	            this.propertyDefinition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1205;
	            this.functionDefinition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1206;
	            this.aliasDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1207;
	            this.emptyDeclaration_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyDefinition() {
	    let localctx = new PropertyDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, UnrealAngelscriptParser.RULE_propertyDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1211;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===UnrealAngelscriptParser.UProperty) {
	            this.state = 1210;
	            this.uproperty();
	        }

	        this.state = 1214;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (UnrealAngelscriptParser.Private - 54)) | (1 << (UnrealAngelscriptParser.Protected - 54)) | (1 << (UnrealAngelscriptParser.Public - 54)))) !== 0)) {
	            this.state = 1213;
	            this.accessSpecifier();
	        }

	        this.state = 1217;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===UnrealAngelscriptParser.Default) {
	            this.state = 1216;
	            this.match(UnrealAngelscriptParser.Default);
	        }

	        this.state = 1220;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
	        if(la_===1) {
	            this.state = 1219;
	            this.declSpecifierSeq();

	        }
	        this.state = 1224;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
	        if(la_===1) {
	            this.state = 1222;
	            this.memberDeclaratorList();

	        } else if(la_===2) {
	            this.state = 1223;
	            this.assignmentExpression();

	        }
	        this.state = 1226;
	        this.match(UnrealAngelscriptParser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memberDeclaratorList() {
	    let localctx = new MemberDeclaratorListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, UnrealAngelscriptParser.RULE_memberDeclaratorList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1228;
	        this.memberDeclarator();
	        this.state = 1233;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===UnrealAngelscriptParser.Comma) {
	            this.state = 1229;
	            this.match(UnrealAngelscriptParser.Comma);
	            this.state = 1230;
	            this.memberDeclarator();
	            this.state = 1235;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memberDeclarator() {
	    let localctx = new MemberDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, UnrealAngelscriptParser.RULE_memberDeclarator);
	    var _la = 0; // Token type
	    try {
	        this.state = 1251;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1236;
	            this.declarator();
	            this.state = 1243;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1238;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===UnrealAngelscriptParser.Property || _la===UnrealAngelscriptParser.Final || _la===UnrealAngelscriptParser.Override) {
	                    this.state = 1237;
	                    this.postFuncSpecifierSeq();
	                }

	                break;

	            case 2:
	                this.state = 1241;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (UnrealAngelscriptParser.LeftBracket - 68)) | (1 << (UnrealAngelscriptParser.LeftBrace - 68)) | (1 << (UnrealAngelscriptParser.Assign - 68)))) !== 0)) {
	                    this.state = 1240;
	                    this.braceOrEqualInitializer();
	                }

	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1246;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===UnrealAngelscriptParser.Identifier) {
	                this.state = 1245;
	                this.match(UnrealAngelscriptParser.Identifier);
	            }

	            this.state = 1248;
	            this.match(UnrealAngelscriptParser.Colon);
	            this.state = 1249;
	            this.constantExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1250;
	            this.match(UnrealAngelscriptParser.Identifier);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postFuncSpecifierSeq() {
	    let localctx = new PostFuncSpecifierSeqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, UnrealAngelscriptParser.RULE_postFuncSpecifierSeq);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1254; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1253;
	            this.virtualSpecifier();
	            this.state = 1256; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===UnrealAngelscriptParser.Property || _la===UnrealAngelscriptParser.Final || _la===UnrealAngelscriptParser.Override);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	virtualSpecifier() {
	    let localctx = new VirtualSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, UnrealAngelscriptParser.RULE_virtualSpecifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1258;
	        _la = this._input.LA(1);
	        if(!(_la===UnrealAngelscriptParser.Property || _la===UnrealAngelscriptParser.Final || _la===UnrealAngelscriptParser.Override)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	baseClause() {
	    let localctx = new BaseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, UnrealAngelscriptParser.RULE_baseClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1260;
	        this.match(UnrealAngelscriptParser.Colon);
	        this.state = 1261;
	        this.baseSpecifierList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	baseSpecifierList() {
	    let localctx = new BaseSpecifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, UnrealAngelscriptParser.RULE_baseSpecifierList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1263;
	        this.baseSpecifier();
	        this.state = 1268;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===UnrealAngelscriptParser.Comma) {
	            this.state = 1264;
	            this.match(UnrealAngelscriptParser.Comma);
	            this.state = 1265;
	            this.baseSpecifier();
	            this.state = 1270;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	baseSpecifier() {
	    let localctx = new BaseSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, UnrealAngelscriptParser.RULE_baseSpecifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1283;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case UnrealAngelscriptParser.LeftParen:
	        case UnrealAngelscriptParser.Doublecolon:
	        case UnrealAngelscriptParser.Identifier:
	            this.state = 1271;
	            this.baseTypeSpecifier();
	            break;
	        case UnrealAngelscriptParser.Virtual:
	            this.state = 1272;
	            this.match(UnrealAngelscriptParser.Virtual);
	            this.state = 1274;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (UnrealAngelscriptParser.Private - 54)) | (1 << (UnrealAngelscriptParser.Protected - 54)) | (1 << (UnrealAngelscriptParser.Public - 54)))) !== 0)) {
	                this.state = 1273;
	                this.accessSpecifier();
	            }

	            this.state = 1276;
	            this.baseTypeSpecifier();
	            break;
	        case UnrealAngelscriptParser.Private:
	        case UnrealAngelscriptParser.Protected:
	        case UnrealAngelscriptParser.Public:
	            this.state = 1277;
	            this.accessSpecifier();
	            this.state = 1279;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===UnrealAngelscriptParser.Virtual) {
	                this.state = 1278;
	                this.match(UnrealAngelscriptParser.Virtual);
	            }

	            this.state = 1281;
	            this.baseTypeSpecifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classOrDeclType() {
	    let localctx = new ClassOrDeclTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, UnrealAngelscriptParser.RULE_classOrDeclType);
	    try {
	        this.state = 1290;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1286;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
	            if(la_===1) {
	                this.state = 1285;
	                this.nestedNameSpecifier(0);

	            }
	            this.state = 1288;
	            this.className();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1289;
	            this.decltypeSpecifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	baseTypeSpecifier() {
	    let localctx = new BaseTypeSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, UnrealAngelscriptParser.RULE_baseTypeSpecifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1292;
	        this.classOrDeclType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	accessSpecifier() {
	    let localctx = new AccessSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, UnrealAngelscriptParser.RULE_accessSpecifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1294;
	        _la = this._input.LA(1);
	        if(!(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (UnrealAngelscriptParser.Private - 54)) | (1 << (UnrealAngelscriptParser.Protected - 54)) | (1 << (UnrealAngelscriptParser.Public - 54)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operatorFunctionId() {
	    let localctx = new OperatorFunctionIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, UnrealAngelscriptParser.RULE_operatorFunctionId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1296;
	        this.match(UnrealAngelscriptParser.Operator);
	        this.state = 1297;
	        this.theOperator();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literalOperatorId() {
	    let localctx = new LiteralOperatorIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, UnrealAngelscriptParser.RULE_literalOperatorId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1299;
	        this.match(UnrealAngelscriptParser.Operator);
	        this.state = 1303;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case UnrealAngelscriptParser.StringLiteral:
	            this.state = 1300;
	            this.match(UnrealAngelscriptParser.StringLiteral);
	            this.state = 1301;
	            this.match(UnrealAngelscriptParser.Identifier);
	            break;
	        case UnrealAngelscriptParser.UserDefinedStringLiteral:
	            this.state = 1302;
	            this.match(UnrealAngelscriptParser.UserDefinedStringLiteral);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	theOperator() {
	    let localctx = new TheOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, UnrealAngelscriptParser.RULE_theOperator);
	    try {
	        this.state = 1345;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1306;
	            this.match(UnrealAngelscriptParser.Plus);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1307;
	            this.match(UnrealAngelscriptParser.Minus);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1308;
	            this.match(UnrealAngelscriptParser.Star);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1309;
	            this.match(UnrealAngelscriptParser.Div);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1310;
	            this.match(UnrealAngelscriptParser.Mod);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1311;
	            this.match(UnrealAngelscriptParser.Xor);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1312;
	            this.match(UnrealAngelscriptParser.And);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1313;
	            this.match(UnrealAngelscriptParser.Or);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1314;
	            this.match(UnrealAngelscriptParser.Tilde);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1315;
	            this.match(UnrealAngelscriptParser.Not);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1316;
	            this.match(UnrealAngelscriptParser.Assign);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1317;
	            this.match(UnrealAngelscriptParser.Greater);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1318;
	            this.match(UnrealAngelscriptParser.Less);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1319;
	            this.match(UnrealAngelscriptParser.GreaterEqual);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1320;
	            this.match(UnrealAngelscriptParser.PlusAssign);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1321;
	            this.match(UnrealAngelscriptParser.MinusAssign);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1322;
	            this.match(UnrealAngelscriptParser.StarAssign);
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1323;
	            this.match(UnrealAngelscriptParser.ModAssign);
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1324;
	            this.match(UnrealAngelscriptParser.XorAssign);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1325;
	            this.match(UnrealAngelscriptParser.AndAssign);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1326;
	            this.match(UnrealAngelscriptParser.OrAssign);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 1327;
	            this.match(UnrealAngelscriptParser.Less);
	            this.state = 1328;
	            this.match(UnrealAngelscriptParser.Less);
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 1329;
	            this.match(UnrealAngelscriptParser.Greater);
	            this.state = 1330;
	            this.match(UnrealAngelscriptParser.Greater);
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 1331;
	            this.match(UnrealAngelscriptParser.RightShiftAssign);
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 1332;
	            this.match(UnrealAngelscriptParser.LeftShiftAssign);
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 1333;
	            this.match(UnrealAngelscriptParser.Equal);
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 1334;
	            this.match(UnrealAngelscriptParser.NotEqual);
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 1335;
	            this.match(UnrealAngelscriptParser.LessEqual);
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 1336;
	            this.match(UnrealAngelscriptParser.AndAnd);
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 1337;
	            this.match(UnrealAngelscriptParser.OrOr);
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 1338;
	            this.match(UnrealAngelscriptParser.PlusPlus);
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 1339;
	            this.match(UnrealAngelscriptParser.MinusMinus);
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 1340;
	            this.match(UnrealAngelscriptParser.Comma);
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 1341;
	            this.match(UnrealAngelscriptParser.LeftParen);
	            this.state = 1342;
	            this.match(UnrealAngelscriptParser.RightParen);
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 1343;
	            this.match(UnrealAngelscriptParser.LeftBracket);
	            this.state = 1344;
	            this.match(UnrealAngelscriptParser.RightBracket);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, UnrealAngelscriptParser.RULE_literal);
	    try {
	        this.state = 1354;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case UnrealAngelscriptParser.IntegerLiteral:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1347;
	            this.match(UnrealAngelscriptParser.IntegerLiteral);
	            break;
	        case UnrealAngelscriptParser.CharacterLiteral:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1348;
	            this.match(UnrealAngelscriptParser.CharacterLiteral);
	            break;
	        case UnrealAngelscriptParser.FloatingLiteral:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1349;
	            this.match(UnrealAngelscriptParser.FloatingLiteral);
	            break;
	        case UnrealAngelscriptParser.StringLiteral:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1350;
	            this.match(UnrealAngelscriptParser.StringLiteral);
	            break;
	        case UnrealAngelscriptParser.False_:
	        case UnrealAngelscriptParser.True_:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1351;
	            this.booleanLiteral();
	            break;
	        case UnrealAngelscriptParser.UserDefinedLiteral:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1352;
	            this.match(UnrealAngelscriptParser.UserDefinedLiteral);
	            break;
	        case UnrealAngelscriptParser.Nullptr:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1353;
	            this.match(UnrealAngelscriptParser.Nullptr);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

UnrealAngelscriptParser.EOF = antlr4.Token.EOF;
UnrealAngelscriptParser.IntegerLiteral = 1;
UnrealAngelscriptParser.CharacterLiteral = 2;
UnrealAngelscriptParser.FloatingLiteral = 3;
UnrealAngelscriptParser.StringLiteral = 4;
UnrealAngelscriptParser.UserDefinedLiteral = 5;
UnrealAngelscriptParser.Cast = 6;
UnrealAngelscriptParser.UClass = 7;
UnrealAngelscriptParser.UStruct = 8;
UnrealAngelscriptParser.UProperty = 9;
UnrealAngelscriptParser.UFunction = 10;
UnrealAngelscriptParser.Import = 11;
UnrealAngelscriptParser.From = 12;
UnrealAngelscriptParser.Out = 13;
UnrealAngelscriptParser.Property = 14;
UnrealAngelscriptParser.Ensure = 15;
UnrealAngelscriptParser.EnsureAlways = 16;
UnrealAngelscriptParser.Check = 17;
UnrealAngelscriptParser.Mixin = 18;
UnrealAngelscriptParser.Int = 19;
UnrealAngelscriptParser.Int8 = 20;
UnrealAngelscriptParser.Int16 = 21;
UnrealAngelscriptParser.Int32 = 22;
UnrealAngelscriptParser.Int64 = 23;
UnrealAngelscriptParser.UInt = 24;
UnrealAngelscriptParser.UInt8 = 25;
UnrealAngelscriptParser.UInt16 = 26;
UnrealAngelscriptParser.UInt32 = 27;
UnrealAngelscriptParser.UInt64 = 28;
UnrealAngelscriptParser.Float = 29;
UnrealAngelscriptParser.Double = 30;
UnrealAngelscriptParser.Bool = 31;
UnrealAngelscriptParser.Auto = 32;
UnrealAngelscriptParser.Break = 33;
UnrealAngelscriptParser.Case = 34;
UnrealAngelscriptParser.Catch = 35;
UnrealAngelscriptParser.Char = 36;
UnrealAngelscriptParser.Class = 37;
UnrealAngelscriptParser.Const = 38;
UnrealAngelscriptParser.Continue = 39;
UnrealAngelscriptParser.Default = 40;
UnrealAngelscriptParser.Do = 41;
UnrealAngelscriptParser.Else = 42;
UnrealAngelscriptParser.Enum = 43;
UnrealAngelscriptParser.Export = 44;
UnrealAngelscriptParser.False_ = 45;
UnrealAngelscriptParser.Final = 46;
UnrealAngelscriptParser.For = 47;
UnrealAngelscriptParser.Goto = 48;
UnrealAngelscriptParser.If = 49;
UnrealAngelscriptParser.Namespace = 50;
UnrealAngelscriptParser.Nullptr = 51;
UnrealAngelscriptParser.Operator = 52;
UnrealAngelscriptParser.Override = 53;
UnrealAngelscriptParser.Private = 54;
UnrealAngelscriptParser.Protected = 55;
UnrealAngelscriptParser.Public = 56;
UnrealAngelscriptParser.Return = 57;
UnrealAngelscriptParser.Short = 58;
UnrealAngelscriptParser.Struct = 59;
UnrealAngelscriptParser.Switch = 60;
UnrealAngelscriptParser.This = 61;
UnrealAngelscriptParser.True_ = 62;
UnrealAngelscriptParser.Virtual = 63;
UnrealAngelscriptParser.Void = 64;
UnrealAngelscriptParser.While = 65;
UnrealAngelscriptParser.LeftParen = 66;
UnrealAngelscriptParser.RightParen = 67;
UnrealAngelscriptParser.LeftBracket = 68;
UnrealAngelscriptParser.RightBracket = 69;
UnrealAngelscriptParser.LeftBrace = 70;
UnrealAngelscriptParser.RightBrace = 71;
UnrealAngelscriptParser.Plus = 72;
UnrealAngelscriptParser.Minus = 73;
UnrealAngelscriptParser.Star = 74;
UnrealAngelscriptParser.Div = 75;
UnrealAngelscriptParser.Mod = 76;
UnrealAngelscriptParser.Xor = 77;
UnrealAngelscriptParser.And = 78;
UnrealAngelscriptParser.Or = 79;
UnrealAngelscriptParser.Tilde = 80;
UnrealAngelscriptParser.Not = 81;
UnrealAngelscriptParser.Assign = 82;
UnrealAngelscriptParser.Less = 83;
UnrealAngelscriptParser.Greater = 84;
UnrealAngelscriptParser.PlusAssign = 85;
UnrealAngelscriptParser.MinusAssign = 86;
UnrealAngelscriptParser.StarAssign = 87;
UnrealAngelscriptParser.DivAssign = 88;
UnrealAngelscriptParser.ModAssign = 89;
UnrealAngelscriptParser.XorAssign = 90;
UnrealAngelscriptParser.AndAssign = 91;
UnrealAngelscriptParser.OrAssign = 92;
UnrealAngelscriptParser.LeftShiftAssign = 93;
UnrealAngelscriptParser.RightShiftAssign = 94;
UnrealAngelscriptParser.Equal = 95;
UnrealAngelscriptParser.NotEqual = 96;
UnrealAngelscriptParser.LessEqual = 97;
UnrealAngelscriptParser.GreaterEqual = 98;
UnrealAngelscriptParser.AndAnd = 99;
UnrealAngelscriptParser.OrOr = 100;
UnrealAngelscriptParser.PlusPlus = 101;
UnrealAngelscriptParser.MinusMinus = 102;
UnrealAngelscriptParser.Comma = 103;
UnrealAngelscriptParser.Question = 104;
UnrealAngelscriptParser.Colon = 105;
UnrealAngelscriptParser.Doublecolon = 106;
UnrealAngelscriptParser.Semi = 107;
UnrealAngelscriptParser.Dot = 108;
UnrealAngelscriptParser.Identifier = 109;
UnrealAngelscriptParser.DecimalLiteral = 110;
UnrealAngelscriptParser.OctalLiteral = 111;
UnrealAngelscriptParser.HexadecimalLiteral = 112;
UnrealAngelscriptParser.BinaryLiteral = 113;
UnrealAngelscriptParser.Integersuffix = 114;
UnrealAngelscriptParser.UserDefinedIntegerLiteral = 115;
UnrealAngelscriptParser.UserDefinedFloatingLiteral = 116;
UnrealAngelscriptParser.UserDefinedStringLiteral = 117;
UnrealAngelscriptParser.UserDefinedCharacterLiteral = 118;
UnrealAngelscriptParser.Whitespace = 119;
UnrealAngelscriptParser.Newline = 120;
UnrealAngelscriptParser.BlockComment = 121;
UnrealAngelscriptParser.LineComment = 122;
UnrealAngelscriptParser.PreprocessorBranchRemoval = 123;
UnrealAngelscriptParser.Preprocessor = 124;

UnrealAngelscriptParser.RULE_script = 0;
UnrealAngelscriptParser.RULE_annotationList = 1;
UnrealAngelscriptParser.RULE_annotation = 2;
UnrealAngelscriptParser.RULE_utype = 3;
UnrealAngelscriptParser.RULE_uproperty = 4;
UnrealAngelscriptParser.RULE_ufunction = 5;
UnrealAngelscriptParser.RULE_moduleImport = 6;
UnrealAngelscriptParser.RULE_asGeneric = 7;
UnrealAngelscriptParser.RULE_simpleTypeSpecifierList = 8;
UnrealAngelscriptParser.RULE_booleanLiteral = 9;
UnrealAngelscriptParser.RULE_primaryExpression = 10;
UnrealAngelscriptParser.RULE_idExpression = 11;
UnrealAngelscriptParser.RULE_unqualifiedId = 12;
UnrealAngelscriptParser.RULE_qualifiedId = 13;
UnrealAngelscriptParser.RULE_nestedNameSpecifier = 14;
UnrealAngelscriptParser.RULE_lambdaExpression = 15;
UnrealAngelscriptParser.RULE_lambdaIntroducer = 16;
UnrealAngelscriptParser.RULE_lambdaCapture = 17;
UnrealAngelscriptParser.RULE_captureDefault = 18;
UnrealAngelscriptParser.RULE_captureList = 19;
UnrealAngelscriptParser.RULE_capture = 20;
UnrealAngelscriptParser.RULE_simpleCapture = 21;
UnrealAngelscriptParser.RULE_initcapture = 22;
UnrealAngelscriptParser.RULE_lambdaDeclarator = 23;
UnrealAngelscriptParser.RULE_postfixExpression = 24;
UnrealAngelscriptParser.RULE_expressionList = 25;
UnrealAngelscriptParser.RULE_pseudoDestructorName = 26;
UnrealAngelscriptParser.RULE_unaryExpression = 27;
UnrealAngelscriptParser.RULE_unaryOperator = 28;
UnrealAngelscriptParser.RULE_newPlacement = 29;
UnrealAngelscriptParser.RULE_newInitializer_ = 30;
UnrealAngelscriptParser.RULE_castExpression = 31;
UnrealAngelscriptParser.RULE_multiplicativeExpression = 32;
UnrealAngelscriptParser.RULE_additiveExpression = 33;
UnrealAngelscriptParser.RULE_shiftExpression = 34;
UnrealAngelscriptParser.RULE_shiftOperator = 35;
UnrealAngelscriptParser.RULE_relationalExpression = 36;
UnrealAngelscriptParser.RULE_equalityExpression = 37;
UnrealAngelscriptParser.RULE_andExpression = 38;
UnrealAngelscriptParser.RULE_exclusiveOrExpression = 39;
UnrealAngelscriptParser.RULE_inclusiveOrExpression = 40;
UnrealAngelscriptParser.RULE_logicalAndExpression = 41;
UnrealAngelscriptParser.RULE_logicalOrExpression = 42;
UnrealAngelscriptParser.RULE_conditionalExpression = 43;
UnrealAngelscriptParser.RULE_assignmentExpression = 44;
UnrealAngelscriptParser.RULE_assignmentOperator = 45;
UnrealAngelscriptParser.RULE_expression = 46;
UnrealAngelscriptParser.RULE_constantExpression = 47;
UnrealAngelscriptParser.RULE_statement = 48;
UnrealAngelscriptParser.RULE_labeledStatement = 49;
UnrealAngelscriptParser.RULE_expressionStatement = 50;
UnrealAngelscriptParser.RULE_compoundStatement = 51;
UnrealAngelscriptParser.RULE_statementSeq = 52;
UnrealAngelscriptParser.RULE_selectionStatement = 53;
UnrealAngelscriptParser.RULE_condition = 54;
UnrealAngelscriptParser.RULE_iterationStatement = 55;
UnrealAngelscriptParser.RULE_forInitStatement = 56;
UnrealAngelscriptParser.RULE_forRangeDeclaration = 57;
UnrealAngelscriptParser.RULE_forRangeInitializer = 58;
UnrealAngelscriptParser.RULE_jumpStatement = 59;
UnrealAngelscriptParser.RULE_declarationStatement = 60;
UnrealAngelscriptParser.RULE_declarationseq = 61;
UnrealAngelscriptParser.RULE_declaration = 62;
UnrealAngelscriptParser.RULE_blockDeclaration = 63;
UnrealAngelscriptParser.RULE_aliasDeclaration = 64;
UnrealAngelscriptParser.RULE_simpleDeclaration = 65;
UnrealAngelscriptParser.RULE_emptyDeclaration_ = 66;
UnrealAngelscriptParser.RULE_declSpecifier = 67;
UnrealAngelscriptParser.RULE_declSpecifierSeq = 68;
UnrealAngelscriptParser.RULE_functionSpecifier = 69;
UnrealAngelscriptParser.RULE_typedefName = 70;
UnrealAngelscriptParser.RULE_typeSpecifier = 71;
UnrealAngelscriptParser.RULE_trailingTypeSpecifier = 72;
UnrealAngelscriptParser.RULE_typeSpecifierSeq = 73;
UnrealAngelscriptParser.RULE_trailingTypeSpecifierSeq = 74;
UnrealAngelscriptParser.RULE_simpleTypeSpecifier = 75;
UnrealAngelscriptParser.RULE_assertSpecifier = 76;
UnrealAngelscriptParser.RULE_theTypeName = 77;
UnrealAngelscriptParser.RULE_decltypeSpecifier = 78;
UnrealAngelscriptParser.RULE_elaboratedTypeSpecifier = 79;
UnrealAngelscriptParser.RULE_enumName = 80;
UnrealAngelscriptParser.RULE_enumSpecifier = 81;
UnrealAngelscriptParser.RULE_enumHead = 82;
UnrealAngelscriptParser.RULE_opaqueEnumDeclaration = 83;
UnrealAngelscriptParser.RULE_enumkey = 84;
UnrealAngelscriptParser.RULE_enumbase = 85;
UnrealAngelscriptParser.RULE_enumeratorList = 86;
UnrealAngelscriptParser.RULE_enumeratorDefinition = 87;
UnrealAngelscriptParser.RULE_enumerator = 88;
UnrealAngelscriptParser.RULE_namespaceName = 89;
UnrealAngelscriptParser.RULE_originalNamespaceName = 90;
UnrealAngelscriptParser.RULE_namespaceDefinition = 91;
UnrealAngelscriptParser.RULE_namespaceAlias = 92;
UnrealAngelscriptParser.RULE_namespaceAliasDefinition = 93;
UnrealAngelscriptParser.RULE_qualifiednamespacespecifier = 94;
UnrealAngelscriptParser.RULE_balancedTokenSeq = 95;
UnrealAngelscriptParser.RULE_balancedtoken = 96;
UnrealAngelscriptParser.RULE_initDeclaratorList = 97;
UnrealAngelscriptParser.RULE_initDeclarator = 98;
UnrealAngelscriptParser.RULE_declarator = 99;
UnrealAngelscriptParser.RULE_declaratorDef = 100;
UnrealAngelscriptParser.RULE_parametersAndQualifiers = 101;
UnrealAngelscriptParser.RULE_refqualifier = 102;
UnrealAngelscriptParser.RULE_declaratorid = 103;
UnrealAngelscriptParser.RULE_theTypeId = 104;
UnrealAngelscriptParser.RULE_parameterDeclarationClause = 105;
UnrealAngelscriptParser.RULE_parameterDeclarationList = 106;
UnrealAngelscriptParser.RULE_parameterDeclaration = 107;
UnrealAngelscriptParser.RULE_functionDefinition = 108;
UnrealAngelscriptParser.RULE_functionBody = 109;
UnrealAngelscriptParser.RULE_initializer = 110;
UnrealAngelscriptParser.RULE_braceOrEqualInitializer = 111;
UnrealAngelscriptParser.RULE_initializerClause = 112;
UnrealAngelscriptParser.RULE_initializerList = 113;
UnrealAngelscriptParser.RULE_bracedInitList = 114;
UnrealAngelscriptParser.RULE_className = 115;
UnrealAngelscriptParser.RULE_classSpecifier = 116;
UnrealAngelscriptParser.RULE_classHead = 117;
UnrealAngelscriptParser.RULE_classHeadName = 118;
UnrealAngelscriptParser.RULE_classVirtSpecifier = 119;
UnrealAngelscriptParser.RULE_classKey = 120;
UnrealAngelscriptParser.RULE_memberSpecification = 121;
UnrealAngelscriptParser.RULE_memberdeclaration = 122;
UnrealAngelscriptParser.RULE_propertyDefinition = 123;
UnrealAngelscriptParser.RULE_memberDeclaratorList = 124;
UnrealAngelscriptParser.RULE_memberDeclarator = 125;
UnrealAngelscriptParser.RULE_postFuncSpecifierSeq = 126;
UnrealAngelscriptParser.RULE_virtualSpecifier = 127;
UnrealAngelscriptParser.RULE_baseClause = 128;
UnrealAngelscriptParser.RULE_baseSpecifierList = 129;
UnrealAngelscriptParser.RULE_baseSpecifier = 130;
UnrealAngelscriptParser.RULE_classOrDeclType = 131;
UnrealAngelscriptParser.RULE_baseTypeSpecifier = 132;
UnrealAngelscriptParser.RULE_accessSpecifier = 133;
UnrealAngelscriptParser.RULE_operatorFunctionId = 134;
UnrealAngelscriptParser.RULE_literalOperatorId = 135;
UnrealAngelscriptParser.RULE_theOperator = 136;
UnrealAngelscriptParser.RULE_literal = 137;

class ScriptContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_script;
    }

	EOF() {
	    return this.getToken(UnrealAngelscriptParser.EOF, 0);
	};

	declarationseq() {
	    return this.getTypedRuleContext(DeclarationseqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterScript(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitScript(this);
		}
	}


}



class AnnotationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_annotationList;
    }

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Comma);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterAnnotationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitAnnotationList(this);
		}
	}


}



class AnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_annotation;
    }

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	Assign() {
	    return this.getToken(UnrealAngelscriptParser.Assign, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitAnnotation(this);
		}
	}


}



class UtypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_utype;
    }

	LeftParen() {
	    return this.getToken(UnrealAngelscriptParser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(UnrealAngelscriptParser.RightParen, 0);
	};

	UClass() {
	    return this.getToken(UnrealAngelscriptParser.UClass, 0);
	};

	UStruct() {
	    return this.getToken(UnrealAngelscriptParser.UStruct, 0);
	};

	annotationList() {
	    return this.getTypedRuleContext(AnnotationListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterUtype(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitUtype(this);
		}
	}


}



class UpropertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_uproperty;
    }

	UProperty() {
	    return this.getToken(UnrealAngelscriptParser.UProperty, 0);
	};

	LeftParen() {
	    return this.getToken(UnrealAngelscriptParser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(UnrealAngelscriptParser.RightParen, 0);
	};

	annotationList() {
	    return this.getTypedRuleContext(AnnotationListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterUproperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitUproperty(this);
		}
	}


}



class UfunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_ufunction;
    }

	UFunction() {
	    return this.getToken(UnrealAngelscriptParser.UFunction, 0);
	};

	LeftParen() {
	    return this.getToken(UnrealAngelscriptParser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(UnrealAngelscriptParser.RightParen, 0);
	};

	annotationList() {
	    return this.getTypedRuleContext(AnnotationListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterUfunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitUfunction(this);
		}
	}


}



class ModuleImportContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_moduleImport;
    }

	Import() {
	    return this.getToken(UnrealAngelscriptParser.Import, 0);
	};

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Identifier);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Identifier, i);
	    }
	};


	Semi() {
	    return this.getToken(UnrealAngelscriptParser.Semi, 0);
	};

	Dot = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Dot);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Dot, i);
	    }
	};


	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	From() {
	    return this.getToken(UnrealAngelscriptParser.From, 0);
	};

	StringLiteral() {
	    return this.getToken(UnrealAngelscriptParser.StringLiteral, 0);
	};

	declSpecifierSeq() {
	    return this.getTypedRuleContext(DeclSpecifierSeqContext,0);
	};

	postFuncSpecifierSeq() {
	    return this.getTypedRuleContext(PostFuncSpecifierSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterModuleImport(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitModuleImport(this);
		}
	}


}



class AsGenericContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_asGeneric;
    }

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	Less() {
	    return this.getToken(UnrealAngelscriptParser.Less, 0);
	};

	simpleTypeSpecifierList() {
	    return this.getTypedRuleContext(SimpleTypeSpecifierListContext,0);
	};

	Greater() {
	    return this.getToken(UnrealAngelscriptParser.Greater, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterAsGeneric(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitAsGeneric(this);
		}
	}


}



class SimpleTypeSpecifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_simpleTypeSpecifierList;
    }

	declSpecifierSeq = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclSpecifierSeqContext);
	    } else {
	        return this.getTypedRuleContext(DeclSpecifierSeqContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Comma);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterSimpleTypeSpecifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitSimpleTypeSpecifierList(this);
		}
	}


}



class BooleanLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_booleanLiteral;
    }

	False_() {
	    return this.getToken(UnrealAngelscriptParser.False_, 0);
	};

	True_() {
	    return this.getToken(UnrealAngelscriptParser.True_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitBooleanLiteral(this);
		}
	}


}



class PrimaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_primaryExpression;
    }

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	This() {
	    return this.getToken(UnrealAngelscriptParser.This, 0);
	};

	LeftParen() {
	    return this.getToken(UnrealAngelscriptParser.LeftParen, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RightParen() {
	    return this.getToken(UnrealAngelscriptParser.RightParen, 0);
	};

	idExpression() {
	    return this.getTypedRuleContext(IdExpressionContext,0);
	};

	lambdaExpression() {
	    return this.getTypedRuleContext(LambdaExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterPrimaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitPrimaryExpression(this);
		}
	}


}



class IdExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_idExpression;
    }

	unqualifiedId() {
	    return this.getTypedRuleContext(UnqualifiedIdContext,0);
	};

	qualifiedId() {
	    return this.getTypedRuleContext(QualifiedIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterIdExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitIdExpression(this);
		}
	}


}



class UnqualifiedIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_unqualifiedId;
    }

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	operatorFunctionId() {
	    return this.getTypedRuleContext(OperatorFunctionIdContext,0);
	};

	literalOperatorId() {
	    return this.getTypedRuleContext(LiteralOperatorIdContext,0);
	};

	Tilde() {
	    return this.getToken(UnrealAngelscriptParser.Tilde, 0);
	};

	className() {
	    return this.getTypedRuleContext(ClassNameContext,0);
	};

	decltypeSpecifier() {
	    return this.getTypedRuleContext(DecltypeSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterUnqualifiedId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitUnqualifiedId(this);
		}
	}


}



class QualifiedIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_qualifiedId;
    }

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	unqualifiedId() {
	    return this.getTypedRuleContext(UnqualifiedIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterQualifiedId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitQualifiedId(this);
		}
	}


}



class NestedNameSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_nestedNameSpecifier;
    }

	Doublecolon() {
	    return this.getToken(UnrealAngelscriptParser.Doublecolon, 0);
	};

	theTypeName() {
	    return this.getTypedRuleContext(TheTypeNameContext,0);
	};

	namespaceName() {
	    return this.getTypedRuleContext(NamespaceNameContext,0);
	};

	decltypeSpecifier() {
	    return this.getTypedRuleContext(DecltypeSpecifierContext,0);
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterNestedNameSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitNestedNameSpecifier(this);
		}
	}


}



class LambdaExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_lambdaExpression;
    }

	lambdaIntroducer() {
	    return this.getTypedRuleContext(LambdaIntroducerContext,0);
	};

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	lambdaDeclarator() {
	    return this.getTypedRuleContext(LambdaDeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterLambdaExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitLambdaExpression(this);
		}
	}


}



class LambdaIntroducerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_lambdaIntroducer;
    }

	LeftBracket() {
	    return this.getToken(UnrealAngelscriptParser.LeftBracket, 0);
	};

	RightBracket() {
	    return this.getToken(UnrealAngelscriptParser.RightBracket, 0);
	};

	lambdaCapture() {
	    return this.getTypedRuleContext(LambdaCaptureContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterLambdaIntroducer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitLambdaIntroducer(this);
		}
	}


}



class LambdaCaptureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_lambdaCapture;
    }

	captureList() {
	    return this.getTypedRuleContext(CaptureListContext,0);
	};

	captureDefault() {
	    return this.getTypedRuleContext(CaptureDefaultContext,0);
	};

	Comma() {
	    return this.getToken(UnrealAngelscriptParser.Comma, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterLambdaCapture(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitLambdaCapture(this);
		}
	}


}



class CaptureDefaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_captureDefault;
    }

	And() {
	    return this.getToken(UnrealAngelscriptParser.And, 0);
	};

	Assign() {
	    return this.getToken(UnrealAngelscriptParser.Assign, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterCaptureDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitCaptureDefault(this);
		}
	}


}



class CaptureListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_captureList;
    }

	capture = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaptureContext);
	    } else {
	        return this.getTypedRuleContext(CaptureContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Comma);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterCaptureList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitCaptureList(this);
		}
	}


}



class CaptureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_capture;
    }

	simpleCapture() {
	    return this.getTypedRuleContext(SimpleCaptureContext,0);
	};

	initcapture() {
	    return this.getTypedRuleContext(InitcaptureContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterCapture(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitCapture(this);
		}
	}


}



class SimpleCaptureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_simpleCapture;
    }

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	And() {
	    return this.getToken(UnrealAngelscriptParser.And, 0);
	};

	This() {
	    return this.getToken(UnrealAngelscriptParser.This, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterSimpleCapture(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitSimpleCapture(this);
		}
	}


}



class InitcaptureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_initcapture;
    }

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	initializer() {
	    return this.getTypedRuleContext(InitializerContext,0);
	};

	And() {
	    return this.getToken(UnrealAngelscriptParser.And, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterInitcapture(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitInitcapture(this);
		}
	}


}



class LambdaDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_lambdaDeclarator;
    }

	LeftParen() {
	    return this.getToken(UnrealAngelscriptParser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(UnrealAngelscriptParser.RightParen, 0);
	};

	parameterDeclarationClause() {
	    return this.getTypedRuleContext(ParameterDeclarationClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterLambdaDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitLambdaDeclarator(this);
		}
	}


}



class PostfixExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_postfixExpression;
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	assertSpecifier() {
	    return this.getTypedRuleContext(AssertSpecifierContext,0);
	};

	LeftParen() {
	    return this.getToken(UnrealAngelscriptParser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(UnrealAngelscriptParser.RightParen, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	simpleTypeSpecifier() {
	    return this.getTypedRuleContext(SimpleTypeSpecifierContext,0);
	};

	bracedInitList() {
	    return this.getTypedRuleContext(BracedInitListContext,0);
	};

	Cast() {
	    return this.getToken(UnrealAngelscriptParser.Cast, 0);
	};

	Less() {
	    return this.getToken(UnrealAngelscriptParser.Less, 0);
	};

	theTypeId() {
	    return this.getTypedRuleContext(TheTypeIdContext,0);
	};

	Greater() {
	    return this.getToken(UnrealAngelscriptParser.Greater, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	postfixExpression() {
	    return this.getTypedRuleContext(PostfixExpressionContext,0);
	};

	LeftBracket() {
	    return this.getToken(UnrealAngelscriptParser.LeftBracket, 0);
	};

	RightBracket() {
	    return this.getToken(UnrealAngelscriptParser.RightBracket, 0);
	};

	Dot() {
	    return this.getToken(UnrealAngelscriptParser.Dot, 0);
	};

	idExpression() {
	    return this.getTypedRuleContext(IdExpressionContext,0);
	};

	pseudoDestructorName() {
	    return this.getTypedRuleContext(PseudoDestructorNameContext,0);
	};

	PlusPlus() {
	    return this.getToken(UnrealAngelscriptParser.PlusPlus, 0);
	};

	MinusMinus() {
	    return this.getToken(UnrealAngelscriptParser.MinusMinus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterPostfixExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitPostfixExpression(this);
		}
	}


}



class ExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_expressionList;
    }

	initializerList() {
	    return this.getTypedRuleContext(InitializerListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitExpressionList(this);
		}
	}


}



class PseudoDestructorNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_pseudoDestructorName;
    }

	Tilde() {
	    return this.getToken(UnrealAngelscriptParser.Tilde, 0);
	};

	theTypeName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TheTypeNameContext);
	    } else {
	        return this.getTypedRuleContext(TheTypeNameContext,i);
	    }
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	Doublecolon() {
	    return this.getToken(UnrealAngelscriptParser.Doublecolon, 0);
	};

	decltypeSpecifier() {
	    return this.getTypedRuleContext(DecltypeSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterPseudoDestructorName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitPseudoDestructorName(this);
		}
	}


}



class UnaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_unaryExpression;
    }

	postfixExpression() {
	    return this.getTypedRuleContext(PostfixExpressionContext,0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	PlusPlus() {
	    return this.getToken(UnrealAngelscriptParser.PlusPlus, 0);
	};

	MinusMinus() {
	    return this.getToken(UnrealAngelscriptParser.MinusMinus, 0);
	};

	unaryOperator() {
	    return this.getTypedRuleContext(UnaryOperatorContext,0);
	};

	LeftParen() {
	    return this.getToken(UnrealAngelscriptParser.LeftParen, 0);
	};

	theTypeId() {
	    return this.getTypedRuleContext(TheTypeIdContext,0);
	};

	RightParen() {
	    return this.getToken(UnrealAngelscriptParser.RightParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterUnaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitUnaryExpression(this);
		}
	}


}



class UnaryOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_unaryOperator;
    }

	Or() {
	    return this.getToken(UnrealAngelscriptParser.Or, 0);
	};

	Star() {
	    return this.getToken(UnrealAngelscriptParser.Star, 0);
	};

	And() {
	    return this.getToken(UnrealAngelscriptParser.And, 0);
	};

	Plus() {
	    return this.getToken(UnrealAngelscriptParser.Plus, 0);
	};

	Tilde() {
	    return this.getToken(UnrealAngelscriptParser.Tilde, 0);
	};

	Minus() {
	    return this.getToken(UnrealAngelscriptParser.Minus, 0);
	};

	Not() {
	    return this.getToken(UnrealAngelscriptParser.Not, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterUnaryOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitUnaryOperator(this);
		}
	}


}



class NewPlacementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_newPlacement;
    }

	LeftParen() {
	    return this.getToken(UnrealAngelscriptParser.LeftParen, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	RightParen() {
	    return this.getToken(UnrealAngelscriptParser.RightParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterNewPlacement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitNewPlacement(this);
		}
	}


}



class NewInitializer_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_newInitializer_;
    }

	LeftParen() {
	    return this.getToken(UnrealAngelscriptParser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(UnrealAngelscriptParser.RightParen, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	bracedInitList() {
	    return this.getTypedRuleContext(BracedInitListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterNewInitializer_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitNewInitializer_(this);
		}
	}


}



class CastExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_castExpression;
    }

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	Cast() {
	    return this.getToken(UnrealAngelscriptParser.Cast, 0);
	};

	Less() {
	    return this.getToken(UnrealAngelscriptParser.Less, 0);
	};

	theTypeId() {
	    return this.getTypedRuleContext(TheTypeIdContext,0);
	};

	Greater() {
	    return this.getToken(UnrealAngelscriptParser.Greater, 0);
	};

	LeftParen() {
	    return this.getToken(UnrealAngelscriptParser.LeftParen, 0);
	};

	castExpression() {
	    return this.getTypedRuleContext(CastExpressionContext,0);
	};

	RightParen() {
	    return this.getToken(UnrealAngelscriptParser.RightParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterCastExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitCastExpression(this);
		}
	}


}



class MultiplicativeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_multiplicativeExpression;
    }

	castExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CastExpressionContext);
	    } else {
	        return this.getTypedRuleContext(CastExpressionContext,i);
	    }
	};

	Star = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Star);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Star, i);
	    }
	};


	Div = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Div);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Div, i);
	    }
	};


	Mod = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Mod);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Mod, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitMultiplicativeExpression(this);
		}
	}


}



class AdditiveExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_additiveExpression;
    }

	multiplicativeExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplicativeExpressionContext);
	    } else {
	        return this.getTypedRuleContext(MultiplicativeExpressionContext,i);
	    }
	};

	Plus = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Plus);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Plus, i);
	    }
	};


	Minus = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Minus);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Minus, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitAdditiveExpression(this);
		}
	}


}



class ShiftExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_shiftExpression;
    }

	additiveExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditiveExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AdditiveExpressionContext,i);
	    }
	};

	shiftOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ShiftOperatorContext);
	    } else {
	        return this.getTypedRuleContext(ShiftOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterShiftExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitShiftExpression(this);
		}
	}


}



class ShiftOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_shiftOperator;
    }

	Greater = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Greater);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Greater, i);
	    }
	};


	Less = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Less);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Less, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterShiftOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitShiftOperator(this);
		}
	}


}



class RelationalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_relationalExpression;
    }

	shiftExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ShiftExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ShiftExpressionContext,i);
	    }
	};

	Less = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Less);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Less, i);
	    }
	};


	Greater = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Greater);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Greater, i);
	    }
	};


	LessEqual = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.LessEqual);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.LessEqual, i);
	    }
	};


	GreaterEqual = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.GreaterEqual);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.GreaterEqual, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitRelationalExpression(this);
		}
	}


}



class EqualityExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_equalityExpression;
    }

	relationalExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationalExpressionContext);
	    } else {
	        return this.getTypedRuleContext(RelationalExpressionContext,i);
	    }
	};

	Equal = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Equal);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Equal, i);
	    }
	};


	NotEqual = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.NotEqual);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.NotEqual, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterEqualityExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitEqualityExpression(this);
		}
	}


}



class AndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_andExpression;
    }

	equalityExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EqualityExpressionContext);
	    } else {
	        return this.getTypedRuleContext(EqualityExpressionContext,i);
	    }
	};

	And = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.And);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.And, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitAndExpression(this);
		}
	}


}



class ExclusiveOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_exclusiveOrExpression;
    }

	andExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AndExpressionContext,i);
	    }
	};

	Xor = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Xor);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Xor, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterExclusiveOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitExclusiveOrExpression(this);
		}
	}


}



class InclusiveOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_inclusiveOrExpression;
    }

	exclusiveOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExclusiveOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExclusiveOrExpressionContext,i);
	    }
	};

	Or = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Or);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Or, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterInclusiveOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitInclusiveOrExpression(this);
		}
	}


}



class LogicalAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_logicalAndExpression;
    }

	inclusiveOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InclusiveOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(InclusiveOrExpressionContext,i);
	    }
	};

	AndAnd = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.AndAnd);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.AndAnd, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterLogicalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitLogicalAndExpression(this);
		}
	}


}



class LogicalOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_logicalOrExpression;
    }

	logicalAndExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogicalAndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(LogicalAndExpressionContext,i);
	    }
	};

	OrOr = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.OrOr);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.OrOr, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterLogicalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitLogicalOrExpression(this);
		}
	}


}



class ConditionalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_conditionalExpression;
    }

	logicalOrExpression() {
	    return this.getTypedRuleContext(LogicalOrExpressionContext,0);
	};

	Question() {
	    return this.getToken(UnrealAngelscriptParser.Question, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	Colon() {
	    return this.getToken(UnrealAngelscriptParser.Colon, 0);
	};

	assignmentExpression() {
	    return this.getTypedRuleContext(AssignmentExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterConditionalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitConditionalExpression(this);
		}
	}


}



class AssignmentExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_assignmentExpression;
    }

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	logicalOrExpression() {
	    return this.getTypedRuleContext(LogicalOrExpressionContext,0);
	};

	assignmentOperator() {
	    return this.getTypedRuleContext(AssignmentOperatorContext,0);
	};

	initializerClause() {
	    return this.getTypedRuleContext(InitializerClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterAssignmentExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitAssignmentExpression(this);
		}
	}


}



class AssignmentOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_assignmentOperator;
    }

	Assign() {
	    return this.getToken(UnrealAngelscriptParser.Assign, 0);
	};

	StarAssign() {
	    return this.getToken(UnrealAngelscriptParser.StarAssign, 0);
	};

	DivAssign() {
	    return this.getToken(UnrealAngelscriptParser.DivAssign, 0);
	};

	ModAssign() {
	    return this.getToken(UnrealAngelscriptParser.ModAssign, 0);
	};

	PlusAssign() {
	    return this.getToken(UnrealAngelscriptParser.PlusAssign, 0);
	};

	MinusAssign() {
	    return this.getToken(UnrealAngelscriptParser.MinusAssign, 0);
	};

	RightShiftAssign() {
	    return this.getToken(UnrealAngelscriptParser.RightShiftAssign, 0);
	};

	LeftShiftAssign() {
	    return this.getToken(UnrealAngelscriptParser.LeftShiftAssign, 0);
	};

	AndAssign() {
	    return this.getToken(UnrealAngelscriptParser.AndAssign, 0);
	};

	XorAssign() {
	    return this.getToken(UnrealAngelscriptParser.XorAssign, 0);
	};

	OrAssign() {
	    return this.getToken(UnrealAngelscriptParser.OrAssign, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterAssignmentOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitAssignmentOperator(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_expression;
    }

	assignmentExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentExpressionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Comma);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitExpression(this);
		}
	}


}



class ConstantExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_constantExpression;
    }

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterConstantExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitConstantExpression(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_statement;
    }

	labeledStatement() {
	    return this.getTypedRuleContext(LabeledStatementContext,0);
	};

	declarationStatement() {
	    return this.getTypedRuleContext(DeclarationStatementContext,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	selectionStatement() {
	    return this.getTypedRuleContext(SelectionStatementContext,0);
	};

	iterationStatement() {
	    return this.getTypedRuleContext(IterationStatementContext,0);
	};

	jumpStatement() {
	    return this.getTypedRuleContext(JumpStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitStatement(this);
		}
	}


}



class LabeledStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_labeledStatement;
    }

	Colon() {
	    return this.getToken(UnrealAngelscriptParser.Colon, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	Case() {
	    return this.getToken(UnrealAngelscriptParser.Case, 0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	Default() {
	    return this.getToken(UnrealAngelscriptParser.Default, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterLabeledStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitLabeledStatement(this);
		}
	}


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_expressionStatement;
    }

	Semi() {
	    return this.getToken(UnrealAngelscriptParser.Semi, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterExpressionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitExpressionStatement(this);
		}
	}


}



class CompoundStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_compoundStatement;
    }

	LeftBrace() {
	    return this.getToken(UnrealAngelscriptParser.LeftBrace, 0);
	};

	RightBrace() {
	    return this.getToken(UnrealAngelscriptParser.RightBrace, 0);
	};

	statementSeq() {
	    return this.getTypedRuleContext(StatementSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterCompoundStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitCompoundStatement(this);
		}
	}


}



class StatementSeqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_statementSeq;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterStatementSeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitStatementSeq(this);
		}
	}


}



class SelectionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_selectionStatement;
    }

	If() {
	    return this.getToken(UnrealAngelscriptParser.If, 0);
	};

	LeftParen() {
	    return this.getToken(UnrealAngelscriptParser.LeftParen, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	RightParen() {
	    return this.getToken(UnrealAngelscriptParser.RightParen, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	Else() {
	    return this.getToken(UnrealAngelscriptParser.Else, 0);
	};

	Switch() {
	    return this.getToken(UnrealAngelscriptParser.Switch, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterSelectionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitSelectionStatement(this);
		}
	}


}



class ConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_condition;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	declSpecifierSeq() {
	    return this.getTypedRuleContext(DeclSpecifierSeqContext,0);
	};

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	Assign() {
	    return this.getToken(UnrealAngelscriptParser.Assign, 0);
	};

	initializerClause() {
	    return this.getTypedRuleContext(InitializerClauseContext,0);
	};

	bracedInitList() {
	    return this.getTypedRuleContext(BracedInitListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitCondition(this);
		}
	}


}



class IterationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_iterationStatement;
    }

	While() {
	    return this.getToken(UnrealAngelscriptParser.While, 0);
	};

	LeftParen() {
	    return this.getToken(UnrealAngelscriptParser.LeftParen, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	RightParen() {
	    return this.getToken(UnrealAngelscriptParser.RightParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	Do() {
	    return this.getToken(UnrealAngelscriptParser.Do, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	Semi() {
	    return this.getToken(UnrealAngelscriptParser.Semi, 0);
	};

	For() {
	    return this.getToken(UnrealAngelscriptParser.For, 0);
	};

	forInitStatement() {
	    return this.getTypedRuleContext(ForInitStatementContext,0);
	};

	forRangeDeclaration() {
	    return this.getTypedRuleContext(ForRangeDeclarationContext,0);
	};

	Colon() {
	    return this.getToken(UnrealAngelscriptParser.Colon, 0);
	};

	forRangeInitializer() {
	    return this.getTypedRuleContext(ForRangeInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterIterationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitIterationStatement(this);
		}
	}


}



class ForInitStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_forInitStatement;
    }

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	simpleDeclaration() {
	    return this.getTypedRuleContext(SimpleDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterForInitStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitForInitStatement(this);
		}
	}


}



class ForRangeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_forRangeDeclaration;
    }

	declSpecifierSeq() {
	    return this.getTypedRuleContext(DeclSpecifierSeqContext,0);
	};

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterForRangeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitForRangeDeclaration(this);
		}
	}


}



class ForRangeInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_forRangeInitializer;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	bracedInitList() {
	    return this.getTypedRuleContext(BracedInitListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterForRangeInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitForRangeInitializer(this);
		}
	}


}



class JumpStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_jumpStatement;
    }

	Semi() {
	    return this.getToken(UnrealAngelscriptParser.Semi, 0);
	};

	Break() {
	    return this.getToken(UnrealAngelscriptParser.Break, 0);
	};

	Continue() {
	    return this.getToken(UnrealAngelscriptParser.Continue, 0);
	};

	Return() {
	    return this.getToken(UnrealAngelscriptParser.Return, 0);
	};

	Goto() {
	    return this.getToken(UnrealAngelscriptParser.Goto, 0);
	};

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	bracedInitList() {
	    return this.getTypedRuleContext(BracedInitListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterJumpStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitJumpStatement(this);
		}
	}


}



class DeclarationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_declarationStatement;
    }

	blockDeclaration() {
	    return this.getTypedRuleContext(BlockDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterDeclarationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitDeclarationStatement(this);
		}
	}


}



class DeclarationseqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_declarationseq;
    }

	declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclarationContext);
	    } else {
	        return this.getTypedRuleContext(DeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterDeclarationseq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitDeclarationseq(this);
		}
	}


}



class DeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_declaration;
    }

	moduleImport() {
	    return this.getTypedRuleContext(ModuleImportContext,0);
	};

	blockDeclaration() {
	    return this.getTypedRuleContext(BlockDeclarationContext,0);
	};

	functionDefinition() {
	    return this.getTypedRuleContext(FunctionDefinitionContext,0);
	};

	namespaceDefinition() {
	    return this.getTypedRuleContext(NamespaceDefinitionContext,0);
	};

	emptyDeclaration_() {
	    return this.getTypedRuleContext(EmptyDeclaration_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitDeclaration(this);
		}
	}


}



class BlockDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_blockDeclaration;
    }

	simpleDeclaration() {
	    return this.getTypedRuleContext(SimpleDeclarationContext,0);
	};

	namespaceAliasDefinition() {
	    return this.getTypedRuleContext(NamespaceAliasDefinitionContext,0);
	};

	aliasDeclaration() {
	    return this.getTypedRuleContext(AliasDeclarationContext,0);
	};

	opaqueEnumDeclaration() {
	    return this.getTypedRuleContext(OpaqueEnumDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterBlockDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitBlockDeclaration(this);
		}
	}


}



class AliasDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_aliasDeclaration;
    }

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	Assign() {
	    return this.getToken(UnrealAngelscriptParser.Assign, 0);
	};

	theTypeId() {
	    return this.getTypedRuleContext(TheTypeIdContext,0);
	};

	Semi() {
	    return this.getToken(UnrealAngelscriptParser.Semi, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterAliasDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitAliasDeclaration(this);
		}
	}


}



class SimpleDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_simpleDeclaration;
    }

	Semi() {
	    return this.getToken(UnrealAngelscriptParser.Semi, 0);
	};

	declSpecifierSeq() {
	    return this.getTypedRuleContext(DeclSpecifierSeqContext,0);
	};

	initDeclaratorList() {
	    return this.getTypedRuleContext(InitDeclaratorListContext,0);
	};

	assignmentExpression() {
	    return this.getTypedRuleContext(AssignmentExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterSimpleDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitSimpleDeclaration(this);
		}
	}


}



class EmptyDeclaration_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_emptyDeclaration_;
    }

	Semi() {
	    return this.getToken(UnrealAngelscriptParser.Semi, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterEmptyDeclaration_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitEmptyDeclaration_(this);
		}
	}


}



class DeclSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_declSpecifier;
    }

	typeSpecifier() {
	    return this.getTypedRuleContext(TypeSpecifierContext,0);
	};

	functionSpecifier() {
	    return this.getTypedRuleContext(FunctionSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterDeclSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitDeclSpecifier(this);
		}
	}


}



class DeclSpecifierSeqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_declSpecifierSeq;
    }

	declSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(DeclSpecifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterDeclSpecifierSeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitDeclSpecifierSeq(this);
		}
	}


}



class FunctionSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_functionSpecifier;
    }

	Virtual() {
	    return this.getToken(UnrealAngelscriptParser.Virtual, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterFunctionSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitFunctionSpecifier(this);
		}
	}


}



class TypedefNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_typedefName;
    }

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterTypedefName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitTypedefName(this);
		}
	}


}



class TypeSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_typeSpecifier;
    }

	trailingTypeSpecifier() {
	    return this.getTypedRuleContext(TrailingTypeSpecifierContext,0);
	};

	classSpecifier() {
	    return this.getTypedRuleContext(ClassSpecifierContext,0);
	};

	enumSpecifier() {
	    return this.getTypedRuleContext(EnumSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterTypeSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitTypeSpecifier(this);
		}
	}


}



class TrailingTypeSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_trailingTypeSpecifier;
    }

	simpleTypeSpecifier() {
	    return this.getTypedRuleContext(SimpleTypeSpecifierContext,0);
	};

	elaboratedTypeSpecifier() {
	    return this.getTypedRuleContext(ElaboratedTypeSpecifierContext,0);
	};

	Const() {
	    return this.getToken(UnrealAngelscriptParser.Const, 0);
	};

	And() {
	    return this.getToken(UnrealAngelscriptParser.And, 0);
	};

	Out() {
	    return this.getToken(UnrealAngelscriptParser.Out, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterTrailingTypeSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitTrailingTypeSpecifier(this);
		}
	}


}



class TypeSpecifierSeqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_typeSpecifierSeq;
    }

	typeSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(TypeSpecifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterTypeSpecifierSeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitTypeSpecifierSeq(this);
		}
	}


}



class TrailingTypeSpecifierSeqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_trailingTypeSpecifierSeq;
    }

	trailingTypeSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TrailingTypeSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(TrailingTypeSpecifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterTrailingTypeSpecifierSeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitTrailingTypeSpecifierSeq(this);
		}
	}


}



class SimpleTypeSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_simpleTypeSpecifier;
    }

	theTypeName() {
	    return this.getTypedRuleContext(TheTypeNameContext,0);
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	asGeneric() {
	    return this.getTypedRuleContext(AsGenericContext,0);
	};

	Int() {
	    return this.getToken(UnrealAngelscriptParser.Int, 0);
	};

	Int8() {
	    return this.getToken(UnrealAngelscriptParser.Int8, 0);
	};

	Int16() {
	    return this.getToken(UnrealAngelscriptParser.Int16, 0);
	};

	Int32() {
	    return this.getToken(UnrealAngelscriptParser.Int32, 0);
	};

	Int64() {
	    return this.getToken(UnrealAngelscriptParser.Int64, 0);
	};

	UInt() {
	    return this.getToken(UnrealAngelscriptParser.UInt, 0);
	};

	UInt8() {
	    return this.getToken(UnrealAngelscriptParser.UInt8, 0);
	};

	UInt16() {
	    return this.getToken(UnrealAngelscriptParser.UInt16, 0);
	};

	UInt32() {
	    return this.getToken(UnrealAngelscriptParser.UInt32, 0);
	};

	UInt64() {
	    return this.getToken(UnrealAngelscriptParser.UInt64, 0);
	};

	Float() {
	    return this.getToken(UnrealAngelscriptParser.Float, 0);
	};

	Double() {
	    return this.getToken(UnrealAngelscriptParser.Double, 0);
	};

	Bool() {
	    return this.getToken(UnrealAngelscriptParser.Bool, 0);
	};

	Void() {
	    return this.getToken(UnrealAngelscriptParser.Void, 0);
	};

	Auto() {
	    return this.getToken(UnrealAngelscriptParser.Auto, 0);
	};

	decltypeSpecifier() {
	    return this.getTypedRuleContext(DecltypeSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterSimpleTypeSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitSimpleTypeSpecifier(this);
		}
	}


}



class AssertSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_assertSpecifier;
    }

	Ensure() {
	    return this.getToken(UnrealAngelscriptParser.Ensure, 0);
	};

	EnsureAlways() {
	    return this.getToken(UnrealAngelscriptParser.EnsureAlways, 0);
	};

	Check() {
	    return this.getToken(UnrealAngelscriptParser.Check, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterAssertSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitAssertSpecifier(this);
		}
	}


}



class TheTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_theTypeName;
    }

	className() {
	    return this.getTypedRuleContext(ClassNameContext,0);
	};

	enumName() {
	    return this.getTypedRuleContext(EnumNameContext,0);
	};

	typedefName() {
	    return this.getTypedRuleContext(TypedefNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterTheTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitTheTypeName(this);
		}
	}


}



class DecltypeSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_decltypeSpecifier;
    }

	LeftParen() {
	    return this.getToken(UnrealAngelscriptParser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(UnrealAngelscriptParser.RightParen, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	Auto() {
	    return this.getToken(UnrealAngelscriptParser.Auto, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterDecltypeSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitDecltypeSpecifier(this);
		}
	}


}



class ElaboratedTypeSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_elaboratedTypeSpecifier;
    }

	classKey() {
	    return this.getTypedRuleContext(ClassKeyContext,0);
	};

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	Enum() {
	    return this.getToken(UnrealAngelscriptParser.Enum, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterElaboratedTypeSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitElaboratedTypeSpecifier(this);
		}
	}


}



class EnumNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_enumName;
    }

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterEnumName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitEnumName(this);
		}
	}


}



class EnumSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_enumSpecifier;
    }

	enumHead() {
	    return this.getTypedRuleContext(EnumHeadContext,0);
	};

	LeftBrace() {
	    return this.getToken(UnrealAngelscriptParser.LeftBrace, 0);
	};

	RightBrace() {
	    return this.getToken(UnrealAngelscriptParser.RightBrace, 0);
	};

	enumeratorList() {
	    return this.getTypedRuleContext(EnumeratorListContext,0);
	};

	Comma() {
	    return this.getToken(UnrealAngelscriptParser.Comma, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterEnumSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitEnumSpecifier(this);
		}
	}


}



class EnumHeadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_enumHead;
    }

	enumkey() {
	    return this.getTypedRuleContext(EnumkeyContext,0);
	};

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	enumbase() {
	    return this.getTypedRuleContext(EnumbaseContext,0);
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterEnumHead(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitEnumHead(this);
		}
	}


}



class OpaqueEnumDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_opaqueEnumDeclaration;
    }

	enumkey() {
	    return this.getTypedRuleContext(EnumkeyContext,0);
	};

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	Semi() {
	    return this.getToken(UnrealAngelscriptParser.Semi, 0);
	};

	enumbase() {
	    return this.getTypedRuleContext(EnumbaseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterOpaqueEnumDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitOpaqueEnumDeclaration(this);
		}
	}


}



class EnumkeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_enumkey;
    }

	Enum() {
	    return this.getToken(UnrealAngelscriptParser.Enum, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterEnumkey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitEnumkey(this);
		}
	}


}



class EnumbaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_enumbase;
    }

	Colon() {
	    return this.getToken(UnrealAngelscriptParser.Colon, 0);
	};

	typeSpecifierSeq() {
	    return this.getTypedRuleContext(TypeSpecifierSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterEnumbase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitEnumbase(this);
		}
	}


}



class EnumeratorListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_enumeratorList;
    }

	enumeratorDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumeratorDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(EnumeratorDefinitionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Comma);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterEnumeratorList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitEnumeratorList(this);
		}
	}


}



class EnumeratorDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_enumeratorDefinition;
    }

	enumerator() {
	    return this.getTypedRuleContext(EnumeratorContext,0);
	};

	Assign() {
	    return this.getToken(UnrealAngelscriptParser.Assign, 0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterEnumeratorDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitEnumeratorDefinition(this);
		}
	}


}



class EnumeratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_enumerator;
    }

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterEnumerator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitEnumerator(this);
		}
	}


}



class NamespaceNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_namespaceName;
    }

	originalNamespaceName() {
	    return this.getTypedRuleContext(OriginalNamespaceNameContext,0);
	};

	namespaceAlias() {
	    return this.getTypedRuleContext(NamespaceAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterNamespaceName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitNamespaceName(this);
		}
	}


}



class OriginalNamespaceNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_originalNamespaceName;
    }

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterOriginalNamespaceName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitOriginalNamespaceName(this);
		}
	}


}



class NamespaceDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_namespaceDefinition;
        this.namespaceBody = null; // DeclarationseqContext
    }

	Namespace() {
	    return this.getToken(UnrealAngelscriptParser.Namespace, 0);
	};

	LeftBrace() {
	    return this.getToken(UnrealAngelscriptParser.LeftBrace, 0);
	};

	RightBrace() {
	    return this.getToken(UnrealAngelscriptParser.RightBrace, 0);
	};

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	originalNamespaceName() {
	    return this.getTypedRuleContext(OriginalNamespaceNameContext,0);
	};

	declarationseq() {
	    return this.getTypedRuleContext(DeclarationseqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterNamespaceDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitNamespaceDefinition(this);
		}
	}


}



class NamespaceAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_namespaceAlias;
    }

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterNamespaceAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitNamespaceAlias(this);
		}
	}


}



class NamespaceAliasDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_namespaceAliasDefinition;
    }

	Namespace() {
	    return this.getToken(UnrealAngelscriptParser.Namespace, 0);
	};

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	Assign() {
	    return this.getToken(UnrealAngelscriptParser.Assign, 0);
	};

	qualifiednamespacespecifier() {
	    return this.getTypedRuleContext(QualifiednamespacespecifierContext,0);
	};

	Semi() {
	    return this.getToken(UnrealAngelscriptParser.Semi, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterNamespaceAliasDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitNamespaceAliasDefinition(this);
		}
	}


}



class QualifiednamespacespecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_qualifiednamespacespecifier;
    }

	namespaceName() {
	    return this.getTypedRuleContext(NamespaceNameContext,0);
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterQualifiednamespacespecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitQualifiednamespacespecifier(this);
		}
	}


}



class BalancedTokenSeqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_balancedTokenSeq;
    }

	balancedtoken = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BalancedtokenContext);
	    } else {
	        return this.getTypedRuleContext(BalancedtokenContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterBalancedTokenSeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitBalancedTokenSeq(this);
		}
	}


}



class BalancedtokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_balancedtoken;
    }

	LeftParen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.LeftParen);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.LeftParen, i);
	    }
	};


	balancedTokenSeq() {
	    return this.getTypedRuleContext(BalancedTokenSeqContext,0);
	};

	RightParen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.RightParen);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.RightParen, i);
	    }
	};


	LeftBracket = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.LeftBracket);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.LeftBracket, i);
	    }
	};


	RightBracket = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.RightBracket);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.RightBracket, i);
	    }
	};


	LeftBrace = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.LeftBrace);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.LeftBrace, i);
	    }
	};


	RightBrace = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.RightBrace);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.RightBrace, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterBalancedtoken(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitBalancedtoken(this);
		}
	}


}



class InitDeclaratorListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_initDeclaratorList;
    }

	initDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InitDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(InitDeclaratorContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Comma);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterInitDeclaratorList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitInitDeclaratorList(this);
		}
	}


}



class InitDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_initDeclarator;
    }

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	initializer() {
	    return this.getTypedRuleContext(InitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterInitDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitInitDeclarator(this);
		}
	}


}



class DeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_declarator;
    }

	declaratorDef() {
	    return this.getTypedRuleContext(DeclaratorDefContext,0);
	};

	parametersAndQualifiers() {
	    return this.getTypedRuleContext(ParametersAndQualifiersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitDeclarator(this);
		}
	}


}



class DeclaratorDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_declaratorDef;
    }

	declaratorid() {
	    return this.getTypedRuleContext(DeclaratoridContext,0);
	};

	declaratorDef() {
	    return this.getTypedRuleContext(DeclaratorDefContext,0);
	};

	parametersAndQualifiers() {
	    return this.getTypedRuleContext(ParametersAndQualifiersContext,0);
	};

	LeftBracket() {
	    return this.getToken(UnrealAngelscriptParser.LeftBracket, 0);
	};

	RightBracket() {
	    return this.getToken(UnrealAngelscriptParser.RightBracket, 0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterDeclaratorDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitDeclaratorDef(this);
		}
	}


}



class ParametersAndQualifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_parametersAndQualifiers;
    }

	LeftParen() {
	    return this.getToken(UnrealAngelscriptParser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(UnrealAngelscriptParser.RightParen, 0);
	};

	parameterDeclarationClause() {
	    return this.getTypedRuleContext(ParameterDeclarationClauseContext,0);
	};

	Const() {
	    return this.getToken(UnrealAngelscriptParser.Const, 0);
	};

	refqualifier() {
	    return this.getTypedRuleContext(RefqualifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterParametersAndQualifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitParametersAndQualifiers(this);
		}
	}


}



class RefqualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_refqualifier;
    }

	And() {
	    return this.getToken(UnrealAngelscriptParser.And, 0);
	};

	AndAnd() {
	    return this.getToken(UnrealAngelscriptParser.AndAnd, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterRefqualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitRefqualifier(this);
		}
	}


}



class DeclaratoridContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_declaratorid;
    }

	idExpression() {
	    return this.getTypedRuleContext(IdExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterDeclaratorid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitDeclaratorid(this);
		}
	}


}



class TheTypeIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_theTypeId;
    }

	typeSpecifierSeq() {
	    return this.getTypedRuleContext(TypeSpecifierSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterTheTypeId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitTheTypeId(this);
		}
	}


}



class ParameterDeclarationClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_parameterDeclarationClause;
    }

	parameterDeclarationList() {
	    return this.getTypedRuleContext(ParameterDeclarationListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterParameterDeclarationClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitParameterDeclarationClause(this);
		}
	}


}



class ParameterDeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_parameterDeclarationList;
    }

	parameterDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ParameterDeclarationContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Comma);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterParameterDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitParameterDeclarationList(this);
		}
	}


}



class ParameterDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_parameterDeclaration;
    }

	declSpecifierSeq() {
	    return this.getTypedRuleContext(DeclSpecifierSeqContext,0);
	};

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	Assign() {
	    return this.getToken(UnrealAngelscriptParser.Assign, 0);
	};

	initializerClause() {
	    return this.getTypedRuleContext(InitializerClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterParameterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitParameterDeclaration(this);
		}
	}


}



class FunctionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_functionDefinition;
    }

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	ufunction() {
	    return this.getTypedRuleContext(UfunctionContext,0);
	};

	accessSpecifier() {
	    return this.getTypedRuleContext(AccessSpecifierContext,0);
	};

	Mixin() {
	    return this.getToken(UnrealAngelscriptParser.Mixin, 0);
	};

	declSpecifierSeq() {
	    return this.getTypedRuleContext(DeclSpecifierSeqContext,0);
	};

	postFuncSpecifierSeq() {
	    return this.getTypedRuleContext(PostFuncSpecifierSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterFunctionDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitFunctionDefinition(this);
		}
	}


}



class FunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_functionBody;
    }

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	Assign() {
	    return this.getToken(UnrealAngelscriptParser.Assign, 0);
	};

	Default() {
	    return this.getToken(UnrealAngelscriptParser.Default, 0);
	};

	Semi() {
	    return this.getToken(UnrealAngelscriptParser.Semi, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterFunctionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitFunctionBody(this);
		}
	}


}



class InitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_initializer;
    }

	braceOrEqualInitializer() {
	    return this.getTypedRuleContext(BraceOrEqualInitializerContext,0);
	};

	LeftParen() {
	    return this.getToken(UnrealAngelscriptParser.LeftParen, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	RightParen() {
	    return this.getToken(UnrealAngelscriptParser.RightParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitInitializer(this);
		}
	}


}



class BraceOrEqualInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_braceOrEqualInitializer;
    }

	Assign() {
	    return this.getToken(UnrealAngelscriptParser.Assign, 0);
	};

	initializerClause() {
	    return this.getTypedRuleContext(InitializerClauseContext,0);
	};

	bracedInitList() {
	    return this.getTypedRuleContext(BracedInitListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterBraceOrEqualInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitBraceOrEqualInitializer(this);
		}
	}


}



class InitializerClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_initializerClause;
    }

	assignmentExpression() {
	    return this.getTypedRuleContext(AssignmentExpressionContext,0);
	};

	bracedInitList() {
	    return this.getTypedRuleContext(BracedInitListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterInitializerClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitInitializerClause(this);
		}
	}


}



class InitializerListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_initializerList;
    }

	initializerClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InitializerClauseContext);
	    } else {
	        return this.getTypedRuleContext(InitializerClauseContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Comma);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterInitializerList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitInitializerList(this);
		}
	}


}



class BracedInitListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_bracedInitList;
    }

	LeftBrace() {
	    return this.getToken(UnrealAngelscriptParser.LeftBrace, 0);
	};

	LeftBracket() {
	    return this.getToken(UnrealAngelscriptParser.LeftBracket, 0);
	};

	RightBrace() {
	    return this.getToken(UnrealAngelscriptParser.RightBrace, 0);
	};

	RightBracket() {
	    return this.getToken(UnrealAngelscriptParser.RightBracket, 0);
	};

	initializerList() {
	    return this.getTypedRuleContext(InitializerListContext,0);
	};

	Comma() {
	    return this.getToken(UnrealAngelscriptParser.Comma, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterBracedInitList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitBracedInitList(this);
		}
	}


}



class ClassNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_className;
    }

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterClassName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitClassName(this);
		}
	}


}



class ClassSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_classSpecifier;
    }

	classHead() {
	    return this.getTypedRuleContext(ClassHeadContext,0);
	};

	LeftBrace() {
	    return this.getToken(UnrealAngelscriptParser.LeftBrace, 0);
	};

	RightBrace() {
	    return this.getToken(UnrealAngelscriptParser.RightBrace, 0);
	};

	memberSpecification() {
	    return this.getTypedRuleContext(MemberSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterClassSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitClassSpecifier(this);
		}
	}


}



class ClassHeadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_classHead;
    }

	classKey() {
	    return this.getTypedRuleContext(ClassKeyContext,0);
	};

	utype() {
	    return this.getTypedRuleContext(UtypeContext,0);
	};

	classHeadName() {
	    return this.getTypedRuleContext(ClassHeadNameContext,0);
	};

	baseClause() {
	    return this.getTypedRuleContext(BaseClauseContext,0);
	};

	classVirtSpecifier() {
	    return this.getTypedRuleContext(ClassVirtSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterClassHead(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitClassHead(this);
		}
	}


}



class ClassHeadNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_classHeadName;
    }

	className() {
	    return this.getTypedRuleContext(ClassNameContext,0);
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterClassHeadName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitClassHeadName(this);
		}
	}


}



class ClassVirtSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_classVirtSpecifier;
    }

	Final() {
	    return this.getToken(UnrealAngelscriptParser.Final, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterClassVirtSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitClassVirtSpecifier(this);
		}
	}


}



class ClassKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_classKey;
    }

	Class() {
	    return this.getToken(UnrealAngelscriptParser.Class, 0);
	};

	Struct() {
	    return this.getToken(UnrealAngelscriptParser.Struct, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterClassKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitClassKey(this);
		}
	}


}



class MemberSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_memberSpecification;
    }

	memberdeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MemberdeclarationContext);
	    } else {
	        return this.getTypedRuleContext(MemberdeclarationContext,i);
	    }
	};

	accessSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AccessSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(AccessSpecifierContext,i);
	    }
	};

	Colon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Colon);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Colon, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterMemberSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitMemberSpecification(this);
		}
	}


}



class MemberdeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_memberdeclaration;
    }

	propertyDefinition() {
	    return this.getTypedRuleContext(PropertyDefinitionContext,0);
	};

	functionDefinition() {
	    return this.getTypedRuleContext(FunctionDefinitionContext,0);
	};

	aliasDeclaration() {
	    return this.getTypedRuleContext(AliasDeclarationContext,0);
	};

	emptyDeclaration_() {
	    return this.getTypedRuleContext(EmptyDeclaration_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterMemberdeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitMemberdeclaration(this);
		}
	}


}



class PropertyDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_propertyDefinition;
    }

	Semi() {
	    return this.getToken(UnrealAngelscriptParser.Semi, 0);
	};

	uproperty() {
	    return this.getTypedRuleContext(UpropertyContext,0);
	};

	accessSpecifier() {
	    return this.getTypedRuleContext(AccessSpecifierContext,0);
	};

	Default() {
	    return this.getToken(UnrealAngelscriptParser.Default, 0);
	};

	declSpecifierSeq() {
	    return this.getTypedRuleContext(DeclSpecifierSeqContext,0);
	};

	memberDeclaratorList() {
	    return this.getTypedRuleContext(MemberDeclaratorListContext,0);
	};

	assignmentExpression() {
	    return this.getTypedRuleContext(AssignmentExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterPropertyDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitPropertyDefinition(this);
		}
	}


}



class MemberDeclaratorListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_memberDeclaratorList;
    }

	memberDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MemberDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(MemberDeclaratorContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Comma);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterMemberDeclaratorList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitMemberDeclaratorList(this);
		}
	}


}



class MemberDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_memberDeclarator;
    }

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	postFuncSpecifierSeq() {
	    return this.getTypedRuleContext(PostFuncSpecifierSeqContext,0);
	};

	braceOrEqualInitializer() {
	    return this.getTypedRuleContext(BraceOrEqualInitializerContext,0);
	};

	Colon() {
	    return this.getToken(UnrealAngelscriptParser.Colon, 0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterMemberDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitMemberDeclarator(this);
		}
	}


}



class PostFuncSpecifierSeqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_postFuncSpecifierSeq;
    }

	virtualSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VirtualSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(VirtualSpecifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterPostFuncSpecifierSeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitPostFuncSpecifierSeq(this);
		}
	}


}



class VirtualSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_virtualSpecifier;
    }

	Override() {
	    return this.getToken(UnrealAngelscriptParser.Override, 0);
	};

	Final() {
	    return this.getToken(UnrealAngelscriptParser.Final, 0);
	};

	Property() {
	    return this.getToken(UnrealAngelscriptParser.Property, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterVirtualSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitVirtualSpecifier(this);
		}
	}


}



class BaseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_baseClause;
    }

	Colon() {
	    return this.getToken(UnrealAngelscriptParser.Colon, 0);
	};

	baseSpecifierList() {
	    return this.getTypedRuleContext(BaseSpecifierListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterBaseClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitBaseClause(this);
		}
	}


}



class BaseSpecifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_baseSpecifierList;
    }

	baseSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BaseSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(BaseSpecifierContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Comma);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterBaseSpecifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitBaseSpecifierList(this);
		}
	}


}



class BaseSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_baseSpecifier;
    }

	baseTypeSpecifier() {
	    return this.getTypedRuleContext(BaseTypeSpecifierContext,0);
	};

	Virtual() {
	    return this.getToken(UnrealAngelscriptParser.Virtual, 0);
	};

	accessSpecifier() {
	    return this.getTypedRuleContext(AccessSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterBaseSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitBaseSpecifier(this);
		}
	}


}



class ClassOrDeclTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_classOrDeclType;
    }

	className() {
	    return this.getTypedRuleContext(ClassNameContext,0);
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	decltypeSpecifier() {
	    return this.getTypedRuleContext(DecltypeSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterClassOrDeclType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitClassOrDeclType(this);
		}
	}


}



class BaseTypeSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_baseTypeSpecifier;
    }

	classOrDeclType() {
	    return this.getTypedRuleContext(ClassOrDeclTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterBaseTypeSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitBaseTypeSpecifier(this);
		}
	}


}



class AccessSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_accessSpecifier;
    }

	Private() {
	    return this.getToken(UnrealAngelscriptParser.Private, 0);
	};

	Protected() {
	    return this.getToken(UnrealAngelscriptParser.Protected, 0);
	};

	Public() {
	    return this.getToken(UnrealAngelscriptParser.Public, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterAccessSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitAccessSpecifier(this);
		}
	}


}



class OperatorFunctionIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_operatorFunctionId;
    }

	Operator() {
	    return this.getToken(UnrealAngelscriptParser.Operator, 0);
	};

	theOperator() {
	    return this.getTypedRuleContext(TheOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterOperatorFunctionId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitOperatorFunctionId(this);
		}
	}


}



class LiteralOperatorIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_literalOperatorId;
    }

	Operator() {
	    return this.getToken(UnrealAngelscriptParser.Operator, 0);
	};

	StringLiteral() {
	    return this.getToken(UnrealAngelscriptParser.StringLiteral, 0);
	};

	Identifier() {
	    return this.getToken(UnrealAngelscriptParser.Identifier, 0);
	};

	UserDefinedStringLiteral() {
	    return this.getToken(UnrealAngelscriptParser.UserDefinedStringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterLiteralOperatorId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitLiteralOperatorId(this);
		}
	}


}



class TheOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_theOperator;
    }

	Plus() {
	    return this.getToken(UnrealAngelscriptParser.Plus, 0);
	};

	Minus() {
	    return this.getToken(UnrealAngelscriptParser.Minus, 0);
	};

	Star() {
	    return this.getToken(UnrealAngelscriptParser.Star, 0);
	};

	Div() {
	    return this.getToken(UnrealAngelscriptParser.Div, 0);
	};

	Mod() {
	    return this.getToken(UnrealAngelscriptParser.Mod, 0);
	};

	Xor() {
	    return this.getToken(UnrealAngelscriptParser.Xor, 0);
	};

	And() {
	    return this.getToken(UnrealAngelscriptParser.And, 0);
	};

	Or() {
	    return this.getToken(UnrealAngelscriptParser.Or, 0);
	};

	Tilde() {
	    return this.getToken(UnrealAngelscriptParser.Tilde, 0);
	};

	Not() {
	    return this.getToken(UnrealAngelscriptParser.Not, 0);
	};

	Assign() {
	    return this.getToken(UnrealAngelscriptParser.Assign, 0);
	};

	Greater = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Greater);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Greater, i);
	    }
	};


	Less = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(UnrealAngelscriptParser.Less);
	    } else {
	        return this.getToken(UnrealAngelscriptParser.Less, i);
	    }
	};


	GreaterEqual() {
	    return this.getToken(UnrealAngelscriptParser.GreaterEqual, 0);
	};

	PlusAssign() {
	    return this.getToken(UnrealAngelscriptParser.PlusAssign, 0);
	};

	MinusAssign() {
	    return this.getToken(UnrealAngelscriptParser.MinusAssign, 0);
	};

	StarAssign() {
	    return this.getToken(UnrealAngelscriptParser.StarAssign, 0);
	};

	ModAssign() {
	    return this.getToken(UnrealAngelscriptParser.ModAssign, 0);
	};

	XorAssign() {
	    return this.getToken(UnrealAngelscriptParser.XorAssign, 0);
	};

	AndAssign() {
	    return this.getToken(UnrealAngelscriptParser.AndAssign, 0);
	};

	OrAssign() {
	    return this.getToken(UnrealAngelscriptParser.OrAssign, 0);
	};

	RightShiftAssign() {
	    return this.getToken(UnrealAngelscriptParser.RightShiftAssign, 0);
	};

	LeftShiftAssign() {
	    return this.getToken(UnrealAngelscriptParser.LeftShiftAssign, 0);
	};

	Equal() {
	    return this.getToken(UnrealAngelscriptParser.Equal, 0);
	};

	NotEqual() {
	    return this.getToken(UnrealAngelscriptParser.NotEqual, 0);
	};

	LessEqual() {
	    return this.getToken(UnrealAngelscriptParser.LessEqual, 0);
	};

	AndAnd() {
	    return this.getToken(UnrealAngelscriptParser.AndAnd, 0);
	};

	OrOr() {
	    return this.getToken(UnrealAngelscriptParser.OrOr, 0);
	};

	PlusPlus() {
	    return this.getToken(UnrealAngelscriptParser.PlusPlus, 0);
	};

	MinusMinus() {
	    return this.getToken(UnrealAngelscriptParser.MinusMinus, 0);
	};

	Comma() {
	    return this.getToken(UnrealAngelscriptParser.Comma, 0);
	};

	LeftParen() {
	    return this.getToken(UnrealAngelscriptParser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(UnrealAngelscriptParser.RightParen, 0);
	};

	LeftBracket() {
	    return this.getToken(UnrealAngelscriptParser.LeftBracket, 0);
	};

	RightBracket() {
	    return this.getToken(UnrealAngelscriptParser.RightBracket, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterTheOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitTheOperator(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = UnrealAngelscriptParser.RULE_literal;
    }

	IntegerLiteral() {
	    return this.getToken(UnrealAngelscriptParser.IntegerLiteral, 0);
	};

	CharacterLiteral() {
	    return this.getToken(UnrealAngelscriptParser.CharacterLiteral, 0);
	};

	FloatingLiteral() {
	    return this.getToken(UnrealAngelscriptParser.FloatingLiteral, 0);
	};

	StringLiteral() {
	    return this.getToken(UnrealAngelscriptParser.StringLiteral, 0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	UserDefinedLiteral() {
	    return this.getToken(UnrealAngelscriptParser.UserDefinedLiteral, 0);
	};

	Nullptr() {
	    return this.getToken(UnrealAngelscriptParser.Nullptr, 0);
	};

	enterRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof UnrealAngelscriptParserListener ) {
	        listener.exitLiteral(this);
		}
	}


}




UnrealAngelscriptParser.ScriptContext = ScriptContext; 
UnrealAngelscriptParser.AnnotationListContext = AnnotationListContext; 
UnrealAngelscriptParser.AnnotationContext = AnnotationContext; 
UnrealAngelscriptParser.UtypeContext = UtypeContext; 
UnrealAngelscriptParser.UpropertyContext = UpropertyContext; 
UnrealAngelscriptParser.UfunctionContext = UfunctionContext; 
UnrealAngelscriptParser.ModuleImportContext = ModuleImportContext; 
UnrealAngelscriptParser.AsGenericContext = AsGenericContext; 
UnrealAngelscriptParser.SimpleTypeSpecifierListContext = SimpleTypeSpecifierListContext; 
UnrealAngelscriptParser.BooleanLiteralContext = BooleanLiteralContext; 
UnrealAngelscriptParser.PrimaryExpressionContext = PrimaryExpressionContext; 
UnrealAngelscriptParser.IdExpressionContext = IdExpressionContext; 
UnrealAngelscriptParser.UnqualifiedIdContext = UnqualifiedIdContext; 
UnrealAngelscriptParser.QualifiedIdContext = QualifiedIdContext; 
UnrealAngelscriptParser.NestedNameSpecifierContext = NestedNameSpecifierContext; 
UnrealAngelscriptParser.LambdaExpressionContext = LambdaExpressionContext; 
UnrealAngelscriptParser.LambdaIntroducerContext = LambdaIntroducerContext; 
UnrealAngelscriptParser.LambdaCaptureContext = LambdaCaptureContext; 
UnrealAngelscriptParser.CaptureDefaultContext = CaptureDefaultContext; 
UnrealAngelscriptParser.CaptureListContext = CaptureListContext; 
UnrealAngelscriptParser.CaptureContext = CaptureContext; 
UnrealAngelscriptParser.SimpleCaptureContext = SimpleCaptureContext; 
UnrealAngelscriptParser.InitcaptureContext = InitcaptureContext; 
UnrealAngelscriptParser.LambdaDeclaratorContext = LambdaDeclaratorContext; 
UnrealAngelscriptParser.PostfixExpressionContext = PostfixExpressionContext; 
UnrealAngelscriptParser.ExpressionListContext = ExpressionListContext; 
UnrealAngelscriptParser.PseudoDestructorNameContext = PseudoDestructorNameContext; 
UnrealAngelscriptParser.UnaryExpressionContext = UnaryExpressionContext; 
UnrealAngelscriptParser.UnaryOperatorContext = UnaryOperatorContext; 
UnrealAngelscriptParser.NewPlacementContext = NewPlacementContext; 
UnrealAngelscriptParser.NewInitializer_Context = NewInitializer_Context; 
UnrealAngelscriptParser.CastExpressionContext = CastExpressionContext; 
UnrealAngelscriptParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext; 
UnrealAngelscriptParser.AdditiveExpressionContext = AdditiveExpressionContext; 
UnrealAngelscriptParser.ShiftExpressionContext = ShiftExpressionContext; 
UnrealAngelscriptParser.ShiftOperatorContext = ShiftOperatorContext; 
UnrealAngelscriptParser.RelationalExpressionContext = RelationalExpressionContext; 
UnrealAngelscriptParser.EqualityExpressionContext = EqualityExpressionContext; 
UnrealAngelscriptParser.AndExpressionContext = AndExpressionContext; 
UnrealAngelscriptParser.ExclusiveOrExpressionContext = ExclusiveOrExpressionContext; 
UnrealAngelscriptParser.InclusiveOrExpressionContext = InclusiveOrExpressionContext; 
UnrealAngelscriptParser.LogicalAndExpressionContext = LogicalAndExpressionContext; 
UnrealAngelscriptParser.LogicalOrExpressionContext = LogicalOrExpressionContext; 
UnrealAngelscriptParser.ConditionalExpressionContext = ConditionalExpressionContext; 
UnrealAngelscriptParser.AssignmentExpressionContext = AssignmentExpressionContext; 
UnrealAngelscriptParser.AssignmentOperatorContext = AssignmentOperatorContext; 
UnrealAngelscriptParser.ExpressionContext = ExpressionContext; 
UnrealAngelscriptParser.ConstantExpressionContext = ConstantExpressionContext; 
UnrealAngelscriptParser.StatementContext = StatementContext; 
UnrealAngelscriptParser.LabeledStatementContext = LabeledStatementContext; 
UnrealAngelscriptParser.ExpressionStatementContext = ExpressionStatementContext; 
UnrealAngelscriptParser.CompoundStatementContext = CompoundStatementContext; 
UnrealAngelscriptParser.StatementSeqContext = StatementSeqContext; 
UnrealAngelscriptParser.SelectionStatementContext = SelectionStatementContext; 
UnrealAngelscriptParser.ConditionContext = ConditionContext; 
UnrealAngelscriptParser.IterationStatementContext = IterationStatementContext; 
UnrealAngelscriptParser.ForInitStatementContext = ForInitStatementContext; 
UnrealAngelscriptParser.ForRangeDeclarationContext = ForRangeDeclarationContext; 
UnrealAngelscriptParser.ForRangeInitializerContext = ForRangeInitializerContext; 
UnrealAngelscriptParser.JumpStatementContext = JumpStatementContext; 
UnrealAngelscriptParser.DeclarationStatementContext = DeclarationStatementContext; 
UnrealAngelscriptParser.DeclarationseqContext = DeclarationseqContext; 
UnrealAngelscriptParser.DeclarationContext = DeclarationContext; 
UnrealAngelscriptParser.BlockDeclarationContext = BlockDeclarationContext; 
UnrealAngelscriptParser.AliasDeclarationContext = AliasDeclarationContext; 
UnrealAngelscriptParser.SimpleDeclarationContext = SimpleDeclarationContext; 
UnrealAngelscriptParser.EmptyDeclaration_Context = EmptyDeclaration_Context; 
UnrealAngelscriptParser.DeclSpecifierContext = DeclSpecifierContext; 
UnrealAngelscriptParser.DeclSpecifierSeqContext = DeclSpecifierSeqContext; 
UnrealAngelscriptParser.FunctionSpecifierContext = FunctionSpecifierContext; 
UnrealAngelscriptParser.TypedefNameContext = TypedefNameContext; 
UnrealAngelscriptParser.TypeSpecifierContext = TypeSpecifierContext; 
UnrealAngelscriptParser.TrailingTypeSpecifierContext = TrailingTypeSpecifierContext; 
UnrealAngelscriptParser.TypeSpecifierSeqContext = TypeSpecifierSeqContext; 
UnrealAngelscriptParser.TrailingTypeSpecifierSeqContext = TrailingTypeSpecifierSeqContext; 
UnrealAngelscriptParser.SimpleTypeSpecifierContext = SimpleTypeSpecifierContext; 
UnrealAngelscriptParser.AssertSpecifierContext = AssertSpecifierContext; 
UnrealAngelscriptParser.TheTypeNameContext = TheTypeNameContext; 
UnrealAngelscriptParser.DecltypeSpecifierContext = DecltypeSpecifierContext; 
UnrealAngelscriptParser.ElaboratedTypeSpecifierContext = ElaboratedTypeSpecifierContext; 
UnrealAngelscriptParser.EnumNameContext = EnumNameContext; 
UnrealAngelscriptParser.EnumSpecifierContext = EnumSpecifierContext; 
UnrealAngelscriptParser.EnumHeadContext = EnumHeadContext; 
UnrealAngelscriptParser.OpaqueEnumDeclarationContext = OpaqueEnumDeclarationContext; 
UnrealAngelscriptParser.EnumkeyContext = EnumkeyContext; 
UnrealAngelscriptParser.EnumbaseContext = EnumbaseContext; 
UnrealAngelscriptParser.EnumeratorListContext = EnumeratorListContext; 
UnrealAngelscriptParser.EnumeratorDefinitionContext = EnumeratorDefinitionContext; 
UnrealAngelscriptParser.EnumeratorContext = EnumeratorContext; 
UnrealAngelscriptParser.NamespaceNameContext = NamespaceNameContext; 
UnrealAngelscriptParser.OriginalNamespaceNameContext = OriginalNamespaceNameContext; 
UnrealAngelscriptParser.NamespaceDefinitionContext = NamespaceDefinitionContext; 
UnrealAngelscriptParser.NamespaceAliasContext = NamespaceAliasContext; 
UnrealAngelscriptParser.NamespaceAliasDefinitionContext = NamespaceAliasDefinitionContext; 
UnrealAngelscriptParser.QualifiednamespacespecifierContext = QualifiednamespacespecifierContext; 
UnrealAngelscriptParser.BalancedTokenSeqContext = BalancedTokenSeqContext; 
UnrealAngelscriptParser.BalancedtokenContext = BalancedtokenContext; 
UnrealAngelscriptParser.InitDeclaratorListContext = InitDeclaratorListContext; 
UnrealAngelscriptParser.InitDeclaratorContext = InitDeclaratorContext; 
UnrealAngelscriptParser.DeclaratorContext = DeclaratorContext; 
UnrealAngelscriptParser.DeclaratorDefContext = DeclaratorDefContext; 
UnrealAngelscriptParser.ParametersAndQualifiersContext = ParametersAndQualifiersContext; 
UnrealAngelscriptParser.RefqualifierContext = RefqualifierContext; 
UnrealAngelscriptParser.DeclaratoridContext = DeclaratoridContext; 
UnrealAngelscriptParser.TheTypeIdContext = TheTypeIdContext; 
UnrealAngelscriptParser.ParameterDeclarationClauseContext = ParameterDeclarationClauseContext; 
UnrealAngelscriptParser.ParameterDeclarationListContext = ParameterDeclarationListContext; 
UnrealAngelscriptParser.ParameterDeclarationContext = ParameterDeclarationContext; 
UnrealAngelscriptParser.FunctionDefinitionContext = FunctionDefinitionContext; 
UnrealAngelscriptParser.FunctionBodyContext = FunctionBodyContext; 
UnrealAngelscriptParser.InitializerContext = InitializerContext; 
UnrealAngelscriptParser.BraceOrEqualInitializerContext = BraceOrEqualInitializerContext; 
UnrealAngelscriptParser.InitializerClauseContext = InitializerClauseContext; 
UnrealAngelscriptParser.InitializerListContext = InitializerListContext; 
UnrealAngelscriptParser.BracedInitListContext = BracedInitListContext; 
UnrealAngelscriptParser.ClassNameContext = ClassNameContext; 
UnrealAngelscriptParser.ClassSpecifierContext = ClassSpecifierContext; 
UnrealAngelscriptParser.ClassHeadContext = ClassHeadContext; 
UnrealAngelscriptParser.ClassHeadNameContext = ClassHeadNameContext; 
UnrealAngelscriptParser.ClassVirtSpecifierContext = ClassVirtSpecifierContext; 
UnrealAngelscriptParser.ClassKeyContext = ClassKeyContext; 
UnrealAngelscriptParser.MemberSpecificationContext = MemberSpecificationContext; 
UnrealAngelscriptParser.MemberdeclarationContext = MemberdeclarationContext; 
UnrealAngelscriptParser.PropertyDefinitionContext = PropertyDefinitionContext; 
UnrealAngelscriptParser.MemberDeclaratorListContext = MemberDeclaratorListContext; 
UnrealAngelscriptParser.MemberDeclaratorContext = MemberDeclaratorContext; 
UnrealAngelscriptParser.PostFuncSpecifierSeqContext = PostFuncSpecifierSeqContext; 
UnrealAngelscriptParser.VirtualSpecifierContext = VirtualSpecifierContext; 
UnrealAngelscriptParser.BaseClauseContext = BaseClauseContext; 
UnrealAngelscriptParser.BaseSpecifierListContext = BaseSpecifierListContext; 
UnrealAngelscriptParser.BaseSpecifierContext = BaseSpecifierContext; 
UnrealAngelscriptParser.ClassOrDeclTypeContext = ClassOrDeclTypeContext; 
UnrealAngelscriptParser.BaseTypeSpecifierContext = BaseTypeSpecifierContext; 
UnrealAngelscriptParser.AccessSpecifierContext = AccessSpecifierContext; 
UnrealAngelscriptParser.OperatorFunctionIdContext = OperatorFunctionIdContext; 
UnrealAngelscriptParser.LiteralOperatorIdContext = LiteralOperatorIdContext; 
UnrealAngelscriptParser.TheOperatorContext = TheOperatorContext; 
UnrealAngelscriptParser.LiteralContext = LiteralContext; 
