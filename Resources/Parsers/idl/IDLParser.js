// Generated from ./idl/IDL.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import IDLListener from './IDLListener.js';
const serializedATN = [4,1,116,1447,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,1,0,5,0,324,8,0,10,0,12,0,327,9,0,1,0,4,0,330,8,0,11,0,12,0,
331,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,3,1,371,8,1,1,2,1,2,1,2,1,2,4,2,377,8,2,11,2,12,2,378,1,2,1,2,1,
3,1,3,1,3,3,3,386,8,3,1,4,1,4,1,4,1,4,1,4,1,5,3,5,394,8,5,1,5,1,5,1,5,1,
6,3,6,400,8,6,1,6,1,6,1,6,3,6,405,8,6,1,7,5,7,408,8,7,10,7,12,7,411,9,7,
1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
1,8,1,8,1,8,1,8,3,8,435,8,8,1,9,1,9,1,9,1,9,5,9,441,8,9,10,9,12,9,444,9,
9,1,10,1,10,1,11,1,11,1,11,1,12,3,12,452,8,12,1,12,1,12,1,12,5,12,457,8,
12,10,12,12,12,460,9,12,1,13,1,13,1,13,1,13,1,13,3,13,467,8,13,1,14,3,14,
470,8,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,
5,16,485,8,16,10,16,12,16,488,9,16,1,16,1,16,1,17,1,17,1,17,5,17,495,8,17,
10,17,12,17,498,9,17,1,17,1,17,1,18,3,18,503,8,18,1,18,1,18,1,18,1,18,1,
19,1,19,3,19,511,8,19,1,19,1,19,1,19,5,19,516,8,19,10,19,12,19,519,9,19,
3,19,521,8,19,1,19,1,19,1,19,1,19,5,19,527,8,19,10,19,12,19,530,9,19,3,19,
532,8,19,1,20,1,20,1,21,1,21,1,21,3,21,539,8,21,1,22,1,22,1,22,1,22,1,22,
3,22,546,8,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,3,23,557,8,23,
1,23,1,23,3,23,561,8,23,1,23,1,23,1,24,1,24,1,24,5,24,568,8,24,10,24,12,
24,571,9,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,
1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,
28,599,8,28,1,29,1,29,1,30,1,30,1,30,5,30,606,8,30,10,30,12,30,609,9,30,
1,31,1,31,1,31,5,31,614,8,31,10,31,12,31,617,9,31,1,32,1,32,1,32,5,32,622,
8,32,10,32,12,32,625,9,32,1,33,1,33,1,33,5,33,630,8,33,10,33,12,33,633,9,
33,1,34,1,34,1,34,5,34,638,8,34,10,34,12,34,641,9,34,1,35,1,35,1,35,5,35,
646,8,35,10,35,12,35,649,9,35,1,36,1,36,1,36,1,36,3,36,655,8,36,1,37,1,37,
1,38,1,38,1,38,1,38,1,38,1,38,3,38,665,8,38,1,39,1,39,1,40,1,40,1,41,1,41,
1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,685,8,41,
1,42,1,42,1,42,1,43,1,43,3,43,692,8,43,1,44,1,44,1,44,3,44,697,8,44,1,45,
1,45,1,45,3,45,702,8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,
713,8,46,1,47,1,47,1,47,1,47,1,47,1,47,3,47,721,8,47,1,48,1,48,1,48,1,48,
1,48,3,48,728,8,48,1,49,1,49,1,49,5,49,733,8,49,10,49,12,49,736,9,49,1,50,
1,50,1,50,5,50,741,8,50,10,50,12,50,744,9,50,1,51,1,51,1,51,3,51,749,8,51,
1,52,1,52,1,53,1,53,1,54,1,54,1,54,1,54,3,54,759,8,54,1,55,1,55,3,55,763,
8,55,1,56,1,56,1,56,1,56,3,56,769,8,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,
1,60,1,60,3,60,780,8,60,1,61,1,61,1,61,1,61,3,61,786,8,61,1,62,1,62,1,63,
1,63,1,63,3,63,793,8,63,1,64,1,64,1,64,3,64,798,8,64,1,65,1,65,1,65,1,65,
3,65,804,8,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,
1,72,1,72,3,72,820,8,72,1,73,1,73,1,73,1,73,1,73,1,74,1,74,1,74,3,74,830,
8,74,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,
76,5,76,846,8,76,10,76,12,76,849,9,76,1,77,1,77,1,77,1,77,3,77,855,8,77,
1,77,1,77,1,78,1,78,1,78,1,79,1,79,1,79,1,79,3,79,866,8,79,1,79,1,79,1,79,
1,79,1,80,1,80,3,80,874,8,80,1,80,1,80,4,80,878,8,80,11,80,12,80,879,1,81,
1,81,1,81,1,81,1,81,1,81,3,81,888,8,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,
1,82,1,83,1,83,1,83,5,83,901,8,83,10,83,12,83,904,9,83,1,84,1,84,1,84,1,
84,3,84,910,8,84,1,84,1,84,1,84,1,84,1,85,5,85,917,8,85,10,85,12,85,920,
9,85,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,
87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,945,8,88,1,89,4,89,
948,8,89,11,89,12,89,949,1,90,4,90,953,8,90,11,90,12,90,954,1,90,1,90,1,
90,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,967,8,91,1,92,1,92,1,92,1,92,
1,93,1,93,1,93,1,93,1,93,1,93,5,93,979,8,93,10,93,12,93,982,9,93,1,93,1,
93,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,95,3,95,994,8,95,1,95,1,95,1,96,
1,96,1,96,1,96,1,96,3,96,1003,8,96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,
97,1,97,3,97,1014,8,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,3,98,1023,8,98,
1,99,1,99,1,99,1,99,1,99,3,99,1030,8,99,1,100,1,100,4,100,1034,8,100,11,
100,12,100,1035,1,101,1,101,1,101,1,101,1,102,1,102,3,102,1044,8,102,1,103,
1,103,1,103,1,103,5,103,1050,8,103,10,103,12,103,1053,9,103,1,103,1,103,
1,104,3,104,1058,8,104,1,104,1,104,1,104,1,104,3,104,1064,8,104,1,104,3,
104,1067,8,104,1,105,1,105,1,106,1,106,1,106,3,106,1074,8,106,1,107,1,107,
1,107,1,107,5,107,1080,8,107,10,107,12,107,1083,9,107,3,107,1085,8,107,1,
107,1,107,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,109,1,109,1,110,1,
110,1,110,1,110,1,110,5,110,1103,8,110,10,110,12,110,1106,9,110,1,110,1,
110,1,111,1,111,1,111,1,111,1,111,5,111,1115,8,111,10,111,12,111,1118,9,
111,1,111,1,111,1,112,1,112,1,112,1,112,3,112,1126,8,112,1,113,1,113,1,113,
1,113,1,113,1,113,1,113,1,114,1,114,1,115,1,115,1,116,1,116,1,116,1,116,
3,116,1143,8,116,1,117,1,117,1,117,1,117,1,117,1,117,1,118,1,118,3,118,1153,
8,118,1,119,1,119,1,119,1,119,1,120,1,120,1,120,1,120,1,121,1,121,1,121,
1,121,1,121,1,121,1,122,1,122,1,122,1,122,1,122,1,122,1,122,5,122,1176,8,
122,10,122,12,122,1179,9,122,3,122,1181,8,122,1,123,1,123,1,123,1,123,1,
123,1,124,1,124,1,124,1,124,1,124,1,124,1,124,5,124,1195,8,124,10,124,12,
124,1198,9,124,3,124,1200,8,124,1,125,1,125,3,125,1204,8,125,1,125,3,125,
1207,8,125,1,126,1,126,1,126,1,127,1,127,1,127,1,128,1,128,1,128,1,128,5,
128,1219,8,128,10,128,12,128,1222,9,128,1,128,1,128,1,129,1,129,3,129,1228,
8,129,1,130,1,130,1,130,1,131,1,131,1,131,1,131,1,131,1,132,1,132,1,132,
3,132,1241,8,132,1,132,3,132,1244,8,132,1,133,1,133,1,133,1,133,5,133,1250,
8,133,10,133,12,133,1253,9,133,1,134,1,134,1,134,1,135,5,135,1259,8,135,
10,135,12,135,1262,9,135,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,
1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,3,136,
1283,8,136,1,137,1,137,1,137,1,137,1,138,1,138,1,138,3,138,1292,8,138,1,
139,1,139,3,139,1296,8,139,1,139,1,139,1,139,1,140,1,140,1,140,1,140,1,141,
1,141,1,141,1,141,1,142,1,142,1,142,1,142,1,143,1,143,1,143,1,144,1,144,
1,144,3,144,1319,8,144,1,144,3,144,1322,8,144,1,144,1,144,1,144,3,144,1327,
8,144,1,145,1,145,1,145,1,146,1,146,1,146,1,147,1,147,5,147,1337,8,147,10,
147,12,147,1340,9,147,1,147,1,147,1,148,1,148,1,148,1,148,3,148,1348,8,148,
1,148,1,148,3,148,1352,8,148,1,149,1,149,1,149,1,149,3,149,1358,8,149,1,
149,1,149,3,149,1362,8,149,1,150,1,150,1,150,1,150,3,150,1368,8,150,1,150,
1,150,3,150,1372,8,150,1,151,1,151,1,151,3,151,1377,8,151,1,152,3,152,1380,
8,152,1,152,1,152,1,152,1,153,1,153,1,153,1,153,1,153,1,153,5,153,1391,8,
153,10,153,12,153,1394,9,153,1,153,1,153,1,154,1,154,1,154,5,154,1401,8,
154,10,154,12,154,1404,9,154,1,154,1,154,1,155,3,155,1409,8,155,1,155,1,
155,1,155,1,155,1,156,5,156,1416,8,156,10,156,12,156,1419,9,156,1,157,1,
157,1,157,1,157,1,157,1,157,3,157,1427,8,157,1,158,1,158,1,158,1,158,5,158,
1433,8,158,10,158,12,158,1436,9,158,3,158,1438,8,158,1,159,1,159,1,159,1,
159,1,160,1,160,1,160,1,160,0,0,161,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,
226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,
262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,
298,300,302,304,306,308,310,312,314,316,318,320,0,9,2,0,87,87,95,95,1,0,
33,34,1,0,25,26,3,0,21,21,24,24,31,31,2,0,20,20,25,26,1,0,1,10,2,0,61,61,
106,106,2,0,62,62,108,108,3,0,37,37,58,58,88,88,1478,0,325,1,0,0,0,2,333,
1,0,0,0,4,372,1,0,0,0,6,382,1,0,0,0,8,387,1,0,0,0,10,393,1,0,0,0,12,399,
1,0,0,0,14,409,1,0,0,0,16,412,1,0,0,0,18,436,1,0,0,0,20,445,1,0,0,0,22,447,
1,0,0,0,24,451,1,0,0,0,26,461,1,0,0,0,28,469,1,0,0,0,30,474,1,0,0,0,32,478,
1,0,0,0,34,491,1,0,0,0,36,502,1,0,0,0,38,520,1,0,0,0,40,533,1,0,0,0,42,538,
1,0,0,0,44,540,1,0,0,0,46,551,1,0,0,0,48,564,1,0,0,0,50,572,1,0,0,0,52,579,
1,0,0,0,54,581,1,0,0,0,56,587,1,0,0,0,58,600,1,0,0,0,60,602,1,0,0,0,62,610,
1,0,0,0,64,618,1,0,0,0,66,626,1,0,0,0,68,634,1,0,0,0,70,642,1,0,0,0,72,654,
1,0,0,0,74,656,1,0,0,0,76,664,1,0,0,0,78,666,1,0,0,0,80,668,1,0,0,0,82,684,
1,0,0,0,84,686,1,0,0,0,86,691,1,0,0,0,88,696,1,0,0,0,90,701,1,0,0,0,92,712,
1,0,0,0,94,720,1,0,0,0,96,727,1,0,0,0,98,729,1,0,0,0,100,737,1,0,0,0,102,
745,1,0,0,0,104,750,1,0,0,0,106,752,1,0,0,0,108,758,1,0,0,0,110,762,1,0,
0,0,112,768,1,0,0,0,114,770,1,0,0,0,116,772,1,0,0,0,118,774,1,0,0,0,120,
779,1,0,0,0,122,785,1,0,0,0,124,787,1,0,0,0,126,792,1,0,0,0,128,797,1,0,
0,0,130,803,1,0,0,0,132,805,1,0,0,0,134,807,1,0,0,0,136,809,1,0,0,0,138,
811,1,0,0,0,140,813,1,0,0,0,142,815,1,0,0,0,144,819,1,0,0,0,146,821,1,0,
0,0,148,826,1,0,0,0,150,831,1,0,0,0,152,847,1,0,0,0,154,850,1,0,0,0,156,
858,1,0,0,0,158,861,1,0,0,0,160,877,1,0,0,0,162,881,1,0,0,0,164,891,1,0,
0,0,166,897,1,0,0,0,168,905,1,0,0,0,170,918,1,0,0,0,172,921,1,0,0,0,174,
926,1,0,0,0,176,944,1,0,0,0,178,947,1,0,0,0,180,952,1,0,0,0,182,959,1,0,
0,0,184,968,1,0,0,0,186,972,1,0,0,0,188,985,1,0,0,0,190,987,1,0,0,0,192,
997,1,0,0,0,194,1006,1,0,0,0,196,1017,1,0,0,0,198,1024,1,0,0,0,200,1031,
1,0,0,0,202,1037,1,0,0,0,204,1043,1,0,0,0,206,1045,1,0,0,0,208,1057,1,0,
0,0,210,1068,1,0,0,0,212,1070,1,0,0,0,214,1075,1,0,0,0,216,1088,1,0,0,0,
218,1095,1,0,0,0,220,1097,1,0,0,0,222,1109,1,0,0,0,224,1125,1,0,0,0,226,
1127,1,0,0,0,228,1134,1,0,0,0,230,1136,1,0,0,0,232,1142,1,0,0,0,234,1144,
1,0,0,0,236,1152,1,0,0,0,238,1154,1,0,0,0,240,1158,1,0,0,0,242,1162,1,0,
0,0,244,1168,1,0,0,0,246,1182,1,0,0,0,248,1187,1,0,0,0,250,1206,1,0,0,0,
252,1208,1,0,0,0,254,1211,1,0,0,0,256,1214,1,0,0,0,258,1227,1,0,0,0,260,
1229,1,0,0,0,262,1232,1,0,0,0,264,1237,1,0,0,0,266,1245,1,0,0,0,268,1254,
1,0,0,0,270,1260,1,0,0,0,272,1263,1,0,0,0,274,1284,1,0,0,0,276,1288,1,0,
0,0,278,1293,1,0,0,0,280,1300,1,0,0,0,282,1304,1,0,0,0,284,1308,1,0,0,0,
286,1312,1,0,0,0,288,1315,1,0,0,0,290,1328,1,0,0,0,292,1331,1,0,0,0,294,
1334,1,0,0,0,296,1351,1,0,0,0,298,1353,1,0,0,0,300,1363,1,0,0,0,302,1376,
1,0,0,0,304,1379,1,0,0,0,306,1384,1,0,0,0,308,1397,1,0,0,0,310,1408,1,0,
0,0,312,1417,1,0,0,0,314,1420,1,0,0,0,316,1437,1,0,0,0,318,1439,1,0,0,0,
320,1443,1,0,0,0,322,324,3,234,117,0,323,322,1,0,0,0,324,327,1,0,0,0,325,
323,1,0,0,0,325,326,1,0,0,0,326,329,1,0,0,0,327,325,1,0,0,0,328,330,3,2,
1,0,329,328,1,0,0,0,330,331,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,
1,1,0,0,0,333,370,3,312,156,0,334,335,3,82,41,0,335,336,5,11,0,0,336,371,
1,0,0,0,337,338,3,54,27,0,338,339,5,11,0,0,339,371,1,0,0,0,340,341,3,206,
103,0,341,342,5,11,0,0,342,371,1,0,0,0,343,344,3,6,3,0,344,345,5,11,0,0,
345,371,1,0,0,0,346,347,3,4,2,0,347,348,5,11,0,0,348,371,1,0,0,0,349,350,
3,26,13,0,350,351,5,11,0,0,351,371,1,0,0,0,352,353,3,238,119,0,353,354,5,
11,0,0,354,371,1,0,0,0,355,356,3,240,120,0,356,357,5,11,0,0,357,371,1,0,
0,0,358,359,3,302,151,0,359,360,5,11,0,0,360,371,1,0,0,0,361,362,3,258,129,
0,362,363,5,11,0,0,363,371,1,0,0,0,364,365,3,286,143,0,365,366,5,11,0,0,
366,371,1,0,0,0,367,368,3,144,72,0,368,369,5,11,0,0,369,371,1,0,0,0,370,
334,1,0,0,0,370,337,1,0,0,0,370,340,1,0,0,0,370,343,1,0,0,0,370,346,1,0,
0,0,370,349,1,0,0,0,370,352,1,0,0,0,370,355,1,0,0,0,370,358,1,0,0,0,370,
361,1,0,0,0,370,364,1,0,0,0,370,367,1,0,0,0,371,3,1,0,0,0,372,373,5,74,0,
0,373,374,3,320,160,0,374,376,5,14,0,0,375,377,3,2,1,0,376,375,1,0,0,0,377,
378,1,0,0,0,378,376,1,0,0,0,378,379,1,0,0,0,379,380,1,0,0,0,380,381,5,15,
0,0,381,5,1,0,0,0,382,385,3,312,156,0,383,386,3,8,4,0,384,386,3,10,5,0,385,
383,1,0,0,0,385,384,1,0,0,0,386,7,1,0,0,0,387,388,3,12,6,0,388,389,5,14,
0,0,389,390,3,14,7,0,390,391,5,15,0,0,391,9,1,0,0,0,392,394,7,0,0,0,393,
392,1,0,0,0,393,394,1,0,0,0,394,395,1,0,0,0,395,396,5,97,0,0,396,397,3,320,
160,0,397,11,1,0,0,0,398,400,7,0,0,0,399,398,1,0,0,0,399,400,1,0,0,0,400,
401,1,0,0,0,401,402,5,97,0,0,402,404,3,320,160,0,403,405,3,18,9,0,404,403,
1,0,0,0,404,405,1,0,0,0,405,13,1,0,0,0,406,408,3,16,8,0,407,406,1,0,0,0,
408,411,1,0,0,0,409,407,1,0,0,0,409,410,1,0,0,0,410,15,1,0,0,0,411,409,1,
0,0,0,412,434,3,312,156,0,413,414,3,82,41,0,414,415,5,11,0,0,415,435,1,0,
0,0,416,417,3,54,27,0,417,418,5,11,0,0,418,435,1,0,0,0,419,420,3,206,103,
0,420,421,5,11,0,0,421,435,1,0,0,0,422,423,3,204,102,0,423,424,5,11,0,0,
424,435,1,0,0,0,425,426,3,208,104,0,426,427,5,11,0,0,427,435,1,0,0,0,428,
429,3,238,119,0,429,430,5,11,0,0,430,435,1,0,0,0,431,432,3,240,120,0,432,
433,5,11,0,0,433,435,1,0,0,0,434,413,1,0,0,0,434,416,1,0,0,0,434,419,1,0,
0,0,434,422,1,0,0,0,434,425,1,0,0,0,434,428,1,0,0,0,434,431,1,0,0,0,435,
17,1,0,0,0,436,437,5,12,0,0,437,442,3,20,10,0,438,439,5,13,0,0,439,441,3,
20,10,0,440,438,1,0,0,0,441,444,1,0,0,0,442,440,1,0,0,0,442,443,1,0,0,0,
443,19,1,0,0,0,444,442,1,0,0,0,445,446,3,22,11,0,446,21,1,0,0,0,447,448,
3,312,156,0,448,449,3,24,12,0,449,23,1,0,0,0,450,452,5,32,0,0,451,450,1,
0,0,0,451,452,1,0,0,0,452,453,1,0,0,0,453,458,5,113,0,0,454,455,5,32,0,0,
455,457,5,113,0,0,456,454,1,0,0,0,457,460,1,0,0,0,458,456,1,0,0,0,458,459,
1,0,0,0,459,25,1,0,0,0,460,458,1,0,0,0,461,466,3,312,156,0,462,467,3,34,
17,0,463,467,3,32,16,0,464,467,3,30,15,0,465,467,3,28,14,0,466,462,1,0,0,
0,466,463,1,0,0,0,466,464,1,0,0,0,466,465,1,0,0,0,467,27,1,0,0,0,468,470,
5,87,0,0,469,468,1,0,0,0,469,470,1,0,0,0,470,471,1,0,0,0,471,472,5,72,0,
0,472,473,3,320,160,0,473,29,1,0,0,0,474,475,5,72,0,0,475,476,3,320,160,
0,476,477,3,86,43,0,477,31,1,0,0,0,478,479,5,87,0,0,479,480,5,72,0,0,480,
481,3,320,160,0,481,482,3,38,19,0,482,486,5,14,0,0,483,485,3,16,8,0,484,
483,1,0,0,0,485,488,1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,489,1,0,
0,0,488,486,1,0,0,0,489,490,5,15,0,0,490,33,1,0,0,0,491,492,3,36,18,0,492,
496,5,14,0,0,493,495,3,42,21,0,494,493,1,0,0,0,495,498,1,0,0,0,496,494,1,
0,0,0,496,497,1,0,0,0,497,499,1,0,0,0,498,496,1,0,0,0,499,500,5,15,0,0,500,
35,1,0,0,0,501,503,5,45,0,0,502,501,1,0,0,0,502,503,1,0,0,0,503,504,1,0,
0,0,504,505,5,72,0,0,505,506,3,320,160,0,506,507,3,38,19,0,507,37,1,0,0,
0,508,510,5,12,0,0,509,511,5,76,0,0,510,509,1,0,0,0,510,511,1,0,0,0,511,
512,1,0,0,0,512,517,3,40,20,0,513,514,5,13,0,0,514,516,3,40,20,0,515,513,
1,0,0,0,516,519,1,0,0,0,517,515,1,0,0,0,517,518,1,0,0,0,518,521,1,0,0,0,
519,517,1,0,0,0,520,508,1,0,0,0,520,521,1,0,0,0,521,531,1,0,0,0,522,523,
5,73,0,0,523,528,3,20,10,0,524,525,5,13,0,0,525,527,3,20,10,0,526,524,1,
0,0,0,527,530,1,0,0,0,528,526,1,0,0,0,528,529,1,0,0,0,529,532,1,0,0,0,530,
528,1,0,0,0,531,522,1,0,0,0,531,532,1,0,0,0,532,39,1,0,0,0,533,534,3,22,
11,0,534,41,1,0,0,0,535,539,3,16,8,0,536,539,3,44,22,0,537,539,3,46,23,0,
538,535,1,0,0,0,538,536,1,0,0,0,538,537,1,0,0,0,539,43,1,0,0,0,540,545,3,
312,156,0,541,542,5,60,0,0,542,546,3,312,156,0,543,544,5,55,0,0,544,546,
3,312,156,0,545,541,1,0,0,0,545,543,1,0,0,0,546,547,1,0,0,0,547,548,3,86,
43,0,548,549,3,100,50,0,549,550,5,11,0,0,550,45,1,0,0,0,551,552,3,312,156,
0,552,553,5,67,0,0,553,554,3,320,160,0,554,556,5,16,0,0,555,557,3,48,24,
0,556,555,1,0,0,0,556,557,1,0,0,0,557,558,1,0,0,0,558,560,5,17,0,0,559,561,
3,220,110,0,560,559,1,0,0,0,560,561,1,0,0,0,561,562,1,0,0,0,562,563,5,11,
0,0,563,47,1,0,0,0,564,569,3,50,25,0,565,566,5,13,0,0,566,568,3,50,25,0,
567,565,1,0,0,0,568,571,1,0,0,0,569,567,1,0,0,0,569,570,1,0,0,0,570,49,1,
0,0,0,571,569,1,0,0,0,572,573,3,312,156,0,573,574,3,52,26,0,574,575,3,312,
156,0,575,576,3,224,112,0,576,577,3,312,156,0,577,578,3,104,52,0,578,51,
1,0,0,0,579,580,5,58,0,0,580,53,1,0,0,0,581,582,5,70,0,0,582,583,3,56,28,
0,583,584,3,320,160,0,584,585,5,30,0,0,585,586,3,58,29,0,586,55,1,0,0,0,
587,598,3,312,156,0,588,599,3,110,55,0,589,599,3,132,66,0,590,599,3,134,
67,0,591,599,3,136,68,0,592,599,3,108,54,0,593,599,3,196,98,0,594,599,3,
198,99,0,595,599,3,228,114,0,596,599,3,24,12,0,597,599,3,138,69,0,598,588,
1,0,0,0,598,589,1,0,0,0,598,590,1,0,0,0,598,591,1,0,0,0,598,592,1,0,0,0,
598,593,1,0,0,0,598,594,1,0,0,0,598,595,1,0,0,0,598,596,1,0,0,0,598,597,
1,0,0,0,599,57,1,0,0,0,600,601,3,60,30,0,601,59,1,0,0,0,602,607,3,62,31,
0,603,604,5,29,0,0,604,606,3,62,31,0,605,603,1,0,0,0,606,609,1,0,0,0,607,
605,1,0,0,0,607,608,1,0,0,0,608,61,1,0,0,0,609,607,1,0,0,0,610,615,3,64,
32,0,611,612,5,27,0,0,612,614,3,64,32,0,613,611,1,0,0,0,614,617,1,0,0,0,
615,613,1,0,0,0,615,616,1,0,0,0,616,63,1,0,0,0,617,615,1,0,0,0,618,623,3,
66,33,0,619,620,5,28,0,0,620,622,3,66,33,0,621,619,1,0,0,0,622,625,1,0,0,
0,623,621,1,0,0,0,623,624,1,0,0,0,624,65,1,0,0,0,625,623,1,0,0,0,626,631,
3,68,34,0,627,628,7,1,0,0,628,630,3,68,34,0,629,627,1,0,0,0,630,633,1,0,
0,0,631,629,1,0,0,0,631,632,1,0,0,0,632,67,1,0,0,0,633,631,1,0,0,0,634,639,
3,70,35,0,635,636,7,2,0,0,636,638,3,70,35,0,637,635,1,0,0,0,638,641,1,0,
0,0,639,637,1,0,0,0,639,640,1,0,0,0,640,69,1,0,0,0,641,639,1,0,0,0,642,647,
3,72,36,0,643,644,7,3,0,0,644,646,3,72,36,0,645,643,1,0,0,0,646,649,1,0,
0,0,647,645,1,0,0,0,647,648,1,0,0,0,648,71,1,0,0,0,649,647,1,0,0,0,650,651,
3,74,37,0,651,652,3,76,38,0,652,655,1,0,0,0,653,655,3,76,38,0,654,650,1,
0,0,0,654,653,1,0,0,0,655,73,1,0,0,0,656,657,7,4,0,0,657,75,1,0,0,0,658,
665,3,24,12,0,659,665,3,78,39,0,660,661,5,16,0,0,661,662,3,58,29,0,662,663,
5,17,0,0,663,665,1,0,0,0,664,658,1,0,0,0,664,659,1,0,0,0,664,660,1,0,0,0,
665,77,1,0,0,0,666,667,7,5,0,0,667,79,1,0,0,0,668,669,3,58,29,0,669,81,1,
0,0,0,670,671,5,42,0,0,671,672,3,312,156,0,672,673,3,84,42,0,673,685,1,0,
0,0,674,685,3,168,84,0,675,685,3,174,87,0,676,685,3,186,93,0,677,685,3,158,
79,0,678,685,3,164,82,0,679,680,5,50,0,0,680,681,3,312,156,0,681,682,3,104,
52,0,682,685,1,0,0,0,683,685,3,232,116,0,684,670,1,0,0,0,684,674,1,0,0,0,
684,675,1,0,0,0,684,676,1,0,0,0,684,677,1,0,0,0,684,678,1,0,0,0,684,679,
1,0,0,0,684,683,1,0,0,0,685,83,1,0,0,0,686,687,3,86,43,0,687,688,3,100,50,
0,688,85,1,0,0,0,689,692,3,88,44,0,690,692,3,96,48,0,691,689,1,0,0,0,691,
690,1,0,0,0,692,87,1,0,0,0,693,697,3,92,46,0,694,697,3,94,47,0,695,697,3,
24,12,0,696,693,1,0,0,0,696,694,1,0,0,0,696,695,1,0,0,0,697,89,1,0,0,0,698,
702,3,110,55,0,699,702,3,136,68,0,700,702,3,138,69,0,701,698,1,0,0,0,701,
699,1,0,0,0,701,700,1,0,0,0,702,91,1,0,0,0,703,713,3,108,54,0,704,713,3,
110,55,0,705,713,3,132,66,0,706,713,3,134,67,0,707,713,3,136,68,0,708,713,
3,138,69,0,709,713,3,140,70,0,710,713,3,142,71,0,711,713,3,230,115,0,712,
703,1,0,0,0,712,704,1,0,0,0,712,705,1,0,0,0,712,706,1,0,0,0,712,707,1,0,
0,0,712,708,1,0,0,0,712,709,1,0,0,0,712,710,1,0,0,0,712,711,1,0,0,0,713,
93,1,0,0,0,714,721,3,190,95,0,715,721,3,192,96,0,716,721,3,194,97,0,717,
721,3,196,98,0,718,721,3,198,99,0,719,721,3,226,113,0,720,714,1,0,0,0,720,
715,1,0,0,0,720,716,1,0,0,0,720,717,1,0,0,0,720,718,1,0,0,0,720,719,1,0,
0,0,721,95,1,0,0,0,722,728,3,168,84,0,723,728,3,174,87,0,724,728,3,186,93,
0,725,728,3,158,79,0,726,728,3,164,82,0,727,722,1,0,0,0,727,723,1,0,0,0,
727,724,1,0,0,0,727,725,1,0,0,0,727,726,1,0,0,0,728,97,1,0,0,0,729,734,3,
320,160,0,730,731,5,13,0,0,731,733,3,320,160,0,732,730,1,0,0,0,733,736,1,
0,0,0,734,732,1,0,0,0,734,735,1,0,0,0,735,99,1,0,0,0,736,734,1,0,0,0,737,
742,3,102,51,0,738,739,5,13,0,0,739,741,3,102,51,0,740,738,1,0,0,0,741,744,
1,0,0,0,742,740,1,0,0,0,742,743,1,0,0,0,743,101,1,0,0,0,744,742,1,0,0,0,
745,748,3,312,156,0,746,749,3,104,52,0,747,749,3,106,53,0,748,746,1,0,0,
0,748,747,1,0,0,0,749,103,1,0,0,0,750,751,5,113,0,0,751,105,1,0,0,0,752,
753,3,200,100,0,753,107,1,0,0,0,754,759,5,84,0,0,755,759,5,91,0,0,756,757,
5,62,0,0,757,759,5,91,0,0,758,754,1,0,0,0,758,755,1,0,0,0,758,756,1,0,0,
0,759,109,1,0,0,0,760,763,3,112,56,0,761,763,3,122,61,0,762,760,1,0,0,0,
762,761,1,0,0,0,763,111,1,0,0,0,764,769,3,116,58,0,765,769,3,118,59,0,766,
769,3,120,60,0,767,769,3,114,57,0,768,764,1,0,0,0,768,765,1,0,0,0,768,766,
1,0,0,0,768,767,1,0,0,0,769,113,1,0,0,0,770,771,5,104,0,0,771,115,1,0,0,
0,772,773,7,6,0,0,773,117,1,0,0,0,774,775,7,7,0,0,775,119,1,0,0,0,776,777,
5,62,0,0,777,780,5,62,0,0,778,780,5,110,0,0,779,776,1,0,0,0,779,778,1,0,
0,0,780,121,1,0,0,0,781,786,3,126,63,0,782,786,3,128,64,0,783,786,3,130,
65,0,784,786,3,124,62,0,785,781,1,0,0,0,785,782,1,0,0,0,785,783,1,0,0,0,
785,784,1,0,0,0,786,123,1,0,0,0,787,788,5,105,0,0,788,125,1,0,0,0,789,790,
5,77,0,0,790,793,5,61,0,0,791,793,5,107,0,0,792,789,1,0,0,0,792,791,1,0,
0,0,793,127,1,0,0,0,794,795,5,77,0,0,795,798,5,62,0,0,796,798,5,109,0,0,
797,794,1,0,0,0,797,796,1,0,0,0,798,129,1,0,0,0,799,800,5,77,0,0,800,801,
5,62,0,0,801,804,5,62,0,0,802,804,5,111,0,0,803,799,1,0,0,0,803,802,1,0,
0,0,804,131,1,0,0,0,805,806,5,82,0,0,806,133,1,0,0,0,807,808,5,57,0,0,808,
135,1,0,0,0,809,810,5,85,0,0,810,137,1,0,0,0,811,812,5,46,0,0,812,139,1,
0,0,0,813,814,5,81,0,0,814,141,1,0,0,0,815,816,5,75,0,0,816,143,1,0,0,0,
817,820,3,146,73,0,818,820,3,156,78,0,819,817,1,0,0,0,819,818,1,0,0,0,820,
145,1,0,0,0,821,822,3,148,74,0,822,823,5,14,0,0,823,824,3,152,76,0,824,825,
5,15,0,0,825,147,1,0,0,0,826,827,5,112,0,0,827,829,3,320,160,0,828,830,3,
150,75,0,829,828,1,0,0,0,829,830,1,0,0,0,830,149,1,0,0,0,831,832,5,12,0,
0,832,833,3,24,12,0,833,151,1,0,0,0,834,846,3,154,77,0,835,836,3,186,93,
0,836,837,5,11,0,0,837,846,1,0,0,0,838,839,3,54,27,0,839,840,5,11,0,0,840,
846,1,0,0,0,841,842,5,42,0,0,842,843,3,84,42,0,843,844,5,11,0,0,844,846,
1,0,0,0,845,834,1,0,0,0,845,835,1,0,0,0,845,838,1,0,0,0,845,841,1,0,0,0,
846,849,1,0,0,0,847,845,1,0,0,0,847,848,1,0,0,0,848,153,1,0,0,0,849,847,
1,0,0,0,850,851,3,56,28,0,851,854,3,104,52,0,852,853,5,59,0,0,853,855,3,
58,29,0,854,852,1,0,0,0,854,855,1,0,0,0,855,856,1,0,0,0,856,857,5,11,0,0,
857,155,1,0,0,0,858,859,5,112,0,0,859,860,3,24,12,0,860,157,1,0,0,0,861,
862,5,102,0,0,862,865,3,320,160,0,863,864,5,12,0,0,864,866,3,24,12,0,865,
863,1,0,0,0,865,866,1,0,0,0,866,867,1,0,0,0,867,868,5,14,0,0,868,869,3,160,
80,0,869,870,5,15,0,0,870,159,1,0,0,0,871,873,3,162,81,0,872,874,3,98,49,
0,873,872,1,0,0,0,873,874,1,0,0,0,874,875,1,0,0,0,875,876,5,11,0,0,876,878,
1,0,0,0,877,871,1,0,0,0,878,879,1,0,0,0,879,877,1,0,0,0,879,880,1,0,0,0,
880,161,1,0,0,0,881,882,3,312,156,0,882,883,5,101,0,0,883,884,5,22,0,0,884,
887,3,80,40,0,885,886,5,13,0,0,886,888,3,90,45,0,887,885,1,0,0,0,887,888,
1,0,0,0,888,889,1,0,0,0,889,890,5,23,0,0,890,163,1,0,0,0,891,892,5,103,0,
0,892,893,3,320,160,0,893,894,5,14,0,0,894,895,3,166,83,0,895,896,5,15,0,
0,896,165,1,0,0,0,897,902,3,320,160,0,898,899,5,13,0,0,899,901,3,320,160,
0,900,898,1,0,0,0,901,904,1,0,0,0,902,900,1,0,0,0,902,903,1,0,0,0,903,167,
1,0,0,0,904,902,1,0,0,0,905,906,5,49,0,0,906,909,3,320,160,0,907,908,5,12,
0,0,908,910,3,24,12,0,909,907,1,0,0,0,909,910,1,0,0,0,910,911,1,0,0,0,911,
912,5,14,0,0,912,913,3,170,85,0,913,914,5,15,0,0,914,169,1,0,0,0,915,917,
3,172,86,0,916,915,1,0,0,0,917,920,1,0,0,0,918,916,1,0,0,0,918,919,1,0,0,
0,919,171,1,0,0,0,920,918,1,0,0,0,921,922,3,312,156,0,922,923,3,86,43,0,
923,924,3,100,50,0,924,925,5,11,0,0,925,173,1,0,0,0,926,927,5,79,0,0,927,
928,3,320,160,0,928,929,5,40,0,0,929,930,5,16,0,0,930,931,3,312,156,0,931,
932,3,176,88,0,932,933,5,17,0,0,933,934,5,14,0,0,934,935,3,178,89,0,935,
936,5,15,0,0,936,175,1,0,0,0,937,945,3,110,55,0,938,945,3,132,66,0,939,945,
3,134,67,0,940,945,3,138,69,0,941,945,3,136,68,0,942,945,3,186,93,0,943,
945,3,24,12,0,944,937,1,0,0,0,944,938,1,0,0,0,944,939,1,0,0,0,944,940,1,
0,0,0,944,941,1,0,0,0,944,942,1,0,0,0,944,943,1,0,0,0,945,177,1,0,0,0,946,
948,3,180,90,0,947,946,1,0,0,0,948,949,1,0,0,0,949,947,1,0,0,0,949,950,1,
0,0,0,950,179,1,0,0,0,951,953,3,182,91,0,952,951,1,0,0,0,953,954,1,0,0,0,
954,952,1,0,0,0,954,955,1,0,0,0,955,956,1,0,0,0,956,957,3,184,92,0,957,958,
5,11,0,0,958,181,1,0,0,0,959,966,3,312,156,0,960,961,5,83,0,0,961,962,3,
58,29,0,962,963,5,12,0,0,963,967,1,0,0,0,964,965,5,59,0,0,965,967,5,12,0,
0,966,960,1,0,0,0,966,964,1,0,0,0,967,183,1,0,0,0,968,969,3,312,156,0,969,
970,3,86,43,0,970,971,3,102,51,0,971,185,1,0,0,0,972,973,5,63,0,0,973,974,
3,320,160,0,974,975,5,14,0,0,975,980,3,188,94,0,976,977,5,13,0,0,977,979,
3,188,94,0,978,976,1,0,0,0,979,982,1,0,0,0,980,978,1,0,0,0,980,981,1,0,0,
0,981,983,1,0,0,0,982,980,1,0,0,0,983,984,5,15,0,0,984,187,1,0,0,0,985,986,
3,320,160,0,986,189,1,0,0,0,987,988,5,47,0,0,988,989,5,22,0,0,989,990,3,
312,156,0,990,993,3,88,44,0,991,992,5,13,0,0,992,994,3,80,40,0,993,991,1,
0,0,0,993,994,1,0,0,0,994,995,1,0,0,0,995,996,5,23,0,0,996,191,1,0,0,0,997,
998,5,99,0,0,998,999,5,22,0,0,999,1002,3,88,44,0,1000,1001,5,13,0,0,1001,
1003,3,80,40,0,1002,1000,1,0,0,0,1002,1003,1,0,0,0,1003,1004,1,0,0,0,1004,
1005,5,23,0,0,1005,193,1,0,0,0,1006,1007,5,100,0,0,1007,1008,5,22,0,0,1008,
1009,3,88,44,0,1009,1010,5,13,0,0,1010,1013,3,88,44,0,1011,1012,5,13,0,0,
1012,1014,3,80,40,0,1013,1011,1,0,0,0,1013,1014,1,0,0,0,1014,1015,1,0,0,
0,1015,1016,5,23,0,0,1016,195,1,0,0,0,1017,1022,5,39,0,0,1018,1019,5,22,
0,0,1019,1020,3,80,40,0,1020,1021,5,23,0,0,1021,1023,1,0,0,0,1022,1018,1,
0,0,0,1022,1023,1,0,0,0,1023,197,1,0,0,0,1024,1029,5,64,0,0,1025,1026,5,
22,0,0,1026,1027,3,80,40,0,1027,1028,5,23,0,0,1028,1030,1,0,0,0,1029,1025,
1,0,0,0,1029,1030,1,0,0,0,1030,199,1,0,0,0,1031,1033,5,113,0,0,1032,1034,
3,202,101,0,1033,1032,1,0,0,0,1034,1035,1,0,0,0,1035,1033,1,0,0,0,1035,1036,
1,0,0,0,1036,201,1,0,0,0,1037,1038,5,18,0,0,1038,1039,3,80,40,0,1039,1040,
5,19,0,0,1040,203,1,0,0,0,1041,1044,3,242,121,0,1042,1044,3,246,123,0,1043,
1041,1,0,0,0,1043,1042,1,0,0,0,1044,205,1,0,0,0,1045,1046,5,68,0,0,1046,
1047,3,320,160,0,1047,1051,5,14,0,0,1048,1050,3,172,86,0,1049,1048,1,0,0,
0,1050,1053,1,0,0,0,1051,1049,1,0,0,0,1051,1052,1,0,0,0,1052,1054,1,0,0,
0,1053,1051,1,0,0,0,1054,1055,5,15,0,0,1055,207,1,0,0,0,1056,1058,3,210,
105,0,1057,1056,1,0,0,0,1057,1058,1,0,0,0,1058,1059,1,0,0,0,1059,1060,3,
212,106,0,1060,1061,3,320,160,0,1061,1063,3,214,107,0,1062,1064,3,220,110,
0,1063,1062,1,0,0,0,1063,1064,1,0,0,0,1064,1066,1,0,0,0,1065,1067,3,222,
111,0,1066,1065,1,0,0,0,1066,1067,1,0,0,0,1067,209,1,0,0,0,1068,1069,5,80,
0,0,1069,211,1,0,0,0,1070,1073,3,312,156,0,1071,1074,3,224,112,0,1072,1074,
5,54,0,0,1073,1071,1,0,0,0,1073,1072,1,0,0,0,1074,213,1,0,0,0,1075,1084,
5,16,0,0,1076,1081,3,216,108,0,1077,1078,5,13,0,0,1078,1080,3,216,108,0,
1079,1077,1,0,0,0,1080,1083,1,0,0,0,1081,1079,1,0,0,0,1081,1082,1,0,0,0,
1082,1085,1,0,0,0,1083,1081,1,0,0,0,1084,1076,1,0,0,0,1084,1085,1,0,0,0,
1085,1086,1,0,0,0,1086,1087,5,17,0,0,1087,215,1,0,0,0,1088,1089,3,312,156,
0,1089,1090,3,218,109,0,1090,1091,3,312,156,0,1091,1092,3,224,112,0,1092,
1093,3,312,156,0,1093,1094,3,104,52,0,1094,217,1,0,0,0,1095,1096,7,8,0,0,
1096,219,1,0,0,0,1097,1098,5,53,0,0,1098,1099,5,16,0,0,1099,1104,3,22,11,
0,1100,1101,5,13,0,0,1101,1103,3,22,11,0,1102,1100,1,0,0,0,1103,1106,1,0,
0,0,1104,1102,1,0,0,0,1104,1105,1,0,0,0,1105,1107,1,0,0,0,1106,1104,1,0,
0,0,1107,1108,5,17,0,0,1108,221,1,0,0,0,1109,1110,5,65,0,0,1110,1111,5,16,
0,0,1111,1116,5,9,0,0,1112,1113,5,13,0,0,1113,1115,5,9,0,0,1114,1112,1,0,
0,0,1115,1118,1,0,0,0,1116,1114,1,0,0,0,1116,1117,1,0,0,0,1117,1119,1,0,
0,0,1118,1116,1,0,0,0,1119,1120,5,17,0,0,1120,223,1,0,0,0,1121,1126,3,92,
46,0,1122,1126,3,196,98,0,1123,1126,3,198,99,0,1124,1126,3,24,12,0,1125,
1121,1,0,0,0,1125,1122,1,0,0,0,1125,1123,1,0,0,0,1125,1124,1,0,0,0,1126,
225,1,0,0,0,1127,1128,5,78,0,0,1128,1129,5,22,0,0,1129,1130,3,80,40,0,1130,
1131,5,13,0,0,1131,1132,3,80,40,0,1132,1133,5,23,0,0,1133,227,1,0,0,0,1134,
1135,5,78,0,0,1135,229,1,0,0,0,1136,1137,5,71,0,0,1137,231,1,0,0,0,1138,
1139,5,49,0,0,1139,1143,5,113,0,0,1140,1141,5,79,0,0,1141,1143,5,113,0,0,
1142,1138,1,0,0,0,1142,1140,1,0,0,0,1143,233,1,0,0,0,1144,1145,3,312,156,
0,1145,1146,5,48,0,0,1146,1147,3,312,156,0,1147,1148,3,236,118,0,1148,1149,
5,11,0,0,1149,235,1,0,0,0,1150,1153,3,24,12,0,1151,1153,5,9,0,0,1152,1150,
1,0,0,0,1152,1151,1,0,0,0,1153,237,1,0,0,0,1154,1155,5,93,0,0,1155,1156,
3,22,11,0,1156,1157,5,9,0,0,1157,239,1,0,0,0,1158,1159,5,92,0,0,1159,1160,
3,22,11,0,1160,1161,5,9,0,0,1161,241,1,0,0,0,1162,1163,5,51,0,0,1163,1164,
5,94,0,0,1164,1165,3,312,156,0,1165,1166,3,224,112,0,1166,1167,3,244,122,
0,1167,243,1,0,0,0,1168,1169,3,312,156,0,1169,1180,3,104,52,0,1170,1181,
3,220,110,0,1171,1172,5,13,0,0,1172,1173,3,312,156,0,1173,1174,3,104,52,
0,1174,1176,1,0,0,0,1175,1171,1,0,0,0,1176,1179,1,0,0,0,1177,1175,1,0,0,
0,1177,1178,1,0,0,0,1178,1181,1,0,0,0,1179,1177,1,0,0,0,1180,1170,1,0,0,
0,1180,1177,1,0,0,0,1181,245,1,0,0,0,1182,1183,5,94,0,0,1183,1184,3,312,
156,0,1184,1185,3,224,112,0,1185,1186,3,248,124,0,1186,247,1,0,0,0,1187,
1188,3,312,156,0,1188,1199,3,104,52,0,1189,1200,3,250,125,0,1190,1191,5,
13,0,0,1191,1192,3,312,156,0,1192,1193,3,104,52,0,1193,1195,1,0,0,0,1194,
1190,1,0,0,0,1195,1198,1,0,0,0,1196,1194,1,0,0,0,1196,1197,1,0,0,0,1197,
1200,1,0,0,0,1198,1196,1,0,0,0,1199,1189,1,0,0,0,1199,1196,1,0,0,0,1200,
249,1,0,0,0,1201,1203,3,252,126,0,1202,1204,3,254,127,0,1203,1202,1,0,0,
0,1203,1204,1,0,0,0,1204,1207,1,0,0,0,1205,1207,3,254,127,0,1206,1201,1,
0,0,0,1206,1205,1,0,0,0,1207,251,1,0,0,0,1208,1209,5,69,0,0,1209,1210,3,
256,128,0,1210,253,1,0,0,0,1211,1212,5,36,0,0,1212,1213,3,256,128,0,1213,
255,1,0,0,0,1214,1215,5,16,0,0,1215,1220,3,22,11,0,1216,1217,5,13,0,0,1217,
1219,3,22,11,0,1218,1216,1,0,0,0,1219,1222,1,0,0,0,1220,1218,1,0,0,0,1220,
1221,1,0,0,0,1221,1223,1,0,0,0,1222,1220,1,0,0,0,1223,1224,5,17,0,0,1224,
257,1,0,0,0,1225,1228,3,262,131,0,1226,1228,3,260,130,0,1227,1225,1,0,0,
0,1227,1226,1,0,0,0,1228,259,1,0,0,0,1229,1230,5,98,0,0,1230,1231,5,113,
0,0,1231,261,1,0,0,0,1232,1233,3,264,132,0,1233,1234,5,14,0,0,1234,1235,
3,270,135,0,1235,1236,5,15,0,0,1236,263,1,0,0,0,1237,1238,5,98,0,0,1238,
1240,3,320,160,0,1239,1241,3,268,134,0,1240,1239,1,0,0,0,1240,1241,1,0,0,
0,1241,1243,1,0,0,0,1242,1244,3,266,133,0,1243,1242,1,0,0,0,1243,1244,1,
0,0,0,1244,265,1,0,0,0,1245,1246,5,73,0,0,1246,1251,3,22,11,0,1247,1248,
5,13,0,0,1248,1250,3,22,11,0,1249,1247,1,0,0,0,1250,1253,1,0,0,0,1251,1249,
1,0,0,0,1251,1252,1,0,0,0,1252,267,1,0,0,0,1253,1251,1,0,0,0,1254,1255,5,
12,0,0,1255,1256,3,22,11,0,1256,269,1,0,0,0,1257,1259,3,272,136,0,1258,1257,
1,0,0,0,1259,1262,1,0,0,0,1260,1258,1,0,0,0,1260,1261,1,0,0,0,1261,271,1,
0,0,0,1262,1260,1,0,0,0,1263,1282,3,312,156,0,1264,1265,3,274,137,0,1265,
1266,5,11,0,0,1266,1283,1,0,0,0,1267,1268,3,278,139,0,1268,1269,5,11,0,0,
1269,1283,1,0,0,0,1270,1271,3,280,140,0,1271,1272,5,11,0,0,1272,1283,1,0,
0,0,1273,1274,3,282,141,0,1274,1275,5,11,0,0,1275,1283,1,0,0,0,1276,1277,
3,284,142,0,1277,1278,5,11,0,0,1278,1283,1,0,0,0,1279,1280,3,204,102,0,1280,
1281,5,11,0,0,1281,1283,1,0,0,0,1282,1264,1,0,0,0,1282,1267,1,0,0,0,1282,
1270,1,0,0,0,1282,1273,1,0,0,0,1282,1276,1,0,0,0,1282,1279,1,0,0,0,1283,
273,1,0,0,0,1284,1285,5,89,0,0,1285,1286,3,276,138,0,1286,1287,5,113,0,0,
1287,275,1,0,0,0,1288,1291,3,312,156,0,1289,1292,3,24,12,0,1290,1292,5,75,
0,0,1291,1289,1,0,0,0,1291,1290,1,0,0,0,1292,277,1,0,0,0,1293,1295,5,43,
0,0,1294,1296,5,86,0,0,1295,1294,1,0,0,0,1295,1296,1,0,0,0,1296,1297,1,0,
0,0,1297,1298,3,276,138,0,1298,1299,5,113,0,0,1299,279,1,0,0,0,1300,1301,
5,38,0,0,1301,1302,3,22,11,0,1302,1303,5,113,0,0,1303,281,1,0,0,0,1304,1305,
5,41,0,0,1305,1306,3,22,11,0,1306,1307,5,113,0,0,1307,283,1,0,0,0,1308,1309,
5,90,0,0,1309,1310,3,22,11,0,1310,1311,5,113,0,0,1311,285,1,0,0,0,1312,1313,
3,288,144,0,1313,1314,3,294,147,0,1314,287,1,0,0,0,1315,1316,5,66,0,0,1316,
1318,3,320,160,0,1317,1319,3,290,145,0,1318,1317,1,0,0,0,1318,1319,1,0,0,
0,1319,1321,1,0,0,0,1320,1322,3,266,133,0,1321,1320,1,0,0,0,1321,1322,1,
0,0,0,1322,1323,1,0,0,0,1323,1324,5,96,0,0,1324,1326,3,22,11,0,1325,1327,
3,292,146,0,1326,1325,1,0,0,0,1326,1327,1,0,0,0,1327,289,1,0,0,0,1328,1329,
5,12,0,0,1329,1330,3,22,11,0,1330,291,1,0,0,0,1331,1332,5,44,0,0,1332,1333,
3,22,11,0,1333,293,1,0,0,0,1334,1338,5,14,0,0,1335,1337,3,296,148,0,1336,
1335,1,0,0,0,1337,1340,1,0,0,0,1338,1336,1,0,0,0,1338,1339,1,0,0,0,1339,
1341,1,0,0,0,1340,1338,1,0,0,0,1341,1342,5,15,0,0,1342,295,1,0,0,0,1343,
1352,3,16,8,0,1344,1347,3,312,156,0,1345,1348,3,298,149,0,1346,1348,3,300,
150,0,1347,1345,1,0,0,0,1347,1346,1,0,0,0,1348,1349,1,0,0,0,1349,1350,5,
11,0,0,1350,1352,1,0,0,0,1351,1343,1,0,0,0,1351,1344,1,0,0,0,1352,297,1,
0,0,0,1353,1354,5,67,0,0,1354,1355,3,320,160,0,1355,1357,5,16,0,0,1356,1358,
3,48,24,0,1357,1356,1,0,0,0,1357,1358,1,0,0,0,1358,1359,1,0,0,0,1359,1361,
5,17,0,0,1360,1362,3,220,110,0,1361,1360,1,0,0,0,1361,1362,1,0,0,0,1362,
299,1,0,0,0,1363,1364,5,52,0,0,1364,1365,3,320,160,0,1365,1367,5,16,0,0,
1366,1368,3,48,24,0,1367,1366,1,0,0,0,1367,1368,1,0,0,0,1368,1369,1,0,0,
0,1369,1371,5,17,0,0,1370,1372,3,220,110,0,1371,1370,1,0,0,0,1371,1372,1,
0,0,0,1372,301,1,0,0,0,1373,1377,3,308,154,0,1374,1377,3,306,153,0,1375,
1377,3,304,152,0,1376,1373,1,0,0,0,1376,1374,1,0,0,0,1376,1375,1,0,0,0,1377,
303,1,0,0,0,1378,1380,5,87,0,0,1379,1378,1,0,0,0,1379,1380,1,0,0,0,1380,
1381,1,0,0,0,1381,1382,5,56,0,0,1382,1383,5,113,0,0,1383,305,1,0,0,0,1384,
1385,5,87,0,0,1385,1386,5,56,0,0,1386,1387,3,320,160,0,1387,1388,3,38,19,
0,1388,1392,5,14,0,0,1389,1391,3,16,8,0,1390,1389,1,0,0,0,1391,1394,1,0,
0,0,1392,1390,1,0,0,0,1392,1393,1,0,0,0,1393,1395,1,0,0,0,1394,1392,1,0,
0,0,1395,1396,5,15,0,0,1396,307,1,0,0,0,1397,1398,3,310,155,0,1398,1402,
5,14,0,0,1399,1401,3,42,21,0,1400,1399,1,0,0,0,1401,1404,1,0,0,0,1402,1400,
1,0,0,0,1402,1403,1,0,0,0,1403,1405,1,0,0,0,1404,1402,1,0,0,0,1405,1406,
5,15,0,0,1406,309,1,0,0,0,1407,1409,5,45,0,0,1408,1407,1,0,0,0,1408,1409,
1,0,0,0,1409,1410,1,0,0,0,1410,1411,5,56,0,0,1411,1412,3,320,160,0,1412,
1413,3,38,19,0,1413,311,1,0,0,0,1414,1416,3,314,157,0,1415,1414,1,0,0,0,
1416,1419,1,0,0,0,1417,1415,1,0,0,0,1417,1418,1,0,0,0,1418,313,1,0,0,0,1419,
1417,1,0,0,0,1420,1421,5,35,0,0,1421,1426,3,24,12,0,1422,1423,5,16,0,0,1423,
1424,3,316,158,0,1424,1425,5,17,0,0,1425,1427,1,0,0,0,1426,1422,1,0,0,0,
1426,1427,1,0,0,0,1427,315,1,0,0,0,1428,1438,3,58,29,0,1429,1434,3,318,159,
0,1430,1431,5,13,0,0,1431,1433,3,318,159,0,1432,1430,1,0,0,0,1433,1436,1,
0,0,0,1434,1432,1,0,0,0,1434,1435,1,0,0,0,1435,1438,1,0,0,0,1436,1434,1,
0,0,0,1437,1428,1,0,0,0,1437,1429,1,0,0,0,1438,317,1,0,0,0,1439,1440,5,113,
0,0,1440,1441,5,30,0,0,1441,1442,3,58,29,0,1442,319,1,0,0,0,1443,1444,3,
312,156,0,1444,1445,5,113,0,0,1445,321,1,0,0,0,125,325,331,370,378,385,393,
399,404,409,434,442,451,458,466,469,486,496,502,510,517,520,528,531,538,
545,556,560,569,598,607,615,623,631,639,647,654,664,684,691,696,701,712,
720,727,734,742,748,758,762,768,779,785,792,797,803,819,829,845,847,854,
865,873,879,887,902,909,918,944,949,954,966,980,993,1002,1013,1022,1029,
1035,1043,1051,1057,1063,1066,1073,1081,1084,1104,1116,1125,1142,1152,1177,
1180,1196,1199,1203,1206,1220,1227,1240,1243,1251,1260,1282,1291,1295,1318,
1321,1326,1338,1347,1351,1357,1361,1367,1371,1376,1379,1392,1402,1408,1417,
1426,1434,1437];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class IDLParser extends antlr4.Parser {

    static grammarFileName = "IDL.g4";
    static literalNames = [ null, null, null, null, null, null, null, null, 
                            null, null, null, "';'", "':'", "','", "'{'", 
                            "'}'", "'('", "')'", "'['", "']'", "'~'", "'/'", 
                            "'<'", "'>'", "'*'", "'+'", "'-'", "'^'", "'&'", 
                            "'|'", "'='", "'%'", "'::'", "'>>'", "'<<'", 
                            "'@'", "'setraises'", "'out'", "'emits'", "'string'", 
                            "'switch'", "'publishes'", "'typedef'", "'uses'", 
                            "'primarykey'", "'custom'", "'octet'", "'sequence'", 
                            "'import'", "'struct'", "'native'", "'readonly'", 
                            "'finder'", "'raises'", "'void'", "'private'", 
                            "'eventtype'", "'wchar'", "'in'", "'default'", 
                            "'public'", "'short'", "'long'", "'enum'", "'wstring'", 
                            "'context'", "'home'", "'factory'", "'exception'", 
                            "'getraises'", "'const'", "'ValueBase'", "'valuetype'", 
                            "'supports'", "'module'", "'Object'", "'truncatable'", 
                            "'unsigned'", "'fixed'", "'union'", "'oneway'", 
                            "'any'", "'char'", "'case'", "'float'", "'boolean'", 
                            "'multiple'", "'abstract'", "'inout'", "'provides'", 
                            "'consumes'", "'double'", "'typeprefix'", "'typeid'", 
                            "'attribute'", "'local'", "'manages'", "'interface'", 
                            "'component'", "'set'", "'map'", "'bitfield'", 
                            "'bitset'", "'bitmask'", "'int8'", "'uint8'", 
                            "'int16'", "'uint16'", "'int32'", "'uint32'", 
                            "'int64'", "'uint64'", "'@annotation'" ];
    static symbolicNames = [ null, "INTEGER_LITERAL", "OCTAL_LITERAL", "HEX_LITERAL", 
                             "FLOATING_PT_LITERAL", "FIXED_PT_LITERAL", 
                             "WIDE_CHARACTER_LITERAL", "CHARACTER_LITERAL", 
                             "WIDE_STRING_LITERAL", "STRING_LITERAL", "BOOLEAN_LITERAL", 
                             "SEMICOLON", "COLON", "COMMA", "LEFT_BRACE", 
                             "RIGHT_BRACE", "LEFT_BRACKET", "RIGHT_BRACKET", 
                             "LEFT_SQUARE_BRACKET", "RIGHT_SQUARE_BRACKET", 
                             "TILDE", "SLASH", "LEFT_ANG_BRACKET", "RIGHT_ANG_BRACKET", 
                             "STAR", "PLUS", "MINUS", "CARET", "AMPERSAND", 
                             "PIPE", "EQUAL", "PERCENT", "DOUBLE_COLON", 
                             "RIGHT_SHIFT", "LEFT_SHIFT", "AT", "KW_SETRAISES", 
                             "KW_OUT", "KW_EMITS", "KW_STRING", "KW_SWITCH", 
                             "KW_PUBLISHES", "KW_TYPEDEF", "KW_USES", "KW_PRIMARYKEY", 
                             "KW_CUSTOM", "KW_OCTET", "KW_SEQUENCE", "KW_IMPORT", 
                             "KW_STRUCT", "KW_NATIVE", "KW_READONLY", "KW_FINDER", 
                             "KW_RAISES", "KW_VOID", "KW_PRIVATE", "KW_EVENTTYPE", 
                             "KW_WCHAR", "KW_IN", "KW_DEFAULT", "KW_PUBLIC", 
                             "KW_SHORT", "KW_LONG", "KW_ENUM", "KW_WSTRING", 
                             "KW_CONTEXT", "KW_HOME", "KW_FACTORY", "KW_EXCEPTION", 
                             "KW_GETRAISES", "KW_CONST", "KW_VALUEBASE", 
                             "KW_VALUETYPE", "KW_SUPPORTS", "KW_MODULE", 
                             "KW_OBJECT", "KW_TRUNCATABLE", "KW_UNSIGNED", 
                             "KW_FIXED", "KW_UNION", "KW_ONEWAY", "KW_ANY", 
                             "KW_CHAR", "KW_CASE", "KW_FLOAT", "KW_BOOLEAN", 
                             "KW_MULTIPLE", "KW_ABSTRACT", "KW_INOUT", "KW_PROVIDES", 
                             "KW_CONSUMES", "KW_DOUBLE", "KW_TYPEPREFIX", 
                             "KW_TYPEID", "KW_ATTRIBUTE", "KW_LOCAL", "KW_MANAGES", 
                             "KW_INTERFACE", "KW_COMPONENT", "KW_SET", "KW_MAP", 
                             "KW_BITFIELD", "KW_BITSET", "KW_BITMASK", "KW_INT8", 
                             "KW_UINT8", "KW_INT16", "KW_UINT16", "KW_INT32", 
                             "KW_UINT32", "KW_INT64", "KW_UINT64", "KW_AT_ANNOTATION", 
                             "ID", "WS", "COMMENT", "LINE_COMMENT" ];
    static ruleNames = [ "specification", "definition", "module", "interface_or_forward_decl", 
                         "interface_decl", "forward_decl", "interface_header", 
                         "interface_body", "export_", "interface_inheritance_spec", 
                         "interface_name", "a_scoped_name", "scoped_name", 
                         "value", "value_forward_decl", "value_box_decl", 
                         "value_abs_decl", "value_decl", "value_header", 
                         "value_inheritance_spec", "value_name", "value_element", 
                         "state_member", "init_decl", "init_param_decls", 
                         "init_param_decl", "init_param_attribute", "const_decl", 
                         "const_type", "const_exp", "or_expr", "xor_expr", 
                         "and_expr", "shift_expr", "add_expr", "mult_expr", 
                         "unary_expr", "unary_operator", "primary_expr", 
                         "literal", "positive_int_const", "type_decl", "type_declarator", 
                         "type_spec", "simple_type_spec", "bitfield_type_spec", 
                         "base_type_spec", "template_type_spec", "constr_type_spec", 
                         "simple_declarators", "declarators", "declarator", 
                         "simple_declarator", "complex_declarator", "floating_pt_type", 
                         "integer_type", "signed_int", "signed_tiny_int", 
                         "signed_short_int", "signed_long_int", "signed_longlong_int", 
                         "unsigned_int", "unsigned_tiny_int", "unsigned_short_int", 
                         "unsigned_long_int", "unsigned_longlong_int", "char_type", 
                         "wide_char_type", "boolean_type", "octet_type", 
                         "any_type", "object_type", "annotation_decl", "annotation_def", 
                         "annotation_header", "annotation_inheritance_spec", 
                         "annotation_body", "annotation_member", "annotation_forward_dcl", 
                         "bitset_type", "bitfield", "bitfield_spec", "bitmask_type", 
                         "bit_values", "struct_type", "member_list", "member", 
                         "union_type", "switch_type_spec", "switch_body", 
                         "case_stmt", "case_label", "element_spec", "enum_type", 
                         "enumerator", "sequence_type", "set_type", "map_type", 
                         "string_type", "wide_string_type", "array_declarator", 
                         "fixed_array_size", "attr_decl", "except_decl", 
                         "op_decl", "op_attribute", "op_type_spec", "parameter_decls", 
                         "param_decl", "param_attribute", "raises_expr", 
                         "context_expr", "param_type_spec", "fixed_pt_type", 
                         "fixed_pt_const_type", "value_base_type", "constr_forward_decl", 
                         "import_decl", "imported_scope", "type_id_decl", 
                         "type_prefix_decl", "readonly_attr_spec", "readonly_attr_declarator", 
                         "attr_spec", "attr_declarator", "attr_raises_expr", 
                         "get_excep_expr", "set_excep_expr", "exception_list", 
                         "component", "component_forward_decl", "component_decl", 
                         "component_header", "supported_interface_spec", 
                         "component_inheritance_spec", "component_body", 
                         "component_export", "provides_decl", "interface_type", 
                         "uses_decl", "emits_decl", "publishes_decl", "consumes_decl", 
                         "home_decl", "home_header", "home_inheritance_spec", 
                         "primary_key_spec", "home_body", "home_export", 
                         "factory_decl", "finder_decl", "event", "event_forward_decl", 
                         "event_abs_decl", "event_decl", "event_header", 
                         "annapps", "annotation_appl", "annotation_appl_params", 
                         "annotation_appl_param", "identifier" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = IDLParser.ruleNames;
        this.literalNames = IDLParser.literalNames;
        this.symbolicNames = IDLParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	specification() {
	    let localctx = new SpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, IDLParser.RULE_specification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 325;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 322;
	                this.import_decl(); 
	            }
	            this.state = 327;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
	        }

	        this.state = 329; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 328;
	            this.definition();
	            this.state = 331; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (IDLParser.AT - 35)) | (1 << (IDLParser.KW_TYPEDEF - 35)) | (1 << (IDLParser.KW_CUSTOM - 35)) | (1 << (IDLParser.KW_STRUCT - 35)) | (1 << (IDLParser.KW_NATIVE - 35)) | (1 << (IDLParser.KW_EVENTTYPE - 35)) | (1 << (IDLParser.KW_ENUM - 35)) | (1 << (IDLParser.KW_HOME - 35)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (IDLParser.KW_EXCEPTION - 68)) | (1 << (IDLParser.KW_CONST - 68)) | (1 << (IDLParser.KW_VALUETYPE - 68)) | (1 << (IDLParser.KW_MODULE - 68)) | (1 << (IDLParser.KW_UNION - 68)) | (1 << (IDLParser.KW_ABSTRACT - 68)) | (1 << (IDLParser.KW_TYPEPREFIX - 68)) | (1 << (IDLParser.KW_TYPEID - 68)) | (1 << (IDLParser.KW_LOCAL - 68)) | (1 << (IDLParser.KW_INTERFACE - 68)) | (1 << (IDLParser.KW_COMPONENT - 68)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (IDLParser.KW_BITSET - 102)) | (1 << (IDLParser.KW_BITMASK - 102)) | (1 << (IDLParser.KW_AT_ANNOTATION - 102)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	definition() {
	    let localctx = new DefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, IDLParser.RULE_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 333;
	        this.annapps();
	        this.state = 370;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 334;
	            this.type_decl();
	            this.state = 335;
	            this.match(IDLParser.SEMICOLON);
	            break;

	        case 2:
	            this.state = 337;
	            this.const_decl();
	            this.state = 338;
	            this.match(IDLParser.SEMICOLON);
	            break;

	        case 3:
	            this.state = 340;
	            this.except_decl();
	            this.state = 341;
	            this.match(IDLParser.SEMICOLON);
	            break;

	        case 4:
	            this.state = 343;
	            this.interface_or_forward_decl();
	            this.state = 344;
	            this.match(IDLParser.SEMICOLON);
	            break;

	        case 5:
	            this.state = 346;
	            this.module();
	            this.state = 347;
	            this.match(IDLParser.SEMICOLON);
	            break;

	        case 6:
	            this.state = 349;
	            this.value();
	            this.state = 350;
	            this.match(IDLParser.SEMICOLON);
	            break;

	        case 7:
	            this.state = 352;
	            this.type_id_decl();
	            this.state = 353;
	            this.match(IDLParser.SEMICOLON);
	            break;

	        case 8:
	            this.state = 355;
	            this.type_prefix_decl();
	            this.state = 356;
	            this.match(IDLParser.SEMICOLON);
	            break;

	        case 9:
	            this.state = 358;
	            this.event();
	            this.state = 359;
	            this.match(IDLParser.SEMICOLON);
	            break;

	        case 10:
	            this.state = 361;
	            this.component();
	            this.state = 362;
	            this.match(IDLParser.SEMICOLON);
	            break;

	        case 11:
	            this.state = 364;
	            this.home_decl();
	            this.state = 365;
	            this.match(IDLParser.SEMICOLON);
	            break;

	        case 12:
	            this.state = 367;
	            this.annotation_decl();
	            this.state = 368;
	            this.match(IDLParser.SEMICOLON);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	module() {
	    let localctx = new ModuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, IDLParser.RULE_module);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 372;
	        this.match(IDLParser.KW_MODULE);
	        this.state = 373;
	        this.identifier();
	        this.state = 374;
	        this.match(IDLParser.LEFT_BRACE);
	        this.state = 376; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 375;
	            this.definition();
	            this.state = 378; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (IDLParser.AT - 35)) | (1 << (IDLParser.KW_TYPEDEF - 35)) | (1 << (IDLParser.KW_CUSTOM - 35)) | (1 << (IDLParser.KW_STRUCT - 35)) | (1 << (IDLParser.KW_NATIVE - 35)) | (1 << (IDLParser.KW_EVENTTYPE - 35)) | (1 << (IDLParser.KW_ENUM - 35)) | (1 << (IDLParser.KW_HOME - 35)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (IDLParser.KW_EXCEPTION - 68)) | (1 << (IDLParser.KW_CONST - 68)) | (1 << (IDLParser.KW_VALUETYPE - 68)) | (1 << (IDLParser.KW_MODULE - 68)) | (1 << (IDLParser.KW_UNION - 68)) | (1 << (IDLParser.KW_ABSTRACT - 68)) | (1 << (IDLParser.KW_TYPEPREFIX - 68)) | (1 << (IDLParser.KW_TYPEID - 68)) | (1 << (IDLParser.KW_LOCAL - 68)) | (1 << (IDLParser.KW_INTERFACE - 68)) | (1 << (IDLParser.KW_COMPONENT - 68)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (IDLParser.KW_BITSET - 102)) | (1 << (IDLParser.KW_BITMASK - 102)) | (1 << (IDLParser.KW_AT_ANNOTATION - 102)))) !== 0));
	        this.state = 380;
	        this.match(IDLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_or_forward_decl() {
	    let localctx = new Interface_or_forward_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, IDLParser.RULE_interface_or_forward_decl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 382;
	        this.annapps();
	        this.state = 385;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 383;
	            this.interface_decl();
	            break;

	        case 2:
	            this.state = 384;
	            this.forward_decl();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_decl() {
	    let localctx = new Interface_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, IDLParser.RULE_interface_decl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 387;
	        this.interface_header();
	        this.state = 388;
	        this.match(IDLParser.LEFT_BRACE);
	        this.state = 389;
	        this.interface_body();
	        this.state = 390;
	        this.match(IDLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forward_decl() {
	    let localctx = new Forward_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, IDLParser.RULE_forward_decl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 393;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.KW_ABSTRACT || _la===IDLParser.KW_LOCAL) {
	            this.state = 392;
	            _la = this._input.LA(1);
	            if(!(_la===IDLParser.KW_ABSTRACT || _la===IDLParser.KW_LOCAL)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 395;
	        this.match(IDLParser.KW_INTERFACE);
	        this.state = 396;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_header() {
	    let localctx = new Interface_headerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, IDLParser.RULE_interface_header);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 399;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.KW_ABSTRACT || _la===IDLParser.KW_LOCAL) {
	            this.state = 398;
	            _la = this._input.LA(1);
	            if(!(_la===IDLParser.KW_ABSTRACT || _la===IDLParser.KW_LOCAL)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 401;
	        this.match(IDLParser.KW_INTERFACE);
	        this.state = 402;
	        this.identifier();
	        this.state = 404;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.COLON) {
	            this.state = 403;
	            this.interface_inheritance_spec();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_body() {
	    let localctx = new Interface_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, IDLParser.RULE_interface_body);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 409;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (IDLParser.DOUBLE_COLON - 32)) | (1 << (IDLParser.AT - 32)) | (1 << (IDLParser.KW_STRING - 32)) | (1 << (IDLParser.KW_TYPEDEF - 32)) | (1 << (IDLParser.KW_OCTET - 32)) | (1 << (IDLParser.KW_STRUCT - 32)) | (1 << (IDLParser.KW_NATIVE - 32)) | (1 << (IDLParser.KW_READONLY - 32)) | (1 << (IDLParser.KW_VOID - 32)) | (1 << (IDLParser.KW_WCHAR - 32)) | (1 << (IDLParser.KW_SHORT - 32)) | (1 << (IDLParser.KW_LONG - 32)) | (1 << (IDLParser.KW_ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (IDLParser.KW_WSTRING - 64)) | (1 << (IDLParser.KW_EXCEPTION - 64)) | (1 << (IDLParser.KW_CONST - 64)) | (1 << (IDLParser.KW_VALUEBASE - 64)) | (1 << (IDLParser.KW_OBJECT - 64)) | (1 << (IDLParser.KW_UNSIGNED - 64)) | (1 << (IDLParser.KW_UNION - 64)) | (1 << (IDLParser.KW_ONEWAY - 64)) | (1 << (IDLParser.KW_ANY - 64)) | (1 << (IDLParser.KW_CHAR - 64)) | (1 << (IDLParser.KW_FLOAT - 64)) | (1 << (IDLParser.KW_BOOLEAN - 64)) | (1 << (IDLParser.KW_DOUBLE - 64)) | (1 << (IDLParser.KW_TYPEPREFIX - 64)) | (1 << (IDLParser.KW_TYPEID - 64)) | (1 << (IDLParser.KW_ATTRIBUTE - 64)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (IDLParser.KW_BITSET - 102)) | (1 << (IDLParser.KW_BITMASK - 102)) | (1 << (IDLParser.KW_INT8 - 102)) | (1 << (IDLParser.KW_UINT8 - 102)) | (1 << (IDLParser.KW_INT16 - 102)) | (1 << (IDLParser.KW_UINT16 - 102)) | (1 << (IDLParser.KW_INT32 - 102)) | (1 << (IDLParser.KW_UINT32 - 102)) | (1 << (IDLParser.KW_INT64 - 102)) | (1 << (IDLParser.KW_UINT64 - 102)) | (1 << (IDLParser.ID - 102)))) !== 0)) {
	            this.state = 406;
	            this.export_();
	            this.state = 411;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	export_() {
	    let localctx = new Export_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, IDLParser.RULE_export_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 412;
	        this.annapps();
	        this.state = 434;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.KW_TYPEDEF:
	        case IDLParser.KW_STRUCT:
	        case IDLParser.KW_NATIVE:
	        case IDLParser.KW_ENUM:
	        case IDLParser.KW_UNION:
	        case IDLParser.KW_BITSET:
	        case IDLParser.KW_BITMASK:
	            this.state = 413;
	            this.type_decl();
	            this.state = 414;
	            this.match(IDLParser.SEMICOLON);
	            break;
	        case IDLParser.KW_CONST:
	            this.state = 416;
	            this.const_decl();
	            this.state = 417;
	            this.match(IDLParser.SEMICOLON);
	            break;
	        case IDLParser.KW_EXCEPTION:
	            this.state = 419;
	            this.except_decl();
	            this.state = 420;
	            this.match(IDLParser.SEMICOLON);
	            break;
	        case IDLParser.KW_READONLY:
	        case IDLParser.KW_ATTRIBUTE:
	            this.state = 422;
	            this.attr_decl();
	            this.state = 423;
	            this.match(IDLParser.SEMICOLON);
	            break;
	        case IDLParser.DOUBLE_COLON:
	        case IDLParser.AT:
	        case IDLParser.KW_STRING:
	        case IDLParser.KW_OCTET:
	        case IDLParser.KW_VOID:
	        case IDLParser.KW_WCHAR:
	        case IDLParser.KW_SHORT:
	        case IDLParser.KW_LONG:
	        case IDLParser.KW_WSTRING:
	        case IDLParser.KW_VALUEBASE:
	        case IDLParser.KW_OBJECT:
	        case IDLParser.KW_UNSIGNED:
	        case IDLParser.KW_ONEWAY:
	        case IDLParser.KW_ANY:
	        case IDLParser.KW_CHAR:
	        case IDLParser.KW_FLOAT:
	        case IDLParser.KW_BOOLEAN:
	        case IDLParser.KW_DOUBLE:
	        case IDLParser.KW_INT8:
	        case IDLParser.KW_UINT8:
	        case IDLParser.KW_INT16:
	        case IDLParser.KW_UINT16:
	        case IDLParser.KW_INT32:
	        case IDLParser.KW_UINT32:
	        case IDLParser.KW_INT64:
	        case IDLParser.KW_UINT64:
	        case IDLParser.ID:
	            this.state = 425;
	            this.op_decl();
	            this.state = 426;
	            this.match(IDLParser.SEMICOLON);
	            break;
	        case IDLParser.KW_TYPEID:
	            this.state = 428;
	            this.type_id_decl();
	            this.state = 429;
	            this.match(IDLParser.SEMICOLON);
	            break;
	        case IDLParser.KW_TYPEPREFIX:
	            this.state = 431;
	            this.type_prefix_decl();
	            this.state = 432;
	            this.match(IDLParser.SEMICOLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_inheritance_spec() {
	    let localctx = new Interface_inheritance_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, IDLParser.RULE_interface_inheritance_spec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 436;
	        this.match(IDLParser.COLON);
	        this.state = 437;
	        this.interface_name();
	        this.state = 442;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===IDLParser.COMMA) {
	            this.state = 438;
	            this.match(IDLParser.COMMA);
	            this.state = 439;
	            this.interface_name();
	            this.state = 444;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_name() {
	    let localctx = new Interface_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, IDLParser.RULE_interface_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 445;
	        this.a_scoped_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	a_scoped_name() {
	    let localctx = new A_scoped_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, IDLParser.RULE_a_scoped_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 447;
	        this.annapps();
	        this.state = 448;
	        this.scoped_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scoped_name() {
	    let localctx = new Scoped_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, IDLParser.RULE_scoped_name);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 451;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.DOUBLE_COLON) {
	            this.state = 450;
	            this.match(IDLParser.DOUBLE_COLON);
	        }

	        this.state = 453;
	        this.match(IDLParser.ID);
	        this.state = 458;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 454;
	                this.match(IDLParser.DOUBLE_COLON);
	                this.state = 455;
	                this.match(IDLParser.ID); 
	            }
	            this.state = 460;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value() {
	    let localctx = new ValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, IDLParser.RULE_value);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 461;
	        this.annapps();
	        this.state = 466;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 462;
	            this.value_decl();
	            break;

	        case 2:
	            this.state = 463;
	            this.value_abs_decl();
	            break;

	        case 3:
	            this.state = 464;
	            this.value_box_decl();
	            break;

	        case 4:
	            this.state = 465;
	            this.value_forward_decl();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value_forward_decl() {
	    let localctx = new Value_forward_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, IDLParser.RULE_value_forward_decl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 469;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.KW_ABSTRACT) {
	            this.state = 468;
	            this.match(IDLParser.KW_ABSTRACT);
	        }

	        this.state = 471;
	        this.match(IDLParser.KW_VALUETYPE);
	        this.state = 472;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value_box_decl() {
	    let localctx = new Value_box_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, IDLParser.RULE_value_box_decl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 474;
	        this.match(IDLParser.KW_VALUETYPE);
	        this.state = 475;
	        this.identifier();
	        this.state = 476;
	        this.type_spec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value_abs_decl() {
	    let localctx = new Value_abs_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, IDLParser.RULE_value_abs_decl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 478;
	        this.match(IDLParser.KW_ABSTRACT);
	        this.state = 479;
	        this.match(IDLParser.KW_VALUETYPE);
	        this.state = 480;
	        this.identifier();
	        this.state = 481;
	        this.value_inheritance_spec();
	        this.state = 482;
	        this.match(IDLParser.LEFT_BRACE);
	        this.state = 486;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (IDLParser.DOUBLE_COLON - 32)) | (1 << (IDLParser.AT - 32)) | (1 << (IDLParser.KW_STRING - 32)) | (1 << (IDLParser.KW_TYPEDEF - 32)) | (1 << (IDLParser.KW_OCTET - 32)) | (1 << (IDLParser.KW_STRUCT - 32)) | (1 << (IDLParser.KW_NATIVE - 32)) | (1 << (IDLParser.KW_READONLY - 32)) | (1 << (IDLParser.KW_VOID - 32)) | (1 << (IDLParser.KW_WCHAR - 32)) | (1 << (IDLParser.KW_SHORT - 32)) | (1 << (IDLParser.KW_LONG - 32)) | (1 << (IDLParser.KW_ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (IDLParser.KW_WSTRING - 64)) | (1 << (IDLParser.KW_EXCEPTION - 64)) | (1 << (IDLParser.KW_CONST - 64)) | (1 << (IDLParser.KW_VALUEBASE - 64)) | (1 << (IDLParser.KW_OBJECT - 64)) | (1 << (IDLParser.KW_UNSIGNED - 64)) | (1 << (IDLParser.KW_UNION - 64)) | (1 << (IDLParser.KW_ONEWAY - 64)) | (1 << (IDLParser.KW_ANY - 64)) | (1 << (IDLParser.KW_CHAR - 64)) | (1 << (IDLParser.KW_FLOAT - 64)) | (1 << (IDLParser.KW_BOOLEAN - 64)) | (1 << (IDLParser.KW_DOUBLE - 64)) | (1 << (IDLParser.KW_TYPEPREFIX - 64)) | (1 << (IDLParser.KW_TYPEID - 64)) | (1 << (IDLParser.KW_ATTRIBUTE - 64)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (IDLParser.KW_BITSET - 102)) | (1 << (IDLParser.KW_BITMASK - 102)) | (1 << (IDLParser.KW_INT8 - 102)) | (1 << (IDLParser.KW_UINT8 - 102)) | (1 << (IDLParser.KW_INT16 - 102)) | (1 << (IDLParser.KW_UINT16 - 102)) | (1 << (IDLParser.KW_INT32 - 102)) | (1 << (IDLParser.KW_UINT32 - 102)) | (1 << (IDLParser.KW_INT64 - 102)) | (1 << (IDLParser.KW_UINT64 - 102)) | (1 << (IDLParser.ID - 102)))) !== 0)) {
	            this.state = 483;
	            this.export_();
	            this.state = 488;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 489;
	        this.match(IDLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value_decl() {
	    let localctx = new Value_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, IDLParser.RULE_value_decl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 491;
	        this.value_header();
	        this.state = 492;
	        this.match(IDLParser.LEFT_BRACE);
	        this.state = 496;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (IDLParser.DOUBLE_COLON - 32)) | (1 << (IDLParser.AT - 32)) | (1 << (IDLParser.KW_STRING - 32)) | (1 << (IDLParser.KW_TYPEDEF - 32)) | (1 << (IDLParser.KW_OCTET - 32)) | (1 << (IDLParser.KW_STRUCT - 32)) | (1 << (IDLParser.KW_NATIVE - 32)) | (1 << (IDLParser.KW_READONLY - 32)) | (1 << (IDLParser.KW_VOID - 32)) | (1 << (IDLParser.KW_PRIVATE - 32)) | (1 << (IDLParser.KW_WCHAR - 32)) | (1 << (IDLParser.KW_PUBLIC - 32)) | (1 << (IDLParser.KW_SHORT - 32)) | (1 << (IDLParser.KW_LONG - 32)) | (1 << (IDLParser.KW_ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (IDLParser.KW_WSTRING - 64)) | (1 << (IDLParser.KW_FACTORY - 64)) | (1 << (IDLParser.KW_EXCEPTION - 64)) | (1 << (IDLParser.KW_CONST - 64)) | (1 << (IDLParser.KW_VALUEBASE - 64)) | (1 << (IDLParser.KW_OBJECT - 64)) | (1 << (IDLParser.KW_UNSIGNED - 64)) | (1 << (IDLParser.KW_UNION - 64)) | (1 << (IDLParser.KW_ONEWAY - 64)) | (1 << (IDLParser.KW_ANY - 64)) | (1 << (IDLParser.KW_CHAR - 64)) | (1 << (IDLParser.KW_FLOAT - 64)) | (1 << (IDLParser.KW_BOOLEAN - 64)) | (1 << (IDLParser.KW_DOUBLE - 64)) | (1 << (IDLParser.KW_TYPEPREFIX - 64)) | (1 << (IDLParser.KW_TYPEID - 64)) | (1 << (IDLParser.KW_ATTRIBUTE - 64)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (IDLParser.KW_BITSET - 102)) | (1 << (IDLParser.KW_BITMASK - 102)) | (1 << (IDLParser.KW_INT8 - 102)) | (1 << (IDLParser.KW_UINT8 - 102)) | (1 << (IDLParser.KW_INT16 - 102)) | (1 << (IDLParser.KW_UINT16 - 102)) | (1 << (IDLParser.KW_INT32 - 102)) | (1 << (IDLParser.KW_UINT32 - 102)) | (1 << (IDLParser.KW_INT64 - 102)) | (1 << (IDLParser.KW_UINT64 - 102)) | (1 << (IDLParser.ID - 102)))) !== 0)) {
	            this.state = 493;
	            this.value_element();
	            this.state = 498;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 499;
	        this.match(IDLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value_header() {
	    let localctx = new Value_headerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, IDLParser.RULE_value_header);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 502;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.KW_CUSTOM) {
	            this.state = 501;
	            this.match(IDLParser.KW_CUSTOM);
	        }

	        this.state = 504;
	        this.match(IDLParser.KW_VALUETYPE);
	        this.state = 505;
	        this.identifier();
	        this.state = 506;
	        this.value_inheritance_spec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value_inheritance_spec() {
	    let localctx = new Value_inheritance_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, IDLParser.RULE_value_inheritance_spec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 520;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.COLON) {
	            this.state = 508;
	            this.match(IDLParser.COLON);
	            this.state = 510;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===IDLParser.KW_TRUNCATABLE) {
	                this.state = 509;
	                this.match(IDLParser.KW_TRUNCATABLE);
	            }

	            this.state = 512;
	            this.value_name();
	            this.state = 517;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===IDLParser.COMMA) {
	                this.state = 513;
	                this.match(IDLParser.COMMA);
	                this.state = 514;
	                this.value_name();
	                this.state = 519;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 531;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.KW_SUPPORTS) {
	            this.state = 522;
	            this.match(IDLParser.KW_SUPPORTS);
	            this.state = 523;
	            this.interface_name();
	            this.state = 528;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===IDLParser.COMMA) {
	                this.state = 524;
	                this.match(IDLParser.COMMA);
	                this.state = 525;
	                this.interface_name();
	                this.state = 530;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value_name() {
	    let localctx = new Value_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, IDLParser.RULE_value_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 533;
	        this.a_scoped_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value_element() {
	    let localctx = new Value_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, IDLParser.RULE_value_element);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 538;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 535;
	            this.export_();
	            break;

	        case 2:
	            this.state = 536;
	            this.state_member();
	            break;

	        case 3:
	            this.state = 537;
	            this.init_decl();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	state_member() {
	    let localctx = new State_memberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, IDLParser.RULE_state_member);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 540;
	        this.annapps();
	        this.state = 545;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.KW_PUBLIC:
	            this.state = 541;
	            this.match(IDLParser.KW_PUBLIC);
	            this.state = 542;
	            this.annapps();
	            break;
	        case IDLParser.KW_PRIVATE:
	            this.state = 543;
	            this.match(IDLParser.KW_PRIVATE);
	            this.state = 544;
	            this.annapps();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 547;
	        this.type_spec();
	        this.state = 548;
	        this.declarators();
	        this.state = 549;
	        this.match(IDLParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	init_decl() {
	    let localctx = new Init_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, IDLParser.RULE_init_decl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 551;
	        this.annapps();
	        this.state = 552;
	        this.match(IDLParser.KW_FACTORY);
	        this.state = 553;
	        this.identifier();
	        this.state = 554;
	        this.match(IDLParser.LEFT_BRACKET);
	        this.state = 556;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.AT || _la===IDLParser.KW_IN) {
	            this.state = 555;
	            this.init_param_decls();
	        }

	        this.state = 558;
	        this.match(IDLParser.RIGHT_BRACKET);
	        this.state = 560;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.KW_RAISES) {
	            this.state = 559;
	            this.raises_expr();
	        }

	        this.state = 562;
	        this.match(IDLParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	init_param_decls() {
	    let localctx = new Init_param_declsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, IDLParser.RULE_init_param_decls);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 564;
	        this.init_param_decl();
	        this.state = 569;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===IDLParser.COMMA) {
	            this.state = 565;
	            this.match(IDLParser.COMMA);
	            this.state = 566;
	            this.init_param_decl();
	            this.state = 571;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	init_param_decl() {
	    let localctx = new Init_param_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, IDLParser.RULE_init_param_decl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 572;
	        this.annapps();
	        this.state = 573;
	        this.init_param_attribute();
	        this.state = 574;
	        this.annapps();
	        this.state = 575;
	        this.param_type_spec();
	        this.state = 576;
	        this.annapps();
	        this.state = 577;
	        this.simple_declarator();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	init_param_attribute() {
	    let localctx = new Init_param_attributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, IDLParser.RULE_init_param_attribute);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 579;
	        this.match(IDLParser.KW_IN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	const_decl() {
	    let localctx = new Const_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, IDLParser.RULE_const_decl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 581;
	        this.match(IDLParser.KW_CONST);
	        this.state = 582;
	        this.const_type();
	        this.state = 583;
	        this.identifier();
	        this.state = 584;
	        this.match(IDLParser.EQUAL);
	        this.state = 585;
	        this.const_exp();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	const_type() {
	    let localctx = new Const_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, IDLParser.RULE_const_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 587;
	        this.annapps();
	        this.state = 598;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 588;
	            this.integer_type();
	            break;

	        case 2:
	            this.state = 589;
	            this.char_type();
	            break;

	        case 3:
	            this.state = 590;
	            this.wide_char_type();
	            break;

	        case 4:
	            this.state = 591;
	            this.boolean_type();
	            break;

	        case 5:
	            this.state = 592;
	            this.floating_pt_type();
	            break;

	        case 6:
	            this.state = 593;
	            this.string_type();
	            break;

	        case 7:
	            this.state = 594;
	            this.wide_string_type();
	            break;

	        case 8:
	            this.state = 595;
	            this.fixed_pt_const_type();
	            break;

	        case 9:
	            this.state = 596;
	            this.scoped_name();
	            break;

	        case 10:
	            this.state = 597;
	            this.octet_type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	const_exp() {
	    let localctx = new Const_expContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, IDLParser.RULE_const_exp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 600;
	        this.or_expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	or_expr() {
	    let localctx = new Or_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, IDLParser.RULE_or_expr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 602;
	        this.xor_expr();
	        this.state = 607;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===IDLParser.PIPE) {
	            this.state = 603;
	            this.match(IDLParser.PIPE);
	            this.state = 604;
	            this.xor_expr();
	            this.state = 609;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xor_expr() {
	    let localctx = new Xor_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, IDLParser.RULE_xor_expr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 610;
	        this.and_expr();
	        this.state = 615;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===IDLParser.CARET) {
	            this.state = 611;
	            this.match(IDLParser.CARET);
	            this.state = 612;
	            this.and_expr();
	            this.state = 617;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	and_expr() {
	    let localctx = new And_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, IDLParser.RULE_and_expr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 618;
	        this.shift_expr();
	        this.state = 623;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===IDLParser.AMPERSAND) {
	            this.state = 619;
	            this.match(IDLParser.AMPERSAND);
	            this.state = 620;
	            this.shift_expr();
	            this.state = 625;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shift_expr() {
	    let localctx = new Shift_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, IDLParser.RULE_shift_expr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 626;
	        this.add_expr();
	        this.state = 631;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===IDLParser.RIGHT_SHIFT || _la===IDLParser.LEFT_SHIFT) {
	            this.state = 627;
	            _la = this._input.LA(1);
	            if(!(_la===IDLParser.RIGHT_SHIFT || _la===IDLParser.LEFT_SHIFT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 628;
	            this.add_expr();
	            this.state = 633;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	add_expr() {
	    let localctx = new Add_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, IDLParser.RULE_add_expr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 634;
	        this.mult_expr();
	        this.state = 639;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===IDLParser.PLUS || _la===IDLParser.MINUS) {
	            this.state = 635;
	            _la = this._input.LA(1);
	            if(!(_la===IDLParser.PLUS || _la===IDLParser.MINUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 636;
	            this.mult_expr();
	            this.state = 641;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mult_expr() {
	    let localctx = new Mult_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, IDLParser.RULE_mult_expr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 642;
	        this.unary_expr();
	        this.state = 647;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << IDLParser.SLASH) | (1 << IDLParser.STAR) | (1 << IDLParser.PERCENT))) !== 0)) {
	            this.state = 643;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << IDLParser.SLASH) | (1 << IDLParser.STAR) | (1 << IDLParser.PERCENT))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 644;
	            this.unary_expr();
	            this.state = 649;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unary_expr() {
	    let localctx = new Unary_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, IDLParser.RULE_unary_expr);
	    try {
	        this.state = 654;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.TILDE:
	        case IDLParser.PLUS:
	        case IDLParser.MINUS:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 650;
	            this.unary_operator();
	            this.state = 651;
	            this.primary_expr();
	            break;
	        case IDLParser.INTEGER_LITERAL:
	        case IDLParser.OCTAL_LITERAL:
	        case IDLParser.HEX_LITERAL:
	        case IDLParser.FLOATING_PT_LITERAL:
	        case IDLParser.FIXED_PT_LITERAL:
	        case IDLParser.WIDE_CHARACTER_LITERAL:
	        case IDLParser.CHARACTER_LITERAL:
	        case IDLParser.WIDE_STRING_LITERAL:
	        case IDLParser.STRING_LITERAL:
	        case IDLParser.BOOLEAN_LITERAL:
	        case IDLParser.LEFT_BRACKET:
	        case IDLParser.DOUBLE_COLON:
	        case IDLParser.ID:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 653;
	            this.primary_expr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unary_operator() {
	    let localctx = new Unary_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, IDLParser.RULE_unary_operator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 656;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << IDLParser.TILDE) | (1 << IDLParser.PLUS) | (1 << IDLParser.MINUS))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary_expr() {
	    let localctx = new Primary_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, IDLParser.RULE_primary_expr);
	    try {
	        this.state = 664;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.DOUBLE_COLON:
	        case IDLParser.ID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 658;
	            this.scoped_name();
	            break;
	        case IDLParser.INTEGER_LITERAL:
	        case IDLParser.OCTAL_LITERAL:
	        case IDLParser.HEX_LITERAL:
	        case IDLParser.FLOATING_PT_LITERAL:
	        case IDLParser.FIXED_PT_LITERAL:
	        case IDLParser.WIDE_CHARACTER_LITERAL:
	        case IDLParser.CHARACTER_LITERAL:
	        case IDLParser.WIDE_STRING_LITERAL:
	        case IDLParser.STRING_LITERAL:
	        case IDLParser.BOOLEAN_LITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 659;
	            this.literal();
	            break;
	        case IDLParser.LEFT_BRACKET:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 660;
	            this.match(IDLParser.LEFT_BRACKET);
	            this.state = 661;
	            this.const_exp();
	            this.state = 662;
	            this.match(IDLParser.RIGHT_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, IDLParser.RULE_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 666;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << IDLParser.INTEGER_LITERAL) | (1 << IDLParser.OCTAL_LITERAL) | (1 << IDLParser.HEX_LITERAL) | (1 << IDLParser.FLOATING_PT_LITERAL) | (1 << IDLParser.FIXED_PT_LITERAL) | (1 << IDLParser.WIDE_CHARACTER_LITERAL) | (1 << IDLParser.CHARACTER_LITERAL) | (1 << IDLParser.WIDE_STRING_LITERAL) | (1 << IDLParser.STRING_LITERAL) | (1 << IDLParser.BOOLEAN_LITERAL))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	positive_int_const() {
	    let localctx = new Positive_int_constContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, IDLParser.RULE_positive_int_const);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 668;
	        this.const_exp();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_decl() {
	    let localctx = new Type_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, IDLParser.RULE_type_decl);
	    try {
	        this.state = 684;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 670;
	            this.match(IDLParser.KW_TYPEDEF);
	            this.state = 671;
	            this.annapps();
	            this.state = 672;
	            this.type_declarator();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 674;
	            this.struct_type();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 675;
	            this.union_type();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 676;
	            this.enum_type();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 677;
	            this.bitset_type();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 678;
	            this.bitmask_type();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 679;
	            this.match(IDLParser.KW_NATIVE);
	            this.state = 680;
	            this.annapps();
	            this.state = 681;
	            this.simple_declarator();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 683;
	            this.constr_forward_decl();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_declarator() {
	    let localctx = new Type_declaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, IDLParser.RULE_type_declarator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 686;
	        this.type_spec();
	        this.state = 687;
	        this.declarators();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_spec() {
	    let localctx = new Type_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, IDLParser.RULE_type_spec);
	    try {
	        this.state = 691;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.DOUBLE_COLON:
	        case IDLParser.KW_STRING:
	        case IDLParser.KW_OCTET:
	        case IDLParser.KW_SEQUENCE:
	        case IDLParser.KW_WCHAR:
	        case IDLParser.KW_SHORT:
	        case IDLParser.KW_LONG:
	        case IDLParser.KW_WSTRING:
	        case IDLParser.KW_VALUEBASE:
	        case IDLParser.KW_OBJECT:
	        case IDLParser.KW_UNSIGNED:
	        case IDLParser.KW_FIXED:
	        case IDLParser.KW_ANY:
	        case IDLParser.KW_CHAR:
	        case IDLParser.KW_FLOAT:
	        case IDLParser.KW_BOOLEAN:
	        case IDLParser.KW_DOUBLE:
	        case IDLParser.KW_SET:
	        case IDLParser.KW_MAP:
	        case IDLParser.KW_INT8:
	        case IDLParser.KW_UINT8:
	        case IDLParser.KW_INT16:
	        case IDLParser.KW_UINT16:
	        case IDLParser.KW_INT32:
	        case IDLParser.KW_UINT32:
	        case IDLParser.KW_INT64:
	        case IDLParser.KW_UINT64:
	        case IDLParser.ID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 689;
	            this.simple_type_spec();
	            break;
	        case IDLParser.KW_STRUCT:
	        case IDLParser.KW_ENUM:
	        case IDLParser.KW_UNION:
	        case IDLParser.KW_BITSET:
	        case IDLParser.KW_BITMASK:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 690;
	            this.constr_type_spec();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_type_spec() {
	    let localctx = new Simple_type_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, IDLParser.RULE_simple_type_spec);
	    try {
	        this.state = 696;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.KW_OCTET:
	        case IDLParser.KW_WCHAR:
	        case IDLParser.KW_SHORT:
	        case IDLParser.KW_LONG:
	        case IDLParser.KW_VALUEBASE:
	        case IDLParser.KW_OBJECT:
	        case IDLParser.KW_UNSIGNED:
	        case IDLParser.KW_ANY:
	        case IDLParser.KW_CHAR:
	        case IDLParser.KW_FLOAT:
	        case IDLParser.KW_BOOLEAN:
	        case IDLParser.KW_DOUBLE:
	        case IDLParser.KW_INT8:
	        case IDLParser.KW_UINT8:
	        case IDLParser.KW_INT16:
	        case IDLParser.KW_UINT16:
	        case IDLParser.KW_INT32:
	        case IDLParser.KW_UINT32:
	        case IDLParser.KW_INT64:
	        case IDLParser.KW_UINT64:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 693;
	            this.base_type_spec();
	            break;
	        case IDLParser.KW_STRING:
	        case IDLParser.KW_SEQUENCE:
	        case IDLParser.KW_WSTRING:
	        case IDLParser.KW_FIXED:
	        case IDLParser.KW_SET:
	        case IDLParser.KW_MAP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 694;
	            this.template_type_spec();
	            break;
	        case IDLParser.DOUBLE_COLON:
	        case IDLParser.ID:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 695;
	            this.scoped_name();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitfield_type_spec() {
	    let localctx = new Bitfield_type_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, IDLParser.RULE_bitfield_type_spec);
	    try {
	        this.state = 701;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.KW_SHORT:
	        case IDLParser.KW_LONG:
	        case IDLParser.KW_UNSIGNED:
	        case IDLParser.KW_INT8:
	        case IDLParser.KW_UINT8:
	        case IDLParser.KW_INT16:
	        case IDLParser.KW_UINT16:
	        case IDLParser.KW_INT32:
	        case IDLParser.KW_UINT32:
	        case IDLParser.KW_INT64:
	        case IDLParser.KW_UINT64:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 698;
	            this.integer_type();
	            break;
	        case IDLParser.KW_BOOLEAN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 699;
	            this.boolean_type();
	            break;
	        case IDLParser.KW_OCTET:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 700;
	            this.octet_type();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	base_type_spec() {
	    let localctx = new Base_type_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, IDLParser.RULE_base_type_spec);
	    try {
	        this.state = 712;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 703;
	            this.floating_pt_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 704;
	            this.integer_type();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 705;
	            this.char_type();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 706;
	            this.wide_char_type();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 707;
	            this.boolean_type();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 708;
	            this.octet_type();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 709;
	            this.any_type();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 710;
	            this.object_type();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 711;
	            this.value_base_type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	template_type_spec() {
	    let localctx = new Template_type_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, IDLParser.RULE_template_type_spec);
	    try {
	        this.state = 720;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.KW_SEQUENCE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 714;
	            this.sequence_type();
	            break;
	        case IDLParser.KW_SET:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 715;
	            this.set_type();
	            break;
	        case IDLParser.KW_MAP:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 716;
	            this.map_type();
	            break;
	        case IDLParser.KW_STRING:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 717;
	            this.string_type();
	            break;
	        case IDLParser.KW_WSTRING:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 718;
	            this.wide_string_type();
	            break;
	        case IDLParser.KW_FIXED:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 719;
	            this.fixed_pt_type();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constr_type_spec() {
	    let localctx = new Constr_type_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, IDLParser.RULE_constr_type_spec);
	    try {
	        this.state = 727;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.KW_STRUCT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 722;
	            this.struct_type();
	            break;
	        case IDLParser.KW_UNION:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 723;
	            this.union_type();
	            break;
	        case IDLParser.KW_ENUM:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 724;
	            this.enum_type();
	            break;
	        case IDLParser.KW_BITSET:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 725;
	            this.bitset_type();
	            break;
	        case IDLParser.KW_BITMASK:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 726;
	            this.bitmask_type();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_declarators() {
	    let localctx = new Simple_declaratorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, IDLParser.RULE_simple_declarators);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 729;
	        this.identifier();
	        this.state = 734;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===IDLParser.COMMA) {
	            this.state = 730;
	            this.match(IDLParser.COMMA);
	            this.state = 731;
	            this.identifier();
	            this.state = 736;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarators() {
	    let localctx = new DeclaratorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, IDLParser.RULE_declarators);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 737;
	        this.declarator();
	        this.state = 742;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===IDLParser.COMMA) {
	            this.state = 738;
	            this.match(IDLParser.COMMA);
	            this.state = 739;
	            this.declarator();
	            this.state = 744;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarator() {
	    let localctx = new DeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, IDLParser.RULE_declarator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 745;
	        this.annapps();
	        this.state = 748;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 746;
	            this.simple_declarator();
	            break;

	        case 2:
	            this.state = 747;
	            this.complex_declarator();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_declarator() {
	    let localctx = new Simple_declaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, IDLParser.RULE_simple_declarator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 750;
	        this.match(IDLParser.ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	complex_declarator() {
	    let localctx = new Complex_declaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, IDLParser.RULE_complex_declarator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 752;
	        this.array_declarator();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	floating_pt_type() {
	    let localctx = new Floating_pt_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, IDLParser.RULE_floating_pt_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 758;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.KW_FLOAT:
	            this.state = 754;
	            this.match(IDLParser.KW_FLOAT);
	            break;
	        case IDLParser.KW_DOUBLE:
	            this.state = 755;
	            this.match(IDLParser.KW_DOUBLE);
	            break;
	        case IDLParser.KW_LONG:
	            this.state = 756;
	            this.match(IDLParser.KW_LONG);
	            this.state = 757;
	            this.match(IDLParser.KW_DOUBLE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integer_type() {
	    let localctx = new Integer_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, IDLParser.RULE_integer_type);
	    try {
	        this.state = 762;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.KW_SHORT:
	        case IDLParser.KW_LONG:
	        case IDLParser.KW_INT8:
	        case IDLParser.KW_INT16:
	        case IDLParser.KW_INT32:
	        case IDLParser.KW_INT64:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 760;
	            this.signed_int();
	            break;
	        case IDLParser.KW_UNSIGNED:
	        case IDLParser.KW_UINT8:
	        case IDLParser.KW_UINT16:
	        case IDLParser.KW_UINT32:
	        case IDLParser.KW_UINT64:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 761;
	            this.unsigned_int();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signed_int() {
	    let localctx = new Signed_intContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, IDLParser.RULE_signed_int);
	    try {
	        this.state = 768;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 764;
	            this.signed_short_int();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 765;
	            this.signed_long_int();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 766;
	            this.signed_longlong_int();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 767;
	            this.signed_tiny_int();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signed_tiny_int() {
	    let localctx = new Signed_tiny_intContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, IDLParser.RULE_signed_tiny_int);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 770;
	        this.match(IDLParser.KW_INT8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signed_short_int() {
	    let localctx = new Signed_short_intContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, IDLParser.RULE_signed_short_int);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 772;
	        _la = this._input.LA(1);
	        if(!(_la===IDLParser.KW_SHORT || _la===IDLParser.KW_INT16)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signed_long_int() {
	    let localctx = new Signed_long_intContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, IDLParser.RULE_signed_long_int);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 774;
	        _la = this._input.LA(1);
	        if(!(_la===IDLParser.KW_LONG || _la===IDLParser.KW_INT32)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signed_longlong_int() {
	    let localctx = new Signed_longlong_intContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, IDLParser.RULE_signed_longlong_int);
	    try {
	        this.state = 779;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.KW_LONG:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 776;
	            this.match(IDLParser.KW_LONG);
	            this.state = 777;
	            this.match(IDLParser.KW_LONG);
	            break;
	        case IDLParser.KW_INT64:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 778;
	            this.match(IDLParser.KW_INT64);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsigned_int() {
	    let localctx = new Unsigned_intContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, IDLParser.RULE_unsigned_int);
	    try {
	        this.state = 785;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 781;
	            this.unsigned_short_int();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 782;
	            this.unsigned_long_int();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 783;
	            this.unsigned_longlong_int();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 784;
	            this.unsigned_tiny_int();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsigned_tiny_int() {
	    let localctx = new Unsigned_tiny_intContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, IDLParser.RULE_unsigned_tiny_int);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 787;
	        this.match(IDLParser.KW_UINT8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsigned_short_int() {
	    let localctx = new Unsigned_short_intContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, IDLParser.RULE_unsigned_short_int);
	    try {
	        this.state = 792;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.KW_UNSIGNED:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 789;
	            this.match(IDLParser.KW_UNSIGNED);
	            this.state = 790;
	            this.match(IDLParser.KW_SHORT);
	            break;
	        case IDLParser.KW_UINT16:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 791;
	            this.match(IDLParser.KW_UINT16);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsigned_long_int() {
	    let localctx = new Unsigned_long_intContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, IDLParser.RULE_unsigned_long_int);
	    try {
	        this.state = 797;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.KW_UNSIGNED:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 794;
	            this.match(IDLParser.KW_UNSIGNED);
	            this.state = 795;
	            this.match(IDLParser.KW_LONG);
	            break;
	        case IDLParser.KW_UINT32:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 796;
	            this.match(IDLParser.KW_UINT32);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsigned_longlong_int() {
	    let localctx = new Unsigned_longlong_intContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, IDLParser.RULE_unsigned_longlong_int);
	    try {
	        this.state = 803;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.KW_UNSIGNED:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 799;
	            this.match(IDLParser.KW_UNSIGNED);
	            this.state = 800;
	            this.match(IDLParser.KW_LONG);
	            this.state = 801;
	            this.match(IDLParser.KW_LONG);
	            break;
	        case IDLParser.KW_UINT64:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 802;
	            this.match(IDLParser.KW_UINT64);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	char_type() {
	    let localctx = new Char_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, IDLParser.RULE_char_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 805;
	        this.match(IDLParser.KW_CHAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wide_char_type() {
	    let localctx = new Wide_char_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, IDLParser.RULE_wide_char_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 807;
	        this.match(IDLParser.KW_WCHAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boolean_type() {
	    let localctx = new Boolean_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, IDLParser.RULE_boolean_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 809;
	        this.match(IDLParser.KW_BOOLEAN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	octet_type() {
	    let localctx = new Octet_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, IDLParser.RULE_octet_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 811;
	        this.match(IDLParser.KW_OCTET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	any_type() {
	    let localctx = new Any_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, IDLParser.RULE_any_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 813;
	        this.match(IDLParser.KW_ANY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_type() {
	    let localctx = new Object_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, IDLParser.RULE_object_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 815;
	        this.match(IDLParser.KW_OBJECT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation_decl() {
	    let localctx = new Annotation_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, IDLParser.RULE_annotation_decl);
	    try {
	        this.state = 819;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 817;
	            this.annotation_def();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 818;
	            this.annotation_forward_dcl();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation_def() {
	    let localctx = new Annotation_defContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, IDLParser.RULE_annotation_def);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 821;
	        this.annotation_header();
	        this.state = 822;
	        this.match(IDLParser.LEFT_BRACE);
	        this.state = 823;
	        this.annotation_body();
	        this.state = 824;
	        this.match(IDLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation_header() {
	    let localctx = new Annotation_headerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, IDLParser.RULE_annotation_header);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 826;
	        this.match(IDLParser.KW_AT_ANNOTATION);
	        this.state = 827;
	        this.identifier();
	        this.state = 829;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.COLON) {
	            this.state = 828;
	            this.annotation_inheritance_spec();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation_inheritance_spec() {
	    let localctx = new Annotation_inheritance_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, IDLParser.RULE_annotation_inheritance_spec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 831;
	        this.match(IDLParser.COLON);
	        this.state = 832;
	        this.scoped_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation_body() {
	    let localctx = new Annotation_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, IDLParser.RULE_annotation_body);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 847;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (IDLParser.DOUBLE_COLON - 32)) | (1 << (IDLParser.AT - 32)) | (1 << (IDLParser.KW_STRING - 32)) | (1 << (IDLParser.KW_TYPEDEF - 32)) | (1 << (IDLParser.KW_OCTET - 32)) | (1 << (IDLParser.KW_WCHAR - 32)) | (1 << (IDLParser.KW_SHORT - 32)) | (1 << (IDLParser.KW_LONG - 32)) | (1 << (IDLParser.KW_ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (IDLParser.KW_WSTRING - 64)) | (1 << (IDLParser.KW_CONST - 64)) | (1 << (IDLParser.KW_UNSIGNED - 64)) | (1 << (IDLParser.KW_FIXED - 64)) | (1 << (IDLParser.KW_CHAR - 64)) | (1 << (IDLParser.KW_FLOAT - 64)) | (1 << (IDLParser.KW_BOOLEAN - 64)) | (1 << (IDLParser.KW_DOUBLE - 64)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (IDLParser.KW_INT8 - 104)) | (1 << (IDLParser.KW_UINT8 - 104)) | (1 << (IDLParser.KW_INT16 - 104)) | (1 << (IDLParser.KW_UINT16 - 104)) | (1 << (IDLParser.KW_INT32 - 104)) | (1 << (IDLParser.KW_UINT32 - 104)) | (1 << (IDLParser.KW_INT64 - 104)) | (1 << (IDLParser.KW_UINT64 - 104)) | (1 << (IDLParser.ID - 104)))) !== 0)) {
	            this.state = 845;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case IDLParser.DOUBLE_COLON:
	            case IDLParser.AT:
	            case IDLParser.KW_STRING:
	            case IDLParser.KW_OCTET:
	            case IDLParser.KW_WCHAR:
	            case IDLParser.KW_SHORT:
	            case IDLParser.KW_LONG:
	            case IDLParser.KW_WSTRING:
	            case IDLParser.KW_UNSIGNED:
	            case IDLParser.KW_FIXED:
	            case IDLParser.KW_CHAR:
	            case IDLParser.KW_FLOAT:
	            case IDLParser.KW_BOOLEAN:
	            case IDLParser.KW_DOUBLE:
	            case IDLParser.KW_INT8:
	            case IDLParser.KW_UINT8:
	            case IDLParser.KW_INT16:
	            case IDLParser.KW_UINT16:
	            case IDLParser.KW_INT32:
	            case IDLParser.KW_UINT32:
	            case IDLParser.KW_INT64:
	            case IDLParser.KW_UINT64:
	            case IDLParser.ID:
	                this.state = 834;
	                this.annotation_member();
	                break;
	            case IDLParser.KW_ENUM:
	                this.state = 835;
	                this.enum_type();
	                this.state = 836;
	                this.match(IDLParser.SEMICOLON);
	                break;
	            case IDLParser.KW_CONST:
	                this.state = 838;
	                this.const_decl();
	                this.state = 839;
	                this.match(IDLParser.SEMICOLON);
	                break;
	            case IDLParser.KW_TYPEDEF:
	                this.state = 841;
	                this.match(IDLParser.KW_TYPEDEF);
	                this.state = 842;
	                this.type_declarator();
	                this.state = 843;
	                this.match(IDLParser.SEMICOLON);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 849;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation_member() {
	    let localctx = new Annotation_memberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, IDLParser.RULE_annotation_member);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 850;
	        this.const_type();
	        this.state = 851;
	        this.simple_declarator();
	        this.state = 854;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.KW_DEFAULT) {
	            this.state = 852;
	            this.match(IDLParser.KW_DEFAULT);
	            this.state = 853;
	            this.const_exp();
	        }

	        this.state = 856;
	        this.match(IDLParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation_forward_dcl() {
	    let localctx = new Annotation_forward_dclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, IDLParser.RULE_annotation_forward_dcl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 858;
	        this.match(IDLParser.KW_AT_ANNOTATION);
	        this.state = 859;
	        this.scoped_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitset_type() {
	    let localctx = new Bitset_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, IDLParser.RULE_bitset_type);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 861;
	        this.match(IDLParser.KW_BITSET);
	        this.state = 862;
	        this.identifier();
	        this.state = 865;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.COLON) {
	            this.state = 863;
	            this.match(IDLParser.COLON);
	            this.state = 864;
	            this.scoped_name();
	        }

	        this.state = 867;
	        this.match(IDLParser.LEFT_BRACE);
	        this.state = 868;
	        this.bitfield();
	        this.state = 869;
	        this.match(IDLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitfield() {
	    let localctx = new BitfieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, IDLParser.RULE_bitfield);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 877; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 871;
	            this.bitfield_spec();
	            this.state = 873;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===IDLParser.AT || _la===IDLParser.ID) {
	                this.state = 872;
	                this.simple_declarators();
	            }

	            this.state = 875;
	            this.match(IDLParser.SEMICOLON);
	            this.state = 879; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===IDLParser.AT || _la===IDLParser.KW_BITFIELD);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitfield_spec() {
	    let localctx = new Bitfield_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, IDLParser.RULE_bitfield_spec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 881;
	        this.annapps();
	        this.state = 882;
	        this.match(IDLParser.KW_BITFIELD);
	        this.state = 883;
	        this.match(IDLParser.LEFT_ANG_BRACKET);
	        this.state = 884;
	        this.positive_int_const();
	        this.state = 887;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.COMMA) {
	            this.state = 885;
	            this.match(IDLParser.COMMA);
	            this.state = 886;
	            this.bitfield_type_spec();
	        }

	        this.state = 889;
	        this.match(IDLParser.RIGHT_ANG_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitmask_type() {
	    let localctx = new Bitmask_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, IDLParser.RULE_bitmask_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 891;
	        this.match(IDLParser.KW_BITMASK);
	        this.state = 892;
	        this.identifier();
	        this.state = 893;
	        this.match(IDLParser.LEFT_BRACE);
	        this.state = 894;
	        this.bit_values();
	        this.state = 895;
	        this.match(IDLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bit_values() {
	    let localctx = new Bit_valuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, IDLParser.RULE_bit_values);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 897;
	        this.identifier();
	        this.state = 902;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===IDLParser.COMMA) {
	            this.state = 898;
	            this.match(IDLParser.COMMA);
	            this.state = 899;
	            this.identifier();
	            this.state = 904;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_type() {
	    let localctx = new Struct_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, IDLParser.RULE_struct_type);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 905;
	        this.match(IDLParser.KW_STRUCT);
	        this.state = 906;
	        this.identifier();
	        this.state = 909;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.COLON) {
	            this.state = 907;
	            this.match(IDLParser.COLON);
	            this.state = 908;
	            this.scoped_name();
	        }

	        this.state = 911;
	        this.match(IDLParser.LEFT_BRACE);
	        this.state = 912;
	        this.member_list();
	        this.state = 913;
	        this.match(IDLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	member_list() {
	    let localctx = new Member_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, IDLParser.RULE_member_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 918;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (IDLParser.DOUBLE_COLON - 32)) | (1 << (IDLParser.AT - 32)) | (1 << (IDLParser.KW_STRING - 32)) | (1 << (IDLParser.KW_OCTET - 32)) | (1 << (IDLParser.KW_SEQUENCE - 32)) | (1 << (IDLParser.KW_STRUCT - 32)) | (1 << (IDLParser.KW_WCHAR - 32)) | (1 << (IDLParser.KW_SHORT - 32)) | (1 << (IDLParser.KW_LONG - 32)) | (1 << (IDLParser.KW_ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (IDLParser.KW_WSTRING - 64)) | (1 << (IDLParser.KW_VALUEBASE - 64)) | (1 << (IDLParser.KW_OBJECT - 64)) | (1 << (IDLParser.KW_UNSIGNED - 64)) | (1 << (IDLParser.KW_FIXED - 64)) | (1 << (IDLParser.KW_UNION - 64)) | (1 << (IDLParser.KW_ANY - 64)) | (1 << (IDLParser.KW_CHAR - 64)) | (1 << (IDLParser.KW_FLOAT - 64)) | (1 << (IDLParser.KW_BOOLEAN - 64)) | (1 << (IDLParser.KW_DOUBLE - 64)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (IDLParser.KW_SET - 99)) | (1 << (IDLParser.KW_MAP - 99)) | (1 << (IDLParser.KW_BITSET - 99)) | (1 << (IDLParser.KW_BITMASK - 99)) | (1 << (IDLParser.KW_INT8 - 99)) | (1 << (IDLParser.KW_UINT8 - 99)) | (1 << (IDLParser.KW_INT16 - 99)) | (1 << (IDLParser.KW_UINT16 - 99)) | (1 << (IDLParser.KW_INT32 - 99)) | (1 << (IDLParser.KW_UINT32 - 99)) | (1 << (IDLParser.KW_INT64 - 99)) | (1 << (IDLParser.KW_UINT64 - 99)) | (1 << (IDLParser.ID - 99)))) !== 0)) {
	            this.state = 915;
	            this.member();
	            this.state = 920;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	member() {
	    let localctx = new MemberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, IDLParser.RULE_member);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 921;
	        this.annapps();
	        this.state = 922;
	        this.type_spec();
	        this.state = 923;
	        this.declarators();
	        this.state = 924;
	        this.match(IDLParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	union_type() {
	    let localctx = new Union_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, IDLParser.RULE_union_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 926;
	        this.match(IDLParser.KW_UNION);
	        this.state = 927;
	        this.identifier();
	        this.state = 928;
	        this.match(IDLParser.KW_SWITCH);
	        this.state = 929;
	        this.match(IDLParser.LEFT_BRACKET);
	        this.state = 930;
	        this.annapps();
	        this.state = 931;
	        this.switch_type_spec();
	        this.state = 932;
	        this.match(IDLParser.RIGHT_BRACKET);
	        this.state = 933;
	        this.match(IDLParser.LEFT_BRACE);
	        this.state = 934;
	        this.switch_body();
	        this.state = 935;
	        this.match(IDLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_type_spec() {
	    let localctx = new Switch_type_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, IDLParser.RULE_switch_type_spec);
	    try {
	        this.state = 944;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.KW_SHORT:
	        case IDLParser.KW_LONG:
	        case IDLParser.KW_UNSIGNED:
	        case IDLParser.KW_INT8:
	        case IDLParser.KW_UINT8:
	        case IDLParser.KW_INT16:
	        case IDLParser.KW_UINT16:
	        case IDLParser.KW_INT32:
	        case IDLParser.KW_UINT32:
	        case IDLParser.KW_INT64:
	        case IDLParser.KW_UINT64:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 937;
	            this.integer_type();
	            break;
	        case IDLParser.KW_CHAR:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 938;
	            this.char_type();
	            break;
	        case IDLParser.KW_WCHAR:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 939;
	            this.wide_char_type();
	            break;
	        case IDLParser.KW_OCTET:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 940;
	            this.octet_type();
	            break;
	        case IDLParser.KW_BOOLEAN:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 941;
	            this.boolean_type();
	            break;
	        case IDLParser.KW_ENUM:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 942;
	            this.enum_type();
	            break;
	        case IDLParser.DOUBLE_COLON:
	        case IDLParser.ID:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 943;
	            this.scoped_name();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_body() {
	    let localctx = new Switch_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, IDLParser.RULE_switch_body);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 947; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 946;
	            this.case_stmt();
	            this.state = 949; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===IDLParser.AT || _la===IDLParser.KW_DEFAULT || _la===IDLParser.KW_CASE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	case_stmt() {
	    let localctx = new Case_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, IDLParser.RULE_case_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 952; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 951;
	        		this.case_label();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 954; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,69, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 956;
	        this.element_spec();
	        this.state = 957;
	        this.match(IDLParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	case_label() {
	    let localctx = new Case_labelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, IDLParser.RULE_case_label);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 959;
	        this.annapps();
	        this.state = 966;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.KW_CASE:
	            this.state = 960;
	            this.match(IDLParser.KW_CASE);
	            this.state = 961;
	            this.const_exp();
	            this.state = 962;
	            this.match(IDLParser.COLON);
	            break;
	        case IDLParser.KW_DEFAULT:
	            this.state = 964;
	            this.match(IDLParser.KW_DEFAULT);
	            this.state = 965;
	            this.match(IDLParser.COLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element_spec() {
	    let localctx = new Element_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, IDLParser.RULE_element_spec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 968;
	        this.annapps();
	        this.state = 969;
	        this.type_spec();
	        this.state = 970;
	        this.declarator();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_type() {
	    let localctx = new Enum_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, IDLParser.RULE_enum_type);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 972;
	        this.match(IDLParser.KW_ENUM);
	        this.state = 973;
	        this.identifier();
	        this.state = 974;
	        this.match(IDLParser.LEFT_BRACE);
	        this.state = 975;
	        this.enumerator();
	        this.state = 980;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===IDLParser.COMMA) {
	            this.state = 976;
	            this.match(IDLParser.COMMA);
	            this.state = 977;
	            this.enumerator();
	            this.state = 982;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 983;
	        this.match(IDLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumerator() {
	    let localctx = new EnumeratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, IDLParser.RULE_enumerator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 985;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sequence_type() {
	    let localctx = new Sequence_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, IDLParser.RULE_sequence_type);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 987;
	        this.match(IDLParser.KW_SEQUENCE);
	        this.state = 988;
	        this.match(IDLParser.LEFT_ANG_BRACKET);
	        this.state = 989;
	        this.annapps();
	        this.state = 990;
	        this.simple_type_spec();
	        this.state = 993;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.COMMA) {
	            this.state = 991;
	            this.match(IDLParser.COMMA);
	            this.state = 992;
	            this.positive_int_const();
	        }

	        this.state = 995;
	        this.match(IDLParser.RIGHT_ANG_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_type() {
	    let localctx = new Set_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, IDLParser.RULE_set_type);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 997;
	        this.match(IDLParser.KW_SET);
	        this.state = 998;
	        this.match(IDLParser.LEFT_ANG_BRACKET);
	        this.state = 999;
	        this.simple_type_spec();
	        this.state = 1002;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.COMMA) {
	            this.state = 1000;
	            this.match(IDLParser.COMMA);
	            this.state = 1001;
	            this.positive_int_const();
	        }

	        this.state = 1004;
	        this.match(IDLParser.RIGHT_ANG_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	map_type() {
	    let localctx = new Map_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, IDLParser.RULE_map_type);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1006;
	        this.match(IDLParser.KW_MAP);
	        this.state = 1007;
	        this.match(IDLParser.LEFT_ANG_BRACKET);
	        this.state = 1008;
	        this.simple_type_spec();
	        this.state = 1009;
	        this.match(IDLParser.COMMA);
	        this.state = 1010;
	        this.simple_type_spec();
	        this.state = 1013;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.COMMA) {
	            this.state = 1011;
	            this.match(IDLParser.COMMA);
	            this.state = 1012;
	            this.positive_int_const();
	        }

	        this.state = 1015;
	        this.match(IDLParser.RIGHT_ANG_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string_type() {
	    let localctx = new String_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, IDLParser.RULE_string_type);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1017;
	        this.match(IDLParser.KW_STRING);
	        this.state = 1022;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.LEFT_ANG_BRACKET) {
	            this.state = 1018;
	            this.match(IDLParser.LEFT_ANG_BRACKET);
	            this.state = 1019;
	            this.positive_int_const();
	            this.state = 1020;
	            this.match(IDLParser.RIGHT_ANG_BRACKET);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wide_string_type() {
	    let localctx = new Wide_string_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, IDLParser.RULE_wide_string_type);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1024;
	        this.match(IDLParser.KW_WSTRING);
	        this.state = 1029;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.LEFT_ANG_BRACKET) {
	            this.state = 1025;
	            this.match(IDLParser.LEFT_ANG_BRACKET);
	            this.state = 1026;
	            this.positive_int_const();
	            this.state = 1027;
	            this.match(IDLParser.RIGHT_ANG_BRACKET);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_declarator() {
	    let localctx = new Array_declaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, IDLParser.RULE_array_declarator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1031;
	        this.match(IDLParser.ID);
	        this.state = 1033; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1032;
	            this.fixed_array_size();
	            this.state = 1035; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===IDLParser.LEFT_SQUARE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixed_array_size() {
	    let localctx = new Fixed_array_sizeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, IDLParser.RULE_fixed_array_size);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1037;
	        this.match(IDLParser.LEFT_SQUARE_BRACKET);
	        this.state = 1038;
	        this.positive_int_const();
	        this.state = 1039;
	        this.match(IDLParser.RIGHT_SQUARE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attr_decl() {
	    let localctx = new Attr_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, IDLParser.RULE_attr_decl);
	    try {
	        this.state = 1043;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.KW_READONLY:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1041;
	            this.readonly_attr_spec();
	            break;
	        case IDLParser.KW_ATTRIBUTE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1042;
	            this.attr_spec();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	except_decl() {
	    let localctx = new Except_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, IDLParser.RULE_except_decl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1045;
	        this.match(IDLParser.KW_EXCEPTION);
	        this.state = 1046;
	        this.identifier();
	        this.state = 1047;
	        this.match(IDLParser.LEFT_BRACE);
	        this.state = 1051;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (IDLParser.DOUBLE_COLON - 32)) | (1 << (IDLParser.AT - 32)) | (1 << (IDLParser.KW_STRING - 32)) | (1 << (IDLParser.KW_OCTET - 32)) | (1 << (IDLParser.KW_SEQUENCE - 32)) | (1 << (IDLParser.KW_STRUCT - 32)) | (1 << (IDLParser.KW_WCHAR - 32)) | (1 << (IDLParser.KW_SHORT - 32)) | (1 << (IDLParser.KW_LONG - 32)) | (1 << (IDLParser.KW_ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (IDLParser.KW_WSTRING - 64)) | (1 << (IDLParser.KW_VALUEBASE - 64)) | (1 << (IDLParser.KW_OBJECT - 64)) | (1 << (IDLParser.KW_UNSIGNED - 64)) | (1 << (IDLParser.KW_FIXED - 64)) | (1 << (IDLParser.KW_UNION - 64)) | (1 << (IDLParser.KW_ANY - 64)) | (1 << (IDLParser.KW_CHAR - 64)) | (1 << (IDLParser.KW_FLOAT - 64)) | (1 << (IDLParser.KW_BOOLEAN - 64)) | (1 << (IDLParser.KW_DOUBLE - 64)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (IDLParser.KW_SET - 99)) | (1 << (IDLParser.KW_MAP - 99)) | (1 << (IDLParser.KW_BITSET - 99)) | (1 << (IDLParser.KW_BITMASK - 99)) | (1 << (IDLParser.KW_INT8 - 99)) | (1 << (IDLParser.KW_UINT8 - 99)) | (1 << (IDLParser.KW_INT16 - 99)) | (1 << (IDLParser.KW_UINT16 - 99)) | (1 << (IDLParser.KW_INT32 - 99)) | (1 << (IDLParser.KW_UINT32 - 99)) | (1 << (IDLParser.KW_INT64 - 99)) | (1 << (IDLParser.KW_UINT64 - 99)) | (1 << (IDLParser.ID - 99)))) !== 0)) {
	            this.state = 1048;
	            this.member();
	            this.state = 1053;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1054;
	        this.match(IDLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	op_decl() {
	    let localctx = new Op_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, IDLParser.RULE_op_decl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1057;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.KW_ONEWAY) {
	            this.state = 1056;
	            this.op_attribute();
	        }

	        this.state = 1059;
	        this.op_type_spec();
	        this.state = 1060;
	        this.identifier();
	        this.state = 1061;
	        this.parameter_decls();
	        this.state = 1063;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.KW_RAISES) {
	            this.state = 1062;
	            this.raises_expr();
	        }

	        this.state = 1066;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.KW_CONTEXT) {
	            this.state = 1065;
	            this.context_expr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	op_attribute() {
	    let localctx = new Op_attributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, IDLParser.RULE_op_attribute);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1068;
	        this.match(IDLParser.KW_ONEWAY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	op_type_spec() {
	    let localctx = new Op_type_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, IDLParser.RULE_op_type_spec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1070;
	        this.annapps();
	        this.state = 1073;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.DOUBLE_COLON:
	        case IDLParser.KW_STRING:
	        case IDLParser.KW_OCTET:
	        case IDLParser.KW_WCHAR:
	        case IDLParser.KW_SHORT:
	        case IDLParser.KW_LONG:
	        case IDLParser.KW_WSTRING:
	        case IDLParser.KW_VALUEBASE:
	        case IDLParser.KW_OBJECT:
	        case IDLParser.KW_UNSIGNED:
	        case IDLParser.KW_ANY:
	        case IDLParser.KW_CHAR:
	        case IDLParser.KW_FLOAT:
	        case IDLParser.KW_BOOLEAN:
	        case IDLParser.KW_DOUBLE:
	        case IDLParser.KW_INT8:
	        case IDLParser.KW_UINT8:
	        case IDLParser.KW_INT16:
	        case IDLParser.KW_UINT16:
	        case IDLParser.KW_INT32:
	        case IDLParser.KW_UINT32:
	        case IDLParser.KW_INT64:
	        case IDLParser.KW_UINT64:
	        case IDLParser.ID:
	            this.state = 1071;
	            this.param_type_spec();
	            break;
	        case IDLParser.KW_VOID:
	            this.state = 1072;
	            this.match(IDLParser.KW_VOID);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameter_decls() {
	    let localctx = new Parameter_declsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, IDLParser.RULE_parameter_decls);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1075;
	        this.match(IDLParser.LEFT_BRACKET);
	        this.state = 1084;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (IDLParser.AT - 35)) | (1 << (IDLParser.KW_OUT - 35)) | (1 << (IDLParser.KW_IN - 35)))) !== 0) || _la===IDLParser.KW_INOUT) {
	            this.state = 1076;
	            this.param_decl();
	            this.state = 1081;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===IDLParser.COMMA) {
	                this.state = 1077;
	                this.match(IDLParser.COMMA);
	                this.state = 1078;
	                this.param_decl();
	                this.state = 1083;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1086;
	        this.match(IDLParser.RIGHT_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	param_decl() {
	    let localctx = new Param_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, IDLParser.RULE_param_decl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1088;
	        this.annapps();
	        this.state = 1089;
	        this.param_attribute();
	        this.state = 1090;
	        this.annapps();
	        this.state = 1091;
	        this.param_type_spec();
	        this.state = 1092;
	        this.annapps();
	        this.state = 1093;
	        this.simple_declarator();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	param_attribute() {
	    let localctx = new Param_attributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, IDLParser.RULE_param_attribute);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1095;
	        _la = this._input.LA(1);
	        if(!(_la===IDLParser.KW_OUT || _la===IDLParser.KW_IN || _la===IDLParser.KW_INOUT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	raises_expr() {
	    let localctx = new Raises_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, IDLParser.RULE_raises_expr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1097;
	        this.match(IDLParser.KW_RAISES);
	        this.state = 1098;
	        this.match(IDLParser.LEFT_BRACKET);
	        this.state = 1099;
	        this.a_scoped_name();
	        this.state = 1104;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===IDLParser.COMMA) {
	            this.state = 1100;
	            this.match(IDLParser.COMMA);
	            this.state = 1101;
	            this.a_scoped_name();
	            this.state = 1106;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1107;
	        this.match(IDLParser.RIGHT_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	context_expr() {
	    let localctx = new Context_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, IDLParser.RULE_context_expr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1109;
	        this.match(IDLParser.KW_CONTEXT);
	        this.state = 1110;
	        this.match(IDLParser.LEFT_BRACKET);
	        this.state = 1111;
	        this.match(IDLParser.STRING_LITERAL);
	        this.state = 1116;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===IDLParser.COMMA) {
	            this.state = 1112;
	            this.match(IDLParser.COMMA);
	            this.state = 1113;
	            this.match(IDLParser.STRING_LITERAL);
	            this.state = 1118;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1119;
	        this.match(IDLParser.RIGHT_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	param_type_spec() {
	    let localctx = new Param_type_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, IDLParser.RULE_param_type_spec);
	    try {
	        this.state = 1125;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.KW_OCTET:
	        case IDLParser.KW_WCHAR:
	        case IDLParser.KW_SHORT:
	        case IDLParser.KW_LONG:
	        case IDLParser.KW_VALUEBASE:
	        case IDLParser.KW_OBJECT:
	        case IDLParser.KW_UNSIGNED:
	        case IDLParser.KW_ANY:
	        case IDLParser.KW_CHAR:
	        case IDLParser.KW_FLOAT:
	        case IDLParser.KW_BOOLEAN:
	        case IDLParser.KW_DOUBLE:
	        case IDLParser.KW_INT8:
	        case IDLParser.KW_UINT8:
	        case IDLParser.KW_INT16:
	        case IDLParser.KW_UINT16:
	        case IDLParser.KW_INT32:
	        case IDLParser.KW_UINT32:
	        case IDLParser.KW_INT64:
	        case IDLParser.KW_UINT64:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1121;
	            this.base_type_spec();
	            break;
	        case IDLParser.KW_STRING:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1122;
	            this.string_type();
	            break;
	        case IDLParser.KW_WSTRING:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1123;
	            this.wide_string_type();
	            break;
	        case IDLParser.DOUBLE_COLON:
	        case IDLParser.ID:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1124;
	            this.scoped_name();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixed_pt_type() {
	    let localctx = new Fixed_pt_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, IDLParser.RULE_fixed_pt_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1127;
	        this.match(IDLParser.KW_FIXED);
	        this.state = 1128;
	        this.match(IDLParser.LEFT_ANG_BRACKET);
	        this.state = 1129;
	        this.positive_int_const();
	        this.state = 1130;
	        this.match(IDLParser.COMMA);
	        this.state = 1131;
	        this.positive_int_const();
	        this.state = 1132;
	        this.match(IDLParser.RIGHT_ANG_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixed_pt_const_type() {
	    let localctx = new Fixed_pt_const_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, IDLParser.RULE_fixed_pt_const_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1134;
	        this.match(IDLParser.KW_FIXED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value_base_type() {
	    let localctx = new Value_base_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, IDLParser.RULE_value_base_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1136;
	        this.match(IDLParser.KW_VALUEBASE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constr_forward_decl() {
	    let localctx = new Constr_forward_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, IDLParser.RULE_constr_forward_decl);
	    try {
	        this.state = 1142;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.KW_STRUCT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1138;
	            this.match(IDLParser.KW_STRUCT);
	            this.state = 1139;
	            this.match(IDLParser.ID);
	            break;
	        case IDLParser.KW_UNION:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1140;
	            this.match(IDLParser.KW_UNION);
	            this.state = 1141;
	            this.match(IDLParser.ID);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_decl() {
	    let localctx = new Import_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, IDLParser.RULE_import_decl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1144;
	        this.annapps();
	        this.state = 1145;
	        this.match(IDLParser.KW_IMPORT);
	        this.state = 1146;
	        this.annapps();
	        this.state = 1147;
	        this.imported_scope();
	        this.state = 1148;
	        this.match(IDLParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	imported_scope() {
	    let localctx = new Imported_scopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, IDLParser.RULE_imported_scope);
	    try {
	        this.state = 1152;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.DOUBLE_COLON:
	        case IDLParser.ID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1150;
	            this.scoped_name();
	            break;
	        case IDLParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1151;
	            this.match(IDLParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_id_decl() {
	    let localctx = new Type_id_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, IDLParser.RULE_type_id_decl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1154;
	        this.match(IDLParser.KW_TYPEID);
	        this.state = 1155;
	        this.a_scoped_name();
	        this.state = 1156;
	        this.match(IDLParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_prefix_decl() {
	    let localctx = new Type_prefix_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, IDLParser.RULE_type_prefix_decl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1158;
	        this.match(IDLParser.KW_TYPEPREFIX);
	        this.state = 1159;
	        this.a_scoped_name();
	        this.state = 1160;
	        this.match(IDLParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	readonly_attr_spec() {
	    let localctx = new Readonly_attr_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, IDLParser.RULE_readonly_attr_spec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1162;
	        this.match(IDLParser.KW_READONLY);
	        this.state = 1163;
	        this.match(IDLParser.KW_ATTRIBUTE);
	        this.state = 1164;
	        this.annapps();
	        this.state = 1165;
	        this.param_type_spec();
	        this.state = 1166;
	        this.readonly_attr_declarator();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	readonly_attr_declarator() {
	    let localctx = new Readonly_attr_declaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, IDLParser.RULE_readonly_attr_declarator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1168;
	        this.annapps();
	        this.state = 1169;
	        this.simple_declarator();
	        this.state = 1180;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.KW_RAISES:
	            this.state = 1170;
	            this.raises_expr();
	            break;
	        case IDLParser.SEMICOLON:
	        case IDLParser.COMMA:
	            this.state = 1177;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===IDLParser.COMMA) {
	                this.state = 1171;
	                this.match(IDLParser.COMMA);
	                this.state = 1172;
	                this.annapps();
	                this.state = 1173;
	                this.simple_declarator();
	                this.state = 1179;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attr_spec() {
	    let localctx = new Attr_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, IDLParser.RULE_attr_spec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1182;
	        this.match(IDLParser.KW_ATTRIBUTE);
	        this.state = 1183;
	        this.annapps();
	        this.state = 1184;
	        this.param_type_spec();
	        this.state = 1185;
	        this.attr_declarator();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attr_declarator() {
	    let localctx = new Attr_declaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, IDLParser.RULE_attr_declarator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1187;
	        this.annapps();
	        this.state = 1188;
	        this.simple_declarator();
	        this.state = 1199;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.KW_SETRAISES:
	        case IDLParser.KW_GETRAISES:
	            this.state = 1189;
	            this.attr_raises_expr();
	            break;
	        case IDLParser.SEMICOLON:
	        case IDLParser.COMMA:
	            this.state = 1196;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===IDLParser.COMMA) {
	                this.state = 1190;
	                this.match(IDLParser.COMMA);
	                this.state = 1191;
	                this.annapps();
	                this.state = 1192;
	                this.simple_declarator();
	                this.state = 1198;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attr_raises_expr() {
	    let localctx = new Attr_raises_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, IDLParser.RULE_attr_raises_expr);
	    var _la = 0; // Token type
	    try {
	        this.state = 1206;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.KW_GETRAISES:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1201;
	            this.get_excep_expr();
	            this.state = 1203;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===IDLParser.KW_SETRAISES) {
	                this.state = 1202;
	                this.set_excep_expr();
	            }

	            break;
	        case IDLParser.KW_SETRAISES:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1205;
	            this.set_excep_expr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	get_excep_expr() {
	    let localctx = new Get_excep_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, IDLParser.RULE_get_excep_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1208;
	        this.match(IDLParser.KW_GETRAISES);
	        this.state = 1209;
	        this.exception_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_excep_expr() {
	    let localctx = new Set_excep_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, IDLParser.RULE_set_excep_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1211;
	        this.match(IDLParser.KW_SETRAISES);
	        this.state = 1212;
	        this.exception_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exception_list() {
	    let localctx = new Exception_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, IDLParser.RULE_exception_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1214;
	        this.match(IDLParser.LEFT_BRACKET);
	        this.state = 1215;
	        this.a_scoped_name();
	        this.state = 1220;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===IDLParser.COMMA) {
	            this.state = 1216;
	            this.match(IDLParser.COMMA);
	            this.state = 1217;
	            this.a_scoped_name();
	            this.state = 1222;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1223;
	        this.match(IDLParser.RIGHT_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component() {
	    let localctx = new ComponentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, IDLParser.RULE_component);
	    try {
	        this.state = 1227;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1225;
	            this.component_decl();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1226;
	            this.component_forward_decl();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_forward_decl() {
	    let localctx = new Component_forward_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, IDLParser.RULE_component_forward_decl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1229;
	        this.match(IDLParser.KW_COMPONENT);
	        this.state = 1230;
	        this.match(IDLParser.ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_decl() {
	    let localctx = new Component_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, IDLParser.RULE_component_decl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1232;
	        this.component_header();
	        this.state = 1233;
	        this.match(IDLParser.LEFT_BRACE);
	        this.state = 1234;
	        this.component_body();
	        this.state = 1235;
	        this.match(IDLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_header() {
	    let localctx = new Component_headerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, IDLParser.RULE_component_header);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1237;
	        this.match(IDLParser.KW_COMPONENT);
	        this.state = 1238;
	        this.identifier();
	        this.state = 1240;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.COLON) {
	            this.state = 1239;
	            this.component_inheritance_spec();
	        }

	        this.state = 1243;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.KW_SUPPORTS) {
	            this.state = 1242;
	            this.supported_interface_spec();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	supported_interface_spec() {
	    let localctx = new Supported_interface_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, IDLParser.RULE_supported_interface_spec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1245;
	        this.match(IDLParser.KW_SUPPORTS);
	        this.state = 1246;
	        this.a_scoped_name();
	        this.state = 1251;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===IDLParser.COMMA) {
	            this.state = 1247;
	            this.match(IDLParser.COMMA);
	            this.state = 1248;
	            this.a_scoped_name();
	            this.state = 1253;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_inheritance_spec() {
	    let localctx = new Component_inheritance_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, IDLParser.RULE_component_inheritance_spec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1254;
	        this.match(IDLParser.COLON);
	        this.state = 1255;
	        this.a_scoped_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_body() {
	    let localctx = new Component_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, IDLParser.RULE_component_body);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1260;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (IDLParser.AT - 35)) | (1 << (IDLParser.KW_EMITS - 35)) | (1 << (IDLParser.KW_PUBLISHES - 35)) | (1 << (IDLParser.KW_USES - 35)) | (1 << (IDLParser.KW_READONLY - 35)))) !== 0) || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (IDLParser.KW_PROVIDES - 89)) | (1 << (IDLParser.KW_CONSUMES - 89)) | (1 << (IDLParser.KW_ATTRIBUTE - 89)))) !== 0)) {
	            this.state = 1257;
	            this.component_export();
	            this.state = 1262;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_export() {
	    let localctx = new Component_exportContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, IDLParser.RULE_component_export);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1263;
	        this.annapps();
	        this.state = 1282;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.KW_PROVIDES:
	            this.state = 1264;
	            this.provides_decl();
	            this.state = 1265;
	            this.match(IDLParser.SEMICOLON);
	            break;
	        case IDLParser.KW_USES:
	            this.state = 1267;
	            this.uses_decl();
	            this.state = 1268;
	            this.match(IDLParser.SEMICOLON);
	            break;
	        case IDLParser.KW_EMITS:
	            this.state = 1270;
	            this.emits_decl();
	            this.state = 1271;
	            this.match(IDLParser.SEMICOLON);
	            break;
	        case IDLParser.KW_PUBLISHES:
	            this.state = 1273;
	            this.publishes_decl();
	            this.state = 1274;
	            this.match(IDLParser.SEMICOLON);
	            break;
	        case IDLParser.KW_CONSUMES:
	            this.state = 1276;
	            this.consumes_decl();
	            this.state = 1277;
	            this.match(IDLParser.SEMICOLON);
	            break;
	        case IDLParser.KW_READONLY:
	        case IDLParser.KW_ATTRIBUTE:
	            this.state = 1279;
	            this.attr_decl();
	            this.state = 1280;
	            this.match(IDLParser.SEMICOLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	provides_decl() {
	    let localctx = new Provides_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, IDLParser.RULE_provides_decl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1284;
	        this.match(IDLParser.KW_PROVIDES);
	        this.state = 1285;
	        this.interface_type();
	        this.state = 1286;
	        this.match(IDLParser.ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_type() {
	    let localctx = new Interface_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, IDLParser.RULE_interface_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1288;
	        this.annapps();
	        this.state = 1291;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case IDLParser.DOUBLE_COLON:
	        case IDLParser.ID:
	            this.state = 1289;
	            this.scoped_name();
	            break;
	        case IDLParser.KW_OBJECT:
	            this.state = 1290;
	            this.match(IDLParser.KW_OBJECT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uses_decl() {
	    let localctx = new Uses_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, IDLParser.RULE_uses_decl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1293;
	        this.match(IDLParser.KW_USES);
	        this.state = 1295;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.KW_MULTIPLE) {
	            this.state = 1294;
	            this.match(IDLParser.KW_MULTIPLE);
	        }

	        this.state = 1297;
	        this.interface_type();
	        this.state = 1298;
	        this.match(IDLParser.ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emits_decl() {
	    let localctx = new Emits_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, IDLParser.RULE_emits_decl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1300;
	        this.match(IDLParser.KW_EMITS);
	        this.state = 1301;
	        this.a_scoped_name();
	        this.state = 1302;
	        this.match(IDLParser.ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	publishes_decl() {
	    let localctx = new Publishes_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, IDLParser.RULE_publishes_decl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1304;
	        this.match(IDLParser.KW_PUBLISHES);
	        this.state = 1305;
	        this.a_scoped_name();
	        this.state = 1306;
	        this.match(IDLParser.ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	consumes_decl() {
	    let localctx = new Consumes_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, IDLParser.RULE_consumes_decl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1308;
	        this.match(IDLParser.KW_CONSUMES);
	        this.state = 1309;
	        this.a_scoped_name();
	        this.state = 1310;
	        this.match(IDLParser.ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	home_decl() {
	    let localctx = new Home_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, IDLParser.RULE_home_decl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1312;
	        this.home_header();
	        this.state = 1313;
	        this.home_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	home_header() {
	    let localctx = new Home_headerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, IDLParser.RULE_home_header);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1315;
	        this.match(IDLParser.KW_HOME);
	        this.state = 1316;
	        this.identifier();
	        this.state = 1318;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.COLON) {
	            this.state = 1317;
	            this.home_inheritance_spec();
	        }

	        this.state = 1321;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.KW_SUPPORTS) {
	            this.state = 1320;
	            this.supported_interface_spec();
	        }

	        this.state = 1323;
	        this.match(IDLParser.KW_MANAGES);
	        this.state = 1324;
	        this.a_scoped_name();
	        this.state = 1326;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.KW_PRIMARYKEY) {
	            this.state = 1325;
	            this.primary_key_spec();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	home_inheritance_spec() {
	    let localctx = new Home_inheritance_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, IDLParser.RULE_home_inheritance_spec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1328;
	        this.match(IDLParser.COLON);
	        this.state = 1329;
	        this.a_scoped_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary_key_spec() {
	    let localctx = new Primary_key_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, IDLParser.RULE_primary_key_spec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1331;
	        this.match(IDLParser.KW_PRIMARYKEY);
	        this.state = 1332;
	        this.a_scoped_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	home_body() {
	    let localctx = new Home_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, IDLParser.RULE_home_body);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1334;
	        this.match(IDLParser.LEFT_BRACE);
	        this.state = 1338;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (IDLParser.DOUBLE_COLON - 32)) | (1 << (IDLParser.AT - 32)) | (1 << (IDLParser.KW_STRING - 32)) | (1 << (IDLParser.KW_TYPEDEF - 32)) | (1 << (IDLParser.KW_OCTET - 32)) | (1 << (IDLParser.KW_STRUCT - 32)) | (1 << (IDLParser.KW_NATIVE - 32)) | (1 << (IDLParser.KW_READONLY - 32)) | (1 << (IDLParser.KW_FINDER - 32)) | (1 << (IDLParser.KW_VOID - 32)) | (1 << (IDLParser.KW_WCHAR - 32)) | (1 << (IDLParser.KW_SHORT - 32)) | (1 << (IDLParser.KW_LONG - 32)) | (1 << (IDLParser.KW_ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (IDLParser.KW_WSTRING - 64)) | (1 << (IDLParser.KW_FACTORY - 64)) | (1 << (IDLParser.KW_EXCEPTION - 64)) | (1 << (IDLParser.KW_CONST - 64)) | (1 << (IDLParser.KW_VALUEBASE - 64)) | (1 << (IDLParser.KW_OBJECT - 64)) | (1 << (IDLParser.KW_UNSIGNED - 64)) | (1 << (IDLParser.KW_UNION - 64)) | (1 << (IDLParser.KW_ONEWAY - 64)) | (1 << (IDLParser.KW_ANY - 64)) | (1 << (IDLParser.KW_CHAR - 64)) | (1 << (IDLParser.KW_FLOAT - 64)) | (1 << (IDLParser.KW_BOOLEAN - 64)) | (1 << (IDLParser.KW_DOUBLE - 64)) | (1 << (IDLParser.KW_TYPEPREFIX - 64)) | (1 << (IDLParser.KW_TYPEID - 64)) | (1 << (IDLParser.KW_ATTRIBUTE - 64)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (IDLParser.KW_BITSET - 102)) | (1 << (IDLParser.KW_BITMASK - 102)) | (1 << (IDLParser.KW_INT8 - 102)) | (1 << (IDLParser.KW_UINT8 - 102)) | (1 << (IDLParser.KW_INT16 - 102)) | (1 << (IDLParser.KW_UINT16 - 102)) | (1 << (IDLParser.KW_INT32 - 102)) | (1 << (IDLParser.KW_UINT32 - 102)) | (1 << (IDLParser.KW_INT64 - 102)) | (1 << (IDLParser.KW_UINT64 - 102)) | (1 << (IDLParser.ID - 102)))) !== 0)) {
	            this.state = 1335;
	            this.home_export();
	            this.state = 1340;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1341;
	        this.match(IDLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	home_export() {
	    let localctx = new Home_exportContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, IDLParser.RULE_home_export);
	    try {
	        this.state = 1351;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1343;
	            this.export_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1344;
	            this.annapps();
	            this.state = 1347;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case IDLParser.KW_FACTORY:
	                this.state = 1345;
	                this.factory_decl();
	                break;
	            case IDLParser.KW_FINDER:
	                this.state = 1346;
	                this.finder_decl();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1349;
	            this.match(IDLParser.SEMICOLON);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	factory_decl() {
	    let localctx = new Factory_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, IDLParser.RULE_factory_decl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1353;
	        this.match(IDLParser.KW_FACTORY);
	        this.state = 1354;
	        this.identifier();
	        this.state = 1355;
	        this.match(IDLParser.LEFT_BRACKET);
	        this.state = 1357;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.AT || _la===IDLParser.KW_IN) {
	            this.state = 1356;
	            this.init_param_decls();
	        }

	        this.state = 1359;
	        this.match(IDLParser.RIGHT_BRACKET);
	        this.state = 1361;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.KW_RAISES) {
	            this.state = 1360;
	            this.raises_expr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finder_decl() {
	    let localctx = new Finder_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, IDLParser.RULE_finder_decl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1363;
	        this.match(IDLParser.KW_FINDER);
	        this.state = 1364;
	        this.identifier();
	        this.state = 1365;
	        this.match(IDLParser.LEFT_BRACKET);
	        this.state = 1367;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.AT || _la===IDLParser.KW_IN) {
	            this.state = 1366;
	            this.init_param_decls();
	        }

	        this.state = 1369;
	        this.match(IDLParser.RIGHT_BRACKET);
	        this.state = 1371;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.KW_RAISES) {
	            this.state = 1370;
	            this.raises_expr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	event() {
	    let localctx = new EventContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, IDLParser.RULE_event);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1376;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1373;
	            this.event_decl();
	            break;

	        case 2:
	            this.state = 1374;
	            this.event_abs_decl();
	            break;

	        case 3:
	            this.state = 1375;
	            this.event_forward_decl();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	event_forward_decl() {
	    let localctx = new Event_forward_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, IDLParser.RULE_event_forward_decl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1379;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.KW_ABSTRACT) {
	            this.state = 1378;
	            this.match(IDLParser.KW_ABSTRACT);
	        }

	        this.state = 1381;
	        this.match(IDLParser.KW_EVENTTYPE);
	        this.state = 1382;
	        this.match(IDLParser.ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	event_abs_decl() {
	    let localctx = new Event_abs_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, IDLParser.RULE_event_abs_decl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1384;
	        this.match(IDLParser.KW_ABSTRACT);
	        this.state = 1385;
	        this.match(IDLParser.KW_EVENTTYPE);
	        this.state = 1386;
	        this.identifier();
	        this.state = 1387;
	        this.value_inheritance_spec();
	        this.state = 1388;
	        this.match(IDLParser.LEFT_BRACE);
	        this.state = 1392;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (IDLParser.DOUBLE_COLON - 32)) | (1 << (IDLParser.AT - 32)) | (1 << (IDLParser.KW_STRING - 32)) | (1 << (IDLParser.KW_TYPEDEF - 32)) | (1 << (IDLParser.KW_OCTET - 32)) | (1 << (IDLParser.KW_STRUCT - 32)) | (1 << (IDLParser.KW_NATIVE - 32)) | (1 << (IDLParser.KW_READONLY - 32)) | (1 << (IDLParser.KW_VOID - 32)) | (1 << (IDLParser.KW_WCHAR - 32)) | (1 << (IDLParser.KW_SHORT - 32)) | (1 << (IDLParser.KW_LONG - 32)) | (1 << (IDLParser.KW_ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (IDLParser.KW_WSTRING - 64)) | (1 << (IDLParser.KW_EXCEPTION - 64)) | (1 << (IDLParser.KW_CONST - 64)) | (1 << (IDLParser.KW_VALUEBASE - 64)) | (1 << (IDLParser.KW_OBJECT - 64)) | (1 << (IDLParser.KW_UNSIGNED - 64)) | (1 << (IDLParser.KW_UNION - 64)) | (1 << (IDLParser.KW_ONEWAY - 64)) | (1 << (IDLParser.KW_ANY - 64)) | (1 << (IDLParser.KW_CHAR - 64)) | (1 << (IDLParser.KW_FLOAT - 64)) | (1 << (IDLParser.KW_BOOLEAN - 64)) | (1 << (IDLParser.KW_DOUBLE - 64)) | (1 << (IDLParser.KW_TYPEPREFIX - 64)) | (1 << (IDLParser.KW_TYPEID - 64)) | (1 << (IDLParser.KW_ATTRIBUTE - 64)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (IDLParser.KW_BITSET - 102)) | (1 << (IDLParser.KW_BITMASK - 102)) | (1 << (IDLParser.KW_INT8 - 102)) | (1 << (IDLParser.KW_UINT8 - 102)) | (1 << (IDLParser.KW_INT16 - 102)) | (1 << (IDLParser.KW_UINT16 - 102)) | (1 << (IDLParser.KW_INT32 - 102)) | (1 << (IDLParser.KW_UINT32 - 102)) | (1 << (IDLParser.KW_INT64 - 102)) | (1 << (IDLParser.KW_UINT64 - 102)) | (1 << (IDLParser.ID - 102)))) !== 0)) {
	            this.state = 1389;
	            this.export_();
	            this.state = 1394;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1395;
	        this.match(IDLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	event_decl() {
	    let localctx = new Event_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, IDLParser.RULE_event_decl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1397;
	        this.event_header();
	        this.state = 1398;
	        this.match(IDLParser.LEFT_BRACE);
	        this.state = 1402;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (IDLParser.DOUBLE_COLON - 32)) | (1 << (IDLParser.AT - 32)) | (1 << (IDLParser.KW_STRING - 32)) | (1 << (IDLParser.KW_TYPEDEF - 32)) | (1 << (IDLParser.KW_OCTET - 32)) | (1 << (IDLParser.KW_STRUCT - 32)) | (1 << (IDLParser.KW_NATIVE - 32)) | (1 << (IDLParser.KW_READONLY - 32)) | (1 << (IDLParser.KW_VOID - 32)) | (1 << (IDLParser.KW_PRIVATE - 32)) | (1 << (IDLParser.KW_WCHAR - 32)) | (1 << (IDLParser.KW_PUBLIC - 32)) | (1 << (IDLParser.KW_SHORT - 32)) | (1 << (IDLParser.KW_LONG - 32)) | (1 << (IDLParser.KW_ENUM - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (IDLParser.KW_WSTRING - 64)) | (1 << (IDLParser.KW_FACTORY - 64)) | (1 << (IDLParser.KW_EXCEPTION - 64)) | (1 << (IDLParser.KW_CONST - 64)) | (1 << (IDLParser.KW_VALUEBASE - 64)) | (1 << (IDLParser.KW_OBJECT - 64)) | (1 << (IDLParser.KW_UNSIGNED - 64)) | (1 << (IDLParser.KW_UNION - 64)) | (1 << (IDLParser.KW_ONEWAY - 64)) | (1 << (IDLParser.KW_ANY - 64)) | (1 << (IDLParser.KW_CHAR - 64)) | (1 << (IDLParser.KW_FLOAT - 64)) | (1 << (IDLParser.KW_BOOLEAN - 64)) | (1 << (IDLParser.KW_DOUBLE - 64)) | (1 << (IDLParser.KW_TYPEPREFIX - 64)) | (1 << (IDLParser.KW_TYPEID - 64)) | (1 << (IDLParser.KW_ATTRIBUTE - 64)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (IDLParser.KW_BITSET - 102)) | (1 << (IDLParser.KW_BITMASK - 102)) | (1 << (IDLParser.KW_INT8 - 102)) | (1 << (IDLParser.KW_UINT8 - 102)) | (1 << (IDLParser.KW_INT16 - 102)) | (1 << (IDLParser.KW_UINT16 - 102)) | (1 << (IDLParser.KW_INT32 - 102)) | (1 << (IDLParser.KW_UINT32 - 102)) | (1 << (IDLParser.KW_INT64 - 102)) | (1 << (IDLParser.KW_UINT64 - 102)) | (1 << (IDLParser.ID - 102)))) !== 0)) {
	            this.state = 1399;
	            this.value_element();
	            this.state = 1404;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1405;
	        this.match(IDLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	event_header() {
	    let localctx = new Event_headerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, IDLParser.RULE_event_header);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1408;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.KW_CUSTOM) {
	            this.state = 1407;
	            this.match(IDLParser.KW_CUSTOM);
	        }

	        this.state = 1410;
	        this.match(IDLParser.KW_EVENTTYPE);
	        this.state = 1411;
	        this.identifier();
	        this.state = 1412;
	        this.value_inheritance_spec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annapps() {
	    let localctx = new AnnappsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, IDLParser.RULE_annapps);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1417;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,121,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1414;
	                this.annotation_appl(); 
	            }
	            this.state = 1419;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,121,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation_appl() {
	    let localctx = new Annotation_applContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, IDLParser.RULE_annotation_appl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1420;
	        this.match(IDLParser.AT);
	        this.state = 1421;
	        this.scoped_name();
	        this.state = 1426;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===IDLParser.LEFT_BRACKET) {
	            this.state = 1422;
	            this.match(IDLParser.LEFT_BRACKET);
	            this.state = 1423;
	            this.annotation_appl_params();
	            this.state = 1424;
	            this.match(IDLParser.RIGHT_BRACKET);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation_appl_params() {
	    let localctx = new Annotation_appl_paramsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, IDLParser.RULE_annotation_appl_params);
	    var _la = 0; // Token type
	    try {
	        this.state = 1437;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1428;
	            this.const_exp();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1429;
	            this.annotation_appl_param();
	            this.state = 1434;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===IDLParser.COMMA) {
	                this.state = 1430;
	                this.match(IDLParser.COMMA);
	                this.state = 1431;
	                this.annotation_appl_param();
	                this.state = 1436;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation_appl_param() {
	    let localctx = new Annotation_appl_paramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, IDLParser.RULE_annotation_appl_param);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1439;
	        this.match(IDLParser.ID);
	        this.state = 1440;
	        this.match(IDLParser.EQUAL);
	        this.state = 1441;
	        this.const_exp();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, IDLParser.RULE_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1443;
	        this.annapps();
	        this.state = 1444;
	        this.match(IDLParser.ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

IDLParser.EOF = antlr4.Token.EOF;
IDLParser.INTEGER_LITERAL = 1;
IDLParser.OCTAL_LITERAL = 2;
IDLParser.HEX_LITERAL = 3;
IDLParser.FLOATING_PT_LITERAL = 4;
IDLParser.FIXED_PT_LITERAL = 5;
IDLParser.WIDE_CHARACTER_LITERAL = 6;
IDLParser.CHARACTER_LITERAL = 7;
IDLParser.WIDE_STRING_LITERAL = 8;
IDLParser.STRING_LITERAL = 9;
IDLParser.BOOLEAN_LITERAL = 10;
IDLParser.SEMICOLON = 11;
IDLParser.COLON = 12;
IDLParser.COMMA = 13;
IDLParser.LEFT_BRACE = 14;
IDLParser.RIGHT_BRACE = 15;
IDLParser.LEFT_BRACKET = 16;
IDLParser.RIGHT_BRACKET = 17;
IDLParser.LEFT_SQUARE_BRACKET = 18;
IDLParser.RIGHT_SQUARE_BRACKET = 19;
IDLParser.TILDE = 20;
IDLParser.SLASH = 21;
IDLParser.LEFT_ANG_BRACKET = 22;
IDLParser.RIGHT_ANG_BRACKET = 23;
IDLParser.STAR = 24;
IDLParser.PLUS = 25;
IDLParser.MINUS = 26;
IDLParser.CARET = 27;
IDLParser.AMPERSAND = 28;
IDLParser.PIPE = 29;
IDLParser.EQUAL = 30;
IDLParser.PERCENT = 31;
IDLParser.DOUBLE_COLON = 32;
IDLParser.RIGHT_SHIFT = 33;
IDLParser.LEFT_SHIFT = 34;
IDLParser.AT = 35;
IDLParser.KW_SETRAISES = 36;
IDLParser.KW_OUT = 37;
IDLParser.KW_EMITS = 38;
IDLParser.KW_STRING = 39;
IDLParser.KW_SWITCH = 40;
IDLParser.KW_PUBLISHES = 41;
IDLParser.KW_TYPEDEF = 42;
IDLParser.KW_USES = 43;
IDLParser.KW_PRIMARYKEY = 44;
IDLParser.KW_CUSTOM = 45;
IDLParser.KW_OCTET = 46;
IDLParser.KW_SEQUENCE = 47;
IDLParser.KW_IMPORT = 48;
IDLParser.KW_STRUCT = 49;
IDLParser.KW_NATIVE = 50;
IDLParser.KW_READONLY = 51;
IDLParser.KW_FINDER = 52;
IDLParser.KW_RAISES = 53;
IDLParser.KW_VOID = 54;
IDLParser.KW_PRIVATE = 55;
IDLParser.KW_EVENTTYPE = 56;
IDLParser.KW_WCHAR = 57;
IDLParser.KW_IN = 58;
IDLParser.KW_DEFAULT = 59;
IDLParser.KW_PUBLIC = 60;
IDLParser.KW_SHORT = 61;
IDLParser.KW_LONG = 62;
IDLParser.KW_ENUM = 63;
IDLParser.KW_WSTRING = 64;
IDLParser.KW_CONTEXT = 65;
IDLParser.KW_HOME = 66;
IDLParser.KW_FACTORY = 67;
IDLParser.KW_EXCEPTION = 68;
IDLParser.KW_GETRAISES = 69;
IDLParser.KW_CONST = 70;
IDLParser.KW_VALUEBASE = 71;
IDLParser.KW_VALUETYPE = 72;
IDLParser.KW_SUPPORTS = 73;
IDLParser.KW_MODULE = 74;
IDLParser.KW_OBJECT = 75;
IDLParser.KW_TRUNCATABLE = 76;
IDLParser.KW_UNSIGNED = 77;
IDLParser.KW_FIXED = 78;
IDLParser.KW_UNION = 79;
IDLParser.KW_ONEWAY = 80;
IDLParser.KW_ANY = 81;
IDLParser.KW_CHAR = 82;
IDLParser.KW_CASE = 83;
IDLParser.KW_FLOAT = 84;
IDLParser.KW_BOOLEAN = 85;
IDLParser.KW_MULTIPLE = 86;
IDLParser.KW_ABSTRACT = 87;
IDLParser.KW_INOUT = 88;
IDLParser.KW_PROVIDES = 89;
IDLParser.KW_CONSUMES = 90;
IDLParser.KW_DOUBLE = 91;
IDLParser.KW_TYPEPREFIX = 92;
IDLParser.KW_TYPEID = 93;
IDLParser.KW_ATTRIBUTE = 94;
IDLParser.KW_LOCAL = 95;
IDLParser.KW_MANAGES = 96;
IDLParser.KW_INTERFACE = 97;
IDLParser.KW_COMPONENT = 98;
IDLParser.KW_SET = 99;
IDLParser.KW_MAP = 100;
IDLParser.KW_BITFIELD = 101;
IDLParser.KW_BITSET = 102;
IDLParser.KW_BITMASK = 103;
IDLParser.KW_INT8 = 104;
IDLParser.KW_UINT8 = 105;
IDLParser.KW_INT16 = 106;
IDLParser.KW_UINT16 = 107;
IDLParser.KW_INT32 = 108;
IDLParser.KW_UINT32 = 109;
IDLParser.KW_INT64 = 110;
IDLParser.KW_UINT64 = 111;
IDLParser.KW_AT_ANNOTATION = 112;
IDLParser.ID = 113;
IDLParser.WS = 114;
IDLParser.COMMENT = 115;
IDLParser.LINE_COMMENT = 116;

IDLParser.RULE_specification = 0;
IDLParser.RULE_definition = 1;
IDLParser.RULE_module = 2;
IDLParser.RULE_interface_or_forward_decl = 3;
IDLParser.RULE_interface_decl = 4;
IDLParser.RULE_forward_decl = 5;
IDLParser.RULE_interface_header = 6;
IDLParser.RULE_interface_body = 7;
IDLParser.RULE_export_ = 8;
IDLParser.RULE_interface_inheritance_spec = 9;
IDLParser.RULE_interface_name = 10;
IDLParser.RULE_a_scoped_name = 11;
IDLParser.RULE_scoped_name = 12;
IDLParser.RULE_value = 13;
IDLParser.RULE_value_forward_decl = 14;
IDLParser.RULE_value_box_decl = 15;
IDLParser.RULE_value_abs_decl = 16;
IDLParser.RULE_value_decl = 17;
IDLParser.RULE_value_header = 18;
IDLParser.RULE_value_inheritance_spec = 19;
IDLParser.RULE_value_name = 20;
IDLParser.RULE_value_element = 21;
IDLParser.RULE_state_member = 22;
IDLParser.RULE_init_decl = 23;
IDLParser.RULE_init_param_decls = 24;
IDLParser.RULE_init_param_decl = 25;
IDLParser.RULE_init_param_attribute = 26;
IDLParser.RULE_const_decl = 27;
IDLParser.RULE_const_type = 28;
IDLParser.RULE_const_exp = 29;
IDLParser.RULE_or_expr = 30;
IDLParser.RULE_xor_expr = 31;
IDLParser.RULE_and_expr = 32;
IDLParser.RULE_shift_expr = 33;
IDLParser.RULE_add_expr = 34;
IDLParser.RULE_mult_expr = 35;
IDLParser.RULE_unary_expr = 36;
IDLParser.RULE_unary_operator = 37;
IDLParser.RULE_primary_expr = 38;
IDLParser.RULE_literal = 39;
IDLParser.RULE_positive_int_const = 40;
IDLParser.RULE_type_decl = 41;
IDLParser.RULE_type_declarator = 42;
IDLParser.RULE_type_spec = 43;
IDLParser.RULE_simple_type_spec = 44;
IDLParser.RULE_bitfield_type_spec = 45;
IDLParser.RULE_base_type_spec = 46;
IDLParser.RULE_template_type_spec = 47;
IDLParser.RULE_constr_type_spec = 48;
IDLParser.RULE_simple_declarators = 49;
IDLParser.RULE_declarators = 50;
IDLParser.RULE_declarator = 51;
IDLParser.RULE_simple_declarator = 52;
IDLParser.RULE_complex_declarator = 53;
IDLParser.RULE_floating_pt_type = 54;
IDLParser.RULE_integer_type = 55;
IDLParser.RULE_signed_int = 56;
IDLParser.RULE_signed_tiny_int = 57;
IDLParser.RULE_signed_short_int = 58;
IDLParser.RULE_signed_long_int = 59;
IDLParser.RULE_signed_longlong_int = 60;
IDLParser.RULE_unsigned_int = 61;
IDLParser.RULE_unsigned_tiny_int = 62;
IDLParser.RULE_unsigned_short_int = 63;
IDLParser.RULE_unsigned_long_int = 64;
IDLParser.RULE_unsigned_longlong_int = 65;
IDLParser.RULE_char_type = 66;
IDLParser.RULE_wide_char_type = 67;
IDLParser.RULE_boolean_type = 68;
IDLParser.RULE_octet_type = 69;
IDLParser.RULE_any_type = 70;
IDLParser.RULE_object_type = 71;
IDLParser.RULE_annotation_decl = 72;
IDLParser.RULE_annotation_def = 73;
IDLParser.RULE_annotation_header = 74;
IDLParser.RULE_annotation_inheritance_spec = 75;
IDLParser.RULE_annotation_body = 76;
IDLParser.RULE_annotation_member = 77;
IDLParser.RULE_annotation_forward_dcl = 78;
IDLParser.RULE_bitset_type = 79;
IDLParser.RULE_bitfield = 80;
IDLParser.RULE_bitfield_spec = 81;
IDLParser.RULE_bitmask_type = 82;
IDLParser.RULE_bit_values = 83;
IDLParser.RULE_struct_type = 84;
IDLParser.RULE_member_list = 85;
IDLParser.RULE_member = 86;
IDLParser.RULE_union_type = 87;
IDLParser.RULE_switch_type_spec = 88;
IDLParser.RULE_switch_body = 89;
IDLParser.RULE_case_stmt = 90;
IDLParser.RULE_case_label = 91;
IDLParser.RULE_element_spec = 92;
IDLParser.RULE_enum_type = 93;
IDLParser.RULE_enumerator = 94;
IDLParser.RULE_sequence_type = 95;
IDLParser.RULE_set_type = 96;
IDLParser.RULE_map_type = 97;
IDLParser.RULE_string_type = 98;
IDLParser.RULE_wide_string_type = 99;
IDLParser.RULE_array_declarator = 100;
IDLParser.RULE_fixed_array_size = 101;
IDLParser.RULE_attr_decl = 102;
IDLParser.RULE_except_decl = 103;
IDLParser.RULE_op_decl = 104;
IDLParser.RULE_op_attribute = 105;
IDLParser.RULE_op_type_spec = 106;
IDLParser.RULE_parameter_decls = 107;
IDLParser.RULE_param_decl = 108;
IDLParser.RULE_param_attribute = 109;
IDLParser.RULE_raises_expr = 110;
IDLParser.RULE_context_expr = 111;
IDLParser.RULE_param_type_spec = 112;
IDLParser.RULE_fixed_pt_type = 113;
IDLParser.RULE_fixed_pt_const_type = 114;
IDLParser.RULE_value_base_type = 115;
IDLParser.RULE_constr_forward_decl = 116;
IDLParser.RULE_import_decl = 117;
IDLParser.RULE_imported_scope = 118;
IDLParser.RULE_type_id_decl = 119;
IDLParser.RULE_type_prefix_decl = 120;
IDLParser.RULE_readonly_attr_spec = 121;
IDLParser.RULE_readonly_attr_declarator = 122;
IDLParser.RULE_attr_spec = 123;
IDLParser.RULE_attr_declarator = 124;
IDLParser.RULE_attr_raises_expr = 125;
IDLParser.RULE_get_excep_expr = 126;
IDLParser.RULE_set_excep_expr = 127;
IDLParser.RULE_exception_list = 128;
IDLParser.RULE_component = 129;
IDLParser.RULE_component_forward_decl = 130;
IDLParser.RULE_component_decl = 131;
IDLParser.RULE_component_header = 132;
IDLParser.RULE_supported_interface_spec = 133;
IDLParser.RULE_component_inheritance_spec = 134;
IDLParser.RULE_component_body = 135;
IDLParser.RULE_component_export = 136;
IDLParser.RULE_provides_decl = 137;
IDLParser.RULE_interface_type = 138;
IDLParser.RULE_uses_decl = 139;
IDLParser.RULE_emits_decl = 140;
IDLParser.RULE_publishes_decl = 141;
IDLParser.RULE_consumes_decl = 142;
IDLParser.RULE_home_decl = 143;
IDLParser.RULE_home_header = 144;
IDLParser.RULE_home_inheritance_spec = 145;
IDLParser.RULE_primary_key_spec = 146;
IDLParser.RULE_home_body = 147;
IDLParser.RULE_home_export = 148;
IDLParser.RULE_factory_decl = 149;
IDLParser.RULE_finder_decl = 150;
IDLParser.RULE_event = 151;
IDLParser.RULE_event_forward_decl = 152;
IDLParser.RULE_event_abs_decl = 153;
IDLParser.RULE_event_decl = 154;
IDLParser.RULE_event_header = 155;
IDLParser.RULE_annapps = 156;
IDLParser.RULE_annotation_appl = 157;
IDLParser.RULE_annotation_appl_params = 158;
IDLParser.RULE_annotation_appl_param = 159;
IDLParser.RULE_identifier = 160;

class SpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_specification;
    }

	import_decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Import_declContext);
	    } else {
	        return this.getTypedRuleContext(Import_declContext,i);
	    }
	};

	definition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DefinitionContext);
	    } else {
	        return this.getTypedRuleContext(DefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitSpecification(this);
		}
	}


}



class DefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_definition;
    }

	annapps() {
	    return this.getTypedRuleContext(AnnappsContext,0);
	};

	type_decl() {
	    return this.getTypedRuleContext(Type_declContext,0);
	};

	SEMICOLON() {
	    return this.getToken(IDLParser.SEMICOLON, 0);
	};

	const_decl() {
	    return this.getTypedRuleContext(Const_declContext,0);
	};

	except_decl() {
	    return this.getTypedRuleContext(Except_declContext,0);
	};

	interface_or_forward_decl() {
	    return this.getTypedRuleContext(Interface_or_forward_declContext,0);
	};

	module() {
	    return this.getTypedRuleContext(ModuleContext,0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	type_id_decl() {
	    return this.getTypedRuleContext(Type_id_declContext,0);
	};

	type_prefix_decl() {
	    return this.getTypedRuleContext(Type_prefix_declContext,0);
	};

	event() {
	    return this.getTypedRuleContext(EventContext,0);
	};

	component() {
	    return this.getTypedRuleContext(ComponentContext,0);
	};

	home_decl() {
	    return this.getTypedRuleContext(Home_declContext,0);
	};

	annotation_decl() {
	    return this.getTypedRuleContext(Annotation_declContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitDefinition(this);
		}
	}


}



class ModuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_module;
    }

	KW_MODULE() {
	    return this.getToken(IDLParser.KW_MODULE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LEFT_BRACE() {
	    return this.getToken(IDLParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(IDLParser.RIGHT_BRACE, 0);
	};

	definition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DefinitionContext);
	    } else {
	        return this.getTypedRuleContext(DefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterModule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitModule(this);
		}
	}


}



class Interface_or_forward_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_interface_or_forward_decl;
    }

	annapps() {
	    return this.getTypedRuleContext(AnnappsContext,0);
	};

	interface_decl() {
	    return this.getTypedRuleContext(Interface_declContext,0);
	};

	forward_decl() {
	    return this.getTypedRuleContext(Forward_declContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterInterface_or_forward_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitInterface_or_forward_decl(this);
		}
	}


}



class Interface_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_interface_decl;
    }

	interface_header() {
	    return this.getTypedRuleContext(Interface_headerContext,0);
	};

	LEFT_BRACE() {
	    return this.getToken(IDLParser.LEFT_BRACE, 0);
	};

	interface_body() {
	    return this.getTypedRuleContext(Interface_bodyContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(IDLParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterInterface_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitInterface_decl(this);
		}
	}


}



class Forward_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_forward_decl;
    }

	KW_INTERFACE() {
	    return this.getToken(IDLParser.KW_INTERFACE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_ABSTRACT() {
	    return this.getToken(IDLParser.KW_ABSTRACT, 0);
	};

	KW_LOCAL() {
	    return this.getToken(IDLParser.KW_LOCAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterForward_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitForward_decl(this);
		}
	}


}



class Interface_headerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_interface_header;
    }

	KW_INTERFACE() {
	    return this.getToken(IDLParser.KW_INTERFACE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	interface_inheritance_spec() {
	    return this.getTypedRuleContext(Interface_inheritance_specContext,0);
	};

	KW_ABSTRACT() {
	    return this.getToken(IDLParser.KW_ABSTRACT, 0);
	};

	KW_LOCAL() {
	    return this.getToken(IDLParser.KW_LOCAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterInterface_header(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitInterface_header(this);
		}
	}


}



class Interface_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_interface_body;
    }

	export_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Export_Context);
	    } else {
	        return this.getTypedRuleContext(Export_Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterInterface_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitInterface_body(this);
		}
	}


}



class Export_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_export_;
    }

	annapps() {
	    return this.getTypedRuleContext(AnnappsContext,0);
	};

	type_decl() {
	    return this.getTypedRuleContext(Type_declContext,0);
	};

	SEMICOLON() {
	    return this.getToken(IDLParser.SEMICOLON, 0);
	};

	const_decl() {
	    return this.getTypedRuleContext(Const_declContext,0);
	};

	except_decl() {
	    return this.getTypedRuleContext(Except_declContext,0);
	};

	attr_decl() {
	    return this.getTypedRuleContext(Attr_declContext,0);
	};

	op_decl() {
	    return this.getTypedRuleContext(Op_declContext,0);
	};

	type_id_decl() {
	    return this.getTypedRuleContext(Type_id_declContext,0);
	};

	type_prefix_decl() {
	    return this.getTypedRuleContext(Type_prefix_declContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterExport_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitExport_(this);
		}
	}


}



class Interface_inheritance_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_interface_inheritance_spec;
    }

	COLON() {
	    return this.getToken(IDLParser.COLON, 0);
	};

	interface_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Interface_nameContext);
	    } else {
	        return this.getTypedRuleContext(Interface_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.COMMA);
	    } else {
	        return this.getToken(IDLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterInterface_inheritance_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitInterface_inheritance_spec(this);
		}
	}


}



class Interface_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_interface_name;
    }

	a_scoped_name() {
	    return this.getTypedRuleContext(A_scoped_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterInterface_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitInterface_name(this);
		}
	}


}



class A_scoped_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_a_scoped_name;
    }

	annapps() {
	    return this.getTypedRuleContext(AnnappsContext,0);
	};

	scoped_name() {
	    return this.getTypedRuleContext(Scoped_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterA_scoped_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitA_scoped_name(this);
		}
	}


}



class Scoped_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_scoped_name;
    }

	ID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.ID);
	    } else {
	        return this.getToken(IDLParser.ID, i);
	    }
	};


	DOUBLE_COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.DOUBLE_COLON);
	    } else {
	        return this.getToken(IDLParser.DOUBLE_COLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterScoped_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitScoped_name(this);
		}
	}


}



class ValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_value;
    }

	annapps() {
	    return this.getTypedRuleContext(AnnappsContext,0);
	};

	value_decl() {
	    return this.getTypedRuleContext(Value_declContext,0);
	};

	value_abs_decl() {
	    return this.getTypedRuleContext(Value_abs_declContext,0);
	};

	value_box_decl() {
	    return this.getTypedRuleContext(Value_box_declContext,0);
	};

	value_forward_decl() {
	    return this.getTypedRuleContext(Value_forward_declContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitValue(this);
		}
	}


}



class Value_forward_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_value_forward_decl;
    }

	KW_VALUETYPE() {
	    return this.getToken(IDLParser.KW_VALUETYPE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_ABSTRACT() {
	    return this.getToken(IDLParser.KW_ABSTRACT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterValue_forward_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitValue_forward_decl(this);
		}
	}


}



class Value_box_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_value_box_decl;
    }

	KW_VALUETYPE() {
	    return this.getToken(IDLParser.KW_VALUETYPE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	type_spec() {
	    return this.getTypedRuleContext(Type_specContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterValue_box_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitValue_box_decl(this);
		}
	}


}



class Value_abs_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_value_abs_decl;
    }

	KW_ABSTRACT() {
	    return this.getToken(IDLParser.KW_ABSTRACT, 0);
	};

	KW_VALUETYPE() {
	    return this.getToken(IDLParser.KW_VALUETYPE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	value_inheritance_spec() {
	    return this.getTypedRuleContext(Value_inheritance_specContext,0);
	};

	LEFT_BRACE() {
	    return this.getToken(IDLParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(IDLParser.RIGHT_BRACE, 0);
	};

	export_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Export_Context);
	    } else {
	        return this.getTypedRuleContext(Export_Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterValue_abs_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitValue_abs_decl(this);
		}
	}


}



class Value_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_value_decl;
    }

	value_header() {
	    return this.getTypedRuleContext(Value_headerContext,0);
	};

	LEFT_BRACE() {
	    return this.getToken(IDLParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(IDLParser.RIGHT_BRACE, 0);
	};

	value_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Value_elementContext);
	    } else {
	        return this.getTypedRuleContext(Value_elementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterValue_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitValue_decl(this);
		}
	}


}



class Value_headerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_value_header;
    }

	KW_VALUETYPE() {
	    return this.getToken(IDLParser.KW_VALUETYPE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	value_inheritance_spec() {
	    return this.getTypedRuleContext(Value_inheritance_specContext,0);
	};

	KW_CUSTOM() {
	    return this.getToken(IDLParser.KW_CUSTOM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterValue_header(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitValue_header(this);
		}
	}


}



class Value_inheritance_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_value_inheritance_spec;
    }

	COLON() {
	    return this.getToken(IDLParser.COLON, 0);
	};

	value_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Value_nameContext);
	    } else {
	        return this.getTypedRuleContext(Value_nameContext,i);
	    }
	};

	KW_SUPPORTS() {
	    return this.getToken(IDLParser.KW_SUPPORTS, 0);
	};

	interface_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Interface_nameContext);
	    } else {
	        return this.getTypedRuleContext(Interface_nameContext,i);
	    }
	};

	KW_TRUNCATABLE() {
	    return this.getToken(IDLParser.KW_TRUNCATABLE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.COMMA);
	    } else {
	        return this.getToken(IDLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterValue_inheritance_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitValue_inheritance_spec(this);
		}
	}


}



class Value_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_value_name;
    }

	a_scoped_name() {
	    return this.getTypedRuleContext(A_scoped_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterValue_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitValue_name(this);
		}
	}


}



class Value_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_value_element;
    }

	export_() {
	    return this.getTypedRuleContext(Export_Context,0);
	};

	state_member() {
	    return this.getTypedRuleContext(State_memberContext,0);
	};

	init_decl() {
	    return this.getTypedRuleContext(Init_declContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterValue_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitValue_element(this);
		}
	}


}



class State_memberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_state_member;
    }

	annapps = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnappsContext);
	    } else {
	        return this.getTypedRuleContext(AnnappsContext,i);
	    }
	};

	type_spec() {
	    return this.getTypedRuleContext(Type_specContext,0);
	};

	declarators() {
	    return this.getTypedRuleContext(DeclaratorsContext,0);
	};

	SEMICOLON() {
	    return this.getToken(IDLParser.SEMICOLON, 0);
	};

	KW_PUBLIC() {
	    return this.getToken(IDLParser.KW_PUBLIC, 0);
	};

	KW_PRIVATE() {
	    return this.getToken(IDLParser.KW_PRIVATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterState_member(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitState_member(this);
		}
	}


}



class Init_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_init_decl;
    }

	annapps() {
	    return this.getTypedRuleContext(AnnappsContext,0);
	};

	KW_FACTORY() {
	    return this.getToken(IDLParser.KW_FACTORY, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LEFT_BRACKET() {
	    return this.getToken(IDLParser.LEFT_BRACKET, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(IDLParser.RIGHT_BRACKET, 0);
	};

	SEMICOLON() {
	    return this.getToken(IDLParser.SEMICOLON, 0);
	};

	init_param_decls() {
	    return this.getTypedRuleContext(Init_param_declsContext,0);
	};

	raises_expr() {
	    return this.getTypedRuleContext(Raises_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterInit_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitInit_decl(this);
		}
	}


}



class Init_param_declsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_init_param_decls;
    }

	init_param_decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Init_param_declContext);
	    } else {
	        return this.getTypedRuleContext(Init_param_declContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.COMMA);
	    } else {
	        return this.getToken(IDLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterInit_param_decls(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitInit_param_decls(this);
		}
	}


}



class Init_param_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_init_param_decl;
    }

	annapps = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnappsContext);
	    } else {
	        return this.getTypedRuleContext(AnnappsContext,i);
	    }
	};

	init_param_attribute() {
	    return this.getTypedRuleContext(Init_param_attributeContext,0);
	};

	param_type_spec() {
	    return this.getTypedRuleContext(Param_type_specContext,0);
	};

	simple_declarator() {
	    return this.getTypedRuleContext(Simple_declaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterInit_param_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitInit_param_decl(this);
		}
	}


}



class Init_param_attributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_init_param_attribute;
    }

	KW_IN() {
	    return this.getToken(IDLParser.KW_IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterInit_param_attribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitInit_param_attribute(this);
		}
	}


}



class Const_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_const_decl;
    }

	KW_CONST() {
	    return this.getToken(IDLParser.KW_CONST, 0);
	};

	const_type() {
	    return this.getTypedRuleContext(Const_typeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQUAL() {
	    return this.getToken(IDLParser.EQUAL, 0);
	};

	const_exp() {
	    return this.getTypedRuleContext(Const_expContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterConst_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitConst_decl(this);
		}
	}


}



class Const_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_const_type;
    }

	annapps() {
	    return this.getTypedRuleContext(AnnappsContext,0);
	};

	integer_type() {
	    return this.getTypedRuleContext(Integer_typeContext,0);
	};

	char_type() {
	    return this.getTypedRuleContext(Char_typeContext,0);
	};

	wide_char_type() {
	    return this.getTypedRuleContext(Wide_char_typeContext,0);
	};

	boolean_type() {
	    return this.getTypedRuleContext(Boolean_typeContext,0);
	};

	floating_pt_type() {
	    return this.getTypedRuleContext(Floating_pt_typeContext,0);
	};

	string_type() {
	    return this.getTypedRuleContext(String_typeContext,0);
	};

	wide_string_type() {
	    return this.getTypedRuleContext(Wide_string_typeContext,0);
	};

	fixed_pt_const_type() {
	    return this.getTypedRuleContext(Fixed_pt_const_typeContext,0);
	};

	scoped_name() {
	    return this.getTypedRuleContext(Scoped_nameContext,0);
	};

	octet_type() {
	    return this.getTypedRuleContext(Octet_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterConst_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitConst_type(this);
		}
	}


}



class Const_expContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_const_exp;
    }

	or_expr() {
	    return this.getTypedRuleContext(Or_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterConst_exp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitConst_exp(this);
		}
	}


}



class Or_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_or_expr;
    }

	xor_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Xor_exprContext);
	    } else {
	        return this.getTypedRuleContext(Xor_exprContext,i);
	    }
	};

	PIPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.PIPE);
	    } else {
	        return this.getToken(IDLParser.PIPE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterOr_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitOr_expr(this);
		}
	}


}



class Xor_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_xor_expr;
    }

	and_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(And_exprContext);
	    } else {
	        return this.getTypedRuleContext(And_exprContext,i);
	    }
	};

	CARET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.CARET);
	    } else {
	        return this.getToken(IDLParser.CARET, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterXor_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitXor_expr(this);
		}
	}


}



class And_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_and_expr;
    }

	shift_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Shift_exprContext);
	    } else {
	        return this.getTypedRuleContext(Shift_exprContext,i);
	    }
	};

	AMPERSAND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.AMPERSAND);
	    } else {
	        return this.getToken(IDLParser.AMPERSAND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterAnd_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitAnd_expr(this);
		}
	}


}



class Shift_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_shift_expr;
    }

	add_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Add_exprContext);
	    } else {
	        return this.getTypedRuleContext(Add_exprContext,i);
	    }
	};

	RIGHT_SHIFT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.RIGHT_SHIFT);
	    } else {
	        return this.getToken(IDLParser.RIGHT_SHIFT, i);
	    }
	};


	LEFT_SHIFT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.LEFT_SHIFT);
	    } else {
	        return this.getToken(IDLParser.LEFT_SHIFT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterShift_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitShift_expr(this);
		}
	}


}



class Add_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_add_expr;
    }

	mult_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Mult_exprContext);
	    } else {
	        return this.getTypedRuleContext(Mult_exprContext,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.PLUS);
	    } else {
	        return this.getToken(IDLParser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.MINUS);
	    } else {
	        return this.getToken(IDLParser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterAdd_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitAdd_expr(this);
		}
	}


}



class Mult_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_mult_expr;
    }

	unary_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Unary_exprContext);
	    } else {
	        return this.getTypedRuleContext(Unary_exprContext,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.STAR);
	    } else {
	        return this.getToken(IDLParser.STAR, i);
	    }
	};


	SLASH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.SLASH);
	    } else {
	        return this.getToken(IDLParser.SLASH, i);
	    }
	};


	PERCENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.PERCENT);
	    } else {
	        return this.getToken(IDLParser.PERCENT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterMult_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitMult_expr(this);
		}
	}


}



class Unary_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_unary_expr;
    }

	unary_operator() {
	    return this.getTypedRuleContext(Unary_operatorContext,0);
	};

	primary_expr() {
	    return this.getTypedRuleContext(Primary_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterUnary_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitUnary_expr(this);
		}
	}


}



class Unary_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_unary_operator;
    }

	MINUS() {
	    return this.getToken(IDLParser.MINUS, 0);
	};

	PLUS() {
	    return this.getToken(IDLParser.PLUS, 0);
	};

	TILDE() {
	    return this.getToken(IDLParser.TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterUnary_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitUnary_operator(this);
		}
	}


}



class Primary_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_primary_expr;
    }

	scoped_name() {
	    return this.getTypedRuleContext(Scoped_nameContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	LEFT_BRACKET() {
	    return this.getToken(IDLParser.LEFT_BRACKET, 0);
	};

	const_exp() {
	    return this.getTypedRuleContext(Const_expContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(IDLParser.RIGHT_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterPrimary_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitPrimary_expr(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_literal;
    }

	HEX_LITERAL() {
	    return this.getToken(IDLParser.HEX_LITERAL, 0);
	};

	INTEGER_LITERAL() {
	    return this.getToken(IDLParser.INTEGER_LITERAL, 0);
	};

	OCTAL_LITERAL() {
	    return this.getToken(IDLParser.OCTAL_LITERAL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(IDLParser.STRING_LITERAL, 0);
	};

	WIDE_STRING_LITERAL() {
	    return this.getToken(IDLParser.WIDE_STRING_LITERAL, 0);
	};

	CHARACTER_LITERAL() {
	    return this.getToken(IDLParser.CHARACTER_LITERAL, 0);
	};

	WIDE_CHARACTER_LITERAL() {
	    return this.getToken(IDLParser.WIDE_CHARACTER_LITERAL, 0);
	};

	FIXED_PT_LITERAL() {
	    return this.getToken(IDLParser.FIXED_PT_LITERAL, 0);
	};

	FLOATING_PT_LITERAL() {
	    return this.getToken(IDLParser.FLOATING_PT_LITERAL, 0);
	};

	BOOLEAN_LITERAL() {
	    return this.getToken(IDLParser.BOOLEAN_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class Positive_int_constContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_positive_int_const;
    }

	const_exp() {
	    return this.getTypedRuleContext(Const_expContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterPositive_int_const(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitPositive_int_const(this);
		}
	}


}



class Type_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_type_decl;
    }

	KW_TYPEDEF() {
	    return this.getToken(IDLParser.KW_TYPEDEF, 0);
	};

	annapps() {
	    return this.getTypedRuleContext(AnnappsContext,0);
	};

	type_declarator() {
	    return this.getTypedRuleContext(Type_declaratorContext,0);
	};

	struct_type() {
	    return this.getTypedRuleContext(Struct_typeContext,0);
	};

	union_type() {
	    return this.getTypedRuleContext(Union_typeContext,0);
	};

	enum_type() {
	    return this.getTypedRuleContext(Enum_typeContext,0);
	};

	bitset_type() {
	    return this.getTypedRuleContext(Bitset_typeContext,0);
	};

	bitmask_type() {
	    return this.getTypedRuleContext(Bitmask_typeContext,0);
	};

	KW_NATIVE() {
	    return this.getToken(IDLParser.KW_NATIVE, 0);
	};

	simple_declarator() {
	    return this.getTypedRuleContext(Simple_declaratorContext,0);
	};

	constr_forward_decl() {
	    return this.getTypedRuleContext(Constr_forward_declContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterType_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitType_decl(this);
		}
	}


}



class Type_declaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_type_declarator;
    }

	type_spec() {
	    return this.getTypedRuleContext(Type_specContext,0);
	};

	declarators() {
	    return this.getTypedRuleContext(DeclaratorsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterType_declarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitType_declarator(this);
		}
	}


}



class Type_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_type_spec;
    }

	simple_type_spec() {
	    return this.getTypedRuleContext(Simple_type_specContext,0);
	};

	constr_type_spec() {
	    return this.getTypedRuleContext(Constr_type_specContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterType_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitType_spec(this);
		}
	}


}



class Simple_type_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_simple_type_spec;
    }

	base_type_spec() {
	    return this.getTypedRuleContext(Base_type_specContext,0);
	};

	template_type_spec() {
	    return this.getTypedRuleContext(Template_type_specContext,0);
	};

	scoped_name() {
	    return this.getTypedRuleContext(Scoped_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterSimple_type_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitSimple_type_spec(this);
		}
	}


}



class Bitfield_type_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_bitfield_type_spec;
    }

	integer_type() {
	    return this.getTypedRuleContext(Integer_typeContext,0);
	};

	boolean_type() {
	    return this.getTypedRuleContext(Boolean_typeContext,0);
	};

	octet_type() {
	    return this.getTypedRuleContext(Octet_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterBitfield_type_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitBitfield_type_spec(this);
		}
	}


}



class Base_type_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_base_type_spec;
    }

	floating_pt_type() {
	    return this.getTypedRuleContext(Floating_pt_typeContext,0);
	};

	integer_type() {
	    return this.getTypedRuleContext(Integer_typeContext,0);
	};

	char_type() {
	    return this.getTypedRuleContext(Char_typeContext,0);
	};

	wide_char_type() {
	    return this.getTypedRuleContext(Wide_char_typeContext,0);
	};

	boolean_type() {
	    return this.getTypedRuleContext(Boolean_typeContext,0);
	};

	octet_type() {
	    return this.getTypedRuleContext(Octet_typeContext,0);
	};

	any_type() {
	    return this.getTypedRuleContext(Any_typeContext,0);
	};

	object_type() {
	    return this.getTypedRuleContext(Object_typeContext,0);
	};

	value_base_type() {
	    return this.getTypedRuleContext(Value_base_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterBase_type_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitBase_type_spec(this);
		}
	}


}



class Template_type_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_template_type_spec;
    }

	sequence_type() {
	    return this.getTypedRuleContext(Sequence_typeContext,0);
	};

	set_type() {
	    return this.getTypedRuleContext(Set_typeContext,0);
	};

	map_type() {
	    return this.getTypedRuleContext(Map_typeContext,0);
	};

	string_type() {
	    return this.getTypedRuleContext(String_typeContext,0);
	};

	wide_string_type() {
	    return this.getTypedRuleContext(Wide_string_typeContext,0);
	};

	fixed_pt_type() {
	    return this.getTypedRuleContext(Fixed_pt_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterTemplate_type_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitTemplate_type_spec(this);
		}
	}


}



class Constr_type_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_constr_type_spec;
    }

	struct_type() {
	    return this.getTypedRuleContext(Struct_typeContext,0);
	};

	union_type() {
	    return this.getTypedRuleContext(Union_typeContext,0);
	};

	enum_type() {
	    return this.getTypedRuleContext(Enum_typeContext,0);
	};

	bitset_type() {
	    return this.getTypedRuleContext(Bitset_typeContext,0);
	};

	bitmask_type() {
	    return this.getTypedRuleContext(Bitmask_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterConstr_type_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitConstr_type_spec(this);
		}
	}


}



class Simple_declaratorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_simple_declarators;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.COMMA);
	    } else {
	        return this.getToken(IDLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterSimple_declarators(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitSimple_declarators(this);
		}
	}


}



class DeclaratorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_declarators;
    }

	declarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(DeclaratorContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.COMMA);
	    } else {
	        return this.getToken(IDLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterDeclarators(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitDeclarators(this);
		}
	}


}



class DeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_declarator;
    }

	annapps() {
	    return this.getTypedRuleContext(AnnappsContext,0);
	};

	simple_declarator() {
	    return this.getTypedRuleContext(Simple_declaratorContext,0);
	};

	complex_declarator() {
	    return this.getTypedRuleContext(Complex_declaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitDeclarator(this);
		}
	}


}



class Simple_declaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_simple_declarator;
    }

	ID() {
	    return this.getToken(IDLParser.ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterSimple_declarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitSimple_declarator(this);
		}
	}


}



class Complex_declaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_complex_declarator;
    }

	array_declarator() {
	    return this.getTypedRuleContext(Array_declaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterComplex_declarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitComplex_declarator(this);
		}
	}


}



class Floating_pt_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_floating_pt_type;
    }

	KW_FLOAT() {
	    return this.getToken(IDLParser.KW_FLOAT, 0);
	};

	KW_DOUBLE() {
	    return this.getToken(IDLParser.KW_DOUBLE, 0);
	};

	KW_LONG() {
	    return this.getToken(IDLParser.KW_LONG, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterFloating_pt_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitFloating_pt_type(this);
		}
	}


}



class Integer_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_integer_type;
    }

	signed_int() {
	    return this.getTypedRuleContext(Signed_intContext,0);
	};

	unsigned_int() {
	    return this.getTypedRuleContext(Unsigned_intContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterInteger_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitInteger_type(this);
		}
	}


}



class Signed_intContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_signed_int;
    }

	signed_short_int() {
	    return this.getTypedRuleContext(Signed_short_intContext,0);
	};

	signed_long_int() {
	    return this.getTypedRuleContext(Signed_long_intContext,0);
	};

	signed_longlong_int() {
	    return this.getTypedRuleContext(Signed_longlong_intContext,0);
	};

	signed_tiny_int() {
	    return this.getTypedRuleContext(Signed_tiny_intContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterSigned_int(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitSigned_int(this);
		}
	}


}



class Signed_tiny_intContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_signed_tiny_int;
    }

	KW_INT8() {
	    return this.getToken(IDLParser.KW_INT8, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterSigned_tiny_int(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitSigned_tiny_int(this);
		}
	}


}



class Signed_short_intContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_signed_short_int;
    }

	KW_SHORT() {
	    return this.getToken(IDLParser.KW_SHORT, 0);
	};

	KW_INT16() {
	    return this.getToken(IDLParser.KW_INT16, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterSigned_short_int(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitSigned_short_int(this);
		}
	}


}



class Signed_long_intContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_signed_long_int;
    }

	KW_LONG() {
	    return this.getToken(IDLParser.KW_LONG, 0);
	};

	KW_INT32() {
	    return this.getToken(IDLParser.KW_INT32, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterSigned_long_int(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitSigned_long_int(this);
		}
	}


}



class Signed_longlong_intContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_signed_longlong_int;
    }

	KW_LONG = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.KW_LONG);
	    } else {
	        return this.getToken(IDLParser.KW_LONG, i);
	    }
	};


	KW_INT64() {
	    return this.getToken(IDLParser.KW_INT64, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterSigned_longlong_int(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitSigned_longlong_int(this);
		}
	}


}



class Unsigned_intContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_unsigned_int;
    }

	unsigned_short_int() {
	    return this.getTypedRuleContext(Unsigned_short_intContext,0);
	};

	unsigned_long_int() {
	    return this.getTypedRuleContext(Unsigned_long_intContext,0);
	};

	unsigned_longlong_int() {
	    return this.getTypedRuleContext(Unsigned_longlong_intContext,0);
	};

	unsigned_tiny_int() {
	    return this.getTypedRuleContext(Unsigned_tiny_intContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterUnsigned_int(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitUnsigned_int(this);
		}
	}


}



class Unsigned_tiny_intContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_unsigned_tiny_int;
    }

	KW_UINT8() {
	    return this.getToken(IDLParser.KW_UINT8, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterUnsigned_tiny_int(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitUnsigned_tiny_int(this);
		}
	}


}



class Unsigned_short_intContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_unsigned_short_int;
    }

	KW_UNSIGNED() {
	    return this.getToken(IDLParser.KW_UNSIGNED, 0);
	};

	KW_SHORT() {
	    return this.getToken(IDLParser.KW_SHORT, 0);
	};

	KW_UINT16() {
	    return this.getToken(IDLParser.KW_UINT16, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterUnsigned_short_int(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitUnsigned_short_int(this);
		}
	}


}



class Unsigned_long_intContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_unsigned_long_int;
    }

	KW_UNSIGNED() {
	    return this.getToken(IDLParser.KW_UNSIGNED, 0);
	};

	KW_LONG() {
	    return this.getToken(IDLParser.KW_LONG, 0);
	};

	KW_UINT32() {
	    return this.getToken(IDLParser.KW_UINT32, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterUnsigned_long_int(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitUnsigned_long_int(this);
		}
	}


}



class Unsigned_longlong_intContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_unsigned_longlong_int;
    }

	KW_UNSIGNED() {
	    return this.getToken(IDLParser.KW_UNSIGNED, 0);
	};

	KW_LONG = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.KW_LONG);
	    } else {
	        return this.getToken(IDLParser.KW_LONG, i);
	    }
	};


	KW_UINT64() {
	    return this.getToken(IDLParser.KW_UINT64, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterUnsigned_longlong_int(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitUnsigned_longlong_int(this);
		}
	}


}



class Char_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_char_type;
    }

	KW_CHAR() {
	    return this.getToken(IDLParser.KW_CHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterChar_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitChar_type(this);
		}
	}


}



class Wide_char_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_wide_char_type;
    }

	KW_WCHAR() {
	    return this.getToken(IDLParser.KW_WCHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterWide_char_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitWide_char_type(this);
		}
	}


}



class Boolean_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_boolean_type;
    }

	KW_BOOLEAN() {
	    return this.getToken(IDLParser.KW_BOOLEAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterBoolean_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitBoolean_type(this);
		}
	}


}



class Octet_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_octet_type;
    }

	KW_OCTET() {
	    return this.getToken(IDLParser.KW_OCTET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterOctet_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitOctet_type(this);
		}
	}


}



class Any_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_any_type;
    }

	KW_ANY() {
	    return this.getToken(IDLParser.KW_ANY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterAny_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitAny_type(this);
		}
	}


}



class Object_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_object_type;
    }

	KW_OBJECT() {
	    return this.getToken(IDLParser.KW_OBJECT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterObject_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitObject_type(this);
		}
	}


}



class Annotation_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_annotation_decl;
    }

	annotation_def() {
	    return this.getTypedRuleContext(Annotation_defContext,0);
	};

	annotation_forward_dcl() {
	    return this.getTypedRuleContext(Annotation_forward_dclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterAnnotation_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitAnnotation_decl(this);
		}
	}


}



class Annotation_defContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_annotation_def;
    }

	annotation_header() {
	    return this.getTypedRuleContext(Annotation_headerContext,0);
	};

	LEFT_BRACE() {
	    return this.getToken(IDLParser.LEFT_BRACE, 0);
	};

	annotation_body() {
	    return this.getTypedRuleContext(Annotation_bodyContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(IDLParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterAnnotation_def(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitAnnotation_def(this);
		}
	}


}



class Annotation_headerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_annotation_header;
    }

	KW_AT_ANNOTATION() {
	    return this.getToken(IDLParser.KW_AT_ANNOTATION, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	annotation_inheritance_spec() {
	    return this.getTypedRuleContext(Annotation_inheritance_specContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterAnnotation_header(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitAnnotation_header(this);
		}
	}


}



class Annotation_inheritance_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_annotation_inheritance_spec;
    }

	COLON() {
	    return this.getToken(IDLParser.COLON, 0);
	};

	scoped_name() {
	    return this.getTypedRuleContext(Scoped_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterAnnotation_inheritance_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitAnnotation_inheritance_spec(this);
		}
	}


}



class Annotation_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_annotation_body;
    }

	annotation_member = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Annotation_memberContext);
	    } else {
	        return this.getTypedRuleContext(Annotation_memberContext,i);
	    }
	};

	enum_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Enum_typeContext);
	    } else {
	        return this.getTypedRuleContext(Enum_typeContext,i);
	    }
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.SEMICOLON);
	    } else {
	        return this.getToken(IDLParser.SEMICOLON, i);
	    }
	};


	const_decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Const_declContext);
	    } else {
	        return this.getTypedRuleContext(Const_declContext,i);
	    }
	};

	KW_TYPEDEF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.KW_TYPEDEF);
	    } else {
	        return this.getToken(IDLParser.KW_TYPEDEF, i);
	    }
	};


	type_declarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_declaratorContext);
	    } else {
	        return this.getTypedRuleContext(Type_declaratorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterAnnotation_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitAnnotation_body(this);
		}
	}


}



class Annotation_memberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_annotation_member;
    }

	const_type() {
	    return this.getTypedRuleContext(Const_typeContext,0);
	};

	simple_declarator() {
	    return this.getTypedRuleContext(Simple_declaratorContext,0);
	};

	SEMICOLON() {
	    return this.getToken(IDLParser.SEMICOLON, 0);
	};

	KW_DEFAULT() {
	    return this.getToken(IDLParser.KW_DEFAULT, 0);
	};

	const_exp() {
	    return this.getTypedRuleContext(Const_expContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterAnnotation_member(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitAnnotation_member(this);
		}
	}


}



class Annotation_forward_dclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_annotation_forward_dcl;
    }

	KW_AT_ANNOTATION() {
	    return this.getToken(IDLParser.KW_AT_ANNOTATION, 0);
	};

	scoped_name() {
	    return this.getTypedRuleContext(Scoped_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterAnnotation_forward_dcl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitAnnotation_forward_dcl(this);
		}
	}


}



class Bitset_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_bitset_type;
    }

	KW_BITSET() {
	    return this.getToken(IDLParser.KW_BITSET, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LEFT_BRACE() {
	    return this.getToken(IDLParser.LEFT_BRACE, 0);
	};

	bitfield() {
	    return this.getTypedRuleContext(BitfieldContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(IDLParser.RIGHT_BRACE, 0);
	};

	COLON() {
	    return this.getToken(IDLParser.COLON, 0);
	};

	scoped_name() {
	    return this.getTypedRuleContext(Scoped_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterBitset_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitBitset_type(this);
		}
	}


}



class BitfieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_bitfield;
    }

	bitfield_spec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Bitfield_specContext);
	    } else {
	        return this.getTypedRuleContext(Bitfield_specContext,i);
	    }
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.SEMICOLON);
	    } else {
	        return this.getToken(IDLParser.SEMICOLON, i);
	    }
	};


	simple_declarators = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Simple_declaratorsContext);
	    } else {
	        return this.getTypedRuleContext(Simple_declaratorsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterBitfield(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitBitfield(this);
		}
	}


}



class Bitfield_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_bitfield_spec;
    }

	annapps() {
	    return this.getTypedRuleContext(AnnappsContext,0);
	};

	KW_BITFIELD() {
	    return this.getToken(IDLParser.KW_BITFIELD, 0);
	};

	LEFT_ANG_BRACKET() {
	    return this.getToken(IDLParser.LEFT_ANG_BRACKET, 0);
	};

	positive_int_const() {
	    return this.getTypedRuleContext(Positive_int_constContext,0);
	};

	RIGHT_ANG_BRACKET() {
	    return this.getToken(IDLParser.RIGHT_ANG_BRACKET, 0);
	};

	COMMA() {
	    return this.getToken(IDLParser.COMMA, 0);
	};

	bitfield_type_spec() {
	    return this.getTypedRuleContext(Bitfield_type_specContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterBitfield_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitBitfield_spec(this);
		}
	}


}



class Bitmask_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_bitmask_type;
    }

	KW_BITMASK() {
	    return this.getToken(IDLParser.KW_BITMASK, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LEFT_BRACE() {
	    return this.getToken(IDLParser.LEFT_BRACE, 0);
	};

	bit_values() {
	    return this.getTypedRuleContext(Bit_valuesContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(IDLParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterBitmask_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitBitmask_type(this);
		}
	}


}



class Bit_valuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_bit_values;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.COMMA);
	    } else {
	        return this.getToken(IDLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterBit_values(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitBit_values(this);
		}
	}


}



class Struct_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_struct_type;
    }

	KW_STRUCT() {
	    return this.getToken(IDLParser.KW_STRUCT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LEFT_BRACE() {
	    return this.getToken(IDLParser.LEFT_BRACE, 0);
	};

	member_list() {
	    return this.getTypedRuleContext(Member_listContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(IDLParser.RIGHT_BRACE, 0);
	};

	COLON() {
	    return this.getToken(IDLParser.COLON, 0);
	};

	scoped_name() {
	    return this.getTypedRuleContext(Scoped_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterStruct_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitStruct_type(this);
		}
	}


}



class Member_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_member_list;
    }

	member = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MemberContext);
	    } else {
	        return this.getTypedRuleContext(MemberContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterMember_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitMember_list(this);
		}
	}


}



class MemberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_member;
    }

	annapps() {
	    return this.getTypedRuleContext(AnnappsContext,0);
	};

	type_spec() {
	    return this.getTypedRuleContext(Type_specContext,0);
	};

	declarators() {
	    return this.getTypedRuleContext(DeclaratorsContext,0);
	};

	SEMICOLON() {
	    return this.getToken(IDLParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterMember(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitMember(this);
		}
	}


}



class Union_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_union_type;
    }

	KW_UNION() {
	    return this.getToken(IDLParser.KW_UNION, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_SWITCH() {
	    return this.getToken(IDLParser.KW_SWITCH, 0);
	};

	LEFT_BRACKET() {
	    return this.getToken(IDLParser.LEFT_BRACKET, 0);
	};

	annapps() {
	    return this.getTypedRuleContext(AnnappsContext,0);
	};

	switch_type_spec() {
	    return this.getTypedRuleContext(Switch_type_specContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(IDLParser.RIGHT_BRACKET, 0);
	};

	LEFT_BRACE() {
	    return this.getToken(IDLParser.LEFT_BRACE, 0);
	};

	switch_body() {
	    return this.getTypedRuleContext(Switch_bodyContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(IDLParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterUnion_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitUnion_type(this);
		}
	}


}



class Switch_type_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_switch_type_spec;
    }

	integer_type() {
	    return this.getTypedRuleContext(Integer_typeContext,0);
	};

	char_type() {
	    return this.getTypedRuleContext(Char_typeContext,0);
	};

	wide_char_type() {
	    return this.getTypedRuleContext(Wide_char_typeContext,0);
	};

	octet_type() {
	    return this.getTypedRuleContext(Octet_typeContext,0);
	};

	boolean_type() {
	    return this.getTypedRuleContext(Boolean_typeContext,0);
	};

	enum_type() {
	    return this.getTypedRuleContext(Enum_typeContext,0);
	};

	scoped_name() {
	    return this.getTypedRuleContext(Scoped_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterSwitch_type_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitSwitch_type_spec(this);
		}
	}


}



class Switch_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_switch_body;
    }

	case_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Case_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Case_stmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterSwitch_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitSwitch_body(this);
		}
	}


}



class Case_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_case_stmt;
    }

	element_spec() {
	    return this.getTypedRuleContext(Element_specContext,0);
	};

	SEMICOLON() {
	    return this.getToken(IDLParser.SEMICOLON, 0);
	};

	case_label = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Case_labelContext);
	    } else {
	        return this.getTypedRuleContext(Case_labelContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterCase_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitCase_stmt(this);
		}
	}


}



class Case_labelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_case_label;
    }

	annapps() {
	    return this.getTypedRuleContext(AnnappsContext,0);
	};

	KW_CASE() {
	    return this.getToken(IDLParser.KW_CASE, 0);
	};

	const_exp() {
	    return this.getTypedRuleContext(Const_expContext,0);
	};

	COLON() {
	    return this.getToken(IDLParser.COLON, 0);
	};

	KW_DEFAULT() {
	    return this.getToken(IDLParser.KW_DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterCase_label(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitCase_label(this);
		}
	}


}



class Element_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_element_spec;
    }

	annapps() {
	    return this.getTypedRuleContext(AnnappsContext,0);
	};

	type_spec() {
	    return this.getTypedRuleContext(Type_specContext,0);
	};

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterElement_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitElement_spec(this);
		}
	}


}



class Enum_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_enum_type;
    }

	KW_ENUM() {
	    return this.getToken(IDLParser.KW_ENUM, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LEFT_BRACE() {
	    return this.getToken(IDLParser.LEFT_BRACE, 0);
	};

	enumerator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumeratorContext);
	    } else {
	        return this.getTypedRuleContext(EnumeratorContext,i);
	    }
	};

	RIGHT_BRACE() {
	    return this.getToken(IDLParser.RIGHT_BRACE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.COMMA);
	    } else {
	        return this.getToken(IDLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterEnum_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitEnum_type(this);
		}
	}


}



class EnumeratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_enumerator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterEnumerator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitEnumerator(this);
		}
	}


}



class Sequence_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_sequence_type;
    }

	KW_SEQUENCE() {
	    return this.getToken(IDLParser.KW_SEQUENCE, 0);
	};

	LEFT_ANG_BRACKET() {
	    return this.getToken(IDLParser.LEFT_ANG_BRACKET, 0);
	};

	annapps() {
	    return this.getTypedRuleContext(AnnappsContext,0);
	};

	simple_type_spec() {
	    return this.getTypedRuleContext(Simple_type_specContext,0);
	};

	RIGHT_ANG_BRACKET() {
	    return this.getToken(IDLParser.RIGHT_ANG_BRACKET, 0);
	};

	COMMA() {
	    return this.getToken(IDLParser.COMMA, 0);
	};

	positive_int_const() {
	    return this.getTypedRuleContext(Positive_int_constContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterSequence_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitSequence_type(this);
		}
	}


}



class Set_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_set_type;
    }

	KW_SET() {
	    return this.getToken(IDLParser.KW_SET, 0);
	};

	LEFT_ANG_BRACKET() {
	    return this.getToken(IDLParser.LEFT_ANG_BRACKET, 0);
	};

	simple_type_spec() {
	    return this.getTypedRuleContext(Simple_type_specContext,0);
	};

	RIGHT_ANG_BRACKET() {
	    return this.getToken(IDLParser.RIGHT_ANG_BRACKET, 0);
	};

	COMMA() {
	    return this.getToken(IDLParser.COMMA, 0);
	};

	positive_int_const() {
	    return this.getTypedRuleContext(Positive_int_constContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterSet_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitSet_type(this);
		}
	}


}



class Map_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_map_type;
    }

	KW_MAP() {
	    return this.getToken(IDLParser.KW_MAP, 0);
	};

	LEFT_ANG_BRACKET() {
	    return this.getToken(IDLParser.LEFT_ANG_BRACKET, 0);
	};

	simple_type_spec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Simple_type_specContext);
	    } else {
	        return this.getTypedRuleContext(Simple_type_specContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.COMMA);
	    } else {
	        return this.getToken(IDLParser.COMMA, i);
	    }
	};


	RIGHT_ANG_BRACKET() {
	    return this.getToken(IDLParser.RIGHT_ANG_BRACKET, 0);
	};

	positive_int_const() {
	    return this.getTypedRuleContext(Positive_int_constContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterMap_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitMap_type(this);
		}
	}


}



class String_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_string_type;
    }

	KW_STRING() {
	    return this.getToken(IDLParser.KW_STRING, 0);
	};

	LEFT_ANG_BRACKET() {
	    return this.getToken(IDLParser.LEFT_ANG_BRACKET, 0);
	};

	positive_int_const() {
	    return this.getTypedRuleContext(Positive_int_constContext,0);
	};

	RIGHT_ANG_BRACKET() {
	    return this.getToken(IDLParser.RIGHT_ANG_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterString_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitString_type(this);
		}
	}


}



class Wide_string_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_wide_string_type;
    }

	KW_WSTRING() {
	    return this.getToken(IDLParser.KW_WSTRING, 0);
	};

	LEFT_ANG_BRACKET() {
	    return this.getToken(IDLParser.LEFT_ANG_BRACKET, 0);
	};

	positive_int_const() {
	    return this.getTypedRuleContext(Positive_int_constContext,0);
	};

	RIGHT_ANG_BRACKET() {
	    return this.getToken(IDLParser.RIGHT_ANG_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterWide_string_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitWide_string_type(this);
		}
	}


}



class Array_declaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_array_declarator;
    }

	ID() {
	    return this.getToken(IDLParser.ID, 0);
	};

	fixed_array_size = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fixed_array_sizeContext);
	    } else {
	        return this.getTypedRuleContext(Fixed_array_sizeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterArray_declarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitArray_declarator(this);
		}
	}


}



class Fixed_array_sizeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_fixed_array_size;
    }

	LEFT_SQUARE_BRACKET() {
	    return this.getToken(IDLParser.LEFT_SQUARE_BRACKET, 0);
	};

	positive_int_const() {
	    return this.getTypedRuleContext(Positive_int_constContext,0);
	};

	RIGHT_SQUARE_BRACKET() {
	    return this.getToken(IDLParser.RIGHT_SQUARE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterFixed_array_size(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitFixed_array_size(this);
		}
	}


}



class Attr_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_attr_decl;
    }

	readonly_attr_spec() {
	    return this.getTypedRuleContext(Readonly_attr_specContext,0);
	};

	attr_spec() {
	    return this.getTypedRuleContext(Attr_specContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterAttr_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitAttr_decl(this);
		}
	}


}



class Except_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_except_decl;
    }

	KW_EXCEPTION() {
	    return this.getToken(IDLParser.KW_EXCEPTION, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LEFT_BRACE() {
	    return this.getToken(IDLParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(IDLParser.RIGHT_BRACE, 0);
	};

	member = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MemberContext);
	    } else {
	        return this.getTypedRuleContext(MemberContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterExcept_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitExcept_decl(this);
		}
	}


}



class Op_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_op_decl;
    }

	op_type_spec() {
	    return this.getTypedRuleContext(Op_type_specContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	parameter_decls() {
	    return this.getTypedRuleContext(Parameter_declsContext,0);
	};

	op_attribute() {
	    return this.getTypedRuleContext(Op_attributeContext,0);
	};

	raises_expr() {
	    return this.getTypedRuleContext(Raises_exprContext,0);
	};

	context_expr() {
	    return this.getTypedRuleContext(Context_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterOp_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitOp_decl(this);
		}
	}


}



class Op_attributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_op_attribute;
    }

	KW_ONEWAY() {
	    return this.getToken(IDLParser.KW_ONEWAY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterOp_attribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitOp_attribute(this);
		}
	}


}



class Op_type_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_op_type_spec;
    }

	annapps() {
	    return this.getTypedRuleContext(AnnappsContext,0);
	};

	param_type_spec() {
	    return this.getTypedRuleContext(Param_type_specContext,0);
	};

	KW_VOID() {
	    return this.getToken(IDLParser.KW_VOID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterOp_type_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitOp_type_spec(this);
		}
	}


}



class Parameter_declsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_parameter_decls;
    }

	LEFT_BRACKET() {
	    return this.getToken(IDLParser.LEFT_BRACKET, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(IDLParser.RIGHT_BRACKET, 0);
	};

	param_decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Param_declContext);
	    } else {
	        return this.getTypedRuleContext(Param_declContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.COMMA);
	    } else {
	        return this.getToken(IDLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterParameter_decls(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitParameter_decls(this);
		}
	}


}



class Param_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_param_decl;
    }

	annapps = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnappsContext);
	    } else {
	        return this.getTypedRuleContext(AnnappsContext,i);
	    }
	};

	param_attribute() {
	    return this.getTypedRuleContext(Param_attributeContext,0);
	};

	param_type_spec() {
	    return this.getTypedRuleContext(Param_type_specContext,0);
	};

	simple_declarator() {
	    return this.getTypedRuleContext(Simple_declaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterParam_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitParam_decl(this);
		}
	}


}



class Param_attributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_param_attribute;
    }

	KW_IN() {
	    return this.getToken(IDLParser.KW_IN, 0);
	};

	KW_OUT() {
	    return this.getToken(IDLParser.KW_OUT, 0);
	};

	KW_INOUT() {
	    return this.getToken(IDLParser.KW_INOUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterParam_attribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitParam_attribute(this);
		}
	}


}



class Raises_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_raises_expr;
    }

	KW_RAISES() {
	    return this.getToken(IDLParser.KW_RAISES, 0);
	};

	LEFT_BRACKET() {
	    return this.getToken(IDLParser.LEFT_BRACKET, 0);
	};

	a_scoped_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(A_scoped_nameContext);
	    } else {
	        return this.getTypedRuleContext(A_scoped_nameContext,i);
	    }
	};

	RIGHT_BRACKET() {
	    return this.getToken(IDLParser.RIGHT_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.COMMA);
	    } else {
	        return this.getToken(IDLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterRaises_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitRaises_expr(this);
		}
	}


}



class Context_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_context_expr;
    }

	KW_CONTEXT() {
	    return this.getToken(IDLParser.KW_CONTEXT, 0);
	};

	LEFT_BRACKET() {
	    return this.getToken(IDLParser.LEFT_BRACKET, 0);
	};

	STRING_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.STRING_LITERAL);
	    } else {
	        return this.getToken(IDLParser.STRING_LITERAL, i);
	    }
	};


	RIGHT_BRACKET() {
	    return this.getToken(IDLParser.RIGHT_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.COMMA);
	    } else {
	        return this.getToken(IDLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterContext_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitContext_expr(this);
		}
	}


}



class Param_type_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_param_type_spec;
    }

	base_type_spec() {
	    return this.getTypedRuleContext(Base_type_specContext,0);
	};

	string_type() {
	    return this.getTypedRuleContext(String_typeContext,0);
	};

	wide_string_type() {
	    return this.getTypedRuleContext(Wide_string_typeContext,0);
	};

	scoped_name() {
	    return this.getTypedRuleContext(Scoped_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterParam_type_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitParam_type_spec(this);
		}
	}


}



class Fixed_pt_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_fixed_pt_type;
    }

	KW_FIXED() {
	    return this.getToken(IDLParser.KW_FIXED, 0);
	};

	LEFT_ANG_BRACKET() {
	    return this.getToken(IDLParser.LEFT_ANG_BRACKET, 0);
	};

	positive_int_const = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Positive_int_constContext);
	    } else {
	        return this.getTypedRuleContext(Positive_int_constContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(IDLParser.COMMA, 0);
	};

	RIGHT_ANG_BRACKET() {
	    return this.getToken(IDLParser.RIGHT_ANG_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterFixed_pt_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitFixed_pt_type(this);
		}
	}


}



class Fixed_pt_const_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_fixed_pt_const_type;
    }

	KW_FIXED() {
	    return this.getToken(IDLParser.KW_FIXED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterFixed_pt_const_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitFixed_pt_const_type(this);
		}
	}


}



class Value_base_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_value_base_type;
    }

	KW_VALUEBASE() {
	    return this.getToken(IDLParser.KW_VALUEBASE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterValue_base_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitValue_base_type(this);
		}
	}


}



class Constr_forward_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_constr_forward_decl;
    }

	KW_STRUCT() {
	    return this.getToken(IDLParser.KW_STRUCT, 0);
	};

	ID() {
	    return this.getToken(IDLParser.ID, 0);
	};

	KW_UNION() {
	    return this.getToken(IDLParser.KW_UNION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterConstr_forward_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitConstr_forward_decl(this);
		}
	}


}



class Import_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_import_decl;
    }

	annapps = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnappsContext);
	    } else {
	        return this.getTypedRuleContext(AnnappsContext,i);
	    }
	};

	KW_IMPORT() {
	    return this.getToken(IDLParser.KW_IMPORT, 0);
	};

	imported_scope() {
	    return this.getTypedRuleContext(Imported_scopeContext,0);
	};

	SEMICOLON() {
	    return this.getToken(IDLParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterImport_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitImport_decl(this);
		}
	}


}



class Imported_scopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_imported_scope;
    }

	scoped_name() {
	    return this.getTypedRuleContext(Scoped_nameContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(IDLParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterImported_scope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitImported_scope(this);
		}
	}


}



class Type_id_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_type_id_decl;
    }

	KW_TYPEID() {
	    return this.getToken(IDLParser.KW_TYPEID, 0);
	};

	a_scoped_name() {
	    return this.getTypedRuleContext(A_scoped_nameContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(IDLParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterType_id_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitType_id_decl(this);
		}
	}


}



class Type_prefix_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_type_prefix_decl;
    }

	KW_TYPEPREFIX() {
	    return this.getToken(IDLParser.KW_TYPEPREFIX, 0);
	};

	a_scoped_name() {
	    return this.getTypedRuleContext(A_scoped_nameContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(IDLParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterType_prefix_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitType_prefix_decl(this);
		}
	}


}



class Readonly_attr_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_readonly_attr_spec;
    }

	KW_READONLY() {
	    return this.getToken(IDLParser.KW_READONLY, 0);
	};

	KW_ATTRIBUTE() {
	    return this.getToken(IDLParser.KW_ATTRIBUTE, 0);
	};

	annapps() {
	    return this.getTypedRuleContext(AnnappsContext,0);
	};

	param_type_spec() {
	    return this.getTypedRuleContext(Param_type_specContext,0);
	};

	readonly_attr_declarator() {
	    return this.getTypedRuleContext(Readonly_attr_declaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterReadonly_attr_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitReadonly_attr_spec(this);
		}
	}


}



class Readonly_attr_declaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_readonly_attr_declarator;
    }

	annapps = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnappsContext);
	    } else {
	        return this.getTypedRuleContext(AnnappsContext,i);
	    }
	};

	simple_declarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Simple_declaratorContext);
	    } else {
	        return this.getTypedRuleContext(Simple_declaratorContext,i);
	    }
	};

	raises_expr() {
	    return this.getTypedRuleContext(Raises_exprContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.COMMA);
	    } else {
	        return this.getToken(IDLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterReadonly_attr_declarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitReadonly_attr_declarator(this);
		}
	}


}



class Attr_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_attr_spec;
    }

	KW_ATTRIBUTE() {
	    return this.getToken(IDLParser.KW_ATTRIBUTE, 0);
	};

	annapps() {
	    return this.getTypedRuleContext(AnnappsContext,0);
	};

	param_type_spec() {
	    return this.getTypedRuleContext(Param_type_specContext,0);
	};

	attr_declarator() {
	    return this.getTypedRuleContext(Attr_declaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterAttr_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitAttr_spec(this);
		}
	}


}



class Attr_declaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_attr_declarator;
    }

	annapps = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnappsContext);
	    } else {
	        return this.getTypedRuleContext(AnnappsContext,i);
	    }
	};

	simple_declarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Simple_declaratorContext);
	    } else {
	        return this.getTypedRuleContext(Simple_declaratorContext,i);
	    }
	};

	attr_raises_expr() {
	    return this.getTypedRuleContext(Attr_raises_exprContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.COMMA);
	    } else {
	        return this.getToken(IDLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterAttr_declarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitAttr_declarator(this);
		}
	}


}



class Attr_raises_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_attr_raises_expr;
    }

	get_excep_expr() {
	    return this.getTypedRuleContext(Get_excep_exprContext,0);
	};

	set_excep_expr() {
	    return this.getTypedRuleContext(Set_excep_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterAttr_raises_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitAttr_raises_expr(this);
		}
	}


}



class Get_excep_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_get_excep_expr;
    }

	KW_GETRAISES() {
	    return this.getToken(IDLParser.KW_GETRAISES, 0);
	};

	exception_list() {
	    return this.getTypedRuleContext(Exception_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterGet_excep_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitGet_excep_expr(this);
		}
	}


}



class Set_excep_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_set_excep_expr;
    }

	KW_SETRAISES() {
	    return this.getToken(IDLParser.KW_SETRAISES, 0);
	};

	exception_list() {
	    return this.getTypedRuleContext(Exception_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterSet_excep_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitSet_excep_expr(this);
		}
	}


}



class Exception_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_exception_list;
    }

	LEFT_BRACKET() {
	    return this.getToken(IDLParser.LEFT_BRACKET, 0);
	};

	a_scoped_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(A_scoped_nameContext);
	    } else {
	        return this.getTypedRuleContext(A_scoped_nameContext,i);
	    }
	};

	RIGHT_BRACKET() {
	    return this.getToken(IDLParser.RIGHT_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.COMMA);
	    } else {
	        return this.getToken(IDLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterException_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitException_list(this);
		}
	}


}



class ComponentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_component;
    }

	component_decl() {
	    return this.getTypedRuleContext(Component_declContext,0);
	};

	component_forward_decl() {
	    return this.getTypedRuleContext(Component_forward_declContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterComponent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitComponent(this);
		}
	}


}



class Component_forward_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_component_forward_decl;
    }

	KW_COMPONENT() {
	    return this.getToken(IDLParser.KW_COMPONENT, 0);
	};

	ID() {
	    return this.getToken(IDLParser.ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterComponent_forward_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitComponent_forward_decl(this);
		}
	}


}



class Component_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_component_decl;
    }

	component_header() {
	    return this.getTypedRuleContext(Component_headerContext,0);
	};

	LEFT_BRACE() {
	    return this.getToken(IDLParser.LEFT_BRACE, 0);
	};

	component_body() {
	    return this.getTypedRuleContext(Component_bodyContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(IDLParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterComponent_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitComponent_decl(this);
		}
	}


}



class Component_headerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_component_header;
    }

	KW_COMPONENT() {
	    return this.getToken(IDLParser.KW_COMPONENT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	component_inheritance_spec() {
	    return this.getTypedRuleContext(Component_inheritance_specContext,0);
	};

	supported_interface_spec() {
	    return this.getTypedRuleContext(Supported_interface_specContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterComponent_header(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitComponent_header(this);
		}
	}


}



class Supported_interface_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_supported_interface_spec;
    }

	KW_SUPPORTS() {
	    return this.getToken(IDLParser.KW_SUPPORTS, 0);
	};

	a_scoped_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(A_scoped_nameContext);
	    } else {
	        return this.getTypedRuleContext(A_scoped_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.COMMA);
	    } else {
	        return this.getToken(IDLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterSupported_interface_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitSupported_interface_spec(this);
		}
	}


}



class Component_inheritance_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_component_inheritance_spec;
    }

	COLON() {
	    return this.getToken(IDLParser.COLON, 0);
	};

	a_scoped_name() {
	    return this.getTypedRuleContext(A_scoped_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterComponent_inheritance_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitComponent_inheritance_spec(this);
		}
	}


}



class Component_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_component_body;
    }

	component_export = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Component_exportContext);
	    } else {
	        return this.getTypedRuleContext(Component_exportContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterComponent_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitComponent_body(this);
		}
	}


}



class Component_exportContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_component_export;
    }

	annapps() {
	    return this.getTypedRuleContext(AnnappsContext,0);
	};

	provides_decl() {
	    return this.getTypedRuleContext(Provides_declContext,0);
	};

	SEMICOLON() {
	    return this.getToken(IDLParser.SEMICOLON, 0);
	};

	uses_decl() {
	    return this.getTypedRuleContext(Uses_declContext,0);
	};

	emits_decl() {
	    return this.getTypedRuleContext(Emits_declContext,0);
	};

	publishes_decl() {
	    return this.getTypedRuleContext(Publishes_declContext,0);
	};

	consumes_decl() {
	    return this.getTypedRuleContext(Consumes_declContext,0);
	};

	attr_decl() {
	    return this.getTypedRuleContext(Attr_declContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterComponent_export(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitComponent_export(this);
		}
	}


}



class Provides_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_provides_decl;
    }

	KW_PROVIDES() {
	    return this.getToken(IDLParser.KW_PROVIDES, 0);
	};

	interface_type() {
	    return this.getTypedRuleContext(Interface_typeContext,0);
	};

	ID() {
	    return this.getToken(IDLParser.ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterProvides_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitProvides_decl(this);
		}
	}


}



class Interface_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_interface_type;
    }

	annapps() {
	    return this.getTypedRuleContext(AnnappsContext,0);
	};

	scoped_name() {
	    return this.getTypedRuleContext(Scoped_nameContext,0);
	};

	KW_OBJECT() {
	    return this.getToken(IDLParser.KW_OBJECT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterInterface_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitInterface_type(this);
		}
	}


}



class Uses_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_uses_decl;
    }

	KW_USES() {
	    return this.getToken(IDLParser.KW_USES, 0);
	};

	interface_type() {
	    return this.getTypedRuleContext(Interface_typeContext,0);
	};

	ID() {
	    return this.getToken(IDLParser.ID, 0);
	};

	KW_MULTIPLE() {
	    return this.getToken(IDLParser.KW_MULTIPLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterUses_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitUses_decl(this);
		}
	}


}



class Emits_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_emits_decl;
    }

	KW_EMITS() {
	    return this.getToken(IDLParser.KW_EMITS, 0);
	};

	a_scoped_name() {
	    return this.getTypedRuleContext(A_scoped_nameContext,0);
	};

	ID() {
	    return this.getToken(IDLParser.ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterEmits_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitEmits_decl(this);
		}
	}


}



class Publishes_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_publishes_decl;
    }

	KW_PUBLISHES() {
	    return this.getToken(IDLParser.KW_PUBLISHES, 0);
	};

	a_scoped_name() {
	    return this.getTypedRuleContext(A_scoped_nameContext,0);
	};

	ID() {
	    return this.getToken(IDLParser.ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterPublishes_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitPublishes_decl(this);
		}
	}


}



class Consumes_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_consumes_decl;
    }

	KW_CONSUMES() {
	    return this.getToken(IDLParser.KW_CONSUMES, 0);
	};

	a_scoped_name() {
	    return this.getTypedRuleContext(A_scoped_nameContext,0);
	};

	ID() {
	    return this.getToken(IDLParser.ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterConsumes_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitConsumes_decl(this);
		}
	}


}



class Home_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_home_decl;
    }

	home_header() {
	    return this.getTypedRuleContext(Home_headerContext,0);
	};

	home_body() {
	    return this.getTypedRuleContext(Home_bodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterHome_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitHome_decl(this);
		}
	}


}



class Home_headerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_home_header;
    }

	KW_HOME() {
	    return this.getToken(IDLParser.KW_HOME, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_MANAGES() {
	    return this.getToken(IDLParser.KW_MANAGES, 0);
	};

	a_scoped_name() {
	    return this.getTypedRuleContext(A_scoped_nameContext,0);
	};

	home_inheritance_spec() {
	    return this.getTypedRuleContext(Home_inheritance_specContext,0);
	};

	supported_interface_spec() {
	    return this.getTypedRuleContext(Supported_interface_specContext,0);
	};

	primary_key_spec() {
	    return this.getTypedRuleContext(Primary_key_specContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterHome_header(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitHome_header(this);
		}
	}


}



class Home_inheritance_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_home_inheritance_spec;
    }

	COLON() {
	    return this.getToken(IDLParser.COLON, 0);
	};

	a_scoped_name() {
	    return this.getTypedRuleContext(A_scoped_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterHome_inheritance_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitHome_inheritance_spec(this);
		}
	}


}



class Primary_key_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_primary_key_spec;
    }

	KW_PRIMARYKEY() {
	    return this.getToken(IDLParser.KW_PRIMARYKEY, 0);
	};

	a_scoped_name() {
	    return this.getTypedRuleContext(A_scoped_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterPrimary_key_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitPrimary_key_spec(this);
		}
	}


}



class Home_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_home_body;
    }

	LEFT_BRACE() {
	    return this.getToken(IDLParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(IDLParser.RIGHT_BRACE, 0);
	};

	home_export = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Home_exportContext);
	    } else {
	        return this.getTypedRuleContext(Home_exportContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterHome_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitHome_body(this);
		}
	}


}



class Home_exportContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_home_export;
    }

	export_() {
	    return this.getTypedRuleContext(Export_Context,0);
	};

	annapps() {
	    return this.getTypedRuleContext(AnnappsContext,0);
	};

	SEMICOLON() {
	    return this.getToken(IDLParser.SEMICOLON, 0);
	};

	factory_decl() {
	    return this.getTypedRuleContext(Factory_declContext,0);
	};

	finder_decl() {
	    return this.getTypedRuleContext(Finder_declContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterHome_export(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitHome_export(this);
		}
	}


}



class Factory_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_factory_decl;
    }

	KW_FACTORY() {
	    return this.getToken(IDLParser.KW_FACTORY, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LEFT_BRACKET() {
	    return this.getToken(IDLParser.LEFT_BRACKET, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(IDLParser.RIGHT_BRACKET, 0);
	};

	init_param_decls() {
	    return this.getTypedRuleContext(Init_param_declsContext,0);
	};

	raises_expr() {
	    return this.getTypedRuleContext(Raises_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterFactory_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitFactory_decl(this);
		}
	}


}



class Finder_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_finder_decl;
    }

	KW_FINDER() {
	    return this.getToken(IDLParser.KW_FINDER, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LEFT_BRACKET() {
	    return this.getToken(IDLParser.LEFT_BRACKET, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(IDLParser.RIGHT_BRACKET, 0);
	};

	init_param_decls() {
	    return this.getTypedRuleContext(Init_param_declsContext,0);
	};

	raises_expr() {
	    return this.getTypedRuleContext(Raises_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterFinder_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitFinder_decl(this);
		}
	}


}



class EventContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_event;
    }

	event_decl() {
	    return this.getTypedRuleContext(Event_declContext,0);
	};

	event_abs_decl() {
	    return this.getTypedRuleContext(Event_abs_declContext,0);
	};

	event_forward_decl() {
	    return this.getTypedRuleContext(Event_forward_declContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterEvent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitEvent(this);
		}
	}


}



class Event_forward_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_event_forward_decl;
    }

	KW_EVENTTYPE() {
	    return this.getToken(IDLParser.KW_EVENTTYPE, 0);
	};

	ID() {
	    return this.getToken(IDLParser.ID, 0);
	};

	KW_ABSTRACT() {
	    return this.getToken(IDLParser.KW_ABSTRACT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterEvent_forward_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitEvent_forward_decl(this);
		}
	}


}



class Event_abs_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_event_abs_decl;
    }

	KW_ABSTRACT() {
	    return this.getToken(IDLParser.KW_ABSTRACT, 0);
	};

	KW_EVENTTYPE() {
	    return this.getToken(IDLParser.KW_EVENTTYPE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	value_inheritance_spec() {
	    return this.getTypedRuleContext(Value_inheritance_specContext,0);
	};

	LEFT_BRACE() {
	    return this.getToken(IDLParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(IDLParser.RIGHT_BRACE, 0);
	};

	export_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Export_Context);
	    } else {
	        return this.getTypedRuleContext(Export_Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterEvent_abs_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitEvent_abs_decl(this);
		}
	}


}



class Event_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_event_decl;
    }

	event_header() {
	    return this.getTypedRuleContext(Event_headerContext,0);
	};

	LEFT_BRACE() {
	    return this.getToken(IDLParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(IDLParser.RIGHT_BRACE, 0);
	};

	value_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Value_elementContext);
	    } else {
	        return this.getTypedRuleContext(Value_elementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterEvent_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitEvent_decl(this);
		}
	}


}



class Event_headerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_event_header;
    }

	KW_EVENTTYPE() {
	    return this.getToken(IDLParser.KW_EVENTTYPE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	value_inheritance_spec() {
	    return this.getTypedRuleContext(Value_inheritance_specContext,0);
	};

	KW_CUSTOM() {
	    return this.getToken(IDLParser.KW_CUSTOM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterEvent_header(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitEvent_header(this);
		}
	}


}



class AnnappsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_annapps;
    }

	annotation_appl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Annotation_applContext);
	    } else {
	        return this.getTypedRuleContext(Annotation_applContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterAnnapps(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitAnnapps(this);
		}
	}


}



class Annotation_applContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_annotation_appl;
    }

	AT() {
	    return this.getToken(IDLParser.AT, 0);
	};

	scoped_name() {
	    return this.getTypedRuleContext(Scoped_nameContext,0);
	};

	LEFT_BRACKET() {
	    return this.getToken(IDLParser.LEFT_BRACKET, 0);
	};

	annotation_appl_params() {
	    return this.getTypedRuleContext(Annotation_appl_paramsContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(IDLParser.RIGHT_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterAnnotation_appl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitAnnotation_appl(this);
		}
	}


}



class Annotation_appl_paramsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_annotation_appl_params;
    }

	const_exp() {
	    return this.getTypedRuleContext(Const_expContext,0);
	};

	annotation_appl_param = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Annotation_appl_paramContext);
	    } else {
	        return this.getTypedRuleContext(Annotation_appl_paramContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(IDLParser.COMMA);
	    } else {
	        return this.getToken(IDLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterAnnotation_appl_params(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitAnnotation_appl_params(this);
		}
	}


}



class Annotation_appl_paramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_annotation_appl_param;
    }

	ID() {
	    return this.getToken(IDLParser.ID, 0);
	};

	EQUAL() {
	    return this.getToken(IDLParser.EQUAL, 0);
	};

	const_exp() {
	    return this.getTypedRuleContext(Const_expContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterAnnotation_appl_param(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitAnnotation_appl_param(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = IDLParser.RULE_identifier;
    }

	annapps() {
	    return this.getTypedRuleContext(AnnappsContext,0);
	};

	ID() {
	    return this.getToken(IDLParser.ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof IDLListener ) {
	        listener.exitIdentifier(this);
		}
	}


}




IDLParser.SpecificationContext = SpecificationContext; 
IDLParser.DefinitionContext = DefinitionContext; 
IDLParser.ModuleContext = ModuleContext; 
IDLParser.Interface_or_forward_declContext = Interface_or_forward_declContext; 
IDLParser.Interface_declContext = Interface_declContext; 
IDLParser.Forward_declContext = Forward_declContext; 
IDLParser.Interface_headerContext = Interface_headerContext; 
IDLParser.Interface_bodyContext = Interface_bodyContext; 
IDLParser.Export_Context = Export_Context; 
IDLParser.Interface_inheritance_specContext = Interface_inheritance_specContext; 
IDLParser.Interface_nameContext = Interface_nameContext; 
IDLParser.A_scoped_nameContext = A_scoped_nameContext; 
IDLParser.Scoped_nameContext = Scoped_nameContext; 
IDLParser.ValueContext = ValueContext; 
IDLParser.Value_forward_declContext = Value_forward_declContext; 
IDLParser.Value_box_declContext = Value_box_declContext; 
IDLParser.Value_abs_declContext = Value_abs_declContext; 
IDLParser.Value_declContext = Value_declContext; 
IDLParser.Value_headerContext = Value_headerContext; 
IDLParser.Value_inheritance_specContext = Value_inheritance_specContext; 
IDLParser.Value_nameContext = Value_nameContext; 
IDLParser.Value_elementContext = Value_elementContext; 
IDLParser.State_memberContext = State_memberContext; 
IDLParser.Init_declContext = Init_declContext; 
IDLParser.Init_param_declsContext = Init_param_declsContext; 
IDLParser.Init_param_declContext = Init_param_declContext; 
IDLParser.Init_param_attributeContext = Init_param_attributeContext; 
IDLParser.Const_declContext = Const_declContext; 
IDLParser.Const_typeContext = Const_typeContext; 
IDLParser.Const_expContext = Const_expContext; 
IDLParser.Or_exprContext = Or_exprContext; 
IDLParser.Xor_exprContext = Xor_exprContext; 
IDLParser.And_exprContext = And_exprContext; 
IDLParser.Shift_exprContext = Shift_exprContext; 
IDLParser.Add_exprContext = Add_exprContext; 
IDLParser.Mult_exprContext = Mult_exprContext; 
IDLParser.Unary_exprContext = Unary_exprContext; 
IDLParser.Unary_operatorContext = Unary_operatorContext; 
IDLParser.Primary_exprContext = Primary_exprContext; 
IDLParser.LiteralContext = LiteralContext; 
IDLParser.Positive_int_constContext = Positive_int_constContext; 
IDLParser.Type_declContext = Type_declContext; 
IDLParser.Type_declaratorContext = Type_declaratorContext; 
IDLParser.Type_specContext = Type_specContext; 
IDLParser.Simple_type_specContext = Simple_type_specContext; 
IDLParser.Bitfield_type_specContext = Bitfield_type_specContext; 
IDLParser.Base_type_specContext = Base_type_specContext; 
IDLParser.Template_type_specContext = Template_type_specContext; 
IDLParser.Constr_type_specContext = Constr_type_specContext; 
IDLParser.Simple_declaratorsContext = Simple_declaratorsContext; 
IDLParser.DeclaratorsContext = DeclaratorsContext; 
IDLParser.DeclaratorContext = DeclaratorContext; 
IDLParser.Simple_declaratorContext = Simple_declaratorContext; 
IDLParser.Complex_declaratorContext = Complex_declaratorContext; 
IDLParser.Floating_pt_typeContext = Floating_pt_typeContext; 
IDLParser.Integer_typeContext = Integer_typeContext; 
IDLParser.Signed_intContext = Signed_intContext; 
IDLParser.Signed_tiny_intContext = Signed_tiny_intContext; 
IDLParser.Signed_short_intContext = Signed_short_intContext; 
IDLParser.Signed_long_intContext = Signed_long_intContext; 
IDLParser.Signed_longlong_intContext = Signed_longlong_intContext; 
IDLParser.Unsigned_intContext = Unsigned_intContext; 
IDLParser.Unsigned_tiny_intContext = Unsigned_tiny_intContext; 
IDLParser.Unsigned_short_intContext = Unsigned_short_intContext; 
IDLParser.Unsigned_long_intContext = Unsigned_long_intContext; 
IDLParser.Unsigned_longlong_intContext = Unsigned_longlong_intContext; 
IDLParser.Char_typeContext = Char_typeContext; 
IDLParser.Wide_char_typeContext = Wide_char_typeContext; 
IDLParser.Boolean_typeContext = Boolean_typeContext; 
IDLParser.Octet_typeContext = Octet_typeContext; 
IDLParser.Any_typeContext = Any_typeContext; 
IDLParser.Object_typeContext = Object_typeContext; 
IDLParser.Annotation_declContext = Annotation_declContext; 
IDLParser.Annotation_defContext = Annotation_defContext; 
IDLParser.Annotation_headerContext = Annotation_headerContext; 
IDLParser.Annotation_inheritance_specContext = Annotation_inheritance_specContext; 
IDLParser.Annotation_bodyContext = Annotation_bodyContext; 
IDLParser.Annotation_memberContext = Annotation_memberContext; 
IDLParser.Annotation_forward_dclContext = Annotation_forward_dclContext; 
IDLParser.Bitset_typeContext = Bitset_typeContext; 
IDLParser.BitfieldContext = BitfieldContext; 
IDLParser.Bitfield_specContext = Bitfield_specContext; 
IDLParser.Bitmask_typeContext = Bitmask_typeContext; 
IDLParser.Bit_valuesContext = Bit_valuesContext; 
IDLParser.Struct_typeContext = Struct_typeContext; 
IDLParser.Member_listContext = Member_listContext; 
IDLParser.MemberContext = MemberContext; 
IDLParser.Union_typeContext = Union_typeContext; 
IDLParser.Switch_type_specContext = Switch_type_specContext; 
IDLParser.Switch_bodyContext = Switch_bodyContext; 
IDLParser.Case_stmtContext = Case_stmtContext; 
IDLParser.Case_labelContext = Case_labelContext; 
IDLParser.Element_specContext = Element_specContext; 
IDLParser.Enum_typeContext = Enum_typeContext; 
IDLParser.EnumeratorContext = EnumeratorContext; 
IDLParser.Sequence_typeContext = Sequence_typeContext; 
IDLParser.Set_typeContext = Set_typeContext; 
IDLParser.Map_typeContext = Map_typeContext; 
IDLParser.String_typeContext = String_typeContext; 
IDLParser.Wide_string_typeContext = Wide_string_typeContext; 
IDLParser.Array_declaratorContext = Array_declaratorContext; 
IDLParser.Fixed_array_sizeContext = Fixed_array_sizeContext; 
IDLParser.Attr_declContext = Attr_declContext; 
IDLParser.Except_declContext = Except_declContext; 
IDLParser.Op_declContext = Op_declContext; 
IDLParser.Op_attributeContext = Op_attributeContext; 
IDLParser.Op_type_specContext = Op_type_specContext; 
IDLParser.Parameter_declsContext = Parameter_declsContext; 
IDLParser.Param_declContext = Param_declContext; 
IDLParser.Param_attributeContext = Param_attributeContext; 
IDLParser.Raises_exprContext = Raises_exprContext; 
IDLParser.Context_exprContext = Context_exprContext; 
IDLParser.Param_type_specContext = Param_type_specContext; 
IDLParser.Fixed_pt_typeContext = Fixed_pt_typeContext; 
IDLParser.Fixed_pt_const_typeContext = Fixed_pt_const_typeContext; 
IDLParser.Value_base_typeContext = Value_base_typeContext; 
IDLParser.Constr_forward_declContext = Constr_forward_declContext; 
IDLParser.Import_declContext = Import_declContext; 
IDLParser.Imported_scopeContext = Imported_scopeContext; 
IDLParser.Type_id_declContext = Type_id_declContext; 
IDLParser.Type_prefix_declContext = Type_prefix_declContext; 
IDLParser.Readonly_attr_specContext = Readonly_attr_specContext; 
IDLParser.Readonly_attr_declaratorContext = Readonly_attr_declaratorContext; 
IDLParser.Attr_specContext = Attr_specContext; 
IDLParser.Attr_declaratorContext = Attr_declaratorContext; 
IDLParser.Attr_raises_exprContext = Attr_raises_exprContext; 
IDLParser.Get_excep_exprContext = Get_excep_exprContext; 
IDLParser.Set_excep_exprContext = Set_excep_exprContext; 
IDLParser.Exception_listContext = Exception_listContext; 
IDLParser.ComponentContext = ComponentContext; 
IDLParser.Component_forward_declContext = Component_forward_declContext; 
IDLParser.Component_declContext = Component_declContext; 
IDLParser.Component_headerContext = Component_headerContext; 
IDLParser.Supported_interface_specContext = Supported_interface_specContext; 
IDLParser.Component_inheritance_specContext = Component_inheritance_specContext; 
IDLParser.Component_bodyContext = Component_bodyContext; 
IDLParser.Component_exportContext = Component_exportContext; 
IDLParser.Provides_declContext = Provides_declContext; 
IDLParser.Interface_typeContext = Interface_typeContext; 
IDLParser.Uses_declContext = Uses_declContext; 
IDLParser.Emits_declContext = Emits_declContext; 
IDLParser.Publishes_declContext = Publishes_declContext; 
IDLParser.Consumes_declContext = Consumes_declContext; 
IDLParser.Home_declContext = Home_declContext; 
IDLParser.Home_headerContext = Home_headerContext; 
IDLParser.Home_inheritance_specContext = Home_inheritance_specContext; 
IDLParser.Primary_key_specContext = Primary_key_specContext; 
IDLParser.Home_bodyContext = Home_bodyContext; 
IDLParser.Home_exportContext = Home_exportContext; 
IDLParser.Factory_declContext = Factory_declContext; 
IDLParser.Finder_declContext = Finder_declContext; 
IDLParser.EventContext = EventContext; 
IDLParser.Event_forward_declContext = Event_forward_declContext; 
IDLParser.Event_abs_declContext = Event_abs_declContext; 
IDLParser.Event_declContext = Event_declContext; 
IDLParser.Event_headerContext = Event_headerContext; 
IDLParser.AnnappsContext = AnnappsContext; 
IDLParser.Annotation_applContext = Annotation_applContext; 
IDLParser.Annotation_appl_paramsContext = Annotation_appl_paramsContext; 
IDLParser.Annotation_appl_paramContext = Annotation_appl_paramContext; 
IDLParser.IdentifierContext = IdentifierContext; 
