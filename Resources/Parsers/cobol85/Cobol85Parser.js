// Generated from ./cobol85/Cobol85.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import Cobol85Listener from './Cobol85Listener.js';
const serializedATN = [4,1,565,6288,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,7,219,
2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,2,225,7,225,
2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,2,231,7,231,
2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,2,237,7,237,
2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,2,243,7,243,
2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,2,249,7,249,
2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,
2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,
2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,
2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,7,285,
2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,2,291,7,291,
2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,2,297,7,297,
2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,2,303,7,303,
2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,2,309,7,309,
2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,2,315,7,315,
2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,2,321,7,321,
2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,
2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,
2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,
2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,7,351,
2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,2,357,7,357,
2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,7,362,2,363,7,363,
2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,7,368,2,369,7,369,
2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,7,374,2,375,7,375,
2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,7,380,2,381,7,381,
2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,7,386,2,387,7,387,
2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,
2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,
2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,
2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,7,417,
2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,2,423,7,423,
2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,7,428,2,429,7,429,
2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,2,434,7,434,2,435,7,435,
2,436,7,436,2,437,7,437,2,438,7,438,2,439,7,439,2,440,7,440,2,441,7,441,
2,442,7,442,2,443,7,443,2,444,7,444,2,445,7,445,2,446,7,446,2,447,7,447,
2,448,7,448,2,449,7,449,2,450,7,450,2,451,7,451,2,452,7,452,2,453,7,453,
2,454,7,454,2,455,7,455,2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,
2,460,7,460,2,461,7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,
2,466,7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,
2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,7,477,
2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,2,483,7,483,
2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,2,489,7,489,
2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,7,494,2,495,7,495,
2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,2,500,7,500,2,501,7,501,
2,502,7,502,2,503,7,503,2,504,7,504,2,505,7,505,2,506,7,506,2,507,7,507,
2,508,7,508,2,509,7,509,2,510,7,510,2,511,7,511,2,512,7,512,2,513,7,513,
2,514,7,514,2,515,7,515,2,516,7,516,2,517,7,517,2,518,7,518,2,519,7,519,
2,520,7,520,2,521,7,521,2,522,7,522,2,523,7,523,2,524,7,524,2,525,7,525,
2,526,7,526,2,527,7,527,2,528,7,528,2,529,7,529,2,530,7,530,2,531,7,531,
2,532,7,532,2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,2,537,7,537,
2,538,7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,2,543,7,543,
2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,2,549,7,549,
2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,7,554,2,555,7,555,
2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,7,560,2,561,7,561,
2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,2,566,7,566,2,567,7,567,
2,568,7,568,2,569,7,569,2,570,7,570,2,571,7,571,2,572,7,572,2,573,7,573,
2,574,7,574,2,575,7,575,2,576,7,576,2,577,7,577,2,578,7,578,2,579,7,579,
2,580,7,580,2,581,7,581,2,582,7,582,2,583,7,583,2,584,7,584,2,585,7,585,
2,586,7,586,2,587,7,587,2,588,7,588,2,589,7,589,2,590,7,590,2,591,7,591,
2,592,7,592,2,593,7,593,2,594,7,594,1,0,1,0,1,0,1,1,4,1,1195,8,1,11,1,12,
1,1196,1,2,1,2,3,2,1201,8,2,1,2,3,2,1204,8,2,1,2,3,2,1207,8,2,1,2,5,2,1210,
8,2,10,2,12,2,1213,9,2,1,2,3,2,1216,8,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,
1,4,1,4,5,4,1228,8,4,10,4,12,4,1231,9,4,1,5,1,5,1,5,1,5,1,5,1,5,3,5,1239,
8,5,1,6,1,6,1,6,1,6,3,6,1245,8,6,1,6,1,6,3,6,1249,8,6,3,6,1251,8,6,1,6,3,
6,1254,8,6,1,6,3,6,1257,8,6,1,7,1,7,1,7,3,7,1262,8,7,1,8,1,8,1,8,3,8,1267,
8,8,1,9,1,9,1,9,3,9,1272,8,9,1,10,1,10,1,10,3,10,1277,8,10,1,11,1,11,1,11,
3,11,1282,8,11,1,12,1,12,1,12,3,12,1287,8,12,1,13,1,13,1,13,1,13,5,13,1293,
8,13,10,13,12,13,1296,9,13,1,14,1,14,1,14,3,14,1301,8,14,1,15,1,15,1,15,
1,15,5,15,1307,8,15,10,15,12,15,1310,9,15,1,16,1,16,1,16,3,16,1315,8,16,
1,17,1,17,1,17,1,17,3,17,1321,8,17,1,17,1,17,3,17,1325,8,17,1,17,1,17,1,
18,1,18,1,18,1,18,5,18,1333,8,18,10,18,12,18,1336,9,18,1,18,1,18,1,19,1,
19,1,19,1,19,1,19,3,19,1345,8,19,1,20,1,20,3,20,1349,8,20,1,20,1,20,3,20,
1353,8,20,1,20,3,20,1356,8,20,1,21,1,21,3,21,1360,8,21,1,21,3,21,1363,8,
21,1,21,1,21,3,21,1367,8,21,1,21,3,21,1370,8,21,1,22,3,22,1373,8,22,1,22,
3,22,1376,8,22,1,22,1,22,3,22,1380,8,22,1,22,4,22,1383,8,22,11,22,12,22,
1384,1,22,3,22,1388,8,22,1,22,3,22,1391,8,22,1,23,3,23,1394,8,23,1,23,1,
23,3,23,1398,8,23,1,23,1,23,1,24,3,24,1403,8,24,1,24,1,24,3,24,1407,8,24,
1,24,1,24,1,25,1,25,3,25,1413,8,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,
27,1,27,4,27,1424,8,27,11,27,12,27,1425,1,27,1,27,3,27,1430,8,27,1,28,1,
28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,1443,8,28,1,29,1,29,
3,29,1447,8,29,1,30,1,30,1,30,1,30,3,30,1453,8,30,1,30,3,30,1456,8,30,1,
30,1,30,1,30,1,30,1,30,1,30,1,30,4,30,1465,8,30,11,30,12,30,1466,3,30,1469,
8,30,1,31,1,31,1,31,4,31,1474,8,31,11,31,12,31,1475,3,31,1478,8,31,1,32,
1,32,1,32,1,33,1,33,4,33,1485,8,33,11,33,12,33,1486,1,34,1,34,1,34,3,34,
1492,8,34,1,34,1,34,3,34,1496,8,34,1,34,1,34,1,34,3,34,1501,8,34,1,35,1,
35,1,35,3,35,1506,8,35,1,35,1,35,1,36,1,36,1,36,3,36,1513,8,36,1,36,3,36,
1516,8,36,1,36,3,36,1519,8,36,1,36,4,36,1522,8,36,11,36,12,36,1523,1,37,
1,37,1,37,3,37,1529,8,37,1,38,1,38,3,38,1533,8,38,1,39,1,39,3,39,1537,8,
39,1,40,1,40,3,40,1541,8,40,1,40,3,40,1544,8,40,1,40,1,40,3,40,1548,8,40,
1,40,1,40,1,40,3,40,1553,8,40,1,41,1,41,3,41,1557,8,41,1,41,1,41,1,42,1,
42,3,42,1563,8,42,1,42,1,42,3,42,1567,8,42,3,42,1569,8,42,1,42,3,42,1572,
8,42,1,42,1,42,3,42,1576,8,42,1,43,1,43,1,43,3,43,1581,8,43,3,43,1583,8,
43,1,43,1,43,1,43,3,43,1588,8,43,3,43,1590,8,43,1,44,1,44,3,44,1594,8,44,
1,44,1,44,3,44,1598,8,44,1,44,3,44,1601,8,44,1,45,1,45,3,45,1605,8,45,1,
45,3,45,1608,8,45,1,45,1,45,1,45,3,45,1613,8,45,1,45,3,45,1616,8,45,1,45,
3,45,1619,8,45,1,45,1,45,3,45,1623,8,45,1,45,3,45,1626,8,45,1,45,1,45,1,
45,3,45,1631,8,45,1,45,3,45,1634,8,45,1,45,3,45,1637,8,45,3,45,1639,8,45,
1,46,1,46,3,46,1643,8,46,1,46,1,46,1,47,1,47,3,47,1649,8,47,1,47,3,47,1652,
8,47,1,47,3,47,1655,8,47,1,47,1,47,3,47,1659,8,47,1,48,1,48,3,48,1663,8,
48,1,48,3,48,1666,8,48,1,48,3,48,1669,8,48,1,48,4,48,1672,8,48,11,48,12,
48,1673,1,48,1,48,3,48,1678,8,48,1,49,4,49,1681,8,49,11,49,12,49,1682,1,
49,3,49,1686,8,49,1,49,4,49,1689,8,49,11,49,12,49,1690,1,50,1,50,1,50,1,
50,5,50,1697,8,50,10,50,12,50,1700,9,50,1,51,1,51,3,51,1704,8,51,1,52,1,
52,3,52,1708,8,52,1,52,5,52,1711,8,52,10,52,12,52,1714,9,52,1,52,1,52,1,
53,1,53,5,53,1720,8,53,10,53,12,53,1723,9,53,1,54,1,54,3,54,1727,8,54,1,
54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,1742,
8,55,1,56,1,56,3,56,1746,8,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
56,1,56,1,56,3,56,1759,8,56,1,57,1,57,1,57,3,57,1764,8,57,1,57,3,57,1767,
8,57,1,57,3,57,1770,8,57,1,58,1,58,3,58,1774,8,58,3,58,1776,8,58,1,58,1,
58,1,58,1,58,1,58,3,58,1783,8,58,1,58,1,58,1,59,1,59,3,59,1789,8,59,1,59,
3,59,1792,8,59,1,59,1,59,3,59,1796,8,59,1,60,1,60,1,60,3,60,1801,8,60,1,
60,1,60,1,60,3,60,1806,8,60,1,61,1,61,3,61,1810,8,61,1,61,3,61,1813,8,61,
1,61,1,61,1,62,1,62,3,62,1819,8,62,1,62,3,62,1822,8,62,1,62,1,62,3,62,1826,
8,62,1,62,3,62,1829,8,62,1,62,3,62,1832,8,62,1,63,1,63,1,63,3,63,1837,8,
63,1,63,3,63,1840,8,63,1,63,1,63,3,63,1844,8,63,1,63,3,63,1847,8,63,1,63,
3,63,1850,8,63,1,64,1,64,3,64,1854,8,64,1,64,1,64,1,65,3,65,1859,8,65,1,
65,1,65,3,65,1863,8,65,1,65,1,65,3,65,1867,8,65,1,66,1,66,3,66,1871,8,66,
1,66,3,66,1874,8,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,3,67,1883,8,67,1,
67,5,67,1886,8,67,10,67,12,67,1889,9,67,1,67,3,67,1892,8,67,1,68,1,68,1,
68,1,68,3,68,1898,8,68,1,69,1,69,1,69,1,69,3,69,1904,8,69,3,69,1906,8,69,
1,69,1,69,1,69,1,69,3,69,1912,8,69,1,70,1,70,1,70,1,71,3,71,1918,8,71,1,
71,3,71,1921,8,71,1,71,1,71,1,71,1,71,1,72,1,72,3,72,1929,8,72,1,73,1,73,
3,73,1933,8,73,1,73,3,73,1936,8,73,1,73,3,73,1939,8,73,1,73,4,73,1942,8,
73,11,73,12,73,1943,1,74,1,74,1,74,3,74,1949,8,74,1,74,3,74,1952,8,74,1,
74,4,74,1955,8,74,11,74,12,74,1956,1,75,1,75,1,75,3,75,1962,8,75,1,76,1,
76,1,76,3,76,1967,8,76,1,76,1,76,1,77,1,77,1,77,1,77,5,77,1975,8,77,10,77,
12,77,1978,9,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,1989,8,
78,1,79,1,79,1,79,1,79,5,79,1995,8,79,10,79,12,79,1998,9,79,1,80,1,80,1,
80,3,80,2003,8,80,1,80,5,80,2006,8,80,10,80,12,80,2009,9,80,1,80,1,80,5,
80,2013,8,80,10,80,12,80,2016,9,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,
81,1,81,1,81,1,81,3,81,2029,8,81,1,82,3,82,2032,8,82,1,82,1,82,1,83,3,83,
2037,8,83,1,83,1,83,1,84,1,84,3,84,2043,8,84,1,84,1,84,3,84,2047,8,84,1,
84,3,84,2050,8,84,1,85,1,85,1,85,1,86,1,86,1,86,1,86,3,86,2059,8,86,1,87,
3,87,2062,8,87,1,87,1,87,3,87,2066,8,87,1,88,3,88,2069,8,88,1,88,1,88,3,
88,2073,8,88,1,88,3,88,2076,8,88,1,88,3,88,2079,8,88,1,88,1,88,3,88,2083,
8,88,1,88,3,88,2086,8,88,3,88,2088,8,88,1,88,1,88,3,88,2092,8,88,1,88,3,
88,2095,8,88,1,89,3,89,2098,8,89,1,89,1,89,1,89,3,89,2103,8,89,1,90,1,90,
1,90,1,91,1,91,1,91,3,91,2111,8,91,1,91,1,91,3,91,2115,8,91,3,91,2117,8,
91,1,91,1,91,1,91,4,91,2122,8,91,11,91,12,91,2123,3,91,2126,8,91,1,92,1,
92,1,92,4,92,2131,8,92,11,92,12,92,2132,1,93,1,93,3,93,2137,8,93,1,93,1,
93,3,93,2141,8,93,1,94,1,94,1,94,3,94,2146,8,94,1,94,1,94,3,94,2150,8,94,
3,94,2152,8,94,1,94,4,94,2155,8,94,11,94,12,94,2156,1,95,1,95,3,95,2161,
8,95,1,95,1,95,3,95,2165,8,95,1,95,3,95,2168,8,95,1,95,5,95,2171,8,95,10,
95,12,95,2174,9,95,1,96,1,96,1,96,3,96,2179,8,96,1,97,3,97,2182,8,97,1,97,
1,97,3,97,2186,8,97,1,97,1,97,3,97,2190,8,97,1,98,3,98,2193,8,98,1,98,3,
98,2196,8,98,1,98,1,98,1,98,3,98,2201,8,98,1,99,3,99,2204,8,99,1,99,3,99,
2207,8,99,1,99,1,99,1,99,3,99,2212,8,99,1,100,1,100,3,100,2216,8,100,1,100,
3,100,2219,8,100,1,100,1,100,1,101,1,101,1,102,1,102,3,102,2227,8,102,1,
102,1,102,1,103,1,103,3,103,2233,8,103,1,103,1,103,3,103,2237,8,103,3,103,
2239,8,103,1,103,4,103,2242,8,103,11,103,12,103,2243,1,104,1,104,1,104,1,
104,5,104,2250,8,104,10,104,12,104,2253,9,104,1,105,1,105,1,105,1,105,1,
105,1,106,1,106,1,106,1,106,5,106,2264,8,106,10,106,12,106,2267,9,106,1,
107,1,107,1,107,1,107,5,107,2273,8,107,10,107,12,107,2276,9,107,1,108,1,
108,1,108,1,108,1,108,5,108,2283,8,108,10,108,12,108,2286,9,108,1,109,1,
109,1,109,3,109,2291,8,109,1,110,1,110,1,110,3,110,2296,8,110,1,110,3,110,
2299,8,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,3,
110,2311,8,110,1,110,5,110,2314,8,110,10,110,12,110,2317,9,110,1,110,1,110,
1,111,1,111,1,111,3,111,2324,8,111,1,111,1,111,1,111,1,111,1,111,1,111,1,
111,5,111,2333,8,111,10,111,12,111,2336,9,111,1,111,1,111,1,112,1,112,1,
112,3,112,2343,8,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,3,112,
2353,8,112,1,112,5,112,2356,8,112,10,112,12,112,2359,9,112,1,112,1,112,1,
113,1,113,1,113,3,113,2366,8,113,1,113,1,113,1,114,1,114,1,114,1,114,1,114,
1,114,1,114,1,114,4,114,2378,8,114,11,114,12,114,2379,3,114,2382,8,114,1,
115,1,115,1,115,3,115,2387,8,115,1,115,1,115,1,116,1,116,1,116,3,116,2394,
8,116,1,116,1,116,1,117,3,117,2399,8,117,1,117,1,117,3,117,2403,8,117,1,
117,1,117,1,118,1,118,1,118,3,118,2410,8,118,1,118,1,118,1,119,1,119,1,119,
3,119,2417,8,119,1,119,1,119,1,120,1,120,1,120,3,120,2424,8,120,1,120,1,
120,1,121,3,121,2429,8,121,1,121,1,121,3,121,2433,8,121,1,121,1,121,1,122,
3,122,2438,8,122,1,122,1,122,3,122,2442,8,122,1,122,1,122,1,123,3,123,2447,
8,123,1,123,1,123,3,123,2451,8,123,1,123,1,123,1,124,3,124,2456,8,124,1,
124,1,124,3,124,2460,8,124,1,124,1,124,1,125,3,125,2465,8,125,1,125,1,125,
3,125,2469,8,125,1,125,1,125,1,126,1,126,1,126,3,126,2476,8,126,1,126,1,
126,1,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,2487,8,127,1,127,5,127,
2490,8,127,10,127,12,127,2493,9,127,1,128,1,128,1,128,1,128,5,128,2499,8,
128,10,128,12,128,2502,9,128,1,129,1,129,1,129,3,129,2507,8,129,1,129,1,
129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,
129,1,129,1,129,1,129,1,129,3,129,2527,8,129,1,129,1,129,1,129,1,129,1,129,
1,129,1,129,1,129,1,129,1,129,5,129,2539,8,129,10,129,12,129,2542,9,129,
1,129,1,129,1,130,1,130,1,130,1,131,1,131,1,132,1,132,1,133,1,133,1,133,
1,134,1,134,1,135,1,135,1,136,1,136,1,137,1,137,1,138,1,138,3,138,2566,8,
138,1,138,1,138,3,138,2570,8,138,1,139,1,139,3,139,2574,8,139,1,139,3,139,
2577,8,139,1,139,3,139,2580,8,139,1,139,1,139,3,139,2584,8,139,1,140,1,140,
3,140,2588,8,140,1,140,3,140,2591,8,140,1,140,3,140,2594,8,140,1,140,1,140,
3,140,2598,8,140,1,141,1,141,3,141,2602,8,141,1,141,1,141,3,141,2606,8,141,
1,142,1,142,3,142,2610,8,142,1,142,1,142,3,142,2614,8,142,1,143,1,143,3,
143,2618,8,143,1,143,1,143,1,144,1,144,3,144,2624,8,144,1,144,1,144,1,145,
1,145,3,145,2630,8,145,1,145,1,145,1,146,1,146,1,146,3,146,2637,8,146,1,
146,3,146,2640,8,146,1,147,1,147,1,147,1,148,1,148,1,148,1,149,1,149,3,149,
2650,8,149,1,149,1,149,1,150,1,150,3,150,2656,8,150,1,150,1,150,1,151,1,
151,3,151,2662,8,151,1,152,1,152,3,152,2666,8,152,3,152,2668,8,152,1,152,
1,152,1,152,3,152,2673,8,152,3,152,2675,8,152,1,153,1,153,1,154,1,154,1,
155,1,155,1,156,1,156,3,156,2685,8,156,1,156,3,156,2688,8,156,1,156,1,156,
3,156,2692,8,156,1,156,3,156,2695,8,156,1,157,1,157,1,157,3,157,2700,8,157,
1,158,1,158,1,159,1,159,1,160,1,160,1,160,1,160,5,160,2710,8,160,10,160,
12,160,2713,9,160,1,161,1,161,4,161,2717,8,161,11,161,12,161,2718,1,162,
1,162,1,162,3,162,2724,8,162,1,162,1,162,3,162,2728,8,162,1,162,3,162,2731,
8,162,1,162,3,162,2734,8,162,1,162,3,162,2737,8,162,3,162,2739,8,162,1,162,
1,162,1,163,3,163,2744,8,163,1,163,1,163,1,164,1,164,1,164,3,164,2751,8,
164,1,164,1,164,3,164,2755,8,164,3,164,2757,8,164,1,164,1,164,3,164,2761,
8,164,1,165,1,165,1,165,1,166,1,166,1,166,1,166,1,167,1,167,1,167,1,167,
1,168,1,168,1,168,1,169,1,169,1,169,3,169,2780,8,169,1,170,1,170,1,170,3,
170,2785,8,170,1,170,3,170,2788,8,170,1,170,1,170,3,170,2792,8,170,1,170,
1,170,1,171,1,171,3,171,2798,8,171,1,171,3,171,2801,8,171,1,171,1,171,1,
171,1,172,1,172,3,172,2808,8,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,
1,172,1,172,1,172,1,172,3,172,2821,8,172,1,172,5,172,2824,8,172,10,172,12,
172,2827,9,172,1,172,1,172,1,173,1,173,3,173,2833,8,173,1,173,1,173,1,174,
1,174,3,174,2839,8,174,1,174,3,174,2842,8,174,1,174,1,174,1,175,1,175,3,
175,2848,8,175,1,176,1,176,3,176,2852,8,176,1,177,3,177,2855,8,177,1,177,
3,177,2858,8,177,1,177,3,177,2861,8,177,1,177,1,177,3,177,2865,8,177,1,178,
1,178,3,178,2869,8,178,1,178,1,178,3,178,2873,8,178,1,179,1,179,1,179,1,
180,1,180,1,180,3,180,2881,8,180,1,180,1,180,1,180,3,180,2886,8,180,1,181,
1,181,1,181,1,182,1,182,1,182,1,183,1,183,3,183,2896,8,183,1,183,1,183,1,
184,1,184,3,184,2902,8,184,1,184,1,184,3,184,2906,8,184,1,185,1,185,3,185,
2910,8,185,1,185,1,185,1,185,3,185,2915,8,185,1,186,1,186,3,186,2919,8,186,
1,186,1,186,1,187,1,187,1,187,3,187,2926,8,187,1,187,5,187,2929,8,187,10,
187,12,187,2932,9,187,1,187,1,187,1,187,3,187,2937,8,187,1,187,5,187,2940,
8,187,10,187,12,187,2943,9,187,3,187,2945,8,187,1,188,1,188,3,188,2949,8,
188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,3,188,2958,8,188,1,189,1,189,
1,189,3,189,2963,8,189,1,190,1,190,1,190,3,190,2968,8,190,1,191,1,191,1,
191,3,191,2973,8,191,1,191,1,191,3,191,2977,8,191,1,192,1,192,1,193,1,193,
1,193,3,193,2984,8,193,1,193,1,193,3,193,2988,8,193,1,194,1,194,3,194,2992,
8,194,3,194,2994,8,194,1,194,1,194,1,195,1,195,1,195,3,195,3001,8,195,1,
196,1,196,1,196,3,196,3006,8,196,1,197,1,197,3,197,3010,8,197,1,197,1,197,
1,198,1,198,1,198,1,198,5,198,3018,8,198,10,198,12,198,3021,9,198,1,199,
1,199,3,199,3025,8,199,1,200,1,200,1,200,1,200,3,200,3031,8,200,1,200,3,
200,3034,8,200,1,201,1,201,1,201,1,201,3,201,3040,8,201,1,201,3,201,3043,
8,201,1,201,1,201,5,201,3047,8,201,10,201,12,201,3050,9,201,1,202,1,202,
1,202,3,202,3055,8,202,1,202,3,202,3058,8,202,1,203,1,203,3,203,3062,8,203,
1,203,1,203,3,203,3066,8,203,1,203,3,203,3069,8,203,1,203,3,203,3072,8,203,
1,203,3,203,3075,8,203,1,204,1,204,1,204,1,204,1,205,1,205,3,205,3083,8,
205,1,205,1,205,1,206,1,206,3,206,3089,8,206,1,206,1,206,1,207,1,207,1,207,
3,207,3096,8,207,1,208,1,208,1,208,3,208,3101,8,208,1,208,3,208,3104,8,208,
1,208,3,208,3107,8,208,1,208,3,208,3110,8,208,1,209,1,209,1,209,1,210,1,
210,1,210,1,211,1,211,4,211,3120,8,211,11,211,12,211,3121,1,212,1,212,3,
212,3126,8,212,1,213,1,213,4,213,3130,8,213,11,213,12,213,3131,1,214,1,214,
3,214,3136,8,214,1,215,3,215,3139,8,215,1,215,1,215,1,216,3,216,3144,8,216,
1,216,1,216,1,217,1,217,1,217,1,217,3,217,3152,8,217,1,218,1,218,1,218,3,
218,3157,8,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,
1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,5,218,
3180,8,218,10,218,12,218,3183,9,218,1,218,1,218,1,219,1,219,1,219,1,219,
1,219,1,220,1,220,1,220,1,220,1,220,1,221,4,221,3198,8,221,11,221,12,221,
3199,1,221,3,221,3203,8,221,1,222,1,222,1,223,1,223,3,223,3209,8,223,1,223,
1,223,1,224,1,224,1,225,3,225,3216,8,225,1,225,1,225,1,225,3,225,3221,8,
225,1,226,3,226,3224,8,226,1,226,1,226,1,227,1,227,1,228,1,228,3,228,3232,
8,228,1,229,1,229,1,229,3,229,3237,8,229,1,229,3,229,3240,8,229,1,229,1,
229,3,229,3244,8,229,1,229,3,229,3247,8,229,1,229,5,229,3250,8,229,10,229,
12,229,3253,9,229,1,229,1,229,3,229,3257,8,229,1,229,3,229,3260,8,229,1,
229,4,229,3263,8,229,11,229,12,229,3264,3,229,3267,8,229,1,230,1,230,1,230,
1,231,1,231,3,231,3274,8,231,1,231,3,231,3277,8,231,1,231,4,231,3280,8,231,
11,231,12,231,3281,1,232,1,232,3,232,3286,8,232,1,232,1,232,1,233,4,233,
3291,8,233,11,233,12,233,3292,1,233,3,233,3296,8,233,4,233,3298,8,233,11,
233,12,233,3299,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,
234,1,234,1,234,1,234,1,234,1,234,1,234,3,234,3318,8,234,1,235,1,235,1,235,
1,235,1,236,3,236,3325,8,236,1,236,3,236,3328,8,236,1,236,1,236,1,237,1,
237,1,237,1,238,1,238,1,238,1,239,1,239,1,239,1,239,3,239,3342,8,239,1,240,
1,240,3,240,3346,8,240,3,240,3348,8,240,1,240,1,240,1,240,3,240,3353,8,240,
3,240,3355,8,240,1,241,1,241,3,241,3359,8,241,1,242,3,242,3362,8,242,1,242,
1,242,1,243,1,243,3,243,3368,8,243,1,243,1,243,1,244,3,244,3373,8,244,1,
244,1,244,1,245,1,245,3,245,3379,8,245,3,245,3381,8,245,1,245,1,245,3,245,
3385,8,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,
245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,
245,1,245,1,245,1,245,1,245,1,245,1,245,3,245,3416,8,245,1,246,1,246,1,246,
3,246,3421,8,246,1,246,1,246,3,246,3425,8,246,1,247,1,247,3,247,3429,8,247,
1,247,1,247,3,247,3433,8,247,3,247,3435,8,247,1,247,1,247,3,247,3439,8,247,
1,247,5,247,3442,8,247,10,247,12,247,3445,9,247,1,248,1,248,3,248,3449,8,
248,1,249,1,249,3,249,3453,8,249,1,250,1,250,1,250,1,251,3,251,3459,8,251,
1,251,1,251,1,251,1,252,1,252,1,252,3,252,3467,8,252,1,252,3,252,3470,8,
252,1,252,1,252,3,252,3474,8,252,1,252,1,252,1,253,1,253,4,253,3480,8,253,
11,253,12,253,3481,1,254,1,254,1,254,1,255,1,255,3,255,3489,8,255,1,256,
3,256,3492,8,256,1,256,3,256,3495,8,256,1,256,4,256,3498,8,256,11,256,12,
256,3499,1,257,3,257,3503,8,257,1,257,1,257,3,257,3507,8,257,1,257,3,257,
3510,8,257,1,258,3,258,3513,8,258,1,258,1,258,4,258,3517,8,258,11,258,12,
258,3518,1,259,1,259,1,259,3,259,3524,8,259,1,260,1,260,1,260,4,260,3529,
8,260,11,260,12,260,3530,1,260,1,260,1,260,1,260,1,261,1,261,1,261,1,261,
1,261,1,261,1,262,1,262,1,262,3,262,3546,8,262,1,263,1,263,5,263,3550,8,
263,10,263,12,263,3553,9,263,1,264,1,264,1,264,1,264,1,265,5,265,3560,8,
265,10,265,12,265,3563,9,265,1,265,5,265,3566,8,265,10,265,12,265,3569,9,
265,1,266,1,266,1,266,1,266,5,266,3575,8,266,10,266,12,266,3578,9,266,3,
266,3580,8,266,1,267,5,267,3583,8,267,10,267,12,267,3586,9,267,1,267,1,267,
1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,
1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,
1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,
1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,
1,268,3,268,3639,8,268,1,269,1,269,1,269,1,269,1,269,1,269,3,269,3647,8,
269,1,269,3,269,3650,8,269,1,269,3,269,3653,8,269,1,269,3,269,3656,8,269,
1,270,1,270,1,270,3,270,3661,8,270,1,270,1,270,3,270,3665,8,270,1,270,1,
270,1,270,1,270,1,270,3,270,3672,8,270,1,270,1,270,1,270,1,270,3,270,3678,
8,270,1,271,1,271,1,271,1,272,1,272,1,272,1,272,1,273,3,273,3688,8,273,1,
273,1,273,1,274,1,274,1,274,1,274,3,274,3696,8,274,1,274,3,274,3699,8,274,
1,274,3,274,3702,8,274,1,274,3,274,3705,8,274,1,275,4,275,3708,8,275,11,
275,12,275,3709,1,275,1,275,4,275,3714,8,275,11,275,12,275,3715,1,276,4,
276,3719,8,276,11,276,12,276,3720,1,276,1,276,4,276,3725,8,276,11,276,12,
276,3726,3,276,3729,8,276,1,276,1,276,4,276,3733,8,276,11,276,12,276,3734,
1,277,1,277,1,277,1,277,1,277,1,278,1,278,3,278,3744,8,278,1,279,1,279,3,
279,3748,8,279,1,280,1,280,3,280,3752,8,280,1,281,1,281,3,281,3756,8,281,
1,282,1,282,3,282,3760,8,282,1,282,1,282,1,283,1,283,4,283,3766,8,283,11,
283,12,283,3767,1,284,1,284,1,284,1,284,3,284,3774,8,284,1,284,1,284,1,285,
1,285,1,285,3,285,3781,8,285,1,285,3,285,3784,8,285,1,285,3,285,3787,8,285,
1,285,3,285,3790,8,285,1,285,3,285,3793,8,285,1,285,3,285,3796,8,285,1,285,
3,285,3799,8,285,1,286,1,286,4,286,3803,8,286,11,286,12,286,3804,1,287,1,
287,1,287,3,287,3810,8,287,1,288,3,288,3813,8,288,1,288,3,288,3816,8,288,
1,288,4,288,3819,8,288,11,288,12,288,3820,1,289,1,289,1,289,1,289,3,289,
3827,8,289,1,289,1,289,1,289,3,289,3832,8,289,1,289,3,289,3835,8,289,1,290,
3,290,3838,8,290,1,290,1,290,4,290,3842,8,290,11,290,12,290,3843,1,291,1,
291,1,291,1,291,3,291,3850,8,291,3,291,3852,8,291,1,291,1,291,3,291,3856,
8,291,1,292,3,292,3859,8,292,1,292,1,292,4,292,3863,8,292,11,292,12,292,
3864,1,293,1,293,1,293,1,293,3,293,3871,8,293,3,293,3873,8,293,1,293,1,293,
1,293,3,293,3878,8,293,1,294,1,294,1,294,1,295,1,295,4,295,3885,8,295,11,
295,12,295,3886,1,296,1,296,1,296,1,296,1,296,3,296,3894,8,296,1,297,1,297,
4,297,3898,8,297,11,297,12,297,3899,1,298,1,298,1,298,1,298,3,298,3906,8,
298,1,299,1,299,3,299,3910,8,299,1,299,3,299,3913,8,299,1,299,3,299,3916,
8,299,1,299,1,299,1,299,3,299,3921,8,299,3,299,3923,8,299,1,300,3,300,3926,
8,300,1,300,1,300,1,300,3,300,3931,8,300,1,301,3,301,3934,8,301,1,301,1,
301,1,301,1,301,3,301,3940,8,301,1,301,1,301,4,301,3944,8,301,11,301,12,
301,3945,3,301,3948,8,301,1,302,1,302,1,302,3,302,3953,8,302,1,303,1,303,
3,303,3957,8,303,1,303,1,303,1,304,1,304,1,304,3,304,3964,8,304,1,305,1,
305,3,305,3968,8,305,1,305,1,305,3,305,3972,8,305,1,306,1,306,4,306,3976,
8,306,11,306,12,306,3977,1,306,1,306,1,306,3,306,3983,8,306,1,306,3,306,
3986,8,306,1,306,3,306,3989,8,306,1,307,1,307,3,307,3993,8,307,1,308,1,308,
1,309,1,309,1,309,3,309,4000,8,309,1,309,3,309,4003,8,309,1,309,3,309,4006,
8,309,1,309,3,309,4009,8,309,1,310,1,310,1,310,3,310,4014,8,310,1,310,1,
310,1,310,3,310,4019,8,310,1,310,1,310,3,310,4023,8,310,1,310,1,310,1,310,
3,310,4028,8,310,1,311,1,311,4,311,4032,8,311,11,311,12,311,4033,1,311,3,
311,4037,8,311,1,311,3,311,4040,8,311,1,311,3,311,4043,8,311,1,312,1,312,
3,312,4047,8,312,1,313,1,313,1,313,3,313,4052,8,313,1,314,1,314,1,314,3,
314,4057,8,314,1,315,3,315,4060,8,315,1,315,1,315,1,315,1,316,1,316,1,316,
3,316,4068,8,316,1,316,1,316,1,316,3,316,4073,8,316,1,316,3,316,4076,8,316,
1,316,3,316,4079,8,316,1,316,3,316,4082,8,316,1,316,3,316,4085,8,316,1,317,
1,317,4,317,4089,8,317,11,317,12,317,4090,1,318,1,318,1,318,3,318,4096,8,
318,1,318,3,318,4099,8,318,1,319,1,319,1,319,3,319,4104,8,319,1,319,3,319,
4107,8,319,1,320,1,320,4,320,4111,8,320,11,320,12,320,4112,1,321,1,321,3,
321,4117,8,321,1,322,1,322,3,322,4121,8,322,1,323,1,323,1,323,1,324,1,324,
1,324,3,324,4129,8,324,1,324,1,324,1,324,3,324,4134,8,324,1,324,1,324,3,
324,4138,8,324,1,324,1,324,1,324,3,324,4143,8,324,1,325,1,325,1,325,1,325,
4,325,4149,8,325,11,325,12,325,4150,3,325,4153,8,325,1,326,1,326,1,326,5,
326,4158,8,326,10,326,12,326,4161,9,326,1,326,4,326,4164,8,326,11,326,12,
326,4165,1,326,3,326,4169,8,326,1,326,3,326,4172,8,326,1,327,1,327,1,327,
1,327,3,327,4178,8,327,1,328,1,328,1,328,1,329,4,329,4184,8,329,11,329,12,
329,4185,1,329,5,329,4189,8,329,10,329,12,329,4192,9,329,1,330,1,330,1,330,
5,330,4197,8,330,10,330,12,330,4200,9,330,1,331,1,331,3,331,4204,8,331,1,
331,1,331,3,331,4208,8,331,1,331,1,331,3,331,4212,8,331,1,332,1,332,1,332,
1,333,1,333,1,333,1,334,1,334,1,334,5,334,4223,8,334,10,334,12,334,4226,
9,334,1,335,1,335,1,335,3,335,4231,8,335,1,336,4,336,4234,8,336,11,336,12,
336,4235,1,337,4,337,4239,8,337,11,337,12,337,4240,1,338,4,338,4244,8,338,
11,338,12,338,4245,1,339,1,339,3,339,4250,8,339,1,339,3,339,4253,8,339,1,
339,4,339,4256,8,339,11,339,12,339,4257,1,340,1,340,3,340,4262,8,340,1,341,
1,341,3,341,4266,8,341,1,342,1,342,1,342,1,343,1,343,1,344,1,344,3,344,4275,
8,344,1,344,1,344,3,344,4279,8,344,1,345,1,345,1,346,1,346,4,346,4285,8,
346,11,346,12,346,4286,1,346,1,346,3,346,4291,8,346,1,346,3,346,4294,8,346,
3,346,4296,8,346,1,347,1,347,1,347,1,347,3,347,4302,8,347,1,347,3,347,4305,
8,347,1,348,3,348,4308,8,348,1,348,1,348,1,348,5,348,4313,8,348,10,348,12,
348,4316,9,348,3,348,4318,8,348,1,349,1,349,1,349,1,349,5,349,4324,8,349,
10,349,12,349,4327,9,349,3,349,4329,8,349,1,350,1,350,4,350,4333,8,350,11,
350,12,350,4334,1,350,3,350,4338,8,350,1,351,1,351,4,351,4342,8,351,11,351,
12,351,4343,1,352,1,352,3,352,4348,8,352,1,352,1,352,1,352,3,352,4353,8,
352,1,353,1,353,4,353,4357,8,353,11,353,12,353,4358,1,354,1,354,1,354,1,
354,1,354,1,354,3,354,4367,8,354,1,355,1,355,4,355,4371,8,355,11,355,12,
355,4372,1,356,1,356,1,356,4,356,4378,8,356,11,356,12,356,4379,1,357,1,357,
4,357,4384,8,357,11,357,12,357,4385,1,357,4,357,4389,8,357,11,357,12,357,
4390,1,358,1,358,1,358,3,358,4396,8,358,1,358,1,358,5,358,4400,8,358,10,
358,12,358,4403,9,358,1,359,1,359,1,359,1,359,4,359,4409,8,359,11,359,12,
359,4410,1,360,1,360,5,360,4415,8,360,10,360,12,360,4418,9,360,1,361,1,361,
1,361,5,361,4423,8,361,10,361,12,361,4426,9,361,1,362,1,362,4,362,4430,8,
362,11,362,12,362,4431,1,363,1,363,4,363,4436,8,363,11,363,12,363,4437,1,
364,1,364,3,364,4442,8,364,1,364,5,364,4445,8,364,10,364,12,364,4448,9,364,
1,365,1,365,3,365,4452,8,365,1,365,1,365,5,365,4456,8,365,10,365,12,365,
4459,9,365,1,366,1,366,1,366,3,366,4464,8,366,1,367,1,367,1,367,3,367,4469,
8,367,1,368,1,368,3,368,4473,8,368,1,368,1,368,3,368,4477,8,368,1,369,1,
369,1,369,4,369,4482,8,369,11,369,12,369,4483,1,369,3,369,4487,8,369,1,369,
5,369,4490,8,369,10,369,12,369,4493,9,369,1,369,3,369,4496,8,369,1,369,5,
369,4499,8,369,10,369,12,369,4502,9,369,1,370,3,370,4505,8,370,1,370,1,370,
3,370,4509,8,370,1,370,4,370,4512,8,370,11,370,12,370,4513,1,371,3,371,4517,
8,371,1,371,1,371,3,371,4521,8,371,1,371,4,371,4524,8,371,11,371,12,371,
4525,1,371,3,371,4529,8,371,1,371,3,371,4532,8,371,1,372,3,372,4535,8,372,
1,372,1,372,1,372,1,372,1,373,3,373,4542,8,373,1,373,1,373,3,373,4546,8,
373,1,373,1,373,1,374,1,374,4,374,4552,8,374,11,374,12,374,4553,1,375,1,
375,1,375,3,375,4559,8,375,1,375,1,375,3,375,4563,8,375,1,376,1,376,1,376,
1,377,1,377,4,377,4570,8,377,11,377,12,377,4571,1,378,1,378,1,378,1,378,
1,378,1,378,1,378,1,378,1,378,1,378,3,378,4584,8,378,1,379,1,379,3,379,4588,
8,379,1,379,1,379,3,379,4592,8,379,1,380,1,380,1,380,4,380,4597,8,380,11,
380,12,380,4598,1,381,1,381,3,381,4603,8,381,1,382,1,382,1,382,1,382,4,382,
4609,8,382,11,382,12,382,4610,1,383,1,383,1,384,1,384,1,384,3,384,4618,8,
384,1,384,1,384,1,384,3,384,4623,8,384,1,384,3,384,4626,8,384,1,384,3,384,
4629,8,384,1,384,3,384,4632,8,384,1,385,4,385,4635,8,385,11,385,12,385,4636,
1,386,1,386,3,386,4641,8,386,1,387,1,387,1,387,4,387,4646,8,387,11,387,12,
387,4647,1,388,1,388,3,388,4652,8,388,1,389,1,389,3,389,4656,8,389,1,390,
1,390,1,390,1,390,1,390,4,390,4663,8,390,11,390,12,390,4664,1,391,1,391,
4,391,4669,8,391,11,391,12,391,4670,1,392,1,392,1,392,3,392,4676,8,392,1,
392,1,392,3,392,4680,8,392,1,393,1,393,4,393,4684,8,393,11,393,12,393,4685,
1,394,1,394,3,394,4690,8,394,1,394,1,394,3,394,4694,8,394,1,395,1,395,4,
395,4698,8,395,11,395,12,395,4699,1,396,1,396,4,396,4704,8,396,11,396,12,
396,4705,1,397,1,397,1,397,3,397,4711,8,397,1,398,3,398,4714,8,398,1,398,
5,398,4717,8,398,10,398,12,398,4720,9,398,1,398,1,398,1,399,1,399,1,399,
3,399,4727,8,399,1,399,3,399,4730,8,399,1,400,1,400,1,400,3,400,4735,8,400,
1,401,1,401,3,401,4739,8,401,1,401,1,401,1,402,3,402,4744,8,402,1,402,1,
402,1,402,1,403,1,403,1,403,1,403,1,403,3,403,4754,8,403,3,403,4756,8,403,
1,404,1,404,1,404,5,404,4761,8,404,10,404,12,404,4764,9,404,1,405,1,405,
3,405,4768,8,405,1,405,1,405,1,405,1,405,1,406,1,406,1,406,1,407,1,407,1,
407,1,407,3,407,4781,8,407,1,408,1,408,1,408,1,408,3,408,4787,8,408,1,409,
3,409,4790,8,409,1,409,1,409,1,409,1,410,1,410,4,410,4797,8,410,11,410,12,
410,4798,1,411,1,411,1,411,3,411,4804,8,411,1,411,3,411,4807,8,411,1,411,
3,411,4810,8,411,1,411,3,411,4813,8,411,1,411,3,411,4816,8,411,1,411,3,411,
4819,8,411,1,411,3,411,4822,8,411,1,411,3,411,4825,8,411,1,411,3,411,4828,
8,411,1,411,3,411,4831,8,411,1,412,1,412,1,412,1,413,3,413,4837,8,413,1,
413,1,413,1,413,3,413,4842,8,413,1,414,1,414,3,414,4846,8,414,1,414,1,414,
1,415,1,415,1,415,3,415,4853,8,415,1,415,3,415,4856,8,415,1,415,3,415,4859,
8,415,1,415,3,415,4862,8,415,1,416,1,416,1,416,1,416,1,416,1,416,1,416,1,
416,5,416,4872,8,416,10,416,12,416,4875,9,416,1,417,1,417,1,417,1,417,1,
417,1,417,3,417,4883,8,417,1,418,1,418,1,418,3,418,4888,8,418,1,418,1,418,
3,418,4892,8,418,1,418,3,418,4895,8,418,1,419,1,419,1,419,5,419,4900,8,419,
10,419,12,419,4903,9,419,1,420,1,420,1,420,5,420,4908,8,420,10,420,12,420,
4911,9,420,1,421,1,421,3,421,4915,8,421,1,421,1,421,3,421,4919,8,421,1,422,
3,422,4922,8,422,1,422,1,422,1,422,1,423,1,423,3,423,4929,8,423,1,423,1,
423,1,424,1,424,3,424,4935,8,424,1,424,1,424,3,424,4939,8,424,1,425,1,425,
3,425,4943,8,425,1,425,1,425,1,426,1,426,1,426,1,426,3,426,4951,8,426,1,
427,1,427,1,427,3,427,4956,8,427,1,427,3,427,4959,8,427,1,427,1,427,3,427,
4963,8,427,1,427,3,427,4966,8,427,1,428,1,428,1,428,1,429,1,429,1,429,3,
429,4974,8,429,1,429,3,429,4977,8,429,1,429,3,429,4980,8,429,1,429,3,429,
4983,8,429,1,430,1,430,1,430,1,431,1,431,3,431,4990,8,431,1,431,1,431,3,
431,4994,8,431,1,431,3,431,4997,8,431,1,431,4,431,5000,8,431,11,431,12,431,
5001,1,431,3,431,5005,8,431,1,432,1,432,1,432,1,433,1,433,1,433,1,433,1,
433,5,433,5015,8,433,10,433,12,433,5018,9,433,3,433,5020,8,433,1,434,1,434,
1,434,3,434,5025,8,434,1,434,3,434,5028,8,434,1,434,3,434,5031,8,434,1,435,
1,435,3,435,5035,8,435,1,435,3,435,5038,8,435,1,435,3,435,5041,8,435,1,435,
3,435,5044,8,435,1,435,3,435,5047,8,435,1,436,1,436,1,436,1,436,1,437,1,
437,1,437,1,438,1,438,1,438,1,438,1,438,3,438,5061,8,438,1,439,1,439,3,439,
5065,8,439,1,440,1,440,3,440,5069,8,440,1,440,1,440,1,440,3,440,5074,8,440,
1,441,1,441,1,442,1,442,3,442,5080,8,442,1,442,3,442,5083,8,442,1,443,1,
443,1,444,1,444,4,444,5089,8,444,11,444,12,444,5090,1,444,3,444,5094,8,444,
1,445,4,445,5097,8,445,11,445,12,445,5098,1,445,1,445,4,445,5103,8,445,11,
445,12,445,5104,1,446,4,446,5108,8,446,11,446,12,446,5109,1,446,1,446,1,
446,1,446,3,446,5116,8,446,1,446,1,446,1,447,1,447,1,448,1,448,1,448,1,448,
1,448,3,448,5127,8,448,1,448,1,448,3,448,5131,8,448,1,449,1,449,3,449,5135,
8,449,1,450,1,450,1,450,4,450,5140,8,450,11,450,12,450,5141,1,450,3,450,
5145,8,450,1,450,3,450,5148,8,450,1,450,3,450,5151,8,450,1,450,5,450,5154,
8,450,10,450,12,450,5157,9,450,1,450,3,450,5160,8,450,1,450,5,450,5163,8,
450,10,450,12,450,5166,9,450,1,451,3,451,5169,8,451,1,451,1,451,3,451,5173,
8,451,1,451,4,451,5176,8,451,11,451,12,451,5177,1,452,3,452,5181,8,452,1,
452,1,452,3,452,5185,8,452,1,452,3,452,5188,8,452,1,453,3,453,5191,8,453,
1,453,1,453,3,453,5195,8,453,1,453,4,453,5198,8,453,11,453,12,453,5199,1,
453,3,453,5203,8,453,1,453,3,453,5206,8,453,1,454,3,454,5209,8,454,1,454,
1,454,1,454,1,454,1,455,3,455,5216,8,455,1,455,1,455,3,455,5220,8,455,1,
455,1,455,1,456,1,456,1,456,3,456,5227,8,456,1,456,1,456,3,456,5231,8,456,
1,457,1,457,1,457,1,458,1,458,4,458,5238,8,458,11,458,12,458,5239,1,459,
1,459,1,459,3,459,5245,8,459,1,459,1,459,3,459,5249,8,459,1,460,1,460,1,
460,1,461,1,461,4,461,5256,8,461,11,461,12,461,5257,1,462,1,462,1,462,1,
462,1,462,1,462,1,462,1,462,1,462,1,462,3,462,5270,8,462,1,463,1,463,1,463,
3,463,5275,8,463,1,463,3,463,5278,8,463,1,463,3,463,5281,8,463,1,463,3,463,
5284,8,463,1,464,1,464,3,464,5288,8,464,1,464,1,464,3,464,5292,8,464,1,464,
1,464,1,464,3,464,5297,8,464,1,464,1,464,1,464,1,464,3,464,5303,8,464,1,
464,1,464,1,464,1,464,3,464,5309,8,464,1,464,1,464,1,464,3,464,5314,8,464,
1,464,3,464,5317,8,464,1,464,1,464,1,465,1,465,1,465,3,465,5324,8,465,1,
466,1,466,4,466,5328,8,466,11,466,12,466,5329,1,466,1,466,3,466,5334,8,466,
1,466,3,466,5337,8,466,1,466,3,466,5340,8,466,1,466,3,466,5343,8,466,1,467,
4,467,5346,8,467,11,467,12,467,5347,1,467,1,467,3,467,5352,8,467,1,468,1,
468,3,468,5356,8,468,1,469,1,469,3,469,5360,8,469,1,469,1,469,1,469,3,469,
5365,8,469,1,470,1,470,1,470,3,470,5370,8,470,1,471,1,471,1,471,1,472,3,
472,5376,8,472,1,472,1,472,1,472,1,473,1,473,1,473,1,473,3,473,5385,8,473,
1,473,3,473,5388,8,473,1,473,3,473,5391,8,473,1,473,3,473,5394,8,473,1,474,
4,474,5397,8,474,11,474,12,474,5398,1,474,1,474,4,474,5403,8,474,11,474,
12,474,5404,1,475,4,475,5408,8,475,11,475,12,475,5409,1,475,1,475,1,475,
1,475,4,475,5416,8,475,11,475,12,475,5417,1,476,1,476,1,476,1,476,1,476,
1,477,1,477,3,477,5427,8,477,1,478,1,478,3,478,5431,8,478,1,479,1,479,3,
479,5435,8,479,1,480,1,480,3,480,5439,8,480,1,481,1,481,3,481,5443,8,481,
1,482,1,482,1,482,1,483,1,483,1,483,1,483,3,483,5452,8,483,1,483,3,483,5455,
8,483,1,483,3,483,5458,8,483,1,483,3,483,5461,8,483,1,483,3,483,5464,8,483,
1,484,1,484,1,484,5,484,5469,8,484,10,484,12,484,5472,9,484,3,484,5474,8,
484,1,485,1,485,3,485,5478,8,485,1,485,3,485,5481,8,485,1,485,1,485,3,485,
5485,8,485,1,486,1,486,3,486,5489,8,486,1,486,1,486,3,486,5493,8,486,1,487,
1,487,4,487,5497,8,487,11,487,12,487,5498,1,488,1,488,3,488,5503,8,488,1,
488,3,488,5506,8,488,1,489,1,489,3,489,5510,8,489,1,489,1,489,1,490,1,490,
3,490,5516,8,490,1,490,1,490,1,491,3,491,5521,8,491,1,491,1,491,1,491,1,
492,1,492,3,492,5528,8,492,1,492,1,492,1,493,1,493,1,493,3,493,5535,8,493,
1,494,3,494,5538,8,494,1,494,1,494,3,494,5542,8,494,1,494,1,494,1,494,3,
494,5547,8,494,1,494,1,494,1,495,1,495,1,495,1,495,1,495,4,495,5556,8,495,
11,495,12,495,5557,3,495,5560,8,495,1,496,3,496,5563,8,496,1,496,1,496,3,
496,5567,8,496,1,496,4,496,5570,8,496,11,496,12,496,5571,1,497,1,497,1,497,
1,497,3,497,5578,8,497,1,497,3,497,5581,8,497,1,497,1,497,1,497,3,497,5586,
8,497,1,498,1,498,1,498,3,498,5591,8,498,1,498,3,498,5594,8,498,1,498,3,
498,5597,8,498,1,498,3,498,5600,8,498,1,498,3,498,5603,8,498,1,498,3,498,
5606,8,498,1,498,3,498,5609,8,498,1,499,1,499,1,499,3,499,5614,8,499,1,500,
1,500,3,500,5618,8,500,1,500,1,500,1,500,3,500,5623,8,500,1,501,1,501,1,
502,1,502,3,502,5629,8,502,1,502,3,502,5632,8,502,1,503,1,503,1,504,3,504,
5637,8,504,1,504,1,504,5,504,5641,8,504,10,504,12,504,5644,9,504,1,505,1,
505,3,505,5648,8,505,1,505,1,505,5,505,5652,8,505,10,505,12,505,5655,9,505,
1,506,3,506,5658,8,506,1,506,1,506,5,506,5662,8,506,10,506,12,506,5665,9,
506,1,507,1,507,3,507,5669,8,507,1,507,1,507,5,507,5673,8,507,10,507,12,
507,5676,9,507,1,508,1,508,3,508,5680,8,508,1,508,5,508,5683,8,508,10,508,
12,508,5686,9,508,1,509,1,509,1,509,3,509,5691,8,509,1,509,5,509,5694,8,
509,10,509,12,509,5697,9,509,1,510,3,510,5700,8,510,1,510,1,510,5,510,5704,
8,510,10,510,12,510,5707,9,510,1,511,1,511,3,511,5711,8,511,1,511,1,511,
5,511,5715,8,511,10,511,12,511,5718,9,511,1,512,3,512,5721,8,512,1,512,1,
512,1,512,5,512,5726,8,512,10,512,12,512,5729,9,512,1,513,1,513,3,513,5733,
8,513,1,513,1,513,1,513,5,513,5738,8,513,10,513,12,513,5741,9,513,1,514,
3,514,5744,8,514,1,514,1,514,5,514,5748,8,514,10,514,12,514,5751,9,514,1,
515,1,515,3,515,5755,8,515,1,515,1,515,5,515,5759,8,515,10,515,12,515,5762,
9,515,1,516,1,516,5,516,5766,8,516,10,516,12,516,5769,9,516,1,517,1,517,
1,517,1,518,1,518,5,518,5776,8,518,10,518,12,518,5779,9,518,1,519,1,519,
1,519,1,520,3,520,5785,8,520,1,520,1,520,5,520,5789,8,520,10,520,12,520,
5792,9,520,1,521,1,521,1,521,1,522,1,522,1,522,1,522,1,522,1,522,3,522,5803,
8,522,1,523,1,523,5,523,5807,8,523,10,523,12,523,5810,9,523,1,524,1,524,
1,524,4,524,5815,8,524,11,524,12,524,5816,3,524,5819,8,524,1,525,3,525,5822,
8,525,1,525,1,525,1,526,1,526,1,526,1,526,1,526,1,526,1,526,3,526,5833,8,
526,1,527,1,527,3,527,5837,8,527,1,527,3,527,5840,8,527,1,527,1,527,1,527,
1,527,1,527,1,527,1,527,3,527,5849,8,527,1,528,1,528,5,528,5853,8,528,10,
528,12,528,5856,9,528,1,528,3,528,5859,8,528,1,528,5,528,5862,8,528,10,528,
12,528,5865,9,528,1,528,5,528,5868,8,528,10,528,12,528,5871,9,528,3,528,
5873,8,528,1,529,1,529,1,529,3,529,5878,8,529,1,529,5,529,5881,8,529,10,
529,12,529,5884,9,529,1,529,1,529,1,530,1,530,1,530,3,530,5891,8,530,1,531,
1,531,3,531,5895,8,531,1,531,3,531,5898,8,531,1,531,1,531,1,532,1,532,1,
532,1,532,1,533,1,533,1,533,1,533,1,533,1,533,1,534,1,534,1,534,4,534,5915,
8,534,11,534,12,534,5916,1,535,3,535,5920,8,535,1,535,3,535,5923,8,535,1,
535,1,535,3,535,5927,8,535,1,535,1,535,1,535,3,535,5932,8,535,1,535,1,535,
1,535,3,535,5937,8,535,1,535,3,535,5940,8,535,1,535,1,535,1,535,3,535,5945,
8,535,1,535,1,535,1,535,3,535,5950,8,535,1,535,1,535,1,535,3,535,5955,8,
535,1,535,1,535,1,535,3,535,5960,8,535,1,535,3,535,5963,8,535,1,536,3,536,
5966,8,536,1,536,3,536,5969,8,536,1,536,1,536,1,536,1,536,1,536,1,536,3,
536,5977,8,536,1,537,1,537,1,537,1,537,3,537,5983,8,537,1,538,1,538,1,538,
1,538,3,538,5989,8,538,1,538,5,538,5992,8,538,10,538,12,538,5995,9,538,1,
538,1,538,5,538,5999,8,538,10,538,12,538,6002,9,538,1,538,3,538,6005,8,538,
1,539,1,539,1,539,1,539,1,539,3,539,6012,8,539,1,539,5,539,6015,8,539,10,
539,12,539,6018,9,539,1,539,1,539,5,539,6022,8,539,10,539,12,539,6025,9,
539,1,539,3,539,6028,8,539,1,540,1,540,1,540,1,540,3,540,6034,8,540,1,540,
1,540,1,541,1,541,1,542,1,542,1,543,1,543,1,543,1,543,3,543,6046,8,543,1,
543,1,543,3,543,6050,8,543,1,543,3,543,6053,8,543,1,544,1,544,1,544,1,544,
3,544,6059,8,544,1,544,1,544,3,544,6063,8,544,1,544,3,544,6066,8,544,1,545,
1,545,1,545,1,545,3,545,6072,8,545,1,546,1,546,3,546,6076,8,546,1,546,4,
546,6079,8,546,11,546,12,546,6080,1,546,3,546,6084,8,546,1,546,3,546,6087,
8,546,1,547,1,547,1,547,1,548,1,548,1,548,1,549,1,549,1,549,1,550,1,550,
3,550,6100,8,550,1,551,1,551,1,551,1,552,1,552,1,552,1,553,1,553,1,553,1,
554,1,554,1,554,1,555,1,555,1,555,1,556,1,556,1,556,1,557,1,557,1,558,1,
558,1,559,1,559,1,560,1,560,1,561,1,561,1,562,1,562,1,563,1,563,1,564,1,
564,1,565,1,565,1,565,3,565,6139,8,565,1,566,1,566,1,567,1,567,1,568,1,568,
1,568,1,568,1,568,1,568,3,568,6151,8,568,1,569,1,569,1,570,1,570,1,571,1,
571,1,572,1,572,1,573,1,573,1,574,1,574,3,574,6165,8,574,1,575,1,575,3,575,
6169,8,575,1,575,3,575,6172,8,575,1,576,1,576,3,576,6176,8,576,1,577,1,577,
1,578,1,578,1,579,1,579,1,580,1,580,1,581,1,581,3,581,6188,8,581,1,582,1,
582,1,583,1,583,1,584,1,584,1,585,1,585,1,586,1,586,1,586,1,586,1,586,1,
586,3,586,6204,8,586,1,587,1,587,1,588,1,588,1,588,3,588,6211,8,588,1,589,
1,589,1,590,1,590,1,590,1,590,3,590,6219,8,590,1,590,1,590,1,591,1,591,1,
591,1,591,3,591,6227,8,591,1,591,1,591,1,592,1,592,1,592,1,592,1,592,1,592,
1,592,1,592,1,592,1,592,1,592,1,592,1,592,1,592,1,592,3,592,6246,8,592,1,
593,1,593,1,593,1,593,1,593,1,593,1,593,1,593,1,593,1,593,1,593,1,593,1,
593,1,593,1,593,3,593,6263,8,593,1,593,1,593,1,593,1,593,1,593,1,593,1,593,
1,593,1,593,1,593,1,593,1,593,1,593,1,593,1,593,1,593,3,593,6281,8,593,1,
594,4,594,6284,8,594,11,594,12,594,6285,1,594,0,0,595,0,2,4,6,8,10,12,14,
16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,
182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,
254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,
290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,
326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,
362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,
398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,
434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,
470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,
506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,540,
542,544,546,548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,
578,580,582,584,586,588,590,592,594,596,598,600,602,604,606,608,610,612,
614,616,618,620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,
650,652,654,656,658,660,662,664,666,668,670,672,674,676,678,680,682,684,
686,688,690,692,694,696,698,700,702,704,706,708,710,712,714,716,718,720,
722,724,726,728,730,732,734,736,738,740,742,744,746,748,750,752,754,756,
758,760,762,764,766,768,770,772,774,776,778,780,782,784,786,788,790,792,
794,796,798,800,802,804,806,808,810,812,814,816,818,820,822,824,826,828,
830,832,834,836,838,840,842,844,846,848,850,852,854,856,858,860,862,864,
866,868,870,872,874,876,878,880,882,884,886,888,890,892,894,896,898,900,
902,904,906,908,910,912,914,916,918,920,922,924,926,928,930,932,934,936,
938,940,942,944,946,948,950,952,954,956,958,960,962,964,966,968,970,972,
974,976,978,980,982,984,986,988,990,992,994,996,998,1000,1002,1004,1006,
1008,1010,1012,1014,1016,1018,1020,1022,1024,1026,1028,1030,1032,1034,1036,
1038,1040,1042,1044,1046,1048,1050,1052,1054,1056,1058,1060,1062,1064,1066,
1068,1070,1072,1074,1076,1078,1080,1082,1084,1086,1088,1090,1092,1094,1096,
1098,1100,1102,1104,1106,1108,1110,1112,1114,1116,1118,1120,1122,1124,1126,
1128,1130,1132,1134,1136,1138,1140,1142,1144,1146,1148,1150,1152,1154,1156,
1158,1160,1162,1164,1166,1168,1170,1172,1174,1176,1178,1180,1182,1184,1186,
1188,0,70,1,0,234,235,5,0,78,78,130,130,243,243,274,274,380,380,3,0,63,63,
298,298,515,515,2,0,298,298,515,515,1,0,483,484,2,0,14,14,304,304,2,0,80,
80,86,86,2,0,266,266,493,493,2,0,21,21,254,254,1,0,22,23,3,0,241,241,386,
386,429,429,4,0,150,150,197,197,369,369,429,429,2,0,382,382,499,499,3,0,
377,377,440,440,444,444,2,0,205,205,417,417,2,0,63,63,379,379,1,0,460,462,
2,0,279,279,416,416,2,0,38,38,41,41,1,0,189,190,2,0,229,229,290,290,3,0,
226,226,268,268,336,336,3,0,348,348,543,543,547,547,1,0,73,74,1,0,213,214,
1,0,35,36,1,0,346,347,1,0,142,143,1,0,255,256,1,0,33,34,2,0,311,311,420,
420,2,0,156,156,398,398,2,0,216,216,270,270,1,0,279,280,2,0,117,117,137,
137,3,0,146,146,355,355,432,433,1,0,50,51,2,0,553,553,555,555,2,0,521,521,
523,524,3,0,78,78,284,284,337,337,2,0,250,250,459,459,2,0,25,25,135,135,
2,0,95,95,383,384,1,0,468,469,2,0,267,267,411,411,4,0,287,288,317,317,319,
319,437,437,2,0,202,202,495,495,2,0,100,100,262,262,2,0,59,59,506,506,2,
0,222,222,405,405,1,0,103,104,2,0,1,1,331,331,2,0,186,186,536,536,7,0,11,
11,14,15,116,116,152,152,304,305,316,316,318,318,2,0,9,9,266,266,3,0,9,9,
210,210,266,266,2,0,7,7,39,39,2,0,258,258,310,310,2,0,295,295,422,422,2,
0,48,48,492,492,2,0,188,188,196,196,2,0,168,168,185,185,2,0,543,543,547,
547,2,0,526,526,550,550,2,0,19,19,329,329,3,0,307,307,351,351,521,521,2,
0,239,239,323,323,85,0,1,1,24,24,26,26,28,29,31,31,33,36,38,38,41,43,45,
45,47,47,54,55,60,61,68,69,77,77,98,98,100,100,106,106,108,108,128,130,138,
139,141,141,146,147,151,151,156,156,181,181,183,183,187,187,189,191,194,
194,197,197,200,200,202,202,213,214,216,216,218,219,226,226,229,229,237,
238,250,250,258,258,260,260,262,262,264,265,268,268,270,270,272,274,283,
284,287,290,296,296,303,305,308,308,311,311,317,317,319,319,322,322,331,
331,336,337,342,342,352,353,355,355,360,361,364,364,370,371,373,373,376,
376,380,380,383,383,391,391,398,398,401,401,415,415,420,420,431,434,437,
437,466,466,473,473,481,482,486,486,490,491,495,495,497,498,510,511,518,
520,522,522,557,557,2,0,204,204,494,494,1,0,552,555,7059,0,1190,1,0,0,0,
2,1194,1,0,0,0,4,1198,1,0,0,0,6,1217,1,0,0,0,8,1222,1,0,0,0,10,1238,1,0,
0,0,12,1240,1,0,0,0,14,1258,1,0,0,0,16,1263,1,0,0,0,18,1268,1,0,0,0,20,1273,
1,0,0,0,22,1278,1,0,0,0,24,1283,1,0,0,0,26,1288,1,0,0,0,28,1300,1,0,0,0,
30,1302,1,0,0,0,32,1314,1,0,0,0,34,1316,1,0,0,0,36,1328,1,0,0,0,38,1344,
1,0,0,0,40,1346,1,0,0,0,42,1357,1,0,0,0,44,1372,1,0,0,0,46,1393,1,0,0,0,
48,1402,1,0,0,0,50,1410,1,0,0,0,52,1416,1,0,0,0,54,1420,1,0,0,0,56,1442,
1,0,0,0,58,1446,1,0,0,0,60,1448,1,0,0,0,62,1470,1,0,0,0,64,1479,1,0,0,0,
66,1482,1,0,0,0,68,1488,1,0,0,0,70,1502,1,0,0,0,72,1509,1,0,0,0,74,1525,
1,0,0,0,76,1532,1,0,0,0,78,1536,1,0,0,0,80,1538,1,0,0,0,82,1554,1,0,0,0,
84,1560,1,0,0,0,86,1577,1,0,0,0,88,1600,1,0,0,0,90,1638,1,0,0,0,92,1640,
1,0,0,0,94,1646,1,0,0,0,96,1660,1,0,0,0,98,1680,1,0,0,0,100,1692,1,0,0,0,
102,1703,1,0,0,0,104,1705,1,0,0,0,106,1717,1,0,0,0,108,1724,1,0,0,0,110,
1741,1,0,0,0,112,1743,1,0,0,0,114,1760,1,0,0,0,116,1775,1,0,0,0,118,1786,
1,0,0,0,120,1797,1,0,0,0,122,1807,1,0,0,0,124,1816,1,0,0,0,126,1833,1,0,
0,0,128,1851,1,0,0,0,130,1858,1,0,0,0,132,1868,1,0,0,0,134,1877,1,0,0,0,
136,1897,1,0,0,0,138,1899,1,0,0,0,140,1913,1,0,0,0,142,1917,1,0,0,0,144,
1926,1,0,0,0,146,1930,1,0,0,0,148,1945,1,0,0,0,150,1958,1,0,0,0,152,1963,
1,0,0,0,154,1970,1,0,0,0,156,1988,1,0,0,0,158,1990,1,0,0,0,160,1999,1,0,
0,0,162,2028,1,0,0,0,164,2031,1,0,0,0,166,2036,1,0,0,0,168,2040,1,0,0,0,
170,2051,1,0,0,0,172,2054,1,0,0,0,174,2061,1,0,0,0,176,2068,1,0,0,0,178,
2097,1,0,0,0,180,2104,1,0,0,0,182,2107,1,0,0,0,184,2127,1,0,0,0,186,2134,
1,0,0,0,188,2142,1,0,0,0,190,2158,1,0,0,0,192,2178,1,0,0,0,194,2181,1,0,
0,0,196,2192,1,0,0,0,198,2203,1,0,0,0,200,2213,1,0,0,0,202,2222,1,0,0,0,
204,2224,1,0,0,0,206,2238,1,0,0,0,208,2245,1,0,0,0,210,2254,1,0,0,0,212,
2259,1,0,0,0,214,2268,1,0,0,0,216,2277,1,0,0,0,218,2290,1,0,0,0,220,2292,
1,0,0,0,222,2320,1,0,0,0,224,2339,1,0,0,0,226,2362,1,0,0,0,228,2369,1,0,
0,0,230,2383,1,0,0,0,232,2390,1,0,0,0,234,2398,1,0,0,0,236,2406,1,0,0,0,
238,2413,1,0,0,0,240,2420,1,0,0,0,242,2428,1,0,0,0,244,2437,1,0,0,0,246,
2446,1,0,0,0,248,2455,1,0,0,0,250,2464,1,0,0,0,252,2472,1,0,0,0,254,2479,
1,0,0,0,256,2494,1,0,0,0,258,2503,1,0,0,0,260,2545,1,0,0,0,262,2548,1,0,
0,0,264,2550,1,0,0,0,266,2552,1,0,0,0,268,2555,1,0,0,0,270,2557,1,0,0,0,
272,2559,1,0,0,0,274,2561,1,0,0,0,276,2563,1,0,0,0,278,2571,1,0,0,0,280,
2585,1,0,0,0,282,2599,1,0,0,0,284,2607,1,0,0,0,286,2615,1,0,0,0,288,2621,
1,0,0,0,290,2627,1,0,0,0,292,2633,1,0,0,0,294,2641,1,0,0,0,296,2644,1,0,
0,0,298,2647,1,0,0,0,300,2653,1,0,0,0,302,2659,1,0,0,0,304,2667,1,0,0,0,
306,2676,1,0,0,0,308,2678,1,0,0,0,310,2680,1,0,0,0,312,2682,1,0,0,0,314,
2696,1,0,0,0,316,2701,1,0,0,0,318,2703,1,0,0,0,320,2705,1,0,0,0,322,2714,
1,0,0,0,324,2720,1,0,0,0,326,2743,1,0,0,0,328,2747,1,0,0,0,330,2762,1,0,
0,0,332,2765,1,0,0,0,334,2769,1,0,0,0,336,2773,1,0,0,0,338,2779,1,0,0,0,
340,2781,1,0,0,0,342,2795,1,0,0,0,344,2805,1,0,0,0,346,2830,1,0,0,0,348,
2836,1,0,0,0,350,2845,1,0,0,0,352,2849,1,0,0,0,354,2854,1,0,0,0,356,2866,
1,0,0,0,358,2874,1,0,0,0,360,2877,1,0,0,0,362,2887,1,0,0,0,364,2890,1,0,
0,0,366,2893,1,0,0,0,368,2899,1,0,0,0,370,2907,1,0,0,0,372,2916,1,0,0,0,
374,2922,1,0,0,0,376,2946,1,0,0,0,378,2962,1,0,0,0,380,2967,1,0,0,0,382,
2972,1,0,0,0,384,2978,1,0,0,0,386,2983,1,0,0,0,388,2993,1,0,0,0,390,3000,
1,0,0,0,392,3005,1,0,0,0,394,3007,1,0,0,0,396,3013,1,0,0,0,398,3024,1,0,
0,0,400,3026,1,0,0,0,402,3035,1,0,0,0,404,3051,1,0,0,0,406,3059,1,0,0,0,
408,3076,1,0,0,0,410,3080,1,0,0,0,412,3086,1,0,0,0,414,3092,1,0,0,0,416,
3097,1,0,0,0,418,3111,1,0,0,0,420,3114,1,0,0,0,422,3117,1,0,0,0,424,3125,
1,0,0,0,426,3127,1,0,0,0,428,3135,1,0,0,0,430,3138,1,0,0,0,432,3143,1,0,
0,0,434,3151,1,0,0,0,436,3153,1,0,0,0,438,3186,1,0,0,0,440,3191,1,0,0,0,
442,3197,1,0,0,0,444,3204,1,0,0,0,446,3206,1,0,0,0,448,3212,1,0,0,0,450,
3215,1,0,0,0,452,3223,1,0,0,0,454,3227,1,0,0,0,456,3229,1,0,0,0,458,3233,
1,0,0,0,460,3268,1,0,0,0,462,3271,1,0,0,0,464,3283,1,0,0,0,466,3297,1,0,
0,0,468,3317,1,0,0,0,470,3319,1,0,0,0,472,3324,1,0,0,0,474,3331,1,0,0,0,
476,3334,1,0,0,0,478,3337,1,0,0,0,480,3347,1,0,0,0,482,3356,1,0,0,0,484,
3361,1,0,0,0,486,3365,1,0,0,0,488,3372,1,0,0,0,490,3380,1,0,0,0,492,3417,
1,0,0,0,494,3434,1,0,0,0,496,3446,1,0,0,0,498,3452,1,0,0,0,500,3454,1,0,
0,0,502,3458,1,0,0,0,504,3463,1,0,0,0,506,3477,1,0,0,0,508,3483,1,0,0,0,
510,3488,1,0,0,0,512,3494,1,0,0,0,514,3509,1,0,0,0,516,3512,1,0,0,0,518,
3523,1,0,0,0,520,3525,1,0,0,0,522,3536,1,0,0,0,524,3542,1,0,0,0,526,3547,
1,0,0,0,528,3554,1,0,0,0,530,3561,1,0,0,0,532,3570,1,0,0,0,534,3584,1,0,
0,0,536,3638,1,0,0,0,538,3640,1,0,0,0,540,3657,1,0,0,0,542,3679,1,0,0,0,
544,3682,1,0,0,0,546,3687,1,0,0,0,548,3691,1,0,0,0,550,3707,1,0,0,0,552,
3718,1,0,0,0,554,3736,1,0,0,0,556,3743,1,0,0,0,558,3745,1,0,0,0,560,3751,
1,0,0,0,562,3753,1,0,0,0,564,3757,1,0,0,0,566,3763,1,0,0,0,568,3769,1,0,
0,0,570,3777,1,0,0,0,572,3800,1,0,0,0,574,3809,1,0,0,0,576,3815,1,0,0,0,
578,3834,1,0,0,0,580,3837,1,0,0,0,582,3851,1,0,0,0,584,3858,1,0,0,0,586,
3877,1,0,0,0,588,3879,1,0,0,0,590,3882,1,0,0,0,592,3893,1,0,0,0,594,3895,
1,0,0,0,596,3901,1,0,0,0,598,3907,1,0,0,0,600,3925,1,0,0,0,602,3939,1,0,
0,0,604,3952,1,0,0,0,606,3954,1,0,0,0,608,3960,1,0,0,0,610,3965,1,0,0,0,
612,3973,1,0,0,0,614,3990,1,0,0,0,616,3994,1,0,0,0,618,3996,1,0,0,0,620,
4010,1,0,0,0,622,4029,1,0,0,0,624,4046,1,0,0,0,626,4048,1,0,0,0,628,4053,
1,0,0,0,630,4059,1,0,0,0,632,4064,1,0,0,0,634,4086,1,0,0,0,636,4092,1,0,
0,0,638,4100,1,0,0,0,640,4108,1,0,0,0,642,4114,1,0,0,0,644,4118,1,0,0,0,
646,4122,1,0,0,0,648,4125,1,0,0,0,650,4144,1,0,0,0,652,4154,1,0,0,0,654,
4177,1,0,0,0,656,4179,1,0,0,0,658,4183,1,0,0,0,660,4193,1,0,0,0,662,4211,
1,0,0,0,664,4213,1,0,0,0,666,4216,1,0,0,0,668,4219,1,0,0,0,670,4230,1,0,
0,0,672,4233,1,0,0,0,674,4238,1,0,0,0,676,4243,1,0,0,0,678,4247,1,0,0,0,
680,4261,1,0,0,0,682,4263,1,0,0,0,684,4267,1,0,0,0,686,4270,1,0,0,0,688,
4272,1,0,0,0,690,4280,1,0,0,0,692,4295,1,0,0,0,694,4297,1,0,0,0,696,4307,
1,0,0,0,698,4319,1,0,0,0,700,4330,1,0,0,0,702,4339,1,0,0,0,704,4345,1,0,
0,0,706,4354,1,0,0,0,708,4360,1,0,0,0,710,4368,1,0,0,0,712,4374,1,0,0,0,
714,4381,1,0,0,0,716,4392,1,0,0,0,718,4404,1,0,0,0,720,4412,1,0,0,0,722,
4419,1,0,0,0,724,4427,1,0,0,0,726,4433,1,0,0,0,728,4441,1,0,0,0,730,4451,
1,0,0,0,732,4460,1,0,0,0,734,4465,1,0,0,0,736,4470,1,0,0,0,738,4478,1,0,
0,0,740,4504,1,0,0,0,742,4516,1,0,0,0,744,4534,1,0,0,0,746,4541,1,0,0,0,
748,4549,1,0,0,0,750,4555,1,0,0,0,752,4564,1,0,0,0,754,4567,1,0,0,0,756,
4573,1,0,0,0,758,4585,1,0,0,0,760,4593,1,0,0,0,762,4602,1,0,0,0,764,4604,
1,0,0,0,766,4612,1,0,0,0,768,4614,1,0,0,0,770,4634,1,0,0,0,772,4638,1,0,
0,0,774,4642,1,0,0,0,776,4651,1,0,0,0,778,4653,1,0,0,0,780,4657,1,0,0,0,
782,4666,1,0,0,0,784,4672,1,0,0,0,786,4681,1,0,0,0,788,4687,1,0,0,0,790,
4695,1,0,0,0,792,4701,1,0,0,0,794,4707,1,0,0,0,796,4713,1,0,0,0,798,4723,
1,0,0,0,800,4734,1,0,0,0,802,4738,1,0,0,0,804,4743,1,0,0,0,806,4755,1,0,
0,0,808,4757,1,0,0,0,810,4767,1,0,0,0,812,4773,1,0,0,0,814,4776,1,0,0,0,
816,4782,1,0,0,0,818,4789,1,0,0,0,820,4794,1,0,0,0,822,4800,1,0,0,0,824,
4832,1,0,0,0,826,4836,1,0,0,0,828,4843,1,0,0,0,830,4849,1,0,0,0,832,4863,
1,0,0,0,834,4882,1,0,0,0,836,4884,1,0,0,0,838,4896,1,0,0,0,840,4904,1,0,
0,0,842,4912,1,0,0,0,844,4921,1,0,0,0,846,4926,1,0,0,0,848,4932,1,0,0,0,
850,4940,1,0,0,0,852,4946,1,0,0,0,854,4952,1,0,0,0,856,4967,1,0,0,0,858,
4970,1,0,0,0,860,4984,1,0,0,0,862,4987,1,0,0,0,864,5006,1,0,0,0,866,5009,
1,0,0,0,868,5021,1,0,0,0,870,5034,1,0,0,0,872,5048,1,0,0,0,874,5052,1,0,
0,0,876,5055,1,0,0,0,878,5062,1,0,0,0,880,5066,1,0,0,0,882,5075,1,0,0,0,
884,5079,1,0,0,0,886,5084,1,0,0,0,888,5086,1,0,0,0,890,5096,1,0,0,0,892,
5107,1,0,0,0,894,5119,1,0,0,0,896,5130,1,0,0,0,898,5134,1,0,0,0,900,5136,
1,0,0,0,902,5168,1,0,0,0,904,5180,1,0,0,0,906,5190,1,0,0,0,908,5208,1,0,
0,0,910,5215,1,0,0,0,912,5223,1,0,0,0,914,5232,1,0,0,0,916,5235,1,0,0,0,
918,5241,1,0,0,0,920,5250,1,0,0,0,922,5253,1,0,0,0,924,5259,1,0,0,0,926,
5271,1,0,0,0,928,5285,1,0,0,0,930,5320,1,0,0,0,932,5325,1,0,0,0,934,5345,
1,0,0,0,936,5355,1,0,0,0,938,5357,1,0,0,0,940,5366,1,0,0,0,942,5371,1,0,
0,0,944,5375,1,0,0,0,946,5380,1,0,0,0,948,5396,1,0,0,0,950,5407,1,0,0,0,
952,5419,1,0,0,0,954,5426,1,0,0,0,956,5428,1,0,0,0,958,5434,1,0,0,0,960,
5436,1,0,0,0,962,5440,1,0,0,0,964,5444,1,0,0,0,966,5447,1,0,0,0,968,5465,
1,0,0,0,970,5475,1,0,0,0,972,5486,1,0,0,0,974,5494,1,0,0,0,976,5500,1,0,
0,0,978,5507,1,0,0,0,980,5513,1,0,0,0,982,5520,1,0,0,0,984,5525,1,0,0,0,
986,5531,1,0,0,0,988,5537,1,0,0,0,990,5559,1,0,0,0,992,5562,1,0,0,0,994,
5585,1,0,0,0,996,5587,1,0,0,0,998,5610,1,0,0,0,1000,5615,1,0,0,0,1002,5624,
1,0,0,0,1004,5628,1,0,0,0,1006,5633,1,0,0,0,1008,5636,1,0,0,0,1010,5645,
1,0,0,0,1012,5657,1,0,0,0,1014,5666,1,0,0,0,1016,5677,1,0,0,0,1018,5687,
1,0,0,0,1020,5699,1,0,0,0,1022,5708,1,0,0,0,1024,5720,1,0,0,0,1026,5730,
1,0,0,0,1028,5743,1,0,0,0,1030,5752,1,0,0,0,1032,5763,1,0,0,0,1034,5770,
1,0,0,0,1036,5773,1,0,0,0,1038,5780,1,0,0,0,1040,5784,1,0,0,0,1042,5793,
1,0,0,0,1044,5802,1,0,0,0,1046,5804,1,0,0,0,1048,5811,1,0,0,0,1050,5821,
1,0,0,0,1052,5832,1,0,0,0,1054,5834,1,0,0,0,1056,5850,1,0,0,0,1058,5874,
1,0,0,0,1060,5890,1,0,0,0,1062,5892,1,0,0,0,1064,5901,1,0,0,0,1066,5905,
1,0,0,0,1068,5911,1,0,0,0,1070,5919,1,0,0,0,1072,5965,1,0,0,0,1074,5982,
1,0,0,0,1076,5984,1,0,0,0,1078,6006,1,0,0,0,1080,6029,1,0,0,0,1082,6037,
1,0,0,0,1084,6039,1,0,0,0,1086,6052,1,0,0,0,1088,6065,1,0,0,0,1090,6071,
1,0,0,0,1092,6075,1,0,0,0,1094,6088,1,0,0,0,1096,6091,1,0,0,0,1098,6094,
1,0,0,0,1100,6099,1,0,0,0,1102,6101,1,0,0,0,1104,6104,1,0,0,0,1106,6107,
1,0,0,0,1108,6110,1,0,0,0,1110,6113,1,0,0,0,1112,6116,1,0,0,0,1114,6119,
1,0,0,0,1116,6121,1,0,0,0,1118,6123,1,0,0,0,1120,6125,1,0,0,0,1122,6127,
1,0,0,0,1124,6129,1,0,0,0,1126,6131,1,0,0,0,1128,6133,1,0,0,0,1130,6138,
1,0,0,0,1132,6140,1,0,0,0,1134,6142,1,0,0,0,1136,6150,1,0,0,0,1138,6152,
1,0,0,0,1140,6154,1,0,0,0,1142,6156,1,0,0,0,1144,6158,1,0,0,0,1146,6160,
1,0,0,0,1148,6164,1,0,0,0,1150,6171,1,0,0,0,1152,6175,1,0,0,0,1154,6177,
1,0,0,0,1156,6179,1,0,0,0,1158,6181,1,0,0,0,1160,6183,1,0,0,0,1162,6187,
1,0,0,0,1164,6189,1,0,0,0,1166,6191,1,0,0,0,1168,6193,1,0,0,0,1170,6195,
1,0,0,0,1172,6203,1,0,0,0,1174,6205,1,0,0,0,1176,6210,1,0,0,0,1178,6212,
1,0,0,0,1180,6214,1,0,0,0,1182,6222,1,0,0,0,1184,6245,1,0,0,0,1186,6280,
1,0,0,0,1188,6283,1,0,0,0,1190,1191,3,2,1,0,1191,1192,5,0,0,1,1192,1,1,0,
0,0,1193,1195,3,4,2,0,1194,1193,1,0,0,0,1195,1196,1,0,0,0,1196,1194,1,0,
0,0,1196,1197,1,0,0,0,1197,3,1,0,0,0,1198,1200,3,8,4,0,1199,1201,3,26,13,
0,1200,1199,1,0,0,0,1200,1201,1,0,0,0,1201,1203,1,0,0,0,1202,1204,3,154,
77,0,1203,1202,1,0,0,0,1203,1204,1,0,0,0,1204,1206,1,0,0,0,1205,1207,3,504,
252,0,1206,1205,1,0,0,0,1206,1207,1,0,0,0,1207,1211,1,0,0,0,1208,1210,3,
4,2,0,1209,1208,1,0,0,0,1210,1213,1,0,0,0,1211,1209,1,0,0,0,1211,1212,1,
0,0,0,1212,1215,1,0,0,0,1213,1211,1,0,0,0,1214,1216,3,6,3,0,1215,1214,1,
0,0,0,1215,1216,1,0,0,0,1216,5,1,0,0,0,1217,1218,5,158,0,0,1218,1219,5,361,
0,0,1219,1220,3,1152,576,0,1220,1221,5,534,0,0,1221,7,1,0,0,0,1222,1223,
7,0,0,0,1223,1224,5,145,0,0,1224,1225,5,534,0,0,1225,1229,3,12,6,0,1226,
1228,3,10,5,0,1227,1226,1,0,0,0,1228,1231,1,0,0,0,1229,1227,1,0,0,0,1229,
1230,1,0,0,0,1230,9,1,0,0,0,1231,1229,1,0,0,0,1232,1239,3,14,7,0,1233,1239,
3,16,8,0,1234,1239,3,18,9,0,1235,1239,3,20,10,0,1236,1239,3,22,11,0,1237,
1239,3,24,12,0,1238,1232,1,0,0,0,1238,1233,1,0,0,0,1238,1234,1,0,0,0,1238,
1235,1,0,0,0,1238,1236,1,0,0,0,1238,1237,1,0,0,0,1239,11,1,0,0,0,1240,1241,
5,362,0,0,1241,1242,5,534,0,0,1242,1250,3,1152,576,0,1243,1245,5,254,0,0,
1244,1243,1,0,0,0,1244,1245,1,0,0,0,1245,1246,1,0,0,0,1246,1248,7,1,0,0,
1247,1249,5,361,0,0,1248,1247,1,0,0,0,1248,1249,1,0,0,0,1249,1251,1,0,0,
0,1250,1244,1,0,0,0,1250,1251,1,0,0,0,1251,1253,1,0,0,0,1252,1254,5,534,
0,0,1253,1252,1,0,0,0,1253,1254,1,0,0,0,1254,1256,1,0,0,0,1255,1257,3,1188,
594,0,1256,1255,1,0,0,0,1256,1257,1,0,0,0,1257,13,1,0,0,0,1258,1259,5,32,
0,0,1259,1261,5,534,0,0,1260,1262,3,1188,594,0,1261,1260,1,0,0,0,1261,1262,
1,0,0,0,1262,15,1,0,0,0,1263,1264,5,249,0,0,1264,1266,5,534,0,0,1265,1267,
3,1188,594,0,1266,1265,1,0,0,0,1266,1267,1,0,0,0,1267,17,1,0,0,0,1268,1269,
5,113,0,0,1269,1271,5,534,0,0,1270,1272,3,1188,594,0,1271,1270,1,0,0,0,1271,
1272,1,0,0,0,1272,19,1,0,0,0,1273,1274,5,112,0,0,1274,1276,5,534,0,0,1275,
1277,3,1188,594,0,1276,1275,1,0,0,0,1276,1277,1,0,0,0,1277,21,1,0,0,0,1278,
1279,5,421,0,0,1279,1281,5,534,0,0,1280,1282,3,1188,594,0,1281,1280,1,0,
0,0,1281,1282,1,0,0,0,1282,23,1,0,0,0,1283,1284,5,389,0,0,1284,1286,5,534,
0,0,1285,1287,3,1188,594,0,1286,1285,1,0,0,0,1286,1287,1,0,0,0,1287,25,1,
0,0,0,1288,1289,5,184,0,0,1289,1290,5,145,0,0,1290,1294,5,534,0,0,1291,1293,
3,28,14,0,1292,1291,1,0,0,0,1293,1296,1,0,0,0,1294,1292,1,0,0,0,1294,1295,
1,0,0,0,1295,27,1,0,0,0,1296,1294,1,0,0,0,1297,1301,3,30,15,0,1298,1301,
3,54,27,0,1299,1301,3,100,50,0,1300,1297,1,0,0,0,1300,1298,1,0,0,0,1300,
1299,1,0,0,0,1301,29,1,0,0,0,1302,1303,5,93,0,0,1303,1304,5,419,0,0,1304,
1308,5,534,0,0,1305,1307,3,32,16,0,1306,1305,1,0,0,0,1307,1310,1,0,0,0,1308,
1306,1,0,0,0,1308,1309,1,0,0,0,1309,31,1,0,0,0,1310,1308,1,0,0,0,1311,1315,
3,34,17,0,1312,1315,3,36,18,0,1313,1315,3,54,27,0,1314,1311,1,0,0,0,1314,
1312,1,0,0,0,1314,1313,1,0,0,0,1315,33,1,0,0,0,1316,1317,5,449,0,0,1317,
1318,5,534,0,0,1318,1324,3,1124,562,0,1319,1321,5,514,0,0,1320,1319,1,0,
0,0,1320,1321,1,0,0,0,1321,1322,1,0,0,0,1322,1323,5,125,0,0,1323,1325,5,
297,0,0,1324,1320,1,0,0,0,1324,1325,1,0,0,0,1325,1326,1,0,0,0,1326,1327,
5,534,0,0,1327,35,1,0,0,0,1328,1329,5,320,0,0,1329,1330,5,534,0,0,1330,1334,
3,1124,562,0,1331,1333,3,38,19,0,1332,1331,1,0,0,0,1333,1336,1,0,0,0,1334,
1332,1,0,0,0,1334,1335,1,0,0,0,1335,1337,1,0,0,0,1336,1334,1,0,0,0,1337,
1338,5,534,0,0,1338,37,1,0,0,0,1339,1345,3,40,20,0,1340,1345,3,42,21,0,1341,
1345,3,44,22,0,1342,1345,3,50,25,0,1343,1345,3,52,26,0,1344,1339,1,0,0,0,
1344,1340,1,0,0,0,1344,1341,1,0,0,0,1344,1342,1,0,0,0,1344,1343,1,0,0,0,
1345,39,1,0,0,0,1346,1348,5,293,0,0,1347,1349,5,439,0,0,1348,1347,1,0,0,
0,1348,1349,1,0,0,0,1349,1352,1,0,0,0,1350,1353,3,1178,589,0,1351,1353,3,
1170,585,0,1352,1350,1,0,0,0,1352,1351,1,0,0,0,1353,1355,1,0,0,0,1354,1356,
7,2,0,0,1355,1354,1,0,0,0,1355,1356,1,0,0,0,1356,41,1,0,0,0,1357,1359,5,
141,0,0,1358,1360,5,439,0,0,1359,1358,1,0,0,0,1359,1360,1,0,0,0,1360,1362,
1,0,0,0,1361,1363,5,254,0,0,1362,1361,1,0,0,0,1362,1363,1,0,0,0,1363,1366,
1,0,0,0,1364,1367,3,1178,589,0,1365,1367,3,1170,585,0,1366,1364,1,0,0,0,
1366,1365,1,0,0,0,1367,1369,1,0,0,0,1368,1370,7,3,0,0,1369,1368,1,0,0,0,
1369,1370,1,0,0,0,1370,43,1,0,0,0,1371,1373,5,361,0,0,1372,1371,1,0,0,0,
1372,1373,1,0,0,0,1373,1375,1,0,0,0,1374,1376,5,72,0,0,1375,1374,1,0,0,0,
1375,1376,1,0,0,0,1376,1377,1,0,0,0,1377,1379,5,428,0,0,1378,1380,5,254,
0,0,1379,1378,1,0,0,0,1379,1380,1,0,0,0,1380,1382,1,0,0,0,1381,1383,3,1114,
557,0,1382,1381,1,0,0,0,1383,1384,1,0,0,0,1384,1382,1,0,0,0,1384,1385,1,
0,0,0,1385,1387,1,0,0,0,1386,1388,3,46,23,0,1387,1386,1,0,0,0,1387,1388,
1,0,0,0,1388,1390,1,0,0,0,1389,1391,3,48,24,0,1390,1389,1,0,0,0,1390,1391,
1,0,0,0,1391,45,1,0,0,0,1392,1394,5,212,0,0,1393,1392,1,0,0,0,1393,1394,
1,0,0,0,1394,1395,1,0,0,0,1395,1397,5,14,0,0,1396,1398,5,254,0,0,1397,1396,
1,0,0,0,1397,1398,1,0,0,0,1398,1399,1,0,0,0,1399,1400,3,1114,557,0,1400,
47,1,0,0,0,1401,1403,5,212,0,0,1402,1401,1,0,0,0,1402,1403,1,0,0,0,1403,
1404,1,0,0,0,1404,1406,5,304,0,0,1405,1407,5,254,0,0,1406,1405,1,0,0,0,1406,
1407,1,0,0,0,1407,1408,1,0,0,0,1408,1409,3,1114,557,0,1409,49,1,0,0,0,1410,
1412,5,423,0,0,1411,1413,5,254,0,0,1412,1411,1,0,0,0,1412,1413,1,0,0,0,1413,
1414,1,0,0,0,1414,1415,3,1178,589,0,1415,51,1,0,0,0,1416,1417,5,62,0,0,1417,
1418,5,430,0,0,1418,1419,5,534,0,0,1419,53,1,0,0,0,1420,1421,5,452,0,0,1421,
1429,5,534,0,0,1422,1424,3,56,28,0,1423,1422,1,0,0,0,1424,1425,1,0,0,0,1425,
1423,1,0,0,0,1425,1426,1,0,0,0,1426,1427,1,0,0,0,1427,1428,5,534,0,0,1428,
1430,1,0,0,0,1429,1423,1,0,0,0,1429,1430,1,0,0,0,1430,55,1,0,0,0,1431,1443,
3,70,35,0,1432,1443,3,92,46,0,1433,1443,3,58,29,0,1434,1443,3,72,36,0,1435,
1443,3,80,40,0,1436,1443,3,82,41,0,1437,1443,3,96,48,0,1438,1443,3,88,44,
0,1439,1443,3,86,43,0,1440,1443,3,84,42,0,1441,1443,3,94,47,0,1442,1431,
1,0,0,0,1442,1432,1,0,0,0,1442,1433,1,0,0,0,1442,1434,1,0,0,0,1442,1435,
1,0,0,0,1442,1436,1,0,0,0,1442,1437,1,0,0,0,1442,1438,1,0,0,0,1442,1439,
1,0,0,0,1442,1440,1,0,0,0,1442,1441,1,0,0,0,1443,57,1,0,0,0,1444,1447,3,
60,30,0,1445,1447,3,68,34,0,1446,1444,1,0,0,0,1446,1445,1,0,0,0,1447,59,
1,0,0,0,1448,1449,5,10,0,0,1449,1452,3,1114,557,0,1450,1451,5,212,0,0,1451,
1453,5,14,0,0,1452,1450,1,0,0,0,1452,1453,1,0,0,0,1453,1455,1,0,0,0,1454,
1456,5,254,0,0,1455,1454,1,0,0,0,1455,1456,1,0,0,0,1456,1468,1,0,0,0,1457,
1469,5,151,0,0,1458,1469,5,26,0,0,1459,1469,5,454,0,0,1460,1469,5,455,0,
0,1461,1469,5,306,0,0,1462,1469,3,1170,585,0,1463,1465,3,62,31,0,1464,1463,
1,0,0,0,1465,1466,1,0,0,0,1466,1464,1,0,0,0,1466,1467,1,0,0,0,1467,1469,
1,0,0,0,1468,1457,1,0,0,0,1468,1458,1,0,0,0,1468,1459,1,0,0,0,1468,1460,
1,0,0,0,1468,1461,1,0,0,0,1468,1462,1,0,0,0,1468,1464,1,0,0,0,1469,61,1,
0,0,0,1470,1477,3,1172,586,0,1471,1478,3,64,32,0,1472,1474,3,66,33,0,1473,
1472,1,0,0,0,1474,1475,1,0,0,0,1475,1473,1,0,0,0,1475,1476,1,0,0,0,1476,
1478,1,0,0,0,1477,1471,1,0,0,0,1477,1473,1,0,0,0,1477,1478,1,0,0,0,1478,
63,1,0,0,0,1479,1480,7,4,0,0,1480,1481,3,1172,586,0,1481,65,1,0,0,0,1482,
1484,5,16,0,0,1483,1485,3,1172,586,0,1484,1483,1,0,0,0,1485,1486,1,0,0,0,
1486,1484,1,0,0,0,1486,1487,1,0,0,0,1487,67,1,0,0,0,1488,1489,5,10,0,0,1489,
1491,3,1114,557,0,1490,1492,5,212,0,0,1491,1490,1,0,0,0,1491,1492,1,0,0,
0,1492,1493,1,0,0,0,1493,1495,5,304,0,0,1494,1496,5,254,0,0,1495,1494,1,
0,0,0,1495,1496,1,0,0,0,1496,1500,1,0,0,0,1497,1501,5,306,0,0,1498,1499,
5,55,0,0,1499,1501,3,1172,586,0,1500,1497,1,0,0,0,1500,1498,1,0,0,0,1501,
69,1,0,0,0,1502,1503,5,61,0,0,1503,1505,3,1178,589,0,1504,1506,5,254,0,0,
1505,1504,1,0,0,0,1505,1506,1,0,0,0,1506,1507,1,0,0,0,1507,1508,3,1146,573,
0,1508,71,1,0,0,0,1509,1510,5,64,0,0,1510,1515,3,1122,561,0,1511,1513,5,
212,0,0,1512,1511,1,0,0,0,1512,1513,1,0,0,0,1513,1514,1,0,0,0,1514,1516,
7,5,0,0,1515,1512,1,0,0,0,1515,1516,1,0,0,0,1516,1518,1,0,0,0,1517,1519,
5,254,0,0,1518,1517,1,0,0,0,1518,1519,1,0,0,0,1519,1521,1,0,0,0,1520,1522,
3,74,37,0,1521,1520,1,0,0,0,1522,1523,1,0,0,0,1523,1521,1,0,0,0,1523,1524,
1,0,0,0,1524,73,1,0,0,0,1525,1528,3,76,38,0,1526,1527,7,4,0,0,1527,1529,
3,78,39,0,1528,1526,1,0,0,0,1528,1529,1,0,0,0,1529,75,1,0,0,0,1530,1533,
3,1074,537,0,1531,1533,3,1172,586,0,1532,1530,1,0,0,0,1532,1531,1,0,0,0,
1533,77,1,0,0,0,1534,1537,3,1074,537,0,1535,1537,3,1172,586,0,1536,1534,
1,0,0,0,1536,1535,1,0,0,0,1537,79,1,0,0,0,1538,1540,5,107,0,0,1539,1541,
5,438,0,0,1540,1539,1,0,0,0,1540,1541,1,0,0,0,1541,1543,1,0,0,0,1542,1544,
5,254,0,0,1543,1542,1,0,0,0,1543,1544,1,0,0,0,1544,1545,1,0,0,0,1545,1552,
3,1172,586,0,1546,1548,5,514,0,0,1547,1546,1,0,0,0,1547,1548,1,0,0,0,1548,
1549,1,0,0,0,1549,1550,5,347,0,0,1550,1551,5,466,0,0,1551,1553,3,1172,586,
0,1552,1547,1,0,0,0,1552,1553,1,0,0,0,1553,81,1,0,0,0,1554,1556,5,126,0,
0,1555,1557,5,254,0,0,1556,1555,1,0,0,0,1556,1557,1,0,0,0,1557,1558,1,0,
0,0,1558,1559,5,76,0,0,1559,83,1,0,0,0,1560,1562,5,128,0,0,1561,1563,7,6,
0,0,1562,1561,1,0,0,0,1562,1563,1,0,0,0,1563,1568,1,0,0,0,1564,1566,5,438,
0,0,1565,1567,5,254,0,0,1566,1565,1,0,0,0,1566,1567,1,0,0,0,1567,1569,1,
0,0,0,1568,1564,1,0,0,0,1568,1569,1,0,0,0,1569,1571,1,0,0,0,1570,1572,7,
7,0,0,1571,1570,1,0,0,0,1571,1572,1,0,0,0,1572,1573,1,0,0,0,1573,1575,5,
427,0,0,1574,1576,5,62,0,0,1575,1574,1,0,0,0,1575,1576,1,0,0,0,1576,85,1,
0,0,0,1577,1582,5,129,0,0,1578,1580,5,438,0,0,1579,1581,5,254,0,0,1580,1579,
1,0,0,0,1580,1581,1,0,0,0,1581,1583,1,0,0,0,1582,1578,1,0,0,0,1582,1583,
1,0,0,0,1583,1584,1,0,0,0,1584,1589,7,7,0,0,1585,1587,5,427,0,0,1586,1588,
5,62,0,0,1587,1586,1,0,0,0,1587,1588,1,0,0,0,1588,1590,1,0,0,0,1589,1585,
1,0,0,0,1589,1590,1,0,0,0,1590,87,1,0,0,0,1591,1593,3,1132,566,0,1592,1594,
5,254,0,0,1593,1592,1,0,0,0,1593,1594,1,0,0,0,1594,1595,1,0,0,0,1595,1597,
3,1146,573,0,1596,1598,3,90,45,0,1597,1596,1,0,0,0,1597,1598,1,0,0,0,1598,
1601,1,0,0,0,1599,1601,3,90,45,0,1600,1591,1,0,0,0,1600,1599,1,0,0,0,1601,
89,1,0,0,0,1602,1604,5,326,0,0,1603,1605,5,457,0,0,1604,1603,1,0,0,0,1604,
1605,1,0,0,0,1605,1607,1,0,0,0,1606,1608,5,254,0,0,1607,1606,1,0,0,0,1607,
1608,1,0,0,0,1608,1609,1,0,0,0,1609,1618,3,1046,523,0,1610,1612,5,324,0,
0,1611,1613,5,457,0,0,1612,1611,1,0,0,0,1612,1613,1,0,0,0,1613,1615,1,0,
0,0,1614,1616,5,254,0,0,1615,1614,1,0,0,0,1615,1616,1,0,0,0,1616,1617,1,
0,0,0,1617,1619,3,1046,523,0,1618,1610,1,0,0,0,1618,1619,1,0,0,0,1619,1639,
1,0,0,0,1620,1622,5,324,0,0,1621,1623,5,457,0,0,1622,1621,1,0,0,0,1622,1623,
1,0,0,0,1623,1625,1,0,0,0,1624,1626,5,254,0,0,1625,1624,1,0,0,0,1625,1626,
1,0,0,0,1626,1627,1,0,0,0,1627,1636,3,1046,523,0,1628,1630,5,326,0,0,1629,
1631,5,457,0,0,1630,1629,1,0,0,0,1630,1631,1,0,0,0,1631,1633,1,0,0,0,1632,
1634,5,254,0,0,1633,1632,1,0,0,0,1633,1634,1,0,0,0,1634,1635,1,0,0,0,1635,
1637,3,1046,523,0,1636,1628,1,0,0,0,1636,1637,1,0,0,0,1637,1639,1,0,0,0,
1638,1602,1,0,0,0,1638,1620,1,0,0,0,1639,91,1,0,0,0,1640,1642,5,322,0,0,
1641,1643,5,254,0,0,1642,1641,1,0,0,0,1642,1643,1,0,0,0,1643,1644,1,0,0,
0,1644,1645,3,1146,573,0,1645,93,1,0,0,0,1646,1648,5,400,0,0,1647,1649,5,
515,0,0,1648,1647,1,0,0,0,1648,1649,1,0,0,0,1649,1651,1,0,0,0,1650,1652,
5,283,0,0,1651,1650,1,0,0,0,1651,1652,1,0,0,0,1652,1654,1,0,0,0,1653,1655,
5,254,0,0,1654,1653,1,0,0,0,1654,1655,1,0,0,0,1655,1656,1,0,0,0,1656,1658,
5,308,0,0,1657,1659,5,54,0,0,1658,1657,1,0,0,0,1658,1659,1,0,0,0,1659,95,
1,0,0,0,1660,1662,5,467,0,0,1661,1663,5,63,0,0,1662,1661,1,0,0,0,1662,1663,
1,0,0,0,1663,1668,1,0,0,0,1664,1666,5,212,0,0,1665,1664,1,0,0,0,1665,1666,
1,0,0,0,1666,1667,1,0,0,0,1667,1669,7,5,0,0,1668,1665,1,0,0,0,1668,1669,
1,0,0,0,1669,1671,1,0,0,0,1670,1672,3,98,49,0,1671,1670,1,0,0,0,1672,1673,
1,0,0,0,1673,1671,1,0,0,0,1673,1674,1,0,0,0,1674,1677,1,0,0,0,1675,1676,
5,239,0,0,1676,1678,3,1114,557,0,1677,1675,1,0,0,0,1677,1678,1,0,0,0,1678,
97,1,0,0,0,1679,1681,3,1166,583,0,1680,1679,1,0,0,0,1681,1682,1,0,0,0,1682,
1680,1,0,0,0,1682,1683,1,0,0,0,1683,1685,1,0,0,0,1684,1686,7,8,0,0,1685,
1684,1,0,0,0,1685,1686,1,0,0,0,1686,1688,1,0,0,0,1687,1689,3,1178,589,0,
1688,1687,1,0,0,0,1689,1690,1,0,0,0,1690,1688,1,0,0,0,1690,1691,1,0,0,0,
1691,99,1,0,0,0,1692,1693,5,247,0,0,1693,1694,5,419,0,0,1694,1698,5,534,
0,0,1695,1697,3,102,51,0,1696,1695,1,0,0,0,1697,1700,1,0,0,0,1698,1696,1,
0,0,0,1698,1699,1,0,0,0,1699,101,1,0,0,0,1700,1698,1,0,0,0,1701,1704,3,104,
52,0,1702,1704,3,134,67,0,1703,1701,1,0,0,0,1703,1702,1,0,0,0,1704,103,1,
0,0,0,1705,1712,5,207,0,0,1706,1708,5,534,0,0,1707,1706,1,0,0,0,1707,1708,
1,0,0,0,1708,1709,1,0,0,0,1709,1711,3,106,53,0,1710,1707,1,0,0,0,1711,1714,
1,0,0,0,1712,1710,1,0,0,0,1712,1713,1,0,0,0,1713,1715,1,0,0,0,1714,1712,
1,0,0,0,1715,1716,5,534,0,0,1716,105,1,0,0,0,1717,1721,3,108,54,0,1718,1720,
3,110,55,0,1719,1718,1,0,0,0,1720,1723,1,0,0,0,1721,1719,1,0,0,0,1721,1722,
1,0,0,0,1722,107,1,0,0,0,1723,1721,1,0,0,0,1724,1726,5,424,0,0,1725,1727,
5,328,0,0,1726,1725,1,0,0,0,1726,1727,1,0,0,0,1727,1728,1,0,0,0,1728,1729,
3,1134,567,0,1729,109,1,0,0,0,1730,1742,3,112,56,0,1731,1742,3,114,57,0,
1732,1742,3,116,58,0,1733,1742,3,118,59,0,1734,1742,3,120,60,0,1735,1742,
3,122,61,0,1736,1742,3,124,62,0,1737,1742,3,126,63,0,1738,1742,3,130,65,
0,1739,1742,3,128,64,0,1740,1742,3,132,66,0,1741,1730,1,0,0,0,1741,1731,
1,0,0,0,1741,1732,1,0,0,0,1741,1733,1,0,0,0,1741,1734,1,0,0,0,1741,1735,
1,0,0,0,1741,1736,1,0,0,0,1741,1737,1,0,0,0,1741,1738,1,0,0,0,1741,1739,
1,0,0,0,1741,1740,1,0,0,0,1742,111,1,0,0,0,1743,1745,5,27,0,0,1744,1746,
5,489,0,0,1745,1744,1,0,0,0,1745,1746,1,0,0,0,1746,1758,1,0,0,0,1747,1759,
5,141,0,0,1748,1759,5,142,0,0,1749,1759,5,260,0,0,1750,1759,5,352,0,0,1751,
1759,5,353,0,0,1752,1759,5,370,0,0,1753,1759,5,371,0,0,1754,1759,5,474,0,
0,1755,1759,5,510,0,0,1756,1759,3,1116,558,0,1757,1759,3,1172,586,0,1758,
1747,1,0,0,0,1758,1748,1,0,0,0,1758,1749,1,0,0,0,1758,1750,1,0,0,0,1758,
1751,1,0,0,0,1758,1752,1,0,0,0,1758,1753,1,0,0,0,1758,1754,1,0,0,0,1758,
1755,1,0,0,0,1758,1756,1,0,0,0,1758,1757,1,0,0,0,1759,113,1,0,0,0,1760,1763,
5,400,0,0,1761,1764,5,310,0,0,1762,1764,3,1178,589,0,1763,1761,1,0,0,0,1763,
1762,1,0,0,0,1764,1766,1,0,0,0,1765,1767,5,18,0,0,1766,1765,1,0,0,0,1766,
1767,1,0,0,0,1767,1769,1,0,0,0,1768,1770,7,9,0,0,1769,1768,1,0,0,0,1769,
1770,1,0,0,0,1770,115,1,0,0,0,1771,1773,5,332,0,0,1772,1774,5,254,0,0,1773,
1772,1,0,0,0,1773,1774,1,0,0,0,1774,1776,1,0,0,0,1775,1771,1,0,0,0,1775,
1776,1,0,0,0,1776,1782,1,0,0,0,1777,1783,5,279,0,0,1778,1779,5,377,0,0,1779,
1783,5,42,0,0,1780,1783,5,377,0,0,1781,1783,5,42,0,0,1782,1777,1,0,0,0,1782,
1778,1,0,0,0,1782,1780,1,0,0,0,1782,1781,1,0,0,0,1782,1783,1,0,0,0,1783,
1784,1,0,0,0,1784,1785,7,10,0,0,1785,117,1,0,0,0,1786,1788,5,339,0,0,1787,
1789,5,62,0,0,1788,1787,1,0,0,0,1788,1789,1,0,0,0,1789,1791,1,0,0,0,1790,
1792,5,254,0,0,1791,1790,1,0,0,0,1791,1792,1,0,0,0,1792,1795,1,0,0,0,1793,
1796,3,1090,545,0,1794,1796,3,1172,586,0,1795,1793,1,0,0,0,1795,1794,1,0,
0,0,1796,119,1,0,0,0,1797,1798,5,377,0,0,1798,1800,5,133,0,0,1799,1801,5,
254,0,0,1800,1799,1,0,0,0,1800,1801,1,0,0,0,1801,1805,1,0,0,0,1802,1806,
5,454,0,0,1803,1806,5,237,0,0,1804,1806,3,1116,558,0,1805,1802,1,0,0,0,1805,
1803,1,0,0,0,1805,1804,1,0,0,0,1806,121,1,0,0,0,1807,1809,5,3,0,0,1808,1810,
5,297,0,0,1809,1808,1,0,0,0,1809,1810,1,0,0,0,1810,1812,1,0,0,0,1811,1813,
5,254,0,0,1812,1811,1,0,0,0,1812,1813,1,0,0,0,1813,1814,1,0,0,0,1814,1815,
7,11,0,0,1815,123,1,0,0,0,1816,1818,5,377,0,0,1817,1819,5,259,0,0,1818,1817,
1,0,0,0,1818,1819,1,0,0,0,1819,1821,1,0,0,0,1820,1822,5,254,0,0,1821,1820,
1,0,0,0,1821,1822,1,0,0,0,1822,1823,1,0,0,0,1823,1825,3,1090,545,0,1824,
1826,3,128,64,0,1825,1824,1,0,0,0,1825,1826,1,0,0,0,1826,1831,1,0,0,0,1827,
1829,5,514,0,0,1828,1827,1,0,0,0,1828,1829,1,0,0,0,1829,1830,1,0,0,0,1830,
1832,5,149,0,0,1831,1828,1,0,0,0,1831,1832,1,0,0,0,1832,125,1,0,0,0,1833,
1834,5,18,0,0,1834,1836,5,377,0,0,1835,1837,5,259,0,0,1836,1835,1,0,0,0,
1836,1837,1,0,0,0,1837,1839,1,0,0,0,1838,1840,5,254,0,0,1839,1838,1,0,0,
0,1839,1840,1,0,0,0,1840,1841,1,0,0,0,1841,1843,3,1090,545,0,1842,1844,3,
128,64,0,1843,1842,1,0,0,0,1843,1844,1,0,0,0,1844,1849,1,0,0,0,1845,1847,
5,514,0,0,1846,1845,1,0,0,0,1846,1847,1,0,0,0,1847,1848,1,0,0,0,1848,1850,
5,149,0,0,1849,1846,1,0,0,0,1849,1850,1,0,0,0,1850,127,1,0,0,0,1851,1853,
5,342,0,0,1852,1854,5,254,0,0,1853,1852,1,0,0,0,1853,1854,1,0,0,0,1854,1855,
1,0,0,0,1855,1856,3,1128,564,0,1856,129,1,0,0,0,1857,1859,5,206,0,0,1858,
1857,1,0,0,0,1858,1859,1,0,0,0,1859,1860,1,0,0,0,1860,1862,5,457,0,0,1861,
1863,5,254,0,0,1862,1861,1,0,0,0,1862,1863,1,0,0,0,1863,1864,1,0,0,0,1864,
1866,3,1090,545,0,1865,1867,3,1090,545,0,1866,1865,1,0,0,0,1866,1867,1,0,
0,0,1867,131,1,0,0,0,1868,1870,5,386,0,0,1869,1871,5,259,0,0,1870,1869,1,
0,0,0,1870,1871,1,0,0,0,1871,1873,1,0,0,0,1872,1874,5,254,0,0,1873,1872,
1,0,0,0,1873,1874,1,0,0,0,1874,1875,1,0,0,0,1875,1876,3,1090,545,0,1876,
133,1,0,0,0,1877,1878,5,233,0,0,1878,1882,5,534,0,0,1879,1880,3,1134,567,
0,1880,1881,5,534,0,0,1881,1883,1,0,0,0,1882,1879,1,0,0,0,1882,1883,1,0,
0,0,1883,1891,1,0,0,0,1884,1886,3,136,68,0,1885,1884,1,0,0,0,1886,1889,1,
0,0,0,1887,1885,1,0,0,0,1887,1888,1,0,0,0,1888,1890,1,0,0,0,1889,1887,1,
0,0,0,1890,1892,5,534,0,0,1891,1887,1,0,0,0,1891,1892,1,0,0,0,1892,135,1,
0,0,0,1893,1898,3,138,69,0,1894,1898,3,146,73,0,1895,1898,3,148,74,0,1896,
1898,3,152,76,0,1897,1893,1,0,0,0,1897,1894,1,0,0,0,1897,1895,1,0,0,0,1897,
1896,1,0,0,0,1898,137,1,0,0,0,1899,1905,5,399,0,0,1900,1903,5,326,0,0,1901,
1904,3,1116,558,0,1902,1904,3,1134,567,0,1903,1901,1,0,0,0,1903,1902,1,0,
0,0,1904,1906,1,0,0,0,1905,1900,1,0,0,0,1905,1906,1,0,0,0,1906,1907,1,0,
0,0,1907,1911,5,195,0,0,1908,1912,3,140,70,0,1909,1912,3,142,71,0,1910,1912,
3,144,72,0,1911,1908,1,0,0,0,1911,1909,1,0,0,0,1911,1910,1,0,0,0,1912,139,
1,0,0,0,1913,1914,3,1178,589,0,1914,1915,5,379,0,0,1915,141,1,0,0,0,1916,
1918,5,158,0,0,1917,1916,1,0,0,0,1917,1918,1,0,0,0,1918,1920,1,0,0,0,1919,
1921,5,323,0,0,1920,1919,1,0,0,0,1920,1921,1,0,0,0,1921,1922,1,0,0,0,1922,
1923,7,12,0,0,1923,1924,5,323,0,0,1924,1925,3,1134,567,0,1925,143,1,0,0,
0,1926,1928,3,1178,589,0,1927,1929,5,66,0,0,1928,1927,1,0,0,0,1928,1929,
1,0,0,0,1929,145,1,0,0,0,1930,1932,5,414,0,0,1931,1933,7,13,0,0,1932,1931,
1,0,0,0,1932,1933,1,0,0,0,1933,1935,1,0,0,0,1934,1936,5,22,0,0,1935,1934,
1,0,0,0,1935,1936,1,0,0,0,1936,1938,1,0,0,0,1937,1939,5,212,0,0,1938,1937,
1,0,0,0,1938,1939,1,0,0,0,1939,1941,1,0,0,0,1940,1942,3,1134,567,0,1941,
1940,1,0,0,0,1942,1943,1,0,0,0,1943,1941,1,0,0,0,1943,1944,1,0,0,0,1944,
147,1,0,0,0,1945,1946,5,301,0,0,1946,1948,5,206,0,0,1947,1949,5,474,0,0,
1948,1947,1,0,0,0,1948,1949,1,0,0,0,1949,1951,1,0,0,0,1950,1952,5,94,0,0,
1951,1950,1,0,0,0,1951,1952,1,0,0,0,1952,1954,1,0,0,0,1953,1955,3,150,75,
0,1954,1953,1,0,0,0,1955,1956,1,0,0,0,1956,1954,1,0,0,0,1956,1957,1,0,0,
0,1957,149,1,0,0,0,1958,1961,3,1134,567,0,1959,1960,5,350,0,0,1960,1962,
3,1178,589,0,1961,1959,1,0,0,0,1961,1962,1,0,0,0,1962,151,1,0,0,0,1963,1964,
5,77,0,0,1964,1966,5,97,0,0,1965,1967,5,212,0,0,1966,1965,1,0,0,0,1966,1967,
1,0,0,0,1967,1968,1,0,0,0,1968,1969,3,1134,567,0,1969,153,1,0,0,0,1970,1971,
5,109,0,0,1971,1972,5,145,0,0,1972,1976,5,534,0,0,1973,1975,3,156,78,0,1974,
1973,1,0,0,0,1975,1978,1,0,0,0,1976,1974,1,0,0,0,1976,1977,1,0,0,0,1977,
155,1,0,0,0,1978,1976,1,0,0,0,1979,1989,3,158,79,0,1980,1989,3,208,104,0,
1981,1989,3,212,106,0,1982,1989,3,214,107,0,1983,1989,3,216,108,0,1984,1989,
3,254,127,0,1985,1989,3,256,128,0,1986,1989,3,320,160,0,1987,1989,3,396,
198,0,1988,1979,1,0,0,0,1988,1980,1,0,0,0,1988,1981,1,0,0,0,1988,1982,1,
0,0,0,1988,1983,1,0,0,0,1988,1984,1,0,0,0,1988,1985,1,0,0,0,1988,1986,1,
0,0,0,1988,1987,1,0,0,0,1989,157,1,0,0,0,1990,1991,5,206,0,0,1991,1992,5,
419,0,0,1992,1996,5,534,0,0,1993,1995,3,160,80,0,1994,1993,1,0,0,0,1995,
1998,1,0,0,0,1996,1994,1,0,0,0,1996,1997,1,0,0,0,1997,159,1,0,0,0,1998,1996,
1,0,0,0,1999,2000,7,14,0,0,2000,2007,3,1134,567,0,2001,2003,5,534,0,0,2002,
2001,1,0,0,0,2002,2003,1,0,0,0,2003,2004,1,0,0,0,2004,2006,3,162,81,0,2005,
2002,1,0,0,0,2006,2009,1,0,0,0,2007,2005,1,0,0,0,2007,2008,1,0,0,0,2008,
2010,1,0,0,0,2009,2007,1,0,0,0,2010,2014,5,534,0,0,2011,2013,3,434,217,0,
2012,2011,1,0,0,0,2013,2016,1,0,0,0,2014,2012,1,0,0,0,2014,2015,1,0,0,0,
2015,161,1,0,0,0,2016,2014,1,0,0,0,2017,2029,3,164,82,0,2018,2029,3,166,
83,0,2019,2029,3,168,84,0,2020,2029,3,172,86,0,2021,2029,3,182,91,0,2022,
2029,3,184,92,0,2023,2029,3,188,94,0,2024,2029,3,190,95,0,2025,2029,3,204,
102,0,2026,2029,3,206,103,0,2027,2029,3,200,100,0,2028,2017,1,0,0,0,2028,
2018,1,0,0,0,2028,2019,1,0,0,0,2028,2020,1,0,0,0,2028,2021,1,0,0,0,2028,
2022,1,0,0,0,2028,2023,1,0,0,0,2028,2024,1,0,0,0,2028,2025,1,0,0,0,2028,
2026,1,0,0,0,2028,2027,1,0,0,0,2029,163,1,0,0,0,2030,2032,5,254,0,0,2031,
2030,1,0,0,0,2031,2032,1,0,0,0,2032,2033,1,0,0,0,2033,2034,5,203,0,0,2034,
165,1,0,0,0,2035,2037,5,254,0,0,2036,2035,1,0,0,0,2036,2037,1,0,0,0,2037,
2038,1,0,0,0,2038,2039,5,223,0,0,2039,167,1,0,0,0,2040,2042,5,46,0,0,2041,
2043,5,94,0,0,2042,2041,1,0,0,0,2042,2043,1,0,0,0,2043,2044,1,0,0,0,2044,
2046,3,1178,589,0,2045,2047,3,170,85,0,2046,2045,1,0,0,0,2046,2047,1,0,0,
0,2047,2049,1,0,0,0,2048,2050,7,15,0,0,2049,2048,1,0,0,0,2049,2050,1,0,0,
0,2050,169,1,0,0,0,2051,2052,5,489,0,0,2052,2053,3,1178,589,0,2053,171,1,
0,0,0,2054,2058,5,377,0,0,2055,2059,3,174,87,0,2056,2059,3,176,88,0,2057,
2059,3,178,89,0,2058,2055,1,0,0,0,2058,2056,1,0,0,0,2058,2057,1,0,0,0,2059,
173,1,0,0,0,2060,2062,5,94,0,0,2061,2060,1,0,0,0,2061,2062,1,0,0,0,2062,
2063,1,0,0,0,2063,2065,3,1178,589,0,2064,2066,5,63,0,0,2065,2064,1,0,0,0,
2065,2066,1,0,0,0,2066,175,1,0,0,0,2067,2069,5,254,0,0,2068,2067,1,0,0,0,
2068,2069,1,0,0,0,2069,2070,1,0,0,0,2070,2072,5,509,0,0,2071,2073,5,239,
0,0,2072,2071,1,0,0,0,2072,2073,1,0,0,0,2073,2075,1,0,0,0,2074,2076,5,439,
0,0,2075,2074,1,0,0,0,2075,2076,1,0,0,0,2076,2087,1,0,0,0,2077,2079,5,215,
0,0,2078,2077,1,0,0,0,2078,2079,1,0,0,0,2079,2080,1,0,0,0,2080,2082,3,1178,
589,0,2081,2083,3,180,90,0,2082,2081,1,0,0,0,2082,2083,1,0,0,0,2083,2085,
1,0,0,0,2084,2086,5,63,0,0,2085,2084,1,0,0,0,2085,2086,1,0,0,0,2086,2088,
1,0,0,0,2087,2078,1,0,0,0,2087,2088,1,0,0,0,2088,2094,1,0,0,0,2089,2091,
5,134,0,0,2090,2092,5,326,0,0,2091,2090,1,0,0,0,2091,2092,1,0,0,0,2092,2093,
1,0,0,0,2093,2095,3,1090,545,0,2094,2089,1,0,0,0,2094,2095,1,0,0,0,2095,
177,1,0,0,0,2096,2098,5,94,0,0,2097,2096,1,0,0,0,2097,2098,1,0,0,0,2098,
2099,1,0,0,0,2099,2100,3,1178,589,0,2100,2102,3,180,90,0,2101,2103,5,63,
0,0,2102,2101,1,0,0,0,2102,2103,1,0,0,0,2103,179,1,0,0,0,2104,2105,5,489,
0,0,2105,2106,3,1178,589,0,2106,181,1,0,0,0,2107,2116,5,261,0,0,2108,2110,
5,377,0,0,2109,2111,5,254,0,0,2110,2109,1,0,0,0,2110,2111,1,0,0,0,2111,2117,
1,0,0,0,2112,2114,5,379,0,0,2113,2115,5,21,0,0,2114,2113,1,0,0,0,2114,2115,
1,0,0,0,2115,2117,1,0,0,0,2116,2108,1,0,0,0,2116,2112,1,0,0,0,2117,2125,
1,0,0,0,2118,2126,5,325,0,0,2119,2126,5,453,0,0,2120,2122,3,1128,564,0,2121,
2120,1,0,0,0,2122,2123,1,0,0,0,2123,2121,1,0,0,0,2123,2124,1,0,0,0,2124,
2126,1,0,0,0,2125,2118,1,0,0,0,2125,2119,1,0,0,0,2125,2121,1,0,0,0,2126,
183,1,0,0,0,2127,2128,5,507,0,0,2128,2130,5,323,0,0,2129,2131,3,186,93,0,
2130,2129,1,0,0,0,2131,2132,1,0,0,0,2132,2130,1,0,0,0,2132,2133,1,0,0,0,
2133,185,1,0,0,0,2134,2136,3,1164,582,0,2135,2137,5,254,0,0,2136,2135,1,
0,0,0,2136,2137,1,0,0,0,2137,2140,1,0,0,0,2138,2141,3,1090,545,0,2139,2141,
3,1172,586,0,2140,2138,1,0,0,0,2140,2139,1,0,0,0,2141,187,1,0,0,0,2142,2151,
5,109,0,0,2143,2145,5,377,0,0,2144,2146,5,254,0,0,2145,2144,1,0,0,0,2145,
2146,1,0,0,0,2146,2152,1,0,0,0,2147,2149,5,379,0,0,2148,2150,5,21,0,0,2149,
2148,1,0,0,0,2149,2150,1,0,0,0,2150,2152,1,0,0,0,2151,2143,1,0,0,0,2151,
2147,1,0,0,0,2152,2154,1,0,0,0,2153,2155,3,1128,564,0,2154,2153,1,0,0,0,
2155,2156,1,0,0,0,2156,2154,1,0,0,0,2156,2157,1,0,0,0,2157,189,1,0,0,0,2158,
2160,5,277,0,0,2159,2161,5,254,0,0,2160,2159,1,0,0,0,2160,2161,1,0,0,0,2161,
2164,1,0,0,0,2162,2165,3,1128,564,0,2163,2165,3,1178,589,0,2164,2162,1,0,
0,0,2164,2163,1,0,0,0,2165,2167,1,0,0,0,2166,2168,5,280,0,0,2167,2166,1,
0,0,0,2167,2168,1,0,0,0,2168,2172,1,0,0,0,2169,2171,3,192,96,0,2170,2169,
1,0,0,0,2171,2174,1,0,0,0,2172,2170,1,0,0,0,2172,2173,1,0,0,0,2173,191,1,
0,0,0,2174,2172,1,0,0,0,2175,2179,3,194,97,0,2176,2179,3,196,98,0,2177,2179,
3,198,99,0,2178,2175,1,0,0,0,2178,2176,1,0,0,0,2178,2177,1,0,0,0,2179,193,
1,0,0,0,2180,2182,5,514,0,0,2181,2180,1,0,0,0,2181,2182,1,0,0,0,2182,2183,
1,0,0,0,2183,2185,5,211,0,0,2184,2186,5,30,0,0,2185,2184,1,0,0,0,2185,2186,
1,0,0,0,2186,2189,1,0,0,0,2187,2190,3,1128,564,0,2188,2190,3,1178,589,0,
2189,2187,1,0,0,0,2189,2188,1,0,0,0,2190,195,1,0,0,0,2191,2193,5,280,0,0,
2192,2191,1,0,0,0,2192,2193,1,0,0,0,2193,2195,1,0,0,0,2194,2196,5,30,0,0,
2195,2194,1,0,0,0,2195,2196,1,0,0,0,2196,2197,1,0,0,0,2197,2200,5,492,0,
0,2198,2201,3,1128,564,0,2199,2201,3,1178,589,0,2200,2198,1,0,0,0,2200,2199,
1,0,0,0,2201,197,1,0,0,0,2202,2204,5,280,0,0,2203,2202,1,0,0,0,2203,2204,
1,0,0,0,2204,2206,1,0,0,0,2205,2207,5,30,0,0,2206,2205,1,0,0,0,2206,2207,
1,0,0,0,2207,2208,1,0,0,0,2208,2211,5,48,0,0,2209,2212,3,1128,564,0,2210,
2212,3,1178,589,0,2211,2209,1,0,0,0,2211,2210,1,0,0,0,2212,199,1,0,0,0,2213,
2215,5,378,0,0,2214,2216,5,297,0,0,2215,2214,1,0,0,0,2215,2216,1,0,0,0,2216,
2218,1,0,0,0,2217,2219,5,254,0,0,2218,2217,1,0,0,0,2218,2219,1,0,0,0,2219,
2220,1,0,0,0,2220,2221,3,202,101,0,2221,201,1,0,0,0,2222,2223,3,1170,585,
0,2223,203,1,0,0,0,2224,2226,5,71,0,0,2225,2227,5,254,0,0,2226,2225,1,0,
0,0,2226,2227,1,0,0,0,2227,2228,1,0,0,0,2228,2229,3,1114,557,0,2229,205,
1,0,0,0,2230,2232,5,395,0,0,2231,2233,5,254,0,0,2232,2231,1,0,0,0,2232,2233,
1,0,0,0,2233,2239,1,0,0,0,2234,2236,5,397,0,0,2235,2237,5,21,0,0,2236,2235,
1,0,0,0,2236,2237,1,0,0,0,2237,2239,1,0,0,0,2238,2230,1,0,0,0,2238,2234,
1,0,0,0,2239,2241,1,0,0,0,2240,2242,3,1156,578,0,2241,2240,1,0,0,0,2242,
2243,1,0,0,0,2243,2241,1,0,0,0,2243,2244,1,0,0,0,2244,207,1,0,0,0,2245,2246,
5,110,0,0,2246,2247,5,419,0,0,2247,2251,5,534,0,0,2248,2250,3,210,105,0,
2249,2248,1,0,0,0,2250,2253,1,0,0,0,2251,2249,1,0,0,0,2251,2252,1,0,0,0,
2252,209,1,0,0,0,2253,2251,1,0,0,0,2254,2255,3,1178,589,0,2255,2256,3,1172,
586,0,2256,2257,5,253,0,0,2257,2258,3,1172,586,0,2258,211,1,0,0,0,2259,2260,
5,516,0,0,2260,2261,5,419,0,0,2261,2265,5,534,0,0,2262,2264,3,434,217,0,
2263,2262,1,0,0,0,2264,2267,1,0,0,0,2265,2263,1,0,0,0,2265,2266,1,0,0,0,
2266,213,1,0,0,0,2267,2265,1,0,0,0,2268,2269,5,282,0,0,2269,2270,5,419,0,
0,2270,2274,5,534,0,0,2271,2273,3,434,217,0,2272,2271,1,0,0,0,2273,2276,
1,0,0,0,2274,2272,1,0,0,0,2274,2275,1,0,0,0,2275,215,1,0,0,0,2276,2274,1,
0,0,0,2277,2278,5,79,0,0,2278,2279,5,419,0,0,2279,2284,5,534,0,0,2280,2283,
3,218,109,0,2281,2283,3,434,217,0,2282,2280,1,0,0,0,2282,2281,1,0,0,0,2283,
2286,1,0,0,0,2284,2282,1,0,0,0,2284,2285,1,0,0,0,2285,217,1,0,0,0,2286,2284,
1,0,0,0,2287,2291,3,220,110,0,2288,2291,3,222,111,0,2289,2291,3,224,112,
0,2290,2287,1,0,0,0,2290,2288,1,0,0,0,2290,2289,1,0,0,0,2291,219,1,0,0,0,
2292,2293,5,56,0,0,2293,2295,3,1120,560,0,2294,2296,5,212,0,0,2295,2294,
1,0,0,0,2295,2296,1,0,0,0,2296,2298,1,0,0,0,2297,2299,5,243,0,0,2298,2297,
1,0,0,0,2298,2299,1,0,0,0,2299,2300,1,0,0,0,2300,2315,5,246,0,0,2301,2311,
3,244,122,0,2302,2311,3,250,125,0,2303,2311,3,236,118,0,2304,2311,3,238,
119,0,2305,2311,3,246,123,0,2306,2311,3,252,126,0,2307,2311,3,230,115,0,
2308,2311,3,240,120,0,2309,2311,3,234,117,0,2310,2301,1,0,0,0,2310,2302,
1,0,0,0,2310,2303,1,0,0,0,2310,2304,1,0,0,0,2310,2305,1,0,0,0,2310,2306,
1,0,0,0,2310,2307,1,0,0,0,2310,2308,1,0,0,0,2310,2309,1,0,0,0,2311,2314,
1,0,0,0,2312,2314,3,1130,565,0,2313,2310,1,0,0,0,2313,2312,1,0,0,0,2314,
2317,1,0,0,0,2315,2313,1,0,0,0,2315,2316,1,0,0,0,2316,2318,1,0,0,0,2317,
2315,1,0,0,0,2318,2319,5,534,0,0,2319,221,1,0,0,0,2320,2321,5,56,0,0,2321,
2323,3,1120,560,0,2322,2324,5,212,0,0,2323,2322,1,0,0,0,2323,2324,1,0,0,
0,2324,2325,1,0,0,0,2325,2334,5,334,0,0,2326,2333,3,226,113,0,2327,2333,
3,252,126,0,2328,2333,3,240,120,0,2329,2333,3,228,114,0,2330,2333,3,232,
116,0,2331,2333,3,242,121,0,2332,2326,1,0,0,0,2332,2327,1,0,0,0,2332,2328,
1,0,0,0,2332,2329,1,0,0,0,2332,2330,1,0,0,0,2332,2331,1,0,0,0,2333,2336,
1,0,0,0,2334,2332,1,0,0,0,2334,2335,1,0,0,0,2335,2337,1,0,0,0,2336,2334,
1,0,0,0,2337,2338,5,534,0,0,2338,223,1,0,0,0,2339,2340,5,56,0,0,2340,2342,
3,1120,560,0,2341,2343,5,212,0,0,2342,2341,1,0,0,0,2342,2343,1,0,0,0,2343,
2344,1,0,0,0,2344,2345,5,243,0,0,2345,2357,5,232,0,0,2346,2353,3,236,118,
0,2347,2353,3,238,119,0,2348,2353,3,248,124,0,2349,2353,3,252,126,0,2350,
2353,3,230,115,0,2351,2353,3,240,120,0,2352,2346,1,0,0,0,2352,2347,1,0,0,
0,2352,2348,1,0,0,0,2352,2349,1,0,0,0,2352,2350,1,0,0,0,2352,2351,1,0,0,
0,2353,2356,1,0,0,0,2354,2356,3,1130,565,0,2355,2352,1,0,0,0,2355,2354,1,
0,0,0,2356,2359,1,0,0,0,2357,2355,1,0,0,0,2357,2358,1,0,0,0,2358,2360,1,
0,0,0,2359,2357,1,0,0,0,2360,2361,5,534,0,0,2361,225,1,0,0,0,2362,2363,5,
136,0,0,2363,2365,5,105,0,0,2364,2366,5,254,0,0,2365,2364,1,0,0,0,2365,2366,
1,0,0,0,2366,2367,1,0,0,0,2367,2368,3,1130,565,0,2368,227,1,0,0,0,2369,2370,
5,136,0,0,2370,2371,5,470,0,0,2371,2372,5,321,0,0,2372,2373,3,1178,589,0,
2373,2381,5,487,0,0,2374,2375,5,241,0,0,2375,2377,5,49,0,0,2376,2378,3,1138,
569,0,2377,2376,1,0,0,0,2378,2379,1,0,0,0,2379,2377,1,0,0,0,2379,2380,1,
0,0,0,2380,2382,1,0,0,0,2381,2374,1,0,0,0,2381,2382,1,0,0,0,2382,229,1,0,
0,0,2383,2384,5,158,0,0,2384,2386,5,259,0,0,2385,2387,5,254,0,0,2386,2385,
1,0,0,0,2386,2387,1,0,0,0,2387,2388,1,0,0,0,2388,2389,3,1130,565,0,2389,
231,1,0,0,0,2390,2391,5,188,0,0,2391,2393,5,259,0,0,2392,2394,5,254,0,0,
2393,2392,1,0,0,0,2393,2394,1,0,0,0,2394,2395,1,0,0,0,2395,2396,3,1130,565,
0,2396,233,1,0,0,0,2397,2399,5,295,0,0,2398,2397,1,0,0,0,2398,2399,1,0,0,
0,2399,2400,1,0,0,0,2400,2402,5,105,0,0,2401,2403,5,254,0,0,2402,2401,1,
0,0,0,2402,2403,1,0,0,0,2403,2404,1,0,0,0,2404,2405,3,1130,565,0,2405,235,
1,0,0,0,2406,2407,5,295,0,0,2407,2409,5,111,0,0,2408,2410,5,254,0,0,2409,
2408,1,0,0,0,2409,2410,1,0,0,0,2410,2411,1,0,0,0,2411,2412,3,1130,565,0,
2412,237,1,0,0,0,2413,2414,5,295,0,0,2414,2416,5,485,0,0,2415,2417,5,254,
0,0,2416,2415,1,0,0,0,2416,2417,1,0,0,0,2417,2418,1,0,0,0,2418,2419,3,1130,
565,0,2419,239,1,0,0,0,2420,2421,5,457,0,0,2421,2423,5,259,0,0,2422,2424,
5,254,0,0,2423,2422,1,0,0,0,2423,2424,1,0,0,0,2424,2425,1,0,0,0,2425,2426,
3,1130,565,0,2426,241,1,0,0,0,2427,2429,5,467,0,0,2428,2427,1,0,0,0,2428,
2429,1,0,0,0,2429,2430,1,0,0,0,2430,2432,5,136,0,0,2431,2433,5,254,0,0,2432,
2431,1,0,0,0,2432,2433,1,0,0,0,2433,2434,1,0,0,0,2434,2435,3,1130,565,0,
2435,243,1,0,0,0,2436,2438,5,467,0,0,2437,2436,1,0,0,0,2437,2438,1,0,0,0,
2438,2439,1,0,0,0,2439,2441,5,366,0,0,2440,2442,5,254,0,0,2441,2440,1,0,
0,0,2441,2442,1,0,0,0,2442,2443,1,0,0,0,2443,2444,3,1130,565,0,2444,245,
1,0,0,0,2445,2447,5,467,0,0,2446,2445,1,0,0,0,2446,2447,1,0,0,0,2447,2448,
1,0,0,0,2448,2450,5,448,0,0,2449,2451,5,254,0,0,2450,2449,1,0,0,0,2450,2451,
1,0,0,0,2451,2452,1,0,0,0,2452,2453,3,1130,565,0,2453,247,1,0,0,0,2454,2456,
5,467,0,0,2455,2454,1,0,0,0,2455,2456,1,0,0,0,2456,2457,1,0,0,0,2457,2459,
5,475,0,0,2458,2460,5,254,0,0,2459,2458,1,0,0,0,2459,2460,1,0,0,0,2460,2461,
1,0,0,0,2461,2462,3,1130,565,0,2462,249,1,0,0,0,2463,2465,5,467,0,0,2464,
2463,1,0,0,0,2464,2465,1,0,0,0,2465,2466,1,0,0,0,2466,2468,7,16,0,0,2467,
2469,5,254,0,0,2468,2467,1,0,0,0,2468,2469,1,0,0,0,2469,2470,1,0,0,0,2470,
2471,3,1130,565,0,2471,251,1,0,0,0,2472,2473,5,478,0,0,2473,2475,5,269,0,
0,2474,2476,5,254,0,0,2475,2474,1,0,0,0,2475,2476,1,0,0,0,2476,2477,1,0,
0,0,2477,2478,3,1130,565,0,2478,253,1,0,0,0,2479,2480,5,285,0,0,2480,2481,
5,419,0,0,2481,2486,5,534,0,0,2482,2483,5,265,0,0,2483,2484,3,1144,572,0,
2484,2485,5,534,0,0,2485,2487,1,0,0,0,2486,2482,1,0,0,0,2486,2487,1,0,0,
0,2487,2491,1,0,0,0,2488,2490,3,434,217,0,2489,2488,1,0,0,0,2490,2493,1,
0,0,0,2491,2489,1,0,0,0,2491,2492,1,0,0,0,2492,255,1,0,0,0,2493,2491,1,0,
0,0,2494,2495,5,416,0,0,2495,2496,5,419,0,0,2496,2500,5,534,0,0,2497,2499,
3,258,129,0,2498,2497,1,0,0,0,2499,2502,1,0,0,0,2500,2498,1,0,0,0,2500,2501,
1,0,0,0,2501,257,1,0,0,0,2502,2500,1,0,0,0,2503,2506,5,555,0,0,2504,2507,
5,208,0,0,2505,2507,3,1160,580,0,2506,2504,1,0,0,0,2506,2505,1,0,0,0,2506,
2507,1,0,0,0,2507,2540,1,0,0,0,2508,2539,3,260,130,0,2509,2539,3,262,131,
0,2510,2539,3,264,132,0,2511,2539,3,266,133,0,2512,2539,3,268,134,0,2513,
2539,3,270,135,0,2514,2539,3,272,136,0,2515,2539,3,274,137,0,2516,2539,3,
276,138,0,2517,2539,3,278,139,0,2518,2539,3,280,140,0,2519,2539,3,282,141,
0,2520,2539,3,284,142,0,2521,2539,3,286,143,0,2522,2539,3,288,144,0,2523,
2539,3,290,145,0,2524,2527,3,292,146,0,2525,2527,3,296,148,0,2526,2524,1,
0,0,0,2526,2525,1,0,0,0,2527,2539,1,0,0,0,2528,2539,3,298,149,0,2529,2539,
3,300,150,0,2530,2539,3,302,151,0,2531,2539,3,304,152,0,2532,2539,3,306,
153,0,2533,2539,3,308,154,0,2534,2539,3,310,155,0,2535,2539,3,312,156,0,
2536,2539,3,316,158,0,2537,2539,3,318,159,0,2538,2508,1,0,0,0,2538,2509,
1,0,0,0,2538,2510,1,0,0,0,2538,2511,1,0,0,0,2538,2512,1,0,0,0,2538,2513,
1,0,0,0,2538,2514,1,0,0,0,2538,2515,1,0,0,0,2538,2516,1,0,0,0,2538,2517,
1,0,0,0,2538,2518,1,0,0,0,2538,2519,1,0,0,0,2538,2520,1,0,0,0,2538,2521,
1,0,0,0,2538,2522,1,0,0,0,2538,2523,1,0,0,0,2538,2526,1,0,0,0,2538,2528,
1,0,0,0,2538,2529,1,0,0,0,2538,2530,1,0,0,0,2538,2531,1,0,0,0,2538,2532,
1,0,0,0,2538,2533,1,0,0,0,2538,2534,1,0,0,0,2538,2535,1,0,0,0,2538,2536,
1,0,0,0,2538,2537,1,0,0,0,2539,2542,1,0,0,0,2540,2538,1,0,0,0,2540,2541,
1,0,0,0,2541,2543,1,0,0,0,2542,2540,1,0,0,0,2543,2544,5,534,0,0,2544,259,
1,0,0,0,2545,2546,5,44,0,0,2546,2547,7,17,0,0,2547,261,1,0,0,0,2548,2549,
7,18,0,0,2549,263,1,0,0,0,2550,2551,5,45,0,0,2551,265,1,0,0,0,2552,2553,
5,187,0,0,2553,2554,7,19,0,0,2554,267,1,0,0,0,2555,2556,7,20,0,0,2556,269,
1,0,0,0,2557,2558,7,21,0,0,2558,271,1,0,0,0,2559,2560,5,401,0,0,2560,273,
1,0,0,0,2561,2562,5,498,0,0,2562,275,1,0,0,0,2563,2565,5,439,0,0,2564,2566,
5,254,0,0,2565,2564,1,0,0,0,2565,2566,1,0,0,0,2566,2569,1,0,0,0,2567,2570,
3,1074,537,0,2568,2570,3,1178,589,0,2569,2567,1,0,0,0,2569,2568,1,0,0,0,
2570,277,1,0,0,0,2571,2579,5,279,0,0,2572,2574,5,315,0,0,2573,2572,1,0,0,
0,2573,2574,1,0,0,0,2574,2576,1,0,0,0,2575,2577,5,254,0,0,2576,2575,1,0,
0,0,2576,2577,1,0,0,0,2577,2578,1,0,0,0,2578,2580,7,22,0,0,2579,2573,1,0,
0,0,2579,2580,1,0,0,0,2580,2583,1,0,0,0,2581,2584,3,1074,537,0,2582,2584,
3,1178,589,0,2583,2581,1,0,0,0,2583,2582,1,0,0,0,2584,279,1,0,0,0,2585,2593,
7,23,0,0,2586,2588,5,315,0,0,2587,2586,1,0,0,0,2587,2588,1,0,0,0,2588,2590,
1,0,0,0,2589,2591,5,254,0,0,2590,2589,1,0,0,0,2590,2591,1,0,0,0,2591,2592,
1,0,0,0,2592,2594,7,22,0,0,2593,2587,1,0,0,0,2593,2594,1,0,0,0,2594,2597,
1,0,0,0,2595,2598,3,1074,537,0,2596,2598,3,1178,589,0,2597,2595,1,0,0,0,
2597,2596,1,0,0,0,2598,281,1,0,0,0,2599,2601,7,24,0,0,2600,2602,5,254,0,
0,2601,2600,1,0,0,0,2601,2602,1,0,0,0,2602,2605,1,0,0,0,2603,2606,3,1074,
537,0,2604,2606,3,1178,589,0,2605,2603,1,0,0,0,2605,2604,1,0,0,0,2606,283,
1,0,0,0,2607,2609,7,25,0,0,2608,2610,5,254,0,0,2609,2608,1,0,0,0,2609,2610,
1,0,0,0,2610,2613,1,0,0,0,2611,2614,3,1074,537,0,2612,2614,3,1178,589,0,
2613,2611,1,0,0,0,2613,2612,1,0,0,0,2614,285,1,0,0,0,2615,2617,5,97,0,0,
2616,2618,5,254,0,0,2617,2616,1,0,0,0,2617,2618,1,0,0,0,2618,2619,1,0,0,
0,2619,2620,3,1074,537,0,2620,287,1,0,0,0,2621,2623,5,507,0,0,2622,2624,
5,254,0,0,2623,2622,1,0,0,0,2623,2624,1,0,0,0,2624,2625,1,0,0,0,2625,2626,
3,1172,586,0,2626,289,1,0,0,0,2627,2629,7,26,0,0,2628,2630,5,254,0,0,2629,
2628,1,0,0,0,2629,2630,1,0,0,0,2630,2631,1,0,0,0,2631,2632,3,466,233,0,2632,
291,1,0,0,0,2633,2636,5,215,0,0,2634,2637,3,1074,537,0,2635,2637,3,1172,
586,0,2636,2634,1,0,0,0,2636,2635,1,0,0,0,2637,2639,1,0,0,0,2638,2640,3,
294,147,0,2639,2638,1,0,0,0,2639,2640,1,0,0,0,2640,293,1,0,0,0,2641,2642,
5,489,0,0,2642,2643,3,1074,537,0,2643,295,1,0,0,0,2644,2645,5,506,0,0,2645,
2646,3,1074,537,0,2646,297,1,0,0,0,2647,2649,5,504,0,0,2648,2650,5,254,0,
0,2649,2648,1,0,0,0,2649,2650,1,0,0,0,2650,2651,1,0,0,0,2651,2652,7,27,0,
0,2652,299,1,0,0,0,2653,2655,5,44,0,0,2654,2656,5,512,0,0,2655,2654,1,0,
0,0,2655,2656,1,0,0,0,2656,2657,1,0,0,0,2657,2658,5,521,0,0,2658,301,1,0,
0,0,2659,2661,7,28,0,0,2660,2662,5,411,0,0,2661,2660,1,0,0,0,2661,2662,1,
0,0,0,2662,303,1,0,0,0,2663,2665,5,438,0,0,2664,2666,5,254,0,0,2665,2664,
1,0,0,0,2665,2666,1,0,0,0,2666,2668,1,0,0,0,2667,2663,1,0,0,0,2667,2668,
1,0,0,0,2668,2669,1,0,0,0,2669,2674,7,7,0,0,2670,2672,5,427,0,0,2671,2673,
5,62,0,0,2672,2671,1,0,0,0,2672,2673,1,0,0,0,2673,2675,1,0,0,0,2674,2670,
1,0,0,0,2674,2675,1,0,0,0,2675,305,1,0,0,0,2676,2677,7,29,0,0,2677,307,1,
0,0,0,2678,2679,7,30,0,0,2679,309,1,0,0,0,2680,2681,7,31,0,0,2681,311,1,
0,0,0,2682,2684,5,364,0,0,2683,2685,5,62,0,0,2684,2683,1,0,0,0,2684,2685,
1,0,0,0,2685,2687,1,0,0,0,2686,2688,5,254,0,0,2687,2686,1,0,0,0,2687,2688,
1,0,0,0,2688,2691,1,0,0,0,2689,2692,3,1074,537,0,2690,2692,3,1172,586,0,
2691,2689,1,0,0,0,2691,2690,1,0,0,0,2692,2694,1,0,0,0,2693,2695,3,314,157,
0,2694,2693,1,0,0,0,2694,2695,1,0,0,0,2695,313,1,0,0,0,2696,2697,5,321,0,
0,2697,2699,3,1178,589,0,2698,2700,5,487,0,0,2699,2698,1,0,0,0,2699,2700,
1,0,0,0,2700,315,1,0,0,0,2701,2702,7,32,0,0,2702,317,1,0,0,0,2703,2704,5,
522,0,0,2704,319,1,0,0,0,2705,2706,5,395,0,0,2706,2707,5,419,0,0,2707,2711,
5,534,0,0,2708,2710,3,322,161,0,2709,2708,1,0,0,0,2710,2713,1,0,0,0,2711,
2709,1,0,0,0,2711,2712,1,0,0,0,2712,321,1,0,0,0,2713,2711,1,0,0,0,2714,2716,
3,324,162,0,2715,2717,3,338,169,0,2716,2715,1,0,0,0,2717,2718,1,0,0,0,2718,
2716,1,0,0,0,2718,2719,1,0,0,0,2719,323,1,0,0,0,2720,2721,5,372,0,0,2721,
2723,3,1156,578,0,2722,2724,3,326,163,0,2723,2722,1,0,0,0,2723,2724,1,0,
0,0,2724,2738,1,0,0,0,2725,2727,3,328,164,0,2726,2728,3,330,165,0,2727,2726,
1,0,0,0,2727,2728,1,0,0,0,2728,2730,1,0,0,0,2729,2731,3,332,166,0,2730,2729,
1,0,0,0,2730,2731,1,0,0,0,2731,2733,1,0,0,0,2732,2734,3,334,167,0,2733,2732,
1,0,0,0,2733,2734,1,0,0,0,2734,2736,1,0,0,0,2735,2737,3,336,168,0,2736,2735,
1,0,0,0,2736,2737,1,0,0,0,2737,2739,1,0,0,0,2738,2725,1,0,0,0,2738,2739,
1,0,0,0,2739,2740,1,0,0,0,2740,2741,5,534,0,0,2741,325,1,0,0,0,2742,2744,
5,254,0,0,2743,2742,1,0,0,0,2743,2744,1,0,0,0,2744,2745,1,0,0,0,2745,2746,
5,223,0,0,2746,327,1,0,0,0,2747,2756,5,340,0,0,2748,2750,5,275,0,0,2749,
2751,5,254,0,0,2750,2749,1,0,0,0,2750,2751,1,0,0,0,2751,2757,1,0,0,0,2752,
2754,5,276,0,0,2753,2755,5,21,0,0,2754,2753,1,0,0,0,2754,2755,1,0,0,0,2755,
2757,1,0,0,0,2756,2748,1,0,0,0,2756,2752,1,0,0,0,2756,2757,1,0,0,0,2757,
2758,1,0,0,0,2758,2760,3,1178,589,0,2759,2761,7,33,0,0,2760,2759,1,0,0,0,
2760,2761,1,0,0,0,2761,329,1,0,0,0,2762,2763,5,228,0,0,2763,2764,3,1178,
589,0,2764,331,1,0,0,0,2765,2766,5,210,0,0,2766,2767,5,137,0,0,2767,2768,
3,1178,589,0,2768,333,1,0,0,0,2769,2770,5,263,0,0,2770,2771,5,137,0,0,2771,
2772,3,1178,589,0,2772,335,1,0,0,0,2773,2774,5,211,0,0,2774,2775,3,1178,
589,0,2775,337,1,0,0,0,2776,2780,3,340,170,0,2777,2780,3,342,171,0,2778,
2780,3,344,172,0,2779,2776,1,0,0,0,2779,2777,1,0,0,0,2779,2778,1,0,0,0,2780,
339,1,0,0,0,2781,2782,3,1178,589,0,2782,2784,3,1128,564,0,2783,2785,3,354,
177,0,2784,2783,1,0,0,0,2784,2785,1,0,0,0,2785,2787,1,0,0,0,2786,2788,3,
360,180,0,2787,2786,1,0,0,0,2787,2788,1,0,0,0,2788,2789,1,0,0,0,2789,2791,
3,376,188,0,2790,2792,3,388,194,0,2791,2790,1,0,0,0,2791,2792,1,0,0,0,2792,
2793,1,0,0,0,2793,2794,5,534,0,0,2794,341,1,0,0,0,2795,2797,3,1178,589,0,
2796,2798,3,1128,564,0,2797,2796,1,0,0,0,2797,2798,1,0,0,0,2798,2800,1,0,
0,0,2799,2801,3,354,177,0,2800,2799,1,0,0,0,2800,2801,1,0,0,0,2801,2802,
1,0,0,0,2802,2803,3,388,194,0,2803,2804,5,534,0,0,2804,343,1,0,0,0,2805,
2807,3,1178,589,0,2806,2808,3,1128,564,0,2807,2806,1,0,0,0,2807,2808,1,0,
0,0,2808,2825,1,0,0,0,2809,2824,3,366,183,0,2810,2824,3,388,194,0,2811,2824,
3,370,185,0,2812,2824,3,352,176,0,2813,2824,3,346,173,0,2814,2824,3,354,
177,0,2815,2824,3,348,174,0,2816,2821,3,372,186,0,2817,2821,3,394,197,0,
2818,2821,3,374,187,0,2819,2821,3,368,184,0,2820,2816,1,0,0,0,2820,2817,
1,0,0,0,2820,2818,1,0,0,0,2820,2819,1,0,0,0,2821,2824,1,0,0,0,2822,2824,
3,350,175,0,2823,2809,1,0,0,0,2823,2810,1,0,0,0,2823,2811,1,0,0,0,2823,2812,
1,0,0,0,2823,2813,1,0,0,0,2823,2814,1,0,0,0,2823,2815,1,0,0,0,2823,2820,
1,0,0,0,2823,2822,1,0,0,0,2824,2827,1,0,0,0,2825,2823,1,0,0,0,2825,2826,
1,0,0,0,2826,2828,1,0,0,0,2827,2825,1,0,0,0,2828,2829,5,534,0,0,2829,345,
1,0,0,0,2830,2832,5,44,0,0,2831,2833,5,512,0,0,2832,2831,1,0,0,0,2832,2833,
1,0,0,0,2833,2834,1,0,0,0,2834,2835,5,521,0,0,2835,347,1,0,0,0,2836,2838,
5,74,0,0,2837,2839,5,315,0,0,2838,2837,1,0,0,0,2838,2839,1,0,0,0,2839,2841,
1,0,0,0,2840,2842,5,254,0,0,2841,2840,1,0,0,0,2841,2842,1,0,0,0,2842,2843,
1,0,0,0,2843,2844,3,1178,589,0,2844,349,1,0,0,0,2845,2847,5,227,0,0,2846,
2848,5,242,0,0,2847,2846,1,0,0,0,2847,2848,1,0,0,0,2848,351,1,0,0,0,2849,
2851,7,28,0,0,2850,2852,5,411,0,0,2851,2850,1,0,0,0,2851,2852,1,0,0,0,2852,
353,1,0,0,0,2853,2855,5,279,0,0,2854,2853,1,0,0,0,2854,2855,1,0,0,0,2855,
2857,1,0,0,0,2856,2858,5,315,0,0,2857,2856,1,0,0,0,2857,2858,1,0,0,0,2858,
2860,1,0,0,0,2859,2861,5,254,0,0,2860,2859,1,0,0,0,2860,2861,1,0,0,0,2861,
2864,1,0,0,0,2862,2865,3,356,178,0,2863,2865,3,358,179,0,2864,2862,1,0,0,
0,2864,2863,1,0,0,0,2865,355,1,0,0,0,2866,2872,3,1178,589,0,2867,2869,5,
326,0,0,2868,2867,1,0,0,0,2868,2869,1,0,0,0,2869,2870,1,0,0,0,2870,2871,
5,309,0,0,2871,2873,5,340,0,0,2872,2868,1,0,0,0,2872,2873,1,0,0,0,2873,357,
1,0,0,0,2874,2875,5,348,0,0,2875,2876,3,1178,589,0,2876,359,1,0,0,0,2877,
2878,5,309,0,0,2878,2880,5,227,0,0,2879,2881,5,254,0,0,2880,2879,1,0,0,0,
2880,2881,1,0,0,0,2881,2885,1,0,0,0,2882,2886,3,1178,589,0,2883,2886,3,364,
182,0,2884,2886,3,362,181,0,2885,2882,1,0,0,0,2885,2883,1,0,0,0,2885,2884,
1,0,0,0,2886,361,1,0,0,0,2887,2888,5,348,0,0,2888,2889,3,1178,589,0,2889,
363,1,0,0,0,2890,2891,5,309,0,0,2891,2892,5,340,0,0,2892,365,1,0,0,0,2893,
2895,7,26,0,0,2894,2896,5,254,0,0,2895,2894,1,0,0,0,2895,2896,1,0,0,0,2896,
2897,1,0,0,0,2897,2898,3,466,233,0,2898,367,1,0,0,0,2899,2901,5,402,0,0,
2900,2902,5,326,0,0,2901,2900,1,0,0,0,2901,2902,1,0,0,0,2902,2905,1,0,0,
0,2903,2906,5,209,0,0,2904,2906,3,1128,564,0,2905,2903,1,0,0,0,2905,2904,
1,0,0,0,2906,369,1,0,0,0,2907,2909,5,438,0,0,2908,2910,5,254,0,0,2909,2908,
1,0,0,0,2909,2910,1,0,0,0,2910,2911,1,0,0,0,2911,2912,7,7,0,0,2912,2914,
5,427,0,0,2913,2915,5,62,0,0,2914,2913,1,0,0,0,2914,2915,1,0,0,0,2915,371,
1,0,0,0,2916,2918,5,448,0,0,2917,2919,5,254,0,0,2918,2917,1,0,0,0,2918,2919,
1,0,0,0,2919,2920,1,0,0,0,2920,2921,3,1074,537,0,2921,373,1,0,0,0,2922,2923,
5,464,0,0,2923,2930,3,1074,537,0,2924,2926,5,529,0,0,2925,2924,1,0,0,0,2925,
2926,1,0,0,0,2926,2927,1,0,0,0,2927,2929,3,1074,537,0,2928,2925,1,0,0,0,
2929,2932,1,0,0,0,2930,2928,1,0,0,0,2930,2931,1,0,0,0,2931,2944,1,0,0,0,
2932,2930,1,0,0,0,2933,2934,5,503,0,0,2934,2941,3,1128,564,0,2935,2937,5,
529,0,0,2936,2935,1,0,0,0,2936,2937,1,0,0,0,2937,2938,1,0,0,0,2938,2940,
3,1128,564,0,2939,2936,1,0,0,0,2940,2943,1,0,0,0,2941,2939,1,0,0,0,2941,
2942,1,0,0,0,2942,2945,1,0,0,0,2943,2941,1,0,0,0,2944,2933,1,0,0,0,2944,
2945,1,0,0,0,2945,375,1,0,0,0,2946,2948,5,496,0,0,2947,2949,5,254,0,0,2948,
2947,1,0,0,0,2948,2949,1,0,0,0,2949,2957,1,0,0,0,2950,2958,3,378,189,0,2951,
2958,3,380,190,0,2952,2958,3,382,191,0,2953,2958,3,384,192,0,2954,2958,3,
386,193,0,2955,2958,3,390,195,0,2956,2958,3,392,196,0,2957,2950,1,0,0,0,
2957,2951,1,0,0,0,2957,2952,1,0,0,0,2957,2953,1,0,0,0,2957,2954,1,0,0,0,
2957,2955,1,0,0,0,2957,2956,1,0,0,0,2958,377,1,0,0,0,2959,2960,5,395,0,0,
2960,2963,5,228,0,0,2961,2963,5,410,0,0,2962,2959,1,0,0,0,2962,2961,1,0,
0,0,2963,379,1,0,0,0,2964,2965,5,340,0,0,2965,2968,5,228,0,0,2966,2968,5,
345,0,0,2967,2964,1,0,0,0,2967,2966,1,0,0,0,2968,381,1,0,0,0,2969,2970,5,
97,0,0,2970,2973,5,228,0,0,2971,2973,5,58,0,0,2972,2969,1,0,0,0,2972,2971,
1,0,0,0,2973,2976,1,0,0,0,2974,2977,5,209,0,0,2975,2977,3,1128,564,0,2976,
2974,1,0,0,0,2976,2975,1,0,0,0,2977,383,1,0,0,0,2978,2979,7,34,0,0,2979,
385,1,0,0,0,2980,2981,5,97,0,0,2981,2984,5,211,0,0,2982,2984,5,57,0,0,2983,
2980,1,0,0,0,2983,2982,1,0,0,0,2984,2987,1,0,0,0,2985,2988,5,209,0,0,2986,
2988,3,1128,564,0,2987,2985,1,0,0,0,2987,2986,1,0,0,0,2988,387,1,0,0,0,2989,
2991,5,504,0,0,2990,2992,5,254,0,0,2991,2990,1,0,0,0,2991,2992,1,0,0,0,2992,
2994,1,0,0,0,2993,2989,1,0,0,0,2993,2994,1,0,0,0,2994,2995,1,0,0,0,2995,
2996,7,27,0,0,2996,389,1,0,0,0,2997,2998,5,340,0,0,2998,3001,5,211,0,0,2999,
3001,5,344,0,0,3000,2997,1,0,0,0,3000,2999,1,0,0,0,3001,391,1,0,0,0,3002,
3003,5,395,0,0,3003,3006,5,211,0,0,3004,3006,5,409,0,0,3005,3002,1,0,0,0,
3005,3004,1,0,0,0,3006,393,1,0,0,0,3007,3009,5,507,0,0,3008,3010,5,254,0,
0,3009,3008,1,0,0,0,3009,3010,1,0,0,0,3010,3011,1,0,0,0,3011,3012,3,1172,
586,0,3012,395,1,0,0,0,3013,3014,5,363,0,0,3014,3015,5,419,0,0,3015,3019,
5,534,0,0,3016,3018,3,398,199,0,3017,3016,1,0,0,0,3018,3021,1,0,0,0,3019,
3017,1,0,0,0,3019,3020,1,0,0,0,3020,397,1,0,0,0,3021,3019,1,0,0,0,3022,3025,
3,400,200,0,3023,3025,3,402,201,0,3024,3022,1,0,0,0,3024,3023,1,0,0,0,3025,
399,1,0,0,0,3026,3027,5,265,0,0,3027,3028,3,1142,571,0,3028,3030,5,200,0,
0,3029,3031,3,404,202,0,3030,3029,1,0,0,0,3030,3031,1,0,0,0,3031,3033,1,
0,0,0,3032,3034,3,414,207,0,3033,3032,1,0,0,0,3033,3034,1,0,0,0,3034,401,
1,0,0,0,3035,3036,5,264,0,0,3036,3037,3,1142,571,0,3037,3039,5,238,0,0,3038,
3040,3,432,216,0,3039,3038,1,0,0,0,3039,3040,1,0,0,0,3040,3042,1,0,0,0,3041,
3043,3,430,215,0,3042,3041,1,0,0,0,3042,3043,1,0,0,0,3043,3048,1,0,0,0,3044,
3047,3,406,203,0,3045,3047,3,416,208,0,3046,3044,1,0,0,0,3046,3045,1,0,0,
0,3047,3050,1,0,0,0,3048,3046,1,0,0,0,3048,3049,1,0,0,0,3049,403,1,0,0,0,
3050,3048,1,0,0,0,3051,3057,5,31,0,0,3052,3054,5,434,0,0,3053,3055,5,254,
0,0,3054,3053,1,0,0,0,3054,3055,1,0,0,0,3055,3056,1,0,0,0,3056,3058,7,35,
0,0,3057,3052,1,0,0,0,3057,3058,1,0,0,0,3058,405,1,0,0,0,3059,3061,5,31,
0,0,3060,3062,3,408,204,0,3061,3060,1,0,0,0,3061,3062,1,0,0,0,3062,3068,
1,0,0,0,3063,3065,5,272,0,0,3064,3066,5,254,0,0,3065,3064,1,0,0,0,3065,3066,
1,0,0,0,3066,3067,1,0,0,0,3067,3069,7,36,0,0,3068,3063,1,0,0,0,3068,3069,
1,0,0,0,3069,3071,1,0,0,0,3070,3072,3,410,205,0,3071,3070,1,0,0,0,3071,3072,
1,0,0,0,3072,3074,1,0,0,0,3073,3075,3,412,206,0,3074,3073,1,0,0,0,3074,3075,
1,0,0,0,3075,407,1,0,0,0,3076,3077,5,218,0,0,3077,3078,5,254,0,0,3078,3079,
3,1172,586,0,3079,409,1,0,0,0,3080,3082,5,273,0,0,3081,3083,5,254,0,0,3082,
3081,1,0,0,0,3082,3083,1,0,0,0,3083,3084,1,0,0,0,3084,3085,3,1172,586,0,
3085,411,1,0,0,0,3086,3088,5,488,0,0,3087,3089,5,254,0,0,3088,3087,1,0,0,
0,3088,3089,1,0,0,0,3089,3090,1,0,0,0,3090,3091,3,1172,586,0,3091,413,1,
0,0,0,3092,3093,5,183,0,0,3093,3095,3,1152,576,0,3094,3096,3,418,209,0,3095,
3094,1,0,0,0,3095,3096,1,0,0,0,3096,415,1,0,0,0,3097,3098,5,183,0,0,3098,
3100,3,1152,576,0,3099,3101,3,418,209,0,3100,3099,1,0,0,0,3100,3101,1,0,
0,0,3101,3103,1,0,0,0,3102,3104,3,426,213,0,3103,3102,1,0,0,0,3103,3104,
1,0,0,0,3104,3106,1,0,0,0,3105,3107,3,422,211,0,3106,3105,1,0,0,0,3106,3107,
1,0,0,0,3107,3109,1,0,0,0,3108,3110,3,420,210,0,3109,3108,1,0,0,0,3109,3110,
1,0,0,0,3110,417,1,0,0,0,3111,3112,5,212,0,0,3112,3113,3,1172,586,0,3113,
419,1,0,0,0,3114,3115,5,222,0,0,3115,3116,3,1128,564,0,3116,421,1,0,0,0,
3117,3119,5,506,0,0,3118,3120,3,424,212,0,3119,3118,1,0,0,0,3120,3121,1,
0,0,0,3121,3119,1,0,0,0,3121,3122,1,0,0,0,3122,423,1,0,0,0,3123,3126,3,1128,
564,0,3124,3126,3,1134,567,0,3125,3123,1,0,0,0,3125,3124,1,0,0,0,3126,425,
1,0,0,0,3127,3129,5,514,0,0,3128,3130,3,428,214,0,3129,3128,1,0,0,0,3130,
3131,1,0,0,0,3131,3129,1,0,0,0,3131,3132,1,0,0,0,3132,427,1,0,0,0,3133,3136,
3,1144,572,0,3134,3136,3,1134,567,0,3135,3133,1,0,0,0,3135,3134,1,0,0,0,
3136,429,1,0,0,0,3137,3139,5,254,0,0,3138,3137,1,0,0,0,3138,3139,1,0,0,0,
3139,3140,1,0,0,0,3140,3141,5,78,0,0,3141,431,1,0,0,0,3142,3144,5,254,0,
0,3143,3142,1,0,0,0,3143,3144,1,0,0,0,3144,3145,1,0,0,0,3145,3146,5,223,
0,0,3146,433,1,0,0,0,3147,3152,3,436,218,0,3148,3152,3,438,219,0,3149,3152,
3,440,220,0,3150,3152,3,442,221,0,3151,3147,1,0,0,0,3151,3148,1,0,0,0,3151,
3149,1,0,0,0,3151,3150,1,0,0,0,3152,435,1,0,0,0,3153,3156,7,37,0,0,3154,
3157,5,208,0,0,3155,3157,3,1128,564,0,3156,3154,1,0,0,0,3156,3155,1,0,0,
0,3156,3157,1,0,0,0,3157,3181,1,0,0,0,3158,3180,3,476,238,0,3159,3180,3,
454,227,0,3160,3180,3,450,225,0,3161,3180,3,452,226,0,3162,3180,3,488,244,
0,3163,3180,3,484,242,0,3164,3180,3,464,232,0,3165,3180,3,448,224,0,3166,
3180,3,486,243,0,3167,3180,3,492,246,0,3168,3180,3,490,245,0,3169,3180,3,
494,247,0,3170,3180,3,472,236,0,3171,3180,3,458,229,0,3172,3180,3,480,240,
0,3173,3180,3,482,241,0,3174,3180,3,456,228,0,3175,3180,3,446,223,0,3176,
3180,3,502,251,0,3177,3180,3,444,222,0,3178,3180,3,474,237,0,3179,3158,1,
0,0,0,3179,3159,1,0,0,0,3179,3160,1,0,0,0,3179,3161,1,0,0,0,3179,3162,1,
0,0,0,3179,3163,1,0,0,0,3179,3164,1,0,0,0,3179,3165,1,0,0,0,3179,3166,1,
0,0,0,3179,3167,1,0,0,0,3179,3168,1,0,0,0,3179,3169,1,0,0,0,3179,3170,1,
0,0,0,3179,3171,1,0,0,0,3179,3172,1,0,0,0,3179,3173,1,0,0,0,3179,3174,1,
0,0,0,3179,3175,1,0,0,0,3179,3176,1,0,0,0,3179,3177,1,0,0,0,3179,3178,1,
0,0,0,3180,3183,1,0,0,0,3181,3179,1,0,0,0,3181,3182,1,0,0,0,3182,3184,1,
0,0,0,3183,3181,1,0,0,0,3184,3185,5,534,0,0,3185,437,1,0,0,0,3186,3187,5,
552,0,0,3187,3188,3,1128,564,0,3188,3189,3,478,239,0,3189,3190,5,534,0,0,
3190,439,1,0,0,0,3191,3192,5,554,0,0,3192,3193,3,1126,563,0,3193,3194,3,
494,247,0,3194,3195,5,534,0,0,3195,441,1,0,0,0,3196,3198,5,561,0,0,3197,
3196,1,0,0,0,3198,3199,1,0,0,0,3199,3197,1,0,0,0,3199,3200,1,0,0,0,3200,
3202,1,0,0,0,3201,3203,5,534,0,0,3202,3201,1,0,0,0,3202,3203,1,0,0,0,3203,
443,1,0,0,0,3204,3205,5,8,0,0,3205,445,1,0,0,0,3206,3208,5,44,0,0,3207,3209,
5,512,0,0,3208,3207,1,0,0,0,3208,3209,1,0,0,0,3209,3210,1,0,0,0,3210,3211,
7,38,0,0,3211,447,1,0,0,0,3212,3213,7,39,0,0,3213,449,1,0,0,0,3214,3216,
5,254,0,0,3215,3214,1,0,0,0,3215,3216,1,0,0,0,3216,3217,1,0,0,0,3217,3220,
5,203,0,0,3218,3219,5,49,0,0,3219,3221,3,1172,586,0,3220,3218,1,0,0,0,3220,
3221,1,0,0,0,3221,451,1,0,0,0,3222,3224,5,254,0,0,3223,3222,1,0,0,0,3223,
3224,1,0,0,0,3224,3225,1,0,0,0,3225,3226,5,223,0,0,3226,453,1,0,0,0,3227,
3228,7,40,0,0,3228,455,1,0,0,0,3229,3231,7,28,0,0,3230,3232,5,411,0,0,3231,
3230,1,0,0,0,3231,3232,1,0,0,0,3232,457,1,0,0,0,3233,3234,5,321,0,0,3234,
3236,3,1178,589,0,3235,3237,3,460,230,0,3236,3235,1,0,0,0,3236,3237,1,0,
0,0,3237,3239,1,0,0,0,3238,3240,5,487,0,0,3239,3238,1,0,0,0,3239,3240,1,
0,0,0,3240,3246,1,0,0,0,3241,3243,5,134,0,0,3242,3244,5,326,0,0,3243,3242,
1,0,0,0,3243,3244,1,0,0,0,3244,3245,1,0,0,0,3245,3247,3,1090,545,0,3246,
3241,1,0,0,0,3246,3247,1,0,0,0,3247,3251,1,0,0,0,3248,3250,3,462,231,0,3249,
3248,1,0,0,0,3250,3253,1,0,0,0,3251,3249,1,0,0,0,3251,3252,1,0,0,0,3252,
3266,1,0,0,0,3253,3251,1,0,0,0,3254,3256,5,241,0,0,3255,3257,5,49,0,0,3256,
3255,1,0,0,0,3256,3257,1,0,0,0,3257,3259,1,0,0,0,3258,3260,5,284,0,0,3259,
3258,1,0,0,0,3259,3260,1,0,0,0,3260,3262,1,0,0,0,3261,3263,3,1138,569,0,
3262,3261,1,0,0,0,3263,3264,1,0,0,0,3264,3262,1,0,0,0,3264,3265,1,0,0,0,
3265,3267,1,0,0,0,3266,3254,1,0,0,0,3266,3267,1,0,0,0,3267,459,1,0,0,0,3268,
3269,5,489,0,0,3269,3270,3,1178,589,0,3270,461,1,0,0,0,3271,3273,7,41,0,
0,3272,3274,5,259,0,0,3273,3272,1,0,0,0,3273,3274,1,0,0,0,3274,3276,1,0,
0,0,3275,3277,5,254,0,0,3276,3275,1,0,0,0,3276,3277,1,0,0,0,3277,3279,1,
0,0,0,3278,3280,3,1090,545,0,3279,3278,1,0,0,0,3280,3281,1,0,0,0,3281,3279,
1,0,0,0,3281,3282,1,0,0,0,3282,463,1,0,0,0,3283,3285,7,26,0,0,3284,3286,
5,254,0,0,3285,3284,1,0,0,0,3285,3286,1,0,0,0,3286,3287,1,0,0,0,3287,3288,
3,466,233,0,3288,465,1,0,0,0,3289,3291,3,468,234,0,3290,3289,1,0,0,0,3291,
3292,1,0,0,0,3292,3290,1,0,0,0,3292,3293,1,0,0,0,3293,3295,1,0,0,0,3294,
3296,3,470,235,0,3295,3294,1,0,0,0,3295,3296,1,0,0,0,3296,3298,1,0,0,0,3297,
3290,1,0,0,0,3298,3299,1,0,0,0,3299,3297,1,0,0,0,3299,3300,1,0,0,0,3300,
467,1,0,0,0,3301,3318,5,532,0,0,3302,3318,5,557,0,0,3303,3318,5,556,0,0,
3304,3318,5,550,0,0,3305,3318,5,529,0,0,3306,3318,5,535,0,0,3307,3318,5,
528,0,0,3308,3318,5,526,0,0,3309,3318,5,527,0,0,3310,3318,5,542,0,0,3311,
3318,5,549,0,0,3312,3318,5,547,0,0,3313,3318,5,543,0,0,3314,3318,5,540,0,
0,3315,3318,5,544,0,0,3316,3318,3,1178,589,0,3317,3301,1,0,0,0,3317,3302,
1,0,0,0,3317,3303,1,0,0,0,3317,3304,1,0,0,0,3317,3305,1,0,0,0,3317,3306,
1,0,0,0,3317,3307,1,0,0,0,3317,3308,1,0,0,0,3317,3309,1,0,0,0,3317,3310,
1,0,0,0,3317,3311,1,0,0,0,3317,3312,1,0,0,0,3317,3313,1,0,0,0,3317,3314,
1,0,0,0,3317,3315,1,0,0,0,3317,3316,1,0,0,0,3318,469,1,0,0,0,3319,3320,5,
542,0,0,3320,3321,3,1178,589,0,3321,3322,5,549,0,0,3322,471,1,0,0,0,3323,
3325,5,376,0,0,3324,3323,1,0,0,0,3324,3325,1,0,0,0,3325,3327,1,0,0,0,3326,
3328,5,49,0,0,3327,3326,1,0,0,0,3327,3328,1,0,0,0,3328,3329,1,0,0,0,3329,
3330,7,42,0,0,3330,473,1,0,0,0,3331,3332,5,377,0,0,3332,3333,5,22,0,0,3333,
475,1,0,0,0,3334,3335,5,381,0,0,3335,3336,3,1128,564,0,3336,477,1,0,0,0,
3337,3338,5,392,0,0,3338,3341,3,1090,545,0,3339,3340,7,4,0,0,3340,3342,3,
1090,545,0,3341,3339,1,0,0,0,3341,3342,1,0,0,0,3342,479,1,0,0,0,3343,3345,
5,438,0,0,3344,3346,5,254,0,0,3345,3344,1,0,0,0,3345,3346,1,0,0,0,3346,3348,
1,0,0,0,3347,3343,1,0,0,0,3347,3348,1,0,0,0,3348,3349,1,0,0,0,3349,3354,
7,7,0,0,3350,3352,5,427,0,0,3351,3353,5,62,0,0,3352,3351,1,0,0,0,3352,3353,
1,0,0,0,3353,3355,1,0,0,0,3354,3350,1,0,0,0,3354,3355,1,0,0,0,3355,481,1,
0,0,0,3356,3358,7,43,0,0,3357,3359,7,44,0,0,3358,3357,1,0,0,0,3358,3359,
1,0,0,0,3359,483,1,0,0,0,3360,3362,5,254,0,0,3361,3360,1,0,0,0,3361,3362,
1,0,0,0,3362,3363,1,0,0,0,3363,3364,5,482,0,0,3364,485,1,0,0,0,3365,3367,
5,496,0,0,3366,3368,5,254,0,0,3367,3366,1,0,0,0,3367,3368,1,0,0,0,3368,3369,
1,0,0,0,3369,3370,7,45,0,0,3370,487,1,0,0,0,3371,3373,5,254,0,0,3372,3371,
1,0,0,0,3372,3373,1,0,0,0,3373,3374,1,0,0,0,3374,3375,5,497,0,0,3375,489,
1,0,0,0,3376,3378,5,504,0,0,3377,3379,5,254,0,0,3378,3377,1,0,0,0,3378,3379,
1,0,0,0,3379,3381,1,0,0,0,3380,3376,1,0,0,0,3380,3381,1,0,0,0,3381,3415,
1,0,0,0,3382,3384,5,42,0,0,3383,3385,7,46,0,0,3384,3383,1,0,0,0,3384,3385,
1,0,0,0,3385,3416,1,0,0,0,3386,3416,5,43,0,0,3387,3416,5,80,0,0,3388,3416,
5,81,0,0,3389,3416,5,82,0,0,3390,3416,5,83,0,0,3391,3416,5,84,0,0,3392,3416,
5,85,0,0,3393,3416,5,86,0,0,3394,3416,5,87,0,0,3395,3416,5,88,0,0,3396,3416,
5,89,0,0,3397,3416,5,90,0,0,3398,3416,5,91,0,0,3399,3416,5,98,0,0,3400,3416,
5,111,0,0,3401,3416,5,142,0,0,3402,3416,5,143,0,0,3403,3416,5,147,0,0,3404,
3416,5,194,0,0,3405,3416,5,219,0,0,3406,3416,5,240,0,0,3407,3416,5,257,0,
0,3408,3416,5,286,0,0,3409,3416,5,304,0,0,3410,3416,5,338,0,0,3411,3416,
5,349,0,0,3412,3416,5,357,0,0,3413,3416,5,373,0,0,3414,3416,5,473,0,0,3415,
3382,1,0,0,0,3415,3386,1,0,0,0,3415,3387,1,0,0,0,3415,3388,1,0,0,0,3415,
3389,1,0,0,0,3415,3390,1,0,0,0,3415,3391,1,0,0,0,3415,3392,1,0,0,0,3415,
3393,1,0,0,0,3415,3394,1,0,0,0,3415,3395,1,0,0,0,3415,3396,1,0,0,0,3415,
3397,1,0,0,0,3415,3398,1,0,0,0,3415,3399,1,0,0,0,3415,3400,1,0,0,0,3415,
3401,1,0,0,0,3415,3402,1,0,0,0,3415,3403,1,0,0,0,3415,3404,1,0,0,0,3415,
3405,1,0,0,0,3415,3406,1,0,0,0,3415,3407,1,0,0,0,3415,3408,1,0,0,0,3415,
3409,1,0,0,0,3415,3410,1,0,0,0,3415,3411,1,0,0,0,3415,3412,1,0,0,0,3415,
3413,1,0,0,0,3415,3414,1,0,0,0,3416,491,1,0,0,0,3417,3418,5,506,0,0,3418,
3420,7,47,0,0,3419,3421,5,323,0,0,3420,3419,1,0,0,0,3420,3421,1,0,0,0,3421,
3424,1,0,0,0,3422,3425,3,1170,585,0,3423,3425,3,1128,564,0,3424,3422,1,0,
0,0,3424,3423,1,0,0,0,3425,493,1,0,0,0,3426,3428,5,507,0,0,3427,3429,5,254,
0,0,3428,3427,1,0,0,0,3428,3429,1,0,0,0,3429,3435,1,0,0,0,3430,3432,5,508,
0,0,3431,3433,5,21,0,0,3432,3431,1,0,0,0,3432,3433,1,0,0,0,3433,3435,1,0,
0,0,3434,3426,1,0,0,0,3434,3430,1,0,0,0,3434,3435,1,0,0,0,3435,3436,1,0,
0,0,3436,3443,3,496,248,0,3437,3439,5,529,0,0,3438,3437,1,0,0,0,3438,3439,
1,0,0,0,3439,3440,1,0,0,0,3440,3442,3,496,248,0,3441,3438,1,0,0,0,3442,3445,
1,0,0,0,3443,3441,1,0,0,0,3443,3444,1,0,0,0,3444,495,1,0,0,0,3445,3443,1,
0,0,0,3446,3448,3,498,249,0,3447,3449,3,500,250,0,3448,3447,1,0,0,0,3448,
3449,1,0,0,0,3449,497,1,0,0,0,3450,3453,3,1172,586,0,3451,3453,3,1170,585,
0,3452,3450,1,0,0,0,3452,3451,1,0,0,0,3453,499,1,0,0,0,3454,3455,7,4,0,0,
3455,3456,3,1172,586,0,3456,501,1,0,0,0,3457,3459,5,514,0,0,3458,3457,1,
0,0,0,3458,3459,1,0,0,0,3459,3460,1,0,0,0,3460,3461,5,289,0,0,3461,3462,
5,47,0,0,3462,503,1,0,0,0,3463,3464,5,356,0,0,3464,3466,5,145,0,0,3465,3467,
3,506,253,0,3466,3465,1,0,0,0,3466,3467,1,0,0,0,3467,3469,1,0,0,0,3468,3470,
3,508,254,0,3469,3468,1,0,0,0,3469,3470,1,0,0,0,3470,3471,1,0,0,0,3471,3473,
5,534,0,0,3472,3474,3,520,260,0,3473,3472,1,0,0,0,3473,3474,1,0,0,0,3474,
3475,1,0,0,0,3475,3476,3,526,263,0,3476,505,1,0,0,0,3477,3479,7,48,0,0,3478,
3480,3,510,255,0,3479,3478,1,0,0,0,3480,3481,1,0,0,0,3481,3479,1,0,0,0,3481,
3482,1,0,0,0,3482,507,1,0,0,0,3483,3484,7,49,0,0,3484,3485,3,1128,564,0,
3485,509,1,0,0,0,3486,3489,3,512,256,0,3487,3489,3,516,258,0,3488,3486,1,
0,0,0,3488,3487,1,0,0,0,3489,511,1,0,0,0,3490,3492,5,49,0,0,3491,3490,1,
0,0,0,3491,3492,1,0,0,0,3492,3493,1,0,0,0,3493,3495,5,384,0,0,3494,3491,
1,0,0,0,3494,3495,1,0,0,0,3495,3497,1,0,0,0,3496,3498,3,514,257,0,3497,3496,
1,0,0,0,3498,3499,1,0,0,0,3499,3497,1,0,0,0,3499,3500,1,0,0,0,3500,513,1,
0,0,0,3501,3503,5,328,0,0,3502,3501,1,0,0,0,3502,3503,1,0,0,0,3503,3506,
1,0,0,0,3504,3507,3,1074,537,0,3505,3507,3,1134,567,0,3506,3504,1,0,0,0,
3506,3505,1,0,0,0,3507,3510,1,0,0,0,3508,3510,5,20,0,0,3509,3502,1,0,0,0,
3509,3508,1,0,0,0,3510,515,1,0,0,0,3511,3513,5,49,0,0,3512,3511,1,0,0,0,
3512,3513,1,0,0,0,3513,3514,1,0,0,0,3514,3516,5,507,0,0,3515,3517,3,518,
259,0,3516,3515,1,0,0,0,3517,3518,1,0,0,0,3518,3516,1,0,0,0,3518,3519,1,
0,0,0,3519,517,1,0,0,0,3520,3524,3,1074,537,0,3521,3524,3,1172,586,0,3522,
3524,5,20,0,0,3523,3520,1,0,0,0,3523,3521,1,0,0,0,3523,3522,1,0,0,0,3524,
519,1,0,0,0,3525,3526,5,127,0,0,3526,3528,5,534,0,0,3527,3529,3,522,261,
0,3528,3527,1,0,0,0,3529,3530,1,0,0,0,3530,3528,1,0,0,0,3530,3531,1,0,0,
0,3531,3532,1,0,0,0,3532,3533,5,158,0,0,3533,3534,5,127,0,0,3534,3535,5,
534,0,0,3535,521,1,0,0,0,3536,3537,3,524,262,0,3537,3538,5,534,0,0,3538,
3539,3,986,493,0,3539,3540,5,534,0,0,3540,3541,3,530,265,0,3541,523,1,0,
0,0,3542,3543,3,1162,581,0,3543,3545,5,419,0,0,3544,3546,3,1178,589,0,3545,
3544,1,0,0,0,3545,3546,1,0,0,0,3546,525,1,0,0,0,3547,3551,3,530,265,0,3548,
3550,3,528,264,0,3549,3548,1,0,0,0,3550,3553,1,0,0,0,3551,3549,1,0,0,0,3551,
3552,1,0,0,0,3552,527,1,0,0,0,3553,3551,1,0,0,0,3554,3555,3,524,262,0,3555,
3556,5,534,0,0,3556,3557,3,530,265,0,3557,529,1,0,0,0,3558,3560,3,534,267,
0,3559,3558,1,0,0,0,3560,3563,1,0,0,0,3561,3559,1,0,0,0,3561,3562,1,0,0,
0,3562,3567,1,0,0,0,3563,3561,1,0,0,0,3564,3566,3,532,266,0,3565,3564,1,
0,0,0,3566,3569,1,0,0,0,3567,3565,1,0,0,0,3567,3568,1,0,0,0,3568,531,1,0,
0,0,3569,3567,1,0,0,0,3570,3571,3,1148,574,0,3571,3579,5,534,0,0,3572,3580,
3,564,282,0,3573,3575,3,534,267,0,3574,3573,1,0,0,0,3575,3578,1,0,0,0,3576,
3574,1,0,0,0,3576,3577,1,0,0,0,3577,3580,1,0,0,0,3578,3576,1,0,0,0,3579,
3572,1,0,0,0,3579,3576,1,0,0,0,3580,533,1,0,0,0,3581,3583,3,536,268,0,3582,
3581,1,0,0,0,3583,3586,1,0,0,0,3584,3582,1,0,0,0,3584,3585,1,0,0,0,3585,
3587,1,0,0,0,3586,3584,1,0,0,0,3587,3588,5,534,0,0,3588,535,1,0,0,0,3589,
3639,3,538,269,0,3590,3639,3,548,274,0,3591,3639,3,566,283,0,3592,3639,3,
570,285,0,3593,3639,3,590,295,0,3594,3639,3,594,297,0,3595,3639,3,612,306,
0,3596,3639,3,616,308,0,3597,3639,3,618,309,0,3598,3639,3,620,310,0,3599,
3639,3,622,311,0,3600,3639,3,632,316,0,3601,3639,3,648,324,0,3602,3639,3,
650,325,0,3603,3639,3,652,326,0,3604,3639,3,678,339,0,3605,3639,3,672,336,
0,3606,3639,3,674,337,0,3607,3639,3,676,338,0,3608,3639,3,682,341,0,3609,
3639,3,684,342,0,3610,3639,3,686,343,0,3611,3639,3,688,344,0,3612,3639,3,
694,347,0,3613,3639,3,700,350,0,3614,3639,3,706,353,0,3615,3639,3,708,354,
0,3616,3639,3,738,369,0,3617,3639,3,758,379,0,3618,3639,3,768,384,0,3619,
3639,3,780,390,0,3620,3639,3,794,397,0,3621,3639,3,820,410,0,3622,3639,3,
822,411,0,3623,3639,3,830,415,0,3624,3639,3,852,426,0,3625,3639,3,854,427,
0,3626,3639,3,858,429,0,3627,3639,3,862,431,0,3628,3639,3,868,434,0,3629,
3639,3,888,444,0,3630,3639,3,900,450,0,3631,3639,3,926,463,0,3632,3639,3,
930,465,0,3633,3639,3,932,466,0,3634,3639,3,946,473,0,3635,3639,3,964,482,
0,3636,3639,3,966,483,0,3637,3639,3,996,498,0,3638,3589,1,0,0,0,3638,3590,
1,0,0,0,3638,3591,1,0,0,0,3638,3592,1,0,0,0,3638,3593,1,0,0,0,3638,3594,
1,0,0,0,3638,3595,1,0,0,0,3638,3596,1,0,0,0,3638,3597,1,0,0,0,3638,3598,
1,0,0,0,3638,3599,1,0,0,0,3638,3600,1,0,0,0,3638,3601,1,0,0,0,3638,3602,
1,0,0,0,3638,3603,1,0,0,0,3638,3604,1,0,0,0,3638,3605,1,0,0,0,3638,3606,
1,0,0,0,3638,3607,1,0,0,0,3638,3608,1,0,0,0,3638,3609,1,0,0,0,3638,3610,
1,0,0,0,3638,3611,1,0,0,0,3638,3612,1,0,0,0,3638,3613,1,0,0,0,3638,3614,
1,0,0,0,3638,3615,1,0,0,0,3638,3616,1,0,0,0,3638,3617,1,0,0,0,3638,3618,
1,0,0,0,3638,3619,1,0,0,0,3638,3620,1,0,0,0,3638,3621,1,0,0,0,3638,3622,
1,0,0,0,3638,3623,1,0,0,0,3638,3624,1,0,0,0,3638,3625,1,0,0,0,3638,3626,
1,0,0,0,3638,3627,1,0,0,0,3638,3628,1,0,0,0,3638,3629,1,0,0,0,3638,3630,
1,0,0,0,3638,3631,1,0,0,0,3638,3632,1,0,0,0,3638,3633,1,0,0,0,3638,3634,
1,0,0,0,3638,3635,1,0,0,0,3638,3636,1,0,0,0,3638,3637,1,0,0,0,3639,537,1,
0,0,0,3640,3641,5,2,0,0,3641,3646,3,1074,537,0,3642,3647,3,540,270,0,3643,
3647,3,544,272,0,3644,3647,3,542,271,0,3645,3647,3,546,273,0,3646,3642,1,
0,0,0,3646,3643,1,0,0,0,3646,3644,1,0,0,0,3646,3645,1,0,0,0,3646,3647,1,
0,0,0,3647,3649,1,0,0,0,3648,3650,3,1028,514,0,3649,3648,1,0,0,0,3649,3650,
1,0,0,0,3650,3652,1,0,0,0,3651,3653,3,1030,515,0,3652,3651,1,0,0,0,3652,
3653,1,0,0,0,3653,3655,1,0,0,0,3654,3656,5,159,0,0,3655,3654,1,0,0,0,3655,
3656,1,0,0,0,3656,539,1,0,0,0,3657,3677,5,215,0,0,3658,3660,5,111,0,0,3659,
3661,5,519,0,0,3660,3659,1,0,0,0,3660,3661,1,0,0,0,3661,3678,1,0,0,0,3662,
3664,5,114,0,0,3663,3665,5,520,0,0,3664,3663,1,0,0,0,3664,3665,1,0,0,0,3665,
3678,1,0,0,0,3666,3678,5,115,0,0,3667,3678,5,485,0,0,3668,3678,5,486,0,0,
3669,3671,5,490,0,0,3670,3672,5,296,0,0,3671,3670,1,0,0,0,3671,3672,1,0,
0,0,3672,3678,1,0,0,0,3673,3678,5,491,0,0,3674,3678,5,518,0,0,3675,3678,
5,519,0,0,3676,3678,5,520,0,0,3677,3658,1,0,0,0,3677,3662,1,0,0,0,3677,3666,
1,0,0,0,3677,3667,1,0,0,0,3677,3668,1,0,0,0,3677,3669,1,0,0,0,3677,3673,
1,0,0,0,3677,3674,1,0,0,0,3677,3675,1,0,0,0,3677,3676,1,0,0,0,3678,541,1,
0,0,0,3679,3680,5,215,0,0,3680,3681,3,1146,573,0,3681,543,1,0,0,0,3682,3683,
5,215,0,0,3683,3684,5,191,0,0,3684,3685,5,259,0,0,3685,545,1,0,0,0,3686,
3688,5,295,0,0,3687,3686,1,0,0,0,3687,3688,1,0,0,0,3688,3689,1,0,0,0,3689,
3690,5,105,0,0,3690,547,1,0,0,0,3691,3695,5,4,0,0,3692,3696,3,550,275,0,
3693,3696,3,552,276,0,3694,3696,3,554,277,0,3695,3692,1,0,0,0,3695,3693,
1,0,0,0,3695,3694,1,0,0,0,3696,3698,1,0,0,0,3697,3699,3,1024,512,0,3698,
3697,1,0,0,0,3698,3699,1,0,0,0,3699,3701,1,0,0,0,3700,3702,3,1026,513,0,
3701,3700,1,0,0,0,3701,3702,1,0,0,0,3702,3704,1,0,0,0,3703,3705,5,160,0,
0,3704,3703,1,0,0,0,3704,3705,1,0,0,0,3705,549,1,0,0,0,3706,3708,3,556,278,
0,3707,3706,1,0,0,0,3708,3709,1,0,0,0,3709,3707,1,0,0,0,3709,3710,1,0,0,
0,3710,3711,1,0,0,0,3711,3713,5,489,0,0,3712,3714,3,558,279,0,3713,3712,
1,0,0,0,3714,3715,1,0,0,0,3715,3713,1,0,0,0,3715,3716,1,0,0,0,3716,551,1,
0,0,0,3717,3719,3,556,278,0,3718,3717,1,0,0,0,3719,3720,1,0,0,0,3720,3718,
1,0,0,0,3720,3721,1,0,0,0,3721,3728,1,0,0,0,3722,3724,5,489,0,0,3723,3725,
3,560,280,0,3724,3723,1,0,0,0,3725,3726,1,0,0,0,3726,3724,1,0,0,0,3726,3727,
1,0,0,0,3727,3729,1,0,0,0,3728,3722,1,0,0,0,3728,3729,1,0,0,0,3729,3730,
1,0,0,0,3730,3732,5,222,0,0,3731,3733,3,562,281,0,3732,3731,1,0,0,0,3733,
3734,1,0,0,0,3734,3732,1,0,0,0,3734,3735,1,0,0,0,3735,553,1,0,0,0,3736,3737,
7,50,0,0,3737,3738,3,1074,537,0,3738,3739,5,489,0,0,3739,3740,3,558,279,
0,3740,555,1,0,0,0,3741,3744,3,1074,537,0,3742,3744,3,1172,586,0,3743,3741,
1,0,0,0,3743,3742,1,0,0,0,3744,557,1,0,0,0,3745,3747,3,1074,537,0,3746,3748,
5,412,0,0,3747,3746,1,0,0,0,3747,3748,1,0,0,0,3748,559,1,0,0,0,3749,3752,
3,1074,537,0,3750,3752,3,1172,586,0,3751,3749,1,0,0,0,3751,3750,1,0,0,0,
3752,561,1,0,0,0,3753,3755,3,1074,537,0,3754,3756,5,412,0,0,3755,3754,1,
0,0,0,3755,3756,1,0,0,0,3756,563,1,0,0,0,3757,3759,5,224,0,0,3758,3760,5,
489,0,0,3759,3758,1,0,0,0,3759,3760,1,0,0,0,3760,3761,1,0,0,0,3761,3762,
5,534,0,0,3762,565,1,0,0,0,3763,3765,5,17,0,0,3764,3766,3,568,284,0,3765,
3764,1,0,0,0,3766,3767,1,0,0,0,3767,3765,1,0,0,0,3767,3768,1,0,0,0,3768,
567,1,0,0,0,3769,3770,3,1150,575,0,3770,3773,5,489,0,0,3771,3772,5,359,0,
0,3772,3774,5,489,0,0,3773,3771,1,0,0,0,3773,3774,1,0,0,0,3774,3775,1,0,
0,0,3775,3776,3,1150,575,0,3776,569,1,0,0,0,3777,3780,5,52,0,0,3778,3781,
3,1074,537,0,3779,3781,3,1172,586,0,3780,3778,1,0,0,0,3780,3779,1,0,0,0,
3781,3783,1,0,0,0,3782,3784,3,572,286,0,3783,3782,1,0,0,0,3783,3784,1,0,
0,0,3784,3786,1,0,0,0,3785,3787,3,588,294,0,3786,3785,1,0,0,0,3786,3787,
1,0,0,0,3787,3789,1,0,0,0,3788,3790,3,1020,510,0,3789,3788,1,0,0,0,3789,
3790,1,0,0,0,3790,3792,1,0,0,0,3791,3793,3,1028,514,0,3792,3791,1,0,0,0,
3792,3793,1,0,0,0,3793,3795,1,0,0,0,3794,3796,3,1030,515,0,3795,3794,1,0,
0,0,3795,3796,1,0,0,0,3796,3798,1,0,0,0,3797,3799,5,161,0,0,3798,3797,1,
0,0,0,3798,3799,1,0,0,0,3799,571,1,0,0,0,3800,3802,5,506,0,0,3801,3803,3,
574,287,0,3802,3801,1,0,0,0,3803,3804,1,0,0,0,3804,3802,1,0,0,0,3804,3805,
1,0,0,0,3805,573,1,0,0,0,3806,3810,3,576,288,0,3807,3810,3,580,290,0,3808,
3810,3,584,292,0,3809,3806,1,0,0,0,3809,3807,1,0,0,0,3809,3808,1,0,0,0,3810,
575,1,0,0,0,3811,3813,5,49,0,0,3812,3811,1,0,0,0,3812,3813,1,0,0,0,3813,
3814,1,0,0,0,3814,3816,5,384,0,0,3815,3812,1,0,0,0,3815,3816,1,0,0,0,3816,
3818,1,0,0,0,3817,3819,3,578,289,0,3818,3817,1,0,0,0,3819,3820,1,0,0,0,3820,
3818,1,0,0,0,3820,3821,1,0,0,0,3821,577,1,0,0,0,3822,3823,5,5,0,0,3823,3827,
5,323,0,0,3824,3827,5,250,0,0,3825,3827,5,459,0,0,3826,3822,1,0,0,0,3826,
3824,1,0,0,0,3826,3825,1,0,0,0,3826,3827,1,0,0,0,3827,3828,1,0,0,0,3828,
3832,3,1074,537,0,3829,3832,3,1172,586,0,3830,3832,3,1134,567,0,3831,3826,
1,0,0,0,3831,3829,1,0,0,0,3831,3830,1,0,0,0,3832,3835,1,0,0,0,3833,3835,
5,325,0,0,3834,3831,1,0,0,0,3834,3833,1,0,0,0,3835,579,1,0,0,0,3836,3838,
5,49,0,0,3837,3836,1,0,0,0,3837,3838,1,0,0,0,3838,3839,1,0,0,0,3839,3841,
5,507,0,0,3840,3842,3,582,291,0,3841,3840,1,0,0,0,3842,3843,1,0,0,0,3843,
3841,1,0,0,0,3843,3844,1,0,0,0,3844,581,1,0,0,0,3845,3846,5,5,0,0,3846,3852,
5,323,0,0,3847,3849,5,269,0,0,3848,3850,5,323,0,0,3849,3848,1,0,0,0,3849,
3850,1,0,0,0,3850,3852,1,0,0,0,3851,3845,1,0,0,0,3851,3847,1,0,0,0,3851,
3852,1,0,0,0,3852,3855,1,0,0,0,3853,3856,3,1074,537,0,3854,3856,3,1172,586,
0,3855,3853,1,0,0,0,3855,3854,1,0,0,0,3856,583,1,0,0,0,3857,3859,5,49,0,
0,3858,3857,1,0,0,0,3858,3859,1,0,0,0,3859,3860,1,0,0,0,3860,3862,5,95,0,
0,3861,3863,3,586,293,0,3862,3861,1,0,0,0,3863,3864,1,0,0,0,3864,3862,1,
0,0,0,3864,3865,1,0,0,0,3865,585,1,0,0,0,3866,3867,5,5,0,0,3867,3873,5,323,
0,0,3868,3870,5,269,0,0,3869,3871,5,323,0,0,3870,3869,1,0,0,0,3870,3871,
1,0,0,0,3871,3873,1,0,0,0,3872,3866,1,0,0,0,3872,3868,1,0,0,0,3872,3873,
1,0,0,0,3873,3874,1,0,0,0,3874,3878,3,1074,537,0,3875,3878,3,1172,586,0,
3876,3878,5,325,0,0,3877,3872,1,0,0,0,3877,3875,1,0,0,0,3877,3876,1,0,0,
0,3878,587,1,0,0,0,3879,3880,7,49,0,0,3880,3881,3,1074,537,0,3881,589,1,
0,0,0,3882,3884,5,53,0,0,3883,3885,3,592,296,0,3884,3883,1,0,0,0,3885,3886,
1,0,0,0,3886,3884,1,0,0,0,3886,3887,1,0,0,0,3887,591,1,0,0,0,3888,3889,3,
1142,571,0,3889,3890,7,36,0,0,3890,3894,1,0,0,0,3891,3894,3,1074,537,0,3892,
3894,3,1172,586,0,3893,3888,1,0,0,0,3893,3891,1,0,0,0,3893,3892,1,0,0,0,
3894,593,1,0,0,0,3895,3897,5,67,0,0,3896,3898,3,596,298,0,3897,3896,1,0,
0,0,3898,3899,1,0,0,0,3899,3897,1,0,0,0,3899,3900,1,0,0,0,3900,595,1,0,0,
0,3901,3905,3,1134,567,0,3902,3906,3,598,299,0,3903,3906,3,600,300,0,3904,
3906,3,602,301,0,3905,3902,1,0,0,0,3905,3903,1,0,0,0,3905,3904,1,0,0,0,3905,
3906,1,0,0,0,3906,597,1,0,0,0,3907,3912,7,12,0,0,3908,3910,5,212,0,0,3909,
3908,1,0,0,0,3909,3910,1,0,0,0,3910,3911,1,0,0,0,3911,3913,5,390,0,0,3912,
3909,1,0,0,0,3912,3913,1,0,0,0,3913,3922,1,0,0,0,3914,3916,5,514,0,0,3915,
3914,1,0,0,0,3915,3916,1,0,0,0,3916,3920,1,0,0,0,3917,3918,5,310,0,0,3918,
3921,5,407,0,0,3919,3921,5,286,0,0,3920,3917,1,0,0,0,3920,3919,1,0,0,0,3921,
3923,1,0,0,0,3922,3915,1,0,0,0,3922,3923,1,0,0,0,3923,599,1,0,0,0,3924,3926,
5,514,0,0,3925,3924,1,0,0,0,3925,3926,1,0,0,0,3926,3930,1,0,0,0,3927,3928,
5,310,0,0,3928,3931,5,407,0,0,3929,3931,5,286,0,0,3930,3927,1,0,0,0,3930,
3929,1,0,0,0,3931,601,1,0,0,0,3932,3934,5,514,0,0,3933,3932,1,0,0,0,3933,
3934,1,0,0,0,3934,3935,1,0,0,0,3935,3936,5,310,0,0,3936,3940,5,511,0,0,3937,
3938,5,514,0,0,3938,3940,5,511,0,0,3939,3933,1,0,0,0,3939,3937,1,0,0,0,3940,
3947,1,0,0,0,3941,3943,5,506,0,0,3942,3944,3,604,302,0,3943,3942,1,0,0,0,
3944,3945,1,0,0,0,3945,3943,1,0,0,0,3945,3946,1,0,0,0,3946,3948,1,0,0,0,
3947,3941,1,0,0,0,3947,3948,1,0,0,0,3948,603,1,0,0,0,3949,3953,3,606,303,
0,3950,3953,3,608,304,0,3951,3953,3,610,305,0,3952,3949,1,0,0,0,3952,3950,
1,0,0,0,3952,3951,1,0,0,0,3953,605,1,0,0,0,3954,3956,5,68,0,0,3955,3957,
5,323,0,0,3956,3955,1,0,0,0,3956,3957,1,0,0,0,3957,3958,1,0,0,0,3958,3959,
7,51,0,0,3959,607,1,0,0,0,3960,3963,5,28,0,0,3961,3964,3,1074,537,0,3962,
3964,3,1178,589,0,3963,3961,1,0,0,0,3963,3962,1,0,0,0,3964,609,1,0,0,0,3965,
3967,5,29,0,0,3966,3968,5,323,0,0,3967,3966,1,0,0,0,3967,3968,1,0,0,0,3968,
3971,1,0,0,0,3969,3972,3,1074,537,0,3970,3972,3,1178,589,0,3971,3969,1,0,
0,0,3971,3970,1,0,0,0,3972,611,1,0,0,0,3973,3975,5,92,0,0,3974,3976,3,614,
307,0,3975,3974,1,0,0,0,3976,3977,1,0,0,0,3977,3975,1,0,0,0,3977,3978,1,
0,0,0,3978,3979,1,0,0,0,3979,3980,7,52,0,0,3980,3982,3,1032,516,0,3981,3983,
3,1024,512,0,3982,3981,1,0,0,0,3982,3983,1,0,0,0,3983,3985,1,0,0,0,3984,
3986,3,1026,513,0,3985,3984,1,0,0,0,3985,3986,1,0,0,0,3986,3988,1,0,0,0,
3987,3989,5,162,0,0,3988,3987,1,0,0,0,3988,3989,1,0,0,0,3989,613,1,0,0,0,
3990,3992,3,1074,537,0,3991,3993,5,412,0,0,3992,3991,1,0,0,0,3992,3993,1,
0,0,0,3993,615,1,0,0,0,3994,3995,5,96,0,0,3995,617,1,0,0,0,3996,3997,5,131,
0,0,3997,3999,3,1134,567,0,3998,4000,5,377,0,0,3999,3998,1,0,0,0,3999,4000,
1,0,0,0,4000,4002,1,0,0,0,4001,4003,3,1016,508,0,4002,4001,1,0,0,0,4002,
4003,1,0,0,0,4003,4005,1,0,0,0,4004,4006,3,1018,509,0,4005,4004,1,0,0,0,
4005,4006,1,0,0,0,4006,4008,1,0,0,0,4007,4009,5,163,0,0,4008,4007,1,0,0,
0,4008,4009,1,0,0,0,4009,619,1,0,0,0,4010,4018,5,140,0,0,4011,4013,5,246,
0,0,4012,4014,5,475,0,0,4013,4012,1,0,0,0,4013,4014,1,0,0,0,4014,4019,1,
0,0,0,4015,4016,5,232,0,0,4016,4019,5,475,0,0,4017,4019,5,334,0,0,4018,4011,
1,0,0,0,4018,4015,1,0,0,0,4018,4017,1,0,0,0,4019,4020,1,0,0,0,4020,4022,
3,1120,560,0,4021,4023,5,514,0,0,4022,4021,1,0,0,0,4022,4023,1,0,0,0,4023,
4024,1,0,0,0,4024,4027,5,259,0,0,4025,4028,3,1074,537,0,4026,4028,3,1172,
586,0,4027,4025,1,0,0,0,4027,4026,1,0,0,0,4028,621,1,0,0,0,4029,4031,5,142,
0,0,4030,4032,3,624,312,0,4031,4030,1,0,0,0,4032,4033,1,0,0,0,4033,4031,
1,0,0,0,4033,4034,1,0,0,0,4034,4036,1,0,0,0,4035,4037,3,626,313,0,4036,4035,
1,0,0,0,4036,4037,1,0,0,0,4037,4039,1,0,0,0,4038,4040,3,628,314,0,4039,4038,
1,0,0,0,4039,4040,1,0,0,0,4040,4042,1,0,0,0,4041,4043,3,630,315,0,4042,4041,
1,0,0,0,4042,4043,1,0,0,0,4043,623,1,0,0,0,4044,4047,3,1074,537,0,4045,4047,
3,1172,586,0,4046,4044,1,0,0,0,4046,4045,1,0,0,0,4047,625,1,0,0,0,4048,4051,
5,30,0,0,4049,4052,3,1074,537,0,4050,4052,3,1172,586,0,4051,4049,1,0,0,0,
4051,4050,1,0,0,0,4052,627,1,0,0,0,4053,4056,5,503,0,0,4054,4057,3,1146,
573,0,4055,4057,3,1132,566,0,4056,4054,1,0,0,0,4056,4055,1,0,0,0,4057,629,
1,0,0,0,4058,4060,5,514,0,0,4059,4058,1,0,0,0,4059,4060,1,0,0,0,4060,4061,
1,0,0,0,4061,4062,5,310,0,0,4062,4063,5,6,0,0,4063,631,1,0,0,0,4064,4067,
5,144,0,0,4065,4068,3,1074,537,0,4066,4068,3,1172,586,0,4067,4065,1,0,0,
0,4067,4066,1,0,0,0,4068,4072,1,0,0,0,4069,4073,3,634,317,0,4070,4073,3,
636,318,0,4071,4073,3,638,319,0,4072,4069,1,0,0,0,4072,4070,1,0,0,0,4072,
4071,1,0,0,0,4073,4075,1,0,0,0,4074,4076,3,646,323,0,4075,4074,1,0,0,0,4075,
4076,1,0,0,0,4076,4078,1,0,0,0,4077,4079,3,1024,512,0,4078,4077,1,0,0,0,
4078,4079,1,0,0,0,4079,4081,1,0,0,0,4080,4082,3,1026,513,0,4081,4080,1,0,
0,0,4081,4082,1,0,0,0,4082,4084,1,0,0,0,4083,4085,5,164,0,0,4084,4083,1,
0,0,0,4084,4085,1,0,0,0,4085,633,1,0,0,0,4086,4088,5,251,0,0,4087,4089,3,
642,321,0,4088,4087,1,0,0,0,4089,4090,1,0,0,0,4090,4088,1,0,0,0,4090,4091,
1,0,0,0,4091,635,1,0,0,0,4092,4095,5,251,0,0,4093,4096,3,1074,537,0,4094,
4096,3,1172,586,0,4095,4093,1,0,0,0,4095,4094,1,0,0,0,4096,4098,1,0,0,0,
4097,4099,3,640,320,0,4098,4097,1,0,0,0,4098,4099,1,0,0,0,4099,637,1,0,0,
0,4100,4103,5,49,0,0,4101,4104,3,1074,537,0,4102,4104,3,1172,586,0,4103,
4101,1,0,0,0,4103,4102,1,0,0,0,4104,4106,1,0,0,0,4105,4107,3,640,320,0,4106,
4105,1,0,0,0,4106,4107,1,0,0,0,4107,639,1,0,0,0,4108,4110,5,222,0,0,4109,
4111,3,644,322,0,4110,4109,1,0,0,0,4111,4112,1,0,0,0,4112,4110,1,0,0,0,4112,
4113,1,0,0,0,4113,641,1,0,0,0,4114,4116,3,1074,537,0,4115,4117,5,412,0,0,
4116,4115,1,0,0,0,4116,4117,1,0,0,0,4117,643,1,0,0,0,4118,4120,3,1074,537,
0,4119,4121,5,412,0,0,4120,4119,1,0,0,0,4120,4121,1,0,0,0,4121,645,1,0,0,
0,4122,4123,5,388,0,0,4123,4124,3,1074,537,0,4124,647,1,0,0,0,4125,4133,
5,157,0,0,4126,4128,5,246,0,0,4127,4129,5,475,0,0,4128,4127,1,0,0,0,4128,
4129,1,0,0,0,4129,4134,1,0,0,0,4130,4131,5,232,0,0,4131,4134,5,475,0,0,4132,
4134,5,334,0,0,4133,4126,1,0,0,0,4133,4130,1,0,0,0,4133,4132,1,0,0,0,4134,
4135,1,0,0,0,4135,4137,3,1120,560,0,4136,4138,5,514,0,0,4137,4136,1,0,0,
0,4137,4138,1,0,0,0,4138,4139,1,0,0,0,4139,4142,5,259,0,0,4140,4143,3,1172,
586,0,4141,4143,3,1074,537,0,4142,4140,1,0,0,0,4142,4141,1,0,0,0,4143,649,
1,0,0,0,4144,4145,5,182,0,0,4145,4152,3,1172,586,0,4146,4148,5,506,0,0,4147,
4149,3,1074,537,0,4148,4147,1,0,0,0,4149,4150,1,0,0,0,4150,4148,1,0,0,0,
4150,4151,1,0,0,0,4151,4153,1,0,0,0,4152,4146,1,0,0,0,4152,4153,1,0,0,0,
4153,651,1,0,0,0,4154,4155,5,193,0,0,4155,4159,3,654,327,0,4156,4158,3,656,
328,0,4157,4156,1,0,0,0,4158,4161,1,0,0,0,4159,4157,1,0,0,0,4159,4160,1,
0,0,0,4160,4163,1,0,0,0,4161,4159,1,0,0,0,4162,4164,3,658,329,0,4163,4162,
1,0,0,0,4164,4165,1,0,0,0,4165,4163,1,0,0,0,4165,4166,1,0,0,0,4166,4168,
1,0,0,0,4167,4169,3,668,334,0,4168,4167,1,0,0,0,4168,4169,1,0,0,0,4169,4171,
1,0,0,0,4170,4172,5,165,0,0,4171,4170,1,0,0,0,4171,4172,1,0,0,0,4172,653,
1,0,0,0,4173,4178,3,1074,537,0,4174,4178,3,1172,586,0,4175,4178,3,1032,516,
0,4176,4178,3,1046,523,0,4177,4173,1,0,0,0,4177,4174,1,0,0,0,4177,4175,1,
0,0,0,4177,4176,1,0,0,0,4178,655,1,0,0,0,4179,4180,5,16,0,0,4180,4181,3,
654,327,0,4181,657,1,0,0,0,4182,4184,3,660,330,0,4183,4182,1,0,0,0,4184,
4185,1,0,0,0,4185,4183,1,0,0,0,4185,4186,1,0,0,0,4186,4190,1,0,0,0,4187,
4189,3,536,268,0,4188,4187,1,0,0,0,4189,4192,1,0,0,0,4190,4188,1,0,0,0,4190,
4191,1,0,0,0,4191,659,1,0,0,0,4192,4190,1,0,0,0,4193,4194,5,512,0,0,4194,
4198,3,662,331,0,4195,4197,3,666,333,0,4196,4195,1,0,0,0,4197,4200,1,0,0,
0,4198,4196,1,0,0,0,4198,4199,1,0,0,0,4199,661,1,0,0,0,4200,4198,1,0,0,0,
4201,4212,5,20,0,0,4202,4204,5,312,0,0,4203,4202,1,0,0,0,4203,4204,1,0,0,
0,4204,4205,1,0,0,0,4205,4207,3,670,335,0,4206,4208,3,664,332,0,4207,4206,
1,0,0,0,4207,4208,1,0,0,0,4208,4212,1,0,0,0,4209,4212,3,1046,523,0,4210,
4212,3,1174,587,0,4211,4201,1,0,0,0,4211,4203,1,0,0,0,4211,4209,1,0,0,0,
4211,4210,1,0,0,0,4212,663,1,0,0,0,4213,4214,7,4,0,0,4214,4215,3,670,335,
0,4215,665,1,0,0,0,4216,4217,5,16,0,0,4217,4218,3,662,331,0,4218,667,1,0,
0,0,4219,4220,5,512,0,0,4220,4224,5,333,0,0,4221,4223,3,536,268,0,4222,4221,
1,0,0,0,4223,4226,1,0,0,0,4224,4222,1,0,0,0,4224,4225,1,0,0,0,4225,669,1,
0,0,0,4226,4224,1,0,0,0,4227,4231,3,1074,537,0,4228,4231,3,1172,586,0,4229,
4231,3,1032,516,0,4230,4227,1,0,0,0,4230,4228,1,0,0,0,4230,4229,1,0,0,0,
4231,671,1,0,0,0,4232,4234,5,559,0,0,4233,4232,1,0,0,0,4234,4235,1,0,0,0,
4235,4233,1,0,0,0,4235,4236,1,0,0,0,4236,673,1,0,0,0,4237,4239,5,561,0,0,
4238,4237,1,0,0,0,4239,4240,1,0,0,0,4240,4238,1,0,0,0,4240,4241,1,0,0,0,
4241,675,1,0,0,0,4242,4244,5,560,0,0,4243,4242,1,0,0,0,4244,4245,1,0,0,0,
4245,4243,1,0,0,0,4245,4246,1,0,0,0,4246,677,1,0,0,0,4247,4249,5,198,0,0,
4248,4250,5,303,0,0,4249,4248,1,0,0,0,4249,4250,1,0,0,0,4250,4252,1,0,0,
0,4251,4253,5,60,0,0,4252,4251,1,0,0,0,4252,4253,1,0,0,0,4253,4255,1,0,0,
0,4254,4256,3,680,340,0,4255,4254,1,0,0,0,4256,4257,1,0,0,0,4257,4255,1,
0,0,0,4257,4258,1,0,0,0,4258,679,1,0,0,0,4259,4262,3,1074,537,0,4260,4262,
3,1172,586,0,4261,4259,1,0,0,0,4261,4260,1,0,0,0,4262,681,1,0,0,0,4263,4265,
5,199,0,0,4264,4266,5,361,0,0,4265,4264,1,0,0,0,4265,4266,1,0,0,0,4266,683,
1,0,0,0,4267,4268,5,220,0,0,4268,4269,3,1156,578,0,4269,685,1,0,0,0,4270,
4271,5,221,0,0,4271,687,1,0,0,0,4272,4274,5,224,0,0,4273,4275,5,489,0,0,
4274,4273,1,0,0,0,4274,4275,1,0,0,0,4275,4278,1,0,0,0,4276,4279,3,690,345,
0,4277,4279,3,692,346,0,4278,4276,1,0,0,0,4278,4277,1,0,0,0,4279,689,1,0,
0,0,4280,4281,3,1150,575,0,4281,691,1,0,0,0,4282,4296,5,299,0,0,4283,4285,
3,1150,575,0,4284,4283,1,0,0,0,4285,4286,1,0,0,0,4286,4284,1,0,0,0,4286,
4287,1,0,0,0,4287,4293,1,0,0,0,4288,4290,5,134,0,0,4289,4291,5,326,0,0,4290,
4289,1,0,0,0,4290,4291,1,0,0,0,4291,4292,1,0,0,0,4292,4294,3,1074,537,0,
4293,4288,1,0,0,0,4293,4294,1,0,0,0,4294,4296,1,0,0,0,4295,4282,1,0,0,0,
4295,4284,1,0,0,0,4296,693,1,0,0,0,4297,4298,5,236,0,0,4298,4299,3,1046,
523,0,4299,4301,3,696,348,0,4300,4302,3,698,349,0,4301,4300,1,0,0,0,4301,
4302,1,0,0,0,4302,4304,1,0,0,0,4303,4305,5,166,0,0,4304,4303,1,0,0,0,4304,
4305,1,0,0,0,4305,695,1,0,0,0,4306,4308,5,480,0,0,4307,4306,1,0,0,0,4307,
4308,1,0,0,0,4308,4317,1,0,0,0,4309,4310,5,309,0,0,4310,4318,5,426,0,0,4311,
4313,3,536,268,0,4312,4311,1,0,0,0,4313,4316,1,0,0,0,4314,4312,1,0,0,0,4314,
4315,1,0,0,0,4315,4318,1,0,0,0,4316,4314,1,0,0,0,4317,4309,1,0,0,0,4317,
4314,1,0,0,0,4318,697,1,0,0,0,4319,4328,5,154,0,0,4320,4321,5,309,0,0,4321,
4329,5,426,0,0,4322,4324,3,536,268,0,4323,4322,1,0,0,0,4324,4327,1,0,0,0,
4325,4323,1,0,0,0,4325,4326,1,0,0,0,4326,4329,1,0,0,0,4327,4325,1,0,0,0,
4328,4320,1,0,0,0,4328,4325,1,0,0,0,4329,699,1,0,0,0,4330,4332,5,244,0,0,
4331,4333,3,1074,537,0,4332,4331,1,0,0,0,4333,4334,1,0,0,0,4334,4332,1,0,
0,0,4334,4335,1,0,0,0,4335,4337,1,0,0,0,4336,4338,3,702,351,0,4337,4336,
1,0,0,0,4337,4338,1,0,0,0,4338,701,1,0,0,0,4339,4341,5,394,0,0,4340,4342,
3,704,352,0,4341,4340,1,0,0,0,4342,4343,1,0,0,0,4343,4341,1,0,0,0,4343,4344,
1,0,0,0,4344,703,1,0,0,0,4345,4347,7,53,0,0,4346,4348,5,109,0,0,4347,4346,
1,0,0,0,4347,4348,1,0,0,0,4348,4349,1,0,0,0,4349,4352,5,49,0,0,4350,4353,
3,1074,537,0,4351,4353,3,1172,586,0,4352,4350,1,0,0,0,4352,4351,1,0,0,0,
4353,705,1,0,0,0,4354,4356,5,245,0,0,4355,4357,3,1156,578,0,4356,4355,1,
0,0,0,4357,4358,1,0,0,0,4358,4356,1,0,0,0,4358,4359,1,0,0,0,4359,707,1,0,
0,0,4360,4361,5,248,0,0,4361,4366,3,1074,537,0,4362,4367,3,710,355,0,4363,
4367,3,712,356,0,4364,4367,3,714,357,0,4365,4367,3,716,358,0,4366,4362,1,
0,0,0,4366,4363,1,0,0,0,4366,4364,1,0,0,0,4366,4365,1,0,0,0,4367,709,1,0,
0,0,4368,4370,5,472,0,0,4369,4371,3,718,359,0,4370,4369,1,0,0,0,4371,4372,
1,0,0,0,4372,4370,1,0,0,0,4372,4373,1,0,0,0,4373,711,1,0,0,0,4374,4377,5,
394,0,0,4375,4378,3,722,361,0,4376,4378,3,726,363,0,4377,4375,1,0,0,0,4377,
4376,1,0,0,0,4378,4379,1,0,0,0,4379,4377,1,0,0,0,4379,4380,1,0,0,0,4380,
713,1,0,0,0,4381,4383,5,472,0,0,4382,4384,3,718,359,0,4383,4382,1,0,0,0,
4384,4385,1,0,0,0,4385,4383,1,0,0,0,4385,4386,1,0,0,0,4386,4388,1,0,0,0,
4387,4389,3,712,356,0,4388,4387,1,0,0,0,4389,4390,1,0,0,0,4390,4388,1,0,
0,0,4390,4391,1,0,0,0,4391,715,1,0,0,0,4392,4395,5,101,0,0,4393,4396,3,1074,
537,0,4394,4396,3,1172,586,0,4395,4393,1,0,0,0,4395,4394,1,0,0,0,4396,4397,
1,0,0,0,4397,4401,3,734,367,0,4398,4400,3,736,368,0,4399,4398,1,0,0,0,4400,
4403,1,0,0,0,4401,4399,1,0,0,0,4401,4402,1,0,0,0,4402,717,1,0,0,0,4403,4401,
1,0,0,0,4404,4405,3,1074,537,0,4405,4408,5,212,0,0,4406,4409,3,720,360,0,
4407,4409,3,724,362,0,4408,4406,1,0,0,0,4408,4407,1,0,0,0,4409,4410,1,0,
0,0,4410,4408,1,0,0,0,4410,4411,1,0,0,0,4411,719,1,0,0,0,4412,4416,5,63,
0,0,4413,4415,3,736,368,0,4414,4413,1,0,0,0,4415,4418,1,0,0,0,4416,4414,
1,0,0,0,4416,4417,1,0,0,0,4417,721,1,0,0,0,4418,4416,1,0,0,0,4419,4420,5,
63,0,0,4420,4424,3,732,366,0,4421,4423,3,736,368,0,4422,4421,1,0,0,0,4423,
4426,1,0,0,0,4424,4422,1,0,0,0,4424,4425,1,0,0,0,4425,723,1,0,0,0,4426,4424,
1,0,0,0,4427,4429,7,54,0,0,4428,4430,3,728,364,0,4429,4428,1,0,0,0,4430,
4431,1,0,0,0,4431,4429,1,0,0,0,4431,4432,1,0,0,0,4432,725,1,0,0,0,4433,4435,
7,55,0,0,4434,4436,3,730,365,0,4435,4434,1,0,0,0,4436,4437,1,0,0,0,4437,
4435,1,0,0,0,4437,4438,1,0,0,0,4438,727,1,0,0,0,4439,4442,3,1074,537,0,4440,
4442,3,1172,586,0,4441,4439,1,0,0,0,4441,4440,1,0,0,0,4442,4446,1,0,0,0,
4443,4445,3,736,368,0,4444,4443,1,0,0,0,4445,4448,1,0,0,0,4446,4444,1,0,
0,0,4446,4447,1,0,0,0,4447,729,1,0,0,0,4448,4446,1,0,0,0,4449,4452,3,1074,
537,0,4450,4452,3,1172,586,0,4451,4449,1,0,0,0,4451,4450,1,0,0,0,4452,4453,
1,0,0,0,4453,4457,3,732,366,0,4454,4456,3,736,368,0,4455,4454,1,0,0,0,4456,
4459,1,0,0,0,4457,4455,1,0,0,0,4457,4458,1,0,0,0,4458,731,1,0,0,0,4459,4457,
1,0,0,0,4460,4463,5,49,0,0,4461,4464,3,1074,537,0,4462,4464,3,1172,586,0,
4463,4461,1,0,0,0,4463,4462,1,0,0,0,4464,733,1,0,0,0,4465,4468,5,489,0,0,
4466,4469,3,1074,537,0,4467,4469,3,1172,586,0,4468,4466,1,0,0,0,4468,4467,
1,0,0,0,4469,735,1,0,0,0,4470,4472,7,56,0,0,4471,4473,5,243,0,0,4472,4471,
1,0,0,0,4472,4473,1,0,0,0,4473,4476,1,0,0,0,4474,4477,3,1074,537,0,4475,
4477,3,1172,586,0,4476,4474,1,0,0,0,4476,4475,1,0,0,0,4477,737,1,0,0,0,4478,
4479,5,294,0,0,4479,4481,3,1134,567,0,4480,4482,3,740,370,0,4481,4480,1,
0,0,0,4482,4483,1,0,0,0,4483,4481,1,0,0,0,4483,4484,1,0,0,0,4484,4486,1,
0,0,0,4485,4487,3,742,371,0,4486,4485,1,0,0,0,4486,4487,1,0,0,0,4487,4491,
1,0,0,0,4488,4490,3,748,374,0,4489,4488,1,0,0,0,4490,4493,1,0,0,0,4491,4489,
1,0,0,0,4491,4492,1,0,0,0,4492,4495,1,0,0,0,4493,4491,1,0,0,0,4494,4496,
3,750,375,0,4495,4494,1,0,0,0,4495,4496,1,0,0,0,4496,4500,1,0,0,0,4497,4499,
3,754,377,0,4498,4497,1,0,0,0,4499,4502,1,0,0,0,4500,4498,1,0,0,0,4500,4501,
1,0,0,0,4501,739,1,0,0,0,4502,4500,1,0,0,0,4503,4505,5,326,0,0,4504,4503,
1,0,0,0,4504,4505,1,0,0,0,4505,4506,1,0,0,0,4506,4508,7,41,0,0,4507,4509,
5,259,0,0,4508,4507,1,0,0,0,4508,4509,1,0,0,0,4509,4511,1,0,0,0,4510,4512,
3,1090,545,0,4511,4510,1,0,0,0,4512,4513,1,0,0,0,4513,4511,1,0,0,0,4513,
4514,1,0,0,0,4514,741,1,0,0,0,4515,4517,5,72,0,0,4516,4515,1,0,0,0,4516,
4517,1,0,0,0,4517,4518,1,0,0,0,4518,4520,5,428,0,0,4519,4521,5,254,0,0,4520,
4519,1,0,0,0,4520,4521,1,0,0,0,4521,4523,1,0,0,0,4522,4524,3,1114,557,0,
4523,4522,1,0,0,0,4524,4525,1,0,0,0,4525,4523,1,0,0,0,4525,4526,1,0,0,0,
4526,4528,1,0,0,0,4527,4529,3,744,372,0,4528,4527,1,0,0,0,4528,4529,1,0,
0,0,4529,4531,1,0,0,0,4530,4532,3,746,373,0,4531,4530,1,0,0,0,4531,4532,
1,0,0,0,4532,743,1,0,0,0,4533,4535,5,212,0,0,4534,4533,1,0,0,0,4534,4535,
1,0,0,0,4535,4536,1,0,0,0,4536,4537,5,14,0,0,4537,4538,5,254,0,0,4538,4539,
3,1114,557,0,4539,745,1,0,0,0,4540,4542,5,212,0,0,4541,4540,1,0,0,0,4541,
4542,1,0,0,0,4542,4543,1,0,0,0,4543,4545,5,304,0,0,4544,4546,5,254,0,0,4545,
4544,1,0,0,0,4545,4546,1,0,0,0,4546,4547,1,0,0,0,4547,4548,3,1114,557,0,
4548,747,1,0,0,0,4549,4551,5,506,0,0,4550,4552,3,1134,567,0,4551,4550,1,
0,0,0,4552,4553,1,0,0,0,4553,4551,1,0,0,0,4553,4554,1,0,0,0,4554,749,1,0,
0,0,4555,4556,5,334,0,0,4556,4558,5,356,0,0,4557,4559,5,254,0,0,4558,4557,
1,0,0,0,4558,4559,1,0,0,0,4559,4560,1,0,0,0,4560,4562,3,1150,575,0,4561,
4563,3,752,376,0,4562,4561,1,0,0,0,4562,4563,1,0,0,0,4563,751,1,0,0,0,4564,
4565,7,4,0,0,4565,4566,3,1150,575,0,4566,753,1,0,0,0,4567,4569,5,222,0,0,
4568,4570,3,756,378,0,4569,4568,1,0,0,0,4570,4571,1,0,0,0,4571,4569,1,0,
0,0,4571,4572,1,0,0,0,4572,755,1,0,0,0,4573,4583,3,1134,567,0,4574,4584,
5,286,0,0,4575,4584,5,415,0,0,4576,4577,5,310,0,0,4577,4584,5,407,0,0,4578,
4584,5,106,0,0,4579,4584,5,387,0,0,4580,4581,5,514,0,0,4581,4582,5,391,0,
0,4582,4584,5,106,0,0,4583,4574,1,0,0,0,4583,4575,1,0,0,0,4583,4576,1,0,
0,0,4583,4578,1,0,0,0,4583,4579,1,0,0,0,4583,4580,1,0,0,0,4583,4584,1,0,
0,0,4584,757,1,0,0,0,4585,4587,5,300,0,0,4586,4588,5,9,0,0,4587,4586,1,0,
0,0,4587,4588,1,0,0,0,4588,4591,1,0,0,0,4589,4592,3,760,380,0,4590,4592,
3,764,382,0,4591,4589,1,0,0,0,4591,4590,1,0,0,0,4592,759,1,0,0,0,4593,4594,
3,762,381,0,4594,4596,5,489,0,0,4595,4597,3,1074,537,0,4596,4595,1,0,0,0,
4597,4598,1,0,0,0,4598,4596,1,0,0,0,4598,4599,1,0,0,0,4599,761,1,0,0,0,4600,
4603,3,1074,537,0,4601,4603,3,1172,586,0,4602,4600,1,0,0,0,4602,4601,1,0,
0,0,4603,763,1,0,0,0,4604,4605,7,50,0,0,4605,4606,3,766,383,0,4606,4608,
5,489,0,0,4607,4609,3,1074,537,0,4608,4607,1,0,0,0,4609,4610,1,0,0,0,4610,
4608,1,0,0,0,4610,4611,1,0,0,0,4611,765,1,0,0,0,4612,4613,3,1074,537,0,4613,
767,1,0,0,0,4614,4617,5,302,0,0,4615,4618,3,1074,537,0,4616,4618,3,1172,
586,0,4617,4615,1,0,0,0,4617,4616,1,0,0,0,4618,4619,1,0,0,0,4619,4622,5,
49,0,0,4620,4623,3,770,385,0,4621,4623,3,774,387,0,4622,4620,1,0,0,0,4622,
4621,1,0,0,0,4623,4625,1,0,0,0,4624,4626,3,1024,512,0,4625,4624,1,0,0,0,
4625,4626,1,0,0,0,4626,4628,1,0,0,0,4627,4629,3,1026,513,0,4628,4627,1,0,
0,0,4628,4629,1,0,0,0,4629,4631,1,0,0,0,4630,4632,5,167,0,0,4631,4630,1,
0,0,0,4631,4632,1,0,0,0,4632,769,1,0,0,0,4633,4635,3,772,386,0,4634,4633,
1,0,0,0,4635,4636,1,0,0,0,4636,4634,1,0,0,0,4636,4637,1,0,0,0,4637,771,1,
0,0,0,4638,4640,3,1074,537,0,4639,4641,5,412,0,0,4640,4639,1,0,0,0,4640,
4641,1,0,0,0,4641,773,1,0,0,0,4642,4643,3,776,388,0,4643,4645,5,222,0,0,
4644,4646,3,778,389,0,4645,4644,1,0,0,0,4646,4647,1,0,0,0,4647,4645,1,0,
0,0,4647,4648,1,0,0,0,4648,775,1,0,0,0,4649,4652,3,1074,537,0,4650,4652,
3,1172,586,0,4651,4649,1,0,0,0,4651,4650,1,0,0,0,4652,777,1,0,0,0,4653,4655,
3,1074,537,0,4654,4656,5,412,0,0,4655,4654,1,0,0,0,4655,4656,1,0,0,0,4656,
779,1,0,0,0,4657,4662,5,327,0,0,4658,4663,3,782,391,0,4659,4663,3,786,393,
0,4660,4663,3,790,395,0,4661,4663,3,792,396,0,4662,4658,1,0,0,0,4662,4659,
1,0,0,0,4662,4660,1,0,0,0,4662,4661,1,0,0,0,4663,4664,1,0,0,0,4664,4662,
1,0,0,0,4664,4665,1,0,0,0,4665,781,1,0,0,0,4666,4668,5,246,0,0,4667,4669,
3,784,392,0,4668,4667,1,0,0,0,4669,4670,1,0,0,0,4670,4668,1,0,0,0,4670,4671,
1,0,0,0,4671,783,1,0,0,0,4672,4679,3,1134,567,0,4673,4680,5,406,0,0,4674,
4676,5,514,0,0,4675,4674,1,0,0,0,4675,4676,1,0,0,0,4676,4677,1,0,0,0,4677,
4678,5,310,0,0,4678,4680,5,407,0,0,4679,4673,1,0,0,0,4679,4675,1,0,0,0,4679,
4680,1,0,0,0,4680,785,1,0,0,0,4681,4683,5,334,0,0,4682,4684,3,788,394,0,
4683,4682,1,0,0,0,4684,4685,1,0,0,0,4685,4683,1,0,0,0,4685,4686,1,0,0,0,
4686,787,1,0,0,0,4687,4693,3,1134,567,0,4688,4690,5,514,0,0,4689,4688,1,
0,0,0,4689,4690,1,0,0,0,4690,4691,1,0,0,0,4691,4692,5,310,0,0,4692,4694,
5,407,0,0,4693,4689,1,0,0,0,4693,4694,1,0,0,0,4694,789,1,0,0,0,4695,4697,
5,232,0,0,4696,4698,3,1134,567,0,4697,4696,1,0,0,0,4698,4699,1,0,0,0,4699,
4697,1,0,0,0,4699,4700,1,0,0,0,4700,791,1,0,0,0,4701,4703,5,201,0,0,4702,
4704,3,1134,567,0,4703,4702,1,0,0,0,4704,4705,1,0,0,0,4705,4703,1,0,0,0,
4705,4706,1,0,0,0,4706,793,1,0,0,0,4707,4710,5,343,0,0,4708,4711,3,796,398,
0,4709,4711,3,798,399,0,4710,4708,1,0,0,0,4710,4709,1,0,0,0,4711,795,1,0,
0,0,4712,4714,3,800,400,0,4713,4712,1,0,0,0,4713,4714,1,0,0,0,4714,4718,
1,0,0,0,4715,4717,3,536,268,0,4716,4715,1,0,0,0,4717,4720,1,0,0,0,4718,4716,
1,0,0,0,4718,4719,1,0,0,0,4719,4721,1,0,0,0,4720,4718,1,0,0,0,4721,4722,
5,169,0,0,4722,797,1,0,0,0,4723,4726,3,1150,575,0,4724,4725,7,4,0,0,4725,
4727,3,1150,575,0,4726,4724,1,0,0,0,4726,4727,1,0,0,0,4727,4729,1,0,0,0,
4728,4730,3,800,400,0,4729,4728,1,0,0,0,4729,4730,1,0,0,0,4730,799,1,0,0,
0,4731,4735,3,802,401,0,4732,4735,3,804,402,0,4733,4735,3,806,403,0,4734,
4731,1,0,0,0,4734,4732,1,0,0,0,4734,4733,1,0,0,0,4735,801,1,0,0,0,4736,4739,
3,1074,537,0,4737,4739,3,1178,589,0,4738,4736,1,0,0,0,4738,4737,1,0,0,0,
4739,4740,1,0,0,0,4740,4741,5,487,0,0,4741,803,1,0,0,0,4742,4744,3,818,409,
0,4743,4742,1,0,0,0,4743,4744,1,0,0,0,4744,4745,1,0,0,0,4745,4746,5,501,
0,0,4746,4747,3,1046,523,0,4747,805,1,0,0,0,4748,4749,3,818,409,0,4749,4750,
3,808,404,0,4750,4756,1,0,0,0,4751,4753,3,808,404,0,4752,4754,3,818,409,
0,4753,4752,1,0,0,0,4753,4754,1,0,0,0,4754,4756,1,0,0,0,4755,4748,1,0,0,
0,4755,4751,1,0,0,0,4756,807,1,0,0,0,4757,4758,5,509,0,0,4758,4762,3,810,
405,0,4759,4761,3,812,406,0,4760,4759,1,0,0,0,4761,4764,1,0,0,0,4762,4760,
1,0,0,0,4762,4763,1,0,0,0,4763,809,1,0,0,0,4764,4762,1,0,0,0,4765,4768,3,
1074,537,0,4766,4768,3,1172,586,0,4767,4765,1,0,0,0,4767,4766,1,0,0,0,4768,
4769,1,0,0,0,4769,4770,3,814,407,0,4770,4771,3,816,408,0,4771,4772,3,804,
402,0,4772,811,1,0,0,0,4773,4774,5,7,0,0,4774,4775,3,810,405,0,4775,813,
1,0,0,0,4776,4780,5,215,0,0,4777,4781,3,1074,537,0,4778,4781,3,1172,586,
0,4779,4781,3,1032,516,0,4780,4777,1,0,0,0,4780,4778,1,0,0,0,4780,4779,1,
0,0,0,4781,815,1,0,0,0,4782,4786,5,49,0,0,4783,4787,3,1074,537,0,4784,4787,
3,1172,586,0,4785,4787,3,1032,516,0,4786,4783,1,0,0,0,4786,4784,1,0,0,0,
4786,4785,1,0,0,0,4787,817,1,0,0,0,4788,4790,5,514,0,0,4789,4788,1,0,0,0,
4789,4790,1,0,0,0,4790,4791,1,0,0,0,4791,4792,5,477,0,0,4792,4793,7,56,0,
0,4793,819,1,0,0,0,4794,4796,5,365,0,0,4795,4797,3,1120,560,0,4796,4795,
1,0,0,0,4797,4798,1,0,0,0,4798,4796,1,0,0,0,4798,4799,1,0,0,0,4799,821,1,
0,0,0,4800,4801,5,374,0,0,4801,4803,3,1134,567,0,4802,4804,5,309,0,0,4803,
4802,1,0,0,0,4803,4804,1,0,0,0,4804,4806,1,0,0,0,4805,4807,5,377,0,0,4806,
4805,1,0,0,0,4806,4807,1,0,0,0,4807,4809,1,0,0,0,4808,4810,3,824,412,0,4809,
4808,1,0,0,0,4809,4810,1,0,0,0,4810,4812,1,0,0,0,4811,4813,3,826,413,0,4812,
4811,1,0,0,0,4812,4813,1,0,0,0,4813,4815,1,0,0,0,4814,4816,3,828,414,0,4815,
4814,1,0,0,0,4815,4816,1,0,0,0,4816,4818,1,0,0,0,4817,4819,3,1016,508,0,
4818,4817,1,0,0,0,4818,4819,1,0,0,0,4819,4821,1,0,0,0,4820,4822,3,1018,509,
0,4821,4820,1,0,0,0,4821,4822,1,0,0,0,4822,4824,1,0,0,0,4823,4825,3,1012,
506,0,4824,4823,1,0,0,0,4824,4825,1,0,0,0,4825,4827,1,0,0,0,4826,4828,3,
1014,507,0,4827,4826,1,0,0,0,4827,4828,1,0,0,0,4828,4830,1,0,0,0,4829,4831,
5,170,0,0,4830,4829,1,0,0,0,4830,4831,1,0,0,0,4831,823,1,0,0,0,4832,4833,
5,251,0,0,4833,4834,3,1074,537,0,4834,825,1,0,0,0,4835,4837,5,514,0,0,4836,
4835,1,0,0,0,4836,4837,1,0,0,0,4837,4841,1,0,0,0,4838,4839,7,57,0,0,4839,
4842,5,286,0,0,4840,4842,5,511,0,0,4841,4838,1,0,0,0,4841,4840,1,0,0,0,4842,
827,1,0,0,0,4843,4845,5,259,0,0,4844,4846,5,254,0,0,4845,4844,1,0,0,0,4845,
4846,1,0,0,0,4846,4847,1,0,0,0,4847,4848,3,1090,545,0,4848,829,1,0,0,0,4849,
4852,5,375,0,0,4850,4853,3,832,416,0,4851,4853,3,836,418,0,4852,4850,1,0,
0,0,4852,4851,1,0,0,0,4853,4855,1,0,0,0,4854,4856,3,1028,514,0,4855,4854,
1,0,0,0,4855,4856,1,0,0,0,4856,4858,1,0,0,0,4857,4859,3,1030,515,0,4858,
4857,1,0,0,0,4858,4859,1,0,0,0,4859,4861,1,0,0,0,4860,4862,5,171,0,0,4861,
4860,1,0,0,0,4861,4862,1,0,0,0,4862,831,1,0,0,0,4863,4864,3,1128,564,0,4864,
4865,5,215,0,0,4865,4873,3,834,417,0,4866,4872,3,842,421,0,4867,4872,3,844,
422,0,4868,4872,3,846,423,0,4869,4872,3,848,424,0,4870,4872,3,850,425,0,
4871,4866,1,0,0,0,4871,4867,1,0,0,0,4871,4868,1,0,0,0,4871,4869,1,0,0,0,
4871,4870,1,0,0,0,4872,4875,1,0,0,0,4873,4871,1,0,0,0,4873,4874,1,0,0,0,
4874,833,1,0,0,0,4875,4873,1,0,0,0,4876,4877,5,481,0,0,4877,4883,3,1128,
564,0,4878,4879,5,263,0,0,4879,4883,5,481,0,0,4880,4881,5,20,0,0,4881,4883,
5,481,0,0,4882,4876,1,0,0,0,4882,4878,1,0,0,0,4882,4880,1,0,0,0,4883,835,
1,0,0,0,4884,4885,3,1120,560,0,4885,4887,7,58,0,0,4886,4888,5,251,0,0,4887,
4886,1,0,0,0,4887,4888,1,0,0,0,4888,4889,1,0,0,0,4889,4891,3,1074,537,0,
4890,4892,3,838,419,0,4891,4890,1,0,0,0,4891,4892,1,0,0,0,4892,4894,1,0,
0,0,4893,4895,3,840,420,0,4894,4893,1,0,0,0,4894,4895,1,0,0,0,4895,837,1,
0,0,0,4896,4897,5,310,0,0,4897,4901,5,109,0,0,4898,4900,3,536,268,0,4899,
4898,1,0,0,0,4900,4903,1,0,0,0,4901,4899,1,0,0,0,4901,4902,1,0,0,0,4902,
839,1,0,0,0,4903,4901,1,0,0,0,4904,4905,5,514,0,0,4905,4909,5,109,0,0,4906,
4908,3,536,268,0,4907,4906,1,0,0,0,4908,4911,1,0,0,0,4909,4907,1,0,0,0,4909,
4910,1,0,0,0,4910,841,1,0,0,0,4911,4909,1,0,0,0,4912,4914,5,39,0,0,4913,
4915,5,485,0,0,4914,4913,1,0,0,0,4914,4915,1,0,0,0,4915,4918,1,0,0,0,4916,
4919,3,1176,588,0,4917,4919,3,1074,537,0,4918,4916,1,0,0,0,4918,4917,1,0,
0,0,4919,843,1,0,0,0,4920,4922,5,514,0,0,4921,4920,1,0,0,0,4921,4922,1,0,
0,0,4922,4923,1,0,0,0,4923,4924,5,310,0,0,4924,4925,5,511,0,0,4925,845,1,
0,0,0,4926,4928,5,481,0,0,4927,4929,5,239,0,0,4928,4927,1,0,0,0,4928,4929,
1,0,0,0,4929,4930,1,0,0,0,4930,4931,3,1128,564,0,4931,847,1,0,0,0,4932,4934,
5,439,0,0,4933,4935,5,239,0,0,4934,4933,1,0,0,0,4934,4935,1,0,0,0,4935,4938,
1,0,0,0,4936,4939,3,1176,588,0,4937,4939,3,1074,537,0,4938,4936,1,0,0,0,
4938,4937,1,0,0,0,4939,849,1,0,0,0,4940,4942,5,457,0,0,4941,4943,5,239,0,
0,4942,4941,1,0,0,0,4942,4943,1,0,0,0,4943,4944,1,0,0,0,4944,4945,3,1074,
537,0,4945,851,1,0,0,0,4946,4947,5,387,0,0,4947,4950,3,1154,577,0,4948,4949,
5,215,0,0,4949,4951,3,1090,545,0,4950,4948,1,0,0,0,4950,4951,1,0,0,0,4951,
853,1,0,0,0,4952,4953,5,403,0,0,4953,4955,3,1134,567,0,4954,4956,5,377,0,
0,4955,4954,1,0,0,0,4955,4956,1,0,0,0,4956,4958,1,0,0,0,4957,4959,3,856,
428,0,4958,4957,1,0,0,0,4958,4959,1,0,0,0,4959,4960,1,0,0,0,4960,4962,3,
1012,506,0,4961,4963,3,1014,507,0,4962,4961,1,0,0,0,4962,4963,1,0,0,0,4963,
4965,1,0,0,0,4964,4966,5,172,0,0,4965,4964,1,0,0,0,4965,4966,1,0,0,0,4966,
855,1,0,0,0,4967,4968,5,251,0,0,4968,4969,3,1090,545,0,4969,857,1,0,0,0,
4970,4971,5,408,0,0,4971,4973,3,1154,577,0,4972,4974,3,860,430,0,4973,4972,
1,0,0,0,4973,4974,1,0,0,0,4974,4976,1,0,0,0,4975,4977,3,1016,508,0,4976,
4975,1,0,0,0,4976,4977,1,0,0,0,4977,4979,1,0,0,0,4978,4980,3,1018,509,0,
4979,4978,1,0,0,0,4979,4980,1,0,0,0,4980,4982,1,0,0,0,4981,4983,5,173,0,
0,4982,4981,1,0,0,0,4982,4983,1,0,0,0,4983,859,1,0,0,0,4984,4985,5,215,0,
0,4985,4986,3,1074,537,0,4986,861,1,0,0,0,4987,4989,5,418,0,0,4988,4990,
5,9,0,0,4989,4988,1,0,0,0,4989,4990,1,0,0,0,4990,4991,1,0,0,0,4991,4993,
3,1090,545,0,4992,4994,3,864,432,0,4993,4992,1,0,0,0,4993,4994,1,0,0,0,4994,
4996,1,0,0,0,4995,4997,3,1012,506,0,4996,4995,1,0,0,0,4996,4997,1,0,0,0,
4997,4999,1,0,0,0,4998,5000,3,866,433,0,4999,4998,1,0,0,0,5000,5001,1,0,
0,0,5001,4999,1,0,0,0,5001,5002,1,0,0,0,5002,5004,1,0,0,0,5003,5005,5,174,
0,0,5004,5003,1,0,0,0,5004,5005,1,0,0,0,5005,863,1,0,0,0,5006,5007,5,509,
0,0,5007,5008,3,1090,545,0,5008,865,1,0,0,0,5009,5010,5,512,0,0,5010,5019,
3,1046,523,0,5011,5012,5,309,0,0,5012,5020,5,426,0,0,5013,5015,3,536,268,
0,5014,5013,1,0,0,0,5015,5018,1,0,0,0,5016,5014,1,0,0,0,5016,5017,1,0,0,
0,5017,5020,1,0,0,0,5018,5016,1,0,0,0,5019,5011,1,0,0,0,5019,5016,1,0,0,
0,5020,867,1,0,0,0,5021,5024,5,425,0,0,5022,5025,3,870,435,0,5023,5025,3,
872,436,0,5024,5022,1,0,0,0,5024,5023,1,0,0,0,5025,5027,1,0,0,0,5026,5028,
3,1028,514,0,5027,5026,1,0,0,0,5027,5028,1,0,0,0,5028,5030,1,0,0,0,5029,
5031,3,1030,515,0,5030,5029,1,0,0,0,5030,5031,1,0,0,0,5031,869,1,0,0,0,5032,
5035,3,1074,537,0,5033,5035,3,1172,586,0,5034,5032,1,0,0,0,5034,5033,1,0,
0,0,5035,5037,1,0,0,0,5036,5038,3,874,437,0,5037,5036,1,0,0,0,5037,5038,
1,0,0,0,5038,5040,1,0,0,0,5039,5041,3,876,438,0,5040,5039,1,0,0,0,5040,5041,
1,0,0,0,5041,5043,1,0,0,0,5042,5044,3,878,439,0,5043,5042,1,0,0,0,5043,5044,
1,0,0,0,5044,5046,1,0,0,0,5045,5047,3,880,440,0,5046,5045,1,0,0,0,5046,5047,
1,0,0,0,5047,871,1,0,0,0,5048,5049,5,489,0,0,5049,5050,7,59,0,0,5050,5051,
3,1074,537,0,5051,873,1,0,0,0,5052,5053,5,215,0,0,5053,5054,3,1074,537,0,
5054,875,1,0,0,0,5055,5060,5,514,0,0,5056,5061,5,153,0,0,5057,5061,5,155,
0,0,5058,5061,5,192,0,0,5059,5061,3,1074,537,0,5060,5056,1,0,0,0,5060,5057,
1,0,0,0,5060,5058,1,0,0,0,5060,5059,1,0,0,0,5061,877,1,0,0,0,5062,5064,5,
394,0,0,5063,5065,5,279,0,0,5064,5063,1,0,0,0,5064,5065,1,0,0,0,5065,879,
1,0,0,0,5066,5068,7,56,0,0,5067,5069,5,6,0,0,5068,5067,1,0,0,0,5068,5069,
1,0,0,0,5069,5073,1,0,0,0,5070,5074,3,882,441,0,5071,5074,3,884,442,0,5072,
5074,3,886,443,0,5073,5070,1,0,0,0,5073,5071,1,0,0,0,5073,5072,1,0,0,0,5074,
881,1,0,0,0,5075,5076,5,340,0,0,5076,883,1,0,0,0,5077,5080,3,1074,537,0,
5078,5080,3,1172,586,0,5079,5077,1,0,0,0,5079,5078,1,0,0,0,5080,5082,1,0,
0,0,5081,5083,7,33,0,0,5082,5081,1,0,0,0,5082,5083,1,0,0,0,5083,885,1,0,
0,0,5084,5085,3,1146,573,0,5085,887,1,0,0,0,5086,5093,5,430,0,0,5087,5089,
3,890,445,0,5088,5087,1,0,0,0,5089,5090,1,0,0,0,5090,5088,1,0,0,0,5090,5091,
1,0,0,0,5091,5094,1,0,0,0,5092,5094,3,892,446,0,5093,5088,1,0,0,0,5093,5092,
1,0,0,0,5094,889,1,0,0,0,5095,5097,3,894,447,0,5096,5095,1,0,0,0,5097,5098,
1,0,0,0,5098,5096,1,0,0,0,5098,5099,1,0,0,0,5099,5100,1,0,0,0,5100,5102,
5,489,0,0,5101,5103,3,896,448,0,5102,5101,1,0,0,0,5103,5104,1,0,0,0,5104,
5102,1,0,0,0,5104,5105,1,0,0,0,5105,891,1,0,0,0,5106,5108,3,894,447,0,5107,
5106,1,0,0,0,5108,5109,1,0,0,0,5109,5107,1,0,0,0,5109,5110,1,0,0,0,5110,
5115,1,0,0,0,5111,5112,5,502,0,0,5112,5116,5,49,0,0,5113,5114,5,148,0,0,
5114,5116,5,49,0,0,5115,5111,1,0,0,0,5115,5113,1,0,0,0,5116,5117,1,0,0,0,
5117,5118,3,898,449,0,5118,893,1,0,0,0,5119,5120,3,1074,537,0,5120,895,1,
0,0,0,5121,5131,5,326,0,0,5122,5131,5,324,0,0,5123,5126,5,182,0,0,5124,5127,
3,1074,537,0,5125,5127,3,1172,586,0,5126,5124,1,0,0,0,5126,5125,1,0,0,0,
5127,5131,1,0,0,0,5128,5131,3,1074,537,0,5129,5131,3,1172,586,0,5130,5121,
1,0,0,0,5130,5122,1,0,0,0,5130,5123,1,0,0,0,5130,5128,1,0,0,0,5130,5129,
1,0,0,0,5131,897,1,0,0,0,5132,5135,3,1074,537,0,5133,5135,3,1172,586,0,5134,
5132,1,0,0,0,5134,5133,1,0,0,0,5135,899,1,0,0,0,5136,5137,5,440,0,0,5137,
5139,3,1134,567,0,5138,5140,3,902,451,0,5139,5138,1,0,0,0,5140,5141,1,0,
0,0,5141,5139,1,0,0,0,5141,5142,1,0,0,0,5142,5144,1,0,0,0,5143,5145,3,904,
452,0,5144,5143,1,0,0,0,5144,5145,1,0,0,0,5145,5147,1,0,0,0,5146,5148,3,
906,453,0,5147,5146,1,0,0,0,5147,5148,1,0,0,0,5148,5150,1,0,0,0,5149,5151,
3,912,456,0,5150,5149,1,0,0,0,5150,5151,1,0,0,0,5151,5155,1,0,0,0,5152,5154,
3,916,458,0,5153,5152,1,0,0,0,5154,5157,1,0,0,0,5155,5153,1,0,0,0,5155,5156,
1,0,0,0,5156,5159,1,0,0,0,5157,5155,1,0,0,0,5158,5160,3,918,459,0,5159,5158,
1,0,0,0,5159,5160,1,0,0,0,5160,5164,1,0,0,0,5161,5163,3,922,461,0,5162,5161,
1,0,0,0,5163,5166,1,0,0,0,5164,5162,1,0,0,0,5164,5165,1,0,0,0,5165,901,1,
0,0,0,5166,5164,1,0,0,0,5167,5169,5,326,0,0,5168,5167,1,0,0,0,5168,5169,
1,0,0,0,5169,5170,1,0,0,0,5170,5172,7,41,0,0,5171,5173,5,259,0,0,5172,5171,
1,0,0,0,5172,5173,1,0,0,0,5173,5175,1,0,0,0,5174,5176,3,1090,545,0,5175,
5174,1,0,0,0,5176,5177,1,0,0,0,5177,5175,1,0,0,0,5177,5178,1,0,0,0,5178,
903,1,0,0,0,5179,5181,5,514,0,0,5180,5179,1,0,0,0,5180,5181,1,0,0,0,5181,
5182,1,0,0,0,5182,5184,5,149,0,0,5183,5185,5,239,0,0,5184,5183,1,0,0,0,5184,
5185,1,0,0,0,5185,5187,1,0,0,0,5186,5188,5,330,0,0,5187,5186,1,0,0,0,5187,
5188,1,0,0,0,5188,905,1,0,0,0,5189,5191,5,72,0,0,5190,5189,1,0,0,0,5190,
5191,1,0,0,0,5191,5192,1,0,0,0,5192,5194,5,428,0,0,5193,5195,5,254,0,0,5194,
5193,1,0,0,0,5194,5195,1,0,0,0,5195,5197,1,0,0,0,5196,5198,3,1114,557,0,
5197,5196,1,0,0,0,5198,5199,1,0,0,0,5199,5197,1,0,0,0,5199,5200,1,0,0,0,
5200,5202,1,0,0,0,5201,5203,3,908,454,0,5202,5201,1,0,0,0,5202,5203,1,0,
0,0,5203,5205,1,0,0,0,5204,5206,3,910,455,0,5205,5204,1,0,0,0,5205,5206,
1,0,0,0,5206,907,1,0,0,0,5207,5209,5,212,0,0,5208,5207,1,0,0,0,5208,5209,
1,0,0,0,5209,5210,1,0,0,0,5210,5211,5,14,0,0,5211,5212,5,254,0,0,5212,5213,
3,1114,557,0,5213,909,1,0,0,0,5214,5216,5,212,0,0,5215,5214,1,0,0,0,5215,
5216,1,0,0,0,5216,5217,1,0,0,0,5217,5219,5,304,0,0,5218,5220,5,254,0,0,5219,
5218,1,0,0,0,5219,5220,1,0,0,0,5220,5221,1,0,0,0,5221,5222,3,1114,557,0,
5222,911,1,0,0,0,5223,5224,5,246,0,0,5224,5226,5,356,0,0,5225,5227,5,254,
0,0,5226,5225,1,0,0,0,5226,5227,1,0,0,0,5227,5228,1,0,0,0,5228,5230,3,1150,
575,0,5229,5231,3,914,457,0,5230,5229,1,0,0,0,5230,5231,1,0,0,0,5231,913,
1,0,0,0,5232,5233,7,4,0,0,5233,5234,3,1150,575,0,5234,915,1,0,0,0,5235,5237,
5,506,0,0,5236,5238,3,1134,567,0,5237,5236,1,0,0,0,5238,5239,1,0,0,0,5239,
5237,1,0,0,0,5239,5240,1,0,0,0,5240,917,1,0,0,0,5241,5242,5,334,0,0,5242,
5244,5,356,0,0,5243,5245,5,254,0,0,5244,5243,1,0,0,0,5244,5245,1,0,0,0,5245,
5246,1,0,0,0,5246,5248,3,1150,575,0,5247,5249,3,920,460,0,5248,5247,1,0,
0,0,5248,5249,1,0,0,0,5249,919,1,0,0,0,5250,5251,7,4,0,0,5251,5252,3,1150,
575,0,5252,921,1,0,0,0,5253,5255,5,222,0,0,5254,5256,3,924,462,0,5255,5254,
1,0,0,0,5256,5257,1,0,0,0,5257,5255,1,0,0,0,5257,5258,1,0,0,0,5258,923,1,
0,0,0,5259,5269,3,1134,567,0,5260,5270,5,286,0,0,5261,5270,5,415,0,0,5262,
5263,5,310,0,0,5263,5270,5,407,0,0,5264,5270,5,106,0,0,5265,5270,5,387,0,
0,5266,5267,5,514,0,0,5267,5268,5,391,0,0,5268,5270,5,106,0,0,5269,5260,
1,0,0,0,5269,5261,1,0,0,0,5269,5262,1,0,0,0,5269,5264,1,0,0,0,5269,5265,
1,0,0,0,5269,5266,1,0,0,0,5269,5270,1,0,0,0,5270,925,1,0,0,0,5271,5272,5,
456,0,0,5272,5274,3,1134,567,0,5273,5275,3,928,464,0,5274,5273,1,0,0,0,5274,
5275,1,0,0,0,5275,5277,1,0,0,0,5276,5278,3,1016,508,0,5277,5276,1,0,0,0,
5277,5278,1,0,0,0,5278,5280,1,0,0,0,5279,5281,3,1018,509,0,5280,5279,1,0,
0,0,5280,5281,1,0,0,0,5281,5283,1,0,0,0,5282,5284,5,175,0,0,5283,5282,1,
0,0,0,5283,5284,1,0,0,0,5284,927,1,0,0,0,5285,5287,5,259,0,0,5286,5288,5,
254,0,0,5287,5286,1,0,0,0,5287,5288,1,0,0,0,5288,5316,1,0,0,0,5289,5291,
5,186,0,0,5290,5292,5,489,0,0,5291,5290,1,0,0,0,5291,5292,1,0,0,0,5292,5317,
1,0,0,0,5293,5317,5,536,0,0,5294,5296,5,225,0,0,5295,5297,5,479,0,0,5296,
5295,1,0,0,0,5296,5297,1,0,0,0,5297,5317,1,0,0,0,5298,5317,5,544,0,0,5299,
5300,5,312,0,0,5300,5302,5,271,0,0,5301,5303,5,479,0,0,5302,5301,1,0,0,0,
5302,5303,1,0,0,0,5303,5317,1,0,0,0,5304,5305,5,312,0,0,5305,5317,5,540,
0,0,5306,5308,5,225,0,0,5307,5309,5,479,0,0,5308,5307,1,0,0,0,5308,5309,
1,0,0,0,5309,5310,1,0,0,0,5310,5311,5,329,0,0,5311,5313,5,186,0,0,5312,5314,
5,489,0,0,5313,5312,1,0,0,0,5313,5314,1,0,0,0,5314,5317,1,0,0,0,5315,5317,
5,545,0,0,5316,5289,1,0,0,0,5316,5293,1,0,0,0,5316,5294,1,0,0,0,5316,5298,
1,0,0,0,5316,5299,1,0,0,0,5316,5304,1,0,0,0,5316,5306,1,0,0,0,5316,5315,
1,0,0,0,5317,5318,1,0,0,0,5318,5319,3,1090,545,0,5319,929,1,0,0,0,5320,5323,
5,458,0,0,5321,5324,5,413,0,0,5322,5324,3,1172,586,0,5323,5321,1,0,0,0,5323,
5322,1,0,0,0,5324,931,1,0,0,0,5325,5327,5,459,0,0,5326,5328,3,934,467,0,
5327,5326,1,0,0,0,5328,5329,1,0,0,0,5329,5327,1,0,0,0,5329,5330,1,0,0,0,
5330,5331,1,0,0,0,5331,5333,3,942,471,0,5332,5334,3,944,472,0,5333,5332,
1,0,0,0,5333,5334,1,0,0,0,5334,5336,1,0,0,0,5335,5337,3,1020,510,0,5336,
5335,1,0,0,0,5336,5337,1,0,0,0,5337,5339,1,0,0,0,5338,5340,3,1022,511,0,
5339,5338,1,0,0,0,5339,5340,1,0,0,0,5340,5342,1,0,0,0,5341,5343,5,176,0,
0,5342,5341,1,0,0,0,5342,5343,1,0,0,0,5343,933,1,0,0,0,5344,5346,3,936,468,
0,5345,5344,1,0,0,0,5346,5347,1,0,0,0,5347,5345,1,0,0,0,5347,5348,1,0,0,
0,5348,5351,1,0,0,0,5349,5352,3,938,469,0,5350,5352,3,940,470,0,5351,5349,
1,0,0,0,5351,5350,1,0,0,0,5352,935,1,0,0,0,5353,5356,3,1074,537,0,5354,5356,
3,1172,586,0,5355,5353,1,0,0,0,5355,5354,1,0,0,0,5356,937,1,0,0,0,5357,5359,
5,132,0,0,5358,5360,5,49,0,0,5359,5358,1,0,0,0,5359,5360,1,0,0,0,5360,5364,
1,0,0,0,5361,5365,5,439,0,0,5362,5365,3,1074,537,0,5363,5365,3,1172,586,
0,5364,5361,1,0,0,0,5364,5362,1,0,0,0,5364,5363,1,0,0,0,5365,939,1,0,0,0,
5366,5369,5,212,0,0,5367,5370,3,1074,537,0,5368,5370,3,1172,586,0,5369,5367,
1,0,0,0,5369,5368,1,0,0,0,5370,941,1,0,0,0,5371,5372,5,251,0,0,5372,5373,
3,1074,537,0,5373,943,1,0,0,0,5374,5376,5,514,0,0,5375,5374,1,0,0,0,5375,
5376,1,0,0,0,5376,5377,1,0,0,0,5377,5378,5,349,0,0,5378,5379,3,1090,545,
0,5379,945,1,0,0,0,5380,5384,5,463,0,0,5381,5385,3,948,474,0,5382,5385,3,
950,475,0,5383,5385,3,952,476,0,5384,5381,1,0,0,0,5384,5382,1,0,0,0,5384,
5383,1,0,0,0,5385,5387,1,0,0,0,5386,5388,3,1024,512,0,5387,5386,1,0,0,0,
5387,5388,1,0,0,0,5388,5390,1,0,0,0,5389,5391,3,1026,513,0,5390,5389,1,0,
0,0,5390,5391,1,0,0,0,5391,5393,1,0,0,0,5392,5394,5,177,0,0,5393,5392,1,
0,0,0,5393,5394,1,0,0,0,5394,947,1,0,0,0,5395,5397,3,954,477,0,5396,5395,
1,0,0,0,5397,5398,1,0,0,0,5398,5396,1,0,0,0,5398,5399,1,0,0,0,5399,5400,
1,0,0,0,5400,5402,5,215,0,0,5401,5403,3,956,478,0,5402,5401,1,0,0,0,5403,
5404,1,0,0,0,5404,5402,1,0,0,0,5404,5405,1,0,0,0,5405,949,1,0,0,0,5406,5408,
3,954,477,0,5407,5406,1,0,0,0,5408,5409,1,0,0,0,5409,5407,1,0,0,0,5409,5410,
1,0,0,0,5410,5411,1,0,0,0,5411,5412,5,215,0,0,5412,5413,3,958,479,0,5413,
5415,5,222,0,0,5414,5416,3,960,480,0,5415,5414,1,0,0,0,5416,5417,1,0,0,0,
5417,5415,1,0,0,0,5417,5418,1,0,0,0,5418,951,1,0,0,0,5419,5420,7,50,0,0,
5420,5421,3,1090,545,0,5421,5422,5,215,0,0,5422,5423,3,962,481,0,5423,953,
1,0,0,0,5424,5427,3,1074,537,0,5425,5427,3,1172,586,0,5426,5424,1,0,0,0,
5426,5425,1,0,0,0,5427,955,1,0,0,0,5428,5430,3,1074,537,0,5429,5431,5,412,
0,0,5430,5429,1,0,0,0,5430,5431,1,0,0,0,5431,957,1,0,0,0,5432,5435,3,1074,
537,0,5433,5435,3,1172,586,0,5434,5432,1,0,0,0,5434,5433,1,0,0,0,5435,959,
1,0,0,0,5436,5438,3,1074,537,0,5437,5439,5,412,0,0,5438,5437,1,0,0,0,5438,
5439,1,0,0,0,5439,961,1,0,0,0,5440,5442,3,1090,545,0,5441,5443,5,412,0,0,
5442,5441,1,0,0,0,5442,5443,1,0,0,0,5443,963,1,0,0,0,5444,5445,5,476,0,0,
5445,5446,3,1156,578,0,5446,965,1,0,0,0,5447,5448,5,500,0,0,5448,5449,3,
968,484,0,5449,5451,3,974,487,0,5450,5452,3,982,491,0,5451,5450,1,0,0,0,
5451,5452,1,0,0,0,5452,5454,1,0,0,0,5453,5455,3,984,492,0,5454,5453,1,0,
0,0,5454,5455,1,0,0,0,5455,5457,1,0,0,0,5456,5458,3,1020,510,0,5457,5456,
1,0,0,0,5457,5458,1,0,0,0,5458,5460,1,0,0,0,5459,5461,3,1022,511,0,5460,
5459,1,0,0,0,5460,5461,1,0,0,0,5461,5463,1,0,0,0,5462,5464,5,178,0,0,5463,
5462,1,0,0,0,5463,5464,1,0,0,0,5464,967,1,0,0,0,5465,5473,3,1074,537,0,5466,
5470,3,970,485,0,5467,5469,3,972,486,0,5468,5467,1,0,0,0,5469,5472,1,0,0,
0,5470,5468,1,0,0,0,5470,5471,1,0,0,0,5471,5474,1,0,0,0,5472,5470,1,0,0,
0,5473,5466,1,0,0,0,5473,5474,1,0,0,0,5474,969,1,0,0,0,5475,5477,5,132,0,
0,5476,5478,5,49,0,0,5477,5476,1,0,0,0,5477,5478,1,0,0,0,5478,5480,1,0,0,
0,5479,5481,5,9,0,0,5480,5479,1,0,0,0,5480,5481,1,0,0,0,5481,5484,1,0,0,
0,5482,5485,3,1074,537,0,5483,5485,3,1172,586,0,5484,5482,1,0,0,0,5484,5483,
1,0,0,0,5485,971,1,0,0,0,5486,5488,5,329,0,0,5487,5489,5,9,0,0,5488,5487,
1,0,0,0,5488,5489,1,0,0,0,5489,5492,1,0,0,0,5490,5493,3,1074,537,0,5491,
5493,3,1172,586,0,5492,5490,1,0,0,0,5492,5491,1,0,0,0,5493,973,1,0,0,0,5494,
5496,5,251,0,0,5495,5497,3,976,488,0,5496,5495,1,0,0,0,5497,5498,1,0,0,0,
5498,5496,1,0,0,0,5498,5499,1,0,0,0,5499,975,1,0,0,0,5500,5502,3,1074,537,
0,5501,5503,3,978,489,0,5502,5501,1,0,0,0,5502,5503,1,0,0,0,5503,5505,1,
0,0,0,5504,5506,3,980,490,0,5505,5504,1,0,0,0,5505,5506,1,0,0,0,5506,977,
1,0,0,0,5507,5509,5,133,0,0,5508,5510,5,239,0,0,5509,5508,1,0,0,0,5509,5510,
1,0,0,0,5510,5511,1,0,0,0,5511,5512,3,1074,537,0,5512,979,1,0,0,0,5513,5515,
5,105,0,0,5514,5516,5,239,0,0,5515,5514,1,0,0,0,5515,5516,1,0,0,0,5516,5517,
1,0,0,0,5517,5518,3,1074,537,0,5518,981,1,0,0,0,5519,5521,5,514,0,0,5520,
5519,1,0,0,0,5520,5521,1,0,0,0,5521,5522,1,0,0,0,5522,5523,5,349,0,0,5523,
5524,3,1090,545,0,5524,983,1,0,0,0,5525,5527,5,472,0,0,5526,5528,5,239,0,
0,5527,5526,1,0,0,0,5527,5528,1,0,0,0,5528,5529,1,0,0,0,5529,5530,3,1090,
545,0,5530,985,1,0,0,0,5531,5534,5,505,0,0,5532,5535,3,988,494,0,5533,5535,
3,992,496,0,5534,5532,1,0,0,0,5534,5533,1,0,0,0,5535,987,1,0,0,0,5536,5538,
5,223,0,0,5537,5536,1,0,0,0,5537,5538,1,0,0,0,5538,5539,1,0,0,0,5539,5541,
5,7,0,0,5540,5542,5,453,0,0,5541,5540,1,0,0,0,5541,5542,1,0,0,0,5542,5543,
1,0,0,0,5543,5544,7,60,0,0,5544,5546,5,356,0,0,5545,5547,5,326,0,0,5546,
5545,1,0,0,0,5546,5547,1,0,0,0,5547,5548,1,0,0,0,5548,5549,3,990,495,0,5549,
989,1,0,0,0,5550,5560,5,246,0,0,5551,5560,5,334,0,0,5552,5560,5,232,0,0,
5553,5560,5,201,0,0,5554,5556,3,1134,567,0,5555,5554,1,0,0,0,5556,5557,1,
0,0,0,5557,5555,1,0,0,0,5557,5558,1,0,0,0,5558,5560,1,0,0,0,5559,5550,1,
0,0,0,5559,5551,1,0,0,0,5559,5552,1,0,0,0,5559,5553,1,0,0,0,5559,5555,1,
0,0,0,5560,991,1,0,0,0,5561,5563,5,212,0,0,5562,5561,1,0,0,0,5562,5563,1,
0,0,0,5563,5564,1,0,0,0,5564,5566,5,125,0,0,5565,5567,5,326,0,0,5566,5565,
1,0,0,0,5566,5567,1,0,0,0,5567,5569,1,0,0,0,5568,5570,3,994,497,0,5569,5568,
1,0,0,0,5570,5571,1,0,0,0,5571,5569,1,0,0,0,5571,5572,1,0,0,0,5572,993,1,
0,0,0,5573,5574,5,9,0,0,5574,5586,5,358,0,0,5575,5577,5,9,0,0,5576,5578,
5,385,0,0,5577,5576,1,0,0,0,5577,5578,1,0,0,0,5578,5580,1,0,0,0,5579,5581,
5,323,0,0,5580,5579,1,0,0,0,5580,5581,1,0,0,0,5581,5582,1,0,0,0,5582,5586,
3,1074,537,0,5583,5586,3,1150,575,0,5584,5586,3,1134,567,0,5585,5573,1,0,
0,0,5585,5575,1,0,0,0,5585,5583,1,0,0,0,5585,5584,1,0,0,0,5586,995,1,0,0,
0,5587,5588,5,517,0,0,5588,5590,3,1154,577,0,5589,5591,3,998,499,0,5590,
5589,1,0,0,0,5590,5591,1,0,0,0,5591,5593,1,0,0,0,5592,5594,3,1000,500,0,
5593,5592,1,0,0,0,5593,5594,1,0,0,0,5594,5596,1,0,0,0,5595,5597,3,1008,504,
0,5596,5595,1,0,0,0,5596,5597,1,0,0,0,5597,5599,1,0,0,0,5598,5600,3,1010,
505,0,5599,5598,1,0,0,0,5599,5600,1,0,0,0,5600,5602,1,0,0,0,5601,5603,3,
1016,508,0,5602,5601,1,0,0,0,5602,5603,1,0,0,0,5603,5605,1,0,0,0,5604,5606,
3,1018,509,0,5605,5604,1,0,0,0,5605,5606,1,0,0,0,5606,5608,1,0,0,0,5607,
5609,5,179,0,0,5608,5607,1,0,0,0,5608,5609,1,0,0,0,5609,997,1,0,0,0,5610,
5613,5,215,0,0,5611,5614,3,1074,537,0,5612,5614,3,1172,586,0,5613,5611,1,
0,0,0,5613,5612,1,0,0,0,5614,999,1,0,0,0,5615,5617,7,56,0,0,5616,5618,5,
6,0,0,5617,5616,1,0,0,0,5617,5618,1,0,0,0,5618,5622,1,0,0,0,5619,5623,3,
1002,501,0,5620,5623,3,1004,502,0,5621,5623,3,1006,503,0,5622,5619,1,0,0,
0,5622,5620,1,0,0,0,5622,5621,1,0,0,0,5623,1001,1,0,0,0,5624,5625,5,340,
0,0,5625,1003,1,0,0,0,5626,5629,3,1074,537,0,5627,5629,3,1172,586,0,5628,
5626,1,0,0,0,5628,5627,1,0,0,0,5629,5631,1,0,0,0,5630,5632,7,33,0,0,5631,
5630,1,0,0,0,5631,5632,1,0,0,0,5632,1005,1,0,0,0,5633,5634,3,1146,573,0,
5634,1007,1,0,0,0,5635,5637,5,30,0,0,5636,5635,1,0,0,0,5636,5637,1,0,0,0,
5637,5638,1,0,0,0,5638,5642,7,61,0,0,5639,5641,3,536,268,0,5640,5639,1,0,
0,0,5641,5644,1,0,0,0,5642,5640,1,0,0,0,5642,5643,1,0,0,0,5643,1009,1,0,
0,0,5644,5642,1,0,0,0,5645,5647,5,312,0,0,5646,5648,5,30,0,0,5647,5646,1,
0,0,0,5647,5648,1,0,0,0,5648,5649,1,0,0,0,5649,5653,7,61,0,0,5650,5652,3,
536,268,0,5651,5650,1,0,0,0,5652,5655,1,0,0,0,5653,5651,1,0,0,0,5653,5654,
1,0,0,0,5654,1011,1,0,0,0,5655,5653,1,0,0,0,5656,5658,5,30,0,0,5657,5656,
1,0,0,0,5657,5658,1,0,0,0,5658,5659,1,0,0,0,5659,5663,5,158,0,0,5660,5662,
3,536,268,0,5661,5660,1,0,0,0,5662,5665,1,0,0,0,5663,5661,1,0,0,0,5663,5664,
1,0,0,0,5664,1013,1,0,0,0,5665,5663,1,0,0,0,5666,5668,5,312,0,0,5667,5669,
5,30,0,0,5668,5667,1,0,0,0,5668,5669,1,0,0,0,5669,5670,1,0,0,0,5670,5674,
5,158,0,0,5671,5673,3,536,268,0,5672,5671,1,0,0,0,5673,5676,1,0,0,0,5674,
5672,1,0,0,0,5674,5675,1,0,0,0,5675,1015,1,0,0,0,5676,5674,1,0,0,0,5677,
5679,5,252,0,0,5678,5680,5,259,0,0,5679,5678,1,0,0,0,5679,5680,1,0,0,0,5680,
5684,1,0,0,0,5681,5683,3,536,268,0,5682,5681,1,0,0,0,5683,5686,1,0,0,0,5684,
5682,1,0,0,0,5684,5685,1,0,0,0,5685,1017,1,0,0,0,5686,5684,1,0,0,0,5687,
5688,5,312,0,0,5688,5690,5,252,0,0,5689,5691,5,259,0,0,5690,5689,1,0,0,0,
5690,5691,1,0,0,0,5691,5695,1,0,0,0,5692,5694,3,536,268,0,5693,5692,1,0,
0,0,5694,5697,1,0,0,0,5695,5693,1,0,0,0,5695,5696,1,0,0,0,5696,1019,1,0,
0,0,5697,5695,1,0,0,0,5698,5700,5,326,0,0,5699,5698,1,0,0,0,5699,5700,1,
0,0,0,5700,5701,1,0,0,0,5701,5705,5,335,0,0,5702,5704,3,536,268,0,5703,5702,
1,0,0,0,5704,5707,1,0,0,0,5705,5703,1,0,0,0,5705,5706,1,0,0,0,5706,1021,
1,0,0,0,5707,5705,1,0,0,0,5708,5710,5,312,0,0,5709,5711,5,326,0,0,5710,5709,
1,0,0,0,5710,5711,1,0,0,0,5711,5712,1,0,0,0,5712,5716,5,335,0,0,5713,5715,
3,536,268,0,5714,5713,1,0,0,0,5715,5718,1,0,0,0,5716,5714,1,0,0,0,5716,5717,
1,0,0,0,5717,1023,1,0,0,0,5718,5716,1,0,0,0,5719,5721,5,326,0,0,5720,5719,
1,0,0,0,5720,5721,1,0,0,0,5721,5722,1,0,0,0,5722,5723,5,439,0,0,5723,5727,
5,188,0,0,5724,5726,3,536,268,0,5725,5724,1,0,0,0,5726,5729,1,0,0,0,5727,
5725,1,0,0,0,5727,5728,1,0,0,0,5728,1025,1,0,0,0,5729,5727,1,0,0,0,5730,
5732,5,312,0,0,5731,5733,5,326,0,0,5732,5731,1,0,0,0,5732,5733,1,0,0,0,5733,
5734,1,0,0,0,5734,5735,5,439,0,0,5735,5739,5,188,0,0,5736,5738,3,536,268,
0,5737,5736,1,0,0,0,5738,5741,1,0,0,0,5739,5737,1,0,0,0,5739,5740,1,0,0,
0,5740,1027,1,0,0,0,5741,5739,1,0,0,0,5742,5744,5,326,0,0,5743,5742,1,0,
0,0,5743,5744,1,0,0,0,5744,5745,1,0,0,0,5745,5749,5,196,0,0,5746,5748,3,
536,268,0,5747,5746,1,0,0,0,5748,5751,1,0,0,0,5749,5747,1,0,0,0,5749,5750,
1,0,0,0,5750,1029,1,0,0,0,5751,5749,1,0,0,0,5752,5754,5,312,0,0,5753,5755,
5,326,0,0,5754,5753,1,0,0,0,5754,5755,1,0,0,0,5755,5756,1,0,0,0,5756,5760,
5,196,0,0,5757,5759,3,536,268,0,5758,5757,1,0,0,0,5759,5762,1,0,0,0,5760,
5758,1,0,0,0,5760,5761,1,0,0,0,5761,1031,1,0,0,0,5762,5760,1,0,0,0,5763,
5767,3,1036,518,0,5764,5766,3,1034,517,0,5765,5764,1,0,0,0,5766,5769,1,0,
0,0,5767,5765,1,0,0,0,5767,5768,1,0,0,0,5768,1033,1,0,0,0,5769,5767,1,0,
0,0,5770,5771,7,62,0,0,5771,5772,3,1036,518,0,5772,1035,1,0,0,0,5773,5777,
3,1040,520,0,5774,5776,3,1038,519,0,5775,5774,1,0,0,0,5776,5779,1,0,0,0,
5777,5775,1,0,0,0,5777,5778,1,0,0,0,5778,1037,1,0,0,0,5779,5777,1,0,0,0,
5780,5781,7,63,0,0,5781,5782,3,1040,520,0,5782,1039,1,0,0,0,5783,5785,7,
62,0,0,5784,5783,1,0,0,0,5784,5785,1,0,0,0,5785,5786,1,0,0,0,5786,5790,3,
1044,522,0,5787,5789,3,1042,521,0,5788,5787,1,0,0,0,5789,5792,1,0,0,0,5790,
5788,1,0,0,0,5790,5791,1,0,0,0,5791,1041,1,0,0,0,5792,5790,1,0,0,0,5793,
5794,5,527,0,0,5794,5795,3,1044,522,0,5795,1043,1,0,0,0,5796,5797,5,542,
0,0,5797,5798,3,1032,516,0,5798,5799,5,549,0,0,5799,5803,1,0,0,0,5800,5803,
3,1074,537,0,5801,5803,3,1172,586,0,5802,5796,1,0,0,0,5802,5800,1,0,0,0,
5802,5801,1,0,0,0,5803,1045,1,0,0,0,5804,5808,3,1050,525,0,5805,5807,3,1048,
524,0,5806,5805,1,0,0,0,5807,5810,1,0,0,0,5808,5806,1,0,0,0,5808,5809,1,
0,0,0,5809,1047,1,0,0,0,5810,5808,1,0,0,0,5811,5818,7,64,0,0,5812,5819,3,
1050,525,0,5813,5815,3,1072,536,0,5814,5813,1,0,0,0,5815,5816,1,0,0,0,5816,
5814,1,0,0,0,5816,5817,1,0,0,0,5817,5819,1,0,0,0,5818,5812,1,0,0,0,5818,
5814,1,0,0,0,5819,1049,1,0,0,0,5820,5822,5,312,0,0,5821,5820,1,0,0,0,5821,
5822,1,0,0,0,5822,5823,1,0,0,0,5823,5824,3,1052,526,0,5824,1051,1,0,0,0,
5825,5826,5,542,0,0,5826,5827,3,1046,523,0,5827,5828,5,549,0,0,5828,5833,
1,0,0,0,5829,5833,3,1060,530,0,5830,5833,3,1054,527,0,5831,5833,3,1056,528,
0,5832,5825,1,0,0,0,5832,5829,1,0,0,0,5832,5830,1,0,0,0,5832,5831,1,0,0,
0,5833,1053,1,0,0,0,5834,5836,3,1074,537,0,5835,5837,5,254,0,0,5836,5835,
1,0,0,0,5836,5837,1,0,0,0,5837,5839,1,0,0,0,5838,5840,5,312,0,0,5839,5838,
1,0,0,0,5839,5840,1,0,0,0,5840,5848,1,0,0,0,5841,5849,5,316,0,0,5842,5849,
5,11,0,0,5843,5849,5,12,0,0,5844,5849,5,13,0,0,5845,5849,5,116,0,0,5846,
5849,5,257,0,0,5847,5849,3,1122,561,0,5848,5841,1,0,0,0,5848,5842,1,0,0,
0,5848,5843,1,0,0,0,5848,5844,1,0,0,0,5848,5845,1,0,0,0,5848,5846,1,0,0,
0,5848,5847,1,0,0,0,5849,1055,1,0,0,0,5850,5872,3,1126,563,0,5851,5853,3,
1102,551,0,5852,5851,1,0,0,0,5853,5856,1,0,0,0,5854,5852,1,0,0,0,5854,5855,
1,0,0,0,5855,5858,1,0,0,0,5856,5854,1,0,0,0,5857,5859,3,1104,552,0,5858,
5857,1,0,0,0,5858,5859,1,0,0,0,5859,5863,1,0,0,0,5860,5862,3,1058,529,0,
5861,5860,1,0,0,0,5862,5865,1,0,0,0,5863,5861,1,0,0,0,5863,5864,1,0,0,0,
5864,5873,1,0,0,0,5865,5863,1,0,0,0,5866,5868,3,1106,553,0,5867,5866,1,0,
0,0,5868,5871,1,0,0,0,5869,5867,1,0,0,0,5869,5870,1,0,0,0,5870,5873,1,0,
0,0,5871,5869,1,0,0,0,5872,5854,1,0,0,0,5872,5869,1,0,0,0,5873,1057,1,0,
0,0,5874,5875,5,542,0,0,5875,5882,3,1086,543,0,5876,5878,5,529,0,0,5877,
5876,1,0,0,0,5877,5878,1,0,0,0,5878,5879,1,0,0,0,5879,5881,3,1086,543,0,
5880,5877,1,0,0,0,5881,5884,1,0,0,0,5882,5880,1,0,0,0,5882,5883,1,0,0,0,
5883,5885,1,0,0,0,5884,5882,1,0,0,0,5885,5886,5,549,0,0,5886,1059,1,0,0,
0,5887,5891,3,1062,531,0,5888,5891,3,1064,532,0,5889,5891,3,1066,533,0,5890,
5887,1,0,0,0,5890,5888,1,0,0,0,5890,5889,1,0,0,0,5891,1061,1,0,0,0,5892,
5894,3,1032,516,0,5893,5895,5,254,0,0,5894,5893,1,0,0,0,5894,5895,1,0,0,
0,5895,5897,1,0,0,0,5896,5898,5,312,0,0,5897,5896,1,0,0,0,5897,5898,1,0,
0,0,5898,5899,1,0,0,0,5899,5900,7,65,0,0,5900,1063,1,0,0,0,5901,5902,3,1032,
516,0,5902,5903,3,1070,535,0,5903,5904,3,1032,516,0,5904,1065,1,0,0,0,5905,
5906,3,1032,516,0,5906,5907,3,1070,535,0,5907,5908,5,542,0,0,5908,5909,3,
1068,534,0,5909,5910,5,549,0,0,5910,1067,1,0,0,0,5911,5914,3,1032,516,0,
5912,5913,7,64,0,0,5913,5915,3,1032,516,0,5914,5912,1,0,0,0,5915,5916,1,
0,0,0,5916,5914,1,0,0,0,5916,5917,1,0,0,0,5917,1069,1,0,0,0,5918,5920,7,
8,0,0,5919,5918,1,0,0,0,5919,5920,1,0,0,0,5920,5962,1,0,0,0,5921,5923,5,
312,0,0,5922,5921,1,0,0,0,5922,5923,1,0,0,0,5923,5939,1,0,0,0,5924,5926,
5,225,0,0,5925,5927,5,479,0,0,5926,5925,1,0,0,0,5926,5927,1,0,0,0,5927,5940,
1,0,0,0,5928,5940,5,544,0,0,5929,5931,5,271,0,0,5930,5932,5,479,0,0,5931,
5930,1,0,0,0,5931,5932,1,0,0,0,5932,5940,1,0,0,0,5933,5940,5,540,0,0,5934,
5936,5,186,0,0,5935,5937,5,489,0,0,5936,5935,1,0,0,0,5936,5937,1,0,0,0,5937,
5940,1,0,0,0,5938,5940,5,536,0,0,5939,5924,1,0,0,0,5939,5928,1,0,0,0,5939,
5929,1,0,0,0,5939,5933,1,0,0,0,5939,5934,1,0,0,0,5939,5938,1,0,0,0,5940,
5963,1,0,0,0,5941,5963,5,546,0,0,5942,5944,5,225,0,0,5943,5945,5,479,0,0,
5944,5943,1,0,0,0,5944,5945,1,0,0,0,5945,5946,1,0,0,0,5946,5947,5,329,0,
0,5947,5949,5,186,0,0,5948,5950,5,489,0,0,5949,5948,1,0,0,0,5949,5950,1,
0,0,0,5950,5963,1,0,0,0,5951,5963,5,545,0,0,5952,5954,5,271,0,0,5953,5955,
5,479,0,0,5954,5953,1,0,0,0,5954,5955,1,0,0,0,5955,5956,1,0,0,0,5956,5957,
5,329,0,0,5957,5959,5,186,0,0,5958,5960,5,489,0,0,5959,5958,1,0,0,0,5959,
5960,1,0,0,0,5960,5963,1,0,0,0,5961,5963,5,541,0,0,5962,5922,1,0,0,0,5962,
5941,1,0,0,0,5962,5942,1,0,0,0,5962,5951,1,0,0,0,5962,5952,1,0,0,0,5962,
5961,1,0,0,0,5963,1071,1,0,0,0,5964,5966,5,312,0,0,5965,5964,1,0,0,0,5965,
5966,1,0,0,0,5966,5968,1,0,0,0,5967,5969,3,1070,535,0,5968,5967,1,0,0,0,
5968,5969,1,0,0,0,5969,5976,1,0,0,0,5970,5977,3,1032,516,0,5971,5972,5,542,
0,0,5972,5973,3,1032,516,0,5973,5974,3,1072,536,0,5974,5975,5,549,0,0,5975,
5977,1,0,0,0,5976,5970,1,0,0,0,5976,5971,1,0,0,0,5977,1073,1,0,0,0,5978,
5983,3,1090,545,0,5979,5983,3,1076,538,0,5980,5983,3,1078,539,0,5981,5983,
3,1186,593,0,5982,5978,1,0,0,0,5982,5979,1,0,0,0,5982,5980,1,0,0,0,5982,
5981,1,0,0,0,5983,1075,1,0,0,0,5984,6000,3,1090,545,0,5985,5986,5,542,0,
0,5986,5993,3,1086,543,0,5987,5989,5,529,0,0,5988,5987,1,0,0,0,5988,5989,
1,0,0,0,5989,5990,1,0,0,0,5990,5992,3,1086,543,0,5991,5988,1,0,0,0,5992,
5995,1,0,0,0,5993,5991,1,0,0,0,5993,5994,1,0,0,0,5994,5996,1,0,0,0,5995,
5993,1,0,0,0,5996,5997,5,549,0,0,5997,5999,1,0,0,0,5998,5985,1,0,0,0,5999,
6002,1,0,0,0,6000,5998,1,0,0,0,6000,6001,1,0,0,0,6001,6004,1,0,0,0,6002,
6000,1,0,0,0,6003,6005,3,1080,540,0,6004,6003,1,0,0,0,6004,6005,1,0,0,0,
6005,1077,1,0,0,0,6006,6007,5,217,0,0,6007,6023,3,1136,568,0,6008,6009,5,
542,0,0,6009,6016,3,1088,544,0,6010,6012,5,529,0,0,6011,6010,1,0,0,0,6011,
6012,1,0,0,0,6012,6013,1,0,0,0,6013,6015,3,1088,544,0,6014,6011,1,0,0,0,
6015,6018,1,0,0,0,6016,6014,1,0,0,0,6016,6017,1,0,0,0,6017,6019,1,0,0,0,
6018,6016,1,0,0,0,6019,6020,5,549,0,0,6020,6022,1,0,0,0,6021,6008,1,0,0,
0,6022,6025,1,0,0,0,6023,6021,1,0,0,0,6023,6024,1,0,0,0,6024,6027,1,0,0,
0,6025,6023,1,0,0,0,6026,6028,3,1080,540,0,6027,6026,1,0,0,0,6027,6028,1,
0,0,0,6028,1079,1,0,0,0,6029,6030,5,542,0,0,6030,6031,3,1082,541,0,6031,
6033,5,528,0,0,6032,6034,3,1084,542,0,6033,6032,1,0,0,0,6033,6034,1,0,0,
0,6034,6035,1,0,0,0,6035,6036,5,549,0,0,6036,1081,1,0,0,0,6037,6038,3,1032,
516,0,6038,1083,1,0,0,0,6039,6040,3,1032,516,0,6040,1085,1,0,0,0,6041,6053,
5,9,0,0,6042,6053,3,1178,589,0,6043,6045,3,1090,545,0,6044,6046,3,1178,589,
0,6045,6044,1,0,0,0,6045,6046,1,0,0,0,6046,6053,1,0,0,0,6047,6049,3,1138,
569,0,6048,6050,3,1178,589,0,6049,6048,1,0,0,0,6049,6050,1,0,0,0,6050,6053,
1,0,0,0,6051,6053,3,1032,516,0,6052,6041,1,0,0,0,6052,6042,1,0,0,0,6052,
6043,1,0,0,0,6052,6047,1,0,0,0,6052,6051,1,0,0,0,6053,1087,1,0,0,0,6054,
6066,3,1172,586,0,6055,6066,3,1074,537,0,6056,6058,3,1090,545,0,6057,6059,
3,1178,589,0,6058,6057,1,0,0,0,6058,6059,1,0,0,0,6059,6066,1,0,0,0,6060,
6062,3,1138,569,0,6061,6063,3,1178,589,0,6062,6061,1,0,0,0,6062,6063,1,0,
0,0,6063,6066,1,0,0,0,6064,6066,3,1032,516,0,6065,6054,1,0,0,0,6065,6055,
1,0,0,0,6065,6056,1,0,0,0,6065,6060,1,0,0,0,6065,6064,1,0,0,0,6066,1089,
1,0,0,0,6067,6072,3,1092,546,0,6068,6072,3,1094,547,0,6069,6072,3,1096,548,
0,6070,6072,3,1098,549,0,6071,6067,1,0,0,0,6071,6068,1,0,0,0,6071,6069,1,
0,0,0,6071,6070,1,0,0,0,6072,1091,1,0,0,0,6073,6076,3,1128,564,0,6074,6076,
3,1126,563,0,6075,6073,1,0,0,0,6075,6074,1,0,0,0,6076,6086,1,0,0,0,6077,
6079,3,1100,550,0,6078,6077,1,0,0,0,6079,6080,1,0,0,0,6080,6078,1,0,0,0,
6080,6081,1,0,0,0,6081,6083,1,0,0,0,6082,6084,3,1104,552,0,6083,6082,1,0,
0,0,6083,6084,1,0,0,0,6084,6087,1,0,0,0,6085,6087,3,1104,552,0,6086,6078,
1,0,0,0,6086,6085,1,0,0,0,6086,6087,1,0,0,0,6087,1093,1,0,0,0,6088,6089,
3,1148,574,0,6089,6090,3,1108,554,0,6090,1095,1,0,0,0,6091,6092,3,1168,584,
0,6092,6093,3,1110,555,0,6093,1097,1,0,0,0,6094,6095,5,278,0,0,6095,6096,
3,1104,552,0,6096,1099,1,0,0,0,6097,6100,3,1102,551,0,6098,6100,3,1112,556,
0,6099,6097,1,0,0,0,6099,6098,1,0,0,0,6100,1101,1,0,0,0,6101,6102,7,66,0,
0,6102,6103,3,1128,564,0,6103,1103,1,0,0,0,6104,6105,7,66,0,0,6105,6106,
3,1134,567,0,6106,1105,1,0,0,0,6107,6108,7,66,0,0,6108,6109,3,1146,573,0,
6109,1107,1,0,0,0,6110,6111,7,66,0,0,6111,6112,3,1162,581,0,6112,1109,1,
0,0,0,6113,6114,7,66,0,0,6114,6115,3,1142,571,0,6115,1111,1,0,0,0,6116,6117,
7,66,0,0,6117,6118,3,1076,538,0,6118,1113,1,0,0,0,6119,6120,3,1170,585,0,
6120,1115,1,0,0,0,6121,6122,3,1164,582,0,6122,1117,1,0,0,0,6123,6124,3,1152,
576,0,6124,1119,1,0,0,0,6125,6126,3,1170,585,0,6126,1121,1,0,0,0,6127,6128,
3,1170,585,0,6128,1123,1,0,0,0,6129,6130,3,1164,582,0,6130,1125,1,0,0,0,
6131,6132,3,1170,585,0,6132,1127,1,0,0,0,6133,6134,3,1170,585,0,6134,1129,
1,0,0,0,6135,6139,5,208,0,0,6136,6139,5,108,0,0,6137,6139,3,1128,564,0,6138,
6135,1,0,0,0,6138,6136,1,0,0,0,6138,6137,1,0,0,0,6139,1131,1,0,0,0,6140,
6141,3,1164,582,0,6141,1133,1,0,0,0,6142,6143,3,1170,585,0,6143,1135,1,0,
0,0,6144,6151,5,250,0,0,6145,6151,5,269,0,0,6146,6151,5,369,0,0,6147,6151,
5,464,0,0,6148,6151,5,513,0,0,6149,6151,3,1170,585,0,6150,6144,1,0,0,0,6150,
6145,1,0,0,0,6150,6146,1,0,0,0,6150,6147,1,0,0,0,6150,6148,1,0,0,0,6150,
6149,1,0,0,0,6151,1137,1,0,0,0,6152,6153,3,1170,585,0,6153,1139,1,0,0,0,
6154,6155,3,1164,582,0,6155,1141,1,0,0,0,6156,6157,3,1170,585,0,6157,1143,
1,0,0,0,6158,6159,3,1170,585,0,6159,1145,1,0,0,0,6160,6161,3,1170,585,0,
6161,1147,1,0,0,0,6162,6165,3,1170,585,0,6163,6165,3,1178,589,0,6164,6162,
1,0,0,0,6164,6163,1,0,0,0,6165,1149,1,0,0,0,6166,6168,3,1148,574,0,6167,
6169,3,1108,554,0,6168,6167,1,0,0,0,6168,6169,1,0,0,0,6169,6172,1,0,0,0,
6170,6172,3,1162,581,0,6171,6166,1,0,0,0,6171,6170,1,0,0,0,6172,1151,1,0,
0,0,6173,6176,5,551,0,0,6174,6176,3,1170,585,0,6175,6173,1,0,0,0,6175,6174,
1,0,0,0,6176,1153,1,0,0,0,6177,6178,3,1090,545,0,6178,1155,1,0,0,0,6179,
6180,3,1090,545,0,6180,1157,1,0,0,0,6181,6182,3,1170,585,0,6182,1159,1,0,
0,0,6183,6184,3,1170,585,0,6184,1161,1,0,0,0,6185,6188,3,1170,585,0,6186,
6188,3,1178,589,0,6187,6185,1,0,0,0,6187,6186,1,0,0,0,6188,1163,1,0,0,0,
6189,6190,3,1170,585,0,6190,1165,1,0,0,0,6191,6192,3,1170,585,0,6192,1167,
1,0,0,0,6193,6194,3,1170,585,0,6194,1169,1,0,0,0,6195,6196,7,67,0,0,6196,
1171,1,0,0,0,6197,6204,5,551,0,0,6198,6204,3,1184,592,0,6199,6204,3,1176,
588,0,6200,6204,3,1174,587,0,6201,6204,3,1180,590,0,6202,6204,3,1182,591,
0,6203,6197,1,0,0,0,6203,6198,1,0,0,0,6203,6199,1,0,0,0,6203,6200,1,0,0,
0,6203,6201,1,0,0,0,6203,6202,1,0,0,0,6204,1173,1,0,0,0,6205,6206,7,68,0,
0,6206,1175,1,0,0,0,6207,6211,5,556,0,0,6208,6211,5,521,0,0,6209,6211,3,
1178,589,0,6210,6207,1,0,0,0,6210,6208,1,0,0,0,6210,6209,1,0,0,0,6211,1177,
1,0,0,0,6212,6213,7,69,0,0,6213,1179,1,0,0,0,6214,6215,5,138,0,0,6215,6218,
5,542,0,0,6216,6219,3,1170,585,0,6217,6219,3,1172,586,0,6218,6216,1,0,0,
0,6218,6217,1,0,0,0,6219,6220,1,0,0,0,6220,6221,5,549,0,0,6221,1181,1,0,
0,0,6222,6223,5,139,0,0,6223,6226,5,542,0,0,6224,6227,3,1170,585,0,6225,
6227,3,1172,586,0,6226,6224,1,0,0,0,6226,6225,1,0,0,0,6227,6228,1,0,0,0,
6228,6229,5,549,0,0,6229,1183,1,0,0,0,6230,6231,5,9,0,0,6231,6246,3,1172,
586,0,6232,6246,5,230,0,0,6233,6246,5,231,0,0,6234,6246,5,291,0,0,6235,6246,
5,292,0,0,6236,6246,5,313,0,0,6237,6246,5,314,0,0,6238,6246,5,367,0,0,6239,
6246,5,368,0,0,6240,6246,5,450,0,0,6241,6246,5,451,0,0,6242,6246,5,521,0,
0,6243,6246,5,523,0,0,6244,6246,5,524,0,0,6245,6230,1,0,0,0,6245,6232,1,
0,0,0,6245,6233,1,0,0,0,6245,6234,1,0,0,0,6245,6235,1,0,0,0,6245,6236,1,
0,0,0,6245,6237,1,0,0,0,6245,6238,1,0,0,0,6245,6239,1,0,0,0,6245,6240,1,
0,0,0,6245,6241,1,0,0,0,6245,6242,1,0,0,0,6245,6243,1,0,0,0,6245,6244,1,
0,0,0,6246,1185,1,0,0,0,6247,6248,5,5,0,0,6248,6249,5,323,0,0,6249,6281,
3,1074,537,0,6250,6281,5,111,0,0,6251,6281,5,114,0,0,6252,6281,5,115,0,0,
6253,6281,5,118,0,0,6254,6281,5,119,0,0,6255,6281,5,120,0,0,6256,6281,5,
121,0,0,6257,6281,5,122,0,0,6258,6281,5,123,0,0,6259,6281,5,124,0,0,6260,
6262,5,269,0,0,6261,6263,5,323,0,0,6262,6261,1,0,0,0,6262,6263,1,0,0,0,6263,
6264,1,0,0,0,6264,6281,3,1074,537,0,6265,6281,5,278,0,0,6266,6281,5,281,
0,0,6267,6281,5,341,0,0,6268,6281,5,404,0,0,6269,6281,5,435,0,0,6270,6281,
5,436,0,0,6271,6281,5,441,0,0,6272,6281,5,442,0,0,6273,6281,5,443,0,0,6274,
6281,5,445,0,0,6275,6281,5,446,0,0,6276,6281,5,447,0,0,6277,6281,5,471,0,
0,6278,6281,5,485,0,0,6279,6281,5,513,0,0,6280,6247,1,0,0,0,6280,6250,1,
0,0,0,6280,6251,1,0,0,0,6280,6252,1,0,0,0,6280,6253,1,0,0,0,6280,6254,1,
0,0,0,6280,6255,1,0,0,0,6280,6256,1,0,0,0,6280,6257,1,0,0,0,6280,6258,1,
0,0,0,6280,6259,1,0,0,0,6280,6260,1,0,0,0,6280,6265,1,0,0,0,6280,6266,1,
0,0,0,6280,6267,1,0,0,0,6280,6268,1,0,0,0,6280,6269,1,0,0,0,6280,6270,1,
0,0,0,6280,6271,1,0,0,0,6280,6272,1,0,0,0,6280,6273,1,0,0,0,6280,6274,1,
0,0,0,6280,6275,1,0,0,0,6280,6276,1,0,0,0,6280,6277,1,0,0,0,6280,6278,1,
0,0,0,6280,6279,1,0,0,0,6281,1187,1,0,0,0,6282,6284,5,562,0,0,6283,6282,
1,0,0,0,6284,6285,1,0,0,0,6285,6283,1,0,0,0,6285,6286,1,0,0,0,6286,1189,
1,0,0,0,979,1196,1200,1203,1206,1211,1215,1229,1238,1244,1248,1250,1253,
1256,1261,1266,1271,1276,1281,1286,1294,1300,1308,1314,1320,1324,1334,1344,
1348,1352,1355,1359,1362,1366,1369,1372,1375,1379,1384,1387,1390,1393,1397,
1402,1406,1412,1425,1429,1442,1446,1452,1455,1466,1468,1475,1477,1486,1491,
1495,1500,1505,1512,1515,1518,1523,1528,1532,1536,1540,1543,1547,1552,1556,
1562,1566,1568,1571,1575,1580,1582,1587,1589,1593,1597,1600,1604,1607,1612,
1615,1618,1622,1625,1630,1633,1636,1638,1642,1648,1651,1654,1658,1662,1665,
1668,1673,1677,1682,1685,1690,1698,1703,1707,1712,1721,1726,1741,1745,1758,
1763,1766,1769,1773,1775,1782,1788,1791,1795,1800,1805,1809,1812,1818,1821,
1825,1828,1831,1836,1839,1843,1846,1849,1853,1858,1862,1866,1870,1873,1882,
1887,1891,1897,1903,1905,1911,1917,1920,1928,1932,1935,1938,1943,1948,1951,
1956,1961,1966,1976,1988,1996,2002,2007,2014,2028,2031,2036,2042,2046,2049,
2058,2061,2065,2068,2072,2075,2078,2082,2085,2087,2091,2094,2097,2102,2110,
2114,2116,2123,2125,2132,2136,2140,2145,2149,2151,2156,2160,2164,2167,2172,
2178,2181,2185,2189,2192,2195,2200,2203,2206,2211,2215,2218,2226,2232,2236,
2238,2243,2251,2265,2274,2282,2284,2290,2295,2298,2310,2313,2315,2323,2332,
2334,2342,2352,2355,2357,2365,2379,2381,2386,2393,2398,2402,2409,2416,2423,
2428,2432,2437,2441,2446,2450,2455,2459,2464,2468,2475,2486,2491,2500,2506,
2526,2538,2540,2565,2569,2573,2576,2579,2583,2587,2590,2593,2597,2601,2605,
2609,2613,2617,2623,2629,2636,2639,2649,2655,2661,2665,2667,2672,2674,2684,
2687,2691,2694,2699,2711,2718,2723,2727,2730,2733,2736,2738,2743,2750,2754,
2756,2760,2779,2784,2787,2791,2797,2800,2807,2820,2823,2825,2832,2838,2841,
2847,2851,2854,2857,2860,2864,2868,2872,2880,2885,2895,2901,2905,2909,2914,
2918,2925,2930,2936,2941,2944,2948,2957,2962,2967,2972,2976,2983,2987,2991,
2993,3000,3005,3009,3019,3024,3030,3033,3039,3042,3046,3048,3054,3057,3061,
3065,3068,3071,3074,3082,3088,3095,3100,3103,3106,3109,3121,3125,3131,3135,
3138,3143,3151,3156,3179,3181,3199,3202,3208,3215,3220,3223,3231,3236,3239,
3243,3246,3251,3256,3259,3264,3266,3273,3276,3281,3285,3292,3295,3299,3317,
3324,3327,3341,3345,3347,3352,3354,3358,3361,3367,3372,3378,3380,3384,3415,
3420,3424,3428,3432,3434,3438,3443,3448,3452,3458,3466,3469,3473,3481,3488,
3491,3494,3499,3502,3506,3509,3512,3518,3523,3530,3545,3551,3561,3567,3576,
3579,3584,3638,3646,3649,3652,3655,3660,3664,3671,3677,3687,3695,3698,3701,
3704,3709,3715,3720,3726,3728,3734,3743,3747,3751,3755,3759,3767,3773,3780,
3783,3786,3789,3792,3795,3798,3804,3809,3812,3815,3820,3826,3831,3834,3837,
3843,3849,3851,3855,3858,3864,3870,3872,3877,3886,3893,3899,3905,3909,3912,
3915,3920,3922,3925,3930,3933,3939,3945,3947,3952,3956,3963,3967,3971,3977,
3982,3985,3988,3992,3999,4002,4005,4008,4013,4018,4022,4027,4033,4036,4039,
4042,4046,4051,4056,4059,4067,4072,4075,4078,4081,4084,4090,4095,4098,4103,
4106,4112,4116,4120,4128,4133,4137,4142,4150,4152,4159,4165,4168,4171,4177,
4185,4190,4198,4203,4207,4211,4224,4230,4235,4240,4245,4249,4252,4257,4261,
4265,4274,4278,4286,4290,4293,4295,4301,4304,4307,4314,4317,4325,4328,4334,
4337,4343,4347,4352,4358,4366,4372,4377,4379,4385,4390,4395,4401,4408,4410,
4416,4424,4431,4437,4441,4446,4451,4457,4463,4468,4472,4476,4483,4486,4491,
4495,4500,4504,4508,4513,4516,4520,4525,4528,4531,4534,4541,4545,4553,4558,
4562,4571,4583,4587,4591,4598,4602,4610,4617,4622,4625,4628,4631,4636,4640,
4647,4651,4655,4662,4664,4670,4675,4679,4685,4689,4693,4699,4705,4710,4713,
4718,4726,4729,4734,4738,4743,4753,4755,4762,4767,4780,4786,4789,4798,4803,
4806,4809,4812,4815,4818,4821,4824,4827,4830,4836,4841,4845,4852,4855,4858,
4861,4871,4873,4882,4887,4891,4894,4901,4909,4914,4918,4921,4928,4934,4938,
4942,4950,4955,4958,4962,4965,4973,4976,4979,4982,4989,4993,4996,5001,5004,
5016,5019,5024,5027,5030,5034,5037,5040,5043,5046,5060,5064,5068,5073,5079,
5082,5090,5093,5098,5104,5109,5115,5126,5130,5134,5141,5144,5147,5150,5155,
5159,5164,5168,5172,5177,5180,5184,5187,5190,5194,5199,5202,5205,5208,5215,
5219,5226,5230,5239,5244,5248,5257,5269,5274,5277,5280,5283,5287,5291,5296,
5302,5308,5313,5316,5323,5329,5333,5336,5339,5342,5347,5351,5355,5359,5364,
5369,5375,5384,5387,5390,5393,5398,5404,5409,5417,5426,5430,5434,5438,5442,
5451,5454,5457,5460,5463,5470,5473,5477,5480,5484,5488,5492,5498,5502,5505,
5509,5515,5520,5527,5534,5537,5541,5546,5557,5559,5562,5566,5571,5577,5580,
5585,5590,5593,5596,5599,5602,5605,5608,5613,5617,5622,5628,5631,5636,5642,
5647,5653,5657,5663,5668,5674,5679,5684,5690,5695,5699,5705,5710,5716,5720,
5727,5732,5739,5743,5749,5754,5760,5767,5777,5784,5790,5802,5808,5816,5818,
5821,5832,5836,5839,5848,5854,5858,5863,5869,5872,5877,5882,5890,5894,5897,
5916,5919,5922,5926,5931,5936,5939,5944,5949,5954,5959,5962,5965,5968,5976,
5982,5988,5993,6000,6004,6011,6016,6023,6027,6033,6045,6049,6052,6058,6062,
6065,6071,6075,6080,6083,6086,6099,6138,6150,6164,6168,6171,6175,6187,6203,
6210,6218,6226,6245,6262,6280,6285];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class Cobol85Parser extends antlr4.Parser {

    static grammarFileName = "Cobol85.g4";
    static literalNames = [ null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, "'&'", "'*'", 
                            "'**'", "':'", "','", "'*>CE'", "'*>'", "'$'", 
                            "'\"'", null, "'.'", "'='", "'*>EXECCICS'", 
                            "'*>EXECSQL'", "'*>EXECSQLIMS'", "'<'", "'<='", 
                            "'('", "'-'", "'>'", "'>='", "'<>'", "'+'", 
                            "'''", "')'", "'/'", null, "'66'", "'77'", "'88'", 
                            null, null, null, null, null, null, null, null, 
                            null, null, "', '" ];
    static symbolicNames = [ null, "ABORT", "ACCEPT", "ACCESS", "ADD", "ADDRESS", 
                             "ADVANCING", "AFTER", "ALIGNED", "ALL", "ALPHABET", 
                             "ALPHABETIC", "ALPHABETIC_LOWER", "ALPHABETIC_UPPER", 
                             "ALPHANUMERIC", "ALPHANUMERIC_EDITED", "ALSO", 
                             "ALTER", "ALTERNATE", "AND", "ANY", "ARE", 
                             "AREA", "AREAS", "AS", "ASCENDING", "ASCII", 
                             "ASSIGN", "ASSOCIATED_DATA", "ASSOCIATED_DATA_LENGTH", 
                             "AT", "ATTRIBUTE", "AUTHOR", "AUTO", "AUTO_SKIP", 
                             "BACKGROUND_COLOR", "BACKGROUND_COLOUR", "BASIS", 
                             "BEEP", "BEFORE", "BEGINNING", "BELL", "BINARY", 
                             "BIT", "BLANK", "BLINK", "BLOCK", "BOUNDS", 
                             "BOTTOM", "BY", "BYFUNCTION", "BYTITLE", "CALL", 
                             "CANCEL", "CAPABLE", "CCSVERSION", "CD", "CF", 
                             "CH", "CHAINING", "CHANGED", "CHANNEL", "CHARACTER", 
                             "CHARACTERS", "CLASS", "CLASS_ID", "CLOCK_UNITS", 
                             "CLOSE", "CLOSE_DISPOSITION", "COBOL", "CODE", 
                             "CODE_SET", "COLLATING", "COL", "COLUMN", "COM_REG", 
                             "COMMA", "COMMITMENT", "COMMON", "COMMUNICATION", 
                             "COMP", "COMP_1", "COMP_2", "COMP_3", "COMP_4", 
                             "COMP_5", "COMPUTATIONAL", "COMPUTATIONAL_1", 
                             "COMPUTATIONAL_2", "COMPUTATIONAL_3", "COMPUTATIONAL_4", 
                             "COMPUTATIONAL_5", "COMPUTE", "CONFIGURATION", 
                             "CONTAINS", "CONTENT", "CONTINUE", "CONTROL", 
                             "CONTROL_POINT", "CONTROLS", "CONVENTION", 
                             "CONVERTING", "COPY", "CORR", "CORRESPONDING", 
                             "COUNT", "CRUNCH", "CURRENCY", "CURSOR", "DATA", 
                             "DATA_BASE", "DATE", "DATE_COMPILED", "DATE_WRITTEN", 
                             "DAY", "DAY_OF_WEEK", "DBCS", "DE", "DEBUG_CONTENTS", 
                             "DEBUG_ITEM", "DEBUG_LINE", "DEBUG_NAME", "DEBUG_SUB_1", 
                             "DEBUG_SUB_2", "DEBUG_SUB_3", "DEBUGGING", 
                             "DECIMAL_POINT", "DECLARATIVES", "DEFAULT", 
                             "DEFAULT_DISPLAY", "DEFINITION", "DELETE", 
                             "DELIMITED", "DELIMITER", "DEPENDING", "DESCENDING", 
                             "DESTINATION", "DETAIL", "DFHRESP", "DFHVALUE", 
                             "DISABLE", "DISK", "DISPLAY", "DISPLAY_1", 
                             "DIVIDE", "DIVISION", "DONTCARE", "DOUBLE", 
                             "DOWN", "DUPLICATES", "DYNAMIC", "EBCDIC", 
                             "EGCS", "EGI", "ELSE", "EMI", "EMPTY_CHECK", 
                             "ENABLE", "END", "END_ACCEPT", "END_ADD", "END_CALL", 
                             "END_COMPUTE", "END_DELETE", "END_DIVIDE", 
                             "END_EVALUATE", "END_IF", "END_MULTIPLY", "END_OF_PAGE", 
                             "END_PERFORM", "END_READ", "END_RECEIVE", "END_RETURN", 
                             "END_REWRITE", "END_SEARCH", "END_START", "END_STRING", 
                             "END_SUBTRACT", "END_UNSTRING", "END_WRITE", 
                             "ENDING", "ENTER", "ENTRY", "ENTRY_PROCEDURE", 
                             "ENVIRONMENT", "EOP", "EQUAL", "ERASE", "ERROR", 
                             "EOL", "EOS", "ESCAPE", "ESI", "EVALUATE", 
                             "EVENT", "EVERY", "EXCEPTION", "EXCLUSIVE", 
                             "EXHIBIT", "EXIT", "EXPORT", "EXTEND", "EXTENDED", 
                             "EXTERNAL", "FALSE", "FD", "FILE", "FILE_CONTROL", 
                             "FILLER", "FINAL", "FIRST", "FOOTING", "FOR", 
                             "FOREGROUND_COLOR", "FOREGROUND_COLOUR", "FROM", 
                             "FULL", "FUNCTION", "FUNCTIONNAME", "FUNCTION_POINTER", 
                             "GENERATE", "GOBACK", "GIVING", "GLOBAL", "GO", 
                             "GREATER", "GRID", "GROUP", "HEADING", "HIGHLIGHT", 
                             "HIGH_VALUE", "HIGH_VALUES", "I_O", "I_O_CONTROL", 
                             "ID", "IDENTIFICATION", "IF", "IMPLICIT", "IMPORT", 
                             "IN", "INDEX", "INDEXED", "INDICATE", "INITIAL", 
                             "INITIALIZE", "INITIATE", "INPUT", "INPUT_OUTPUT", 
                             "INSPECT", "INSTALLATION", "INTEGER", "INTO", 
                             "INVALID", "INVOKE", "IS", "JUST", "JUSTIFIED", 
                             "KANJI", "KEPT", "KEY", "KEYBOARD", "LABEL", 
                             "LANGUAGE", "LAST", "LB", "LD", "LEADING", 
                             "LEFT", "LEFTLINE", "LENGTH", "LENGTH_CHECK", 
                             "LESS", "LIBACCESS", "LIBPARAMETER", "LIBRARY", 
                             "LIMIT", "LIMITS", "LINAGE", "LINAGE_COUNTER", 
                             "LINE", "LINES", "LINE_COUNTER", "LINKAGE", 
                             "LIST", "LOCAL", "LOCAL_STORAGE", "LOCK", "LONG_DATE", 
                             "LONG_TIME", "LOWER", "LOWLIGHT", "LOW_VALUE", 
                             "LOW_VALUES", "MEMORY", "MERGE", "MESSAGE", 
                             "MMDDYYYY", "MODE", "MODULES", "MORE_LABELS", 
                             "MOVE", "MULTIPLE", "MULTIPLY", "NAMED", "NATIONAL", 
                             "NATIONAL_EDITED", "NATIVE", "NEGATIVE", "NETWORK", 
                             "NEXT", "NO", "NO_ECHO", "NOT", "NULL_", "NULLS", 
                             "NUMBER", "NUMERIC", "NUMERIC_DATE", "NUMERIC_EDITED", 
                             "NUMERIC_TIME", "OBJECT_COMPUTER", "OCCURS", 
                             "ODT", "OF", "OFF", "OMITTED", "ON", "OPEN", 
                             "OPTIONAL", "OR", "ORDER", "ORDERLY", "ORGANIZATION", 
                             "OTHER", "OUTPUT", "OVERFLOW", "OVERLINE", 
                             "OWN", "PACKED_DECIMAL", "PADDING", "PAGE", 
                             "PAGE_COUNTER", "PASSWORD", "PERFORM", "PF", 
                             "PH", "PIC", "PICTURE", "PLUS", "POINTER", 
                             "POSITION", "POSITIVE", "PORT", "PRINTER", 
                             "PRINTING", "PRIVATE", "PROCEDURE", "PROCEDURE_POINTER", 
                             "PROCEDURES", "PROCEED", "PROCESS", "PROGRAM", 
                             "PROGRAM_ID", "PROGRAM_LIBRARY", "PROMPT", 
                             "PURGE", "QUEUE", "QUOTE", "QUOTES", "RANDOM", 
                             "READER", "REMOTE", "RD", "REAL", "READ", "RECEIVE", 
                             "RECEIVED", "RECORD", "RECORDING", "RECORDS", 
                             "RECURSIVE", "REDEFINES", "REEL", "REF", "REFERENCE", 
                             "REFERENCES", "RELATIVE", "RELEASE", "REMAINDER", 
                             "REMARKS", "REMOVAL", "REMOVE", "RENAMES", 
                             "REPLACE", "REPLACING", "REPORT", "REPORTING", 
                             "REPORTS", "REQUIRED", "RERUN", "RESERVE", 
                             "REVERSE_VIDEO", "RESET", "RETURN", "RETURN_CODE", 
                             "RETURNING", "REVERSED", "REWIND", "REWRITE", 
                             "RF", "RH", "RIGHT", "ROUNDED", "RUN", "SAME", 
                             "SAVE", "SCREEN", "SD", "SEARCH", "SECTION", 
                             "SECURE", "SECURITY", "SEGMENT", "SEGMENT_LIMIT", 
                             "SELECT", "SEND", "SENTENCE", "SEPARATE", "SEQUENCE", 
                             "SEQUENTIAL", "SET", "SHARED", "SHAREDBYALL", 
                             "SHAREDBYRUNUNIT", "SHARING", "SHIFT_IN", "SHIFT_OUT", 
                             "SHORT_DATE", "SIGN", "SIZE", "SORT", "SORT_CONTROL", 
                             "SORT_CORE_SIZE", "SORT_FILE_SIZE", "SORT_MERGE", 
                             "SORT_MESSAGE", "SORT_MODE_SIZE", "SORT_RETURN", 
                             "SOURCE", "SOURCE_COMPUTER", "SPACE", "SPACES", 
                             "SPECIAL_NAMES", "STANDARD", "STANDARD_1", 
                             "STANDARD_2", "START", "STATUS", "STOP", "STRING", 
                             "SUB_QUEUE_1", "SUB_QUEUE_2", "SUB_QUEUE_3", 
                             "SUBTRACT", "SUM", "SUPPRESS", "SYMBOL", "SYMBOLIC", 
                             "SYNC", "SYNCHRONIZED", "TABLE", "TALLY", "TALLYING", 
                             "TASK", "TAPE", "TERMINAL", "TERMINATE", "TEST", 
                             "TEXT", "THAN", "THEN", "THREAD", "THREAD_LOCAL", 
                             "THROUGH", "THRU", "TIME", "TIMER", "TIMES", 
                             "TITLE", "TO", "TODAYS_DATE", "TODAYS_NAME", 
                             "TOP", "TRAILING", "TRUE", "TRUNCATED", "TYPE", 
                             "TYPEDEF", "UNDERLINE", "UNIT", "UNSTRING", 
                             "UNTIL", "UP", "UPON", "USAGE", "USE", "USING", 
                             "VALUE", "VALUES", "VARYING", "VIRTUAL", "WAIT", 
                             "WHEN", "WHEN_COMPILED", "WITH", "WORDS", "WORKING_STORAGE", 
                             "WRITE", "YEAR", "YYYYMMDD", "YYYYDDD", "ZERO", 
                             "ZERO_FILL", "ZEROS", "ZEROES", "AMPCHAR", 
                             "ASTERISKCHAR", "DOUBLEASTERISKCHAR", "COLONCHAR", 
                             "COMMACHAR", "COMMENTENTRYTAG", "COMMENTTAG", 
                             "DOLLARCHAR", "DOUBLEQUOTE", "DOT_FS", "DOT", 
                             "EQUALCHAR", "EXECCICSTAG", "EXECSQLTAG", "EXECSQLIMSTAG", 
                             "LESSTHANCHAR", "LESSTHANOREQUAL", "LPARENCHAR", 
                             "MINUSCHAR", "MORETHANCHAR", "MORETHANOREQUAL", 
                             "NOTEQUALCHAR", "PLUSCHAR", "SINGLEQUOTE", 
                             "RPARENCHAR", "SLASHCHAR", "NONNUMERICLITERAL", 
                             "LEVEL_NUMBER_66", "LEVEL_NUMBER_77", "LEVEL_NUMBER_88", 
                             "INTEGERLITERAL", "NUMERICLITERAL", "IDENTIFIER", 
                             "NEWLINE", "EXECCICSLINE", "EXECSQLIMSLINE", 
                             "EXECSQLLINE", "COMMENTENTRYLINE", "COMMENTLINE", 
                             "WS", "SEPARATOR" ];
    static ruleNames = [ "startRule", "compilationUnit", "programUnit", 
                         "endProgramStatement", "identificationDivision", 
                         "identificationDivisionBody", "programIdParagraph", 
                         "authorParagraph", "installationParagraph", "dateWrittenParagraph", 
                         "dateCompiledParagraph", "securityParagraph", "remarksParagraph", 
                         "environmentDivision", "environmentDivisionBody", 
                         "configurationSection", "configurationSectionParagraph", 
                         "sourceComputerParagraph", "objectComputerParagraph", 
                         "objectComputerClause", "memorySizeClause", "diskSizeClause", 
                         "collatingSequenceClause", "collatingSequenceClauseAlphanumeric", 
                         "collatingSequenceClauseNational", "segmentLimitClause", 
                         "characterSetClause", "specialNamesParagraph", 
                         "specialNameClause", "alphabetClause", "alphabetClauseFormat1", 
                         "alphabetLiterals", "alphabetThrough", "alphabetAlso", 
                         "alphabetClauseFormat2", "channelClause", "classClause", 
                         "classClauseThrough", "classClauseFrom", "classClauseTo", 
                         "currencySignClause", "decimalPointClause", "defaultComputationalSignClause", 
                         "defaultDisplaySignClause", "environmentSwitchNameClause", 
                         "environmentSwitchNameSpecialNamesStatusPhrase", 
                         "odtClause", "reserveNetworkClause", "symbolicCharactersClause", 
                         "symbolicCharacters", "inputOutputSection", "inputOutputSectionParagraph", 
                         "fileControlParagraph", "fileControlEntry", "selectClause", 
                         "fileControlClause", "assignClause", "reserveClause", 
                         "organizationClause", "paddingCharacterClause", 
                         "recordDelimiterClause", "accessModeClause", "recordKeyClause", 
                         "alternateRecordKeyClause", "passwordClause", "fileStatusClause", 
                         "relativeKeyClause", "ioControlParagraph", "ioControlClause", 
                         "rerunClause", "rerunEveryRecords", "rerunEveryOf", 
                         "rerunEveryClock", "sameClause", "multipleFileClause", 
                         "multipleFilePosition", "commitmentControlClause", 
                         "dataDivision", "dataDivisionSection", "fileSection", 
                         "fileDescriptionEntry", "fileDescriptionEntryClause", 
                         "externalClause", "globalClause", "blockContainsClause", 
                         "blockContainsTo", "recordContainsClause", "recordContainsClauseFormat1", 
                         "recordContainsClauseFormat2", "recordContainsClauseFormat3", 
                         "recordContainsTo", "labelRecordsClause", "valueOfClause", 
                         "valuePair", "dataRecordsClause", "linageClause", 
                         "linageAt", "linageFootingAt", "linageLinesAtTop", 
                         "linageLinesAtBottom", "recordingModeClause", "modeStatement", 
                         "codeSetClause", "reportClause", "dataBaseSection", 
                         "dataBaseSectionEntry", "workingStorageSection", 
                         "linkageSection", "communicationSection", "communicationDescriptionEntry", 
                         "communicationDescriptionEntryFormat1", "communicationDescriptionEntryFormat2", 
                         "communicationDescriptionEntryFormat3", "destinationCountClause", 
                         "destinationTableClause", "endKeyClause", "errorKeyClause", 
                         "messageCountClause", "messageDateClause", "messageTimeClause", 
                         "statusKeyClause", "symbolicDestinationClause", 
                         "symbolicQueueClause", "symbolicSourceClause", 
                         "symbolicTerminalClause", "symbolicSubQueueClause", 
                         "textLengthClause", "localStorageSection", "screenSection", 
                         "screenDescriptionEntry", "screenDescriptionBlankClause", 
                         "screenDescriptionBellClause", "screenDescriptionBlinkClause", 
                         "screenDescriptionEraseClause", "screenDescriptionLightClause", 
                         "screenDescriptionGridClause", "screenDescriptionReverseVideoClause", 
                         "screenDescriptionUnderlineClause", "screenDescriptionSizeClause", 
                         "screenDescriptionLineClause", "screenDescriptionColumnClause", 
                         "screenDescriptionForegroundColorClause", "screenDescriptionBackgroundColorClause", 
                         "screenDescriptionControlClause", "screenDescriptionValueClause", 
                         "screenDescriptionPictureClause", "screenDescriptionFromClause", 
                         "screenDescriptionToClause", "screenDescriptionUsingClause", 
                         "screenDescriptionUsageClause", "screenDescriptionBlankWhenZeroClause", 
                         "screenDescriptionJustifiedClause", "screenDescriptionSignClause", 
                         "screenDescriptionAutoClause", "screenDescriptionSecureClause", 
                         "screenDescriptionRequiredClause", "screenDescriptionPromptClause", 
                         "screenDescriptionPromptOccursClause", "screenDescriptionFullClause", 
                         "screenDescriptionZeroFillClause", "reportSection", 
                         "reportDescription", "reportDescriptionEntry", 
                         "reportDescriptionGlobalClause", "reportDescriptionPageLimitClause", 
                         "reportDescriptionHeadingClause", "reportDescriptionFirstDetailClause", 
                         "reportDescriptionLastDetailClause", "reportDescriptionFootingClause", 
                         "reportGroupDescriptionEntry", "reportGroupDescriptionEntryFormat1", 
                         "reportGroupDescriptionEntryFormat2", "reportGroupDescriptionEntryFormat3", 
                         "reportGroupBlankWhenZeroClause", "reportGroupColumnNumberClause", 
                         "reportGroupIndicateClause", "reportGroupJustifiedClause", 
                         "reportGroupLineNumberClause", "reportGroupLineNumberNextPage", 
                         "reportGroupLineNumberPlus", "reportGroupNextGroupClause", 
                         "reportGroupNextGroupPlus", "reportGroupNextGroupNextPage", 
                         "reportGroupPictureClause", "reportGroupResetClause", 
                         "reportGroupSignClause", "reportGroupSourceClause", 
                         "reportGroupSumClause", "reportGroupTypeClause", 
                         "reportGroupTypeReportHeading", "reportGroupTypePageHeading", 
                         "reportGroupTypeControlHeading", "reportGroupTypeDetail", 
                         "reportGroupTypeControlFooting", "reportGroupUsageClause", 
                         "reportGroupTypePageFooting", "reportGroupTypeReportFooting", 
                         "reportGroupValueClause", "programLibrarySection", 
                         "libraryDescriptionEntry", "libraryDescriptionEntryFormat1", 
                         "libraryDescriptionEntryFormat2", "libraryAttributeClauseFormat1", 
                         "libraryAttributeClauseFormat2", "libraryAttributeFunction", 
                         "libraryAttributeParameter", "libraryAttributeTitle", 
                         "libraryEntryProcedureClauseFormat1", "libraryEntryProcedureClauseFormat2", 
                         "libraryEntryProcedureForClause", "libraryEntryProcedureGivingClause", 
                         "libraryEntryProcedureUsingClause", "libraryEntryProcedureUsingName", 
                         "libraryEntryProcedureWithClause", "libraryEntryProcedureWithName", 
                         "libraryIsCommonClause", "libraryIsGlobalClause", 
                         "dataDescriptionEntry", "dataDescriptionEntryFormat1", 
                         "dataDescriptionEntryFormat2", "dataDescriptionEntryFormat3", 
                         "dataDescriptionEntryExecSql", "dataAlignedClause", 
                         "dataBlankWhenZeroClause", "dataCommonOwnLocalClause", 
                         "dataExternalClause", "dataGlobalClause", "dataIntegerStringClause", 
                         "dataJustifiedClause", "dataOccursClause", "dataOccursTo", 
                         "dataOccursSort", "dataPictureClause", "pictureString", 
                         "pictureChars", "pictureCardinality", "dataReceivedByClause", 
                         "dataRecordAreaClause", "dataRedefinesClause", 
                         "dataRenamesClause", "dataSignClause", "dataSynchronizedClause", 
                         "dataThreadLocalClause", "dataTypeClause", "dataTypeDefClause", 
                         "dataUsageClause", "dataUsingClause", "dataValueClause", 
                         "dataValueInterval", "dataValueIntervalFrom", "dataValueIntervalTo", 
                         "dataWithLowerBoundsClause", "procedureDivision", 
                         "procedureDivisionUsingClause", "procedureDivisionGivingClause", 
                         "procedureDivisionUsingParameter", "procedureDivisionByReferencePhrase", 
                         "procedureDivisionByReference", "procedureDivisionByValuePhrase", 
                         "procedureDivisionByValue", "procedureDeclaratives", 
                         "procedureDeclarative", "procedureSectionHeader", 
                         "procedureDivisionBody", "procedureSection", "paragraphs", 
                         "paragraph", "sentence", "statement", "acceptStatement", 
                         "acceptFromDateStatement", "acceptFromMnemonicStatement", 
                         "acceptFromEscapeKeyStatement", "acceptMessageCountStatement", 
                         "addStatement", "addToStatement", "addToGivingStatement", 
                         "addCorrespondingStatement", "addFrom", "addTo", 
                         "addToGiving", "addGiving", "alteredGoTo", "alterStatement", 
                         "alterProceedTo", "callStatement", "callUsingPhrase", 
                         "callUsingParameter", "callByReferencePhrase", 
                         "callByReference", "callByValuePhrase", "callByValue", 
                         "callByContentPhrase", "callByContent", "callGivingPhrase", 
                         "cancelStatement", "cancelCall", "closeStatement", 
                         "closeFile", "closeReelUnitStatement", "closeRelativeStatement", 
                         "closePortFileIOStatement", "closePortFileIOUsing", 
                         "closePortFileIOUsingCloseDisposition", "closePortFileIOUsingAssociatedData", 
                         "closePortFileIOUsingAssociatedDataLength", "computeStatement", 
                         "computeStore", "continueStatement", "deleteStatement", 
                         "disableStatement", "displayStatement", "displayOperand", 
                         "displayAt", "displayUpon", "displayWith", "divideStatement", 
                         "divideIntoStatement", "divideIntoGivingStatement", 
                         "divideByGivingStatement", "divideGivingPhrase", 
                         "divideInto", "divideGiving", "divideRemainder", 
                         "enableStatement", "entryStatement", "evaluateStatement", 
                         "evaluateSelect", "evaluateAlsoSelect", "evaluateWhenPhrase", 
                         "evaluateWhen", "evaluateCondition", "evaluateThrough", 
                         "evaluateAlsoCondition", "evaluateWhenOther", "evaluateValue", 
                         "execCicsStatement", "execSqlStatement", "execSqlImsStatement", 
                         "exhibitStatement", "exhibitOperand", "exitStatement", 
                         "generateStatement", "gobackStatement", "goToStatement", 
                         "goToStatementSimple", "goToDependingOnStatement", 
                         "ifStatement", "ifThen", "ifElse", "initializeStatement", 
                         "initializeReplacingPhrase", "initializeReplacingBy", 
                         "initiateStatement", "inspectStatement", "inspectTallyingPhrase", 
                         "inspectReplacingPhrase", "inspectTallyingReplacingPhrase", 
                         "inspectConvertingPhrase", "inspectFor", "inspectCharacters", 
                         "inspectReplacingCharacters", "inspectAllLeadings", 
                         "inspectReplacingAllLeadings", "inspectAllLeading", 
                         "inspectReplacingAllLeading", "inspectBy", "inspectTo", 
                         "inspectBeforeAfter", "mergeStatement", "mergeOnKeyClause", 
                         "mergeCollatingSequencePhrase", "mergeCollatingAlphanumeric", 
                         "mergeCollatingNational", "mergeUsing", "mergeOutputProcedurePhrase", 
                         "mergeOutputThrough", "mergeGivingPhrase", "mergeGiving", 
                         "moveStatement", "moveToStatement", "moveToSendingArea", 
                         "moveCorrespondingToStatement", "moveCorrespondingToSendingArea", 
                         "multiplyStatement", "multiplyRegular", "multiplyRegularOperand", 
                         "multiplyGiving", "multiplyGivingOperand", "multiplyGivingResult", 
                         "openStatement", "openInputStatement", "openInput", 
                         "openOutputStatement", "openOutput", "openIOStatement", 
                         "openExtendStatement", "performStatement", "performInlineStatement", 
                         "performProcedureStatement", "performType", "performTimes", 
                         "performUntil", "performVarying", "performVaryingClause", 
                         "performVaryingPhrase", "performAfter", "performFrom", 
                         "performBy", "performTestClause", "purgeStatement", 
                         "readStatement", "readInto", "readWith", "readKey", 
                         "receiveStatement", "receiveFromStatement", "receiveFrom", 
                         "receiveIntoStatement", "receiveNoData", "receiveWithData", 
                         "receiveBefore", "receiveWith", "receiveThread", 
                         "receiveSize", "receiveStatus", "releaseStatement", 
                         "returnStatement", "returnInto", "rewriteStatement", 
                         "rewriteFrom", "searchStatement", "searchVarying", 
                         "searchWhen", "sendStatement", "sendStatementSync", 
                         "sendStatementAsync", "sendFromPhrase", "sendWithPhrase", 
                         "sendReplacingPhrase", "sendAdvancingPhrase", "sendAdvancingPage", 
                         "sendAdvancingLines", "sendAdvancingMnemonic", 
                         "setStatement", "setToStatement", "setUpDownByStatement", 
                         "setTo", "setToValue", "setByValue", "sortStatement", 
                         "sortOnKeyClause", "sortDuplicatesPhrase", "sortCollatingSequencePhrase", 
                         "sortCollatingAlphanumeric", "sortCollatingNational", 
                         "sortInputProcedurePhrase", "sortInputThrough", 
                         "sortUsing", "sortOutputProcedurePhrase", "sortOutputThrough", 
                         "sortGivingPhrase", "sortGiving", "startStatement", 
                         "startKey", "stopStatement", "stringStatement", 
                         "stringSendingPhrase", "stringSending", "stringDelimitedByPhrase", 
                         "stringForPhrase", "stringIntoPhrase", "stringWithPointerPhrase", 
                         "subtractStatement", "subtractFromStatement", "subtractFromGivingStatement", 
                         "subtractCorrespondingStatement", "subtractSubtrahend", 
                         "subtractMinuend", "subtractMinuendGiving", "subtractGiving", 
                         "subtractMinuendCorresponding", "terminateStatement", 
                         "unstringStatement", "unstringSendingPhrase", "unstringDelimitedByPhrase", 
                         "unstringOrAllPhrase", "unstringIntoPhrase", "unstringInto", 
                         "unstringDelimiterIn", "unstringCountIn", "unstringWithPointerPhrase", 
                         "unstringTallyingPhrase", "useStatement", "useAfterClause", 
                         "useAfterOn", "useDebugClause", "useDebugOn", "writeStatement", 
                         "writeFromPhrase", "writeAdvancingPhrase", "writeAdvancingPage", 
                         "writeAdvancingLines", "writeAdvancingMnemonic", 
                         "writeAtEndOfPagePhrase", "writeNotAtEndOfPagePhrase", 
                         "atEndPhrase", "notAtEndPhrase", "invalidKeyPhrase", 
                         "notInvalidKeyPhrase", "onOverflowPhrase", "notOnOverflowPhrase", 
                         "onSizeErrorPhrase", "notOnSizeErrorPhrase", "onExceptionClause", 
                         "notOnExceptionClause", "arithmeticExpression", 
                         "plusMinus", "multDivs", "multDiv", "powers", "power", 
                         "basis", "condition", "andOrCondition", "combinableCondition", 
                         "simpleCondition", "classCondition", "conditionNameReference", 
                         "conditionNameSubscriptReference", "relationCondition", 
                         "relationSignCondition", "relationArithmeticComparison", 
                         "relationCombinedComparison", "relationCombinedCondition", 
                         "relationalOperator", "abbreviation", "identifier", 
                         "tableCall", "functionCall", "referenceModifier", 
                         "characterPosition", "length", "subscript_", "argument", 
                         "qualifiedDataName", "qualifiedDataNameFormat1", 
                         "qualifiedDataNameFormat2", "qualifiedDataNameFormat3", 
                         "qualifiedDataNameFormat4", "qualifiedInData", 
                         "inData", "inFile", "inMnemonic", "inSection", 
                         "inLibrary", "inTable", "alphabetName", "assignmentName", 
                         "basisName", "cdName", "className", "computerName", 
                         "conditionName", "dataName", "dataDescName", "environmentName", 
                         "fileName", "functionName", "indexName", "languageName", 
                         "libraryName", "localName", "mnemonicName", "paragraphName", 
                         "procedureName", "programName", "recordName", "reportName", 
                         "routineName", "screenName", "sectionName", "systemName", 
                         "symbolicCharacter", "textName", "cobolWord", "literal", 
                         "booleanLiteral", "numericLiteral", "integerLiteral", 
                         "cicsDfhRespLiteral", "cicsDfhValueLiteral", "figurativeConstant", 
                         "specialRegister", "commentEntry" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = Cobol85Parser.ruleNames;
        this.literalNames = Cobol85Parser.literalNames;
        this.symbolicNames = Cobol85Parser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	startRule() {
	    let localctx = new StartRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, Cobol85Parser.RULE_startRule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1190;
	        this.compilationUnit();
	        this.state = 1191;
	        this.match(Cobol85Parser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compilationUnit() {
	    let localctx = new CompilationUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, Cobol85Parser.RULE_compilationUnit);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1194; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1193;
	            this.programUnit();
	            this.state = 1196; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===Cobol85Parser.ID || _la===Cobol85Parser.IDENTIFICATION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	programUnit() {
	    let localctx = new ProgramUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, Cobol85Parser.RULE_programUnit);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1198;
	        this.identificationDivision();
	        this.state = 1200;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ENVIRONMENT) {
	            this.state = 1199;
	            this.environmentDivision();
	        }

	        this.state = 1203;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.DATA) {
	            this.state = 1202;
	            this.dataDivision();
	        }

	        this.state = 1206;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.PROCEDURE) {
	            this.state = 1205;
	            this.procedureDivision();
	        }

	        this.state = 1211;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1208;
	                this.programUnit(); 
	            }
	            this.state = 1213;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
	        }

	        this.state = 1215;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        if(la_===1) {
	            this.state = 1214;
	            this.endProgramStatement();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endProgramStatement() {
	    let localctx = new EndProgramStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, Cobol85Parser.RULE_endProgramStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1217;
	        this.match(Cobol85Parser.END);
	        this.state = 1218;
	        this.match(Cobol85Parser.PROGRAM);
	        this.state = 1219;
	        this.programName();
	        this.state = 1220;
	        this.match(Cobol85Parser.DOT_FS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identificationDivision() {
	    let localctx = new IdentificationDivisionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, Cobol85Parser.RULE_identificationDivision);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1222;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.ID || _la===Cobol85Parser.IDENTIFICATION)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1223;
	        this.match(Cobol85Parser.DIVISION);
	        this.state = 1224;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 1225;
	        this.programIdParagraph();
	        this.state = 1229;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.AUTHOR || _la===Cobol85Parser.DATE_COMPILED || _la===Cobol85Parser.DATE_WRITTEN || _la===Cobol85Parser.INSTALLATION || _la===Cobol85Parser.REMARKS || _la===Cobol85Parser.SECURITY) {
	            this.state = 1226;
	            this.identificationDivisionBody();
	            this.state = 1231;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identificationDivisionBody() {
	    let localctx = new IdentificationDivisionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, Cobol85Parser.RULE_identificationDivisionBody);
	    try {
	        this.state = 1238;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.AUTHOR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1232;
	            this.authorParagraph();
	            break;
	        case Cobol85Parser.INSTALLATION:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1233;
	            this.installationParagraph();
	            break;
	        case Cobol85Parser.DATE_WRITTEN:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1234;
	            this.dateWrittenParagraph();
	            break;
	        case Cobol85Parser.DATE_COMPILED:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1235;
	            this.dateCompiledParagraph();
	            break;
	        case Cobol85Parser.SECURITY:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1236;
	            this.securityParagraph();
	            break;
	        case Cobol85Parser.REMARKS:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1237;
	            this.remarksParagraph();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	programIdParagraph() {
	    let localctx = new ProgramIdParagraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, Cobol85Parser.RULE_programIdParagraph);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1240;
	        this.match(Cobol85Parser.PROGRAM_ID);
	        this.state = 1241;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 1242;
	        this.programName();
	        this.state = 1250;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.COMMON || _la===Cobol85Parser.DEFINITION || ((((_la - 243)) & ~0x1f) == 0 && ((1 << (_la - 243)) & ((1 << (Cobol85Parser.INITIAL - 243)) | (1 << (Cobol85Parser.IS - 243)) | (1 << (Cobol85Parser.LIBRARY - 243)))) !== 0) || _la===Cobol85Parser.RECURSIVE) {
	            this.state = 1244;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.IS) {
	                this.state = 1243;
	                this.match(Cobol85Parser.IS);
	            }

	            this.state = 1246;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.COMMON || _la===Cobol85Parser.DEFINITION || _la===Cobol85Parser.INITIAL || _la===Cobol85Parser.LIBRARY || _la===Cobol85Parser.RECURSIVE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1248;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.PROGRAM) {
	                this.state = 1247;
	                this.match(Cobol85Parser.PROGRAM);
	            }

	        }

	        this.state = 1253;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.DOT_FS) {
	            this.state = 1252;
	            this.match(Cobol85Parser.DOT_FS);
	        }

	        this.state = 1256;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.COMMENTENTRYLINE) {
	            this.state = 1255;
	            this.commentEntry();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	authorParagraph() {
	    let localctx = new AuthorParagraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, Cobol85Parser.RULE_authorParagraph);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1258;
	        this.match(Cobol85Parser.AUTHOR);
	        this.state = 1259;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 1261;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.COMMENTENTRYLINE) {
	            this.state = 1260;
	            this.commentEntry();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	installationParagraph() {
	    let localctx = new InstallationParagraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, Cobol85Parser.RULE_installationParagraph);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1263;
	        this.match(Cobol85Parser.INSTALLATION);
	        this.state = 1264;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 1266;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.COMMENTENTRYLINE) {
	            this.state = 1265;
	            this.commentEntry();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateWrittenParagraph() {
	    let localctx = new DateWrittenParagraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, Cobol85Parser.RULE_dateWrittenParagraph);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1268;
	        this.match(Cobol85Parser.DATE_WRITTEN);
	        this.state = 1269;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 1271;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.COMMENTENTRYLINE) {
	            this.state = 1270;
	            this.commentEntry();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateCompiledParagraph() {
	    let localctx = new DateCompiledParagraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, Cobol85Parser.RULE_dateCompiledParagraph);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1273;
	        this.match(Cobol85Parser.DATE_COMPILED);
	        this.state = 1274;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 1276;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.COMMENTENTRYLINE) {
	            this.state = 1275;
	            this.commentEntry();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	securityParagraph() {
	    let localctx = new SecurityParagraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, Cobol85Parser.RULE_securityParagraph);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1278;
	        this.match(Cobol85Parser.SECURITY);
	        this.state = 1279;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 1281;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.COMMENTENTRYLINE) {
	            this.state = 1280;
	            this.commentEntry();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	remarksParagraph() {
	    let localctx = new RemarksParagraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, Cobol85Parser.RULE_remarksParagraph);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1283;
	        this.match(Cobol85Parser.REMARKS);
	        this.state = 1284;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 1286;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.COMMENTENTRYLINE) {
	            this.state = 1285;
	            this.commentEntry();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	environmentDivision() {
	    let localctx = new EnvironmentDivisionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, Cobol85Parser.RULE_environmentDivision);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1288;
	        this.match(Cobol85Parser.ENVIRONMENT);
	        this.state = 1289;
	        this.match(Cobol85Parser.DIVISION);
	        this.state = 1290;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 1294;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.CONFIGURATION || _la===Cobol85Parser.INPUT_OUTPUT || _la===Cobol85Parser.SPECIAL_NAMES) {
	            this.state = 1291;
	            this.environmentDivisionBody();
	            this.state = 1296;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	environmentDivisionBody() {
	    let localctx = new EnvironmentDivisionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, Cobol85Parser.RULE_environmentDivisionBody);
	    try {
	        this.state = 1300;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.CONFIGURATION:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1297;
	            this.configurationSection();
	            break;
	        case Cobol85Parser.SPECIAL_NAMES:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1298;
	            this.specialNamesParagraph();
	            break;
	        case Cobol85Parser.INPUT_OUTPUT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1299;
	            this.inputOutputSection();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	configurationSection() {
	    let localctx = new ConfigurationSectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, Cobol85Parser.RULE_configurationSection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1302;
	        this.match(Cobol85Parser.CONFIGURATION);
	        this.state = 1303;
	        this.match(Cobol85Parser.SECTION);
	        this.state = 1304;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 1308;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1305;
	                this.configurationSectionParagraph(); 
	            }
	            this.state = 1310;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	configurationSectionParagraph() {
	    let localctx = new ConfigurationSectionParagraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, Cobol85Parser.RULE_configurationSectionParagraph);
	    try {
	        this.state = 1314;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.SOURCE_COMPUTER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1311;
	            this.sourceComputerParagraph();
	            break;
	        case Cobol85Parser.OBJECT_COMPUTER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1312;
	            this.objectComputerParagraph();
	            break;
	        case Cobol85Parser.SPECIAL_NAMES:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1313;
	            this.specialNamesParagraph();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceComputerParagraph() {
	    let localctx = new SourceComputerParagraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, Cobol85Parser.RULE_sourceComputerParagraph);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1316;
	        this.match(Cobol85Parser.SOURCE_COMPUTER);
	        this.state = 1317;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 1318;
	        this.computerName();
	        this.state = 1324;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.DEBUGGING || _la===Cobol85Parser.WITH) {
	            this.state = 1320;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.WITH) {
	                this.state = 1319;
	                this.match(Cobol85Parser.WITH);
	            }

	            this.state = 1322;
	            this.match(Cobol85Parser.DEBUGGING);
	            this.state = 1323;
	            this.match(Cobol85Parser.MODE);
	        }

	        this.state = 1326;
	        this.match(Cobol85Parser.DOT_FS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectComputerParagraph() {
	    let localctx = new ObjectComputerParagraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, Cobol85Parser.RULE_objectComputerParagraph);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1328;
	        this.match(Cobol85Parser.OBJECT_COMPUTER);
	        this.state = 1329;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 1330;
	        this.computerName();
	        this.state = 1334;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.CHARACTER || _la===Cobol85Parser.COLLATING || _la===Cobol85Parser.DISK || _la===Cobol85Parser.MEMORY || _la===Cobol85Parser.PROGRAM || _la===Cobol85Parser.SEGMENT_LIMIT || _la===Cobol85Parser.SEQUENCE) {
	            this.state = 1331;
	            this.objectComputerClause();
	            this.state = 1336;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1337;
	        this.match(Cobol85Parser.DOT_FS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectComputerClause() {
	    let localctx = new ObjectComputerClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, Cobol85Parser.RULE_objectComputerClause);
	    try {
	        this.state = 1344;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.MEMORY:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1339;
	            this.memorySizeClause();
	            break;
	        case Cobol85Parser.DISK:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1340;
	            this.diskSizeClause();
	            break;
	        case Cobol85Parser.COLLATING:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.SEQUENCE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1341;
	            this.collatingSequenceClause();
	            break;
	        case Cobol85Parser.SEGMENT_LIMIT:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1342;
	            this.segmentLimitClause();
	            break;
	        case Cobol85Parser.CHARACTER:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1343;
	            this.characterSetClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memorySizeClause() {
	    let localctx = new MemorySizeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, Cobol85Parser.RULE_memorySizeClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1346;
	        this.match(Cobol85Parser.MEMORY);
	        this.state = 1348;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.SIZE) {
	            this.state = 1347;
	            this.match(Cobol85Parser.SIZE);
	        }

	        this.state = 1352;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.LEVEL_NUMBER_66:
	        case Cobol85Parser.LEVEL_NUMBER_77:
	        case Cobol85Parser.LEVEL_NUMBER_88:
	        case Cobol85Parser.INTEGERLITERAL:
	            this.state = 1350;
	            this.integerLiteral();
	            break;
	        case Cobol85Parser.ABORT:
	        case Cobol85Parser.AS:
	        case Cobol85Parser.ASCII:
	        case Cobol85Parser.ASSOCIATED_DATA:
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	        case Cobol85Parser.ATTRIBUTE:
	        case Cobol85Parser.AUTO:
	        case Cobol85Parser.AUTO_SKIP:
	        case Cobol85Parser.BACKGROUND_COLOR:
	        case Cobol85Parser.BACKGROUND_COLOUR:
	        case Cobol85Parser.BEEP:
	        case Cobol85Parser.BELL:
	        case Cobol85Parser.BINARY:
	        case Cobol85Parser.BIT:
	        case Cobol85Parser.BLINK:
	        case Cobol85Parser.BOUNDS:
	        case Cobol85Parser.CAPABLE:
	        case Cobol85Parser.CCSVERSION:
	        case Cobol85Parser.CHANGED:
	        case Cobol85Parser.CHANNEL:
	        case Cobol85Parser.CLOSE_DISPOSITION:
	        case Cobol85Parser.COBOL:
	        case Cobol85Parser.COMMITMENT:
	        case Cobol85Parser.CONTROL_POINT:
	        case Cobol85Parser.CONVENTION:
	        case Cobol85Parser.CRUNCH:
	        case Cobol85Parser.CURSOR:
	        case Cobol85Parser.DEFAULT:
	        case Cobol85Parser.DEFAULT_DISPLAY:
	        case Cobol85Parser.DEFINITION:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.DISK:
	        case Cobol85Parser.DONTCARE:
	        case Cobol85Parser.DOUBLE:
	        case Cobol85Parser.EBCDIC:
	        case Cobol85Parser.EMPTY_CHECK:
	        case Cobol85Parser.ENTER:
	        case Cobol85Parser.ENTRY_PROCEDURE:
	        case Cobol85Parser.ERASE:
	        case Cobol85Parser.EOL:
	        case Cobol85Parser.EOS:
	        case Cobol85Parser.ESCAPE:
	        case Cobol85Parser.EVENT:
	        case Cobol85Parser.EXCLUSIVE:
	        case Cobol85Parser.EXPORT:
	        case Cobol85Parser.EXTENDED:
	        case Cobol85Parser.FOREGROUND_COLOR:
	        case Cobol85Parser.FOREGROUND_COLOUR:
	        case Cobol85Parser.FULL:
	        case Cobol85Parser.FUNCTIONNAME:
	        case Cobol85Parser.FUNCTION_POINTER:
	        case Cobol85Parser.GRID:
	        case Cobol85Parser.HIGHLIGHT:
	        case Cobol85Parser.IMPLICIT:
	        case Cobol85Parser.IMPORT:
	        case Cobol85Parser.INTEGER:
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.KEYBOARD:
	        case Cobol85Parser.LANGUAGE:
	        case Cobol85Parser.LB:
	        case Cobol85Parser.LD:
	        case Cobol85Parser.LEFTLINE:
	        case Cobol85Parser.LENGTH_CHECK:
	        case Cobol85Parser.LIBACCESS:
	        case Cobol85Parser.LIBPARAMETER:
	        case Cobol85Parser.LIBRARY:
	        case Cobol85Parser.LIST:
	        case Cobol85Parser.LOCAL:
	        case Cobol85Parser.LONG_DATE:
	        case Cobol85Parser.LONG_TIME:
	        case Cobol85Parser.LOWER:
	        case Cobol85Parser.LOWLIGHT:
	        case Cobol85Parser.MMDDYYYY:
	        case Cobol85Parser.NAMED:
	        case Cobol85Parser.NATIONAL:
	        case Cobol85Parser.NATIONAL_EDITED:
	        case Cobol85Parser.NETWORK:
	        case Cobol85Parser.NO_ECHO:
	        case Cobol85Parser.NUMERIC_DATE:
	        case Cobol85Parser.NUMERIC_TIME:
	        case Cobol85Parser.ODT:
	        case Cobol85Parser.ORDERLY:
	        case Cobol85Parser.OVERLINE:
	        case Cobol85Parser.OWN:
	        case Cobol85Parser.PASSWORD:
	        case Cobol85Parser.PORT:
	        case Cobol85Parser.PRINTER:
	        case Cobol85Parser.PRIVATE:
	        case Cobol85Parser.PROCESS:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.PROMPT:
	        case Cobol85Parser.READER:
	        case Cobol85Parser.REMOTE:
	        case Cobol85Parser.REAL:
	        case Cobol85Parser.RECEIVED:
	        case Cobol85Parser.RECURSIVE:
	        case Cobol85Parser.REF:
	        case Cobol85Parser.REMOVE:
	        case Cobol85Parser.REQUIRED:
	        case Cobol85Parser.REVERSE_VIDEO:
	        case Cobol85Parser.SAVE:
	        case Cobol85Parser.SECURE:
	        case Cobol85Parser.SHARED:
	        case Cobol85Parser.SHAREDBYALL:
	        case Cobol85Parser.SHAREDBYRUNUNIT:
	        case Cobol85Parser.SHARING:
	        case Cobol85Parser.SHORT_DATE:
	        case Cobol85Parser.SYMBOL:
	        case Cobol85Parser.TASK:
	        case Cobol85Parser.THREAD:
	        case Cobol85Parser.THREAD_LOCAL:
	        case Cobol85Parser.TIMER:
	        case Cobol85Parser.TODAYS_DATE:
	        case Cobol85Parser.TODAYS_NAME:
	        case Cobol85Parser.TRUNCATED:
	        case Cobol85Parser.TYPEDEF:
	        case Cobol85Parser.UNDERLINE:
	        case Cobol85Parser.VIRTUAL:
	        case Cobol85Parser.WAIT:
	        case Cobol85Parser.YEAR:
	        case Cobol85Parser.YYYYMMDD:
	        case Cobol85Parser.YYYYDDD:
	        case Cobol85Parser.ZERO_FILL:
	        case Cobol85Parser.IDENTIFIER:
	            this.state = 1351;
	            this.cobolWord();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1355;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.CHARACTERS || _la===Cobol85Parser.MODULES || _la===Cobol85Parser.WORDS) {
	            this.state = 1354;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.CHARACTERS || _la===Cobol85Parser.MODULES || _la===Cobol85Parser.WORDS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	diskSizeClause() {
	    let localctx = new DiskSizeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, Cobol85Parser.RULE_diskSizeClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1357;
	        this.match(Cobol85Parser.DISK);
	        this.state = 1359;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.SIZE) {
	            this.state = 1358;
	            this.match(Cobol85Parser.SIZE);
	        }

	        this.state = 1362;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 1361;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 1366;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.LEVEL_NUMBER_66:
	        case Cobol85Parser.LEVEL_NUMBER_77:
	        case Cobol85Parser.LEVEL_NUMBER_88:
	        case Cobol85Parser.INTEGERLITERAL:
	            this.state = 1364;
	            this.integerLiteral();
	            break;
	        case Cobol85Parser.ABORT:
	        case Cobol85Parser.AS:
	        case Cobol85Parser.ASCII:
	        case Cobol85Parser.ASSOCIATED_DATA:
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	        case Cobol85Parser.ATTRIBUTE:
	        case Cobol85Parser.AUTO:
	        case Cobol85Parser.AUTO_SKIP:
	        case Cobol85Parser.BACKGROUND_COLOR:
	        case Cobol85Parser.BACKGROUND_COLOUR:
	        case Cobol85Parser.BEEP:
	        case Cobol85Parser.BELL:
	        case Cobol85Parser.BINARY:
	        case Cobol85Parser.BIT:
	        case Cobol85Parser.BLINK:
	        case Cobol85Parser.BOUNDS:
	        case Cobol85Parser.CAPABLE:
	        case Cobol85Parser.CCSVERSION:
	        case Cobol85Parser.CHANGED:
	        case Cobol85Parser.CHANNEL:
	        case Cobol85Parser.CLOSE_DISPOSITION:
	        case Cobol85Parser.COBOL:
	        case Cobol85Parser.COMMITMENT:
	        case Cobol85Parser.CONTROL_POINT:
	        case Cobol85Parser.CONVENTION:
	        case Cobol85Parser.CRUNCH:
	        case Cobol85Parser.CURSOR:
	        case Cobol85Parser.DEFAULT:
	        case Cobol85Parser.DEFAULT_DISPLAY:
	        case Cobol85Parser.DEFINITION:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.DISK:
	        case Cobol85Parser.DONTCARE:
	        case Cobol85Parser.DOUBLE:
	        case Cobol85Parser.EBCDIC:
	        case Cobol85Parser.EMPTY_CHECK:
	        case Cobol85Parser.ENTER:
	        case Cobol85Parser.ENTRY_PROCEDURE:
	        case Cobol85Parser.ERASE:
	        case Cobol85Parser.EOL:
	        case Cobol85Parser.EOS:
	        case Cobol85Parser.ESCAPE:
	        case Cobol85Parser.EVENT:
	        case Cobol85Parser.EXCLUSIVE:
	        case Cobol85Parser.EXPORT:
	        case Cobol85Parser.EXTENDED:
	        case Cobol85Parser.FOREGROUND_COLOR:
	        case Cobol85Parser.FOREGROUND_COLOUR:
	        case Cobol85Parser.FULL:
	        case Cobol85Parser.FUNCTIONNAME:
	        case Cobol85Parser.FUNCTION_POINTER:
	        case Cobol85Parser.GRID:
	        case Cobol85Parser.HIGHLIGHT:
	        case Cobol85Parser.IMPLICIT:
	        case Cobol85Parser.IMPORT:
	        case Cobol85Parser.INTEGER:
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.KEYBOARD:
	        case Cobol85Parser.LANGUAGE:
	        case Cobol85Parser.LB:
	        case Cobol85Parser.LD:
	        case Cobol85Parser.LEFTLINE:
	        case Cobol85Parser.LENGTH_CHECK:
	        case Cobol85Parser.LIBACCESS:
	        case Cobol85Parser.LIBPARAMETER:
	        case Cobol85Parser.LIBRARY:
	        case Cobol85Parser.LIST:
	        case Cobol85Parser.LOCAL:
	        case Cobol85Parser.LONG_DATE:
	        case Cobol85Parser.LONG_TIME:
	        case Cobol85Parser.LOWER:
	        case Cobol85Parser.LOWLIGHT:
	        case Cobol85Parser.MMDDYYYY:
	        case Cobol85Parser.NAMED:
	        case Cobol85Parser.NATIONAL:
	        case Cobol85Parser.NATIONAL_EDITED:
	        case Cobol85Parser.NETWORK:
	        case Cobol85Parser.NO_ECHO:
	        case Cobol85Parser.NUMERIC_DATE:
	        case Cobol85Parser.NUMERIC_TIME:
	        case Cobol85Parser.ODT:
	        case Cobol85Parser.ORDERLY:
	        case Cobol85Parser.OVERLINE:
	        case Cobol85Parser.OWN:
	        case Cobol85Parser.PASSWORD:
	        case Cobol85Parser.PORT:
	        case Cobol85Parser.PRINTER:
	        case Cobol85Parser.PRIVATE:
	        case Cobol85Parser.PROCESS:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.PROMPT:
	        case Cobol85Parser.READER:
	        case Cobol85Parser.REMOTE:
	        case Cobol85Parser.REAL:
	        case Cobol85Parser.RECEIVED:
	        case Cobol85Parser.RECURSIVE:
	        case Cobol85Parser.REF:
	        case Cobol85Parser.REMOVE:
	        case Cobol85Parser.REQUIRED:
	        case Cobol85Parser.REVERSE_VIDEO:
	        case Cobol85Parser.SAVE:
	        case Cobol85Parser.SECURE:
	        case Cobol85Parser.SHARED:
	        case Cobol85Parser.SHAREDBYALL:
	        case Cobol85Parser.SHAREDBYRUNUNIT:
	        case Cobol85Parser.SHARING:
	        case Cobol85Parser.SHORT_DATE:
	        case Cobol85Parser.SYMBOL:
	        case Cobol85Parser.TASK:
	        case Cobol85Parser.THREAD:
	        case Cobol85Parser.THREAD_LOCAL:
	        case Cobol85Parser.TIMER:
	        case Cobol85Parser.TODAYS_DATE:
	        case Cobol85Parser.TODAYS_NAME:
	        case Cobol85Parser.TRUNCATED:
	        case Cobol85Parser.TYPEDEF:
	        case Cobol85Parser.UNDERLINE:
	        case Cobol85Parser.VIRTUAL:
	        case Cobol85Parser.WAIT:
	        case Cobol85Parser.YEAR:
	        case Cobol85Parser.YYYYMMDD:
	        case Cobol85Parser.YYYYDDD:
	        case Cobol85Parser.ZERO_FILL:
	        case Cobol85Parser.IDENTIFIER:
	            this.state = 1365;
	            this.cobolWord();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1369;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.MODULES || _la===Cobol85Parser.WORDS) {
	            this.state = 1368;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.MODULES || _la===Cobol85Parser.WORDS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collatingSequenceClause() {
	    let localctx = new CollatingSequenceClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, Cobol85Parser.RULE_collatingSequenceClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1372;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.PROGRAM) {
	            this.state = 1371;
	            this.match(Cobol85Parser.PROGRAM);
	        }

	        this.state = 1375;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.COLLATING) {
	            this.state = 1374;
	            this.match(Cobol85Parser.COLLATING);
	        }

	        this.state = 1377;
	        this.match(Cobol85Parser.SEQUENCE);

	        this.state = 1379;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 1378;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 1382; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1381;
	        		this.alphabetName();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1384; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,37, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 1387;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        if(la_===1) {
	            this.state = 1386;
	            this.collatingSequenceClauseAlphanumeric();

	        }
	        this.state = 1390;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FOR || _la===Cobol85Parser.NATIONAL) {
	            this.state = 1389;
	            this.collatingSequenceClauseNational();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collatingSequenceClauseAlphanumeric() {
	    let localctx = new CollatingSequenceClauseAlphanumericContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, Cobol85Parser.RULE_collatingSequenceClauseAlphanumeric);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1393;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FOR) {
	            this.state = 1392;
	            this.match(Cobol85Parser.FOR);
	        }

	        this.state = 1395;
	        this.match(Cobol85Parser.ALPHANUMERIC);
	        this.state = 1397;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 1396;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 1399;
	        this.alphabetName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collatingSequenceClauseNational() {
	    let localctx = new CollatingSequenceClauseNationalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, Cobol85Parser.RULE_collatingSequenceClauseNational);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1402;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FOR) {
	            this.state = 1401;
	            this.match(Cobol85Parser.FOR);
	        }

	        this.state = 1404;
	        this.match(Cobol85Parser.NATIONAL);
	        this.state = 1406;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 1405;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 1408;
	        this.alphabetName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	segmentLimitClause() {
	    let localctx = new SegmentLimitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, Cobol85Parser.RULE_segmentLimitClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1410;
	        this.match(Cobol85Parser.SEGMENT_LIMIT);
	        this.state = 1412;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 1411;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 1414;
	        this.integerLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	characterSetClause() {
	    let localctx = new CharacterSetClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, Cobol85Parser.RULE_characterSetClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1416;
	        this.match(Cobol85Parser.CHARACTER);
	        this.state = 1417;
	        this.match(Cobol85Parser.SET);
	        this.state = 1418;
	        this.match(Cobol85Parser.DOT_FS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	specialNamesParagraph() {
	    let localctx = new SpecialNamesParagraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, Cobol85Parser.RULE_specialNamesParagraph);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1420;
	        this.match(Cobol85Parser.SPECIAL_NAMES);
	        this.state = 1421;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 1429;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ALPHABET) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)) | (1 << (Cobol85Parser.CLASS - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURRENCY - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DECIMAL_POINT - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.OFF - 317)) | (1 << (Cobol85Parser.ON - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.RESERVE - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.SYMBOLIC - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la===Cobol85Parser.IDENTIFIER) {
	            this.state = 1423; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1422;
	                this.specialNameClause();
	                this.state = 1425; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ALPHABET) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)) | (1 << (Cobol85Parser.CLASS - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURRENCY - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DECIMAL_POINT - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.OFF - 317)) | (1 << (Cobol85Parser.ON - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.RESERVE - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.SYMBOLIC - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la===Cobol85Parser.IDENTIFIER);
	            this.state = 1427;
	            this.match(Cobol85Parser.DOT_FS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	specialNameClause() {
	    let localctx = new SpecialNameClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, Cobol85Parser.RULE_specialNameClause);
	    try {
	        this.state = 1442;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1431;
	            this.channelClause();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1432;
	            this.odtClause();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1433;
	            this.alphabetClause();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1434;
	            this.classClause();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1435;
	            this.currencySignClause();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1436;
	            this.decimalPointClause();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1437;
	            this.symbolicCharactersClause();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1438;
	            this.environmentSwitchNameClause();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1439;
	            this.defaultDisplaySignClause();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1440;
	            this.defaultComputationalSignClause();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1441;
	            this.reserveNetworkClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alphabetClause() {
	    let localctx = new AlphabetClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, Cobol85Parser.RULE_alphabetClause);
	    try {
	        this.state = 1446;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1444;
	            this.alphabetClauseFormat1();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1445;
	            this.alphabetClauseFormat2();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alphabetClauseFormat1() {
	    let localctx = new AlphabetClauseFormat1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, Cobol85Parser.RULE_alphabetClauseFormat1);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1448;
	        this.match(Cobol85Parser.ALPHABET);
	        this.state = 1449;
	        this.alphabetName();
	        this.state = 1452;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FOR) {
	            this.state = 1450;
	            this.match(Cobol85Parser.FOR);
	            this.state = 1451;
	            this.match(Cobol85Parser.ALPHANUMERIC);
	        }

	        this.state = 1455;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 1454;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 1468;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1457;
	            this.match(Cobol85Parser.EBCDIC);
	            break;

	        case 2:
	            this.state = 1458;
	            this.match(Cobol85Parser.ASCII);
	            break;

	        case 3:
	            this.state = 1459;
	            this.match(Cobol85Parser.STANDARD_1);
	            break;

	        case 4:
	            this.state = 1460;
	            this.match(Cobol85Parser.STANDARD_2);
	            break;

	        case 5:
	            this.state = 1461;
	            this.match(Cobol85Parser.NATIVE);
	            break;

	        case 6:
	            this.state = 1462;
	            this.cobolWord();
	            break;

	        case 7:
	            this.state = 1464; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1463;
	            		this.alphabetLiterals();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1466; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,51, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alphabetLiterals() {
	    let localctx = new AlphabetLiteralsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, Cobol85Parser.RULE_alphabetLiterals);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1470;
	        this.literal();
	        this.state = 1477;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case Cobol85Parser.THROUGH:
	        case Cobol85Parser.THRU:
	        	this.state = 1471;
	        	this.alphabetThrough();
	        	break;
	        case Cobol85Parser.ALSO:
	        	this.state = 1473; 
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	do {
	        	    this.state = 1472;
	        	    this.alphabetAlso();
	        	    this.state = 1475; 
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	} while(_la===Cobol85Parser.ALSO);
	        	break;
	        case Cobol85Parser.ABORT:
	        case Cobol85Parser.ALL:
	        case Cobol85Parser.ALPHABET:
	        case Cobol85Parser.AS:
	        case Cobol85Parser.ASCII:
	        case Cobol85Parser.ASSOCIATED_DATA:
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	        case Cobol85Parser.ATTRIBUTE:
	        case Cobol85Parser.AUTO:
	        case Cobol85Parser.AUTO_SKIP:
	        case Cobol85Parser.BACKGROUND_COLOR:
	        case Cobol85Parser.BACKGROUND_COLOUR:
	        case Cobol85Parser.BEEP:
	        case Cobol85Parser.BELL:
	        case Cobol85Parser.BINARY:
	        case Cobol85Parser.BIT:
	        case Cobol85Parser.BLINK:
	        case Cobol85Parser.BOUNDS:
	        case Cobol85Parser.CAPABLE:
	        case Cobol85Parser.CCSVERSION:
	        case Cobol85Parser.CHANGED:
	        case Cobol85Parser.CHANNEL:
	        case Cobol85Parser.CLASS:
	        case Cobol85Parser.CLOSE_DISPOSITION:
	        case Cobol85Parser.COBOL:
	        case Cobol85Parser.COMMITMENT:
	        case Cobol85Parser.CONTROL_POINT:
	        case Cobol85Parser.CONVENTION:
	        case Cobol85Parser.CRUNCH:
	        case Cobol85Parser.CURRENCY:
	        case Cobol85Parser.CURSOR:
	        case Cobol85Parser.DECIMAL_POINT:
	        case Cobol85Parser.DEFAULT:
	        case Cobol85Parser.DEFAULT_DISPLAY:
	        case Cobol85Parser.DEFINITION:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.DISK:
	        case Cobol85Parser.DONTCARE:
	        case Cobol85Parser.DOUBLE:
	        case Cobol85Parser.EBCDIC:
	        case Cobol85Parser.EMPTY_CHECK:
	        case Cobol85Parser.ENTER:
	        case Cobol85Parser.ENTRY_PROCEDURE:
	        case Cobol85Parser.ERASE:
	        case Cobol85Parser.EOL:
	        case Cobol85Parser.EOS:
	        case Cobol85Parser.ESCAPE:
	        case Cobol85Parser.EVENT:
	        case Cobol85Parser.EXCLUSIVE:
	        case Cobol85Parser.EXPORT:
	        case Cobol85Parser.EXTENDED:
	        case Cobol85Parser.FALSE:
	        case Cobol85Parser.FOREGROUND_COLOR:
	        case Cobol85Parser.FOREGROUND_COLOUR:
	        case Cobol85Parser.FULL:
	        case Cobol85Parser.FUNCTIONNAME:
	        case Cobol85Parser.FUNCTION_POINTER:
	        case Cobol85Parser.GRID:
	        case Cobol85Parser.HIGHLIGHT:
	        case Cobol85Parser.HIGH_VALUE:
	        case Cobol85Parser.HIGH_VALUES:
	        case Cobol85Parser.IMPLICIT:
	        case Cobol85Parser.IMPORT:
	        case Cobol85Parser.INTEGER:
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.KEYBOARD:
	        case Cobol85Parser.LANGUAGE:
	        case Cobol85Parser.LB:
	        case Cobol85Parser.LD:
	        case Cobol85Parser.LEFTLINE:
	        case Cobol85Parser.LENGTH_CHECK:
	        case Cobol85Parser.LIBACCESS:
	        case Cobol85Parser.LIBPARAMETER:
	        case Cobol85Parser.LIBRARY:
	        case Cobol85Parser.LIST:
	        case Cobol85Parser.LOCAL:
	        case Cobol85Parser.LONG_DATE:
	        case Cobol85Parser.LONG_TIME:
	        case Cobol85Parser.LOWER:
	        case Cobol85Parser.LOWLIGHT:
	        case Cobol85Parser.LOW_VALUE:
	        case Cobol85Parser.LOW_VALUES:
	        case Cobol85Parser.MMDDYYYY:
	        case Cobol85Parser.NAMED:
	        case Cobol85Parser.NATIONAL:
	        case Cobol85Parser.NATIONAL_EDITED:
	        case Cobol85Parser.NETWORK:
	        case Cobol85Parser.NO_ECHO:
	        case Cobol85Parser.NULL_:
	        case Cobol85Parser.NULLS:
	        case Cobol85Parser.NUMERIC_DATE:
	        case Cobol85Parser.NUMERIC_TIME:
	        case Cobol85Parser.ODT:
	        case Cobol85Parser.OFF:
	        case Cobol85Parser.ON:
	        case Cobol85Parser.ORDERLY:
	        case Cobol85Parser.OVERLINE:
	        case Cobol85Parser.OWN:
	        case Cobol85Parser.PASSWORD:
	        case Cobol85Parser.PORT:
	        case Cobol85Parser.PRINTER:
	        case Cobol85Parser.PRIVATE:
	        case Cobol85Parser.PROCESS:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.PROMPT:
	        case Cobol85Parser.QUOTE:
	        case Cobol85Parser.QUOTES:
	        case Cobol85Parser.READER:
	        case Cobol85Parser.REMOTE:
	        case Cobol85Parser.REAL:
	        case Cobol85Parser.RECEIVED:
	        case Cobol85Parser.RECURSIVE:
	        case Cobol85Parser.REF:
	        case Cobol85Parser.REMOVE:
	        case Cobol85Parser.REQUIRED:
	        case Cobol85Parser.RESERVE:
	        case Cobol85Parser.REVERSE_VIDEO:
	        case Cobol85Parser.SAVE:
	        case Cobol85Parser.SECURE:
	        case Cobol85Parser.SHARED:
	        case Cobol85Parser.SHAREDBYALL:
	        case Cobol85Parser.SHAREDBYRUNUNIT:
	        case Cobol85Parser.SHARING:
	        case Cobol85Parser.SHORT_DATE:
	        case Cobol85Parser.SPACE:
	        case Cobol85Parser.SPACES:
	        case Cobol85Parser.SYMBOL:
	        case Cobol85Parser.SYMBOLIC:
	        case Cobol85Parser.TASK:
	        case Cobol85Parser.THREAD:
	        case Cobol85Parser.THREAD_LOCAL:
	        case Cobol85Parser.TIMER:
	        case Cobol85Parser.TODAYS_DATE:
	        case Cobol85Parser.TODAYS_NAME:
	        case Cobol85Parser.TRUE:
	        case Cobol85Parser.TRUNCATED:
	        case Cobol85Parser.TYPEDEF:
	        case Cobol85Parser.UNDERLINE:
	        case Cobol85Parser.VIRTUAL:
	        case Cobol85Parser.WAIT:
	        case Cobol85Parser.YEAR:
	        case Cobol85Parser.YYYYMMDD:
	        case Cobol85Parser.YYYYDDD:
	        case Cobol85Parser.ZERO:
	        case Cobol85Parser.ZERO_FILL:
	        case Cobol85Parser.ZEROS:
	        case Cobol85Parser.ZEROES:
	        case Cobol85Parser.DOT_FS:
	        case Cobol85Parser.NONNUMERICLITERAL:
	        case Cobol85Parser.LEVEL_NUMBER_66:
	        case Cobol85Parser.LEVEL_NUMBER_77:
	        case Cobol85Parser.LEVEL_NUMBER_88:
	        case Cobol85Parser.INTEGERLITERAL:
	        case Cobol85Parser.NUMERICLITERAL:
	        case Cobol85Parser.IDENTIFIER:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alphabetThrough() {
	    let localctx = new AlphabetThroughContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, Cobol85Parser.RULE_alphabetThrough);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1479;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.THROUGH || _la===Cobol85Parser.THRU)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1480;
	        this.literal();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alphabetAlso() {
	    let localctx = new AlphabetAlsoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, Cobol85Parser.RULE_alphabetAlso);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1482;
	        this.match(Cobol85Parser.ALSO);
	        this.state = 1484; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1483;
	        		this.literal();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1486; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,55, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alphabetClauseFormat2() {
	    let localctx = new AlphabetClauseFormat2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, Cobol85Parser.RULE_alphabetClauseFormat2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1488;
	        this.match(Cobol85Parser.ALPHABET);
	        this.state = 1489;
	        this.alphabetName();
	        this.state = 1491;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FOR) {
	            this.state = 1490;
	            this.match(Cobol85Parser.FOR);
	        }

	        this.state = 1493;
	        this.match(Cobol85Parser.NATIONAL);
	        this.state = 1495;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 1494;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 1500;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.NATIVE:
	            this.state = 1497;
	            this.match(Cobol85Parser.NATIVE);
	            break;
	        case Cobol85Parser.CCSVERSION:
	            this.state = 1498;
	            this.match(Cobol85Parser.CCSVERSION);
	            this.state = 1499;
	            this.literal();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	channelClause() {
	    let localctx = new ChannelClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, Cobol85Parser.RULE_channelClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1502;
	        this.match(Cobol85Parser.CHANNEL);
	        this.state = 1503;
	        this.integerLiteral();
	        this.state = 1505;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 1504;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 1507;
	        this.mnemonicName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classClause() {
	    let localctx = new ClassClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, Cobol85Parser.RULE_classClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1509;
	        this.match(Cobol85Parser.CLASS);
	        this.state = 1510;
	        this.className();
	        this.state = 1515;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	        if(la_===1) {
	            this.state = 1512;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.FOR) {
	                this.state = 1511;
	                this.match(Cobol85Parser.FOR);
	            }

	            this.state = 1514;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.ALPHANUMERIC || _la===Cobol85Parser.NATIONAL)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 1518;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 1517;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 1521; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1520;
	        		this.classClauseThrough();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1523; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,63, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classClauseThrough() {
	    let localctx = new ClassClauseThroughContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, Cobol85Parser.RULE_classClauseThrough);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1525;
	        this.classClauseFrom();
	        this.state = 1528;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.THROUGH || _la===Cobol85Parser.THRU) {
	            this.state = 1526;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.THROUGH || _la===Cobol85Parser.THRU)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1527;
	            this.classClauseTo();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classClauseFrom() {
	    let localctx = new ClassClauseFromContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, Cobol85Parser.RULE_classClauseFrom);
	    try {
	        this.state = 1532;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1530;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1531;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classClauseTo() {
	    let localctx = new ClassClauseToContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, Cobol85Parser.RULE_classClauseTo);
	    try {
	        this.state = 1536;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1534;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1535;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	currencySignClause() {
	    let localctx = new CurrencySignClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, Cobol85Parser.RULE_currencySignClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1538;
	        this.match(Cobol85Parser.CURRENCY);
	        this.state = 1540;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.SIGN) {
	            this.state = 1539;
	            this.match(Cobol85Parser.SIGN);
	        }

	        this.state = 1543;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 1542;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 1545;
	        this.literal();
	        this.state = 1552;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.PICTURE || _la===Cobol85Parser.WITH) {
	            this.state = 1547;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.WITH) {
	                this.state = 1546;
	                this.match(Cobol85Parser.WITH);
	            }

	            this.state = 1549;
	            this.match(Cobol85Parser.PICTURE);
	            this.state = 1550;
	            this.match(Cobol85Parser.SYMBOL);
	            this.state = 1551;
	            this.literal();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decimalPointClause() {
	    let localctx = new DecimalPointClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, Cobol85Parser.RULE_decimalPointClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1554;
	        this.match(Cobol85Parser.DECIMAL_POINT);
	        this.state = 1556;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 1555;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 1558;
	        this.match(Cobol85Parser.COMMA);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultComputationalSignClause() {
	    let localctx = new DefaultComputationalSignClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, Cobol85Parser.RULE_defaultComputationalSignClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1560;
	        this.match(Cobol85Parser.DEFAULT);
	        this.state = 1562;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.COMP || _la===Cobol85Parser.COMPUTATIONAL) {
	            this.state = 1561;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.COMP || _la===Cobol85Parser.COMPUTATIONAL)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1568;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.SIGN) {
	            this.state = 1564;
	            this.match(Cobol85Parser.SIGN);
	            this.state = 1566;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.IS) {
	                this.state = 1565;
	                this.match(Cobol85Parser.IS);
	            }

	        }

	        this.state = 1571;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.LEADING || _la===Cobol85Parser.TRAILING) {
	            this.state = 1570;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.LEADING || _la===Cobol85Parser.TRAILING)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1573;
	        this.match(Cobol85Parser.SEPARATE);
	        this.state = 1575;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.CHARACTER) {
	            this.state = 1574;
	            this.match(Cobol85Parser.CHARACTER);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultDisplaySignClause() {
	    let localctx = new DefaultDisplaySignClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, Cobol85Parser.RULE_defaultDisplaySignClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1577;
	        this.match(Cobol85Parser.DEFAULT_DISPLAY);
	        this.state = 1582;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.SIGN) {
	            this.state = 1578;
	            this.match(Cobol85Parser.SIGN);
	            this.state = 1580;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.IS) {
	                this.state = 1579;
	                this.match(Cobol85Parser.IS);
	            }

	        }

	        this.state = 1584;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.LEADING || _la===Cobol85Parser.TRAILING)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1589;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.SEPARATE) {
	            this.state = 1585;
	            this.match(Cobol85Parser.SEPARATE);
	            this.state = 1587;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.CHARACTER) {
	                this.state = 1586;
	                this.match(Cobol85Parser.CHARACTER);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	environmentSwitchNameClause() {
	    let localctx = new EnvironmentSwitchNameClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, Cobol85Parser.RULE_environmentSwitchNameClause);
	    var _la = 0; // Token type
	    try {
	        this.state = 1600;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.ABORT:
	        case Cobol85Parser.AS:
	        case Cobol85Parser.ASCII:
	        case Cobol85Parser.ASSOCIATED_DATA:
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	        case Cobol85Parser.ATTRIBUTE:
	        case Cobol85Parser.AUTO:
	        case Cobol85Parser.AUTO_SKIP:
	        case Cobol85Parser.BACKGROUND_COLOR:
	        case Cobol85Parser.BACKGROUND_COLOUR:
	        case Cobol85Parser.BEEP:
	        case Cobol85Parser.BELL:
	        case Cobol85Parser.BINARY:
	        case Cobol85Parser.BIT:
	        case Cobol85Parser.BLINK:
	        case Cobol85Parser.BOUNDS:
	        case Cobol85Parser.CAPABLE:
	        case Cobol85Parser.CCSVERSION:
	        case Cobol85Parser.CHANGED:
	        case Cobol85Parser.CHANNEL:
	        case Cobol85Parser.CLOSE_DISPOSITION:
	        case Cobol85Parser.COBOL:
	        case Cobol85Parser.COMMITMENT:
	        case Cobol85Parser.CONTROL_POINT:
	        case Cobol85Parser.CONVENTION:
	        case Cobol85Parser.CRUNCH:
	        case Cobol85Parser.CURSOR:
	        case Cobol85Parser.DEFAULT:
	        case Cobol85Parser.DEFAULT_DISPLAY:
	        case Cobol85Parser.DEFINITION:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.DISK:
	        case Cobol85Parser.DONTCARE:
	        case Cobol85Parser.DOUBLE:
	        case Cobol85Parser.EBCDIC:
	        case Cobol85Parser.EMPTY_CHECK:
	        case Cobol85Parser.ENTER:
	        case Cobol85Parser.ENTRY_PROCEDURE:
	        case Cobol85Parser.ERASE:
	        case Cobol85Parser.EOL:
	        case Cobol85Parser.EOS:
	        case Cobol85Parser.ESCAPE:
	        case Cobol85Parser.EVENT:
	        case Cobol85Parser.EXCLUSIVE:
	        case Cobol85Parser.EXPORT:
	        case Cobol85Parser.EXTENDED:
	        case Cobol85Parser.FOREGROUND_COLOR:
	        case Cobol85Parser.FOREGROUND_COLOUR:
	        case Cobol85Parser.FULL:
	        case Cobol85Parser.FUNCTIONNAME:
	        case Cobol85Parser.FUNCTION_POINTER:
	        case Cobol85Parser.GRID:
	        case Cobol85Parser.HIGHLIGHT:
	        case Cobol85Parser.IMPLICIT:
	        case Cobol85Parser.IMPORT:
	        case Cobol85Parser.INTEGER:
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.KEYBOARD:
	        case Cobol85Parser.LANGUAGE:
	        case Cobol85Parser.LB:
	        case Cobol85Parser.LD:
	        case Cobol85Parser.LEFTLINE:
	        case Cobol85Parser.LENGTH_CHECK:
	        case Cobol85Parser.LIBACCESS:
	        case Cobol85Parser.LIBPARAMETER:
	        case Cobol85Parser.LIBRARY:
	        case Cobol85Parser.LIST:
	        case Cobol85Parser.LOCAL:
	        case Cobol85Parser.LONG_DATE:
	        case Cobol85Parser.LONG_TIME:
	        case Cobol85Parser.LOWER:
	        case Cobol85Parser.LOWLIGHT:
	        case Cobol85Parser.MMDDYYYY:
	        case Cobol85Parser.NAMED:
	        case Cobol85Parser.NATIONAL:
	        case Cobol85Parser.NATIONAL_EDITED:
	        case Cobol85Parser.NETWORK:
	        case Cobol85Parser.NO_ECHO:
	        case Cobol85Parser.NUMERIC_DATE:
	        case Cobol85Parser.NUMERIC_TIME:
	        case Cobol85Parser.ODT:
	        case Cobol85Parser.ORDERLY:
	        case Cobol85Parser.OVERLINE:
	        case Cobol85Parser.OWN:
	        case Cobol85Parser.PASSWORD:
	        case Cobol85Parser.PORT:
	        case Cobol85Parser.PRINTER:
	        case Cobol85Parser.PRIVATE:
	        case Cobol85Parser.PROCESS:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.PROMPT:
	        case Cobol85Parser.READER:
	        case Cobol85Parser.REMOTE:
	        case Cobol85Parser.REAL:
	        case Cobol85Parser.RECEIVED:
	        case Cobol85Parser.RECURSIVE:
	        case Cobol85Parser.REF:
	        case Cobol85Parser.REMOVE:
	        case Cobol85Parser.REQUIRED:
	        case Cobol85Parser.REVERSE_VIDEO:
	        case Cobol85Parser.SAVE:
	        case Cobol85Parser.SECURE:
	        case Cobol85Parser.SHARED:
	        case Cobol85Parser.SHAREDBYALL:
	        case Cobol85Parser.SHAREDBYRUNUNIT:
	        case Cobol85Parser.SHARING:
	        case Cobol85Parser.SHORT_DATE:
	        case Cobol85Parser.SYMBOL:
	        case Cobol85Parser.TASK:
	        case Cobol85Parser.THREAD:
	        case Cobol85Parser.THREAD_LOCAL:
	        case Cobol85Parser.TIMER:
	        case Cobol85Parser.TODAYS_DATE:
	        case Cobol85Parser.TODAYS_NAME:
	        case Cobol85Parser.TRUNCATED:
	        case Cobol85Parser.TYPEDEF:
	        case Cobol85Parser.UNDERLINE:
	        case Cobol85Parser.VIRTUAL:
	        case Cobol85Parser.WAIT:
	        case Cobol85Parser.YEAR:
	        case Cobol85Parser.YYYYMMDD:
	        case Cobol85Parser.YYYYDDD:
	        case Cobol85Parser.ZERO_FILL:
	        case Cobol85Parser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1591;
	            this.environmentName();
	            this.state = 1593;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.IS) {
	                this.state = 1592;
	                this.match(Cobol85Parser.IS);
	            }

	            this.state = 1595;
	            this.mnemonicName();
	            this.state = 1597;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	            if(la_===1) {
	                this.state = 1596;
	                this.environmentSwitchNameSpecialNamesStatusPhrase();

	            }
	            break;
	        case Cobol85Parser.OFF:
	        case Cobol85Parser.ON:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1599;
	            this.environmentSwitchNameSpecialNamesStatusPhrase();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	environmentSwitchNameSpecialNamesStatusPhrase() {
	    let localctx = new EnvironmentSwitchNameSpecialNamesStatusPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, Cobol85Parser.RULE_environmentSwitchNameSpecialNamesStatusPhrase);
	    var _la = 0; // Token type
	    try {
	        this.state = 1638;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.ON:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1602;
	            this.match(Cobol85Parser.ON);
	            this.state = 1604;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.STATUS) {
	                this.state = 1603;
	                this.match(Cobol85Parser.STATUS);
	            }

	            this.state = 1607;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.IS) {
	                this.state = 1606;
	                this.match(Cobol85Parser.IS);
	            }

	            this.state = 1609;
	            this.condition();
	            this.state = 1618;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	            if(la_===1) {
	                this.state = 1610;
	                this.match(Cobol85Parser.OFF);
	                this.state = 1612;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Cobol85Parser.STATUS) {
	                    this.state = 1611;
	                    this.match(Cobol85Parser.STATUS);
	                }

	                this.state = 1615;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Cobol85Parser.IS) {
	                    this.state = 1614;
	                    this.match(Cobol85Parser.IS);
	                }

	                this.state = 1617;
	                this.condition();

	            }
	            break;
	        case Cobol85Parser.OFF:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1620;
	            this.match(Cobol85Parser.OFF);
	            this.state = 1622;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.STATUS) {
	                this.state = 1621;
	                this.match(Cobol85Parser.STATUS);
	            }

	            this.state = 1625;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.IS) {
	                this.state = 1624;
	                this.match(Cobol85Parser.IS);
	            }

	            this.state = 1627;
	            this.condition();
	            this.state = 1636;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	            if(la_===1) {
	                this.state = 1628;
	                this.match(Cobol85Parser.ON);
	                this.state = 1630;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Cobol85Parser.STATUS) {
	                    this.state = 1629;
	                    this.match(Cobol85Parser.STATUS);
	                }

	                this.state = 1633;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Cobol85Parser.IS) {
	                    this.state = 1632;
	                    this.match(Cobol85Parser.IS);
	                }

	                this.state = 1635;
	                this.condition();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	odtClause() {
	    let localctx = new OdtClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, Cobol85Parser.RULE_odtClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1640;
	        this.match(Cobol85Parser.ODT);
	        this.state = 1642;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 1641;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 1644;
	        this.mnemonicName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reserveNetworkClause() {
	    let localctx = new ReserveNetworkClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, Cobol85Parser.RULE_reserveNetworkClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1646;
	        this.match(Cobol85Parser.RESERVE);
	        this.state = 1648;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.WORDS) {
	            this.state = 1647;
	            this.match(Cobol85Parser.WORDS);
	        }

	        this.state = 1651;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.LIST) {
	            this.state = 1650;
	            this.match(Cobol85Parser.LIST);
	        }

	        this.state = 1654;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 1653;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 1656;
	        this.match(Cobol85Parser.NETWORK);
	        this.state = 1658;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	        if(la_===1) {
	            this.state = 1657;
	            this.match(Cobol85Parser.CAPABLE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	symbolicCharactersClause() {
	    let localctx = new SymbolicCharactersClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, Cobol85Parser.RULE_symbolicCharactersClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1660;
	        this.match(Cobol85Parser.SYMBOLIC);
	        this.state = 1662;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.CHARACTERS) {
	            this.state = 1661;
	            this.match(Cobol85Parser.CHARACTERS);
	        }

	        this.state = 1668;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	        if(la_===1) {
	            this.state = 1665;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.FOR) {
	                this.state = 1664;
	                this.match(Cobol85Parser.FOR);
	            }

	            this.state = 1667;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.ALPHANUMERIC || _la===Cobol85Parser.NATIONAL)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 1671; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1670;
	        		this.symbolicCharacters();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1673; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,103, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 1677;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IN) {
	            this.state = 1675;
	            this.match(Cobol85Parser.IN);
	            this.state = 1676;
	            this.alphabetName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	symbolicCharacters() {
	    let localctx = new SymbolicCharactersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, Cobol85Parser.RULE_symbolicCharacters);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1680; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1679;
	            this.symbolicCharacter();
	            this.state = 1682; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la===Cobol85Parser.IDENTIFIER);
	        this.state = 1685;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ARE || _la===Cobol85Parser.IS) {
	            this.state = 1684;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.ARE || _la===Cobol85Parser.IS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1688; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1687;
	            this.integerLiteral();
	            this.state = 1690; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inputOutputSection() {
	    let localctx = new InputOutputSectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, Cobol85Parser.RULE_inputOutputSection);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1692;
	        this.match(Cobol85Parser.INPUT_OUTPUT);
	        this.state = 1693;
	        this.match(Cobol85Parser.SECTION);
	        this.state = 1694;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 1698;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.FILE_CONTROL || _la===Cobol85Parser.I_O_CONTROL) {
	            this.state = 1695;
	            this.inputOutputSectionParagraph();
	            this.state = 1700;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inputOutputSectionParagraph() {
	    let localctx = new InputOutputSectionParagraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, Cobol85Parser.RULE_inputOutputSectionParagraph);
	    try {
	        this.state = 1703;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.FILE_CONTROL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1701;
	            this.fileControlParagraph();
	            break;
	        case Cobol85Parser.I_O_CONTROL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1702;
	            this.ioControlParagraph();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fileControlParagraph() {
	    let localctx = new FileControlParagraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, Cobol85Parser.RULE_fileControlParagraph);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1705;
	        this.match(Cobol85Parser.FILE_CONTROL);
	        this.state = 1712;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,111,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1707;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Cobol85Parser.DOT_FS) {
	                    this.state = 1706;
	                    this.match(Cobol85Parser.DOT_FS);
	                }

	                this.state = 1709;
	                this.fileControlEntry(); 
	            }
	            this.state = 1714;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,111,this._ctx);
	        }

	        this.state = 1715;
	        this.match(Cobol85Parser.DOT_FS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fileControlEntry() {
	    let localctx = new FileControlEntryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, Cobol85Parser.RULE_fileControlEntry);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1717;
	        this.selectClause();
	        this.state = 1721;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ACCESS) | (1 << Cobol85Parser.ALTERNATE) | (1 << Cobol85Parser.ASSIGN))) !== 0) || _la===Cobol85Parser.BINARY || _la===Cobol85Parser.FILE || _la===Cobol85Parser.INDEXED || _la===Cobol85Parser.LINE || ((((_la - 332)) & ~0x1f) == 0 && ((1 << (_la - 332)) & ((1 << (Cobol85Parser.ORGANIZATION - 332)) | (1 << (Cobol85Parser.PADDING - 332)) | (1 << (Cobol85Parser.PASSWORD - 332)))) !== 0) || ((((_la - 377)) & ~0x1f) == 0 && ((1 << (_la - 377)) & ((1 << (Cobol85Parser.RECORD - 377)) | (1 << (Cobol85Parser.RELATIVE - 377)) | (1 << (Cobol85Parser.RESERVE - 377)))) !== 0) || _la===Cobol85Parser.SEQUENTIAL || _la===Cobol85Parser.STATUS) {
	            this.state = 1718;
	            this.fileControlClause();
	            this.state = 1723;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectClause() {
	    let localctx = new SelectClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, Cobol85Parser.RULE_selectClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1724;
	        this.match(Cobol85Parser.SELECT);
	        this.state = 1726;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.OPTIONAL) {
	            this.state = 1725;
	            this.match(Cobol85Parser.OPTIONAL);
	        }

	        this.state = 1728;
	        this.fileName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fileControlClause() {
	    let localctx = new FileControlClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, Cobol85Parser.RULE_fileControlClause);
	    try {
	        this.state = 1741;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1730;
	            this.assignClause();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1731;
	            this.reserveClause();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1732;
	            this.organizationClause();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1733;
	            this.paddingCharacterClause();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1734;
	            this.recordDelimiterClause();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1735;
	            this.accessModeClause();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1736;
	            this.recordKeyClause();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1737;
	            this.alternateRecordKeyClause();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1738;
	            this.fileStatusClause();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1739;
	            this.passwordClause();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1740;
	            this.relativeKeyClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignClause() {
	    let localctx = new AssignClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, Cobol85Parser.RULE_assignClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1743;
	        this.match(Cobol85Parser.ASSIGN);
	        this.state = 1745;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.TO) {
	            this.state = 1744;
	            this.match(Cobol85Parser.TO);
	        }

	        this.state = 1758;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1747;
	            this.match(Cobol85Parser.DISK);
	            break;

	        case 2:
	            this.state = 1748;
	            this.match(Cobol85Parser.DISPLAY);
	            break;

	        case 3:
	            this.state = 1749;
	            this.match(Cobol85Parser.KEYBOARD);
	            break;

	        case 4:
	            this.state = 1750;
	            this.match(Cobol85Parser.PORT);
	            break;

	        case 5:
	            this.state = 1751;
	            this.match(Cobol85Parser.PRINTER);
	            break;

	        case 6:
	            this.state = 1752;
	            this.match(Cobol85Parser.READER);
	            break;

	        case 7:
	            this.state = 1753;
	            this.match(Cobol85Parser.REMOTE);
	            break;

	        case 8:
	            this.state = 1754;
	            this.match(Cobol85Parser.TAPE);
	            break;

	        case 9:
	            this.state = 1755;
	            this.match(Cobol85Parser.VIRTUAL);
	            break;

	        case 10:
	            this.state = 1756;
	            this.assignmentName();
	            break;

	        case 11:
	            this.state = 1757;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reserveClause() {
	    let localctx = new ReserveClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, Cobol85Parser.RULE_reserveClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1760;
	        this.match(Cobol85Parser.RESERVE);
	        this.state = 1763;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.NO:
	            this.state = 1761;
	            this.match(Cobol85Parser.NO);
	            break;
	        case Cobol85Parser.LEVEL_NUMBER_66:
	        case Cobol85Parser.LEVEL_NUMBER_77:
	        case Cobol85Parser.LEVEL_NUMBER_88:
	        case Cobol85Parser.INTEGERLITERAL:
	            this.state = 1762;
	            this.integerLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1766;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
	        if(la_===1) {
	            this.state = 1765;
	            this.match(Cobol85Parser.ALTERNATE);

	        }
	        this.state = 1769;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.AREA || _la===Cobol85Parser.AREAS) {
	            this.state = 1768;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.AREA || _la===Cobol85Parser.AREAS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	organizationClause() {
	    let localctx = new OrganizationClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, Cobol85Parser.RULE_organizationClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1775;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ORGANIZATION) {
	            this.state = 1771;
	            this.match(Cobol85Parser.ORGANIZATION);
	            this.state = 1773;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.IS) {
	                this.state = 1772;
	                this.match(Cobol85Parser.IS);
	            }

	        }

	        this.state = 1782;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	        if(la_===1) {
	            this.state = 1777;
	            this.match(Cobol85Parser.LINE);

	        } else if(la_===2) {
	            this.state = 1778;
	            this.match(Cobol85Parser.RECORD);
	            this.state = 1779;
	            this.match(Cobol85Parser.BINARY);

	        } else if(la_===3) {
	            this.state = 1780;
	            this.match(Cobol85Parser.RECORD);

	        } else if(la_===4) {
	            this.state = 1781;
	            this.match(Cobol85Parser.BINARY);

	        }
	        this.state = 1784;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.INDEXED || _la===Cobol85Parser.RELATIVE || _la===Cobol85Parser.SEQUENTIAL)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	paddingCharacterClause() {
	    let localctx = new PaddingCharacterClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, Cobol85Parser.RULE_paddingCharacterClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1786;
	        this.match(Cobol85Parser.PADDING);
	        this.state = 1788;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.CHARACTER) {
	            this.state = 1787;
	            this.match(Cobol85Parser.CHARACTER);
	        }

	        this.state = 1791;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 1790;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 1795;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1793;
	            this.qualifiedDataName();
	            break;

	        case 2:
	            this.state = 1794;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordDelimiterClause() {
	    let localctx = new RecordDelimiterClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, Cobol85Parser.RULE_recordDelimiterClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1797;
	        this.match(Cobol85Parser.RECORD);
	        this.state = 1798;
	        this.match(Cobol85Parser.DELIMITER);
	        this.state = 1800;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 1799;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 1805;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1802;
	            this.match(Cobol85Parser.STANDARD_1);
	            break;

	        case 2:
	            this.state = 1803;
	            this.match(Cobol85Parser.IMPLICIT);
	            break;

	        case 3:
	            this.state = 1804;
	            this.assignmentName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	accessModeClause() {
	    let localctx = new AccessModeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, Cobol85Parser.RULE_accessModeClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1807;
	        this.match(Cobol85Parser.ACCESS);
	        this.state = 1809;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.MODE) {
	            this.state = 1808;
	            this.match(Cobol85Parser.MODE);
	        }

	        this.state = 1812;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 1811;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 1814;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.DYNAMIC || _la===Cobol85Parser.EXCLUSIVE || _la===Cobol85Parser.RANDOM || _la===Cobol85Parser.SEQUENTIAL)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordKeyClause() {
	    let localctx = new RecordKeyClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, Cobol85Parser.RULE_recordKeyClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1816;
	        this.match(Cobol85Parser.RECORD);
	        this.state = 1818;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.KEY) {
	            this.state = 1817;
	            this.match(Cobol85Parser.KEY);
	        }

	        this.state = 1821;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 1820;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 1823;
	        this.qualifiedDataName();
	        this.state = 1825;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
	        if(la_===1) {
	            this.state = 1824;
	            this.passwordClause();

	        }
	        this.state = 1831;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.DUPLICATES || _la===Cobol85Parser.WITH) {
	            this.state = 1828;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.WITH) {
	                this.state = 1827;
	                this.match(Cobol85Parser.WITH);
	            }

	            this.state = 1830;
	            this.match(Cobol85Parser.DUPLICATES);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alternateRecordKeyClause() {
	    let localctx = new AlternateRecordKeyClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, Cobol85Parser.RULE_alternateRecordKeyClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1833;
	        this.match(Cobol85Parser.ALTERNATE);
	        this.state = 1834;
	        this.match(Cobol85Parser.RECORD);
	        this.state = 1836;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.KEY) {
	            this.state = 1835;
	            this.match(Cobol85Parser.KEY);
	        }

	        this.state = 1839;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 1838;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 1841;
	        this.qualifiedDataName();
	        this.state = 1843;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
	        if(la_===1) {
	            this.state = 1842;
	            this.passwordClause();

	        }
	        this.state = 1849;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.DUPLICATES || _la===Cobol85Parser.WITH) {
	            this.state = 1846;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.WITH) {
	                this.state = 1845;
	                this.match(Cobol85Parser.WITH);
	            }

	            this.state = 1848;
	            this.match(Cobol85Parser.DUPLICATES);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	passwordClause() {
	    let localctx = new PasswordClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, Cobol85Parser.RULE_passwordClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1851;
	        this.match(Cobol85Parser.PASSWORD);
	        this.state = 1853;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 1852;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 1855;
	        this.dataName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fileStatusClause() {
	    let localctx = new FileStatusClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, Cobol85Parser.RULE_fileStatusClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1858;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FILE) {
	            this.state = 1857;
	            this.match(Cobol85Parser.FILE);
	        }

	        this.state = 1860;
	        this.match(Cobol85Parser.STATUS);
	        this.state = 1862;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 1861;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 1864;
	        this.qualifiedDataName();
	        this.state = 1866;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
	        if(la_===1) {
	            this.state = 1865;
	            this.qualifiedDataName();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relativeKeyClause() {
	    let localctx = new RelativeKeyClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, Cobol85Parser.RULE_relativeKeyClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1868;
	        this.match(Cobol85Parser.RELATIVE);
	        this.state = 1870;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.KEY) {
	            this.state = 1869;
	            this.match(Cobol85Parser.KEY);
	        }

	        this.state = 1873;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 1872;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 1875;
	        this.qualifiedDataName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ioControlParagraph() {
	    let localctx = new IoControlParagraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, Cobol85Parser.RULE_ioControlParagraph);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1877;
	        this.match(Cobol85Parser.I_O_CONTROL);
	        this.state = 1878;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 1882;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
	        if(la_===1) {
	            this.state = 1879;
	            this.fileName();
	            this.state = 1880;
	            this.match(Cobol85Parser.DOT_FS);

	        }
	        this.state = 1891;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.COMMITMENT || _la===Cobol85Parser.MULTIPLE || _la===Cobol85Parser.RERUN || _la===Cobol85Parser.SAME || _la===Cobol85Parser.DOT_FS) {
	            this.state = 1887;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Cobol85Parser.COMMITMENT || _la===Cobol85Parser.MULTIPLE || _la===Cobol85Parser.RERUN || _la===Cobol85Parser.SAME) {
	                this.state = 1884;
	                this.ioControlClause();
	                this.state = 1889;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1890;
	            this.match(Cobol85Parser.DOT_FS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ioControlClause() {
	    let localctx = new IoControlClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, Cobol85Parser.RULE_ioControlClause);
	    try {
	        this.state = 1897;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.RERUN:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1893;
	            this.rerunClause();
	            break;
	        case Cobol85Parser.SAME:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1894;
	            this.sameClause();
	            break;
	        case Cobol85Parser.MULTIPLE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1895;
	            this.multipleFileClause();
	            break;
	        case Cobol85Parser.COMMITMENT:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1896;
	            this.commitmentControlClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rerunClause() {
	    let localctx = new RerunClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, Cobol85Parser.RULE_rerunClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1899;
	        this.match(Cobol85Parser.RERUN);
	        this.state = 1905;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ON) {
	            this.state = 1900;
	            this.match(Cobol85Parser.ON);
	            this.state = 1903;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1901;
	                this.assignmentName();
	                break;

	            case 2:
	                this.state = 1902;
	                this.fileName();
	                break;

	            }
	        }

	        this.state = 1907;
	        this.match(Cobol85Parser.EVERY);
	        this.state = 1911;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1908;
	            this.rerunEveryRecords();
	            break;

	        case 2:
	            this.state = 1909;
	            this.rerunEveryOf();
	            break;

	        case 3:
	            this.state = 1910;
	            this.rerunEveryClock();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rerunEveryRecords() {
	    let localctx = new RerunEveryRecordsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, Cobol85Parser.RULE_rerunEveryRecords);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1913;
	        this.integerLiteral();
	        this.state = 1914;
	        this.match(Cobol85Parser.RECORDS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rerunEveryOf() {
	    let localctx = new RerunEveryOfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, Cobol85Parser.RULE_rerunEveryOf);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1917;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.END) {
	            this.state = 1916;
	            this.match(Cobol85Parser.END);
	        }

	        this.state = 1920;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.OF) {
	            this.state = 1919;
	            this.match(Cobol85Parser.OF);
	        }

	        this.state = 1922;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.REEL || _la===Cobol85Parser.UNIT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1923;
	        this.match(Cobol85Parser.OF);
	        this.state = 1924;
	        this.fileName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rerunEveryClock() {
	    let localctx = new RerunEveryClockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, Cobol85Parser.RULE_rerunEveryClock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1926;
	        this.integerLiteral();
	        this.state = 1928;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.CLOCK_UNITS) {
	            this.state = 1927;
	            this.match(Cobol85Parser.CLOCK_UNITS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sameClause() {
	    let localctx = new SameClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, Cobol85Parser.RULE_sameClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1930;
	        this.match(Cobol85Parser.SAME);
	        this.state = 1932;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.RECORD || _la===Cobol85Parser.SORT || _la===Cobol85Parser.SORT_MERGE) {
	            this.state = 1931;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.RECORD || _la===Cobol85Parser.SORT || _la===Cobol85Parser.SORT_MERGE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1935;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.AREA) {
	            this.state = 1934;
	            this.match(Cobol85Parser.AREA);
	        }

	        this.state = 1938;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FOR) {
	            this.state = 1937;
	            this.match(Cobol85Parser.FOR);
	        }

	        this.state = 1941; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1940;
	        		this.fileName();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1943; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,159, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multipleFileClause() {
	    let localctx = new MultipleFileClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, Cobol85Parser.RULE_multipleFileClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1945;
	        this.match(Cobol85Parser.MULTIPLE);
	        this.state = 1946;
	        this.match(Cobol85Parser.FILE);
	        this.state = 1948;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.TAPE) {
	            this.state = 1947;
	            this.match(Cobol85Parser.TAPE);
	        }

	        this.state = 1951;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.CONTAINS) {
	            this.state = 1950;
	            this.match(Cobol85Parser.CONTAINS);
	        }

	        this.state = 1954; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1953;
	        		this.multipleFilePosition();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1956; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,162, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multipleFilePosition() {
	    let localctx = new MultipleFilePositionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, Cobol85Parser.RULE_multipleFilePosition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1958;
	        this.fileName();
	        this.state = 1961;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.POSITION) {
	            this.state = 1959;
	            this.match(Cobol85Parser.POSITION);
	            this.state = 1960;
	            this.integerLiteral();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commitmentControlClause() {
	    let localctx = new CommitmentControlClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, Cobol85Parser.RULE_commitmentControlClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1963;
	        this.match(Cobol85Parser.COMMITMENT);
	        this.state = 1964;
	        this.match(Cobol85Parser.CONTROL);
	        this.state = 1966;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FOR) {
	            this.state = 1965;
	            this.match(Cobol85Parser.FOR);
	        }

	        this.state = 1968;
	        this.fileName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataDivision() {
	    let localctx = new DataDivisionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, Cobol85Parser.RULE_dataDivision);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1970;
	        this.match(Cobol85Parser.DATA);
	        this.state = 1971;
	        this.match(Cobol85Parser.DIVISION);
	        this.state = 1972;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 1976;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.COMMUNICATION || _la===Cobol85Parser.DATA_BASE || _la===Cobol85Parser.FILE || _la===Cobol85Parser.LINKAGE || _la===Cobol85Parser.LOCAL_STORAGE || _la===Cobol85Parser.PROGRAM_LIBRARY || _la===Cobol85Parser.REPORT || _la===Cobol85Parser.SCREEN || _la===Cobol85Parser.WORKING_STORAGE) {
	            this.state = 1973;
	            this.dataDivisionSection();
	            this.state = 1978;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataDivisionSection() {
	    let localctx = new DataDivisionSectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, Cobol85Parser.RULE_dataDivisionSection);
	    try {
	        this.state = 1988;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.FILE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1979;
	            this.fileSection();
	            break;
	        case Cobol85Parser.DATA_BASE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1980;
	            this.dataBaseSection();
	            break;
	        case Cobol85Parser.WORKING_STORAGE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1981;
	            this.workingStorageSection();
	            break;
	        case Cobol85Parser.LINKAGE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1982;
	            this.linkageSection();
	            break;
	        case Cobol85Parser.COMMUNICATION:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1983;
	            this.communicationSection();
	            break;
	        case Cobol85Parser.LOCAL_STORAGE:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1984;
	            this.localStorageSection();
	            break;
	        case Cobol85Parser.SCREEN:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1985;
	            this.screenSection();
	            break;
	        case Cobol85Parser.REPORT:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1986;
	            this.reportSection();
	            break;
	        case Cobol85Parser.PROGRAM_LIBRARY:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1987;
	            this.programLibrarySection();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fileSection() {
	    let localctx = new FileSectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, Cobol85Parser.RULE_fileSection);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1990;
	        this.match(Cobol85Parser.FILE);
	        this.state = 1991;
	        this.match(Cobol85Parser.SECTION);
	        this.state = 1992;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 1996;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.FD || _la===Cobol85Parser.SD) {
	            this.state = 1993;
	            this.fileDescriptionEntry();
	            this.state = 1998;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fileDescriptionEntry() {
	    let localctx = new FileDescriptionEntryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, Cobol85Parser.RULE_fileDescriptionEntry);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1999;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.FD || _la===Cobol85Parser.SD)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2000;
	        this.fileName();
	        this.state = 2007;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,169,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2002;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Cobol85Parser.DOT_FS) {
	                    this.state = 2001;
	                    this.match(Cobol85Parser.DOT_FS);
	                }

	                this.state = 2004;
	                this.fileDescriptionEntryClause(); 
	            }
	            this.state = 2009;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,169,this._ctx);
	        }

	        this.state = 2010;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 2014;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.EXECSQLLINE - 552)))) !== 0)) {
	            this.state = 2011;
	            this.dataDescriptionEntry();
	            this.state = 2016;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fileDescriptionEntryClause() {
	    let localctx = new FileDescriptionEntryClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, Cobol85Parser.RULE_fileDescriptionEntryClause);
	    try {
	        this.state = 2028;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2017;
	            this.externalClause();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2018;
	            this.globalClause();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2019;
	            this.blockContainsClause();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2020;
	            this.recordContainsClause();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2021;
	            this.labelRecordsClause();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2022;
	            this.valueOfClause();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2023;
	            this.dataRecordsClause();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2024;
	            this.linageClause();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2025;
	            this.codeSetClause();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2026;
	            this.reportClause();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2027;
	            this.recordingModeClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	externalClause() {
	    let localctx = new ExternalClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, Cobol85Parser.RULE_externalClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2031;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2030;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2033;
	        this.match(Cobol85Parser.EXTERNAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	globalClause() {
	    let localctx = new GlobalClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, Cobol85Parser.RULE_globalClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2036;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2035;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2038;
	        this.match(Cobol85Parser.GLOBAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockContainsClause() {
	    let localctx = new BlockContainsClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, Cobol85Parser.RULE_blockContainsClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2040;
	        this.match(Cobol85Parser.BLOCK);
	        this.state = 2042;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.CONTAINS) {
	            this.state = 2041;
	            this.match(Cobol85Parser.CONTAINS);
	        }

	        this.state = 2044;
	        this.integerLiteral();
	        this.state = 2046;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.TO) {
	            this.state = 2045;
	            this.blockContainsTo();
	        }

	        this.state = 2049;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.CHARACTERS || _la===Cobol85Parser.RECORDS) {
	            this.state = 2048;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.CHARACTERS || _la===Cobol85Parser.RECORDS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockContainsTo() {
	    let localctx = new BlockContainsToContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, Cobol85Parser.RULE_blockContainsTo);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2051;
	        this.match(Cobol85Parser.TO);
	        this.state = 2052;
	        this.integerLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordContainsClause() {
	    let localctx = new RecordContainsClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, Cobol85Parser.RULE_recordContainsClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2054;
	        this.match(Cobol85Parser.RECORD);
	        this.state = 2058;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2055;
	            this.recordContainsClauseFormat1();
	            break;

	        case 2:
	            this.state = 2056;
	            this.recordContainsClauseFormat2();
	            break;

	        case 3:
	            this.state = 2057;
	            this.recordContainsClauseFormat3();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordContainsClauseFormat1() {
	    let localctx = new RecordContainsClauseFormat1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, Cobol85Parser.RULE_recordContainsClauseFormat1);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2061;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.CONTAINS) {
	            this.state = 2060;
	            this.match(Cobol85Parser.CONTAINS);
	        }

	        this.state = 2063;
	        this.integerLiteral();
	        this.state = 2065;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.CHARACTERS) {
	            this.state = 2064;
	            this.match(Cobol85Parser.CHARACTERS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordContainsClauseFormat2() {
	    let localctx = new RecordContainsClauseFormat2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, Cobol85Parser.RULE_recordContainsClauseFormat2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2068;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2067;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2070;
	        this.match(Cobol85Parser.VARYING);
	        this.state = 2072;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IN) {
	            this.state = 2071;
	            this.match(Cobol85Parser.IN);
	        }

	        this.state = 2075;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.SIZE) {
	            this.state = 2074;
	            this.match(Cobol85Parser.SIZE);
	        }

	        this.state = 2087;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FROM || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0)) {
	            this.state = 2078;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.FROM) {
	                this.state = 2077;
	                this.match(Cobol85Parser.FROM);
	            }

	            this.state = 2080;
	            this.integerLiteral();
	            this.state = 2082;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.TO) {
	                this.state = 2081;
	                this.recordContainsTo();
	            }

	            this.state = 2085;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.CHARACTERS) {
	                this.state = 2084;
	                this.match(Cobol85Parser.CHARACTERS);
	            }

	        }

	        this.state = 2094;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.DEPENDING) {
	            this.state = 2089;
	            this.match(Cobol85Parser.DEPENDING);
	            this.state = 2091;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.ON) {
	                this.state = 2090;
	                this.match(Cobol85Parser.ON);
	            }

	            this.state = 2093;
	            this.qualifiedDataName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordContainsClauseFormat3() {
	    let localctx = new RecordContainsClauseFormat3Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, Cobol85Parser.RULE_recordContainsClauseFormat3);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2097;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.CONTAINS) {
	            this.state = 2096;
	            this.match(Cobol85Parser.CONTAINS);
	        }

	        this.state = 2099;
	        this.integerLiteral();
	        this.state = 2100;
	        this.recordContainsTo();
	        this.state = 2102;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.CHARACTERS) {
	            this.state = 2101;
	            this.match(Cobol85Parser.CHARACTERS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordContainsTo() {
	    let localctx = new RecordContainsToContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, Cobol85Parser.RULE_recordContainsTo);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2104;
	        this.match(Cobol85Parser.TO);
	        this.state = 2105;
	        this.integerLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelRecordsClause() {
	    let localctx = new LabelRecordsClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, Cobol85Parser.RULE_labelRecordsClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2107;
	        this.match(Cobol85Parser.LABEL);
	        this.state = 2116;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.RECORD:
	            this.state = 2108;
	            this.match(Cobol85Parser.RECORD);
	            this.state = 2110;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.IS) {
	                this.state = 2109;
	                this.match(Cobol85Parser.IS);
	            }

	            break;
	        case Cobol85Parser.RECORDS:
	            this.state = 2112;
	            this.match(Cobol85Parser.RECORDS);
	            this.state = 2114;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.ARE) {
	                this.state = 2113;
	                this.match(Cobol85Parser.ARE);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2125;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.OMITTED:
	            this.state = 2118;
	            this.match(Cobol85Parser.OMITTED);
	            break;
	        case Cobol85Parser.STANDARD:
	            this.state = 2119;
	            this.match(Cobol85Parser.STANDARD);
	            break;
	        case Cobol85Parser.ABORT:
	        case Cobol85Parser.AS:
	        case Cobol85Parser.ASCII:
	        case Cobol85Parser.ASSOCIATED_DATA:
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	        case Cobol85Parser.ATTRIBUTE:
	        case Cobol85Parser.AUTO:
	        case Cobol85Parser.AUTO_SKIP:
	        case Cobol85Parser.BACKGROUND_COLOR:
	        case Cobol85Parser.BACKGROUND_COLOUR:
	        case Cobol85Parser.BEEP:
	        case Cobol85Parser.BELL:
	        case Cobol85Parser.BINARY:
	        case Cobol85Parser.BIT:
	        case Cobol85Parser.BLINK:
	        case Cobol85Parser.BOUNDS:
	        case Cobol85Parser.CAPABLE:
	        case Cobol85Parser.CCSVERSION:
	        case Cobol85Parser.CHANGED:
	        case Cobol85Parser.CHANNEL:
	        case Cobol85Parser.CLOSE_DISPOSITION:
	        case Cobol85Parser.COBOL:
	        case Cobol85Parser.COMMITMENT:
	        case Cobol85Parser.CONTROL_POINT:
	        case Cobol85Parser.CONVENTION:
	        case Cobol85Parser.CRUNCH:
	        case Cobol85Parser.CURSOR:
	        case Cobol85Parser.DEFAULT:
	        case Cobol85Parser.DEFAULT_DISPLAY:
	        case Cobol85Parser.DEFINITION:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.DISK:
	        case Cobol85Parser.DONTCARE:
	        case Cobol85Parser.DOUBLE:
	        case Cobol85Parser.EBCDIC:
	        case Cobol85Parser.EMPTY_CHECK:
	        case Cobol85Parser.ENTER:
	        case Cobol85Parser.ENTRY_PROCEDURE:
	        case Cobol85Parser.ERASE:
	        case Cobol85Parser.EOL:
	        case Cobol85Parser.EOS:
	        case Cobol85Parser.ESCAPE:
	        case Cobol85Parser.EVENT:
	        case Cobol85Parser.EXCLUSIVE:
	        case Cobol85Parser.EXPORT:
	        case Cobol85Parser.EXTENDED:
	        case Cobol85Parser.FOREGROUND_COLOR:
	        case Cobol85Parser.FOREGROUND_COLOUR:
	        case Cobol85Parser.FULL:
	        case Cobol85Parser.FUNCTIONNAME:
	        case Cobol85Parser.FUNCTION_POINTER:
	        case Cobol85Parser.GRID:
	        case Cobol85Parser.HIGHLIGHT:
	        case Cobol85Parser.IMPLICIT:
	        case Cobol85Parser.IMPORT:
	        case Cobol85Parser.INTEGER:
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.KEYBOARD:
	        case Cobol85Parser.LANGUAGE:
	        case Cobol85Parser.LB:
	        case Cobol85Parser.LD:
	        case Cobol85Parser.LEFTLINE:
	        case Cobol85Parser.LENGTH_CHECK:
	        case Cobol85Parser.LIBACCESS:
	        case Cobol85Parser.LIBPARAMETER:
	        case Cobol85Parser.LIBRARY:
	        case Cobol85Parser.LIST:
	        case Cobol85Parser.LOCAL:
	        case Cobol85Parser.LONG_DATE:
	        case Cobol85Parser.LONG_TIME:
	        case Cobol85Parser.LOWER:
	        case Cobol85Parser.LOWLIGHT:
	        case Cobol85Parser.MMDDYYYY:
	        case Cobol85Parser.NAMED:
	        case Cobol85Parser.NATIONAL:
	        case Cobol85Parser.NATIONAL_EDITED:
	        case Cobol85Parser.NETWORK:
	        case Cobol85Parser.NO_ECHO:
	        case Cobol85Parser.NUMERIC_DATE:
	        case Cobol85Parser.NUMERIC_TIME:
	        case Cobol85Parser.ODT:
	        case Cobol85Parser.ORDERLY:
	        case Cobol85Parser.OVERLINE:
	        case Cobol85Parser.OWN:
	        case Cobol85Parser.PASSWORD:
	        case Cobol85Parser.PORT:
	        case Cobol85Parser.PRINTER:
	        case Cobol85Parser.PRIVATE:
	        case Cobol85Parser.PROCESS:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.PROMPT:
	        case Cobol85Parser.READER:
	        case Cobol85Parser.REMOTE:
	        case Cobol85Parser.REAL:
	        case Cobol85Parser.RECEIVED:
	        case Cobol85Parser.RECURSIVE:
	        case Cobol85Parser.REF:
	        case Cobol85Parser.REMOVE:
	        case Cobol85Parser.REQUIRED:
	        case Cobol85Parser.REVERSE_VIDEO:
	        case Cobol85Parser.SAVE:
	        case Cobol85Parser.SECURE:
	        case Cobol85Parser.SHARED:
	        case Cobol85Parser.SHAREDBYALL:
	        case Cobol85Parser.SHAREDBYRUNUNIT:
	        case Cobol85Parser.SHARING:
	        case Cobol85Parser.SHORT_DATE:
	        case Cobol85Parser.SYMBOL:
	        case Cobol85Parser.TASK:
	        case Cobol85Parser.THREAD:
	        case Cobol85Parser.THREAD_LOCAL:
	        case Cobol85Parser.TIMER:
	        case Cobol85Parser.TODAYS_DATE:
	        case Cobol85Parser.TODAYS_NAME:
	        case Cobol85Parser.TRUNCATED:
	        case Cobol85Parser.TYPEDEF:
	        case Cobol85Parser.UNDERLINE:
	        case Cobol85Parser.VIRTUAL:
	        case Cobol85Parser.WAIT:
	        case Cobol85Parser.YEAR:
	        case Cobol85Parser.YYYYMMDD:
	        case Cobol85Parser.YYYYDDD:
	        case Cobol85Parser.ZERO_FILL:
	        case Cobol85Parser.IDENTIFIER:
	            this.state = 2121; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2120;
	                this.dataName();
	                this.state = 2123; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la===Cobol85Parser.IDENTIFIER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueOfClause() {
	    let localctx = new ValueOfClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, Cobol85Parser.RULE_valueOfClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2127;
	        this.match(Cobol85Parser.VALUE);
	        this.state = 2128;
	        this.match(Cobol85Parser.OF);
	        this.state = 2130; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2129;
	            this.valuePair();
	            this.state = 2132; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la===Cobol85Parser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valuePair() {
	    let localctx = new ValuePairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, Cobol85Parser.RULE_valuePair);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2134;
	        this.systemName();
	        this.state = 2136;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2135;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2140;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2138;
	            this.qualifiedDataName();
	            break;

	        case 2:
	            this.state = 2139;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataRecordsClause() {
	    let localctx = new DataRecordsClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, Cobol85Parser.RULE_dataRecordsClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2142;
	        this.match(Cobol85Parser.DATA);
	        this.state = 2151;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.RECORD:
	            this.state = 2143;
	            this.match(Cobol85Parser.RECORD);
	            this.state = 2145;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.IS) {
	                this.state = 2144;
	                this.match(Cobol85Parser.IS);
	            }

	            break;
	        case Cobol85Parser.RECORDS:
	            this.state = 2147;
	            this.match(Cobol85Parser.RECORDS);
	            this.state = 2149;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.ARE) {
	                this.state = 2148;
	                this.match(Cobol85Parser.ARE);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2154; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2153;
	            this.dataName();
	            this.state = 2156; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la===Cobol85Parser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linageClause() {
	    let localctx = new LinageClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, Cobol85Parser.RULE_linageClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2158;
	        this.match(Cobol85Parser.LINAGE);
	        this.state = 2160;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2159;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2164;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.ABORT:
	        case Cobol85Parser.AS:
	        case Cobol85Parser.ASCII:
	        case Cobol85Parser.ASSOCIATED_DATA:
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	        case Cobol85Parser.ATTRIBUTE:
	        case Cobol85Parser.AUTO:
	        case Cobol85Parser.AUTO_SKIP:
	        case Cobol85Parser.BACKGROUND_COLOR:
	        case Cobol85Parser.BACKGROUND_COLOUR:
	        case Cobol85Parser.BEEP:
	        case Cobol85Parser.BELL:
	        case Cobol85Parser.BINARY:
	        case Cobol85Parser.BIT:
	        case Cobol85Parser.BLINK:
	        case Cobol85Parser.BOUNDS:
	        case Cobol85Parser.CAPABLE:
	        case Cobol85Parser.CCSVERSION:
	        case Cobol85Parser.CHANGED:
	        case Cobol85Parser.CHANNEL:
	        case Cobol85Parser.CLOSE_DISPOSITION:
	        case Cobol85Parser.COBOL:
	        case Cobol85Parser.COMMITMENT:
	        case Cobol85Parser.CONTROL_POINT:
	        case Cobol85Parser.CONVENTION:
	        case Cobol85Parser.CRUNCH:
	        case Cobol85Parser.CURSOR:
	        case Cobol85Parser.DEFAULT:
	        case Cobol85Parser.DEFAULT_DISPLAY:
	        case Cobol85Parser.DEFINITION:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.DISK:
	        case Cobol85Parser.DONTCARE:
	        case Cobol85Parser.DOUBLE:
	        case Cobol85Parser.EBCDIC:
	        case Cobol85Parser.EMPTY_CHECK:
	        case Cobol85Parser.ENTER:
	        case Cobol85Parser.ENTRY_PROCEDURE:
	        case Cobol85Parser.ERASE:
	        case Cobol85Parser.EOL:
	        case Cobol85Parser.EOS:
	        case Cobol85Parser.ESCAPE:
	        case Cobol85Parser.EVENT:
	        case Cobol85Parser.EXCLUSIVE:
	        case Cobol85Parser.EXPORT:
	        case Cobol85Parser.EXTENDED:
	        case Cobol85Parser.FOREGROUND_COLOR:
	        case Cobol85Parser.FOREGROUND_COLOUR:
	        case Cobol85Parser.FULL:
	        case Cobol85Parser.FUNCTIONNAME:
	        case Cobol85Parser.FUNCTION_POINTER:
	        case Cobol85Parser.GRID:
	        case Cobol85Parser.HIGHLIGHT:
	        case Cobol85Parser.IMPLICIT:
	        case Cobol85Parser.IMPORT:
	        case Cobol85Parser.INTEGER:
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.KEYBOARD:
	        case Cobol85Parser.LANGUAGE:
	        case Cobol85Parser.LB:
	        case Cobol85Parser.LD:
	        case Cobol85Parser.LEFTLINE:
	        case Cobol85Parser.LENGTH_CHECK:
	        case Cobol85Parser.LIBACCESS:
	        case Cobol85Parser.LIBPARAMETER:
	        case Cobol85Parser.LIBRARY:
	        case Cobol85Parser.LIST:
	        case Cobol85Parser.LOCAL:
	        case Cobol85Parser.LONG_DATE:
	        case Cobol85Parser.LONG_TIME:
	        case Cobol85Parser.LOWER:
	        case Cobol85Parser.LOWLIGHT:
	        case Cobol85Parser.MMDDYYYY:
	        case Cobol85Parser.NAMED:
	        case Cobol85Parser.NATIONAL:
	        case Cobol85Parser.NATIONAL_EDITED:
	        case Cobol85Parser.NETWORK:
	        case Cobol85Parser.NO_ECHO:
	        case Cobol85Parser.NUMERIC_DATE:
	        case Cobol85Parser.NUMERIC_TIME:
	        case Cobol85Parser.ODT:
	        case Cobol85Parser.ORDERLY:
	        case Cobol85Parser.OVERLINE:
	        case Cobol85Parser.OWN:
	        case Cobol85Parser.PASSWORD:
	        case Cobol85Parser.PORT:
	        case Cobol85Parser.PRINTER:
	        case Cobol85Parser.PRIVATE:
	        case Cobol85Parser.PROCESS:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.PROMPT:
	        case Cobol85Parser.READER:
	        case Cobol85Parser.REMOTE:
	        case Cobol85Parser.REAL:
	        case Cobol85Parser.RECEIVED:
	        case Cobol85Parser.RECURSIVE:
	        case Cobol85Parser.REF:
	        case Cobol85Parser.REMOVE:
	        case Cobol85Parser.REQUIRED:
	        case Cobol85Parser.REVERSE_VIDEO:
	        case Cobol85Parser.SAVE:
	        case Cobol85Parser.SECURE:
	        case Cobol85Parser.SHARED:
	        case Cobol85Parser.SHAREDBYALL:
	        case Cobol85Parser.SHAREDBYRUNUNIT:
	        case Cobol85Parser.SHARING:
	        case Cobol85Parser.SHORT_DATE:
	        case Cobol85Parser.SYMBOL:
	        case Cobol85Parser.TASK:
	        case Cobol85Parser.THREAD:
	        case Cobol85Parser.THREAD_LOCAL:
	        case Cobol85Parser.TIMER:
	        case Cobol85Parser.TODAYS_DATE:
	        case Cobol85Parser.TODAYS_NAME:
	        case Cobol85Parser.TRUNCATED:
	        case Cobol85Parser.TYPEDEF:
	        case Cobol85Parser.UNDERLINE:
	        case Cobol85Parser.VIRTUAL:
	        case Cobol85Parser.WAIT:
	        case Cobol85Parser.YEAR:
	        case Cobol85Parser.YYYYMMDD:
	        case Cobol85Parser.YYYYDDD:
	        case Cobol85Parser.ZERO_FILL:
	        case Cobol85Parser.IDENTIFIER:
	            this.state = 2162;
	            this.dataName();
	            break;
	        case Cobol85Parser.LEVEL_NUMBER_66:
	        case Cobol85Parser.LEVEL_NUMBER_77:
	        case Cobol85Parser.LEVEL_NUMBER_88:
	        case Cobol85Parser.INTEGERLITERAL:
	            this.state = 2163;
	            this.integerLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2167;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
	        if(la_===1) {
	            this.state = 2166;
	            this.match(Cobol85Parser.LINES);

	        }
	        this.state = 2172;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.AT || _la===Cobol85Parser.BOTTOM || _la===Cobol85Parser.FOOTING || _la===Cobol85Parser.LINES || _la===Cobol85Parser.TOP || _la===Cobol85Parser.WITH) {
	            this.state = 2169;
	            this.linageAt();
	            this.state = 2174;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linageAt() {
	    let localctx = new LinageAtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, Cobol85Parser.RULE_linageAt);
	    try {
	        this.state = 2178;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2175;
	            this.linageFootingAt();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2176;
	            this.linageLinesAtTop();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2177;
	            this.linageLinesAtBottom();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linageFootingAt() {
	    let localctx = new LinageFootingAtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, Cobol85Parser.RULE_linageFootingAt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2181;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.WITH) {
	            this.state = 2180;
	            this.match(Cobol85Parser.WITH);
	        }

	        this.state = 2183;
	        this.match(Cobol85Parser.FOOTING);
	        this.state = 2185;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.AT) {
	            this.state = 2184;
	            this.match(Cobol85Parser.AT);
	        }

	        this.state = 2189;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.ABORT:
	        case Cobol85Parser.AS:
	        case Cobol85Parser.ASCII:
	        case Cobol85Parser.ASSOCIATED_DATA:
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	        case Cobol85Parser.ATTRIBUTE:
	        case Cobol85Parser.AUTO:
	        case Cobol85Parser.AUTO_SKIP:
	        case Cobol85Parser.BACKGROUND_COLOR:
	        case Cobol85Parser.BACKGROUND_COLOUR:
	        case Cobol85Parser.BEEP:
	        case Cobol85Parser.BELL:
	        case Cobol85Parser.BINARY:
	        case Cobol85Parser.BIT:
	        case Cobol85Parser.BLINK:
	        case Cobol85Parser.BOUNDS:
	        case Cobol85Parser.CAPABLE:
	        case Cobol85Parser.CCSVERSION:
	        case Cobol85Parser.CHANGED:
	        case Cobol85Parser.CHANNEL:
	        case Cobol85Parser.CLOSE_DISPOSITION:
	        case Cobol85Parser.COBOL:
	        case Cobol85Parser.COMMITMENT:
	        case Cobol85Parser.CONTROL_POINT:
	        case Cobol85Parser.CONVENTION:
	        case Cobol85Parser.CRUNCH:
	        case Cobol85Parser.CURSOR:
	        case Cobol85Parser.DEFAULT:
	        case Cobol85Parser.DEFAULT_DISPLAY:
	        case Cobol85Parser.DEFINITION:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.DISK:
	        case Cobol85Parser.DONTCARE:
	        case Cobol85Parser.DOUBLE:
	        case Cobol85Parser.EBCDIC:
	        case Cobol85Parser.EMPTY_CHECK:
	        case Cobol85Parser.ENTER:
	        case Cobol85Parser.ENTRY_PROCEDURE:
	        case Cobol85Parser.ERASE:
	        case Cobol85Parser.EOL:
	        case Cobol85Parser.EOS:
	        case Cobol85Parser.ESCAPE:
	        case Cobol85Parser.EVENT:
	        case Cobol85Parser.EXCLUSIVE:
	        case Cobol85Parser.EXPORT:
	        case Cobol85Parser.EXTENDED:
	        case Cobol85Parser.FOREGROUND_COLOR:
	        case Cobol85Parser.FOREGROUND_COLOUR:
	        case Cobol85Parser.FULL:
	        case Cobol85Parser.FUNCTIONNAME:
	        case Cobol85Parser.FUNCTION_POINTER:
	        case Cobol85Parser.GRID:
	        case Cobol85Parser.HIGHLIGHT:
	        case Cobol85Parser.IMPLICIT:
	        case Cobol85Parser.IMPORT:
	        case Cobol85Parser.INTEGER:
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.KEYBOARD:
	        case Cobol85Parser.LANGUAGE:
	        case Cobol85Parser.LB:
	        case Cobol85Parser.LD:
	        case Cobol85Parser.LEFTLINE:
	        case Cobol85Parser.LENGTH_CHECK:
	        case Cobol85Parser.LIBACCESS:
	        case Cobol85Parser.LIBPARAMETER:
	        case Cobol85Parser.LIBRARY:
	        case Cobol85Parser.LIST:
	        case Cobol85Parser.LOCAL:
	        case Cobol85Parser.LONG_DATE:
	        case Cobol85Parser.LONG_TIME:
	        case Cobol85Parser.LOWER:
	        case Cobol85Parser.LOWLIGHT:
	        case Cobol85Parser.MMDDYYYY:
	        case Cobol85Parser.NAMED:
	        case Cobol85Parser.NATIONAL:
	        case Cobol85Parser.NATIONAL_EDITED:
	        case Cobol85Parser.NETWORK:
	        case Cobol85Parser.NO_ECHO:
	        case Cobol85Parser.NUMERIC_DATE:
	        case Cobol85Parser.NUMERIC_TIME:
	        case Cobol85Parser.ODT:
	        case Cobol85Parser.ORDERLY:
	        case Cobol85Parser.OVERLINE:
	        case Cobol85Parser.OWN:
	        case Cobol85Parser.PASSWORD:
	        case Cobol85Parser.PORT:
	        case Cobol85Parser.PRINTER:
	        case Cobol85Parser.PRIVATE:
	        case Cobol85Parser.PROCESS:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.PROMPT:
	        case Cobol85Parser.READER:
	        case Cobol85Parser.REMOTE:
	        case Cobol85Parser.REAL:
	        case Cobol85Parser.RECEIVED:
	        case Cobol85Parser.RECURSIVE:
	        case Cobol85Parser.REF:
	        case Cobol85Parser.REMOVE:
	        case Cobol85Parser.REQUIRED:
	        case Cobol85Parser.REVERSE_VIDEO:
	        case Cobol85Parser.SAVE:
	        case Cobol85Parser.SECURE:
	        case Cobol85Parser.SHARED:
	        case Cobol85Parser.SHAREDBYALL:
	        case Cobol85Parser.SHAREDBYRUNUNIT:
	        case Cobol85Parser.SHARING:
	        case Cobol85Parser.SHORT_DATE:
	        case Cobol85Parser.SYMBOL:
	        case Cobol85Parser.TASK:
	        case Cobol85Parser.THREAD:
	        case Cobol85Parser.THREAD_LOCAL:
	        case Cobol85Parser.TIMER:
	        case Cobol85Parser.TODAYS_DATE:
	        case Cobol85Parser.TODAYS_NAME:
	        case Cobol85Parser.TRUNCATED:
	        case Cobol85Parser.TYPEDEF:
	        case Cobol85Parser.UNDERLINE:
	        case Cobol85Parser.VIRTUAL:
	        case Cobol85Parser.WAIT:
	        case Cobol85Parser.YEAR:
	        case Cobol85Parser.YYYYMMDD:
	        case Cobol85Parser.YYYYDDD:
	        case Cobol85Parser.ZERO_FILL:
	        case Cobol85Parser.IDENTIFIER:
	            this.state = 2187;
	            this.dataName();
	            break;
	        case Cobol85Parser.LEVEL_NUMBER_66:
	        case Cobol85Parser.LEVEL_NUMBER_77:
	        case Cobol85Parser.LEVEL_NUMBER_88:
	        case Cobol85Parser.INTEGERLITERAL:
	            this.state = 2188;
	            this.integerLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linageLinesAtTop() {
	    let localctx = new LinageLinesAtTopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, Cobol85Parser.RULE_linageLinesAtTop);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2192;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.LINES) {
	            this.state = 2191;
	            this.match(Cobol85Parser.LINES);
	        }

	        this.state = 2195;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.AT) {
	            this.state = 2194;
	            this.match(Cobol85Parser.AT);
	        }

	        this.state = 2197;
	        this.match(Cobol85Parser.TOP);
	        this.state = 2200;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.ABORT:
	        case Cobol85Parser.AS:
	        case Cobol85Parser.ASCII:
	        case Cobol85Parser.ASSOCIATED_DATA:
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	        case Cobol85Parser.ATTRIBUTE:
	        case Cobol85Parser.AUTO:
	        case Cobol85Parser.AUTO_SKIP:
	        case Cobol85Parser.BACKGROUND_COLOR:
	        case Cobol85Parser.BACKGROUND_COLOUR:
	        case Cobol85Parser.BEEP:
	        case Cobol85Parser.BELL:
	        case Cobol85Parser.BINARY:
	        case Cobol85Parser.BIT:
	        case Cobol85Parser.BLINK:
	        case Cobol85Parser.BOUNDS:
	        case Cobol85Parser.CAPABLE:
	        case Cobol85Parser.CCSVERSION:
	        case Cobol85Parser.CHANGED:
	        case Cobol85Parser.CHANNEL:
	        case Cobol85Parser.CLOSE_DISPOSITION:
	        case Cobol85Parser.COBOL:
	        case Cobol85Parser.COMMITMENT:
	        case Cobol85Parser.CONTROL_POINT:
	        case Cobol85Parser.CONVENTION:
	        case Cobol85Parser.CRUNCH:
	        case Cobol85Parser.CURSOR:
	        case Cobol85Parser.DEFAULT:
	        case Cobol85Parser.DEFAULT_DISPLAY:
	        case Cobol85Parser.DEFINITION:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.DISK:
	        case Cobol85Parser.DONTCARE:
	        case Cobol85Parser.DOUBLE:
	        case Cobol85Parser.EBCDIC:
	        case Cobol85Parser.EMPTY_CHECK:
	        case Cobol85Parser.ENTER:
	        case Cobol85Parser.ENTRY_PROCEDURE:
	        case Cobol85Parser.ERASE:
	        case Cobol85Parser.EOL:
	        case Cobol85Parser.EOS:
	        case Cobol85Parser.ESCAPE:
	        case Cobol85Parser.EVENT:
	        case Cobol85Parser.EXCLUSIVE:
	        case Cobol85Parser.EXPORT:
	        case Cobol85Parser.EXTENDED:
	        case Cobol85Parser.FOREGROUND_COLOR:
	        case Cobol85Parser.FOREGROUND_COLOUR:
	        case Cobol85Parser.FULL:
	        case Cobol85Parser.FUNCTIONNAME:
	        case Cobol85Parser.FUNCTION_POINTER:
	        case Cobol85Parser.GRID:
	        case Cobol85Parser.HIGHLIGHT:
	        case Cobol85Parser.IMPLICIT:
	        case Cobol85Parser.IMPORT:
	        case Cobol85Parser.INTEGER:
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.KEYBOARD:
	        case Cobol85Parser.LANGUAGE:
	        case Cobol85Parser.LB:
	        case Cobol85Parser.LD:
	        case Cobol85Parser.LEFTLINE:
	        case Cobol85Parser.LENGTH_CHECK:
	        case Cobol85Parser.LIBACCESS:
	        case Cobol85Parser.LIBPARAMETER:
	        case Cobol85Parser.LIBRARY:
	        case Cobol85Parser.LIST:
	        case Cobol85Parser.LOCAL:
	        case Cobol85Parser.LONG_DATE:
	        case Cobol85Parser.LONG_TIME:
	        case Cobol85Parser.LOWER:
	        case Cobol85Parser.LOWLIGHT:
	        case Cobol85Parser.MMDDYYYY:
	        case Cobol85Parser.NAMED:
	        case Cobol85Parser.NATIONAL:
	        case Cobol85Parser.NATIONAL_EDITED:
	        case Cobol85Parser.NETWORK:
	        case Cobol85Parser.NO_ECHO:
	        case Cobol85Parser.NUMERIC_DATE:
	        case Cobol85Parser.NUMERIC_TIME:
	        case Cobol85Parser.ODT:
	        case Cobol85Parser.ORDERLY:
	        case Cobol85Parser.OVERLINE:
	        case Cobol85Parser.OWN:
	        case Cobol85Parser.PASSWORD:
	        case Cobol85Parser.PORT:
	        case Cobol85Parser.PRINTER:
	        case Cobol85Parser.PRIVATE:
	        case Cobol85Parser.PROCESS:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.PROMPT:
	        case Cobol85Parser.READER:
	        case Cobol85Parser.REMOTE:
	        case Cobol85Parser.REAL:
	        case Cobol85Parser.RECEIVED:
	        case Cobol85Parser.RECURSIVE:
	        case Cobol85Parser.REF:
	        case Cobol85Parser.REMOVE:
	        case Cobol85Parser.REQUIRED:
	        case Cobol85Parser.REVERSE_VIDEO:
	        case Cobol85Parser.SAVE:
	        case Cobol85Parser.SECURE:
	        case Cobol85Parser.SHARED:
	        case Cobol85Parser.SHAREDBYALL:
	        case Cobol85Parser.SHAREDBYRUNUNIT:
	        case Cobol85Parser.SHARING:
	        case Cobol85Parser.SHORT_DATE:
	        case Cobol85Parser.SYMBOL:
	        case Cobol85Parser.TASK:
	        case Cobol85Parser.THREAD:
	        case Cobol85Parser.THREAD_LOCAL:
	        case Cobol85Parser.TIMER:
	        case Cobol85Parser.TODAYS_DATE:
	        case Cobol85Parser.TODAYS_NAME:
	        case Cobol85Parser.TRUNCATED:
	        case Cobol85Parser.TYPEDEF:
	        case Cobol85Parser.UNDERLINE:
	        case Cobol85Parser.VIRTUAL:
	        case Cobol85Parser.WAIT:
	        case Cobol85Parser.YEAR:
	        case Cobol85Parser.YYYYMMDD:
	        case Cobol85Parser.YYYYDDD:
	        case Cobol85Parser.ZERO_FILL:
	        case Cobol85Parser.IDENTIFIER:
	            this.state = 2198;
	            this.dataName();
	            break;
	        case Cobol85Parser.LEVEL_NUMBER_66:
	        case Cobol85Parser.LEVEL_NUMBER_77:
	        case Cobol85Parser.LEVEL_NUMBER_88:
	        case Cobol85Parser.INTEGERLITERAL:
	            this.state = 2199;
	            this.integerLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linageLinesAtBottom() {
	    let localctx = new LinageLinesAtBottomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, Cobol85Parser.RULE_linageLinesAtBottom);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2203;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.LINES) {
	            this.state = 2202;
	            this.match(Cobol85Parser.LINES);
	        }

	        this.state = 2206;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.AT) {
	            this.state = 2205;
	            this.match(Cobol85Parser.AT);
	        }

	        this.state = 2208;
	        this.match(Cobol85Parser.BOTTOM);
	        this.state = 2211;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.ABORT:
	        case Cobol85Parser.AS:
	        case Cobol85Parser.ASCII:
	        case Cobol85Parser.ASSOCIATED_DATA:
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	        case Cobol85Parser.ATTRIBUTE:
	        case Cobol85Parser.AUTO:
	        case Cobol85Parser.AUTO_SKIP:
	        case Cobol85Parser.BACKGROUND_COLOR:
	        case Cobol85Parser.BACKGROUND_COLOUR:
	        case Cobol85Parser.BEEP:
	        case Cobol85Parser.BELL:
	        case Cobol85Parser.BINARY:
	        case Cobol85Parser.BIT:
	        case Cobol85Parser.BLINK:
	        case Cobol85Parser.BOUNDS:
	        case Cobol85Parser.CAPABLE:
	        case Cobol85Parser.CCSVERSION:
	        case Cobol85Parser.CHANGED:
	        case Cobol85Parser.CHANNEL:
	        case Cobol85Parser.CLOSE_DISPOSITION:
	        case Cobol85Parser.COBOL:
	        case Cobol85Parser.COMMITMENT:
	        case Cobol85Parser.CONTROL_POINT:
	        case Cobol85Parser.CONVENTION:
	        case Cobol85Parser.CRUNCH:
	        case Cobol85Parser.CURSOR:
	        case Cobol85Parser.DEFAULT:
	        case Cobol85Parser.DEFAULT_DISPLAY:
	        case Cobol85Parser.DEFINITION:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.DISK:
	        case Cobol85Parser.DONTCARE:
	        case Cobol85Parser.DOUBLE:
	        case Cobol85Parser.EBCDIC:
	        case Cobol85Parser.EMPTY_CHECK:
	        case Cobol85Parser.ENTER:
	        case Cobol85Parser.ENTRY_PROCEDURE:
	        case Cobol85Parser.ERASE:
	        case Cobol85Parser.EOL:
	        case Cobol85Parser.EOS:
	        case Cobol85Parser.ESCAPE:
	        case Cobol85Parser.EVENT:
	        case Cobol85Parser.EXCLUSIVE:
	        case Cobol85Parser.EXPORT:
	        case Cobol85Parser.EXTENDED:
	        case Cobol85Parser.FOREGROUND_COLOR:
	        case Cobol85Parser.FOREGROUND_COLOUR:
	        case Cobol85Parser.FULL:
	        case Cobol85Parser.FUNCTIONNAME:
	        case Cobol85Parser.FUNCTION_POINTER:
	        case Cobol85Parser.GRID:
	        case Cobol85Parser.HIGHLIGHT:
	        case Cobol85Parser.IMPLICIT:
	        case Cobol85Parser.IMPORT:
	        case Cobol85Parser.INTEGER:
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.KEYBOARD:
	        case Cobol85Parser.LANGUAGE:
	        case Cobol85Parser.LB:
	        case Cobol85Parser.LD:
	        case Cobol85Parser.LEFTLINE:
	        case Cobol85Parser.LENGTH_CHECK:
	        case Cobol85Parser.LIBACCESS:
	        case Cobol85Parser.LIBPARAMETER:
	        case Cobol85Parser.LIBRARY:
	        case Cobol85Parser.LIST:
	        case Cobol85Parser.LOCAL:
	        case Cobol85Parser.LONG_DATE:
	        case Cobol85Parser.LONG_TIME:
	        case Cobol85Parser.LOWER:
	        case Cobol85Parser.LOWLIGHT:
	        case Cobol85Parser.MMDDYYYY:
	        case Cobol85Parser.NAMED:
	        case Cobol85Parser.NATIONAL:
	        case Cobol85Parser.NATIONAL_EDITED:
	        case Cobol85Parser.NETWORK:
	        case Cobol85Parser.NO_ECHO:
	        case Cobol85Parser.NUMERIC_DATE:
	        case Cobol85Parser.NUMERIC_TIME:
	        case Cobol85Parser.ODT:
	        case Cobol85Parser.ORDERLY:
	        case Cobol85Parser.OVERLINE:
	        case Cobol85Parser.OWN:
	        case Cobol85Parser.PASSWORD:
	        case Cobol85Parser.PORT:
	        case Cobol85Parser.PRINTER:
	        case Cobol85Parser.PRIVATE:
	        case Cobol85Parser.PROCESS:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.PROMPT:
	        case Cobol85Parser.READER:
	        case Cobol85Parser.REMOTE:
	        case Cobol85Parser.REAL:
	        case Cobol85Parser.RECEIVED:
	        case Cobol85Parser.RECURSIVE:
	        case Cobol85Parser.REF:
	        case Cobol85Parser.REMOVE:
	        case Cobol85Parser.REQUIRED:
	        case Cobol85Parser.REVERSE_VIDEO:
	        case Cobol85Parser.SAVE:
	        case Cobol85Parser.SECURE:
	        case Cobol85Parser.SHARED:
	        case Cobol85Parser.SHAREDBYALL:
	        case Cobol85Parser.SHAREDBYRUNUNIT:
	        case Cobol85Parser.SHARING:
	        case Cobol85Parser.SHORT_DATE:
	        case Cobol85Parser.SYMBOL:
	        case Cobol85Parser.TASK:
	        case Cobol85Parser.THREAD:
	        case Cobol85Parser.THREAD_LOCAL:
	        case Cobol85Parser.TIMER:
	        case Cobol85Parser.TODAYS_DATE:
	        case Cobol85Parser.TODAYS_NAME:
	        case Cobol85Parser.TRUNCATED:
	        case Cobol85Parser.TYPEDEF:
	        case Cobol85Parser.UNDERLINE:
	        case Cobol85Parser.VIRTUAL:
	        case Cobol85Parser.WAIT:
	        case Cobol85Parser.YEAR:
	        case Cobol85Parser.YYYYMMDD:
	        case Cobol85Parser.YYYYDDD:
	        case Cobol85Parser.ZERO_FILL:
	        case Cobol85Parser.IDENTIFIER:
	            this.state = 2209;
	            this.dataName();
	            break;
	        case Cobol85Parser.LEVEL_NUMBER_66:
	        case Cobol85Parser.LEVEL_NUMBER_77:
	        case Cobol85Parser.LEVEL_NUMBER_88:
	        case Cobol85Parser.INTEGERLITERAL:
	            this.state = 2210;
	            this.integerLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordingModeClause() {
	    let localctx = new RecordingModeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, Cobol85Parser.RULE_recordingModeClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2213;
	        this.match(Cobol85Parser.RECORDING);
	        this.state = 2215;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.MODE) {
	            this.state = 2214;
	            this.match(Cobol85Parser.MODE);
	        }

	        this.state = 2218;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2217;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2220;
	        this.modeStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modeStatement() {
	    let localctx = new ModeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, Cobol85Parser.RULE_modeStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2222;
	        this.cobolWord();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	codeSetClause() {
	    let localctx = new CodeSetClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, Cobol85Parser.RULE_codeSetClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2224;
	        this.match(Cobol85Parser.CODE_SET);
	        this.state = 2226;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2225;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2228;
	        this.alphabetName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportClause() {
	    let localctx = new ReportClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, Cobol85Parser.RULE_reportClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2238;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.REPORT:
	            this.state = 2230;
	            this.match(Cobol85Parser.REPORT);
	            this.state = 2232;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.IS) {
	                this.state = 2231;
	                this.match(Cobol85Parser.IS);
	            }

	            break;
	        case Cobol85Parser.REPORTS:
	            this.state = 2234;
	            this.match(Cobol85Parser.REPORTS);
	            this.state = 2236;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.ARE) {
	                this.state = 2235;
	                this.match(Cobol85Parser.ARE);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2241; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2240;
	            this.reportName();
	            this.state = 2243; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataBaseSection() {
	    let localctx = new DataBaseSectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, Cobol85Parser.RULE_dataBaseSection);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2245;
	        this.match(Cobol85Parser.DATA_BASE);
	        this.state = 2246;
	        this.match(Cobol85Parser.SECTION);
	        this.state = 2247;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 2251;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0)) {
	            this.state = 2248;
	            this.dataBaseSectionEntry();
	            this.state = 2253;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataBaseSectionEntry() {
	    let localctx = new DataBaseSectionEntryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, Cobol85Parser.RULE_dataBaseSectionEntry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2254;
	        this.integerLiteral();
	        this.state = 2255;
	        this.literal();
	        this.state = 2256;
	        this.match(Cobol85Parser.INVOKE);
	        this.state = 2257;
	        this.literal();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	workingStorageSection() {
	    let localctx = new WorkingStorageSectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, Cobol85Parser.RULE_workingStorageSection);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2259;
	        this.match(Cobol85Parser.WORKING_STORAGE);
	        this.state = 2260;
	        this.match(Cobol85Parser.SECTION);
	        this.state = 2261;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 2265;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.EXECSQLLINE - 552)))) !== 0)) {
	            this.state = 2262;
	            this.dataDescriptionEntry();
	            this.state = 2267;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linkageSection() {
	    let localctx = new LinkageSectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, Cobol85Parser.RULE_linkageSection);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2268;
	        this.match(Cobol85Parser.LINKAGE);
	        this.state = 2269;
	        this.match(Cobol85Parser.SECTION);
	        this.state = 2270;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 2274;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.EXECSQLLINE - 552)))) !== 0)) {
	            this.state = 2271;
	            this.dataDescriptionEntry();
	            this.state = 2276;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	communicationSection() {
	    let localctx = new CommunicationSectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, Cobol85Parser.RULE_communicationSection);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2277;
	        this.match(Cobol85Parser.COMMUNICATION);
	        this.state = 2278;
	        this.match(Cobol85Parser.SECTION);
	        this.state = 2279;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 2284;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.CD || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.EXECSQLLINE - 552)))) !== 0)) {
	            this.state = 2282;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case Cobol85Parser.CD:
	                this.state = 2280;
	                this.communicationDescriptionEntry();
	                break;
	            case Cobol85Parser.LEVEL_NUMBER_66:
	            case Cobol85Parser.LEVEL_NUMBER_77:
	            case Cobol85Parser.LEVEL_NUMBER_88:
	            case Cobol85Parser.INTEGERLITERAL:
	            case Cobol85Parser.EXECSQLLINE:
	                this.state = 2281;
	                this.dataDescriptionEntry();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2286;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	communicationDescriptionEntry() {
	    let localctx = new CommunicationDescriptionEntryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, Cobol85Parser.RULE_communicationDescriptionEntry);
	    try {
	        this.state = 2290;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,229,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2287;
	            this.communicationDescriptionEntryFormat1();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2288;
	            this.communicationDescriptionEntryFormat2();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2289;
	            this.communicationDescriptionEntryFormat3();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	communicationDescriptionEntryFormat1() {
	    let localctx = new CommunicationDescriptionEntryFormat1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, Cobol85Parser.RULE_communicationDescriptionEntryFormat1);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2292;
	        this.match(Cobol85Parser.CD);
	        this.state = 2293;
	        this.cdName();
	        this.state = 2295;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FOR) {
	            this.state = 2294;
	            this.match(Cobol85Parser.FOR);
	        }

	        this.state = 2298;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.INITIAL) {
	            this.state = 2297;
	            this.match(Cobol85Parser.INITIAL);
	        }

	        this.state = 2300;
	        this.match(Cobol85Parser.INPUT);
	        this.state = 2315;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.COUNT - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)) | (1 << (Cobol85Parser.END - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FILLER - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MESSAGE - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUEUE - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SOURCE - 431)) | (1 << (Cobol85Parser.STATUS - 431)) | (1 << (Cobol85Parser.SUB_QUEUE_1 - 431)) | (1 << (Cobol85Parser.SUB_QUEUE_2 - 431)) | (1 << (Cobol85Parser.SUB_QUEUE_3 - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.SYMBOLIC - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.TEXT - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la===Cobol85Parser.IDENTIFIER) {
	            this.state = 2313;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case Cobol85Parser.COUNT:
	            case Cobol85Parser.END:
	            case Cobol85Parser.MESSAGE:
	            case Cobol85Parser.QUEUE:
	            case Cobol85Parser.SOURCE:
	            case Cobol85Parser.STATUS:
	            case Cobol85Parser.SUB_QUEUE_1:
	            case Cobol85Parser.SUB_QUEUE_2:
	            case Cobol85Parser.SUB_QUEUE_3:
	            case Cobol85Parser.SYMBOLIC:
	            case Cobol85Parser.TEXT:
	                this.state = 2310;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 2301;
	                    this.symbolicQueueClause();
	                    break;

	                case 2:
	                    this.state = 2302;
	                    this.symbolicSubQueueClause();
	                    break;

	                case 3:
	                    this.state = 2303;
	                    this.messageDateClause();
	                    break;

	                case 4:
	                    this.state = 2304;
	                    this.messageTimeClause();
	                    break;

	                case 5:
	                    this.state = 2305;
	                    this.symbolicSourceClause();
	                    break;

	                case 6:
	                    this.state = 2306;
	                    this.textLengthClause();
	                    break;

	                case 7:
	                    this.state = 2307;
	                    this.endKeyClause();
	                    break;

	                case 8:
	                    this.state = 2308;
	                    this.statusKeyClause();
	                    break;

	                case 9:
	                    this.state = 2309;
	                    this.messageCountClause();
	                    break;

	                }
	                break;
	            case Cobol85Parser.ABORT:
	            case Cobol85Parser.AS:
	            case Cobol85Parser.ASCII:
	            case Cobol85Parser.ASSOCIATED_DATA:
	            case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	            case Cobol85Parser.ATTRIBUTE:
	            case Cobol85Parser.AUTO:
	            case Cobol85Parser.AUTO_SKIP:
	            case Cobol85Parser.BACKGROUND_COLOR:
	            case Cobol85Parser.BACKGROUND_COLOUR:
	            case Cobol85Parser.BEEP:
	            case Cobol85Parser.BELL:
	            case Cobol85Parser.BINARY:
	            case Cobol85Parser.BIT:
	            case Cobol85Parser.BLINK:
	            case Cobol85Parser.BOUNDS:
	            case Cobol85Parser.CAPABLE:
	            case Cobol85Parser.CCSVERSION:
	            case Cobol85Parser.CHANGED:
	            case Cobol85Parser.CHANNEL:
	            case Cobol85Parser.CLOSE_DISPOSITION:
	            case Cobol85Parser.COBOL:
	            case Cobol85Parser.COMMITMENT:
	            case Cobol85Parser.CONTROL_POINT:
	            case Cobol85Parser.CONVENTION:
	            case Cobol85Parser.CRUNCH:
	            case Cobol85Parser.CURSOR:
	            case Cobol85Parser.DEFAULT:
	            case Cobol85Parser.DEFAULT_DISPLAY:
	            case Cobol85Parser.DEFINITION:
	            case Cobol85Parser.DFHRESP:
	            case Cobol85Parser.DFHVALUE:
	            case Cobol85Parser.DISK:
	            case Cobol85Parser.DONTCARE:
	            case Cobol85Parser.DOUBLE:
	            case Cobol85Parser.EBCDIC:
	            case Cobol85Parser.EMPTY_CHECK:
	            case Cobol85Parser.ENTER:
	            case Cobol85Parser.ENTRY_PROCEDURE:
	            case Cobol85Parser.ERASE:
	            case Cobol85Parser.EOL:
	            case Cobol85Parser.EOS:
	            case Cobol85Parser.ESCAPE:
	            case Cobol85Parser.EVENT:
	            case Cobol85Parser.EXCLUSIVE:
	            case Cobol85Parser.EXPORT:
	            case Cobol85Parser.EXTENDED:
	            case Cobol85Parser.FILLER:
	            case Cobol85Parser.FOREGROUND_COLOR:
	            case Cobol85Parser.FOREGROUND_COLOUR:
	            case Cobol85Parser.FULL:
	            case Cobol85Parser.FUNCTIONNAME:
	            case Cobol85Parser.FUNCTION_POINTER:
	            case Cobol85Parser.GRID:
	            case Cobol85Parser.HIGHLIGHT:
	            case Cobol85Parser.IMPLICIT:
	            case Cobol85Parser.IMPORT:
	            case Cobol85Parser.INTEGER:
	            case Cobol85Parser.KEPT:
	            case Cobol85Parser.KEYBOARD:
	            case Cobol85Parser.LANGUAGE:
	            case Cobol85Parser.LB:
	            case Cobol85Parser.LD:
	            case Cobol85Parser.LEFTLINE:
	            case Cobol85Parser.LENGTH_CHECK:
	            case Cobol85Parser.LIBACCESS:
	            case Cobol85Parser.LIBPARAMETER:
	            case Cobol85Parser.LIBRARY:
	            case Cobol85Parser.LIST:
	            case Cobol85Parser.LOCAL:
	            case Cobol85Parser.LONG_DATE:
	            case Cobol85Parser.LONG_TIME:
	            case Cobol85Parser.LOWER:
	            case Cobol85Parser.LOWLIGHT:
	            case Cobol85Parser.MMDDYYYY:
	            case Cobol85Parser.NAMED:
	            case Cobol85Parser.NATIONAL:
	            case Cobol85Parser.NATIONAL_EDITED:
	            case Cobol85Parser.NETWORK:
	            case Cobol85Parser.NO_ECHO:
	            case Cobol85Parser.NUMERIC_DATE:
	            case Cobol85Parser.NUMERIC_TIME:
	            case Cobol85Parser.ODT:
	            case Cobol85Parser.ORDERLY:
	            case Cobol85Parser.OVERLINE:
	            case Cobol85Parser.OWN:
	            case Cobol85Parser.PASSWORD:
	            case Cobol85Parser.PORT:
	            case Cobol85Parser.PRINTER:
	            case Cobol85Parser.PRIVATE:
	            case Cobol85Parser.PROCESS:
	            case Cobol85Parser.PROGRAM:
	            case Cobol85Parser.PROMPT:
	            case Cobol85Parser.READER:
	            case Cobol85Parser.REMOTE:
	            case Cobol85Parser.REAL:
	            case Cobol85Parser.RECEIVED:
	            case Cobol85Parser.RECURSIVE:
	            case Cobol85Parser.REF:
	            case Cobol85Parser.REMOVE:
	            case Cobol85Parser.REQUIRED:
	            case Cobol85Parser.REVERSE_VIDEO:
	            case Cobol85Parser.SAVE:
	            case Cobol85Parser.SECURE:
	            case Cobol85Parser.SHARED:
	            case Cobol85Parser.SHAREDBYALL:
	            case Cobol85Parser.SHAREDBYRUNUNIT:
	            case Cobol85Parser.SHARING:
	            case Cobol85Parser.SHORT_DATE:
	            case Cobol85Parser.SYMBOL:
	            case Cobol85Parser.TASK:
	            case Cobol85Parser.THREAD:
	            case Cobol85Parser.THREAD_LOCAL:
	            case Cobol85Parser.TIMER:
	            case Cobol85Parser.TODAYS_DATE:
	            case Cobol85Parser.TODAYS_NAME:
	            case Cobol85Parser.TRUNCATED:
	            case Cobol85Parser.TYPEDEF:
	            case Cobol85Parser.UNDERLINE:
	            case Cobol85Parser.VIRTUAL:
	            case Cobol85Parser.WAIT:
	            case Cobol85Parser.YEAR:
	            case Cobol85Parser.YYYYMMDD:
	            case Cobol85Parser.YYYYDDD:
	            case Cobol85Parser.ZERO_FILL:
	            case Cobol85Parser.IDENTIFIER:
	                this.state = 2312;
	                this.dataDescName();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2317;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2318;
	        this.match(Cobol85Parser.DOT_FS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	communicationDescriptionEntryFormat2() {
	    let localctx = new CommunicationDescriptionEntryFormat2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, Cobol85Parser.RULE_communicationDescriptionEntryFormat2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2320;
	        this.match(Cobol85Parser.CD);
	        this.state = 2321;
	        this.cdName();
	        this.state = 2323;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FOR) {
	            this.state = 2322;
	            this.match(Cobol85Parser.FOR);
	        }

	        this.state = 2325;
	        this.match(Cobol85Parser.OUTPUT);
	        this.state = 2334;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.DESTINATION || _la===Cobol85Parser.ERROR || ((((_la - 457)) & ~0x1f) == 0 && ((1 << (_la - 457)) & ((1 << (Cobol85Parser.STATUS - 457)) | (1 << (Cobol85Parser.SYMBOLIC - 457)) | (1 << (Cobol85Parser.TEXT - 457)))) !== 0)) {
	            this.state = 2332;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,236,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2326;
	                this.destinationCountClause();
	                break;

	            case 2:
	                this.state = 2327;
	                this.textLengthClause();
	                break;

	            case 3:
	                this.state = 2328;
	                this.statusKeyClause();
	                break;

	            case 4:
	                this.state = 2329;
	                this.destinationTableClause();
	                break;

	            case 5:
	                this.state = 2330;
	                this.errorKeyClause();
	                break;

	            case 6:
	                this.state = 2331;
	                this.symbolicDestinationClause();
	                break;

	            }
	            this.state = 2336;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2337;
	        this.match(Cobol85Parser.DOT_FS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	communicationDescriptionEntryFormat3() {
	    let localctx = new CommunicationDescriptionEntryFormat3Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, Cobol85Parser.RULE_communicationDescriptionEntryFormat3);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2339;
	        this.match(Cobol85Parser.CD);
	        this.state = 2340;
	        this.cdName();
	        this.state = 2342;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FOR) {
	            this.state = 2341;
	            this.match(Cobol85Parser.FOR);
	        }

	        this.state = 2344;
	        this.match(Cobol85Parser.INITIAL);
	        this.state = 2345;
	        this.match(Cobol85Parser.I_O);
	        this.state = 2357;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)) | (1 << (Cobol85Parser.END - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FILLER - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MESSAGE - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.STATUS - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.SYMBOLIC - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.TERMINAL - 466)) | (1 << (Cobol85Parser.TEXT - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la===Cobol85Parser.IDENTIFIER) {
	            this.state = 2355;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case Cobol85Parser.END:
	            case Cobol85Parser.MESSAGE:
	            case Cobol85Parser.STATUS:
	            case Cobol85Parser.SYMBOLIC:
	            case Cobol85Parser.TERMINAL:
	            case Cobol85Parser.TEXT:
	                this.state = 2352;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,239,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 2346;
	                    this.messageDateClause();
	                    break;

	                case 2:
	                    this.state = 2347;
	                    this.messageTimeClause();
	                    break;

	                case 3:
	                    this.state = 2348;
	                    this.symbolicTerminalClause();
	                    break;

	                case 4:
	                    this.state = 2349;
	                    this.textLengthClause();
	                    break;

	                case 5:
	                    this.state = 2350;
	                    this.endKeyClause();
	                    break;

	                case 6:
	                    this.state = 2351;
	                    this.statusKeyClause();
	                    break;

	                }
	                break;
	            case Cobol85Parser.ABORT:
	            case Cobol85Parser.AS:
	            case Cobol85Parser.ASCII:
	            case Cobol85Parser.ASSOCIATED_DATA:
	            case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	            case Cobol85Parser.ATTRIBUTE:
	            case Cobol85Parser.AUTO:
	            case Cobol85Parser.AUTO_SKIP:
	            case Cobol85Parser.BACKGROUND_COLOR:
	            case Cobol85Parser.BACKGROUND_COLOUR:
	            case Cobol85Parser.BEEP:
	            case Cobol85Parser.BELL:
	            case Cobol85Parser.BINARY:
	            case Cobol85Parser.BIT:
	            case Cobol85Parser.BLINK:
	            case Cobol85Parser.BOUNDS:
	            case Cobol85Parser.CAPABLE:
	            case Cobol85Parser.CCSVERSION:
	            case Cobol85Parser.CHANGED:
	            case Cobol85Parser.CHANNEL:
	            case Cobol85Parser.CLOSE_DISPOSITION:
	            case Cobol85Parser.COBOL:
	            case Cobol85Parser.COMMITMENT:
	            case Cobol85Parser.CONTROL_POINT:
	            case Cobol85Parser.CONVENTION:
	            case Cobol85Parser.CRUNCH:
	            case Cobol85Parser.CURSOR:
	            case Cobol85Parser.DEFAULT:
	            case Cobol85Parser.DEFAULT_DISPLAY:
	            case Cobol85Parser.DEFINITION:
	            case Cobol85Parser.DFHRESP:
	            case Cobol85Parser.DFHVALUE:
	            case Cobol85Parser.DISK:
	            case Cobol85Parser.DONTCARE:
	            case Cobol85Parser.DOUBLE:
	            case Cobol85Parser.EBCDIC:
	            case Cobol85Parser.EMPTY_CHECK:
	            case Cobol85Parser.ENTER:
	            case Cobol85Parser.ENTRY_PROCEDURE:
	            case Cobol85Parser.ERASE:
	            case Cobol85Parser.EOL:
	            case Cobol85Parser.EOS:
	            case Cobol85Parser.ESCAPE:
	            case Cobol85Parser.EVENT:
	            case Cobol85Parser.EXCLUSIVE:
	            case Cobol85Parser.EXPORT:
	            case Cobol85Parser.EXTENDED:
	            case Cobol85Parser.FILLER:
	            case Cobol85Parser.FOREGROUND_COLOR:
	            case Cobol85Parser.FOREGROUND_COLOUR:
	            case Cobol85Parser.FULL:
	            case Cobol85Parser.FUNCTIONNAME:
	            case Cobol85Parser.FUNCTION_POINTER:
	            case Cobol85Parser.GRID:
	            case Cobol85Parser.HIGHLIGHT:
	            case Cobol85Parser.IMPLICIT:
	            case Cobol85Parser.IMPORT:
	            case Cobol85Parser.INTEGER:
	            case Cobol85Parser.KEPT:
	            case Cobol85Parser.KEYBOARD:
	            case Cobol85Parser.LANGUAGE:
	            case Cobol85Parser.LB:
	            case Cobol85Parser.LD:
	            case Cobol85Parser.LEFTLINE:
	            case Cobol85Parser.LENGTH_CHECK:
	            case Cobol85Parser.LIBACCESS:
	            case Cobol85Parser.LIBPARAMETER:
	            case Cobol85Parser.LIBRARY:
	            case Cobol85Parser.LIST:
	            case Cobol85Parser.LOCAL:
	            case Cobol85Parser.LONG_DATE:
	            case Cobol85Parser.LONG_TIME:
	            case Cobol85Parser.LOWER:
	            case Cobol85Parser.LOWLIGHT:
	            case Cobol85Parser.MMDDYYYY:
	            case Cobol85Parser.NAMED:
	            case Cobol85Parser.NATIONAL:
	            case Cobol85Parser.NATIONAL_EDITED:
	            case Cobol85Parser.NETWORK:
	            case Cobol85Parser.NO_ECHO:
	            case Cobol85Parser.NUMERIC_DATE:
	            case Cobol85Parser.NUMERIC_TIME:
	            case Cobol85Parser.ODT:
	            case Cobol85Parser.ORDERLY:
	            case Cobol85Parser.OVERLINE:
	            case Cobol85Parser.OWN:
	            case Cobol85Parser.PASSWORD:
	            case Cobol85Parser.PORT:
	            case Cobol85Parser.PRINTER:
	            case Cobol85Parser.PRIVATE:
	            case Cobol85Parser.PROCESS:
	            case Cobol85Parser.PROGRAM:
	            case Cobol85Parser.PROMPT:
	            case Cobol85Parser.READER:
	            case Cobol85Parser.REMOTE:
	            case Cobol85Parser.REAL:
	            case Cobol85Parser.RECEIVED:
	            case Cobol85Parser.RECURSIVE:
	            case Cobol85Parser.REF:
	            case Cobol85Parser.REMOVE:
	            case Cobol85Parser.REQUIRED:
	            case Cobol85Parser.REVERSE_VIDEO:
	            case Cobol85Parser.SAVE:
	            case Cobol85Parser.SECURE:
	            case Cobol85Parser.SHARED:
	            case Cobol85Parser.SHAREDBYALL:
	            case Cobol85Parser.SHAREDBYRUNUNIT:
	            case Cobol85Parser.SHARING:
	            case Cobol85Parser.SHORT_DATE:
	            case Cobol85Parser.SYMBOL:
	            case Cobol85Parser.TASK:
	            case Cobol85Parser.THREAD:
	            case Cobol85Parser.THREAD_LOCAL:
	            case Cobol85Parser.TIMER:
	            case Cobol85Parser.TODAYS_DATE:
	            case Cobol85Parser.TODAYS_NAME:
	            case Cobol85Parser.TRUNCATED:
	            case Cobol85Parser.TYPEDEF:
	            case Cobol85Parser.UNDERLINE:
	            case Cobol85Parser.VIRTUAL:
	            case Cobol85Parser.WAIT:
	            case Cobol85Parser.YEAR:
	            case Cobol85Parser.YYYYMMDD:
	            case Cobol85Parser.YYYYDDD:
	            case Cobol85Parser.ZERO_FILL:
	            case Cobol85Parser.IDENTIFIER:
	                this.state = 2354;
	                this.dataDescName();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2359;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2360;
	        this.match(Cobol85Parser.DOT_FS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	destinationCountClause() {
	    let localctx = new DestinationCountClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, Cobol85Parser.RULE_destinationCountClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2362;
	        this.match(Cobol85Parser.DESTINATION);
	        this.state = 2363;
	        this.match(Cobol85Parser.COUNT);
	        this.state = 2365;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2364;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2367;
	        this.dataDescName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	destinationTableClause() {
	    let localctx = new DestinationTableClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, Cobol85Parser.RULE_destinationTableClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2369;
	        this.match(Cobol85Parser.DESTINATION);
	        this.state = 2370;
	        this.match(Cobol85Parser.TABLE);
	        this.state = 2371;
	        this.match(Cobol85Parser.OCCURS);
	        this.state = 2372;
	        this.integerLiteral();
	        this.state = 2373;
	        this.match(Cobol85Parser.TIMES);
	        this.state = 2381;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.INDEXED) {
	            this.state = 2374;
	            this.match(Cobol85Parser.INDEXED);
	            this.state = 2375;
	            this.match(Cobol85Parser.BY);
	            this.state = 2377; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2376;
	                this.indexName();
	                this.state = 2379; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la===Cobol85Parser.IDENTIFIER);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endKeyClause() {
	    let localctx = new EndKeyClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, Cobol85Parser.RULE_endKeyClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2383;
	        this.match(Cobol85Parser.END);
	        this.state = 2384;
	        this.match(Cobol85Parser.KEY);
	        this.state = 2386;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2385;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2388;
	        this.dataDescName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	errorKeyClause() {
	    let localctx = new ErrorKeyClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, Cobol85Parser.RULE_errorKeyClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2390;
	        this.match(Cobol85Parser.ERROR);
	        this.state = 2391;
	        this.match(Cobol85Parser.KEY);
	        this.state = 2393;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2392;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2395;
	        this.dataDescName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	messageCountClause() {
	    let localctx = new MessageCountClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, Cobol85Parser.RULE_messageCountClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2398;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.MESSAGE) {
	            this.state = 2397;
	            this.match(Cobol85Parser.MESSAGE);
	        }

	        this.state = 2400;
	        this.match(Cobol85Parser.COUNT);
	        this.state = 2402;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2401;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2404;
	        this.dataDescName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	messageDateClause() {
	    let localctx = new MessageDateClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, Cobol85Parser.RULE_messageDateClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2406;
	        this.match(Cobol85Parser.MESSAGE);
	        this.state = 2407;
	        this.match(Cobol85Parser.DATE);
	        this.state = 2409;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2408;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2411;
	        this.dataDescName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	messageTimeClause() {
	    let localctx = new MessageTimeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, Cobol85Parser.RULE_messageTimeClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2413;
	        this.match(Cobol85Parser.MESSAGE);
	        this.state = 2414;
	        this.match(Cobol85Parser.TIME);
	        this.state = 2416;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2415;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2418;
	        this.dataDescName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statusKeyClause() {
	    let localctx = new StatusKeyClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, Cobol85Parser.RULE_statusKeyClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2420;
	        this.match(Cobol85Parser.STATUS);
	        this.state = 2421;
	        this.match(Cobol85Parser.KEY);
	        this.state = 2423;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2422;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2425;
	        this.dataDescName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	symbolicDestinationClause() {
	    let localctx = new SymbolicDestinationClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, Cobol85Parser.RULE_symbolicDestinationClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2428;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.SYMBOLIC) {
	            this.state = 2427;
	            this.match(Cobol85Parser.SYMBOLIC);
	        }

	        this.state = 2430;
	        this.match(Cobol85Parser.DESTINATION);
	        this.state = 2432;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2431;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2434;
	        this.dataDescName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	symbolicQueueClause() {
	    let localctx = new SymbolicQueueClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, Cobol85Parser.RULE_symbolicQueueClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2437;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.SYMBOLIC) {
	            this.state = 2436;
	            this.match(Cobol85Parser.SYMBOLIC);
	        }

	        this.state = 2439;
	        this.match(Cobol85Parser.QUEUE);
	        this.state = 2441;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2440;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2443;
	        this.dataDescName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	symbolicSourceClause() {
	    let localctx = new SymbolicSourceClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, Cobol85Parser.RULE_symbolicSourceClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2446;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.SYMBOLIC) {
	            this.state = 2445;
	            this.match(Cobol85Parser.SYMBOLIC);
	        }

	        this.state = 2448;
	        this.match(Cobol85Parser.SOURCE);
	        this.state = 2450;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2449;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2452;
	        this.dataDescName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	symbolicTerminalClause() {
	    let localctx = new SymbolicTerminalClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, Cobol85Parser.RULE_symbolicTerminalClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2455;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.SYMBOLIC) {
	            this.state = 2454;
	            this.match(Cobol85Parser.SYMBOLIC);
	        }

	        this.state = 2457;
	        this.match(Cobol85Parser.TERMINAL);
	        this.state = 2459;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2458;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2461;
	        this.dataDescName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	symbolicSubQueueClause() {
	    let localctx = new SymbolicSubQueueClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, Cobol85Parser.RULE_symbolicSubQueueClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2464;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.SYMBOLIC) {
	            this.state = 2463;
	            this.match(Cobol85Parser.SYMBOLIC);
	        }

	        this.state = 2466;
	        _la = this._input.LA(1);
	        if(!(((((_la - 460)) & ~0x1f) == 0 && ((1 << (_la - 460)) & ((1 << (Cobol85Parser.SUB_QUEUE_1 - 460)) | (1 << (Cobol85Parser.SUB_QUEUE_2 - 460)) | (1 << (Cobol85Parser.SUB_QUEUE_3 - 460)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2468;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2467;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2470;
	        this.dataDescName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textLengthClause() {
	    let localctx = new TextLengthClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, Cobol85Parser.RULE_textLengthClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2472;
	        this.match(Cobol85Parser.TEXT);
	        this.state = 2473;
	        this.match(Cobol85Parser.LENGTH);
	        this.state = 2475;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2474;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2477;
	        this.dataDescName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localStorageSection() {
	    let localctx = new LocalStorageSectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, Cobol85Parser.RULE_localStorageSection);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2479;
	        this.match(Cobol85Parser.LOCAL_STORAGE);
	        this.state = 2480;
	        this.match(Cobol85Parser.SECTION);
	        this.state = 2481;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 2486;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.LD) {
	            this.state = 2482;
	            this.match(Cobol85Parser.LD);
	            this.state = 2483;
	            this.localName();
	            this.state = 2484;
	            this.match(Cobol85Parser.DOT_FS);
	        }

	        this.state = 2491;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.EXECSQLLINE - 552)))) !== 0)) {
	            this.state = 2488;
	            this.dataDescriptionEntry();
	            this.state = 2493;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenSection() {
	    let localctx = new ScreenSectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, Cobol85Parser.RULE_screenSection);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2494;
	        this.match(Cobol85Parser.SCREEN);
	        this.state = 2495;
	        this.match(Cobol85Parser.SECTION);
	        this.state = 2496;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 2500;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.INTEGERLITERAL) {
	            this.state = 2497;
	            this.screenDescriptionEntry();
	            this.state = 2502;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionEntry() {
	    let localctx = new ScreenDescriptionEntryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, Cobol85Parser.RULE_screenDescriptionEntry);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2503;
	        this.match(Cobol85Parser.INTEGERLITERAL);
	        this.state = 2506;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,266,this._ctx);
	        if(la_===1) {
	            this.state = 2504;
	            this.match(Cobol85Parser.FILLER);

	        } else if(la_===2) {
	            this.state = 2505;
	            this.screenName();

	        }
	        this.state = 2540;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BLANK - 33)) | (1 << (Cobol85Parser.BLINK - 33)))) !== 0) || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (Cobol85Parser.COL - 73)) | (1 << (Cobol85Parser.COLUMN - 73)) | (1 << (Cobol85Parser.CONTROL - 73)))) !== 0) || _la===Cobol85Parser.EMPTY_CHECK || _la===Cobol85Parser.ERASE || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FROM - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)))) !== 0) || ((((_la - 255)) & ~0x1f) == 0 && ((1 << (_la - 255)) & ((1 << (Cobol85Parser.JUST - 255)) | (1 << (Cobol85Parser.JUSTIFIED - 255)) | (1 << (Cobol85Parser.LEADING - 255)) | (1 << (Cobol85Parser.LEFTLINE - 255)) | (1 << (Cobol85Parser.LENGTH_CHECK - 255)) | (1 << (Cobol85Parser.LINE - 255)))) !== 0) || _la===Cobol85Parser.LOWLIGHT || _la===Cobol85Parser.NO_ECHO || ((((_la - 336)) & ~0x1f) == 0 && ((1 << (_la - 336)) & ((1 << (Cobol85Parser.OVERLINE - 336)) | (1 << (Cobol85Parser.PIC - 336)) | (1 << (Cobol85Parser.PICTURE - 336)) | (1 << (Cobol85Parser.PROMPT - 336)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (Cobol85Parser.REQUIRED - 398)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 398)) | (1 << (Cobol85Parser.SECURE - 398)))) !== 0) || _la===Cobol85Parser.SIGN || _la===Cobol85Parser.SIZE || ((((_la - 493)) & ~0x1f) == 0 && ((1 << (_la - 493)) & ((1 << (Cobol85Parser.TRAILING - 493)) | (1 << (Cobol85Parser.UNDERLINE - 493)) | (1 << (Cobol85Parser.USAGE - 493)) | (1 << (Cobol85Parser.USING - 493)) | (1 << (Cobol85Parser.VALUE - 493)) | (1 << (Cobol85Parser.ZERO_FILL - 493)))) !== 0)) {
	            this.state = 2538;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,268,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2508;
	                this.screenDescriptionBlankClause();
	                break;

	            case 2:
	                this.state = 2509;
	                this.screenDescriptionBellClause();
	                break;

	            case 3:
	                this.state = 2510;
	                this.screenDescriptionBlinkClause();
	                break;

	            case 4:
	                this.state = 2511;
	                this.screenDescriptionEraseClause();
	                break;

	            case 5:
	                this.state = 2512;
	                this.screenDescriptionLightClause();
	                break;

	            case 6:
	                this.state = 2513;
	                this.screenDescriptionGridClause();
	                break;

	            case 7:
	                this.state = 2514;
	                this.screenDescriptionReverseVideoClause();
	                break;

	            case 8:
	                this.state = 2515;
	                this.screenDescriptionUnderlineClause();
	                break;

	            case 9:
	                this.state = 2516;
	                this.screenDescriptionSizeClause();
	                break;

	            case 10:
	                this.state = 2517;
	                this.screenDescriptionLineClause();
	                break;

	            case 11:
	                this.state = 2518;
	                this.screenDescriptionColumnClause();
	                break;

	            case 12:
	                this.state = 2519;
	                this.screenDescriptionForegroundColorClause();
	                break;

	            case 13:
	                this.state = 2520;
	                this.screenDescriptionBackgroundColorClause();
	                break;

	            case 14:
	                this.state = 2521;
	                this.screenDescriptionControlClause();
	                break;

	            case 15:
	                this.state = 2522;
	                this.screenDescriptionValueClause();
	                break;

	            case 16:
	                this.state = 2523;
	                this.screenDescriptionPictureClause();
	                break;

	            case 17:
	                this.state = 2526;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case Cobol85Parser.FROM:
	                    this.state = 2524;
	                    this.screenDescriptionFromClause();
	                    break;
	                case Cobol85Parser.USING:
	                    this.state = 2525;
	                    this.screenDescriptionUsingClause();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;

	            case 18:
	                this.state = 2528;
	                this.screenDescriptionUsageClause();
	                break;

	            case 19:
	                this.state = 2529;
	                this.screenDescriptionBlankWhenZeroClause();
	                break;

	            case 20:
	                this.state = 2530;
	                this.screenDescriptionJustifiedClause();
	                break;

	            case 21:
	                this.state = 2531;
	                this.screenDescriptionSignClause();
	                break;

	            case 22:
	                this.state = 2532;
	                this.screenDescriptionAutoClause();
	                break;

	            case 23:
	                this.state = 2533;
	                this.screenDescriptionSecureClause();
	                break;

	            case 24:
	                this.state = 2534;
	                this.screenDescriptionRequiredClause();
	                break;

	            case 25:
	                this.state = 2535;
	                this.screenDescriptionPromptClause();
	                break;

	            case 26:
	                this.state = 2536;
	                this.screenDescriptionFullClause();
	                break;

	            case 27:
	                this.state = 2537;
	                this.screenDescriptionZeroFillClause();
	                break;

	            }
	            this.state = 2542;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2543;
	        this.match(Cobol85Parser.DOT_FS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionBlankClause() {
	    let localctx = new ScreenDescriptionBlankClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, Cobol85Parser.RULE_screenDescriptionBlankClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2545;
	        this.match(Cobol85Parser.BLANK);
	        this.state = 2546;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.LINE || _la===Cobol85Parser.SCREEN)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionBellClause() {
	    let localctx = new ScreenDescriptionBellClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, Cobol85Parser.RULE_screenDescriptionBellClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2548;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.BEEP || _la===Cobol85Parser.BELL)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionBlinkClause() {
	    let localctx = new ScreenDescriptionBlinkClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, Cobol85Parser.RULE_screenDescriptionBlinkClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2550;
	        this.match(Cobol85Parser.BLINK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionEraseClause() {
	    let localctx = new ScreenDescriptionEraseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, Cobol85Parser.RULE_screenDescriptionEraseClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2552;
	        this.match(Cobol85Parser.ERASE);
	        this.state = 2553;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.EOL || _la===Cobol85Parser.EOS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionLightClause() {
	    let localctx = new ScreenDescriptionLightClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, Cobol85Parser.RULE_screenDescriptionLightClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2555;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.HIGHLIGHT || _la===Cobol85Parser.LOWLIGHT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionGridClause() {
	    let localctx = new ScreenDescriptionGridClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, Cobol85Parser.RULE_screenDescriptionGridClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2557;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.GRID || _la===Cobol85Parser.LEFTLINE || _la===Cobol85Parser.OVERLINE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionReverseVideoClause() {
	    let localctx = new ScreenDescriptionReverseVideoClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, Cobol85Parser.RULE_screenDescriptionReverseVideoClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2559;
	        this.match(Cobol85Parser.REVERSE_VIDEO);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionUnderlineClause() {
	    let localctx = new ScreenDescriptionUnderlineClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, Cobol85Parser.RULE_screenDescriptionUnderlineClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2561;
	        this.match(Cobol85Parser.UNDERLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionSizeClause() {
	    let localctx = new ScreenDescriptionSizeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, Cobol85Parser.RULE_screenDescriptionSizeClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2563;
	        this.match(Cobol85Parser.SIZE);
	        this.state = 2565;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2564;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2569;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,271,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2567;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 2568;
	            this.integerLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionLineClause() {
	    let localctx = new ScreenDescriptionLineClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, Cobol85Parser.RULE_screenDescriptionLineClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2571;
	        this.match(Cobol85Parser.LINE);
	        this.state = 2579;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS || _la===Cobol85Parser.NUMBER || _la===Cobol85Parser.PLUS || _la===Cobol85Parser.MINUSCHAR || _la===Cobol85Parser.PLUSCHAR) {
	            this.state = 2573;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.NUMBER) {
	                this.state = 2572;
	                this.match(Cobol85Parser.NUMBER);
	            }

	            this.state = 2576;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.IS) {
	                this.state = 2575;
	                this.match(Cobol85Parser.IS);
	            }

	            this.state = 2578;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.PLUS || _la===Cobol85Parser.MINUSCHAR || _la===Cobol85Parser.PLUSCHAR)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2583;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,275,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2581;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 2582;
	            this.integerLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionColumnClause() {
	    let localctx = new ScreenDescriptionColumnClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, Cobol85Parser.RULE_screenDescriptionColumnClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2585;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.COL || _la===Cobol85Parser.COLUMN)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2593;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS || _la===Cobol85Parser.NUMBER || _la===Cobol85Parser.PLUS || _la===Cobol85Parser.MINUSCHAR || _la===Cobol85Parser.PLUSCHAR) {
	            this.state = 2587;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.NUMBER) {
	                this.state = 2586;
	                this.match(Cobol85Parser.NUMBER);
	            }

	            this.state = 2590;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.IS) {
	                this.state = 2589;
	                this.match(Cobol85Parser.IS);
	            }

	            this.state = 2592;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.PLUS || _la===Cobol85Parser.MINUSCHAR || _la===Cobol85Parser.PLUSCHAR)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2597;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,279,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2595;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 2596;
	            this.integerLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionForegroundColorClause() {
	    let localctx = new ScreenDescriptionForegroundColorClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, Cobol85Parser.RULE_screenDescriptionForegroundColorClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2599;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.FOREGROUND_COLOR || _la===Cobol85Parser.FOREGROUND_COLOUR)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2601;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2600;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2605;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,281,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2603;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 2604;
	            this.integerLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionBackgroundColorClause() {
	    let localctx = new ScreenDescriptionBackgroundColorClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, Cobol85Parser.RULE_screenDescriptionBackgroundColorClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2607;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.BACKGROUND_COLOR || _la===Cobol85Parser.BACKGROUND_COLOUR)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2609;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2608;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2613;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,283,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2611;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 2612;
	            this.integerLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionControlClause() {
	    let localctx = new ScreenDescriptionControlClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, Cobol85Parser.RULE_screenDescriptionControlClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2615;
	        this.match(Cobol85Parser.CONTROL);
	        this.state = 2617;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2616;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2619;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionValueClause() {
	    let localctx = new ScreenDescriptionValueClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, Cobol85Parser.RULE_screenDescriptionValueClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2621;
	        this.match(Cobol85Parser.VALUE);
	        this.state = 2623;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2622;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2625;
	        this.literal();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionPictureClause() {
	    let localctx = new ScreenDescriptionPictureClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, Cobol85Parser.RULE_screenDescriptionPictureClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2627;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.PIC || _la===Cobol85Parser.PICTURE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2629;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2628;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2631;
	        this.pictureString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionFromClause() {
	    let localctx = new ScreenDescriptionFromClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, Cobol85Parser.RULE_screenDescriptionFromClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2633;
	        this.match(Cobol85Parser.FROM);
	        this.state = 2636;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,287,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2634;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 2635;
	            this.literal();
	            break;

	        }
	        this.state = 2639;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.TO) {
	            this.state = 2638;
	            this.screenDescriptionToClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionToClause() {
	    let localctx = new ScreenDescriptionToClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, Cobol85Parser.RULE_screenDescriptionToClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2641;
	        this.match(Cobol85Parser.TO);
	        this.state = 2642;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionUsingClause() {
	    let localctx = new ScreenDescriptionUsingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, Cobol85Parser.RULE_screenDescriptionUsingClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2644;
	        this.match(Cobol85Parser.USING);
	        this.state = 2645;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionUsageClause() {
	    let localctx = new ScreenDescriptionUsageClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, Cobol85Parser.RULE_screenDescriptionUsageClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2647;
	        this.match(Cobol85Parser.USAGE);
	        this.state = 2649;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2648;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2651;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.DISPLAY || _la===Cobol85Parser.DISPLAY_1)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionBlankWhenZeroClause() {
	    let localctx = new ScreenDescriptionBlankWhenZeroClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, Cobol85Parser.RULE_screenDescriptionBlankWhenZeroClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2653;
	        this.match(Cobol85Parser.BLANK);
	        this.state = 2655;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.WHEN) {
	            this.state = 2654;
	            this.match(Cobol85Parser.WHEN);
	        }

	        this.state = 2657;
	        this.match(Cobol85Parser.ZERO);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionJustifiedClause() {
	    let localctx = new ScreenDescriptionJustifiedClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, Cobol85Parser.RULE_screenDescriptionJustifiedClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2659;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.JUST || _la===Cobol85Parser.JUSTIFIED)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2661;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.RIGHT) {
	            this.state = 2660;
	            this.match(Cobol85Parser.RIGHT);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionSignClause() {
	    let localctx = new ScreenDescriptionSignClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, Cobol85Parser.RULE_screenDescriptionSignClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2667;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.SIGN) {
	            this.state = 2663;
	            this.match(Cobol85Parser.SIGN);
	            this.state = 2665;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.IS) {
	                this.state = 2664;
	                this.match(Cobol85Parser.IS);
	            }

	        }

	        this.state = 2669;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.LEADING || _la===Cobol85Parser.TRAILING)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2674;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.SEPARATE) {
	            this.state = 2670;
	            this.match(Cobol85Parser.SEPARATE);
	            this.state = 2672;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.CHARACTER) {
	                this.state = 2671;
	                this.match(Cobol85Parser.CHARACTER);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionAutoClause() {
	    let localctx = new ScreenDescriptionAutoClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, Cobol85Parser.RULE_screenDescriptionAutoClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2676;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.AUTO || _la===Cobol85Parser.AUTO_SKIP)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionSecureClause() {
	    let localctx = new ScreenDescriptionSecureClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, Cobol85Parser.RULE_screenDescriptionSecureClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2678;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.NO_ECHO || _la===Cobol85Parser.SECURE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionRequiredClause() {
	    let localctx = new ScreenDescriptionRequiredClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, Cobol85Parser.RULE_screenDescriptionRequiredClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2680;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.EMPTY_CHECK || _la===Cobol85Parser.REQUIRED)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionPromptClause() {
	    let localctx = new ScreenDescriptionPromptClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, Cobol85Parser.RULE_screenDescriptionPromptClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2682;
	        this.match(Cobol85Parser.PROMPT);
	        this.state = 2684;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.CHARACTER) {
	            this.state = 2683;
	            this.match(Cobol85Parser.CHARACTER);
	        }

	        this.state = 2687;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2686;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2691;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,298,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2689;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 2690;
	            this.literal();
	            break;

	        }
	        this.state = 2694;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.OCCURS) {
	            this.state = 2693;
	            this.screenDescriptionPromptOccursClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionPromptOccursClause() {
	    let localctx = new ScreenDescriptionPromptOccursClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, Cobol85Parser.RULE_screenDescriptionPromptOccursClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2696;
	        this.match(Cobol85Parser.OCCURS);
	        this.state = 2697;
	        this.integerLiteral();
	        this.state = 2699;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.TIMES) {
	            this.state = 2698;
	            this.match(Cobol85Parser.TIMES);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionFullClause() {
	    let localctx = new ScreenDescriptionFullClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, Cobol85Parser.RULE_screenDescriptionFullClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2701;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.FULL || _la===Cobol85Parser.LENGTH_CHECK)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenDescriptionZeroFillClause() {
	    let localctx = new ScreenDescriptionZeroFillClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, Cobol85Parser.RULE_screenDescriptionZeroFillClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2703;
	        this.match(Cobol85Parser.ZERO_FILL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportSection() {
	    let localctx = new ReportSectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, Cobol85Parser.RULE_reportSection);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2705;
	        this.match(Cobol85Parser.REPORT);
	        this.state = 2706;
	        this.match(Cobol85Parser.SECTION);
	        this.state = 2707;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 2711;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.RD) {
	            this.state = 2708;
	            this.reportDescription();
	            this.state = 2713;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportDescription() {
	    let localctx = new ReportDescriptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, Cobol85Parser.RULE_reportDescription);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2714;
	        this.reportDescriptionEntry();
	        this.state = 2716; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2715;
	            this.reportGroupDescriptionEntry();
	            this.state = 2718; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportDescriptionEntry() {
	    let localctx = new ReportDescriptionEntryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, Cobol85Parser.RULE_reportDescriptionEntry);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2720;
	        this.match(Cobol85Parser.RD);
	        this.state = 2721;
	        this.reportName();
	        this.state = 2723;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.GLOBAL || _la===Cobol85Parser.IS) {
	            this.state = 2722;
	            this.reportDescriptionGlobalClause();
	        }

	        this.state = 2738;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.PAGE) {
	            this.state = 2725;
	            this.reportDescriptionPageLimitClause();
	            this.state = 2727;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.HEADING) {
	                this.state = 2726;
	                this.reportDescriptionHeadingClause();
	            }

	            this.state = 2730;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.FIRST) {
	                this.state = 2729;
	                this.reportDescriptionFirstDetailClause();
	            }

	            this.state = 2733;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.LAST) {
	                this.state = 2732;
	                this.reportDescriptionLastDetailClause();
	            }

	            this.state = 2736;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.FOOTING) {
	                this.state = 2735;
	                this.reportDescriptionFootingClause();
	            }

	        }

	        this.state = 2740;
	        this.match(Cobol85Parser.DOT_FS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportDescriptionGlobalClause() {
	    let localctx = new ReportDescriptionGlobalClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, Cobol85Parser.RULE_reportDescriptionGlobalClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2743;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2742;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2745;
	        this.match(Cobol85Parser.GLOBAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportDescriptionPageLimitClause() {
	    let localctx = new ReportDescriptionPageLimitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, Cobol85Parser.RULE_reportDescriptionPageLimitClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2747;
	        this.match(Cobol85Parser.PAGE);
	        this.state = 2756;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case Cobol85Parser.LIMIT:
	        	this.state = 2748;
	        	this.match(Cobol85Parser.LIMIT);
	        	this.state = 2750;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===Cobol85Parser.IS) {
	        	    this.state = 2749;
	        	    this.match(Cobol85Parser.IS);
	        	}

	        	break;
	        case Cobol85Parser.LIMITS:
	        	this.state = 2752;
	        	this.match(Cobol85Parser.LIMITS);
	        	this.state = 2754;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===Cobol85Parser.ARE) {
	        	    this.state = 2753;
	        	    this.match(Cobol85Parser.ARE);
	        	}

	        	break;
	        case Cobol85Parser.LEVEL_NUMBER_66:
	        case Cobol85Parser.LEVEL_NUMBER_77:
	        case Cobol85Parser.LEVEL_NUMBER_88:
	        case Cobol85Parser.INTEGERLITERAL:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 2758;
	        this.integerLiteral();
	        this.state = 2760;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.LINE || _la===Cobol85Parser.LINES) {
	            this.state = 2759;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.LINE || _la===Cobol85Parser.LINES)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportDescriptionHeadingClause() {
	    let localctx = new ReportDescriptionHeadingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, Cobol85Parser.RULE_reportDescriptionHeadingClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2762;
	        this.match(Cobol85Parser.HEADING);
	        this.state = 2763;
	        this.integerLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportDescriptionFirstDetailClause() {
	    let localctx = new ReportDescriptionFirstDetailClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, Cobol85Parser.RULE_reportDescriptionFirstDetailClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2765;
	        this.match(Cobol85Parser.FIRST);
	        this.state = 2766;
	        this.match(Cobol85Parser.DETAIL);
	        this.state = 2767;
	        this.integerLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportDescriptionLastDetailClause() {
	    let localctx = new ReportDescriptionLastDetailClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, Cobol85Parser.RULE_reportDescriptionLastDetailClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2769;
	        this.match(Cobol85Parser.LAST);
	        this.state = 2770;
	        this.match(Cobol85Parser.DETAIL);
	        this.state = 2771;
	        this.integerLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportDescriptionFootingClause() {
	    let localctx = new ReportDescriptionFootingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, Cobol85Parser.RULE_reportDescriptionFootingClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2773;
	        this.match(Cobol85Parser.FOOTING);
	        this.state = 2774;
	        this.integerLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupDescriptionEntry() {
	    let localctx = new ReportGroupDescriptionEntryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, Cobol85Parser.RULE_reportGroupDescriptionEntry);
	    try {
	        this.state = 2779;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,314,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2776;
	            this.reportGroupDescriptionEntryFormat1();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2777;
	            this.reportGroupDescriptionEntryFormat2();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2778;
	            this.reportGroupDescriptionEntryFormat3();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupDescriptionEntryFormat1() {
	    let localctx = new ReportGroupDescriptionEntryFormat1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, Cobol85Parser.RULE_reportGroupDescriptionEntryFormat1);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2781;
	        this.integerLiteral();
	        this.state = 2782;
	        this.dataName();
	        this.state = 2784;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS || _la===Cobol85Parser.LINE || _la===Cobol85Parser.NUMBER || _la===Cobol85Parser.PLUS || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0)) {
	            this.state = 2783;
	            this.reportGroupLineNumberClause();
	        }

	        this.state = 2787;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.NEXT) {
	            this.state = 2786;
	            this.reportGroupNextGroupClause();
	        }

	        this.state = 2789;
	        this.reportGroupTypeClause();
	        this.state = 2791;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.DISPLAY || _la===Cobol85Parser.DISPLAY_1 || _la===Cobol85Parser.USAGE) {
	            this.state = 2790;
	            this.reportGroupUsageClause();
	        }

	        this.state = 2793;
	        this.match(Cobol85Parser.DOT_FS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupDescriptionEntryFormat2() {
	    let localctx = new ReportGroupDescriptionEntryFormat2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, Cobol85Parser.RULE_reportGroupDescriptionEntryFormat2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2795;
	        this.integerLiteral();
	        this.state = 2797;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la===Cobol85Parser.IDENTIFIER) {
	            this.state = 2796;
	            this.dataName();
	        }

	        this.state = 2800;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS || _la===Cobol85Parser.LINE || _la===Cobol85Parser.NUMBER || _la===Cobol85Parser.PLUS || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0)) {
	            this.state = 2799;
	            this.reportGroupLineNumberClause();
	        }

	        this.state = 2802;
	        this.reportGroupUsageClause();
	        this.state = 2803;
	        this.match(Cobol85Parser.DOT_FS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupDescriptionEntryFormat3() {
	    let localctx = new ReportGroupDescriptionEntryFormat3Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, Cobol85Parser.RULE_reportGroupDescriptionEntryFormat3);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2805;
	        this.integerLiteral();
	        this.state = 2807;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la===Cobol85Parser.IDENTIFIER) {
	            this.state = 2806;
	            this.dataName();
	        }

	        this.state = 2825;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.BLANK || _la===Cobol85Parser.COLUMN || _la===Cobol85Parser.DISPLAY || _la===Cobol85Parser.DISPLAY_1 || ((((_la - 227)) & ~0x1f) == 0 && ((1 << (_la - 227)) & ((1 << (Cobol85Parser.GROUP - 227)) | (1 << (Cobol85Parser.IS - 227)) | (1 << (Cobol85Parser.JUST - 227)) | (1 << (Cobol85Parser.JUSTIFIED - 227)))) !== 0) || _la===Cobol85Parser.LINE || _la===Cobol85Parser.NUMBER || _la===Cobol85Parser.PIC || _la===Cobol85Parser.PICTURE || _la===Cobol85Parser.PLUS || _la===Cobol85Parser.RESET || ((((_la - 438)) & ~0x1f) == 0 && ((1 << (_la - 438)) & ((1 << (Cobol85Parser.SIGN - 438)) | (1 << (Cobol85Parser.SOURCE - 438)) | (1 << (Cobol85Parser.SUM - 438)))) !== 0) || _la===Cobol85Parser.USAGE || _la===Cobol85Parser.VALUE || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0)) {
	            this.state = 2823;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case Cobol85Parser.PIC:
	            case Cobol85Parser.PICTURE:
	                this.state = 2809;
	                this.reportGroupPictureClause();
	                break;
	            case Cobol85Parser.DISPLAY:
	            case Cobol85Parser.DISPLAY_1:
	            case Cobol85Parser.USAGE:
	                this.state = 2810;
	                this.reportGroupUsageClause();
	                break;
	            case Cobol85Parser.SIGN:
	                this.state = 2811;
	                this.reportGroupSignClause();
	                break;
	            case Cobol85Parser.JUST:
	            case Cobol85Parser.JUSTIFIED:
	                this.state = 2812;
	                this.reportGroupJustifiedClause();
	                break;
	            case Cobol85Parser.BLANK:
	                this.state = 2813;
	                this.reportGroupBlankWhenZeroClause();
	                break;
	            case Cobol85Parser.IS:
	            case Cobol85Parser.LINE:
	            case Cobol85Parser.NUMBER:
	            case Cobol85Parser.PLUS:
	            case Cobol85Parser.LEVEL_NUMBER_66:
	            case Cobol85Parser.LEVEL_NUMBER_77:
	            case Cobol85Parser.LEVEL_NUMBER_88:
	            case Cobol85Parser.INTEGERLITERAL:
	                this.state = 2814;
	                this.reportGroupLineNumberClause();
	                break;
	            case Cobol85Parser.COLUMN:
	                this.state = 2815;
	                this.reportGroupColumnNumberClause();
	                break;
	            case Cobol85Parser.RESET:
	            case Cobol85Parser.SOURCE:
	            case Cobol85Parser.SUM:
	            case Cobol85Parser.VALUE:
	                this.state = 2820;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case Cobol85Parser.SOURCE:
	                    this.state = 2816;
	                    this.reportGroupSourceClause();
	                    break;
	                case Cobol85Parser.VALUE:
	                    this.state = 2817;
	                    this.reportGroupValueClause();
	                    break;
	                case Cobol85Parser.SUM:
	                    this.state = 2818;
	                    this.reportGroupSumClause();
	                    break;
	                case Cobol85Parser.RESET:
	                    this.state = 2819;
	                    this.reportGroupResetClause();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            case Cobol85Parser.GROUP:
	                this.state = 2822;
	                this.reportGroupIndicateClause();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2827;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2828;
	        this.match(Cobol85Parser.DOT_FS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupBlankWhenZeroClause() {
	    let localctx = new ReportGroupBlankWhenZeroClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, Cobol85Parser.RULE_reportGroupBlankWhenZeroClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2830;
	        this.match(Cobol85Parser.BLANK);
	        this.state = 2832;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.WHEN) {
	            this.state = 2831;
	            this.match(Cobol85Parser.WHEN);
	        }

	        this.state = 2834;
	        this.match(Cobol85Parser.ZERO);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupColumnNumberClause() {
	    let localctx = new ReportGroupColumnNumberClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, Cobol85Parser.RULE_reportGroupColumnNumberClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2836;
	        this.match(Cobol85Parser.COLUMN);
	        this.state = 2838;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.NUMBER) {
	            this.state = 2837;
	            this.match(Cobol85Parser.NUMBER);
	        }

	        this.state = 2841;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2840;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2843;
	        this.integerLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupIndicateClause() {
	    let localctx = new ReportGroupIndicateClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, Cobol85Parser.RULE_reportGroupIndicateClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2845;
	        this.match(Cobol85Parser.GROUP);
	        this.state = 2847;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.INDICATE) {
	            this.state = 2846;
	            this.match(Cobol85Parser.INDICATE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupJustifiedClause() {
	    let localctx = new ReportGroupJustifiedClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, Cobol85Parser.RULE_reportGroupJustifiedClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2849;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.JUST || _la===Cobol85Parser.JUSTIFIED)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2851;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.RIGHT) {
	            this.state = 2850;
	            this.match(Cobol85Parser.RIGHT);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupLineNumberClause() {
	    let localctx = new ReportGroupLineNumberClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, Cobol85Parser.RULE_reportGroupLineNumberClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2854;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.LINE) {
	            this.state = 2853;
	            this.match(Cobol85Parser.LINE);
	        }

	        this.state = 2857;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.NUMBER) {
	            this.state = 2856;
	            this.match(Cobol85Parser.NUMBER);
	        }

	        this.state = 2860;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2859;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2864;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.LEVEL_NUMBER_66:
	        case Cobol85Parser.LEVEL_NUMBER_77:
	        case Cobol85Parser.LEVEL_NUMBER_88:
	        case Cobol85Parser.INTEGERLITERAL:
	            this.state = 2862;
	            this.reportGroupLineNumberNextPage();
	            break;
	        case Cobol85Parser.PLUS:
	            this.state = 2863;
	            this.reportGroupLineNumberPlus();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupLineNumberNextPage() {
	    let localctx = new ReportGroupLineNumberNextPageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, Cobol85Parser.RULE_reportGroupLineNumberNextPage);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2866;
	        this.integerLiteral();
	        this.state = 2872;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,334,this._ctx);
	        if(la_===1) {
	            this.state = 2868;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.ON) {
	                this.state = 2867;
	                this.match(Cobol85Parser.ON);
	            }

	            this.state = 2870;
	            this.match(Cobol85Parser.NEXT);
	            this.state = 2871;
	            this.match(Cobol85Parser.PAGE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupLineNumberPlus() {
	    let localctx = new ReportGroupLineNumberPlusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, Cobol85Parser.RULE_reportGroupLineNumberPlus);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2874;
	        this.match(Cobol85Parser.PLUS);
	        this.state = 2875;
	        this.integerLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupNextGroupClause() {
	    let localctx = new ReportGroupNextGroupClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, Cobol85Parser.RULE_reportGroupNextGroupClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2877;
	        this.match(Cobol85Parser.NEXT);
	        this.state = 2878;
	        this.match(Cobol85Parser.GROUP);
	        this.state = 2880;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2879;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2885;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.LEVEL_NUMBER_66:
	        case Cobol85Parser.LEVEL_NUMBER_77:
	        case Cobol85Parser.LEVEL_NUMBER_88:
	        case Cobol85Parser.INTEGERLITERAL:
	            this.state = 2882;
	            this.integerLiteral();
	            break;
	        case Cobol85Parser.NEXT:
	            this.state = 2883;
	            this.reportGroupNextGroupNextPage();
	            break;
	        case Cobol85Parser.PLUS:
	            this.state = 2884;
	            this.reportGroupNextGroupPlus();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupNextGroupPlus() {
	    let localctx = new ReportGroupNextGroupPlusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, Cobol85Parser.RULE_reportGroupNextGroupPlus);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2887;
	        this.match(Cobol85Parser.PLUS);
	        this.state = 2888;
	        this.integerLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupNextGroupNextPage() {
	    let localctx = new ReportGroupNextGroupNextPageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, Cobol85Parser.RULE_reportGroupNextGroupNextPage);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2890;
	        this.match(Cobol85Parser.NEXT);
	        this.state = 2891;
	        this.match(Cobol85Parser.PAGE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupPictureClause() {
	    let localctx = new ReportGroupPictureClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, Cobol85Parser.RULE_reportGroupPictureClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2893;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.PIC || _la===Cobol85Parser.PICTURE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2895;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2894;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2897;
	        this.pictureString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupResetClause() {
	    let localctx = new ReportGroupResetClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, Cobol85Parser.RULE_reportGroupResetClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2899;
	        this.match(Cobol85Parser.RESET);
	        this.state = 2901;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ON) {
	            this.state = 2900;
	            this.match(Cobol85Parser.ON);
	        }

	        this.state = 2905;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.FINAL:
	            this.state = 2903;
	            this.match(Cobol85Parser.FINAL);
	            break;
	        case Cobol85Parser.ABORT:
	        case Cobol85Parser.AS:
	        case Cobol85Parser.ASCII:
	        case Cobol85Parser.ASSOCIATED_DATA:
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	        case Cobol85Parser.ATTRIBUTE:
	        case Cobol85Parser.AUTO:
	        case Cobol85Parser.AUTO_SKIP:
	        case Cobol85Parser.BACKGROUND_COLOR:
	        case Cobol85Parser.BACKGROUND_COLOUR:
	        case Cobol85Parser.BEEP:
	        case Cobol85Parser.BELL:
	        case Cobol85Parser.BINARY:
	        case Cobol85Parser.BIT:
	        case Cobol85Parser.BLINK:
	        case Cobol85Parser.BOUNDS:
	        case Cobol85Parser.CAPABLE:
	        case Cobol85Parser.CCSVERSION:
	        case Cobol85Parser.CHANGED:
	        case Cobol85Parser.CHANNEL:
	        case Cobol85Parser.CLOSE_DISPOSITION:
	        case Cobol85Parser.COBOL:
	        case Cobol85Parser.COMMITMENT:
	        case Cobol85Parser.CONTROL_POINT:
	        case Cobol85Parser.CONVENTION:
	        case Cobol85Parser.CRUNCH:
	        case Cobol85Parser.CURSOR:
	        case Cobol85Parser.DEFAULT:
	        case Cobol85Parser.DEFAULT_DISPLAY:
	        case Cobol85Parser.DEFINITION:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.DISK:
	        case Cobol85Parser.DONTCARE:
	        case Cobol85Parser.DOUBLE:
	        case Cobol85Parser.EBCDIC:
	        case Cobol85Parser.EMPTY_CHECK:
	        case Cobol85Parser.ENTER:
	        case Cobol85Parser.ENTRY_PROCEDURE:
	        case Cobol85Parser.ERASE:
	        case Cobol85Parser.EOL:
	        case Cobol85Parser.EOS:
	        case Cobol85Parser.ESCAPE:
	        case Cobol85Parser.EVENT:
	        case Cobol85Parser.EXCLUSIVE:
	        case Cobol85Parser.EXPORT:
	        case Cobol85Parser.EXTENDED:
	        case Cobol85Parser.FOREGROUND_COLOR:
	        case Cobol85Parser.FOREGROUND_COLOUR:
	        case Cobol85Parser.FULL:
	        case Cobol85Parser.FUNCTIONNAME:
	        case Cobol85Parser.FUNCTION_POINTER:
	        case Cobol85Parser.GRID:
	        case Cobol85Parser.HIGHLIGHT:
	        case Cobol85Parser.IMPLICIT:
	        case Cobol85Parser.IMPORT:
	        case Cobol85Parser.INTEGER:
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.KEYBOARD:
	        case Cobol85Parser.LANGUAGE:
	        case Cobol85Parser.LB:
	        case Cobol85Parser.LD:
	        case Cobol85Parser.LEFTLINE:
	        case Cobol85Parser.LENGTH_CHECK:
	        case Cobol85Parser.LIBACCESS:
	        case Cobol85Parser.LIBPARAMETER:
	        case Cobol85Parser.LIBRARY:
	        case Cobol85Parser.LIST:
	        case Cobol85Parser.LOCAL:
	        case Cobol85Parser.LONG_DATE:
	        case Cobol85Parser.LONG_TIME:
	        case Cobol85Parser.LOWER:
	        case Cobol85Parser.LOWLIGHT:
	        case Cobol85Parser.MMDDYYYY:
	        case Cobol85Parser.NAMED:
	        case Cobol85Parser.NATIONAL:
	        case Cobol85Parser.NATIONAL_EDITED:
	        case Cobol85Parser.NETWORK:
	        case Cobol85Parser.NO_ECHO:
	        case Cobol85Parser.NUMERIC_DATE:
	        case Cobol85Parser.NUMERIC_TIME:
	        case Cobol85Parser.ODT:
	        case Cobol85Parser.ORDERLY:
	        case Cobol85Parser.OVERLINE:
	        case Cobol85Parser.OWN:
	        case Cobol85Parser.PASSWORD:
	        case Cobol85Parser.PORT:
	        case Cobol85Parser.PRINTER:
	        case Cobol85Parser.PRIVATE:
	        case Cobol85Parser.PROCESS:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.PROMPT:
	        case Cobol85Parser.READER:
	        case Cobol85Parser.REMOTE:
	        case Cobol85Parser.REAL:
	        case Cobol85Parser.RECEIVED:
	        case Cobol85Parser.RECURSIVE:
	        case Cobol85Parser.REF:
	        case Cobol85Parser.REMOVE:
	        case Cobol85Parser.REQUIRED:
	        case Cobol85Parser.REVERSE_VIDEO:
	        case Cobol85Parser.SAVE:
	        case Cobol85Parser.SECURE:
	        case Cobol85Parser.SHARED:
	        case Cobol85Parser.SHAREDBYALL:
	        case Cobol85Parser.SHAREDBYRUNUNIT:
	        case Cobol85Parser.SHARING:
	        case Cobol85Parser.SHORT_DATE:
	        case Cobol85Parser.SYMBOL:
	        case Cobol85Parser.TASK:
	        case Cobol85Parser.THREAD:
	        case Cobol85Parser.THREAD_LOCAL:
	        case Cobol85Parser.TIMER:
	        case Cobol85Parser.TODAYS_DATE:
	        case Cobol85Parser.TODAYS_NAME:
	        case Cobol85Parser.TRUNCATED:
	        case Cobol85Parser.TYPEDEF:
	        case Cobol85Parser.UNDERLINE:
	        case Cobol85Parser.VIRTUAL:
	        case Cobol85Parser.WAIT:
	        case Cobol85Parser.YEAR:
	        case Cobol85Parser.YYYYMMDD:
	        case Cobol85Parser.YYYYDDD:
	        case Cobol85Parser.ZERO_FILL:
	        case Cobol85Parser.IDENTIFIER:
	            this.state = 2904;
	            this.dataName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupSignClause() {
	    let localctx = new ReportGroupSignClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, Cobol85Parser.RULE_reportGroupSignClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2907;
	        this.match(Cobol85Parser.SIGN);
	        this.state = 2909;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2908;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2911;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.LEADING || _la===Cobol85Parser.TRAILING)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2912;
	        this.match(Cobol85Parser.SEPARATE);
	        this.state = 2914;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.CHARACTER) {
	            this.state = 2913;
	            this.match(Cobol85Parser.CHARACTER);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupSourceClause() {
	    let localctx = new ReportGroupSourceClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, Cobol85Parser.RULE_reportGroupSourceClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2916;
	        this.match(Cobol85Parser.SOURCE);
	        this.state = 2918;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2917;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2920;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupSumClause() {
	    let localctx = new ReportGroupSumClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, Cobol85Parser.RULE_reportGroupSumClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2922;
	        this.match(Cobol85Parser.SUM);
	        this.state = 2923;
	        this.identifier();
	        this.state = 2930;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,344,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2925;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Cobol85Parser.COMMACHAR) {
	                    this.state = 2924;
	                    this.match(Cobol85Parser.COMMACHAR);
	                }

	                this.state = 2927;
	                this.identifier(); 
	            }
	            this.state = 2932;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,344,this._ctx);
	        }

	        this.state = 2944;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.UPON) {
	            this.state = 2933;
	            this.match(Cobol85Parser.UPON);
	            this.state = 2934;
	            this.dataName();
	            this.state = 2941;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.COMMACHAR - 498)))) !== 0) || _la===Cobol85Parser.IDENTIFIER) {
	                this.state = 2936;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Cobol85Parser.COMMACHAR) {
	                    this.state = 2935;
	                    this.match(Cobol85Parser.COMMACHAR);
	                }

	                this.state = 2938;
	                this.dataName();
	                this.state = 2943;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupTypeClause() {
	    let localctx = new ReportGroupTypeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, Cobol85Parser.RULE_reportGroupTypeClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2946;
	        this.match(Cobol85Parser.TYPE);
	        this.state = 2948;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 2947;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 2957;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,349,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2950;
	            this.reportGroupTypeReportHeading();
	            break;

	        case 2:
	            this.state = 2951;
	            this.reportGroupTypePageHeading();
	            break;

	        case 3:
	            this.state = 2952;
	            this.reportGroupTypeControlHeading();
	            break;

	        case 4:
	            this.state = 2953;
	            this.reportGroupTypeDetail();
	            break;

	        case 5:
	            this.state = 2954;
	            this.reportGroupTypeControlFooting();
	            break;

	        case 6:
	            this.state = 2955;
	            this.reportGroupTypePageFooting();
	            break;

	        case 7:
	            this.state = 2956;
	            this.reportGroupTypeReportFooting();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupTypeReportHeading() {
	    let localctx = new ReportGroupTypeReportHeadingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, Cobol85Parser.RULE_reportGroupTypeReportHeading);
	    try {
	        this.state = 2962;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.REPORT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2959;
	            this.match(Cobol85Parser.REPORT);
	            this.state = 2960;
	            this.match(Cobol85Parser.HEADING);
	            break;
	        case Cobol85Parser.RH:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2961;
	            this.match(Cobol85Parser.RH);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupTypePageHeading() {
	    let localctx = new ReportGroupTypePageHeadingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, Cobol85Parser.RULE_reportGroupTypePageHeading);
	    try {
	        this.state = 2967;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.PAGE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2964;
	            this.match(Cobol85Parser.PAGE);
	            this.state = 2965;
	            this.match(Cobol85Parser.HEADING);
	            break;
	        case Cobol85Parser.PH:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2966;
	            this.match(Cobol85Parser.PH);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupTypeControlHeading() {
	    let localctx = new ReportGroupTypeControlHeadingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, Cobol85Parser.RULE_reportGroupTypeControlHeading);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2972;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.CONTROL:
	            this.state = 2969;
	            this.match(Cobol85Parser.CONTROL);
	            this.state = 2970;
	            this.match(Cobol85Parser.HEADING);
	            break;
	        case Cobol85Parser.CH:
	            this.state = 2971;
	            this.match(Cobol85Parser.CH);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2976;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.FINAL:
	            this.state = 2974;
	            this.match(Cobol85Parser.FINAL);
	            break;
	        case Cobol85Parser.ABORT:
	        case Cobol85Parser.AS:
	        case Cobol85Parser.ASCII:
	        case Cobol85Parser.ASSOCIATED_DATA:
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	        case Cobol85Parser.ATTRIBUTE:
	        case Cobol85Parser.AUTO:
	        case Cobol85Parser.AUTO_SKIP:
	        case Cobol85Parser.BACKGROUND_COLOR:
	        case Cobol85Parser.BACKGROUND_COLOUR:
	        case Cobol85Parser.BEEP:
	        case Cobol85Parser.BELL:
	        case Cobol85Parser.BINARY:
	        case Cobol85Parser.BIT:
	        case Cobol85Parser.BLINK:
	        case Cobol85Parser.BOUNDS:
	        case Cobol85Parser.CAPABLE:
	        case Cobol85Parser.CCSVERSION:
	        case Cobol85Parser.CHANGED:
	        case Cobol85Parser.CHANNEL:
	        case Cobol85Parser.CLOSE_DISPOSITION:
	        case Cobol85Parser.COBOL:
	        case Cobol85Parser.COMMITMENT:
	        case Cobol85Parser.CONTROL_POINT:
	        case Cobol85Parser.CONVENTION:
	        case Cobol85Parser.CRUNCH:
	        case Cobol85Parser.CURSOR:
	        case Cobol85Parser.DEFAULT:
	        case Cobol85Parser.DEFAULT_DISPLAY:
	        case Cobol85Parser.DEFINITION:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.DISK:
	        case Cobol85Parser.DONTCARE:
	        case Cobol85Parser.DOUBLE:
	        case Cobol85Parser.EBCDIC:
	        case Cobol85Parser.EMPTY_CHECK:
	        case Cobol85Parser.ENTER:
	        case Cobol85Parser.ENTRY_PROCEDURE:
	        case Cobol85Parser.ERASE:
	        case Cobol85Parser.EOL:
	        case Cobol85Parser.EOS:
	        case Cobol85Parser.ESCAPE:
	        case Cobol85Parser.EVENT:
	        case Cobol85Parser.EXCLUSIVE:
	        case Cobol85Parser.EXPORT:
	        case Cobol85Parser.EXTENDED:
	        case Cobol85Parser.FOREGROUND_COLOR:
	        case Cobol85Parser.FOREGROUND_COLOUR:
	        case Cobol85Parser.FULL:
	        case Cobol85Parser.FUNCTIONNAME:
	        case Cobol85Parser.FUNCTION_POINTER:
	        case Cobol85Parser.GRID:
	        case Cobol85Parser.HIGHLIGHT:
	        case Cobol85Parser.IMPLICIT:
	        case Cobol85Parser.IMPORT:
	        case Cobol85Parser.INTEGER:
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.KEYBOARD:
	        case Cobol85Parser.LANGUAGE:
	        case Cobol85Parser.LB:
	        case Cobol85Parser.LD:
	        case Cobol85Parser.LEFTLINE:
	        case Cobol85Parser.LENGTH_CHECK:
	        case Cobol85Parser.LIBACCESS:
	        case Cobol85Parser.LIBPARAMETER:
	        case Cobol85Parser.LIBRARY:
	        case Cobol85Parser.LIST:
	        case Cobol85Parser.LOCAL:
	        case Cobol85Parser.LONG_DATE:
	        case Cobol85Parser.LONG_TIME:
	        case Cobol85Parser.LOWER:
	        case Cobol85Parser.LOWLIGHT:
	        case Cobol85Parser.MMDDYYYY:
	        case Cobol85Parser.NAMED:
	        case Cobol85Parser.NATIONAL:
	        case Cobol85Parser.NATIONAL_EDITED:
	        case Cobol85Parser.NETWORK:
	        case Cobol85Parser.NO_ECHO:
	        case Cobol85Parser.NUMERIC_DATE:
	        case Cobol85Parser.NUMERIC_TIME:
	        case Cobol85Parser.ODT:
	        case Cobol85Parser.ORDERLY:
	        case Cobol85Parser.OVERLINE:
	        case Cobol85Parser.OWN:
	        case Cobol85Parser.PASSWORD:
	        case Cobol85Parser.PORT:
	        case Cobol85Parser.PRINTER:
	        case Cobol85Parser.PRIVATE:
	        case Cobol85Parser.PROCESS:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.PROMPT:
	        case Cobol85Parser.READER:
	        case Cobol85Parser.REMOTE:
	        case Cobol85Parser.REAL:
	        case Cobol85Parser.RECEIVED:
	        case Cobol85Parser.RECURSIVE:
	        case Cobol85Parser.REF:
	        case Cobol85Parser.REMOVE:
	        case Cobol85Parser.REQUIRED:
	        case Cobol85Parser.REVERSE_VIDEO:
	        case Cobol85Parser.SAVE:
	        case Cobol85Parser.SECURE:
	        case Cobol85Parser.SHARED:
	        case Cobol85Parser.SHAREDBYALL:
	        case Cobol85Parser.SHAREDBYRUNUNIT:
	        case Cobol85Parser.SHARING:
	        case Cobol85Parser.SHORT_DATE:
	        case Cobol85Parser.SYMBOL:
	        case Cobol85Parser.TASK:
	        case Cobol85Parser.THREAD:
	        case Cobol85Parser.THREAD_LOCAL:
	        case Cobol85Parser.TIMER:
	        case Cobol85Parser.TODAYS_DATE:
	        case Cobol85Parser.TODAYS_NAME:
	        case Cobol85Parser.TRUNCATED:
	        case Cobol85Parser.TYPEDEF:
	        case Cobol85Parser.UNDERLINE:
	        case Cobol85Parser.VIRTUAL:
	        case Cobol85Parser.WAIT:
	        case Cobol85Parser.YEAR:
	        case Cobol85Parser.YYYYMMDD:
	        case Cobol85Parser.YYYYDDD:
	        case Cobol85Parser.ZERO_FILL:
	        case Cobol85Parser.IDENTIFIER:
	            this.state = 2975;
	            this.dataName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupTypeDetail() {
	    let localctx = new ReportGroupTypeDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, Cobol85Parser.RULE_reportGroupTypeDetail);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2978;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.DE || _la===Cobol85Parser.DETAIL)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupTypeControlFooting() {
	    let localctx = new ReportGroupTypeControlFootingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, Cobol85Parser.RULE_reportGroupTypeControlFooting);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2983;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.CONTROL:
	            this.state = 2980;
	            this.match(Cobol85Parser.CONTROL);
	            this.state = 2981;
	            this.match(Cobol85Parser.FOOTING);
	            break;
	        case Cobol85Parser.CF:
	            this.state = 2982;
	            this.match(Cobol85Parser.CF);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2987;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.FINAL:
	            this.state = 2985;
	            this.match(Cobol85Parser.FINAL);
	            break;
	        case Cobol85Parser.ABORT:
	        case Cobol85Parser.AS:
	        case Cobol85Parser.ASCII:
	        case Cobol85Parser.ASSOCIATED_DATA:
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	        case Cobol85Parser.ATTRIBUTE:
	        case Cobol85Parser.AUTO:
	        case Cobol85Parser.AUTO_SKIP:
	        case Cobol85Parser.BACKGROUND_COLOR:
	        case Cobol85Parser.BACKGROUND_COLOUR:
	        case Cobol85Parser.BEEP:
	        case Cobol85Parser.BELL:
	        case Cobol85Parser.BINARY:
	        case Cobol85Parser.BIT:
	        case Cobol85Parser.BLINK:
	        case Cobol85Parser.BOUNDS:
	        case Cobol85Parser.CAPABLE:
	        case Cobol85Parser.CCSVERSION:
	        case Cobol85Parser.CHANGED:
	        case Cobol85Parser.CHANNEL:
	        case Cobol85Parser.CLOSE_DISPOSITION:
	        case Cobol85Parser.COBOL:
	        case Cobol85Parser.COMMITMENT:
	        case Cobol85Parser.CONTROL_POINT:
	        case Cobol85Parser.CONVENTION:
	        case Cobol85Parser.CRUNCH:
	        case Cobol85Parser.CURSOR:
	        case Cobol85Parser.DEFAULT:
	        case Cobol85Parser.DEFAULT_DISPLAY:
	        case Cobol85Parser.DEFINITION:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.DISK:
	        case Cobol85Parser.DONTCARE:
	        case Cobol85Parser.DOUBLE:
	        case Cobol85Parser.EBCDIC:
	        case Cobol85Parser.EMPTY_CHECK:
	        case Cobol85Parser.ENTER:
	        case Cobol85Parser.ENTRY_PROCEDURE:
	        case Cobol85Parser.ERASE:
	        case Cobol85Parser.EOL:
	        case Cobol85Parser.EOS:
	        case Cobol85Parser.ESCAPE:
	        case Cobol85Parser.EVENT:
	        case Cobol85Parser.EXCLUSIVE:
	        case Cobol85Parser.EXPORT:
	        case Cobol85Parser.EXTENDED:
	        case Cobol85Parser.FOREGROUND_COLOR:
	        case Cobol85Parser.FOREGROUND_COLOUR:
	        case Cobol85Parser.FULL:
	        case Cobol85Parser.FUNCTIONNAME:
	        case Cobol85Parser.FUNCTION_POINTER:
	        case Cobol85Parser.GRID:
	        case Cobol85Parser.HIGHLIGHT:
	        case Cobol85Parser.IMPLICIT:
	        case Cobol85Parser.IMPORT:
	        case Cobol85Parser.INTEGER:
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.KEYBOARD:
	        case Cobol85Parser.LANGUAGE:
	        case Cobol85Parser.LB:
	        case Cobol85Parser.LD:
	        case Cobol85Parser.LEFTLINE:
	        case Cobol85Parser.LENGTH_CHECK:
	        case Cobol85Parser.LIBACCESS:
	        case Cobol85Parser.LIBPARAMETER:
	        case Cobol85Parser.LIBRARY:
	        case Cobol85Parser.LIST:
	        case Cobol85Parser.LOCAL:
	        case Cobol85Parser.LONG_DATE:
	        case Cobol85Parser.LONG_TIME:
	        case Cobol85Parser.LOWER:
	        case Cobol85Parser.LOWLIGHT:
	        case Cobol85Parser.MMDDYYYY:
	        case Cobol85Parser.NAMED:
	        case Cobol85Parser.NATIONAL:
	        case Cobol85Parser.NATIONAL_EDITED:
	        case Cobol85Parser.NETWORK:
	        case Cobol85Parser.NO_ECHO:
	        case Cobol85Parser.NUMERIC_DATE:
	        case Cobol85Parser.NUMERIC_TIME:
	        case Cobol85Parser.ODT:
	        case Cobol85Parser.ORDERLY:
	        case Cobol85Parser.OVERLINE:
	        case Cobol85Parser.OWN:
	        case Cobol85Parser.PASSWORD:
	        case Cobol85Parser.PORT:
	        case Cobol85Parser.PRINTER:
	        case Cobol85Parser.PRIVATE:
	        case Cobol85Parser.PROCESS:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.PROMPT:
	        case Cobol85Parser.READER:
	        case Cobol85Parser.REMOTE:
	        case Cobol85Parser.REAL:
	        case Cobol85Parser.RECEIVED:
	        case Cobol85Parser.RECURSIVE:
	        case Cobol85Parser.REF:
	        case Cobol85Parser.REMOVE:
	        case Cobol85Parser.REQUIRED:
	        case Cobol85Parser.REVERSE_VIDEO:
	        case Cobol85Parser.SAVE:
	        case Cobol85Parser.SECURE:
	        case Cobol85Parser.SHARED:
	        case Cobol85Parser.SHAREDBYALL:
	        case Cobol85Parser.SHAREDBYRUNUNIT:
	        case Cobol85Parser.SHARING:
	        case Cobol85Parser.SHORT_DATE:
	        case Cobol85Parser.SYMBOL:
	        case Cobol85Parser.TASK:
	        case Cobol85Parser.THREAD:
	        case Cobol85Parser.THREAD_LOCAL:
	        case Cobol85Parser.TIMER:
	        case Cobol85Parser.TODAYS_DATE:
	        case Cobol85Parser.TODAYS_NAME:
	        case Cobol85Parser.TRUNCATED:
	        case Cobol85Parser.TYPEDEF:
	        case Cobol85Parser.UNDERLINE:
	        case Cobol85Parser.VIRTUAL:
	        case Cobol85Parser.WAIT:
	        case Cobol85Parser.YEAR:
	        case Cobol85Parser.YYYYMMDD:
	        case Cobol85Parser.YYYYDDD:
	        case Cobol85Parser.ZERO_FILL:
	        case Cobol85Parser.IDENTIFIER:
	            this.state = 2986;
	            this.dataName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupUsageClause() {
	    let localctx = new ReportGroupUsageClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, Cobol85Parser.RULE_reportGroupUsageClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2993;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.USAGE) {
	            this.state = 2989;
	            this.match(Cobol85Parser.USAGE);
	            this.state = 2991;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.IS) {
	                this.state = 2990;
	                this.match(Cobol85Parser.IS);
	            }

	        }

	        this.state = 2995;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.DISPLAY || _la===Cobol85Parser.DISPLAY_1)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupTypePageFooting() {
	    let localctx = new ReportGroupTypePageFootingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, Cobol85Parser.RULE_reportGroupTypePageFooting);
	    try {
	        this.state = 3000;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.PAGE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2997;
	            this.match(Cobol85Parser.PAGE);
	            this.state = 2998;
	            this.match(Cobol85Parser.FOOTING);
	            break;
	        case Cobol85Parser.PF:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2999;
	            this.match(Cobol85Parser.PF);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupTypeReportFooting() {
	    let localctx = new ReportGroupTypeReportFootingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, Cobol85Parser.RULE_reportGroupTypeReportFooting);
	    try {
	        this.state = 3005;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.REPORT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3002;
	            this.match(Cobol85Parser.REPORT);
	            this.state = 3003;
	            this.match(Cobol85Parser.FOOTING);
	            break;
	        case Cobol85Parser.RF:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3004;
	            this.match(Cobol85Parser.RF);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportGroupValueClause() {
	    let localctx = new ReportGroupValueClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, Cobol85Parser.RULE_reportGroupValueClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3007;
	        this.match(Cobol85Parser.VALUE);
	        this.state = 3009;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 3008;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 3011;
	        this.literal();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	programLibrarySection() {
	    let localctx = new ProgramLibrarySectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, Cobol85Parser.RULE_programLibrarySection);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3013;
	        this.match(Cobol85Parser.PROGRAM_LIBRARY);
	        this.state = 3014;
	        this.match(Cobol85Parser.SECTION);
	        this.state = 3015;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 3019;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.LB || _la===Cobol85Parser.LD) {
	            this.state = 3016;
	            this.libraryDescriptionEntry();
	            this.state = 3021;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryDescriptionEntry() {
	    let localctx = new LibraryDescriptionEntryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, Cobol85Parser.RULE_libraryDescriptionEntry);
	    try {
	        this.state = 3024;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.LD:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3022;
	            this.libraryDescriptionEntryFormat1();
	            break;
	        case Cobol85Parser.LB:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3023;
	            this.libraryDescriptionEntryFormat2();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryDescriptionEntryFormat1() {
	    let localctx = new LibraryDescriptionEntryFormat1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, Cobol85Parser.RULE_libraryDescriptionEntryFormat1);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3026;
	        this.match(Cobol85Parser.LD);
	        this.state = 3027;
	        this.libraryName();
	        this.state = 3028;
	        this.match(Cobol85Parser.EXPORT);
	        this.state = 3030;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ATTRIBUTE) {
	            this.state = 3029;
	            this.libraryAttributeClauseFormat1();
	        }

	        this.state = 3033;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ENTRY_PROCEDURE) {
	            this.state = 3032;
	            this.libraryEntryProcedureClauseFormat1();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryDescriptionEntryFormat2() {
	    let localctx = new LibraryDescriptionEntryFormat2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, Cobol85Parser.RULE_libraryDescriptionEntryFormat2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3035;
	        this.match(Cobol85Parser.LB);
	        this.state = 3036;
	        this.libraryName();
	        this.state = 3037;
	        this.match(Cobol85Parser.IMPORT);
	        this.state = 3039;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,365,this._ctx);
	        if(la_===1) {
	            this.state = 3038;
	            this.libraryIsGlobalClause();

	        }
	        this.state = 3042;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.COMMON || _la===Cobol85Parser.IS) {
	            this.state = 3041;
	            this.libraryIsCommonClause();
	        }

	        this.state = 3048;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.ATTRIBUTE || _la===Cobol85Parser.ENTRY_PROCEDURE) {
	            this.state = 3046;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case Cobol85Parser.ATTRIBUTE:
	                this.state = 3044;
	                this.libraryAttributeClauseFormat2();
	                break;
	            case Cobol85Parser.ENTRY_PROCEDURE:
	                this.state = 3045;
	                this.libraryEntryProcedureClauseFormat2();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 3050;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryAttributeClauseFormat1() {
	    let localctx = new LibraryAttributeClauseFormat1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, Cobol85Parser.RULE_libraryAttributeClauseFormat1);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3051;
	        this.match(Cobol85Parser.ATTRIBUTE);
	        this.state = 3057;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.SHARING) {
	            this.state = 3052;
	            this.match(Cobol85Parser.SHARING);
	            this.state = 3054;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.IS) {
	                this.state = 3053;
	                this.match(Cobol85Parser.IS);
	            }

	            this.state = 3056;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.DONTCARE || _la===Cobol85Parser.PRIVATE || _la===Cobol85Parser.SHAREDBYALL || _la===Cobol85Parser.SHAREDBYRUNUNIT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryAttributeClauseFormat2() {
	    let localctx = new LibraryAttributeClauseFormat2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, Cobol85Parser.RULE_libraryAttributeClauseFormat2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3059;
	        this.match(Cobol85Parser.ATTRIBUTE);
	        this.state = 3061;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FUNCTIONNAME) {
	            this.state = 3060;
	            this.libraryAttributeFunction();
	        }

	        this.state = 3068;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.LIBACCESS) {
	            this.state = 3063;
	            this.match(Cobol85Parser.LIBACCESS);
	            this.state = 3065;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.IS) {
	                this.state = 3064;
	                this.match(Cobol85Parser.IS);
	            }

	            this.state = 3067;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.BYFUNCTION || _la===Cobol85Parser.BYTITLE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 3071;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.LIBPARAMETER) {
	            this.state = 3070;
	            this.libraryAttributeParameter();
	        }

	        this.state = 3074;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.TITLE) {
	            this.state = 3073;
	            this.libraryAttributeTitle();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryAttributeFunction() {
	    let localctx = new LibraryAttributeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, Cobol85Parser.RULE_libraryAttributeFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3076;
	        this.match(Cobol85Parser.FUNCTIONNAME);
	        this.state = 3077;
	        this.match(Cobol85Parser.IS);
	        this.state = 3078;
	        this.literal();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryAttributeParameter() {
	    let localctx = new LibraryAttributeParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, Cobol85Parser.RULE_libraryAttributeParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3080;
	        this.match(Cobol85Parser.LIBPARAMETER);
	        this.state = 3082;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 3081;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 3084;
	        this.literal();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryAttributeTitle() {
	    let localctx = new LibraryAttributeTitleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, Cobol85Parser.RULE_libraryAttributeTitle);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3086;
	        this.match(Cobol85Parser.TITLE);
	        this.state = 3088;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 3087;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 3090;
	        this.literal();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryEntryProcedureClauseFormat1() {
	    let localctx = new LibraryEntryProcedureClauseFormat1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, Cobol85Parser.RULE_libraryEntryProcedureClauseFormat1);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3092;
	        this.match(Cobol85Parser.ENTRY_PROCEDURE);
	        this.state = 3093;
	        this.programName();
	        this.state = 3095;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FOR) {
	            this.state = 3094;
	            this.libraryEntryProcedureForClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryEntryProcedureClauseFormat2() {
	    let localctx = new LibraryEntryProcedureClauseFormat2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, Cobol85Parser.RULE_libraryEntryProcedureClauseFormat2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3097;
	        this.match(Cobol85Parser.ENTRY_PROCEDURE);
	        this.state = 3098;
	        this.programName();
	        this.state = 3100;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FOR) {
	            this.state = 3099;
	            this.libraryEntryProcedureForClause();
	        }

	        this.state = 3103;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.WITH) {
	            this.state = 3102;
	            this.libraryEntryProcedureWithClause();
	        }

	        this.state = 3106;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.USING) {
	            this.state = 3105;
	            this.libraryEntryProcedureUsingClause();
	        }

	        this.state = 3109;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.GIVING) {
	            this.state = 3108;
	            this.libraryEntryProcedureGivingClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryEntryProcedureForClause() {
	    let localctx = new LibraryEntryProcedureForClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, Cobol85Parser.RULE_libraryEntryProcedureForClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3111;
	        this.match(Cobol85Parser.FOR);
	        this.state = 3112;
	        this.literal();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryEntryProcedureGivingClause() {
	    let localctx = new LibraryEntryProcedureGivingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, Cobol85Parser.RULE_libraryEntryProcedureGivingClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3114;
	        this.match(Cobol85Parser.GIVING);
	        this.state = 3115;
	        this.dataName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryEntryProcedureUsingClause() {
	    let localctx = new LibraryEntryProcedureUsingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, Cobol85Parser.RULE_libraryEntryProcedureUsingClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3117;
	        this.match(Cobol85Parser.USING);
	        this.state = 3119; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 3118;
	        		this.libraryEntryProcedureUsingName();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 3121; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,383, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryEntryProcedureUsingName() {
	    let localctx = new LibraryEntryProcedureUsingNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, Cobol85Parser.RULE_libraryEntryProcedureUsingName);
	    try {
	        this.state = 3125;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,384,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3123;
	            this.dataName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3124;
	            this.fileName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryEntryProcedureWithClause() {
	    let localctx = new LibraryEntryProcedureWithClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, Cobol85Parser.RULE_libraryEntryProcedureWithClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3127;
	        this.match(Cobol85Parser.WITH);
	        this.state = 3129; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 3128;
	        		this.libraryEntryProcedureWithName();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 3131; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,385, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryEntryProcedureWithName() {
	    let localctx = new LibraryEntryProcedureWithNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, Cobol85Parser.RULE_libraryEntryProcedureWithName);
	    try {
	        this.state = 3135;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,386,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3133;
	            this.localName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3134;
	            this.fileName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryIsCommonClause() {
	    let localctx = new LibraryIsCommonClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, Cobol85Parser.RULE_libraryIsCommonClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3138;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 3137;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 3140;
	        this.match(Cobol85Parser.COMMON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryIsGlobalClause() {
	    let localctx = new LibraryIsGlobalClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, Cobol85Parser.RULE_libraryIsGlobalClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3143;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 3142;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 3145;
	        this.match(Cobol85Parser.GLOBAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataDescriptionEntry() {
	    let localctx = new DataDescriptionEntryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, Cobol85Parser.RULE_dataDescriptionEntry);
	    try {
	        this.state = 3151;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.LEVEL_NUMBER_77:
	        case Cobol85Parser.INTEGERLITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3147;
	            this.dataDescriptionEntryFormat1();
	            break;
	        case Cobol85Parser.LEVEL_NUMBER_66:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3148;
	            this.dataDescriptionEntryFormat2();
	            break;
	        case Cobol85Parser.LEVEL_NUMBER_88:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3149;
	            this.dataDescriptionEntryFormat3();
	            break;
	        case Cobol85Parser.EXECSQLLINE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3150;
	            this.dataDescriptionEntryExecSql();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataDescriptionEntryFormat1() {
	    let localctx = new DataDescriptionEntryFormat1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, Cobol85Parser.RULE_dataDescriptionEntryFormat1);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3153;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.LEVEL_NUMBER_77 || _la===Cobol85Parser.INTEGERLITERAL)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3156;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,390,this._ctx);
	        if(la_===1) {
	            this.state = 3154;
	            this.match(Cobol85Parser.FILLER);

	        } else if(la_===2) {
	            this.state = 3155;
	            this.dataName();

	        }
	        this.state = 3181;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ALIGNED) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLANK - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.BY - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.COMMON - 68)) | (1 << (Cobol85Parser.COMP - 68)) | (1 << (Cobol85Parser.COMP_1 - 68)) | (1 << (Cobol85Parser.COMP_2 - 68)) | (1 << (Cobol85Parser.COMP_3 - 68)) | (1 << (Cobol85Parser.COMP_4 - 68)) | (1 << (Cobol85Parser.COMP_5 - 68)) | (1 << (Cobol85Parser.COMPUTATIONAL - 68)) | (1 << (Cobol85Parser.COMPUTATIONAL_1 - 68)) | (1 << (Cobol85Parser.COMPUTATIONAL_2 - 68)) | (1 << (Cobol85Parser.COMPUTATIONAL_3 - 68)) | (1 << (Cobol85Parser.COMPUTATIONAL_4 - 68)) | (1 << (Cobol85Parser.COMPUTATIONAL_5 - 68)) | (1 << (Cobol85Parser.CONTENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DISPLAY - 138)) | (1 << (Cobol85Parser.DISPLAY_1 - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.EXTERNAL - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GLOBAL - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)) | (1 << (Cobol85Parser.INDEX - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.IS - 250)) | (1 << (Cobol85Parser.JUST - 250)) | (1 << (Cobol85Parser.JUSTIFIED - 250)) | (1 << (Cobol85Parser.KANJI - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEADING - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LOCK - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL_ - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.OCCURS - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PACKED_DECIMAL - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)) | (1 << (Cobol85Parser.PIC - 317)) | (1 << (Cobol85Parser.PICTURE - 317)))) !== 0) || ((((_la - 349)) & ~0x1f) == 0 && ((1 << (_la - 349)) & ((1 << (Cobol85Parser.POINTER - 349)) | (1 << (Cobol85Parser.PORT - 349)) | (1 << (Cobol85Parser.PRINTER - 349)) | (1 << (Cobol85Parser.PRIVATE - 349)) | (1 << (Cobol85Parser.PROCEDURE_POINTER - 349)) | (1 << (Cobol85Parser.PROCESS - 349)) | (1 << (Cobol85Parser.PROGRAM - 349)) | (1 << (Cobol85Parser.PROMPT - 349)) | (1 << (Cobol85Parser.QUOTE - 349)) | (1 << (Cobol85Parser.QUOTES - 349)) | (1 << (Cobol85Parser.READER - 349)) | (1 << (Cobol85Parser.REMOTE - 349)) | (1 << (Cobol85Parser.REAL - 349)) | (1 << (Cobol85Parser.RECEIVED - 349)) | (1 << (Cobol85Parser.RECORD - 349)) | (1 << (Cobol85Parser.RECURSIVE - 349)))) !== 0) || ((((_la - 381)) & ~0x1f) == 0 && ((1 << (_la - 381)) & ((1 << (Cobol85Parser.REDEFINES - 381)) | (1 << (Cobol85Parser.REF - 381)) | (1 << (Cobol85Parser.REFERENCE - 381)) | (1 << (Cobol85Parser.REMOVE - 381)) | (1 << (Cobol85Parser.REQUIRED - 381)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 381)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (Cobol85Parser.SAVE - 415)) | (1 << (Cobol85Parser.SECURE - 415)) | (1 << (Cobol85Parser.SHARED - 415)) | (1 << (Cobol85Parser.SHAREDBYALL - 415)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 415)) | (1 << (Cobol85Parser.SHARING - 415)) | (1 << (Cobol85Parser.SHORT_DATE - 415)) | (1 << (Cobol85Parser.SIGN - 415)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (Cobol85Parser.SPACE - 450)) | (1 << (Cobol85Parser.SPACES - 450)) | (1 << (Cobol85Parser.STRING - 450)) | (1 << (Cobol85Parser.SYMBOL - 450)) | (1 << (Cobol85Parser.SYNC - 450)) | (1 << (Cobol85Parser.SYNCHRONIZED - 450)) | (1 << (Cobol85Parser.TASK - 450)) | (1 << (Cobol85Parser.THREAD - 450)))) !== 0) || ((((_la - 482)) & ~0x1f) == 0 && ((1 << (_la - 482)) & ((1 << (Cobol85Parser.THREAD_LOCAL - 482)) | (1 << (Cobol85Parser.TIMER - 482)) | (1 << (Cobol85Parser.TODAYS_DATE - 482)) | (1 << (Cobol85Parser.TODAYS_NAME - 482)) | (1 << (Cobol85Parser.TRAILING - 482)) | (1 << (Cobol85Parser.TRUE - 482)) | (1 << (Cobol85Parser.TRUNCATED - 482)) | (1 << (Cobol85Parser.TYPE - 482)) | (1 << (Cobol85Parser.TYPEDEF - 482)) | (1 << (Cobol85Parser.UNDERLINE - 482)) | (1 << (Cobol85Parser.USAGE - 482)) | (1 << (Cobol85Parser.USING - 482)) | (1 << (Cobol85Parser.VALUE - 482)) | (1 << (Cobol85Parser.VALUES - 482)) | (1 << (Cobol85Parser.VIRTUAL - 482)) | (1 << (Cobol85Parser.WAIT - 482)))) !== 0) || ((((_la - 514)) & ~0x1f) == 0 && ((1 << (_la - 514)) & ((1 << (Cobol85Parser.WITH - 514)) | (1 << (Cobol85Parser.YEAR - 514)) | (1 << (Cobol85Parser.YYYYMMDD - 514)) | (1 << (Cobol85Parser.YYYYDDD - 514)) | (1 << (Cobol85Parser.ZERO - 514)) | (1 << (Cobol85Parser.ZERO_FILL - 514)) | (1 << (Cobol85Parser.ZEROS - 514)) | (1 << (Cobol85Parser.ZEROES - 514)))) !== 0) || ((((_la - 551)) & ~0x1f) == 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0)) {
	            this.state = 3179;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,391,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3158;
	                this.dataRedefinesClause();
	                break;

	            case 2:
	                this.state = 3159;
	                this.dataIntegerStringClause();
	                break;

	            case 3:
	                this.state = 3160;
	                this.dataExternalClause();
	                break;

	            case 4:
	                this.state = 3161;
	                this.dataGlobalClause();
	                break;

	            case 5:
	                this.state = 3162;
	                this.dataTypeDefClause();
	                break;

	            case 6:
	                this.state = 3163;
	                this.dataThreadLocalClause();
	                break;

	            case 7:
	                this.state = 3164;
	                this.dataPictureClause();
	                break;

	            case 8:
	                this.state = 3165;
	                this.dataCommonOwnLocalClause();
	                break;

	            case 9:
	                this.state = 3166;
	                this.dataTypeClause();
	                break;

	            case 10:
	                this.state = 3167;
	                this.dataUsingClause();
	                break;

	            case 11:
	                this.state = 3168;
	                this.dataUsageClause();
	                break;

	            case 12:
	                this.state = 3169;
	                this.dataValueClause();
	                break;

	            case 13:
	                this.state = 3170;
	                this.dataReceivedByClause();
	                break;

	            case 14:
	                this.state = 3171;
	                this.dataOccursClause();
	                break;

	            case 15:
	                this.state = 3172;
	                this.dataSignClause();
	                break;

	            case 16:
	                this.state = 3173;
	                this.dataSynchronizedClause();
	                break;

	            case 17:
	                this.state = 3174;
	                this.dataJustifiedClause();
	                break;

	            case 18:
	                this.state = 3175;
	                this.dataBlankWhenZeroClause();
	                break;

	            case 19:
	                this.state = 3176;
	                this.dataWithLowerBoundsClause();
	                break;

	            case 20:
	                this.state = 3177;
	                this.dataAlignedClause();
	                break;

	            case 21:
	                this.state = 3178;
	                this.dataRecordAreaClause();
	                break;

	            }
	            this.state = 3183;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3184;
	        this.match(Cobol85Parser.DOT_FS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataDescriptionEntryFormat2() {
	    let localctx = new DataDescriptionEntryFormat2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, Cobol85Parser.RULE_dataDescriptionEntryFormat2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3186;
	        this.match(Cobol85Parser.LEVEL_NUMBER_66);
	        this.state = 3187;
	        this.dataName();
	        this.state = 3188;
	        this.dataRenamesClause();
	        this.state = 3189;
	        this.match(Cobol85Parser.DOT_FS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataDescriptionEntryFormat3() {
	    let localctx = new DataDescriptionEntryFormat3Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, Cobol85Parser.RULE_dataDescriptionEntryFormat3);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3191;
	        this.match(Cobol85Parser.LEVEL_NUMBER_88);
	        this.state = 3192;
	        this.conditionName();
	        this.state = 3193;
	        this.dataValueClause();
	        this.state = 3194;
	        this.match(Cobol85Parser.DOT_FS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataDescriptionEntryExecSql() {
	    let localctx = new DataDescriptionEntryExecSqlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, Cobol85Parser.RULE_dataDescriptionEntryExecSql);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3197; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 3196;
	        		this.match(Cobol85Parser.EXECSQLLINE);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 3199; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,393, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 3202;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.DOT_FS) {
	            this.state = 3201;
	            this.match(Cobol85Parser.DOT_FS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataAlignedClause() {
	    let localctx = new DataAlignedClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, Cobol85Parser.RULE_dataAlignedClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3204;
	        this.match(Cobol85Parser.ALIGNED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataBlankWhenZeroClause() {
	    let localctx = new DataBlankWhenZeroClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, Cobol85Parser.RULE_dataBlankWhenZeroClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3206;
	        this.match(Cobol85Parser.BLANK);
	        this.state = 3208;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.WHEN) {
	            this.state = 3207;
	            this.match(Cobol85Parser.WHEN);
	        }

	        this.state = 3210;
	        _la = this._input.LA(1);
	        if(!(((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (Cobol85Parser.ZERO - 521)) | (1 << (Cobol85Parser.ZEROS - 521)) | (1 << (Cobol85Parser.ZEROES - 521)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataCommonOwnLocalClause() {
	    let localctx = new DataCommonOwnLocalClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, Cobol85Parser.RULE_dataCommonOwnLocalClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3212;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.COMMON || _la===Cobol85Parser.LOCAL || _la===Cobol85Parser.OWN)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataExternalClause() {
	    let localctx = new DataExternalClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, Cobol85Parser.RULE_dataExternalClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3215;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 3214;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 3217;
	        this.match(Cobol85Parser.EXTERNAL);
	        this.state = 3220;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,397,this._ctx);
	        if(la_===1) {
	            this.state = 3218;
	            this.match(Cobol85Parser.BY);
	            this.state = 3219;
	            this.literal();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataGlobalClause() {
	    let localctx = new DataGlobalClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, Cobol85Parser.RULE_dataGlobalClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3223;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 3222;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 3225;
	        this.match(Cobol85Parser.GLOBAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataIntegerStringClause() {
	    let localctx = new DataIntegerStringClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, Cobol85Parser.RULE_dataIntegerStringClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3227;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.INTEGER || _la===Cobol85Parser.STRING)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataJustifiedClause() {
	    let localctx = new DataJustifiedClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, Cobol85Parser.RULE_dataJustifiedClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3229;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.JUST || _la===Cobol85Parser.JUSTIFIED)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3231;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.RIGHT) {
	            this.state = 3230;
	            this.match(Cobol85Parser.RIGHT);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataOccursClause() {
	    let localctx = new DataOccursClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, Cobol85Parser.RULE_dataOccursClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3233;
	        this.match(Cobol85Parser.OCCURS);
	        this.state = 3234;
	        this.integerLiteral();
	        this.state = 3236;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.TO) {
	            this.state = 3235;
	            this.dataOccursTo();
	        }

	        this.state = 3239;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.TIMES) {
	            this.state = 3238;
	            this.match(Cobol85Parser.TIMES);
	        }

	        this.state = 3246;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.DEPENDING) {
	            this.state = 3241;
	            this.match(Cobol85Parser.DEPENDING);
	            this.state = 3243;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.ON) {
	                this.state = 3242;
	                this.match(Cobol85Parser.ON);
	            }

	            this.state = 3245;
	            this.qualifiedDataName();
	        }

	        this.state = 3251;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.ASCENDING || _la===Cobol85Parser.DESCENDING) {
	            this.state = 3248;
	            this.dataOccursSort();
	            this.state = 3253;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3266;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.INDEXED) {
	            this.state = 3254;
	            this.match(Cobol85Parser.INDEXED);
	            this.state = 3256;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.BY) {
	                this.state = 3255;
	                this.match(Cobol85Parser.BY);
	            }

	            this.state = 3259;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,406,this._ctx);
	            if(la_===1) {
	                this.state = 3258;
	                this.match(Cobol85Parser.LOCAL);

	            }
	            this.state = 3262; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 3261;
	            		this.indexName();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 3264; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,407, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataOccursTo() {
	    let localctx = new DataOccursToContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, Cobol85Parser.RULE_dataOccursTo);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3268;
	        this.match(Cobol85Parser.TO);
	        this.state = 3269;
	        this.integerLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataOccursSort() {
	    let localctx = new DataOccursSortContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, Cobol85Parser.RULE_dataOccursSort);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3271;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.ASCENDING || _la===Cobol85Parser.DESCENDING)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3273;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.KEY) {
	            this.state = 3272;
	            this.match(Cobol85Parser.KEY);
	        }

	        this.state = 3276;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 3275;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 3279; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 3278;
	        		this.qualifiedDataName();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 3281; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,411, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataPictureClause() {
	    let localctx = new DataPictureClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, Cobol85Parser.RULE_dataPictureClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3283;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.PIC || _la===Cobol85Parser.PICTURE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3285;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 3284;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 3287;
	        this.pictureString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pictureString() {
	    let localctx = new PictureStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, Cobol85Parser.RULE_pictureString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3297; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 3290; 
	        		this._errHandler.sync(this);
	        		var _alt = 1;
	        		do {
	        			switch (_alt) {
	        			case 1:
	        				this.state = 3289;
	        				this.pictureChars();
	        				break;
	        			default:
	        				throw new antlr4.error.NoViableAltException(this);
	        			}
	        			this.state = 3292; 
	        			this._errHandler.sync(this);
	        			_alt = this._interp.adaptivePredict(this._input,413, this._ctx);
	        		} while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        		this.state = 3295;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,414,this._ctx);
	        		if(la_===1) {
	        		    this.state = 3294;
	        		    this.pictureCardinality();

	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 3299; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,415, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pictureChars() {
	    let localctx = new PictureCharsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, Cobol85Parser.RULE_pictureChars);
	    try {
	        this.state = 3317;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.DOLLARCHAR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3301;
	            this.match(Cobol85Parser.DOLLARCHAR);
	            break;
	        case Cobol85Parser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3302;
	            this.match(Cobol85Parser.IDENTIFIER);
	            break;
	        case Cobol85Parser.NUMERICLITERAL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3303;
	            this.match(Cobol85Parser.NUMERICLITERAL);
	            break;
	        case Cobol85Parser.SLASHCHAR:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3304;
	            this.match(Cobol85Parser.SLASHCHAR);
	            break;
	        case Cobol85Parser.COMMACHAR:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3305;
	            this.match(Cobol85Parser.COMMACHAR);
	            break;
	        case Cobol85Parser.DOT:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3306;
	            this.match(Cobol85Parser.DOT);
	            break;
	        case Cobol85Parser.COLONCHAR:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3307;
	            this.match(Cobol85Parser.COLONCHAR);
	            break;
	        case Cobol85Parser.ASTERISKCHAR:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3308;
	            this.match(Cobol85Parser.ASTERISKCHAR);
	            break;
	        case Cobol85Parser.DOUBLEASTERISKCHAR:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3309;
	            this.match(Cobol85Parser.DOUBLEASTERISKCHAR);
	            break;
	        case Cobol85Parser.LPARENCHAR:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3310;
	            this.match(Cobol85Parser.LPARENCHAR);
	            break;
	        case Cobol85Parser.RPARENCHAR:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 3311;
	            this.match(Cobol85Parser.RPARENCHAR);
	            break;
	        case Cobol85Parser.PLUSCHAR:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 3312;
	            this.match(Cobol85Parser.PLUSCHAR);
	            break;
	        case Cobol85Parser.MINUSCHAR:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 3313;
	            this.match(Cobol85Parser.MINUSCHAR);
	            break;
	        case Cobol85Parser.LESSTHANCHAR:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 3314;
	            this.match(Cobol85Parser.LESSTHANCHAR);
	            break;
	        case Cobol85Parser.MORETHANCHAR:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 3315;
	            this.match(Cobol85Parser.MORETHANCHAR);
	            break;
	        case Cobol85Parser.LEVEL_NUMBER_66:
	        case Cobol85Parser.LEVEL_NUMBER_77:
	        case Cobol85Parser.LEVEL_NUMBER_88:
	        case Cobol85Parser.INTEGERLITERAL:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 3316;
	            this.integerLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pictureCardinality() {
	    let localctx = new PictureCardinalityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, Cobol85Parser.RULE_pictureCardinality);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3319;
	        this.match(Cobol85Parser.LPARENCHAR);
	        this.state = 3320;
	        this.integerLiteral();
	        this.state = 3321;
	        this.match(Cobol85Parser.RPARENCHAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataReceivedByClause() {
	    let localctx = new DataReceivedByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, Cobol85Parser.RULE_dataReceivedByClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3324;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.RECEIVED) {
	            this.state = 3323;
	            this.match(Cobol85Parser.RECEIVED);
	        }

	        this.state = 3327;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.BY) {
	            this.state = 3326;
	            this.match(Cobol85Parser.BY);
	        }

	        this.state = 3329;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.CONTENT || _la===Cobol85Parser.REF || _la===Cobol85Parser.REFERENCE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataRecordAreaClause() {
	    let localctx = new DataRecordAreaClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, Cobol85Parser.RULE_dataRecordAreaClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3331;
	        this.match(Cobol85Parser.RECORD);
	        this.state = 3332;
	        this.match(Cobol85Parser.AREA);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataRedefinesClause() {
	    let localctx = new DataRedefinesClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, Cobol85Parser.RULE_dataRedefinesClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3334;
	        this.match(Cobol85Parser.REDEFINES);
	        this.state = 3335;
	        this.dataName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataRenamesClause() {
	    let localctx = new DataRenamesClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, Cobol85Parser.RULE_dataRenamesClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3337;
	        this.match(Cobol85Parser.RENAMES);
	        this.state = 3338;
	        this.qualifiedDataName();
	        this.state = 3341;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.THROUGH || _la===Cobol85Parser.THRU) {
	            this.state = 3339;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.THROUGH || _la===Cobol85Parser.THRU)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3340;
	            this.qualifiedDataName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataSignClause() {
	    let localctx = new DataSignClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, Cobol85Parser.RULE_dataSignClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3347;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.SIGN) {
	            this.state = 3343;
	            this.match(Cobol85Parser.SIGN);
	            this.state = 3345;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.IS) {
	                this.state = 3344;
	                this.match(Cobol85Parser.IS);
	            }

	        }

	        this.state = 3349;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.LEADING || _la===Cobol85Parser.TRAILING)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3354;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.SEPARATE) {
	            this.state = 3350;
	            this.match(Cobol85Parser.SEPARATE);
	            this.state = 3352;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.CHARACTER) {
	                this.state = 3351;
	                this.match(Cobol85Parser.CHARACTER);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataSynchronizedClause() {
	    let localctx = new DataSynchronizedClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, Cobol85Parser.RULE_dataSynchronizedClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3356;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.SYNC || _la===Cobol85Parser.SYNCHRONIZED)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3358;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.LEFT || _la===Cobol85Parser.RIGHT) {
	            this.state = 3357;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.LEFT || _la===Cobol85Parser.RIGHT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataThreadLocalClause() {
	    let localctx = new DataThreadLocalClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, Cobol85Parser.RULE_dataThreadLocalClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3361;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 3360;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 3363;
	        this.match(Cobol85Parser.THREAD_LOCAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataTypeClause() {
	    let localctx = new DataTypeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, Cobol85Parser.RULE_dataTypeClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3365;
	        this.match(Cobol85Parser.TYPE);
	        this.state = 3367;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 3366;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 3369;
	        _la = this._input.LA(1);
	        if(!(((((_la - 287)) & ~0x1f) == 0 && ((1 << (_la - 287)) & ((1 << (Cobol85Parser.LONG_DATE - 287)) | (1 << (Cobol85Parser.LONG_TIME - 287)) | (1 << (Cobol85Parser.NUMERIC_DATE - 287)))) !== 0) || _la===Cobol85Parser.NUMERIC_TIME || _la===Cobol85Parser.SHORT_DATE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataTypeDefClause() {
	    let localctx = new DataTypeDefClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, Cobol85Parser.RULE_dataTypeDefClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3372;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 3371;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 3374;
	        this.match(Cobol85Parser.TYPEDEF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataUsageClause() {
	    let localctx = new DataUsageClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 490, Cobol85Parser.RULE_dataUsageClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3380;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.USAGE) {
	            this.state = 3376;
	            this.match(Cobol85Parser.USAGE);
	            this.state = 3378;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.IS) {
	                this.state = 3377;
	                this.match(Cobol85Parser.IS);
	            }

	        }

	        this.state = 3415;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.BINARY:
	            this.state = 3382;
	            this.match(Cobol85Parser.BINARY);
	            this.state = 3384;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,430,this._ctx);
	            if(la_===1) {
	                this.state = 3383;
	                _la = this._input.LA(1);
	                if(!(_la===Cobol85Parser.EXTENDED || _la===Cobol85Parser.TRUNCATED)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            break;
	        case Cobol85Parser.BIT:
	            this.state = 3386;
	            this.match(Cobol85Parser.BIT);
	            break;
	        case Cobol85Parser.COMP:
	            this.state = 3387;
	            this.match(Cobol85Parser.COMP);
	            break;
	        case Cobol85Parser.COMP_1:
	            this.state = 3388;
	            this.match(Cobol85Parser.COMP_1);
	            break;
	        case Cobol85Parser.COMP_2:
	            this.state = 3389;
	            this.match(Cobol85Parser.COMP_2);
	            break;
	        case Cobol85Parser.COMP_3:
	            this.state = 3390;
	            this.match(Cobol85Parser.COMP_3);
	            break;
	        case Cobol85Parser.COMP_4:
	            this.state = 3391;
	            this.match(Cobol85Parser.COMP_4);
	            break;
	        case Cobol85Parser.COMP_5:
	            this.state = 3392;
	            this.match(Cobol85Parser.COMP_5);
	            break;
	        case Cobol85Parser.COMPUTATIONAL:
	            this.state = 3393;
	            this.match(Cobol85Parser.COMPUTATIONAL);
	            break;
	        case Cobol85Parser.COMPUTATIONAL_1:
	            this.state = 3394;
	            this.match(Cobol85Parser.COMPUTATIONAL_1);
	            break;
	        case Cobol85Parser.COMPUTATIONAL_2:
	            this.state = 3395;
	            this.match(Cobol85Parser.COMPUTATIONAL_2);
	            break;
	        case Cobol85Parser.COMPUTATIONAL_3:
	            this.state = 3396;
	            this.match(Cobol85Parser.COMPUTATIONAL_3);
	            break;
	        case Cobol85Parser.COMPUTATIONAL_4:
	            this.state = 3397;
	            this.match(Cobol85Parser.COMPUTATIONAL_4);
	            break;
	        case Cobol85Parser.COMPUTATIONAL_5:
	            this.state = 3398;
	            this.match(Cobol85Parser.COMPUTATIONAL_5);
	            break;
	        case Cobol85Parser.CONTROL_POINT:
	            this.state = 3399;
	            this.match(Cobol85Parser.CONTROL_POINT);
	            break;
	        case Cobol85Parser.DATE:
	            this.state = 3400;
	            this.match(Cobol85Parser.DATE);
	            break;
	        case Cobol85Parser.DISPLAY:
	            this.state = 3401;
	            this.match(Cobol85Parser.DISPLAY);
	            break;
	        case Cobol85Parser.DISPLAY_1:
	            this.state = 3402;
	            this.match(Cobol85Parser.DISPLAY_1);
	            break;
	        case Cobol85Parser.DOUBLE:
	            this.state = 3403;
	            this.match(Cobol85Parser.DOUBLE);
	            break;
	        case Cobol85Parser.EVENT:
	            this.state = 3404;
	            this.match(Cobol85Parser.EVENT);
	            break;
	        case Cobol85Parser.FUNCTION_POINTER:
	            this.state = 3405;
	            this.match(Cobol85Parser.FUNCTION_POINTER);
	            break;
	        case Cobol85Parser.INDEX:
	            this.state = 3406;
	            this.match(Cobol85Parser.INDEX);
	            break;
	        case Cobol85Parser.KANJI:
	            this.state = 3407;
	            this.match(Cobol85Parser.KANJI);
	            break;
	        case Cobol85Parser.LOCK:
	            this.state = 3408;
	            this.match(Cobol85Parser.LOCK);
	            break;
	        case Cobol85Parser.NATIONAL:
	            this.state = 3409;
	            this.match(Cobol85Parser.NATIONAL);
	            break;
	        case Cobol85Parser.PACKED_DECIMAL:
	            this.state = 3410;
	            this.match(Cobol85Parser.PACKED_DECIMAL);
	            break;
	        case Cobol85Parser.POINTER:
	            this.state = 3411;
	            this.match(Cobol85Parser.POINTER);
	            break;
	        case Cobol85Parser.PROCEDURE_POINTER:
	            this.state = 3412;
	            this.match(Cobol85Parser.PROCEDURE_POINTER);
	            break;
	        case Cobol85Parser.REAL:
	            this.state = 3413;
	            this.match(Cobol85Parser.REAL);
	            break;
	        case Cobol85Parser.TASK:
	            this.state = 3414;
	            this.match(Cobol85Parser.TASK);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataUsingClause() {
	    let localctx = new DataUsingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 492, Cobol85Parser.RULE_dataUsingClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3417;
	        this.match(Cobol85Parser.USING);
	        this.state = 3418;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.CONVENTION || _la===Cobol85Parser.LANGUAGE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.OF) {
	            this.state = 3419;
	            this.match(Cobol85Parser.OF);
	        }

	        this.state = 3424;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,433,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3422;
	            this.cobolWord();
	            break;

	        case 2:
	            this.state = 3423;
	            this.dataName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataValueClause() {
	    let localctx = new DataValueClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 494, Cobol85Parser.RULE_dataValueClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3434;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case Cobol85Parser.VALUE:
	        	this.state = 3426;
	        	this.match(Cobol85Parser.VALUE);
	        	this.state = 3428;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===Cobol85Parser.IS) {
	        	    this.state = 3427;
	        	    this.match(Cobol85Parser.IS);
	        	}

	        	break;
	        case Cobol85Parser.VALUES:
	        	this.state = 3430;
	        	this.match(Cobol85Parser.VALUES);
	        	this.state = 3432;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===Cobol85Parser.ARE) {
	        	    this.state = 3431;
	        	    this.match(Cobol85Parser.ARE);
	        	}

	        	break;
	        case Cobol85Parser.ABORT:
	        case Cobol85Parser.ALL:
	        case Cobol85Parser.AS:
	        case Cobol85Parser.ASCII:
	        case Cobol85Parser.ASSOCIATED_DATA:
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	        case Cobol85Parser.ATTRIBUTE:
	        case Cobol85Parser.AUTO:
	        case Cobol85Parser.AUTO_SKIP:
	        case Cobol85Parser.BACKGROUND_COLOR:
	        case Cobol85Parser.BACKGROUND_COLOUR:
	        case Cobol85Parser.BEEP:
	        case Cobol85Parser.BELL:
	        case Cobol85Parser.BINARY:
	        case Cobol85Parser.BIT:
	        case Cobol85Parser.BLINK:
	        case Cobol85Parser.BOUNDS:
	        case Cobol85Parser.CAPABLE:
	        case Cobol85Parser.CCSVERSION:
	        case Cobol85Parser.CHANGED:
	        case Cobol85Parser.CHANNEL:
	        case Cobol85Parser.CLOSE_DISPOSITION:
	        case Cobol85Parser.COBOL:
	        case Cobol85Parser.COMMITMENT:
	        case Cobol85Parser.CONTROL_POINT:
	        case Cobol85Parser.CONVENTION:
	        case Cobol85Parser.CRUNCH:
	        case Cobol85Parser.CURSOR:
	        case Cobol85Parser.DEFAULT:
	        case Cobol85Parser.DEFAULT_DISPLAY:
	        case Cobol85Parser.DEFINITION:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.DISK:
	        case Cobol85Parser.DONTCARE:
	        case Cobol85Parser.DOUBLE:
	        case Cobol85Parser.EBCDIC:
	        case Cobol85Parser.EMPTY_CHECK:
	        case Cobol85Parser.ENTER:
	        case Cobol85Parser.ENTRY_PROCEDURE:
	        case Cobol85Parser.ERASE:
	        case Cobol85Parser.EOL:
	        case Cobol85Parser.EOS:
	        case Cobol85Parser.ESCAPE:
	        case Cobol85Parser.EVENT:
	        case Cobol85Parser.EXCLUSIVE:
	        case Cobol85Parser.EXPORT:
	        case Cobol85Parser.EXTENDED:
	        case Cobol85Parser.FALSE:
	        case Cobol85Parser.FOREGROUND_COLOR:
	        case Cobol85Parser.FOREGROUND_COLOUR:
	        case Cobol85Parser.FULL:
	        case Cobol85Parser.FUNCTIONNAME:
	        case Cobol85Parser.FUNCTION_POINTER:
	        case Cobol85Parser.GRID:
	        case Cobol85Parser.HIGHLIGHT:
	        case Cobol85Parser.HIGH_VALUE:
	        case Cobol85Parser.HIGH_VALUES:
	        case Cobol85Parser.IMPLICIT:
	        case Cobol85Parser.IMPORT:
	        case Cobol85Parser.INTEGER:
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.KEYBOARD:
	        case Cobol85Parser.LANGUAGE:
	        case Cobol85Parser.LB:
	        case Cobol85Parser.LD:
	        case Cobol85Parser.LEFTLINE:
	        case Cobol85Parser.LENGTH_CHECK:
	        case Cobol85Parser.LIBACCESS:
	        case Cobol85Parser.LIBPARAMETER:
	        case Cobol85Parser.LIBRARY:
	        case Cobol85Parser.LIST:
	        case Cobol85Parser.LOCAL:
	        case Cobol85Parser.LONG_DATE:
	        case Cobol85Parser.LONG_TIME:
	        case Cobol85Parser.LOWER:
	        case Cobol85Parser.LOWLIGHT:
	        case Cobol85Parser.LOW_VALUE:
	        case Cobol85Parser.LOW_VALUES:
	        case Cobol85Parser.MMDDYYYY:
	        case Cobol85Parser.NAMED:
	        case Cobol85Parser.NATIONAL:
	        case Cobol85Parser.NATIONAL_EDITED:
	        case Cobol85Parser.NETWORK:
	        case Cobol85Parser.NO_ECHO:
	        case Cobol85Parser.NULL_:
	        case Cobol85Parser.NULLS:
	        case Cobol85Parser.NUMERIC_DATE:
	        case Cobol85Parser.NUMERIC_TIME:
	        case Cobol85Parser.ODT:
	        case Cobol85Parser.ORDERLY:
	        case Cobol85Parser.OVERLINE:
	        case Cobol85Parser.OWN:
	        case Cobol85Parser.PASSWORD:
	        case Cobol85Parser.PORT:
	        case Cobol85Parser.PRINTER:
	        case Cobol85Parser.PRIVATE:
	        case Cobol85Parser.PROCESS:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.PROMPT:
	        case Cobol85Parser.QUOTE:
	        case Cobol85Parser.QUOTES:
	        case Cobol85Parser.READER:
	        case Cobol85Parser.REMOTE:
	        case Cobol85Parser.REAL:
	        case Cobol85Parser.RECEIVED:
	        case Cobol85Parser.RECURSIVE:
	        case Cobol85Parser.REF:
	        case Cobol85Parser.REMOVE:
	        case Cobol85Parser.REQUIRED:
	        case Cobol85Parser.REVERSE_VIDEO:
	        case Cobol85Parser.SAVE:
	        case Cobol85Parser.SECURE:
	        case Cobol85Parser.SHARED:
	        case Cobol85Parser.SHAREDBYALL:
	        case Cobol85Parser.SHAREDBYRUNUNIT:
	        case Cobol85Parser.SHARING:
	        case Cobol85Parser.SHORT_DATE:
	        case Cobol85Parser.SPACE:
	        case Cobol85Parser.SPACES:
	        case Cobol85Parser.SYMBOL:
	        case Cobol85Parser.TASK:
	        case Cobol85Parser.THREAD:
	        case Cobol85Parser.THREAD_LOCAL:
	        case Cobol85Parser.TIMER:
	        case Cobol85Parser.TODAYS_DATE:
	        case Cobol85Parser.TODAYS_NAME:
	        case Cobol85Parser.TRUE:
	        case Cobol85Parser.TRUNCATED:
	        case Cobol85Parser.TYPEDEF:
	        case Cobol85Parser.UNDERLINE:
	        case Cobol85Parser.VIRTUAL:
	        case Cobol85Parser.WAIT:
	        case Cobol85Parser.YEAR:
	        case Cobol85Parser.YYYYMMDD:
	        case Cobol85Parser.YYYYDDD:
	        case Cobol85Parser.ZERO:
	        case Cobol85Parser.ZERO_FILL:
	        case Cobol85Parser.ZEROS:
	        case Cobol85Parser.ZEROES:
	        case Cobol85Parser.NONNUMERICLITERAL:
	        case Cobol85Parser.LEVEL_NUMBER_66:
	        case Cobol85Parser.LEVEL_NUMBER_77:
	        case Cobol85Parser.LEVEL_NUMBER_88:
	        case Cobol85Parser.INTEGERLITERAL:
	        case Cobol85Parser.NUMERICLITERAL:
	        case Cobol85Parser.IDENTIFIER:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 3436;
	        this.dataValueInterval();
	        this.state = 3443;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,438,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3438;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Cobol85Parser.COMMACHAR) {
	                    this.state = 3437;
	                    this.match(Cobol85Parser.COMMACHAR);
	                }

	                this.state = 3440;
	                this.dataValueInterval(); 
	            }
	            this.state = 3445;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,438,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataValueInterval() {
	    let localctx = new DataValueIntervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 496, Cobol85Parser.RULE_dataValueInterval);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3446;
	        this.dataValueIntervalFrom();
	        this.state = 3448;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.THROUGH || _la===Cobol85Parser.THRU) {
	            this.state = 3447;
	            this.dataValueIntervalTo();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataValueIntervalFrom() {
	    let localctx = new DataValueIntervalFromContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 498, Cobol85Parser.RULE_dataValueIntervalFrom);
	    try {
	        this.state = 3452;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,440,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3450;
	            this.literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3451;
	            this.cobolWord();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataValueIntervalTo() {
	    let localctx = new DataValueIntervalToContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 500, Cobol85Parser.RULE_dataValueIntervalTo);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3454;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.THROUGH || _la===Cobol85Parser.THRU)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3455;
	        this.literal();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataWithLowerBoundsClause() {
	    let localctx = new DataWithLowerBoundsClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 502, Cobol85Parser.RULE_dataWithLowerBoundsClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3458;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.WITH) {
	            this.state = 3457;
	            this.match(Cobol85Parser.WITH);
	        }

	        this.state = 3460;
	        this.match(Cobol85Parser.LOWER);
	        this.state = 3461;
	        this.match(Cobol85Parser.BOUNDS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureDivision() {
	    let localctx = new ProcedureDivisionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 504, Cobol85Parser.RULE_procedureDivision);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3463;
	        this.match(Cobol85Parser.PROCEDURE);
	        this.state = 3464;
	        this.match(Cobol85Parser.DIVISION);
	        this.state = 3466;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.CHAINING || _la===Cobol85Parser.USING) {
	            this.state = 3465;
	            this.procedureDivisionUsingClause();
	        }

	        this.state = 3469;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.GIVING || _la===Cobol85Parser.RETURNING) {
	            this.state = 3468;
	            this.procedureDivisionGivingClause();
	        }

	        this.state = 3471;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 3473;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.DECLARATIVES) {
	            this.state = 3472;
	            this.procedureDeclaratives();
	        }

	        this.state = 3475;
	        this.procedureDivisionBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureDivisionUsingClause() {
	    let localctx = new ProcedureDivisionUsingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 506, Cobol85Parser.RULE_procedureDivisionUsingClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3477;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.CHAINING || _la===Cobol85Parser.USING)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3479; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3478;
	            this.procedureDivisionUsingParameter();
	            this.state = 3481; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ANY) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.BY - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.OPTIONAL - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 384)) & ~0x1f) == 0 && ((1 << (_la - 384)) & ((1 << (Cobol85Parser.REFERENCE - 384)) | (1 << (Cobol85Parser.REMOVE - 384)) | (1 << (Cobol85Parser.REQUIRED - 384)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 384)) | (1 << (Cobol85Parser.RETURN_CODE - 384)) | (1 << (Cobol85Parser.SAVE - 384)))) !== 0) || ((((_la - 420)) & ~0x1f) == 0 && ((1 << (_la - 420)) & ((1 << (Cobol85Parser.SECURE - 420)) | (1 << (Cobol85Parser.SHARED - 420)) | (1 << (Cobol85Parser.SHAREDBYALL - 420)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 420)) | (1 << (Cobol85Parser.SHARING - 420)) | (1 << (Cobol85Parser.SHIFT_IN - 420)) | (1 << (Cobol85Parser.SHIFT_OUT - 420)) | (1 << (Cobol85Parser.SHORT_DATE - 420)) | (1 << (Cobol85Parser.SORT_CONTROL - 420)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 420)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 420)) | (1 << (Cobol85Parser.SORT_MESSAGE - 420)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 420)) | (1 << (Cobol85Parser.SORT_RETURN - 420)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VALUE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureDivisionGivingClause() {
	    let localctx = new ProcedureDivisionGivingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 508, Cobol85Parser.RULE_procedureDivisionGivingClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3483;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.GIVING || _la===Cobol85Parser.RETURNING)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3484;
	        this.dataName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureDivisionUsingParameter() {
	    let localctx = new ProcedureDivisionUsingParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 510, Cobol85Parser.RULE_procedureDivisionUsingParameter);
	    try {
	        this.state = 3488;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,446,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3486;
	            this.procedureDivisionByReferencePhrase();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3487;
	            this.procedureDivisionByValuePhrase();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureDivisionByReferencePhrase() {
	    let localctx = new ProcedureDivisionByReferencePhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 512, Cobol85Parser.RULE_procedureDivisionByReferencePhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3494;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.BY || _la===Cobol85Parser.REFERENCE) {
	            this.state = 3491;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.BY) {
	                this.state = 3490;
	                this.match(Cobol85Parser.BY);
	            }

	            this.state = 3493;
	            this.match(Cobol85Parser.REFERENCE);
	        }

	        this.state = 3497; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 3496;
	        		this.procedureDivisionByReference();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 3499; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,449, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureDivisionByReference() {
	    let localctx = new ProcedureDivisionByReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 514, Cobol85Parser.RULE_procedureDivisionByReference);
	    var _la = 0; // Token type
	    try {
	        this.state = 3509;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.ABORT:
	        case Cobol85Parser.ADDRESS:
	        case Cobol85Parser.AS:
	        case Cobol85Parser.ASCII:
	        case Cobol85Parser.ASSOCIATED_DATA:
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	        case Cobol85Parser.ATTRIBUTE:
	        case Cobol85Parser.AUTO:
	        case Cobol85Parser.AUTO_SKIP:
	        case Cobol85Parser.BACKGROUND_COLOR:
	        case Cobol85Parser.BACKGROUND_COLOUR:
	        case Cobol85Parser.BEEP:
	        case Cobol85Parser.BELL:
	        case Cobol85Parser.BINARY:
	        case Cobol85Parser.BIT:
	        case Cobol85Parser.BLINK:
	        case Cobol85Parser.BOUNDS:
	        case Cobol85Parser.CAPABLE:
	        case Cobol85Parser.CCSVERSION:
	        case Cobol85Parser.CHANGED:
	        case Cobol85Parser.CHANNEL:
	        case Cobol85Parser.CLOSE_DISPOSITION:
	        case Cobol85Parser.COBOL:
	        case Cobol85Parser.COMMITMENT:
	        case Cobol85Parser.CONTROL_POINT:
	        case Cobol85Parser.CONVENTION:
	        case Cobol85Parser.CRUNCH:
	        case Cobol85Parser.CURSOR:
	        case Cobol85Parser.DATE:
	        case Cobol85Parser.DAY:
	        case Cobol85Parser.DAY_OF_WEEK:
	        case Cobol85Parser.DEBUG_CONTENTS:
	        case Cobol85Parser.DEBUG_ITEM:
	        case Cobol85Parser.DEBUG_LINE:
	        case Cobol85Parser.DEBUG_NAME:
	        case Cobol85Parser.DEBUG_SUB_1:
	        case Cobol85Parser.DEBUG_SUB_2:
	        case Cobol85Parser.DEBUG_SUB_3:
	        case Cobol85Parser.DEFAULT:
	        case Cobol85Parser.DEFAULT_DISPLAY:
	        case Cobol85Parser.DEFINITION:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.DISK:
	        case Cobol85Parser.DONTCARE:
	        case Cobol85Parser.DOUBLE:
	        case Cobol85Parser.EBCDIC:
	        case Cobol85Parser.EMPTY_CHECK:
	        case Cobol85Parser.ENTER:
	        case Cobol85Parser.ENTRY_PROCEDURE:
	        case Cobol85Parser.ERASE:
	        case Cobol85Parser.EOL:
	        case Cobol85Parser.EOS:
	        case Cobol85Parser.ESCAPE:
	        case Cobol85Parser.EVENT:
	        case Cobol85Parser.EXCLUSIVE:
	        case Cobol85Parser.EXPORT:
	        case Cobol85Parser.EXTENDED:
	        case Cobol85Parser.FOREGROUND_COLOR:
	        case Cobol85Parser.FOREGROUND_COLOUR:
	        case Cobol85Parser.FULL:
	        case Cobol85Parser.FUNCTION:
	        case Cobol85Parser.FUNCTIONNAME:
	        case Cobol85Parser.FUNCTION_POINTER:
	        case Cobol85Parser.GRID:
	        case Cobol85Parser.HIGHLIGHT:
	        case Cobol85Parser.IMPLICIT:
	        case Cobol85Parser.IMPORT:
	        case Cobol85Parser.INTEGER:
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.KEYBOARD:
	        case Cobol85Parser.LANGUAGE:
	        case Cobol85Parser.LB:
	        case Cobol85Parser.LD:
	        case Cobol85Parser.LEFTLINE:
	        case Cobol85Parser.LENGTH:
	        case Cobol85Parser.LENGTH_CHECK:
	        case Cobol85Parser.LIBACCESS:
	        case Cobol85Parser.LIBPARAMETER:
	        case Cobol85Parser.LIBRARY:
	        case Cobol85Parser.LINAGE_COUNTER:
	        case Cobol85Parser.LINE_COUNTER:
	        case Cobol85Parser.LIST:
	        case Cobol85Parser.LOCAL:
	        case Cobol85Parser.LONG_DATE:
	        case Cobol85Parser.LONG_TIME:
	        case Cobol85Parser.LOWER:
	        case Cobol85Parser.LOWLIGHT:
	        case Cobol85Parser.MMDDYYYY:
	        case Cobol85Parser.NAMED:
	        case Cobol85Parser.NATIONAL:
	        case Cobol85Parser.NATIONAL_EDITED:
	        case Cobol85Parser.NETWORK:
	        case Cobol85Parser.NO_ECHO:
	        case Cobol85Parser.NUMERIC_DATE:
	        case Cobol85Parser.NUMERIC_TIME:
	        case Cobol85Parser.ODT:
	        case Cobol85Parser.OPTIONAL:
	        case Cobol85Parser.ORDERLY:
	        case Cobol85Parser.OVERLINE:
	        case Cobol85Parser.OWN:
	        case Cobol85Parser.PAGE_COUNTER:
	        case Cobol85Parser.PASSWORD:
	        case Cobol85Parser.PORT:
	        case Cobol85Parser.PRINTER:
	        case Cobol85Parser.PRIVATE:
	        case Cobol85Parser.PROCESS:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.PROMPT:
	        case Cobol85Parser.READER:
	        case Cobol85Parser.REMOTE:
	        case Cobol85Parser.REAL:
	        case Cobol85Parser.RECEIVED:
	        case Cobol85Parser.RECURSIVE:
	        case Cobol85Parser.REF:
	        case Cobol85Parser.REMOVE:
	        case Cobol85Parser.REQUIRED:
	        case Cobol85Parser.REVERSE_VIDEO:
	        case Cobol85Parser.RETURN_CODE:
	        case Cobol85Parser.SAVE:
	        case Cobol85Parser.SECURE:
	        case Cobol85Parser.SHARED:
	        case Cobol85Parser.SHAREDBYALL:
	        case Cobol85Parser.SHAREDBYRUNUNIT:
	        case Cobol85Parser.SHARING:
	        case Cobol85Parser.SHIFT_IN:
	        case Cobol85Parser.SHIFT_OUT:
	        case Cobol85Parser.SHORT_DATE:
	        case Cobol85Parser.SORT_CONTROL:
	        case Cobol85Parser.SORT_CORE_SIZE:
	        case Cobol85Parser.SORT_FILE_SIZE:
	        case Cobol85Parser.SORT_MESSAGE:
	        case Cobol85Parser.SORT_MODE_SIZE:
	        case Cobol85Parser.SORT_RETURN:
	        case Cobol85Parser.SYMBOL:
	        case Cobol85Parser.TALLY:
	        case Cobol85Parser.TASK:
	        case Cobol85Parser.THREAD:
	        case Cobol85Parser.THREAD_LOCAL:
	        case Cobol85Parser.TIME:
	        case Cobol85Parser.TIMER:
	        case Cobol85Parser.TODAYS_DATE:
	        case Cobol85Parser.TODAYS_NAME:
	        case Cobol85Parser.TRUNCATED:
	        case Cobol85Parser.TYPEDEF:
	        case Cobol85Parser.UNDERLINE:
	        case Cobol85Parser.VIRTUAL:
	        case Cobol85Parser.WAIT:
	        case Cobol85Parser.WHEN_COMPILED:
	        case Cobol85Parser.YEAR:
	        case Cobol85Parser.YYYYMMDD:
	        case Cobol85Parser.YYYYDDD:
	        case Cobol85Parser.ZERO_FILL:
	        case Cobol85Parser.LEVEL_NUMBER_66:
	        case Cobol85Parser.LEVEL_NUMBER_77:
	        case Cobol85Parser.LEVEL_NUMBER_88:
	        case Cobol85Parser.INTEGERLITERAL:
	        case Cobol85Parser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3502;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.OPTIONAL) {
	                this.state = 3501;
	                this.match(Cobol85Parser.OPTIONAL);
	            }

	            this.state = 3506;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,451,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3504;
	                this.identifier();
	                break;

	            case 2:
	                this.state = 3505;
	                this.fileName();
	                break;

	            }
	            break;
	        case Cobol85Parser.ANY:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3508;
	            this.match(Cobol85Parser.ANY);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureDivisionByValuePhrase() {
	    let localctx = new ProcedureDivisionByValuePhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 516, Cobol85Parser.RULE_procedureDivisionByValuePhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3512;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.BY) {
	            this.state = 3511;
	            this.match(Cobol85Parser.BY);
	        }

	        this.state = 3514;
	        this.match(Cobol85Parser.VALUE);
	        this.state = 3516; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 3515;
	        		this.procedureDivisionByValue();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 3518; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,454, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureDivisionByValue() {
	    let localctx = new ProcedureDivisionByValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 518, Cobol85Parser.RULE_procedureDivisionByValue);
	    try {
	        this.state = 3523;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,455,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3520;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3521;
	            this.literal();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3522;
	            this.match(Cobol85Parser.ANY);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureDeclaratives() {
	    let localctx = new ProcedureDeclarativesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 520, Cobol85Parser.RULE_procedureDeclaratives);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3525;
	        this.match(Cobol85Parser.DECLARATIVES);
	        this.state = 3526;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 3528; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3527;
	            this.procedureDeclarative();
	            this.state = 3530; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	        this.state = 3532;
	        this.match(Cobol85Parser.END);
	        this.state = 3533;
	        this.match(Cobol85Parser.DECLARATIVES);
	        this.state = 3534;
	        this.match(Cobol85Parser.DOT_FS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureDeclarative() {
	    let localctx = new ProcedureDeclarativeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 522, Cobol85Parser.RULE_procedureDeclarative);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3536;
	        this.procedureSectionHeader();
	        this.state = 3537;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 3538;
	        this.useStatement();
	        this.state = 3539;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 3540;
	        this.paragraphs();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureSectionHeader() {
	    let localctx = new ProcedureSectionHeaderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 524, Cobol85Parser.RULE_procedureSectionHeader);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3542;
	        this.sectionName();
	        this.state = 3543;
	        this.match(Cobol85Parser.SECTION);
	        this.state = 3545;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0)) {
	            this.state = 3544;
	            this.integerLiteral();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureDivisionBody() {
	    let localctx = new ProcedureDivisionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 526, Cobol85Parser.RULE_procedureDivisionBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3547;
	        this.paragraphs();
	        this.state = 3551;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0)) {
	            this.state = 3548;
	            this.procedureSection();
	            this.state = 3553;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureSection() {
	    let localctx = new ProcedureSectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 528, Cobol85Parser.RULE_procedureSection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3554;
	        this.procedureSectionHeader();
	        this.state = 3555;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 3556;
	        this.paragraphs();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	paragraphs() {
	    let localctx = new ParagraphsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 530, Cobol85Parser.RULE_paragraphs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3561;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ACCEPT) | (1 << Cobol85Parser.ADD) | (1 << Cobol85Parser.ALTER))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (Cobol85Parser.CALL - 52)) | (1 << (Cobol85Parser.CANCEL - 52)) | (1 << (Cobol85Parser.CLOSE - 52)))) !== 0) || _la===Cobol85Parser.COMPUTE || _la===Cobol85Parser.CONTINUE || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DELETE - 131)) | (1 << (Cobol85Parser.DISABLE - 131)) | (1 << (Cobol85Parser.DISPLAY - 131)) | (1 << (Cobol85Parser.DIVIDE - 131)) | (1 << (Cobol85Parser.ENABLE - 131)))) !== 0) || ((((_la - 182)) & ~0x1f) == 0 && ((1 << (_la - 182)) & ((1 << (Cobol85Parser.ENTRY - 182)) | (1 << (Cobol85Parser.EVALUATE - 182)) | (1 << (Cobol85Parser.EXHIBIT - 182)) | (1 << (Cobol85Parser.EXIT - 182)))) !== 0) || ((((_la - 220)) & ~0x1f) == 0 && ((1 << (_la - 220)) & ((1 << (Cobol85Parser.GENERATE - 220)) | (1 << (Cobol85Parser.GOBACK - 220)) | (1 << (Cobol85Parser.GO - 220)) | (1 << (Cobol85Parser.IF - 220)) | (1 << (Cobol85Parser.INITIALIZE - 220)) | (1 << (Cobol85Parser.INITIATE - 220)) | (1 << (Cobol85Parser.INSPECT - 220)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (Cobol85Parser.MERGE - 294)) | (1 << (Cobol85Parser.MOVE - 294)) | (1 << (Cobol85Parser.MULTIPLY - 294)))) !== 0) || _la===Cobol85Parser.OPEN || _la===Cobol85Parser.PERFORM || ((((_la - 365)) & ~0x1f) == 0 && ((1 << (_la - 365)) & ((1 << (Cobol85Parser.PURGE - 365)) | (1 << (Cobol85Parser.READ - 365)) | (1 << (Cobol85Parser.RECEIVE - 365)) | (1 << (Cobol85Parser.RELEASE - 365)))) !== 0) || ((((_la - 403)) & ~0x1f) == 0 && ((1 << (_la - 403)) & ((1 << (Cobol85Parser.RETURN - 403)) | (1 << (Cobol85Parser.REWRITE - 403)) | (1 << (Cobol85Parser.SEARCH - 403)) | (1 << (Cobol85Parser.SEND - 403)) | (1 << (Cobol85Parser.SET - 403)))) !== 0) || ((((_la - 440)) & ~0x1f) == 0 && ((1 << (_la - 440)) & ((1 << (Cobol85Parser.SORT - 440)) | (1 << (Cobol85Parser.START - 440)) | (1 << (Cobol85Parser.STOP - 440)) | (1 << (Cobol85Parser.STRING - 440)) | (1 << (Cobol85Parser.SUBTRACT - 440)))) !== 0) || _la===Cobol85Parser.TERMINATE || _la===Cobol85Parser.UNSTRING || _la===Cobol85Parser.WRITE || _la===Cobol85Parser.DOT_FS || ((((_la - 559)) & ~0x1f) == 0 && ((1 << (_la - 559)) & ((1 << (Cobol85Parser.EXECCICSLINE - 559)) | (1 << (Cobol85Parser.EXECSQLIMSLINE - 559)) | (1 << (Cobol85Parser.EXECSQLLINE - 559)))) !== 0)) {
	            this.state = 3558;
	            this.sentence();
	            this.state = 3563;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3567;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,460,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3564;
	                this.paragraph(); 
	            }
	            this.state = 3569;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,460,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	paragraph() {
	    let localctx = new ParagraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 532, Cobol85Parser.RULE_paragraph);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3570;
	        this.paragraphName();
	        this.state = 3571;
	        this.match(Cobol85Parser.DOT_FS);
	        this.state = 3579;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,462,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3572;
	            this.alteredGoTo();
	            break;

	        case 2:
	            this.state = 3576;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ACCEPT) | (1 << Cobol85Parser.ADD) | (1 << Cobol85Parser.ALTER))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (Cobol85Parser.CALL - 52)) | (1 << (Cobol85Parser.CANCEL - 52)) | (1 << (Cobol85Parser.CLOSE - 52)))) !== 0) || _la===Cobol85Parser.COMPUTE || _la===Cobol85Parser.CONTINUE || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DELETE - 131)) | (1 << (Cobol85Parser.DISABLE - 131)) | (1 << (Cobol85Parser.DISPLAY - 131)) | (1 << (Cobol85Parser.DIVIDE - 131)) | (1 << (Cobol85Parser.ENABLE - 131)))) !== 0) || ((((_la - 182)) & ~0x1f) == 0 && ((1 << (_la - 182)) & ((1 << (Cobol85Parser.ENTRY - 182)) | (1 << (Cobol85Parser.EVALUATE - 182)) | (1 << (Cobol85Parser.EXHIBIT - 182)) | (1 << (Cobol85Parser.EXIT - 182)))) !== 0) || ((((_la - 220)) & ~0x1f) == 0 && ((1 << (_la - 220)) & ((1 << (Cobol85Parser.GENERATE - 220)) | (1 << (Cobol85Parser.GOBACK - 220)) | (1 << (Cobol85Parser.GO - 220)) | (1 << (Cobol85Parser.IF - 220)) | (1 << (Cobol85Parser.INITIALIZE - 220)) | (1 << (Cobol85Parser.INITIATE - 220)) | (1 << (Cobol85Parser.INSPECT - 220)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (Cobol85Parser.MERGE - 294)) | (1 << (Cobol85Parser.MOVE - 294)) | (1 << (Cobol85Parser.MULTIPLY - 294)))) !== 0) || _la===Cobol85Parser.OPEN || _la===Cobol85Parser.PERFORM || ((((_la - 365)) & ~0x1f) == 0 && ((1 << (_la - 365)) & ((1 << (Cobol85Parser.PURGE - 365)) | (1 << (Cobol85Parser.READ - 365)) | (1 << (Cobol85Parser.RECEIVE - 365)) | (1 << (Cobol85Parser.RELEASE - 365)))) !== 0) || ((((_la - 403)) & ~0x1f) == 0 && ((1 << (_la - 403)) & ((1 << (Cobol85Parser.RETURN - 403)) | (1 << (Cobol85Parser.REWRITE - 403)) | (1 << (Cobol85Parser.SEARCH - 403)) | (1 << (Cobol85Parser.SEND - 403)) | (1 << (Cobol85Parser.SET - 403)))) !== 0) || ((((_la - 440)) & ~0x1f) == 0 && ((1 << (_la - 440)) & ((1 << (Cobol85Parser.SORT - 440)) | (1 << (Cobol85Parser.START - 440)) | (1 << (Cobol85Parser.STOP - 440)) | (1 << (Cobol85Parser.STRING - 440)) | (1 << (Cobol85Parser.SUBTRACT - 440)))) !== 0) || _la===Cobol85Parser.TERMINATE || _la===Cobol85Parser.UNSTRING || _la===Cobol85Parser.WRITE || _la===Cobol85Parser.DOT_FS || ((((_la - 559)) & ~0x1f) == 0 && ((1 << (_la - 559)) & ((1 << (Cobol85Parser.EXECCICSLINE - 559)) | (1 << (Cobol85Parser.EXECSQLIMSLINE - 559)) | (1 << (Cobol85Parser.EXECSQLLINE - 559)))) !== 0)) {
	                this.state = 3573;
	                this.sentence();
	                this.state = 3578;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sentence() {
	    let localctx = new SentenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 534, Cobol85Parser.RULE_sentence);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3584;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ACCEPT) | (1 << Cobol85Parser.ADD) | (1 << Cobol85Parser.ALTER))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (Cobol85Parser.CALL - 52)) | (1 << (Cobol85Parser.CANCEL - 52)) | (1 << (Cobol85Parser.CLOSE - 52)))) !== 0) || _la===Cobol85Parser.COMPUTE || _la===Cobol85Parser.CONTINUE || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DELETE - 131)) | (1 << (Cobol85Parser.DISABLE - 131)) | (1 << (Cobol85Parser.DISPLAY - 131)) | (1 << (Cobol85Parser.DIVIDE - 131)) | (1 << (Cobol85Parser.ENABLE - 131)))) !== 0) || ((((_la - 182)) & ~0x1f) == 0 && ((1 << (_la - 182)) & ((1 << (Cobol85Parser.ENTRY - 182)) | (1 << (Cobol85Parser.EVALUATE - 182)) | (1 << (Cobol85Parser.EXHIBIT - 182)) | (1 << (Cobol85Parser.EXIT - 182)))) !== 0) || ((((_la - 220)) & ~0x1f) == 0 && ((1 << (_la - 220)) & ((1 << (Cobol85Parser.GENERATE - 220)) | (1 << (Cobol85Parser.GOBACK - 220)) | (1 << (Cobol85Parser.GO - 220)) | (1 << (Cobol85Parser.IF - 220)) | (1 << (Cobol85Parser.INITIALIZE - 220)) | (1 << (Cobol85Parser.INITIATE - 220)) | (1 << (Cobol85Parser.INSPECT - 220)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (Cobol85Parser.MERGE - 294)) | (1 << (Cobol85Parser.MOVE - 294)) | (1 << (Cobol85Parser.MULTIPLY - 294)))) !== 0) || _la===Cobol85Parser.OPEN || _la===Cobol85Parser.PERFORM || ((((_la - 365)) & ~0x1f) == 0 && ((1 << (_la - 365)) & ((1 << (Cobol85Parser.PURGE - 365)) | (1 << (Cobol85Parser.READ - 365)) | (1 << (Cobol85Parser.RECEIVE - 365)) | (1 << (Cobol85Parser.RELEASE - 365)))) !== 0) || ((((_la - 403)) & ~0x1f) == 0 && ((1 << (_la - 403)) & ((1 << (Cobol85Parser.RETURN - 403)) | (1 << (Cobol85Parser.REWRITE - 403)) | (1 << (Cobol85Parser.SEARCH - 403)) | (1 << (Cobol85Parser.SEND - 403)) | (1 << (Cobol85Parser.SET - 403)))) !== 0) || ((((_la - 440)) & ~0x1f) == 0 && ((1 << (_la - 440)) & ((1 << (Cobol85Parser.SORT - 440)) | (1 << (Cobol85Parser.START - 440)) | (1 << (Cobol85Parser.STOP - 440)) | (1 << (Cobol85Parser.STRING - 440)) | (1 << (Cobol85Parser.SUBTRACT - 440)))) !== 0) || _la===Cobol85Parser.TERMINATE || _la===Cobol85Parser.UNSTRING || _la===Cobol85Parser.WRITE || ((((_la - 559)) & ~0x1f) == 0 && ((1 << (_la - 559)) & ((1 << (Cobol85Parser.EXECCICSLINE - 559)) | (1 << (Cobol85Parser.EXECSQLIMSLINE - 559)) | (1 << (Cobol85Parser.EXECSQLLINE - 559)))) !== 0)) {
	            this.state = 3581;
	            this.statement();
	            this.state = 3586;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3587;
	        this.match(Cobol85Parser.DOT_FS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 536, Cobol85Parser.RULE_statement);
	    try {
	        this.state = 3638;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.ACCEPT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3589;
	            this.acceptStatement();
	            break;
	        case Cobol85Parser.ADD:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3590;
	            this.addStatement();
	            break;
	        case Cobol85Parser.ALTER:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3591;
	            this.alterStatement();
	            break;
	        case Cobol85Parser.CALL:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3592;
	            this.callStatement();
	            break;
	        case Cobol85Parser.CANCEL:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3593;
	            this.cancelStatement();
	            break;
	        case Cobol85Parser.CLOSE:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3594;
	            this.closeStatement();
	            break;
	        case Cobol85Parser.COMPUTE:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3595;
	            this.computeStatement();
	            break;
	        case Cobol85Parser.CONTINUE:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3596;
	            this.continueStatement();
	            break;
	        case Cobol85Parser.DELETE:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3597;
	            this.deleteStatement();
	            break;
	        case Cobol85Parser.DISABLE:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3598;
	            this.disableStatement();
	            break;
	        case Cobol85Parser.DISPLAY:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 3599;
	            this.displayStatement();
	            break;
	        case Cobol85Parser.DIVIDE:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 3600;
	            this.divideStatement();
	            break;
	        case Cobol85Parser.ENABLE:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 3601;
	            this.enableStatement();
	            break;
	        case Cobol85Parser.ENTRY:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 3602;
	            this.entryStatement();
	            break;
	        case Cobol85Parser.EVALUATE:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 3603;
	            this.evaluateStatement();
	            break;
	        case Cobol85Parser.EXHIBIT:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 3604;
	            this.exhibitStatement();
	            break;
	        case Cobol85Parser.EXECCICSLINE:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 3605;
	            this.execCicsStatement();
	            break;
	        case Cobol85Parser.EXECSQLLINE:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 3606;
	            this.execSqlStatement();
	            break;
	        case Cobol85Parser.EXECSQLIMSLINE:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 3607;
	            this.execSqlImsStatement();
	            break;
	        case Cobol85Parser.EXIT:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 3608;
	            this.exitStatement();
	            break;
	        case Cobol85Parser.GENERATE:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 3609;
	            this.generateStatement();
	            break;
	        case Cobol85Parser.GOBACK:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 3610;
	            this.gobackStatement();
	            break;
	        case Cobol85Parser.GO:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 3611;
	            this.goToStatement();
	            break;
	        case Cobol85Parser.IF:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 3612;
	            this.ifStatement();
	            break;
	        case Cobol85Parser.INITIALIZE:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 3613;
	            this.initializeStatement();
	            break;
	        case Cobol85Parser.INITIATE:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 3614;
	            this.initiateStatement();
	            break;
	        case Cobol85Parser.INSPECT:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 3615;
	            this.inspectStatement();
	            break;
	        case Cobol85Parser.MERGE:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 3616;
	            this.mergeStatement();
	            break;
	        case Cobol85Parser.MOVE:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 3617;
	            this.moveStatement();
	            break;
	        case Cobol85Parser.MULTIPLY:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 3618;
	            this.multiplyStatement();
	            break;
	        case Cobol85Parser.OPEN:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 3619;
	            this.openStatement();
	            break;
	        case Cobol85Parser.PERFORM:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 3620;
	            this.performStatement();
	            break;
	        case Cobol85Parser.PURGE:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 3621;
	            this.purgeStatement();
	            break;
	        case Cobol85Parser.READ:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 3622;
	            this.readStatement();
	            break;
	        case Cobol85Parser.RECEIVE:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 3623;
	            this.receiveStatement();
	            break;
	        case Cobol85Parser.RELEASE:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 3624;
	            this.releaseStatement();
	            break;
	        case Cobol85Parser.RETURN:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 3625;
	            this.returnStatement();
	            break;
	        case Cobol85Parser.REWRITE:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 3626;
	            this.rewriteStatement();
	            break;
	        case Cobol85Parser.SEARCH:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 3627;
	            this.searchStatement();
	            break;
	        case Cobol85Parser.SEND:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 3628;
	            this.sendStatement();
	            break;
	        case Cobol85Parser.SET:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 3629;
	            this.setStatement();
	            break;
	        case Cobol85Parser.SORT:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 3630;
	            this.sortStatement();
	            break;
	        case Cobol85Parser.START:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 3631;
	            this.startStatement();
	            break;
	        case Cobol85Parser.STOP:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 3632;
	            this.stopStatement();
	            break;
	        case Cobol85Parser.STRING:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 3633;
	            this.stringStatement();
	            break;
	        case Cobol85Parser.SUBTRACT:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 3634;
	            this.subtractStatement();
	            break;
	        case Cobol85Parser.TERMINATE:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 3635;
	            this.terminateStatement();
	            break;
	        case Cobol85Parser.UNSTRING:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 3636;
	            this.unstringStatement();
	            break;
	        case Cobol85Parser.WRITE:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 3637;
	            this.writeStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acceptStatement() {
	    let localctx = new AcceptStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 538, Cobol85Parser.RULE_acceptStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3640;
	        this.match(Cobol85Parser.ACCEPT);
	        this.state = 3641;
	        this.identifier();
	        this.state = 3646;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,465,this._ctx);
	        if(la_===1) {
	            this.state = 3642;
	            this.acceptFromDateStatement();

	        } else if(la_===2) {
	            this.state = 3643;
	            this.acceptFromEscapeKeyStatement();

	        } else if(la_===3) {
	            this.state = 3644;
	            this.acceptFromMnemonicStatement();

	        } else if(la_===4) {
	            this.state = 3645;
	            this.acceptMessageCountStatement();

	        }
	        this.state = 3649;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,466,this._ctx);
	        if(la_===1) {
	            this.state = 3648;
	            this.onExceptionClause();

	        }
	        this.state = 3652;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,467,this._ctx);
	        if(la_===1) {
	            this.state = 3651;
	            this.notOnExceptionClause();

	        }
	        this.state = 3655;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,468,this._ctx);
	        if(la_===1) {
	            this.state = 3654;
	            this.match(Cobol85Parser.END_ACCEPT);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acceptFromDateStatement() {
	    let localctx = new AcceptFromDateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 540, Cobol85Parser.RULE_acceptFromDateStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3657;
	        this.match(Cobol85Parser.FROM);
	        this.state = 3677;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.DATE:
	            this.state = 3658;
	            this.match(Cobol85Parser.DATE);
	            this.state = 3660;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.YYYYMMDD) {
	                this.state = 3659;
	                this.match(Cobol85Parser.YYYYMMDD);
	            }

	            break;
	        case Cobol85Parser.DAY:
	            this.state = 3662;
	            this.match(Cobol85Parser.DAY);
	            this.state = 3664;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.YYYYDDD) {
	                this.state = 3663;
	                this.match(Cobol85Parser.YYYYDDD);
	            }

	            break;
	        case Cobol85Parser.DAY_OF_WEEK:
	            this.state = 3666;
	            this.match(Cobol85Parser.DAY_OF_WEEK);
	            break;
	        case Cobol85Parser.TIME:
	            this.state = 3667;
	            this.match(Cobol85Parser.TIME);
	            break;
	        case Cobol85Parser.TIMER:
	            this.state = 3668;
	            this.match(Cobol85Parser.TIMER);
	            break;
	        case Cobol85Parser.TODAYS_DATE:
	            this.state = 3669;
	            this.match(Cobol85Parser.TODAYS_DATE);
	            this.state = 3671;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.MMDDYYYY) {
	                this.state = 3670;
	                this.match(Cobol85Parser.MMDDYYYY);
	            }

	            break;
	        case Cobol85Parser.TODAYS_NAME:
	            this.state = 3673;
	            this.match(Cobol85Parser.TODAYS_NAME);
	            break;
	        case Cobol85Parser.YEAR:
	            this.state = 3674;
	            this.match(Cobol85Parser.YEAR);
	            break;
	        case Cobol85Parser.YYYYMMDD:
	            this.state = 3675;
	            this.match(Cobol85Parser.YYYYMMDD);
	            break;
	        case Cobol85Parser.YYYYDDD:
	            this.state = 3676;
	            this.match(Cobol85Parser.YYYYDDD);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acceptFromMnemonicStatement() {
	    let localctx = new AcceptFromMnemonicStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 542, Cobol85Parser.RULE_acceptFromMnemonicStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3679;
	        this.match(Cobol85Parser.FROM);
	        this.state = 3680;
	        this.mnemonicName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acceptFromEscapeKeyStatement() {
	    let localctx = new AcceptFromEscapeKeyStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 544, Cobol85Parser.RULE_acceptFromEscapeKeyStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3682;
	        this.match(Cobol85Parser.FROM);
	        this.state = 3683;
	        this.match(Cobol85Parser.ESCAPE);
	        this.state = 3684;
	        this.match(Cobol85Parser.KEY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	acceptMessageCountStatement() {
	    let localctx = new AcceptMessageCountStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 546, Cobol85Parser.RULE_acceptMessageCountStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3687;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.MESSAGE) {
	            this.state = 3686;
	            this.match(Cobol85Parser.MESSAGE);
	        }

	        this.state = 3689;
	        this.match(Cobol85Parser.COUNT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addStatement() {
	    let localctx = new AddStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 548, Cobol85Parser.RULE_addStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3691;
	        this.match(Cobol85Parser.ADD);
	        this.state = 3695;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,474,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3692;
	            this.addToStatement();
	            break;

	        case 2:
	            this.state = 3693;
	            this.addToGivingStatement();
	            break;

	        case 3:
	            this.state = 3694;
	            this.addCorrespondingStatement();
	            break;

	        }
	        this.state = 3698;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,475,this._ctx);
	        if(la_===1) {
	            this.state = 3697;
	            this.onSizeErrorPhrase();

	        }
	        this.state = 3701;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,476,this._ctx);
	        if(la_===1) {
	            this.state = 3700;
	            this.notOnSizeErrorPhrase();

	        }
	        this.state = 3704;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,477,this._ctx);
	        if(la_===1) {
	            this.state = 3703;
	            this.match(Cobol85Parser.END_ADD);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addToStatement() {
	    let localctx = new AddToStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 550, Cobol85Parser.RULE_addToStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3707; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3706;
	            this.addFrom();
	            this.state = 3709; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL_ - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1f) == 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
	        this.state = 3711;
	        this.match(Cobol85Parser.TO);
	        this.state = 3713; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3712;
	            this.addTo();
	            this.state = 3715; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addToGivingStatement() {
	    let localctx = new AddToGivingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 552, Cobol85Parser.RULE_addToGivingStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3718; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3717;
	            this.addFrom();
	            this.state = 3720; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL_ - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1f) == 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
	        this.state = 3728;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.TO) {
	            this.state = 3722;
	            this.match(Cobol85Parser.TO);
	            this.state = 3724; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 3723;
	                this.addToGiving();
	                this.state = 3726; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL_ - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1f) == 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
	        }

	        this.state = 3730;
	        this.match(Cobol85Parser.GIVING);
	        this.state = 3732; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3731;
	            this.addGiving();
	            this.state = 3734; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addCorrespondingStatement() {
	    let localctx = new AddCorrespondingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 554, Cobol85Parser.RULE_addCorrespondingStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3736;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.CORR || _la===Cobol85Parser.CORRESPONDING)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3737;
	        this.identifier();
	        this.state = 3738;
	        this.match(Cobol85Parser.TO);
	        this.state = 3739;
	        this.addTo();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addFrom() {
	    let localctx = new AddFromContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 556, Cobol85Parser.RULE_addFrom);
	    try {
	        this.state = 3743;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,484,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3741;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3742;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addTo() {
	    let localctx = new AddToContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 558, Cobol85Parser.RULE_addTo);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3745;
	        this.identifier();
	        this.state = 3747;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ROUNDED) {
	            this.state = 3746;
	            this.match(Cobol85Parser.ROUNDED);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addToGiving() {
	    let localctx = new AddToGivingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 560, Cobol85Parser.RULE_addToGiving);
	    try {
	        this.state = 3751;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,486,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3749;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3750;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addGiving() {
	    let localctx = new AddGivingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 562, Cobol85Parser.RULE_addGiving);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3753;
	        this.identifier();
	        this.state = 3755;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ROUNDED) {
	            this.state = 3754;
	            this.match(Cobol85Parser.ROUNDED);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alteredGoTo() {
	    let localctx = new AlteredGoToContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 564, Cobol85Parser.RULE_alteredGoTo);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3757;
	        this.match(Cobol85Parser.GO);
	        this.state = 3759;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.TO) {
	            this.state = 3758;
	            this.match(Cobol85Parser.TO);
	        }

	        this.state = 3761;
	        this.match(Cobol85Parser.DOT_FS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatement() {
	    let localctx = new AlterStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 566, Cobol85Parser.RULE_alterStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3763;
	        this.match(Cobol85Parser.ALTER);
	        this.state = 3765; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3764;
	            this.alterProceedTo();
	            this.state = 3767; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterProceedTo() {
	    let localctx = new AlterProceedToContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 568, Cobol85Parser.RULE_alterProceedTo);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3769;
	        this.procedureName();
	        this.state = 3770;
	        this.match(Cobol85Parser.TO);
	        this.state = 3773;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.PROCEED) {
	            this.state = 3771;
	            this.match(Cobol85Parser.PROCEED);
	            this.state = 3772;
	            this.match(Cobol85Parser.TO);
	        }

	        this.state = 3775;
	        this.procedureName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callStatement() {
	    let localctx = new CallStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 570, Cobol85Parser.RULE_callStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3777;
	        this.match(Cobol85Parser.CALL);
	        this.state = 3780;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,491,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3778;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 3779;
	            this.literal();
	            break;

	        }
	        this.state = 3783;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.USING) {
	            this.state = 3782;
	            this.callUsingPhrase();
	        }

	        this.state = 3786;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.GIVING || _la===Cobol85Parser.RETURNING) {
	            this.state = 3785;
	            this.callGivingPhrase();
	        }

	        this.state = 3789;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,494,this._ctx);
	        if(la_===1) {
	            this.state = 3788;
	            this.onOverflowPhrase();

	        }
	        this.state = 3792;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,495,this._ctx);
	        if(la_===1) {
	            this.state = 3791;
	            this.onExceptionClause();

	        }
	        this.state = 3795;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,496,this._ctx);
	        if(la_===1) {
	            this.state = 3794;
	            this.notOnExceptionClause();

	        }
	        this.state = 3798;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,497,this._ctx);
	        if(la_===1) {
	            this.state = 3797;
	            this.match(Cobol85Parser.END_CALL);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callUsingPhrase() {
	    let localctx = new CallUsingPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 572, Cobol85Parser.RULE_callUsingPhrase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3800;
	        this.match(Cobol85Parser.USING);
	        this.state = 3802; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 3801;
	        		this.callUsingParameter();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 3804; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,498, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callUsingParameter() {
	    let localctx = new CallUsingParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 574, Cobol85Parser.RULE_callUsingParameter);
	    try {
	        this.state = 3809;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,499,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3806;
	            this.callByReferencePhrase();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3807;
	            this.callByValuePhrase();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3808;
	            this.callByContentPhrase();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callByReferencePhrase() {
	    let localctx = new CallByReferencePhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 576, Cobol85Parser.RULE_callByReferencePhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3815;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.BY || _la===Cobol85Parser.REFERENCE) {
	            this.state = 3812;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.BY) {
	                this.state = 3811;
	                this.match(Cobol85Parser.BY);
	            }

	            this.state = 3814;
	            this.match(Cobol85Parser.REFERENCE);
	        }

	        this.state = 3818; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 3817;
	        		this.callByReference();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 3820; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,502, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callByReference() {
	    let localctx = new CallByReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 578, Cobol85Parser.RULE_callByReference);
	    try {
	        this.state = 3834;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.ABORT:
	        case Cobol85Parser.ADDRESS:
	        case Cobol85Parser.ALL:
	        case Cobol85Parser.AS:
	        case Cobol85Parser.ASCII:
	        case Cobol85Parser.ASSOCIATED_DATA:
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	        case Cobol85Parser.ATTRIBUTE:
	        case Cobol85Parser.AUTO:
	        case Cobol85Parser.AUTO_SKIP:
	        case Cobol85Parser.BACKGROUND_COLOR:
	        case Cobol85Parser.BACKGROUND_COLOUR:
	        case Cobol85Parser.BEEP:
	        case Cobol85Parser.BELL:
	        case Cobol85Parser.BINARY:
	        case Cobol85Parser.BIT:
	        case Cobol85Parser.BLINK:
	        case Cobol85Parser.BOUNDS:
	        case Cobol85Parser.CAPABLE:
	        case Cobol85Parser.CCSVERSION:
	        case Cobol85Parser.CHANGED:
	        case Cobol85Parser.CHANNEL:
	        case Cobol85Parser.CLOSE_DISPOSITION:
	        case Cobol85Parser.COBOL:
	        case Cobol85Parser.COMMITMENT:
	        case Cobol85Parser.CONTROL_POINT:
	        case Cobol85Parser.CONVENTION:
	        case Cobol85Parser.CRUNCH:
	        case Cobol85Parser.CURSOR:
	        case Cobol85Parser.DATE:
	        case Cobol85Parser.DAY:
	        case Cobol85Parser.DAY_OF_WEEK:
	        case Cobol85Parser.DEBUG_CONTENTS:
	        case Cobol85Parser.DEBUG_ITEM:
	        case Cobol85Parser.DEBUG_LINE:
	        case Cobol85Parser.DEBUG_NAME:
	        case Cobol85Parser.DEBUG_SUB_1:
	        case Cobol85Parser.DEBUG_SUB_2:
	        case Cobol85Parser.DEBUG_SUB_3:
	        case Cobol85Parser.DEFAULT:
	        case Cobol85Parser.DEFAULT_DISPLAY:
	        case Cobol85Parser.DEFINITION:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.DISK:
	        case Cobol85Parser.DONTCARE:
	        case Cobol85Parser.DOUBLE:
	        case Cobol85Parser.EBCDIC:
	        case Cobol85Parser.EMPTY_CHECK:
	        case Cobol85Parser.ENTER:
	        case Cobol85Parser.ENTRY_PROCEDURE:
	        case Cobol85Parser.ERASE:
	        case Cobol85Parser.EOL:
	        case Cobol85Parser.EOS:
	        case Cobol85Parser.ESCAPE:
	        case Cobol85Parser.EVENT:
	        case Cobol85Parser.EXCLUSIVE:
	        case Cobol85Parser.EXPORT:
	        case Cobol85Parser.EXTENDED:
	        case Cobol85Parser.FALSE:
	        case Cobol85Parser.FOREGROUND_COLOR:
	        case Cobol85Parser.FOREGROUND_COLOUR:
	        case Cobol85Parser.FULL:
	        case Cobol85Parser.FUNCTION:
	        case Cobol85Parser.FUNCTIONNAME:
	        case Cobol85Parser.FUNCTION_POINTER:
	        case Cobol85Parser.GRID:
	        case Cobol85Parser.HIGHLIGHT:
	        case Cobol85Parser.HIGH_VALUE:
	        case Cobol85Parser.HIGH_VALUES:
	        case Cobol85Parser.IMPLICIT:
	        case Cobol85Parser.IMPORT:
	        case Cobol85Parser.INTEGER:
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.KEYBOARD:
	        case Cobol85Parser.LANGUAGE:
	        case Cobol85Parser.LB:
	        case Cobol85Parser.LD:
	        case Cobol85Parser.LEFTLINE:
	        case Cobol85Parser.LENGTH:
	        case Cobol85Parser.LENGTH_CHECK:
	        case Cobol85Parser.LIBACCESS:
	        case Cobol85Parser.LIBPARAMETER:
	        case Cobol85Parser.LIBRARY:
	        case Cobol85Parser.LINAGE_COUNTER:
	        case Cobol85Parser.LINE_COUNTER:
	        case Cobol85Parser.LIST:
	        case Cobol85Parser.LOCAL:
	        case Cobol85Parser.LONG_DATE:
	        case Cobol85Parser.LONG_TIME:
	        case Cobol85Parser.LOWER:
	        case Cobol85Parser.LOWLIGHT:
	        case Cobol85Parser.LOW_VALUE:
	        case Cobol85Parser.LOW_VALUES:
	        case Cobol85Parser.MMDDYYYY:
	        case Cobol85Parser.NAMED:
	        case Cobol85Parser.NATIONAL:
	        case Cobol85Parser.NATIONAL_EDITED:
	        case Cobol85Parser.NETWORK:
	        case Cobol85Parser.NO_ECHO:
	        case Cobol85Parser.NULL_:
	        case Cobol85Parser.NULLS:
	        case Cobol85Parser.NUMERIC_DATE:
	        case Cobol85Parser.NUMERIC_TIME:
	        case Cobol85Parser.ODT:
	        case Cobol85Parser.ORDERLY:
	        case Cobol85Parser.OVERLINE:
	        case Cobol85Parser.OWN:
	        case Cobol85Parser.PAGE_COUNTER:
	        case Cobol85Parser.PASSWORD:
	        case Cobol85Parser.PORT:
	        case Cobol85Parser.PRINTER:
	        case Cobol85Parser.PRIVATE:
	        case Cobol85Parser.PROCESS:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.PROMPT:
	        case Cobol85Parser.QUOTE:
	        case Cobol85Parser.QUOTES:
	        case Cobol85Parser.READER:
	        case Cobol85Parser.REMOTE:
	        case Cobol85Parser.REAL:
	        case Cobol85Parser.RECEIVED:
	        case Cobol85Parser.RECURSIVE:
	        case Cobol85Parser.REF:
	        case Cobol85Parser.REMOVE:
	        case Cobol85Parser.REQUIRED:
	        case Cobol85Parser.REVERSE_VIDEO:
	        case Cobol85Parser.RETURN_CODE:
	        case Cobol85Parser.SAVE:
	        case Cobol85Parser.SECURE:
	        case Cobol85Parser.SHARED:
	        case Cobol85Parser.SHAREDBYALL:
	        case Cobol85Parser.SHAREDBYRUNUNIT:
	        case Cobol85Parser.SHARING:
	        case Cobol85Parser.SHIFT_IN:
	        case Cobol85Parser.SHIFT_OUT:
	        case Cobol85Parser.SHORT_DATE:
	        case Cobol85Parser.SORT_CONTROL:
	        case Cobol85Parser.SORT_CORE_SIZE:
	        case Cobol85Parser.SORT_FILE_SIZE:
	        case Cobol85Parser.SORT_MESSAGE:
	        case Cobol85Parser.SORT_MODE_SIZE:
	        case Cobol85Parser.SORT_RETURN:
	        case Cobol85Parser.SPACE:
	        case Cobol85Parser.SPACES:
	        case Cobol85Parser.STRING:
	        case Cobol85Parser.SYMBOL:
	        case Cobol85Parser.TALLY:
	        case Cobol85Parser.TASK:
	        case Cobol85Parser.THREAD:
	        case Cobol85Parser.THREAD_LOCAL:
	        case Cobol85Parser.TIME:
	        case Cobol85Parser.TIMER:
	        case Cobol85Parser.TODAYS_DATE:
	        case Cobol85Parser.TODAYS_NAME:
	        case Cobol85Parser.TRUE:
	        case Cobol85Parser.TRUNCATED:
	        case Cobol85Parser.TYPEDEF:
	        case Cobol85Parser.UNDERLINE:
	        case Cobol85Parser.VIRTUAL:
	        case Cobol85Parser.WAIT:
	        case Cobol85Parser.WHEN_COMPILED:
	        case Cobol85Parser.YEAR:
	        case Cobol85Parser.YYYYMMDD:
	        case Cobol85Parser.YYYYDDD:
	        case Cobol85Parser.ZERO:
	        case Cobol85Parser.ZERO_FILL:
	        case Cobol85Parser.ZEROS:
	        case Cobol85Parser.ZEROES:
	        case Cobol85Parser.NONNUMERICLITERAL:
	        case Cobol85Parser.LEVEL_NUMBER_66:
	        case Cobol85Parser.LEVEL_NUMBER_77:
	        case Cobol85Parser.LEVEL_NUMBER_88:
	        case Cobol85Parser.INTEGERLITERAL:
	        case Cobol85Parser.NUMERICLITERAL:
	        case Cobol85Parser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3831;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,504,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3826;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,503,this._ctx);
	                if(la_===1) {
	                    this.state = 3822;
	                    this.match(Cobol85Parser.ADDRESS);
	                    this.state = 3823;
	                    this.match(Cobol85Parser.OF);

	                } else if(la_===2) {
	                    this.state = 3824;
	                    this.match(Cobol85Parser.INTEGER);

	                } else if(la_===3) {
	                    this.state = 3825;
	                    this.match(Cobol85Parser.STRING);

	                }
	                this.state = 3828;
	                this.identifier();
	                break;

	            case 2:
	                this.state = 3829;
	                this.literal();
	                break;

	            case 3:
	                this.state = 3830;
	                this.fileName();
	                break;

	            }
	            break;
	        case Cobol85Parser.OMITTED:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3833;
	            this.match(Cobol85Parser.OMITTED);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callByValuePhrase() {
	    let localctx = new CallByValuePhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 580, Cobol85Parser.RULE_callByValuePhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3837;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.BY) {
	            this.state = 3836;
	            this.match(Cobol85Parser.BY);
	        }

	        this.state = 3839;
	        this.match(Cobol85Parser.VALUE);
	        this.state = 3841; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 3840;
	        		this.callByValue();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 3843; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,507, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callByValue() {
	    let localctx = new CallByValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 582, Cobol85Parser.RULE_callByValue);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3851;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,509,this._ctx);
	        if(la_===1) {
	            this.state = 3845;
	            this.match(Cobol85Parser.ADDRESS);
	            this.state = 3846;
	            this.match(Cobol85Parser.OF);

	        } else if(la_===2) {
	            this.state = 3847;
	            this.match(Cobol85Parser.LENGTH);
	            this.state = 3849;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.OF) {
	                this.state = 3848;
	                this.match(Cobol85Parser.OF);
	            }


	        }
	        this.state = 3855;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,510,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3853;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 3854;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callByContentPhrase() {
	    let localctx = new CallByContentPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 584, Cobol85Parser.RULE_callByContentPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3858;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.BY) {
	            this.state = 3857;
	            this.match(Cobol85Parser.BY);
	        }

	        this.state = 3860;
	        this.match(Cobol85Parser.CONTENT);
	        this.state = 3862; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 3861;
	        		this.callByContent();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 3864; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,512, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callByContent() {
	    let localctx = new CallByContentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 586, Cobol85Parser.RULE_callByContent);
	    var _la = 0; // Token type
	    try {
	        this.state = 3877;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,515,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3872;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,514,this._ctx);
	            if(la_===1) {
	                this.state = 3866;
	                this.match(Cobol85Parser.ADDRESS);
	                this.state = 3867;
	                this.match(Cobol85Parser.OF);

	            } else if(la_===2) {
	                this.state = 3868;
	                this.match(Cobol85Parser.LENGTH);
	                this.state = 3870;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Cobol85Parser.OF) {
	                    this.state = 3869;
	                    this.match(Cobol85Parser.OF);
	                }


	            }
	            this.state = 3874;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3875;
	            this.literal();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3876;
	            this.match(Cobol85Parser.OMITTED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callGivingPhrase() {
	    let localctx = new CallGivingPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 588, Cobol85Parser.RULE_callGivingPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3879;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.GIVING || _la===Cobol85Parser.RETURNING)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3880;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cancelStatement() {
	    let localctx = new CancelStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 590, Cobol85Parser.RULE_cancelStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3882;
	        this.match(Cobol85Parser.CANCEL);
	        this.state = 3884; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3883;
	            this.cancelCall();
	            this.state = 3886; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL_ - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1f) == 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cancelCall() {
	    let localctx = new CancelCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 592, Cobol85Parser.RULE_cancelCall);
	    var _la = 0; // Token type
	    try {
	        this.state = 3893;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,517,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3888;
	            this.libraryName();
	            this.state = 3889;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.BYFUNCTION || _la===Cobol85Parser.BYTITLE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3891;
	            this.identifier();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3892;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closeStatement() {
	    let localctx = new CloseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 594, Cobol85Parser.RULE_closeStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3895;
	        this.match(Cobol85Parser.CLOSE);
	        this.state = 3897; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3896;
	            this.closeFile();
	            this.state = 3899; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la===Cobol85Parser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closeFile() {
	    let localctx = new CloseFileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 596, Cobol85Parser.RULE_closeFile);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3901;
	        this.fileName();
	        this.state = 3905;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,519,this._ctx);
	        if(la_===1) {
	            this.state = 3902;
	            this.closeReelUnitStatement();

	        } else if(la_===2) {
	            this.state = 3903;
	            this.closeRelativeStatement();

	        } else if(la_===3) {
	            this.state = 3904;
	            this.closePortFileIOStatement();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closeReelUnitStatement() {
	    let localctx = new CloseReelUnitStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 598, Cobol85Parser.RULE_closeReelUnitStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3907;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.REEL || _la===Cobol85Parser.UNIT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3912;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FOR || _la===Cobol85Parser.REMOVAL) {
	            this.state = 3909;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.FOR) {
	                this.state = 3908;
	                this.match(Cobol85Parser.FOR);
	            }

	            this.state = 3911;
	            this.match(Cobol85Parser.REMOVAL);
	        }

	        this.state = 3922;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,524,this._ctx);
	        if(la_===1) {
	            this.state = 3915;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.WITH) {
	                this.state = 3914;
	                this.match(Cobol85Parser.WITH);
	            }

	            this.state = 3920;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case Cobol85Parser.NO:
	                this.state = 3917;
	                this.match(Cobol85Parser.NO);
	                this.state = 3918;
	                this.match(Cobol85Parser.REWIND);
	                break;
	            case Cobol85Parser.LOCK:
	                this.state = 3919;
	                this.match(Cobol85Parser.LOCK);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closeRelativeStatement() {
	    let localctx = new CloseRelativeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 600, Cobol85Parser.RULE_closeRelativeStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3925;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.WITH) {
	            this.state = 3924;
	            this.match(Cobol85Parser.WITH);
	        }

	        this.state = 3930;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.NO:
	            this.state = 3927;
	            this.match(Cobol85Parser.NO);
	            this.state = 3928;
	            this.match(Cobol85Parser.REWIND);
	            break;
	        case Cobol85Parser.LOCK:
	            this.state = 3929;
	            this.match(Cobol85Parser.LOCK);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closePortFileIOStatement() {
	    let localctx = new ClosePortFileIOStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 602, Cobol85Parser.RULE_closePortFileIOStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3939;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,528,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3933;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.WITH) {
	                this.state = 3932;
	                this.match(Cobol85Parser.WITH);
	            }

	            this.state = 3935;
	            this.match(Cobol85Parser.NO);
	            this.state = 3936;
	            this.match(Cobol85Parser.WAIT);
	            break;

	        case 2:
	            this.state = 3937;
	            this.match(Cobol85Parser.WITH);
	            this.state = 3938;
	            this.match(Cobol85Parser.WAIT);
	            break;

	        }
	        this.state = 3947;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.USING) {
	            this.state = 3941;
	            this.match(Cobol85Parser.USING);
	            this.state = 3943; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 3942;
	            		this.closePortFileIOUsing();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 3945; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,529, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closePortFileIOUsing() {
	    let localctx = new ClosePortFileIOUsingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 604, Cobol85Parser.RULE_closePortFileIOUsing);
	    try {
	        this.state = 3952;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.CLOSE_DISPOSITION:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3949;
	            this.closePortFileIOUsingCloseDisposition();
	            break;
	        case Cobol85Parser.ASSOCIATED_DATA:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3950;
	            this.closePortFileIOUsingAssociatedData();
	            break;
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3951;
	            this.closePortFileIOUsingAssociatedDataLength();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closePortFileIOUsingCloseDisposition() {
	    let localctx = new ClosePortFileIOUsingCloseDispositionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 606, Cobol85Parser.RULE_closePortFileIOUsingCloseDisposition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3954;
	        this.match(Cobol85Parser.CLOSE_DISPOSITION);
	        this.state = 3956;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.OF) {
	            this.state = 3955;
	            this.match(Cobol85Parser.OF);
	        }

	        this.state = 3958;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.ABORT || _la===Cobol85Parser.ORDERLY)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closePortFileIOUsingAssociatedData() {
	    let localctx = new ClosePortFileIOUsingAssociatedDataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 608, Cobol85Parser.RULE_closePortFileIOUsingAssociatedData);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3960;
	        this.match(Cobol85Parser.ASSOCIATED_DATA);
	        this.state = 3963;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,533,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3961;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 3962;
	            this.integerLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closePortFileIOUsingAssociatedDataLength() {
	    let localctx = new ClosePortFileIOUsingAssociatedDataLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 610, Cobol85Parser.RULE_closePortFileIOUsingAssociatedDataLength);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3965;
	        this.match(Cobol85Parser.ASSOCIATED_DATA_LENGTH);
	        this.state = 3967;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.OF) {
	            this.state = 3966;
	            this.match(Cobol85Parser.OF);
	        }

	        this.state = 3971;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,535,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3969;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 3970;
	            this.integerLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	computeStatement() {
	    let localctx = new ComputeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 612, Cobol85Parser.RULE_computeStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3973;
	        this.match(Cobol85Parser.COMPUTE);
	        this.state = 3975; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3974;
	            this.computeStore();
	            this.state = 3977; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	        this.state = 3979;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.EQUAL || _la===Cobol85Parser.EQUALCHAR)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3980;
	        this.arithmeticExpression();
	        this.state = 3982;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,537,this._ctx);
	        if(la_===1) {
	            this.state = 3981;
	            this.onSizeErrorPhrase();

	        }
	        this.state = 3985;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,538,this._ctx);
	        if(la_===1) {
	            this.state = 3984;
	            this.notOnSizeErrorPhrase();

	        }
	        this.state = 3988;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,539,this._ctx);
	        if(la_===1) {
	            this.state = 3987;
	            this.match(Cobol85Parser.END_COMPUTE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	computeStore() {
	    let localctx = new ComputeStoreContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 614, Cobol85Parser.RULE_computeStore);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3990;
	        this.identifier();
	        this.state = 3992;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ROUNDED) {
	            this.state = 3991;
	            this.match(Cobol85Parser.ROUNDED);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStatement() {
	    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 616, Cobol85Parser.RULE_continueStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3994;
	        this.match(Cobol85Parser.CONTINUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteStatement() {
	    let localctx = new DeleteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 618, Cobol85Parser.RULE_deleteStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3996;
	        this.match(Cobol85Parser.DELETE);
	        this.state = 3997;
	        this.fileName();
	        this.state = 3999;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.RECORD) {
	            this.state = 3998;
	            this.match(Cobol85Parser.RECORD);
	        }

	        this.state = 4002;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,542,this._ctx);
	        if(la_===1) {
	            this.state = 4001;
	            this.invalidKeyPhrase();

	        }
	        this.state = 4005;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,543,this._ctx);
	        if(la_===1) {
	            this.state = 4004;
	            this.notInvalidKeyPhrase();

	        }
	        this.state = 4008;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,544,this._ctx);
	        if(la_===1) {
	            this.state = 4007;
	            this.match(Cobol85Parser.END_DELETE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	disableStatement() {
	    let localctx = new DisableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 620, Cobol85Parser.RULE_disableStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4010;
	        this.match(Cobol85Parser.DISABLE);
	        this.state = 4018;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.INPUT:
	            this.state = 4011;
	            this.match(Cobol85Parser.INPUT);
	            this.state = 4013;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.TERMINAL) {
	                this.state = 4012;
	                this.match(Cobol85Parser.TERMINAL);
	            }

	            break;
	        case Cobol85Parser.I_O:
	            this.state = 4015;
	            this.match(Cobol85Parser.I_O);
	            this.state = 4016;
	            this.match(Cobol85Parser.TERMINAL);
	            break;
	        case Cobol85Parser.OUTPUT:
	            this.state = 4017;
	            this.match(Cobol85Parser.OUTPUT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 4020;
	        this.cdName();
	        this.state = 4022;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.WITH) {
	            this.state = 4021;
	            this.match(Cobol85Parser.WITH);
	        }

	        this.state = 4024;
	        this.match(Cobol85Parser.KEY);
	        this.state = 4027;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,548,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4025;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 4026;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	displayStatement() {
	    let localctx = new DisplayStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 622, Cobol85Parser.RULE_displayStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4029;
	        this.match(Cobol85Parser.DISPLAY);
	        this.state = 4031; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4030;
	            this.displayOperand();
	            this.state = 4033; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL_ - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1f) == 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
	        this.state = 4036;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,550,this._ctx);
	        if(la_===1) {
	            this.state = 4035;
	            this.displayAt();

	        }
	        this.state = 4039;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.UPON) {
	            this.state = 4038;
	            this.displayUpon();
	        }

	        this.state = 4042;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,552,this._ctx);
	        if(la_===1) {
	            this.state = 4041;
	            this.displayWith();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	displayOperand() {
	    let localctx = new DisplayOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 624, Cobol85Parser.RULE_displayOperand);
	    try {
	        this.state = 4046;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,553,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4044;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4045;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	displayAt() {
	    let localctx = new DisplayAtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 626, Cobol85Parser.RULE_displayAt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4048;
	        this.match(Cobol85Parser.AT);
	        this.state = 4051;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,554,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4049;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 4050;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	displayUpon() {
	    let localctx = new DisplayUponContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 628, Cobol85Parser.RULE_displayUpon);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4053;
	        this.match(Cobol85Parser.UPON);
	        this.state = 4056;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,555,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4054;
	            this.mnemonicName();
	            break;

	        case 2:
	            this.state = 4055;
	            this.environmentName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	displayWith() {
	    let localctx = new DisplayWithContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 630, Cobol85Parser.RULE_displayWith);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4059;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.WITH) {
	            this.state = 4058;
	            this.match(Cobol85Parser.WITH);
	        }

	        this.state = 4061;
	        this.match(Cobol85Parser.NO);
	        this.state = 4062;
	        this.match(Cobol85Parser.ADVANCING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	divideStatement() {
	    let localctx = new DivideStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 632, Cobol85Parser.RULE_divideStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4064;
	        this.match(Cobol85Parser.DIVIDE);
	        this.state = 4067;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,557,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4065;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 4066;
	            this.literal();
	            break;

	        }
	        this.state = 4072;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,558,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4069;
	            this.divideIntoStatement();
	            break;

	        case 2:
	            this.state = 4070;
	            this.divideIntoGivingStatement();
	            break;

	        case 3:
	            this.state = 4071;
	            this.divideByGivingStatement();
	            break;

	        }
	        this.state = 4075;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.REMAINDER) {
	            this.state = 4074;
	            this.divideRemainder();
	        }

	        this.state = 4078;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,560,this._ctx);
	        if(la_===1) {
	            this.state = 4077;
	            this.onSizeErrorPhrase();

	        }
	        this.state = 4081;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,561,this._ctx);
	        if(la_===1) {
	            this.state = 4080;
	            this.notOnSizeErrorPhrase();

	        }
	        this.state = 4084;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,562,this._ctx);
	        if(la_===1) {
	            this.state = 4083;
	            this.match(Cobol85Parser.END_DIVIDE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	divideIntoStatement() {
	    let localctx = new DivideIntoStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 634, Cobol85Parser.RULE_divideIntoStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4086;
	        this.match(Cobol85Parser.INTO);
	        this.state = 4088; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4087;
	            this.divideInto();
	            this.state = 4090; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	divideIntoGivingStatement() {
	    let localctx = new DivideIntoGivingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 636, Cobol85Parser.RULE_divideIntoGivingStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4092;
	        this.match(Cobol85Parser.INTO);
	        this.state = 4095;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,564,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4093;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 4094;
	            this.literal();
	            break;

	        }
	        this.state = 4098;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.GIVING) {
	            this.state = 4097;
	            this.divideGivingPhrase();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	divideByGivingStatement() {
	    let localctx = new DivideByGivingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 638, Cobol85Parser.RULE_divideByGivingStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4100;
	        this.match(Cobol85Parser.BY);
	        this.state = 4103;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,566,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4101;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 4102;
	            this.literal();
	            break;

	        }
	        this.state = 4106;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.GIVING) {
	            this.state = 4105;
	            this.divideGivingPhrase();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	divideGivingPhrase() {
	    let localctx = new DivideGivingPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 640, Cobol85Parser.RULE_divideGivingPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4108;
	        this.match(Cobol85Parser.GIVING);
	        this.state = 4110; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4109;
	            this.divideGiving();
	            this.state = 4112; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	divideInto() {
	    let localctx = new DivideIntoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 642, Cobol85Parser.RULE_divideInto);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4114;
	        this.identifier();
	        this.state = 4116;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ROUNDED) {
	            this.state = 4115;
	            this.match(Cobol85Parser.ROUNDED);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	divideGiving() {
	    let localctx = new DivideGivingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 644, Cobol85Parser.RULE_divideGiving);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4118;
	        this.identifier();
	        this.state = 4120;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ROUNDED) {
	            this.state = 4119;
	            this.match(Cobol85Parser.ROUNDED);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	divideRemainder() {
	    let localctx = new DivideRemainderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 646, Cobol85Parser.RULE_divideRemainder);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4122;
	        this.match(Cobol85Parser.REMAINDER);
	        this.state = 4123;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enableStatement() {
	    let localctx = new EnableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 648, Cobol85Parser.RULE_enableStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4125;
	        this.match(Cobol85Parser.ENABLE);
	        this.state = 4133;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.INPUT:
	            this.state = 4126;
	            this.match(Cobol85Parser.INPUT);
	            this.state = 4128;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.TERMINAL) {
	                this.state = 4127;
	                this.match(Cobol85Parser.TERMINAL);
	            }

	            break;
	        case Cobol85Parser.I_O:
	            this.state = 4130;
	            this.match(Cobol85Parser.I_O);
	            this.state = 4131;
	            this.match(Cobol85Parser.TERMINAL);
	            break;
	        case Cobol85Parser.OUTPUT:
	            this.state = 4132;
	            this.match(Cobol85Parser.OUTPUT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 4135;
	        this.cdName();
	        this.state = 4137;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.WITH) {
	            this.state = 4136;
	            this.match(Cobol85Parser.WITH);
	        }

	        this.state = 4139;
	        this.match(Cobol85Parser.KEY);
	        this.state = 4142;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,574,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4140;
	            this.literal();
	            break;

	        case 2:
	            this.state = 4141;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entryStatement() {
	    let localctx = new EntryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 650, Cobol85Parser.RULE_entryStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4144;
	        this.match(Cobol85Parser.ENTRY);
	        this.state = 4145;
	        this.literal();
	        this.state = 4152;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.USING) {
	            this.state = 4146;
	            this.match(Cobol85Parser.USING);
	            this.state = 4148; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 4147;
	                this.identifier();
	                this.state = 4150; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	evaluateStatement() {
	    let localctx = new EvaluateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 652, Cobol85Parser.RULE_evaluateStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4154;
	        this.match(Cobol85Parser.EVALUATE);
	        this.state = 4155;
	        this.evaluateSelect();
	        this.state = 4159;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.ALSO) {
	            this.state = 4156;
	            this.evaluateAlsoSelect();
	            this.state = 4161;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4163; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4162;
	        		this.evaluateWhenPhrase();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 4165; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,578, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 4168;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,579,this._ctx);
	        if(la_===1) {
	            this.state = 4167;
	            this.evaluateWhenOther();

	        }
	        this.state = 4171;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,580,this._ctx);
	        if(la_===1) {
	            this.state = 4170;
	            this.match(Cobol85Parser.END_EVALUATE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	evaluateSelect() {
	    let localctx = new EvaluateSelectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 654, Cobol85Parser.RULE_evaluateSelect);
	    try {
	        this.state = 4177;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,581,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4173;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4174;
	            this.literal();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4175;
	            this.arithmeticExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4176;
	            this.condition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	evaluateAlsoSelect() {
	    let localctx = new EvaluateAlsoSelectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 656, Cobol85Parser.RULE_evaluateAlsoSelect);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4179;
	        this.match(Cobol85Parser.ALSO);
	        this.state = 4180;
	        this.evaluateSelect();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	evaluateWhenPhrase() {
	    let localctx = new EvaluateWhenPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 658, Cobol85Parser.RULE_evaluateWhenPhrase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4183; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4182;
	        		this.evaluateWhen();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 4185; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,582, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 4190;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,583,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4187;
	                this.statement(); 
	            }
	            this.state = 4192;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,583,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	evaluateWhen() {
	    let localctx = new EvaluateWhenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 660, Cobol85Parser.RULE_evaluateWhen);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4193;
	        this.match(Cobol85Parser.WHEN);
	        this.state = 4194;
	        this.evaluateCondition();
	        this.state = 4198;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.ALSO) {
	            this.state = 4195;
	            this.evaluateAlsoCondition();
	            this.state = 4200;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	evaluateCondition() {
	    let localctx = new EvaluateConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 662, Cobol85Parser.RULE_evaluateCondition);
	    var _la = 0; // Token type
	    try {
	        this.state = 4211;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,587,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4201;
	            this.match(Cobol85Parser.ANY);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4203;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.NOT) {
	                this.state = 4202;
	                this.match(Cobol85Parser.NOT);
	            }

	            this.state = 4205;
	            this.evaluateValue();
	            this.state = 4207;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.THROUGH || _la===Cobol85Parser.THRU) {
	                this.state = 4206;
	                this.evaluateThrough();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4209;
	            this.condition();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4210;
	            this.booleanLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	evaluateThrough() {
	    let localctx = new EvaluateThroughContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 664, Cobol85Parser.RULE_evaluateThrough);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4213;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.THROUGH || _la===Cobol85Parser.THRU)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4214;
	        this.evaluateValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	evaluateAlsoCondition() {
	    let localctx = new EvaluateAlsoConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 666, Cobol85Parser.RULE_evaluateAlsoCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4216;
	        this.match(Cobol85Parser.ALSO);
	        this.state = 4217;
	        this.evaluateCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	evaluateWhenOther() {
	    let localctx = new EvaluateWhenOtherContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 668, Cobol85Parser.RULE_evaluateWhenOther);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4219;
	        this.match(Cobol85Parser.WHEN);
	        this.state = 4220;
	        this.match(Cobol85Parser.OTHER);
	        this.state = 4224;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,588,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4221;
	                this.statement(); 
	            }
	            this.state = 4226;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,588,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	evaluateValue() {
	    let localctx = new EvaluateValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 670, Cobol85Parser.RULE_evaluateValue);
	    try {
	        this.state = 4230;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,589,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4227;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4228;
	            this.literal();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4229;
	            this.arithmeticExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	execCicsStatement() {
	    let localctx = new ExecCicsStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 672, Cobol85Parser.RULE_execCicsStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4233; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4232;
	        		this.match(Cobol85Parser.EXECCICSLINE);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 4235; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,590, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	execSqlStatement() {
	    let localctx = new ExecSqlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 674, Cobol85Parser.RULE_execSqlStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4238; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4237;
	        		this.match(Cobol85Parser.EXECSQLLINE);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 4240; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,591, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	execSqlImsStatement() {
	    let localctx = new ExecSqlImsStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 676, Cobol85Parser.RULE_execSqlImsStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4243; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4242;
	        		this.match(Cobol85Parser.EXECSQLIMSLINE);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 4245; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,592, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exhibitStatement() {
	    let localctx = new ExhibitStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 678, Cobol85Parser.RULE_exhibitStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4247;
	        this.match(Cobol85Parser.EXHIBIT);
	        this.state = 4249;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,593,this._ctx);
	        if(la_===1) {
	            this.state = 4248;
	            this.match(Cobol85Parser.NAMED);

	        }
	        this.state = 4252;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,594,this._ctx);
	        if(la_===1) {
	            this.state = 4251;
	            this.match(Cobol85Parser.CHANGED);

	        }
	        this.state = 4255; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4254;
	            this.exhibitOperand();
	            this.state = 4257; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL_ - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1f) == 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exhibitOperand() {
	    let localctx = new ExhibitOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 680, Cobol85Parser.RULE_exhibitOperand);
	    try {
	        this.state = 4261;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,596,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4259;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4260;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exitStatement() {
	    let localctx = new ExitStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 682, Cobol85Parser.RULE_exitStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4263;
	        this.match(Cobol85Parser.EXIT);
	        this.state = 4265;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.PROGRAM) {
	            this.state = 4264;
	            this.match(Cobol85Parser.PROGRAM);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generateStatement() {
	    let localctx = new GenerateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 684, Cobol85Parser.RULE_generateStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4267;
	        this.match(Cobol85Parser.GENERATE);
	        this.state = 4268;
	        this.reportName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gobackStatement() {
	    let localctx = new GobackStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 686, Cobol85Parser.RULE_gobackStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4270;
	        this.match(Cobol85Parser.GOBACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	goToStatement() {
	    let localctx = new GoToStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 688, Cobol85Parser.RULE_goToStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4272;
	        this.match(Cobol85Parser.GO);
	        this.state = 4274;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.TO) {
	            this.state = 4273;
	            this.match(Cobol85Parser.TO);
	        }

	        this.state = 4278;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,599,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4276;
	            this.goToStatementSimple();
	            break;

	        case 2:
	            this.state = 4277;
	            this.goToDependingOnStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	goToStatementSimple() {
	    let localctx = new GoToStatementSimpleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 690, Cobol85Parser.RULE_goToStatementSimple);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4280;
	        this.procedureName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	goToDependingOnStatement() {
	    let localctx = new GoToDependingOnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 692, Cobol85Parser.RULE_goToDependingOnStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 4295;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.MORE_LABELS:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4282;
	            this.match(Cobol85Parser.MORE_LABELS);
	            break;
	        case Cobol85Parser.ABORT:
	        case Cobol85Parser.AS:
	        case Cobol85Parser.ASCII:
	        case Cobol85Parser.ASSOCIATED_DATA:
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	        case Cobol85Parser.ATTRIBUTE:
	        case Cobol85Parser.AUTO:
	        case Cobol85Parser.AUTO_SKIP:
	        case Cobol85Parser.BACKGROUND_COLOR:
	        case Cobol85Parser.BACKGROUND_COLOUR:
	        case Cobol85Parser.BEEP:
	        case Cobol85Parser.BELL:
	        case Cobol85Parser.BINARY:
	        case Cobol85Parser.BIT:
	        case Cobol85Parser.BLINK:
	        case Cobol85Parser.BOUNDS:
	        case Cobol85Parser.CAPABLE:
	        case Cobol85Parser.CCSVERSION:
	        case Cobol85Parser.CHANGED:
	        case Cobol85Parser.CHANNEL:
	        case Cobol85Parser.CLOSE_DISPOSITION:
	        case Cobol85Parser.COBOL:
	        case Cobol85Parser.COMMITMENT:
	        case Cobol85Parser.CONTROL_POINT:
	        case Cobol85Parser.CONVENTION:
	        case Cobol85Parser.CRUNCH:
	        case Cobol85Parser.CURSOR:
	        case Cobol85Parser.DEFAULT:
	        case Cobol85Parser.DEFAULT_DISPLAY:
	        case Cobol85Parser.DEFINITION:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.DISK:
	        case Cobol85Parser.DONTCARE:
	        case Cobol85Parser.DOUBLE:
	        case Cobol85Parser.EBCDIC:
	        case Cobol85Parser.EMPTY_CHECK:
	        case Cobol85Parser.ENTER:
	        case Cobol85Parser.ENTRY_PROCEDURE:
	        case Cobol85Parser.ERASE:
	        case Cobol85Parser.EOL:
	        case Cobol85Parser.EOS:
	        case Cobol85Parser.ESCAPE:
	        case Cobol85Parser.EVENT:
	        case Cobol85Parser.EXCLUSIVE:
	        case Cobol85Parser.EXPORT:
	        case Cobol85Parser.EXTENDED:
	        case Cobol85Parser.FOREGROUND_COLOR:
	        case Cobol85Parser.FOREGROUND_COLOUR:
	        case Cobol85Parser.FULL:
	        case Cobol85Parser.FUNCTIONNAME:
	        case Cobol85Parser.FUNCTION_POINTER:
	        case Cobol85Parser.GRID:
	        case Cobol85Parser.HIGHLIGHT:
	        case Cobol85Parser.IMPLICIT:
	        case Cobol85Parser.IMPORT:
	        case Cobol85Parser.INTEGER:
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.KEYBOARD:
	        case Cobol85Parser.LANGUAGE:
	        case Cobol85Parser.LB:
	        case Cobol85Parser.LD:
	        case Cobol85Parser.LEFTLINE:
	        case Cobol85Parser.LENGTH_CHECK:
	        case Cobol85Parser.LIBACCESS:
	        case Cobol85Parser.LIBPARAMETER:
	        case Cobol85Parser.LIBRARY:
	        case Cobol85Parser.LIST:
	        case Cobol85Parser.LOCAL:
	        case Cobol85Parser.LONG_DATE:
	        case Cobol85Parser.LONG_TIME:
	        case Cobol85Parser.LOWER:
	        case Cobol85Parser.LOWLIGHT:
	        case Cobol85Parser.MMDDYYYY:
	        case Cobol85Parser.NAMED:
	        case Cobol85Parser.NATIONAL:
	        case Cobol85Parser.NATIONAL_EDITED:
	        case Cobol85Parser.NETWORK:
	        case Cobol85Parser.NO_ECHO:
	        case Cobol85Parser.NUMERIC_DATE:
	        case Cobol85Parser.NUMERIC_TIME:
	        case Cobol85Parser.ODT:
	        case Cobol85Parser.ORDERLY:
	        case Cobol85Parser.OVERLINE:
	        case Cobol85Parser.OWN:
	        case Cobol85Parser.PASSWORD:
	        case Cobol85Parser.PORT:
	        case Cobol85Parser.PRINTER:
	        case Cobol85Parser.PRIVATE:
	        case Cobol85Parser.PROCESS:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.PROMPT:
	        case Cobol85Parser.READER:
	        case Cobol85Parser.REMOTE:
	        case Cobol85Parser.REAL:
	        case Cobol85Parser.RECEIVED:
	        case Cobol85Parser.RECURSIVE:
	        case Cobol85Parser.REF:
	        case Cobol85Parser.REMOVE:
	        case Cobol85Parser.REQUIRED:
	        case Cobol85Parser.REVERSE_VIDEO:
	        case Cobol85Parser.SAVE:
	        case Cobol85Parser.SECURE:
	        case Cobol85Parser.SHARED:
	        case Cobol85Parser.SHAREDBYALL:
	        case Cobol85Parser.SHAREDBYRUNUNIT:
	        case Cobol85Parser.SHARING:
	        case Cobol85Parser.SHORT_DATE:
	        case Cobol85Parser.SYMBOL:
	        case Cobol85Parser.TASK:
	        case Cobol85Parser.THREAD:
	        case Cobol85Parser.THREAD_LOCAL:
	        case Cobol85Parser.TIMER:
	        case Cobol85Parser.TODAYS_DATE:
	        case Cobol85Parser.TODAYS_NAME:
	        case Cobol85Parser.TRUNCATED:
	        case Cobol85Parser.TYPEDEF:
	        case Cobol85Parser.UNDERLINE:
	        case Cobol85Parser.VIRTUAL:
	        case Cobol85Parser.WAIT:
	        case Cobol85Parser.YEAR:
	        case Cobol85Parser.YYYYMMDD:
	        case Cobol85Parser.YYYYDDD:
	        case Cobol85Parser.ZERO_FILL:
	        case Cobol85Parser.LEVEL_NUMBER_66:
	        case Cobol85Parser.LEVEL_NUMBER_77:
	        case Cobol85Parser.LEVEL_NUMBER_88:
	        case Cobol85Parser.INTEGERLITERAL:
	        case Cobol85Parser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4284; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 4283;
	                this.procedureName();
	                this.state = 4286; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	            this.state = 4293;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.DEPENDING) {
	                this.state = 4288;
	                this.match(Cobol85Parser.DEPENDING);
	                this.state = 4290;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Cobol85Parser.ON) {
	                    this.state = 4289;
	                    this.match(Cobol85Parser.ON);
	                }

	                this.state = 4292;
	                this.identifier();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement() {
	    let localctx = new IfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 694, Cobol85Parser.RULE_ifStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4297;
	        this.match(Cobol85Parser.IF);
	        this.state = 4298;
	        this.condition();
	        this.state = 4299;
	        this.ifThen();
	        this.state = 4301;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,604,this._ctx);
	        if(la_===1) {
	            this.state = 4300;
	            this.ifElse();

	        }
	        this.state = 4304;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,605,this._ctx);
	        if(la_===1) {
	            this.state = 4303;
	            this.match(Cobol85Parser.END_IF);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifThen() {
	    let localctx = new IfThenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 696, Cobol85Parser.RULE_ifThen);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4307;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.THEN) {
	            this.state = 4306;
	            this.match(Cobol85Parser.THEN);
	        }

	        this.state = 4317;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.NEXT:
	            this.state = 4309;
	            this.match(Cobol85Parser.NEXT);
	            this.state = 4310;
	            this.match(Cobol85Parser.SENTENCE);
	            break;
	        case Cobol85Parser.ACCEPT:
	        case Cobol85Parser.ADD:
	        case Cobol85Parser.ALTER:
	        case Cobol85Parser.AT:
	        case Cobol85Parser.CALL:
	        case Cobol85Parser.CANCEL:
	        case Cobol85Parser.CLOSE:
	        case Cobol85Parser.COMPUTE:
	        case Cobol85Parser.CONTINUE:
	        case Cobol85Parser.DELETE:
	        case Cobol85Parser.DISABLE:
	        case Cobol85Parser.DISPLAY:
	        case Cobol85Parser.DIVIDE:
	        case Cobol85Parser.ELSE:
	        case Cobol85Parser.ENABLE:
	        case Cobol85Parser.END:
	        case Cobol85Parser.END_ACCEPT:
	        case Cobol85Parser.END_ADD:
	        case Cobol85Parser.END_CALL:
	        case Cobol85Parser.END_COMPUTE:
	        case Cobol85Parser.END_DELETE:
	        case Cobol85Parser.END_DIVIDE:
	        case Cobol85Parser.END_EVALUATE:
	        case Cobol85Parser.END_IF:
	        case Cobol85Parser.END_MULTIPLY:
	        case Cobol85Parser.END_PERFORM:
	        case Cobol85Parser.END_READ:
	        case Cobol85Parser.END_RECEIVE:
	        case Cobol85Parser.END_RETURN:
	        case Cobol85Parser.END_REWRITE:
	        case Cobol85Parser.END_SEARCH:
	        case Cobol85Parser.END_START:
	        case Cobol85Parser.END_STRING:
	        case Cobol85Parser.END_SUBTRACT:
	        case Cobol85Parser.END_UNSTRING:
	        case Cobol85Parser.END_WRITE:
	        case Cobol85Parser.ENTRY:
	        case Cobol85Parser.EVALUATE:
	        case Cobol85Parser.EXCEPTION:
	        case Cobol85Parser.EXHIBIT:
	        case Cobol85Parser.EXIT:
	        case Cobol85Parser.GENERATE:
	        case Cobol85Parser.GOBACK:
	        case Cobol85Parser.GO:
	        case Cobol85Parser.IF:
	        case Cobol85Parser.INITIALIZE:
	        case Cobol85Parser.INITIATE:
	        case Cobol85Parser.INSPECT:
	        case Cobol85Parser.INVALID:
	        case Cobol85Parser.MERGE:
	        case Cobol85Parser.MOVE:
	        case Cobol85Parser.MULTIPLY:
	        case Cobol85Parser.NOT:
	        case Cobol85Parser.ON:
	        case Cobol85Parser.OPEN:
	        case Cobol85Parser.PERFORM:
	        case Cobol85Parser.PURGE:
	        case Cobol85Parser.READ:
	        case Cobol85Parser.RECEIVE:
	        case Cobol85Parser.RELEASE:
	        case Cobol85Parser.RETURN:
	        case Cobol85Parser.REWRITE:
	        case Cobol85Parser.SEARCH:
	        case Cobol85Parser.SEND:
	        case Cobol85Parser.SET:
	        case Cobol85Parser.SORT:
	        case Cobol85Parser.START:
	        case Cobol85Parser.STOP:
	        case Cobol85Parser.STRING:
	        case Cobol85Parser.SUBTRACT:
	        case Cobol85Parser.TERMINATE:
	        case Cobol85Parser.UNSTRING:
	        case Cobol85Parser.WHEN:
	        case Cobol85Parser.WITH:
	        case Cobol85Parser.WRITE:
	        case Cobol85Parser.DOT_FS:
	        case Cobol85Parser.EXECCICSLINE:
	        case Cobol85Parser.EXECSQLIMSLINE:
	        case Cobol85Parser.EXECSQLLINE:
	            this.state = 4314;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,607,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 4311;
	                    this.statement(); 
	                }
	                this.state = 4316;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,607,this._ctx);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifElse() {
	    let localctx = new IfElseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 698, Cobol85Parser.RULE_ifElse);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4319;
	        this.match(Cobol85Parser.ELSE);
	        this.state = 4328;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.NEXT:
	            this.state = 4320;
	            this.match(Cobol85Parser.NEXT);
	            this.state = 4321;
	            this.match(Cobol85Parser.SENTENCE);
	            break;
	        case Cobol85Parser.ACCEPT:
	        case Cobol85Parser.ADD:
	        case Cobol85Parser.ALTER:
	        case Cobol85Parser.AT:
	        case Cobol85Parser.CALL:
	        case Cobol85Parser.CANCEL:
	        case Cobol85Parser.CLOSE:
	        case Cobol85Parser.COMPUTE:
	        case Cobol85Parser.CONTINUE:
	        case Cobol85Parser.DELETE:
	        case Cobol85Parser.DISABLE:
	        case Cobol85Parser.DISPLAY:
	        case Cobol85Parser.DIVIDE:
	        case Cobol85Parser.ELSE:
	        case Cobol85Parser.ENABLE:
	        case Cobol85Parser.END:
	        case Cobol85Parser.END_ACCEPT:
	        case Cobol85Parser.END_ADD:
	        case Cobol85Parser.END_CALL:
	        case Cobol85Parser.END_COMPUTE:
	        case Cobol85Parser.END_DELETE:
	        case Cobol85Parser.END_DIVIDE:
	        case Cobol85Parser.END_EVALUATE:
	        case Cobol85Parser.END_IF:
	        case Cobol85Parser.END_MULTIPLY:
	        case Cobol85Parser.END_PERFORM:
	        case Cobol85Parser.END_READ:
	        case Cobol85Parser.END_RECEIVE:
	        case Cobol85Parser.END_RETURN:
	        case Cobol85Parser.END_REWRITE:
	        case Cobol85Parser.END_SEARCH:
	        case Cobol85Parser.END_START:
	        case Cobol85Parser.END_STRING:
	        case Cobol85Parser.END_SUBTRACT:
	        case Cobol85Parser.END_UNSTRING:
	        case Cobol85Parser.END_WRITE:
	        case Cobol85Parser.ENTRY:
	        case Cobol85Parser.EVALUATE:
	        case Cobol85Parser.EXCEPTION:
	        case Cobol85Parser.EXHIBIT:
	        case Cobol85Parser.EXIT:
	        case Cobol85Parser.GENERATE:
	        case Cobol85Parser.GOBACK:
	        case Cobol85Parser.GO:
	        case Cobol85Parser.IF:
	        case Cobol85Parser.INITIALIZE:
	        case Cobol85Parser.INITIATE:
	        case Cobol85Parser.INSPECT:
	        case Cobol85Parser.INVALID:
	        case Cobol85Parser.MERGE:
	        case Cobol85Parser.MOVE:
	        case Cobol85Parser.MULTIPLY:
	        case Cobol85Parser.NOT:
	        case Cobol85Parser.ON:
	        case Cobol85Parser.OPEN:
	        case Cobol85Parser.PERFORM:
	        case Cobol85Parser.PURGE:
	        case Cobol85Parser.READ:
	        case Cobol85Parser.RECEIVE:
	        case Cobol85Parser.RELEASE:
	        case Cobol85Parser.RETURN:
	        case Cobol85Parser.REWRITE:
	        case Cobol85Parser.SEARCH:
	        case Cobol85Parser.SEND:
	        case Cobol85Parser.SET:
	        case Cobol85Parser.SORT:
	        case Cobol85Parser.START:
	        case Cobol85Parser.STOP:
	        case Cobol85Parser.STRING:
	        case Cobol85Parser.SUBTRACT:
	        case Cobol85Parser.TERMINATE:
	        case Cobol85Parser.UNSTRING:
	        case Cobol85Parser.WHEN:
	        case Cobol85Parser.WITH:
	        case Cobol85Parser.WRITE:
	        case Cobol85Parser.DOT_FS:
	        case Cobol85Parser.EXECCICSLINE:
	        case Cobol85Parser.EXECSQLIMSLINE:
	        case Cobol85Parser.EXECSQLLINE:
	            this.state = 4325;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,609,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 4322;
	                    this.statement(); 
	                }
	                this.state = 4327;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,609,this._ctx);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializeStatement() {
	    let localctx = new InitializeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 700, Cobol85Parser.RULE_initializeStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4330;
	        this.match(Cobol85Parser.INITIALIZE);
	        this.state = 4332; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4331;
	            this.identifier();
	            this.state = 4334; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	        this.state = 4337;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.REPLACING) {
	            this.state = 4336;
	            this.initializeReplacingPhrase();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializeReplacingPhrase() {
	    let localctx = new InitializeReplacingPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 702, Cobol85Parser.RULE_initializeReplacingPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4339;
	        this.match(Cobol85Parser.REPLACING);
	        this.state = 4341; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4340;
	            this.initializeReplacingBy();
	            this.state = 4343; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ALPHABETIC) | (1 << Cobol85Parser.ALPHANUMERIC) | (1 << Cobol85Parser.ALPHANUMERIC_EDITED))) !== 0) || _la===Cobol85Parser.DBCS || _la===Cobol85Parser.EGCS || ((((_la - 304)) & ~0x1f) == 0 && ((1 << (_la - 304)) & ((1 << (Cobol85Parser.NATIONAL - 304)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 304)) | (1 << (Cobol85Parser.NUMERIC - 304)) | (1 << (Cobol85Parser.NUMERIC_EDITED - 304)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializeReplacingBy() {
	    let localctx = new InitializeReplacingByContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 704, Cobol85Parser.RULE_initializeReplacingBy);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4345;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ALPHABETIC) | (1 << Cobol85Parser.ALPHANUMERIC) | (1 << Cobol85Parser.ALPHANUMERIC_EDITED))) !== 0) || _la===Cobol85Parser.DBCS || _la===Cobol85Parser.EGCS || ((((_la - 304)) & ~0x1f) == 0 && ((1 << (_la - 304)) & ((1 << (Cobol85Parser.NATIONAL - 304)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 304)) | (1 << (Cobol85Parser.NUMERIC - 304)) | (1 << (Cobol85Parser.NUMERIC_EDITED - 304)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4347;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.DATA) {
	            this.state = 4346;
	            this.match(Cobol85Parser.DATA);
	        }

	        this.state = 4349;
	        this.match(Cobol85Parser.BY);
	        this.state = 4352;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,615,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4350;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 4351;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initiateStatement() {
	    let localctx = new InitiateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 706, Cobol85Parser.RULE_initiateStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4354;
	        this.match(Cobol85Parser.INITIATE);
	        this.state = 4356; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4355;
	            this.reportName();
	            this.state = 4358; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inspectStatement() {
	    let localctx = new InspectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 708, Cobol85Parser.RULE_inspectStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4360;
	        this.match(Cobol85Parser.INSPECT);
	        this.state = 4361;
	        this.identifier();
	        this.state = 4366;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,617,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4362;
	            this.inspectTallyingPhrase();
	            break;

	        case 2:
	            this.state = 4363;
	            this.inspectReplacingPhrase();
	            break;

	        case 3:
	            this.state = 4364;
	            this.inspectTallyingReplacingPhrase();
	            break;

	        case 4:
	            this.state = 4365;
	            this.inspectConvertingPhrase();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inspectTallyingPhrase() {
	    let localctx = new InspectTallyingPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 710, Cobol85Parser.RULE_inspectTallyingPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4368;
	        this.match(Cobol85Parser.TALLYING);
	        this.state = 4370; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4369;
	            this.inspectFor();
	            this.state = 4372; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inspectReplacingPhrase() {
	    let localctx = new InspectReplacingPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 712, Cobol85Parser.RULE_inspectReplacingPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4374;
	        this.match(Cobol85Parser.REPLACING);
	        this.state = 4377; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4377;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case Cobol85Parser.CHARACTERS:
	                this.state = 4375;
	                this.inspectReplacingCharacters();
	                break;
	            case Cobol85Parser.ALL:
	            case Cobol85Parser.FIRST:
	            case Cobol85Parser.LEADING:
	                this.state = 4376;
	                this.inspectReplacingAllLeadings();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 4379; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===Cobol85Parser.ALL || _la===Cobol85Parser.CHARACTERS || _la===Cobol85Parser.FIRST || _la===Cobol85Parser.LEADING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inspectTallyingReplacingPhrase() {
	    let localctx = new InspectTallyingReplacingPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 714, Cobol85Parser.RULE_inspectTallyingReplacingPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4381;
	        this.match(Cobol85Parser.TALLYING);
	        this.state = 4383; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4382;
	            this.inspectFor();
	            this.state = 4385; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	        this.state = 4388; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4387;
	            this.inspectReplacingPhrase();
	            this.state = 4390; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===Cobol85Parser.REPLACING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inspectConvertingPhrase() {
	    let localctx = new InspectConvertingPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 716, Cobol85Parser.RULE_inspectConvertingPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4392;
	        this.match(Cobol85Parser.CONVERTING);
	        this.state = 4395;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,623,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4393;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 4394;
	            this.literal();
	            break;

	        }
	        this.state = 4397;
	        this.inspectTo();
	        this.state = 4401;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.AFTER || _la===Cobol85Parser.BEFORE) {
	            this.state = 4398;
	            this.inspectBeforeAfter();
	            this.state = 4403;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inspectFor() {
	    let localctx = new InspectForContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 718, Cobol85Parser.RULE_inspectFor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4404;
	        this.identifier();
	        this.state = 4405;
	        this.match(Cobol85Parser.FOR);
	        this.state = 4408; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4408;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case Cobol85Parser.CHARACTERS:
	                this.state = 4406;
	                this.inspectCharacters();
	                break;
	            case Cobol85Parser.ALL:
	            case Cobol85Parser.LEADING:
	                this.state = 4407;
	                this.inspectAllLeadings();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 4410; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===Cobol85Parser.ALL || _la===Cobol85Parser.CHARACTERS || _la===Cobol85Parser.LEADING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inspectCharacters() {
	    let localctx = new InspectCharactersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 720, Cobol85Parser.RULE_inspectCharacters);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4412;
	        this.match(Cobol85Parser.CHARACTERS);
	        this.state = 4416;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.AFTER || _la===Cobol85Parser.BEFORE) {
	            this.state = 4413;
	            this.inspectBeforeAfter();
	            this.state = 4418;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inspectReplacingCharacters() {
	    let localctx = new InspectReplacingCharactersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 722, Cobol85Parser.RULE_inspectReplacingCharacters);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4419;
	        this.match(Cobol85Parser.CHARACTERS);
	        this.state = 4420;
	        this.inspectBy();
	        this.state = 4424;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.AFTER || _la===Cobol85Parser.BEFORE) {
	            this.state = 4421;
	            this.inspectBeforeAfter();
	            this.state = 4426;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inspectAllLeadings() {
	    let localctx = new InspectAllLeadingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 724, Cobol85Parser.RULE_inspectAllLeadings);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4427;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.ALL || _la===Cobol85Parser.LEADING)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4429; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4428;
	        		this.inspectAllLeading();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 4431; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,629, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inspectReplacingAllLeadings() {
	    let localctx = new InspectReplacingAllLeadingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 726, Cobol85Parser.RULE_inspectReplacingAllLeadings);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4433;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.ALL || _la===Cobol85Parser.FIRST || _la===Cobol85Parser.LEADING)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4435; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4434;
	        		this.inspectReplacingAllLeading();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 4437; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,630, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inspectAllLeading() {
	    let localctx = new InspectAllLeadingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 728, Cobol85Parser.RULE_inspectAllLeading);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4441;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,631,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4439;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 4440;
	            this.literal();
	            break;

	        }
	        this.state = 4446;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.AFTER || _la===Cobol85Parser.BEFORE) {
	            this.state = 4443;
	            this.inspectBeforeAfter();
	            this.state = 4448;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inspectReplacingAllLeading() {
	    let localctx = new InspectReplacingAllLeadingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 730, Cobol85Parser.RULE_inspectReplacingAllLeading);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4451;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,633,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4449;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 4450;
	            this.literal();
	            break;

	        }
	        this.state = 4453;
	        this.inspectBy();
	        this.state = 4457;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.AFTER || _la===Cobol85Parser.BEFORE) {
	            this.state = 4454;
	            this.inspectBeforeAfter();
	            this.state = 4459;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inspectBy() {
	    let localctx = new InspectByContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 732, Cobol85Parser.RULE_inspectBy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4460;
	        this.match(Cobol85Parser.BY);
	        this.state = 4463;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,635,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4461;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 4462;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inspectTo() {
	    let localctx = new InspectToContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 734, Cobol85Parser.RULE_inspectTo);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4465;
	        this.match(Cobol85Parser.TO);
	        this.state = 4468;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,636,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4466;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 4467;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inspectBeforeAfter() {
	    let localctx = new InspectBeforeAfterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 736, Cobol85Parser.RULE_inspectBeforeAfter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4470;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.AFTER || _la===Cobol85Parser.BEFORE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4472;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.INITIAL) {
	            this.state = 4471;
	            this.match(Cobol85Parser.INITIAL);
	        }

	        this.state = 4476;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,638,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4474;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 4475;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeStatement() {
	    let localctx = new MergeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 738, Cobol85Parser.RULE_mergeStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4478;
	        this.match(Cobol85Parser.MERGE);
	        this.state = 4479;
	        this.fileName();
	        this.state = 4481; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4480;
	        		this.mergeOnKeyClause();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 4483; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,639, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 4486;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.COLLATING || _la===Cobol85Parser.SEQUENCE) {
	            this.state = 4485;
	            this.mergeCollatingSequencePhrase();
	        }

	        this.state = 4491;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.USING) {
	            this.state = 4488;
	            this.mergeUsing();
	            this.state = 4493;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4495;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.OUTPUT) {
	            this.state = 4494;
	            this.mergeOutputProcedurePhrase();
	        }

	        this.state = 4500;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.GIVING) {
	            this.state = 4497;
	            this.mergeGivingPhrase();
	            this.state = 4502;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeOnKeyClause() {
	    let localctx = new MergeOnKeyClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 740, Cobol85Parser.RULE_mergeOnKeyClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4504;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ON) {
	            this.state = 4503;
	            this.match(Cobol85Parser.ON);
	        }

	        this.state = 4506;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.ASCENDING || _la===Cobol85Parser.DESCENDING)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4508;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.KEY) {
	            this.state = 4507;
	            this.match(Cobol85Parser.KEY);
	        }

	        this.state = 4511; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4510;
	            this.qualifiedDataName();
	            this.state = 4513; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeCollatingSequencePhrase() {
	    let localctx = new MergeCollatingSequencePhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 742, Cobol85Parser.RULE_mergeCollatingSequencePhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4516;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.COLLATING) {
	            this.state = 4515;
	            this.match(Cobol85Parser.COLLATING);
	        }

	        this.state = 4518;
	        this.match(Cobol85Parser.SEQUENCE);
	        this.state = 4520;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 4519;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 4523; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4522;
	        		this.alphabetName();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 4525; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,649, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 4528;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,650,this._ctx);
	        if(la_===1) {
	            this.state = 4527;
	            this.mergeCollatingAlphanumeric();

	        }
	        this.state = 4531;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FOR || _la===Cobol85Parser.NATIONAL) {
	            this.state = 4530;
	            this.mergeCollatingNational();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeCollatingAlphanumeric() {
	    let localctx = new MergeCollatingAlphanumericContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 744, Cobol85Parser.RULE_mergeCollatingAlphanumeric);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4534;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FOR) {
	            this.state = 4533;
	            this.match(Cobol85Parser.FOR);
	        }

	        this.state = 4536;
	        this.match(Cobol85Parser.ALPHANUMERIC);
	        this.state = 4537;
	        this.match(Cobol85Parser.IS);
	        this.state = 4538;
	        this.alphabetName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeCollatingNational() {
	    let localctx = new MergeCollatingNationalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 746, Cobol85Parser.RULE_mergeCollatingNational);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4541;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FOR) {
	            this.state = 4540;
	            this.match(Cobol85Parser.FOR);
	        }

	        this.state = 4543;
	        this.match(Cobol85Parser.NATIONAL);
	        this.state = 4545;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 4544;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 4547;
	        this.alphabetName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeUsing() {
	    let localctx = new MergeUsingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 748, Cobol85Parser.RULE_mergeUsing);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4549;
	        this.match(Cobol85Parser.USING);
	        this.state = 4551; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4550;
	            this.fileName();
	            this.state = 4553; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la===Cobol85Parser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeOutputProcedurePhrase() {
	    let localctx = new MergeOutputProcedurePhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 750, Cobol85Parser.RULE_mergeOutputProcedurePhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4555;
	        this.match(Cobol85Parser.OUTPUT);
	        this.state = 4556;
	        this.match(Cobol85Parser.PROCEDURE);
	        this.state = 4558;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 4557;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 4560;
	        this.procedureName();
	        this.state = 4562;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.THROUGH || _la===Cobol85Parser.THRU) {
	            this.state = 4561;
	            this.mergeOutputThrough();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeOutputThrough() {
	    let localctx = new MergeOutputThroughContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 752, Cobol85Parser.RULE_mergeOutputThrough);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4564;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.THROUGH || _la===Cobol85Parser.THRU)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4565;
	        this.procedureName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeGivingPhrase() {
	    let localctx = new MergeGivingPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 754, Cobol85Parser.RULE_mergeGivingPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4567;
	        this.match(Cobol85Parser.GIVING);
	        this.state = 4569; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4568;
	            this.mergeGiving();
	            this.state = 4571; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la===Cobol85Parser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeGiving() {
	    let localctx = new MergeGivingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 756, Cobol85Parser.RULE_mergeGiving);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4573;
	        this.fileName();
	        this.state = 4583;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,659,this._ctx);
	        if(la_===1) {
	            this.state = 4574;
	            this.match(Cobol85Parser.LOCK);

	        } else if(la_===2) {
	            this.state = 4575;
	            this.match(Cobol85Parser.SAVE);

	        } else if(la_===3) {
	            this.state = 4576;
	            this.match(Cobol85Parser.NO);
	            this.state = 4577;
	            this.match(Cobol85Parser.REWIND);

	        } else if(la_===4) {
	            this.state = 4578;
	            this.match(Cobol85Parser.CRUNCH);

	        } else if(la_===5) {
	            this.state = 4579;
	            this.match(Cobol85Parser.RELEASE);

	        } else if(la_===6) {
	            this.state = 4580;
	            this.match(Cobol85Parser.WITH);
	            this.state = 4581;
	            this.match(Cobol85Parser.REMOVE);
	            this.state = 4582;
	            this.match(Cobol85Parser.CRUNCH);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moveStatement() {
	    let localctx = new MoveStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 758, Cobol85Parser.RULE_moveStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4585;
	        this.match(Cobol85Parser.MOVE);
	        this.state = 4587;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,660,this._ctx);
	        if(la_===1) {
	            this.state = 4586;
	            this.match(Cobol85Parser.ALL);

	        }
	        this.state = 4591;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.ABORT:
	        case Cobol85Parser.ADDRESS:
	        case Cobol85Parser.ALL:
	        case Cobol85Parser.AS:
	        case Cobol85Parser.ASCII:
	        case Cobol85Parser.ASSOCIATED_DATA:
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	        case Cobol85Parser.ATTRIBUTE:
	        case Cobol85Parser.AUTO:
	        case Cobol85Parser.AUTO_SKIP:
	        case Cobol85Parser.BACKGROUND_COLOR:
	        case Cobol85Parser.BACKGROUND_COLOUR:
	        case Cobol85Parser.BEEP:
	        case Cobol85Parser.BELL:
	        case Cobol85Parser.BINARY:
	        case Cobol85Parser.BIT:
	        case Cobol85Parser.BLINK:
	        case Cobol85Parser.BOUNDS:
	        case Cobol85Parser.CAPABLE:
	        case Cobol85Parser.CCSVERSION:
	        case Cobol85Parser.CHANGED:
	        case Cobol85Parser.CHANNEL:
	        case Cobol85Parser.CLOSE_DISPOSITION:
	        case Cobol85Parser.COBOL:
	        case Cobol85Parser.COMMITMENT:
	        case Cobol85Parser.CONTROL_POINT:
	        case Cobol85Parser.CONVENTION:
	        case Cobol85Parser.CRUNCH:
	        case Cobol85Parser.CURSOR:
	        case Cobol85Parser.DATE:
	        case Cobol85Parser.DAY:
	        case Cobol85Parser.DAY_OF_WEEK:
	        case Cobol85Parser.DEBUG_CONTENTS:
	        case Cobol85Parser.DEBUG_ITEM:
	        case Cobol85Parser.DEBUG_LINE:
	        case Cobol85Parser.DEBUG_NAME:
	        case Cobol85Parser.DEBUG_SUB_1:
	        case Cobol85Parser.DEBUG_SUB_2:
	        case Cobol85Parser.DEBUG_SUB_3:
	        case Cobol85Parser.DEFAULT:
	        case Cobol85Parser.DEFAULT_DISPLAY:
	        case Cobol85Parser.DEFINITION:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.DISK:
	        case Cobol85Parser.DONTCARE:
	        case Cobol85Parser.DOUBLE:
	        case Cobol85Parser.EBCDIC:
	        case Cobol85Parser.EMPTY_CHECK:
	        case Cobol85Parser.ENTER:
	        case Cobol85Parser.ENTRY_PROCEDURE:
	        case Cobol85Parser.ERASE:
	        case Cobol85Parser.EOL:
	        case Cobol85Parser.EOS:
	        case Cobol85Parser.ESCAPE:
	        case Cobol85Parser.EVENT:
	        case Cobol85Parser.EXCLUSIVE:
	        case Cobol85Parser.EXPORT:
	        case Cobol85Parser.EXTENDED:
	        case Cobol85Parser.FALSE:
	        case Cobol85Parser.FOREGROUND_COLOR:
	        case Cobol85Parser.FOREGROUND_COLOUR:
	        case Cobol85Parser.FULL:
	        case Cobol85Parser.FUNCTION:
	        case Cobol85Parser.FUNCTIONNAME:
	        case Cobol85Parser.FUNCTION_POINTER:
	        case Cobol85Parser.GRID:
	        case Cobol85Parser.HIGHLIGHT:
	        case Cobol85Parser.HIGH_VALUE:
	        case Cobol85Parser.HIGH_VALUES:
	        case Cobol85Parser.IMPLICIT:
	        case Cobol85Parser.IMPORT:
	        case Cobol85Parser.INTEGER:
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.KEYBOARD:
	        case Cobol85Parser.LANGUAGE:
	        case Cobol85Parser.LB:
	        case Cobol85Parser.LD:
	        case Cobol85Parser.LEFTLINE:
	        case Cobol85Parser.LENGTH:
	        case Cobol85Parser.LENGTH_CHECK:
	        case Cobol85Parser.LIBACCESS:
	        case Cobol85Parser.LIBPARAMETER:
	        case Cobol85Parser.LIBRARY:
	        case Cobol85Parser.LINAGE_COUNTER:
	        case Cobol85Parser.LINE_COUNTER:
	        case Cobol85Parser.LIST:
	        case Cobol85Parser.LOCAL:
	        case Cobol85Parser.LONG_DATE:
	        case Cobol85Parser.LONG_TIME:
	        case Cobol85Parser.LOWER:
	        case Cobol85Parser.LOWLIGHT:
	        case Cobol85Parser.LOW_VALUE:
	        case Cobol85Parser.LOW_VALUES:
	        case Cobol85Parser.MMDDYYYY:
	        case Cobol85Parser.NAMED:
	        case Cobol85Parser.NATIONAL:
	        case Cobol85Parser.NATIONAL_EDITED:
	        case Cobol85Parser.NETWORK:
	        case Cobol85Parser.NO_ECHO:
	        case Cobol85Parser.NULL_:
	        case Cobol85Parser.NULLS:
	        case Cobol85Parser.NUMERIC_DATE:
	        case Cobol85Parser.NUMERIC_TIME:
	        case Cobol85Parser.ODT:
	        case Cobol85Parser.ORDERLY:
	        case Cobol85Parser.OVERLINE:
	        case Cobol85Parser.OWN:
	        case Cobol85Parser.PAGE_COUNTER:
	        case Cobol85Parser.PASSWORD:
	        case Cobol85Parser.PORT:
	        case Cobol85Parser.PRINTER:
	        case Cobol85Parser.PRIVATE:
	        case Cobol85Parser.PROCESS:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.PROMPT:
	        case Cobol85Parser.QUOTE:
	        case Cobol85Parser.QUOTES:
	        case Cobol85Parser.READER:
	        case Cobol85Parser.REMOTE:
	        case Cobol85Parser.REAL:
	        case Cobol85Parser.RECEIVED:
	        case Cobol85Parser.RECURSIVE:
	        case Cobol85Parser.REF:
	        case Cobol85Parser.REMOVE:
	        case Cobol85Parser.REQUIRED:
	        case Cobol85Parser.REVERSE_VIDEO:
	        case Cobol85Parser.RETURN_CODE:
	        case Cobol85Parser.SAVE:
	        case Cobol85Parser.SECURE:
	        case Cobol85Parser.SHARED:
	        case Cobol85Parser.SHAREDBYALL:
	        case Cobol85Parser.SHAREDBYRUNUNIT:
	        case Cobol85Parser.SHARING:
	        case Cobol85Parser.SHIFT_IN:
	        case Cobol85Parser.SHIFT_OUT:
	        case Cobol85Parser.SHORT_DATE:
	        case Cobol85Parser.SORT_CONTROL:
	        case Cobol85Parser.SORT_CORE_SIZE:
	        case Cobol85Parser.SORT_FILE_SIZE:
	        case Cobol85Parser.SORT_MESSAGE:
	        case Cobol85Parser.SORT_MODE_SIZE:
	        case Cobol85Parser.SORT_RETURN:
	        case Cobol85Parser.SPACE:
	        case Cobol85Parser.SPACES:
	        case Cobol85Parser.SYMBOL:
	        case Cobol85Parser.TALLY:
	        case Cobol85Parser.TASK:
	        case Cobol85Parser.THREAD:
	        case Cobol85Parser.THREAD_LOCAL:
	        case Cobol85Parser.TIME:
	        case Cobol85Parser.TIMER:
	        case Cobol85Parser.TODAYS_DATE:
	        case Cobol85Parser.TODAYS_NAME:
	        case Cobol85Parser.TRUE:
	        case Cobol85Parser.TRUNCATED:
	        case Cobol85Parser.TYPEDEF:
	        case Cobol85Parser.UNDERLINE:
	        case Cobol85Parser.VIRTUAL:
	        case Cobol85Parser.WAIT:
	        case Cobol85Parser.WHEN_COMPILED:
	        case Cobol85Parser.YEAR:
	        case Cobol85Parser.YYYYMMDD:
	        case Cobol85Parser.YYYYDDD:
	        case Cobol85Parser.ZERO:
	        case Cobol85Parser.ZERO_FILL:
	        case Cobol85Parser.ZEROS:
	        case Cobol85Parser.ZEROES:
	        case Cobol85Parser.NONNUMERICLITERAL:
	        case Cobol85Parser.LEVEL_NUMBER_66:
	        case Cobol85Parser.LEVEL_NUMBER_77:
	        case Cobol85Parser.LEVEL_NUMBER_88:
	        case Cobol85Parser.INTEGERLITERAL:
	        case Cobol85Parser.NUMERICLITERAL:
	        case Cobol85Parser.IDENTIFIER:
	            this.state = 4589;
	            this.moveToStatement();
	            break;
	        case Cobol85Parser.CORR:
	        case Cobol85Parser.CORRESPONDING:
	            this.state = 4590;
	            this.moveCorrespondingToStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moveToStatement() {
	    let localctx = new MoveToStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 760, Cobol85Parser.RULE_moveToStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4593;
	        this.moveToSendingArea();
	        this.state = 4594;
	        this.match(Cobol85Parser.TO);
	        this.state = 4596; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4595;
	            this.identifier();
	            this.state = 4598; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moveToSendingArea() {
	    let localctx = new MoveToSendingAreaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 762, Cobol85Parser.RULE_moveToSendingArea);
	    try {
	        this.state = 4602;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,663,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4600;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4601;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moveCorrespondingToStatement() {
	    let localctx = new MoveCorrespondingToStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 764, Cobol85Parser.RULE_moveCorrespondingToStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4604;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.CORR || _la===Cobol85Parser.CORRESPONDING)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4605;
	        this.moveCorrespondingToSendingArea();
	        this.state = 4606;
	        this.match(Cobol85Parser.TO);
	        this.state = 4608; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4607;
	            this.identifier();
	            this.state = 4610; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moveCorrespondingToSendingArea() {
	    let localctx = new MoveCorrespondingToSendingAreaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 766, Cobol85Parser.RULE_moveCorrespondingToSendingArea);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4612;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplyStatement() {
	    let localctx = new MultiplyStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 768, Cobol85Parser.RULE_multiplyStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4614;
	        this.match(Cobol85Parser.MULTIPLY);
	        this.state = 4617;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,665,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4615;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 4616;
	            this.literal();
	            break;

	        }
	        this.state = 4619;
	        this.match(Cobol85Parser.BY);
	        this.state = 4622;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,666,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4620;
	            this.multiplyRegular();
	            break;

	        case 2:
	            this.state = 4621;
	            this.multiplyGiving();
	            break;

	        }
	        this.state = 4625;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,667,this._ctx);
	        if(la_===1) {
	            this.state = 4624;
	            this.onSizeErrorPhrase();

	        }
	        this.state = 4628;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,668,this._ctx);
	        if(la_===1) {
	            this.state = 4627;
	            this.notOnSizeErrorPhrase();

	        }
	        this.state = 4631;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,669,this._ctx);
	        if(la_===1) {
	            this.state = 4630;
	            this.match(Cobol85Parser.END_MULTIPLY);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplyRegular() {
	    let localctx = new MultiplyRegularContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 770, Cobol85Parser.RULE_multiplyRegular);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4634; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4633;
	            this.multiplyRegularOperand();
	            this.state = 4636; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplyRegularOperand() {
	    let localctx = new MultiplyRegularOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 772, Cobol85Parser.RULE_multiplyRegularOperand);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4638;
	        this.identifier();
	        this.state = 4640;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ROUNDED) {
	            this.state = 4639;
	            this.match(Cobol85Parser.ROUNDED);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplyGiving() {
	    let localctx = new MultiplyGivingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 774, Cobol85Parser.RULE_multiplyGiving);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4642;
	        this.multiplyGivingOperand();
	        this.state = 4643;
	        this.match(Cobol85Parser.GIVING);
	        this.state = 4645; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4644;
	            this.multiplyGivingResult();
	            this.state = 4647; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplyGivingOperand() {
	    let localctx = new MultiplyGivingOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 776, Cobol85Parser.RULE_multiplyGivingOperand);
	    try {
	        this.state = 4651;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,673,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4649;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4650;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplyGivingResult() {
	    let localctx = new MultiplyGivingResultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 778, Cobol85Parser.RULE_multiplyGivingResult);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4653;
	        this.identifier();
	        this.state = 4655;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ROUNDED) {
	            this.state = 4654;
	            this.match(Cobol85Parser.ROUNDED);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openStatement() {
	    let localctx = new OpenStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 780, Cobol85Parser.RULE_openStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4657;
	        this.match(Cobol85Parser.OPEN);
	        this.state = 4662; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4662;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case Cobol85Parser.INPUT:
	                this.state = 4658;
	                this.openInputStatement();
	                break;
	            case Cobol85Parser.OUTPUT:
	                this.state = 4659;
	                this.openOutputStatement();
	                break;
	            case Cobol85Parser.I_O:
	                this.state = 4660;
	                this.openIOStatement();
	                break;
	            case Cobol85Parser.EXTEND:
	                this.state = 4661;
	                this.openExtendStatement();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 4664; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===Cobol85Parser.EXTEND || _la===Cobol85Parser.I_O || _la===Cobol85Parser.INPUT || _la===Cobol85Parser.OUTPUT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openInputStatement() {
	    let localctx = new OpenInputStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 782, Cobol85Parser.RULE_openInputStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4666;
	        this.match(Cobol85Parser.INPUT);
	        this.state = 4668; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4667;
	            this.openInput();
	            this.state = 4670; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la===Cobol85Parser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openInput() {
	    let localctx = new OpenInputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 784, Cobol85Parser.RULE_openInput);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4672;
	        this.fileName();
	        this.state = 4679;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,679,this._ctx);
	        if(la_===1) {
	            this.state = 4673;
	            this.match(Cobol85Parser.REVERSED);

	        } else if(la_===2) {
	            this.state = 4675;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.WITH) {
	                this.state = 4674;
	                this.match(Cobol85Parser.WITH);
	            }

	            this.state = 4677;
	            this.match(Cobol85Parser.NO);
	            this.state = 4678;
	            this.match(Cobol85Parser.REWIND);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openOutputStatement() {
	    let localctx = new OpenOutputStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 786, Cobol85Parser.RULE_openOutputStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4681;
	        this.match(Cobol85Parser.OUTPUT);
	        this.state = 4683; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4682;
	            this.openOutput();
	            this.state = 4685; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la===Cobol85Parser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openOutput() {
	    let localctx = new OpenOutputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 788, Cobol85Parser.RULE_openOutput);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4687;
	        this.fileName();
	        this.state = 4693;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,682,this._ctx);
	        if(la_===1) {
	            this.state = 4689;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.WITH) {
	                this.state = 4688;
	                this.match(Cobol85Parser.WITH);
	            }

	            this.state = 4691;
	            this.match(Cobol85Parser.NO);
	            this.state = 4692;
	            this.match(Cobol85Parser.REWIND);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openIOStatement() {
	    let localctx = new OpenIOStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 790, Cobol85Parser.RULE_openIOStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4695;
	        this.match(Cobol85Parser.I_O);
	        this.state = 4697; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4696;
	            this.fileName();
	            this.state = 4699; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la===Cobol85Parser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openExtendStatement() {
	    let localctx = new OpenExtendStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 792, Cobol85Parser.RULE_openExtendStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4701;
	        this.match(Cobol85Parser.EXTEND);
	        this.state = 4703; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4702;
	            this.fileName();
	            this.state = 4705; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la===Cobol85Parser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	performStatement() {
	    let localctx = new PerformStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 794, Cobol85Parser.RULE_performStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4707;
	        this.match(Cobol85Parser.PERFORM);
	        this.state = 4710;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,685,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4708;
	            this.performInlineStatement();
	            break;

	        case 2:
	            this.state = 4709;
	            this.performProcedureStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	performInlineStatement() {
	    let localctx = new PerformInlineStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 796, Cobol85Parser.RULE_performInlineStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4713;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.TEST - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.UNTIL - 498)) | (1 << (Cobol85Parser.VARYING - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.WITH - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0)) {
	            this.state = 4712;
	            this.performType();
	        }

	        this.state = 4718;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ACCEPT) | (1 << Cobol85Parser.ADD) | (1 << Cobol85Parser.ALTER))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (Cobol85Parser.CALL - 52)) | (1 << (Cobol85Parser.CANCEL - 52)) | (1 << (Cobol85Parser.CLOSE - 52)))) !== 0) || _la===Cobol85Parser.COMPUTE || _la===Cobol85Parser.CONTINUE || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DELETE - 131)) | (1 << (Cobol85Parser.DISABLE - 131)) | (1 << (Cobol85Parser.DISPLAY - 131)) | (1 << (Cobol85Parser.DIVIDE - 131)) | (1 << (Cobol85Parser.ENABLE - 131)))) !== 0) || ((((_la - 182)) & ~0x1f) == 0 && ((1 << (_la - 182)) & ((1 << (Cobol85Parser.ENTRY - 182)) | (1 << (Cobol85Parser.EVALUATE - 182)) | (1 << (Cobol85Parser.EXHIBIT - 182)) | (1 << (Cobol85Parser.EXIT - 182)))) !== 0) || ((((_la - 220)) & ~0x1f) == 0 && ((1 << (_la - 220)) & ((1 << (Cobol85Parser.GENERATE - 220)) | (1 << (Cobol85Parser.GOBACK - 220)) | (1 << (Cobol85Parser.GO - 220)) | (1 << (Cobol85Parser.IF - 220)) | (1 << (Cobol85Parser.INITIALIZE - 220)) | (1 << (Cobol85Parser.INITIATE - 220)) | (1 << (Cobol85Parser.INSPECT - 220)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (Cobol85Parser.MERGE - 294)) | (1 << (Cobol85Parser.MOVE - 294)) | (1 << (Cobol85Parser.MULTIPLY - 294)))) !== 0) || _la===Cobol85Parser.OPEN || _la===Cobol85Parser.PERFORM || ((((_la - 365)) & ~0x1f) == 0 && ((1 << (_la - 365)) & ((1 << (Cobol85Parser.PURGE - 365)) | (1 << (Cobol85Parser.READ - 365)) | (1 << (Cobol85Parser.RECEIVE - 365)) | (1 << (Cobol85Parser.RELEASE - 365)))) !== 0) || ((((_la - 403)) & ~0x1f) == 0 && ((1 << (_la - 403)) & ((1 << (Cobol85Parser.RETURN - 403)) | (1 << (Cobol85Parser.REWRITE - 403)) | (1 << (Cobol85Parser.SEARCH - 403)) | (1 << (Cobol85Parser.SEND - 403)) | (1 << (Cobol85Parser.SET - 403)))) !== 0) || ((((_la - 440)) & ~0x1f) == 0 && ((1 << (_la - 440)) & ((1 << (Cobol85Parser.SORT - 440)) | (1 << (Cobol85Parser.START - 440)) | (1 << (Cobol85Parser.STOP - 440)) | (1 << (Cobol85Parser.STRING - 440)) | (1 << (Cobol85Parser.SUBTRACT - 440)))) !== 0) || _la===Cobol85Parser.TERMINATE || _la===Cobol85Parser.UNSTRING || _la===Cobol85Parser.WRITE || ((((_la - 559)) & ~0x1f) == 0 && ((1 << (_la - 559)) & ((1 << (Cobol85Parser.EXECCICSLINE - 559)) | (1 << (Cobol85Parser.EXECSQLIMSLINE - 559)) | (1 << (Cobol85Parser.EXECSQLLINE - 559)))) !== 0)) {
	            this.state = 4715;
	            this.statement();
	            this.state = 4720;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4721;
	        this.match(Cobol85Parser.END_PERFORM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	performProcedureStatement() {
	    let localctx = new PerformProcedureStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 798, Cobol85Parser.RULE_performProcedureStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4723;
	        this.procedureName();
	        this.state = 4726;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.THROUGH || _la===Cobol85Parser.THRU) {
	            this.state = 4724;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.THROUGH || _la===Cobol85Parser.THRU)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4725;
	            this.procedureName();
	        }

	        this.state = 4729;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,689,this._ctx);
	        if(la_===1) {
	            this.state = 4728;
	            this.performType();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	performType() {
	    let localctx = new PerformTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 800, Cobol85Parser.RULE_performType);
	    try {
	        this.state = 4734;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,690,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4731;
	            this.performTimes();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4732;
	            this.performUntil();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4733;
	            this.performVarying();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	performTimes() {
	    let localctx = new PerformTimesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 802, Cobol85Parser.RULE_performTimes);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4738;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,691,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4736;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 4737;
	            this.integerLiteral();
	            break;

	        }
	        this.state = 4740;
	        this.match(Cobol85Parser.TIMES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	performUntil() {
	    let localctx = new PerformUntilContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 804, Cobol85Parser.RULE_performUntil);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4743;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.TEST || _la===Cobol85Parser.WITH) {
	            this.state = 4742;
	            this.performTestClause();
	        }

	        this.state = 4745;
	        this.match(Cobol85Parser.UNTIL);
	        this.state = 4746;
	        this.condition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	performVarying() {
	    let localctx = new PerformVaryingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 806, Cobol85Parser.RULE_performVarying);
	    try {
	        this.state = 4755;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.TEST:
	        case Cobol85Parser.WITH:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4748;
	            this.performTestClause();
	            this.state = 4749;
	            this.performVaryingClause();
	            break;
	        case Cobol85Parser.VARYING:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4751;
	            this.performVaryingClause();
	            this.state = 4753;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,693,this._ctx);
	            if(la_===1) {
	                this.state = 4752;
	                this.performTestClause();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	performVaryingClause() {
	    let localctx = new PerformVaryingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 808, Cobol85Parser.RULE_performVaryingClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4757;
	        this.match(Cobol85Parser.VARYING);
	        this.state = 4758;
	        this.performVaryingPhrase();
	        this.state = 4762;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.AFTER) {
	            this.state = 4759;
	            this.performAfter();
	            this.state = 4764;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	performVaryingPhrase() {
	    let localctx = new PerformVaryingPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 810, Cobol85Parser.RULE_performVaryingPhrase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4767;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,696,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4765;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 4766;
	            this.literal();
	            break;

	        }
	        this.state = 4769;
	        this.performFrom();
	        this.state = 4770;
	        this.performBy();
	        this.state = 4771;
	        this.performUntil();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	performAfter() {
	    let localctx = new PerformAfterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 812, Cobol85Parser.RULE_performAfter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4773;
	        this.match(Cobol85Parser.AFTER);
	        this.state = 4774;
	        this.performVaryingPhrase();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	performFrom() {
	    let localctx = new PerformFromContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 814, Cobol85Parser.RULE_performFrom);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4776;
	        this.match(Cobol85Parser.FROM);
	        this.state = 4780;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,697,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4777;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 4778;
	            this.literal();
	            break;

	        case 3:
	            this.state = 4779;
	            this.arithmeticExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	performBy() {
	    let localctx = new PerformByContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 816, Cobol85Parser.RULE_performBy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4782;
	        this.match(Cobol85Parser.BY);
	        this.state = 4786;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,698,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4783;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 4784;
	            this.literal();
	            break;

	        case 3:
	            this.state = 4785;
	            this.arithmeticExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	performTestClause() {
	    let localctx = new PerformTestClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 818, Cobol85Parser.RULE_performTestClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4789;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.WITH) {
	            this.state = 4788;
	            this.match(Cobol85Parser.WITH);
	        }

	        this.state = 4791;
	        this.match(Cobol85Parser.TEST);
	        this.state = 4792;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.AFTER || _la===Cobol85Parser.BEFORE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	purgeStatement() {
	    let localctx = new PurgeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 820, Cobol85Parser.RULE_purgeStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4794;
	        this.match(Cobol85Parser.PURGE);
	        this.state = 4796; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4795;
	            this.cdName();
	            this.state = 4798; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la===Cobol85Parser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	readStatement() {
	    let localctx = new ReadStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 822, Cobol85Parser.RULE_readStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4800;
	        this.match(Cobol85Parser.READ);
	        this.state = 4801;
	        this.fileName();
	        this.state = 4803;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.NEXT) {
	            this.state = 4802;
	            this.match(Cobol85Parser.NEXT);
	        }

	        this.state = 4806;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.RECORD) {
	            this.state = 4805;
	            this.match(Cobol85Parser.RECORD);
	        }

	        this.state = 4809;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.INTO) {
	            this.state = 4808;
	            this.readInto();
	        }

	        this.state = 4812;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,704,this._ctx);
	        if(la_===1) {
	            this.state = 4811;
	            this.readWith();

	        }
	        this.state = 4815;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.KEY) {
	            this.state = 4814;
	            this.readKey();
	        }

	        this.state = 4818;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,706,this._ctx);
	        if(la_===1) {
	            this.state = 4817;
	            this.invalidKeyPhrase();

	        }
	        this.state = 4821;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,707,this._ctx);
	        if(la_===1) {
	            this.state = 4820;
	            this.notInvalidKeyPhrase();

	        }
	        this.state = 4824;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,708,this._ctx);
	        if(la_===1) {
	            this.state = 4823;
	            this.atEndPhrase();

	        }
	        this.state = 4827;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,709,this._ctx);
	        if(la_===1) {
	            this.state = 4826;
	            this.notAtEndPhrase();

	        }
	        this.state = 4830;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,710,this._ctx);
	        if(la_===1) {
	            this.state = 4829;
	            this.match(Cobol85Parser.END_READ);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	readInto() {
	    let localctx = new ReadIntoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 824, Cobol85Parser.RULE_readInto);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4832;
	        this.match(Cobol85Parser.INTO);
	        this.state = 4833;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	readWith() {
	    let localctx = new ReadWithContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 826, Cobol85Parser.RULE_readWith);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4836;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.WITH) {
	            this.state = 4835;
	            this.match(Cobol85Parser.WITH);
	        }

	        this.state = 4841;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.NO:
	            this.state = 4838;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.KEPT || _la===Cobol85Parser.NO)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4839;
	            this.match(Cobol85Parser.LOCK);
	            break;
	        case Cobol85Parser.WAIT:
	            this.state = 4840;
	            this.match(Cobol85Parser.WAIT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	readKey() {
	    let localctx = new ReadKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 828, Cobol85Parser.RULE_readKey);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4843;
	        this.match(Cobol85Parser.KEY);
	        this.state = 4845;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 4844;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 4847;
	        this.qualifiedDataName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	receiveStatement() {
	    let localctx = new ReceiveStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 830, Cobol85Parser.RULE_receiveStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4849;
	        this.match(Cobol85Parser.RECEIVE);
	        this.state = 4852;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,714,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4850;
	            this.receiveFromStatement();
	            break;

	        case 2:
	            this.state = 4851;
	            this.receiveIntoStatement();
	            break;

	        }
	        this.state = 4855;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,715,this._ctx);
	        if(la_===1) {
	            this.state = 4854;
	            this.onExceptionClause();

	        }
	        this.state = 4858;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,716,this._ctx);
	        if(la_===1) {
	            this.state = 4857;
	            this.notOnExceptionClause();

	        }
	        this.state = 4861;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,717,this._ctx);
	        if(la_===1) {
	            this.state = 4860;
	            this.match(Cobol85Parser.END_RECEIVE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	receiveFromStatement() {
	    let localctx = new ReceiveFromStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 832, Cobol85Parser.RULE_receiveFromStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4863;
	        this.dataName();
	        this.state = 4864;
	        this.match(Cobol85Parser.FROM);
	        this.state = 4865;
	        this.receiveFrom();
	        this.state = 4873;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,719,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4871;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case Cobol85Parser.BEFORE:
	                    this.state = 4866;
	                    this.receiveBefore();
	                    break;
	                case Cobol85Parser.NO:
	                case Cobol85Parser.WITH:
	                    this.state = 4867;
	                    this.receiveWith();
	                    break;
	                case Cobol85Parser.THREAD:
	                    this.state = 4868;
	                    this.receiveThread();
	                    break;
	                case Cobol85Parser.SIZE:
	                    this.state = 4869;
	                    this.receiveSize();
	                    break;
	                case Cobol85Parser.STATUS:
	                    this.state = 4870;
	                    this.receiveStatus();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 4875;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,719,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	receiveFrom() {
	    let localctx = new ReceiveFromContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 834, Cobol85Parser.RULE_receiveFrom);
	    try {
	        this.state = 4882;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.THREAD:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4876;
	            this.match(Cobol85Parser.THREAD);
	            this.state = 4877;
	            this.dataName();
	            break;
	        case Cobol85Parser.LAST:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4878;
	            this.match(Cobol85Parser.LAST);
	            this.state = 4879;
	            this.match(Cobol85Parser.THREAD);
	            break;
	        case Cobol85Parser.ANY:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4880;
	            this.match(Cobol85Parser.ANY);
	            this.state = 4881;
	            this.match(Cobol85Parser.THREAD);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	receiveIntoStatement() {
	    let localctx = new ReceiveIntoStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 836, Cobol85Parser.RULE_receiveIntoStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4884;
	        this.cdName();
	        this.state = 4885;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.MESSAGE || _la===Cobol85Parser.SEGMENT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4887;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.INTO) {
	            this.state = 4886;
	            this.match(Cobol85Parser.INTO);
	        }

	        this.state = 4889;
	        this.identifier();
	        this.state = 4891;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.NO) {
	            this.state = 4890;
	            this.receiveNoData();
	        }

	        this.state = 4894;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,723,this._ctx);
	        if(la_===1) {
	            this.state = 4893;
	            this.receiveWithData();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	receiveNoData() {
	    let localctx = new ReceiveNoDataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 838, Cobol85Parser.RULE_receiveNoData);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4896;
	        this.match(Cobol85Parser.NO);
	        this.state = 4897;
	        this.match(Cobol85Parser.DATA);
	        this.state = 4901;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,724,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4898;
	                this.statement(); 
	            }
	            this.state = 4903;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,724,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	receiveWithData() {
	    let localctx = new ReceiveWithDataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 840, Cobol85Parser.RULE_receiveWithData);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4904;
	        this.match(Cobol85Parser.WITH);
	        this.state = 4905;
	        this.match(Cobol85Parser.DATA);
	        this.state = 4909;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,725,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4906;
	                this.statement(); 
	            }
	            this.state = 4911;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,725,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	receiveBefore() {
	    let localctx = new ReceiveBeforeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 842, Cobol85Parser.RULE_receiveBefore);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4912;
	        this.match(Cobol85Parser.BEFORE);
	        this.state = 4914;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,726,this._ctx);
	        if(la_===1) {
	            this.state = 4913;
	            this.match(Cobol85Parser.TIME);

	        }
	        this.state = 4918;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,727,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4916;
	            this.numericLiteral();
	            break;

	        case 2:
	            this.state = 4917;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	receiveWith() {
	    let localctx = new ReceiveWithContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 844, Cobol85Parser.RULE_receiveWith);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4921;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.WITH) {
	            this.state = 4920;
	            this.match(Cobol85Parser.WITH);
	        }

	        this.state = 4923;
	        this.match(Cobol85Parser.NO);
	        this.state = 4924;
	        this.match(Cobol85Parser.WAIT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	receiveThread() {
	    let localctx = new ReceiveThreadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 846, Cobol85Parser.RULE_receiveThread);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4926;
	        this.match(Cobol85Parser.THREAD);
	        this.state = 4928;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IN) {
	            this.state = 4927;
	            this.match(Cobol85Parser.IN);
	        }

	        this.state = 4930;
	        this.dataName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	receiveSize() {
	    let localctx = new ReceiveSizeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 848, Cobol85Parser.RULE_receiveSize);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4932;
	        this.match(Cobol85Parser.SIZE);
	        this.state = 4934;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IN) {
	            this.state = 4933;
	            this.match(Cobol85Parser.IN);
	        }

	        this.state = 4938;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,731,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4936;
	            this.numericLiteral();
	            break;

	        case 2:
	            this.state = 4937;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	receiveStatus() {
	    let localctx = new ReceiveStatusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 850, Cobol85Parser.RULE_receiveStatus);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4940;
	        this.match(Cobol85Parser.STATUS);
	        this.state = 4942;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IN) {
	            this.state = 4941;
	            this.match(Cobol85Parser.IN);
	        }

	        this.state = 4944;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	releaseStatement() {
	    let localctx = new ReleaseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 852, Cobol85Parser.RULE_releaseStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4946;
	        this.match(Cobol85Parser.RELEASE);
	        this.state = 4947;
	        this.recordName();
	        this.state = 4950;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FROM) {
	            this.state = 4948;
	            this.match(Cobol85Parser.FROM);
	            this.state = 4949;
	            this.qualifiedDataName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 854, Cobol85Parser.RULE_returnStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4952;
	        this.match(Cobol85Parser.RETURN);
	        this.state = 4953;
	        this.fileName();
	        this.state = 4955;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.RECORD) {
	            this.state = 4954;
	            this.match(Cobol85Parser.RECORD);
	        }

	        this.state = 4958;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.INTO) {
	            this.state = 4957;
	            this.returnInto();
	        }

	        this.state = 4960;
	        this.atEndPhrase();
	        this.state = 4962;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,736,this._ctx);
	        if(la_===1) {
	            this.state = 4961;
	            this.notAtEndPhrase();

	        }
	        this.state = 4965;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,737,this._ctx);
	        if(la_===1) {
	            this.state = 4964;
	            this.match(Cobol85Parser.END_RETURN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnInto() {
	    let localctx = new ReturnIntoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 856, Cobol85Parser.RULE_returnInto);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4967;
	        this.match(Cobol85Parser.INTO);
	        this.state = 4968;
	        this.qualifiedDataName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rewriteStatement() {
	    let localctx = new RewriteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 858, Cobol85Parser.RULE_rewriteStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4970;
	        this.match(Cobol85Parser.REWRITE);
	        this.state = 4971;
	        this.recordName();
	        this.state = 4973;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FROM) {
	            this.state = 4972;
	            this.rewriteFrom();
	        }

	        this.state = 4976;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,739,this._ctx);
	        if(la_===1) {
	            this.state = 4975;
	            this.invalidKeyPhrase();

	        }
	        this.state = 4979;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,740,this._ctx);
	        if(la_===1) {
	            this.state = 4978;
	            this.notInvalidKeyPhrase();

	        }
	        this.state = 4982;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,741,this._ctx);
	        if(la_===1) {
	            this.state = 4981;
	            this.match(Cobol85Parser.END_REWRITE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rewriteFrom() {
	    let localctx = new RewriteFromContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 860, Cobol85Parser.RULE_rewriteFrom);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4984;
	        this.match(Cobol85Parser.FROM);
	        this.state = 4985;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	searchStatement() {
	    let localctx = new SearchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 862, Cobol85Parser.RULE_searchStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4987;
	        this.match(Cobol85Parser.SEARCH);
	        this.state = 4989;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ALL) {
	            this.state = 4988;
	            this.match(Cobol85Parser.ALL);
	        }

	        this.state = 4991;
	        this.qualifiedDataName();
	        this.state = 4993;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.VARYING) {
	            this.state = 4992;
	            this.searchVarying();
	        }

	        this.state = 4996;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.AT || _la===Cobol85Parser.END) {
	            this.state = 4995;
	            this.atEndPhrase();
	        }

	        this.state = 4999; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4998;
	        		this.searchWhen();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 5001; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,745, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 5004;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,746,this._ctx);
	        if(la_===1) {
	            this.state = 5003;
	            this.match(Cobol85Parser.END_SEARCH);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	searchVarying() {
	    let localctx = new SearchVaryingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 864, Cobol85Parser.RULE_searchVarying);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5006;
	        this.match(Cobol85Parser.VARYING);
	        this.state = 5007;
	        this.qualifiedDataName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	searchWhen() {
	    let localctx = new SearchWhenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 866, Cobol85Parser.RULE_searchWhen);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5009;
	        this.match(Cobol85Parser.WHEN);
	        this.state = 5010;
	        this.condition();
	        this.state = 5019;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.NEXT:
	            this.state = 5011;
	            this.match(Cobol85Parser.NEXT);
	            this.state = 5012;
	            this.match(Cobol85Parser.SENTENCE);
	            break;
	        case Cobol85Parser.ACCEPT:
	        case Cobol85Parser.ADD:
	        case Cobol85Parser.ALTER:
	        case Cobol85Parser.AT:
	        case Cobol85Parser.CALL:
	        case Cobol85Parser.CANCEL:
	        case Cobol85Parser.CLOSE:
	        case Cobol85Parser.COMPUTE:
	        case Cobol85Parser.CONTINUE:
	        case Cobol85Parser.DELETE:
	        case Cobol85Parser.DISABLE:
	        case Cobol85Parser.DISPLAY:
	        case Cobol85Parser.DIVIDE:
	        case Cobol85Parser.ELSE:
	        case Cobol85Parser.ENABLE:
	        case Cobol85Parser.END:
	        case Cobol85Parser.END_ACCEPT:
	        case Cobol85Parser.END_ADD:
	        case Cobol85Parser.END_CALL:
	        case Cobol85Parser.END_COMPUTE:
	        case Cobol85Parser.END_DELETE:
	        case Cobol85Parser.END_DIVIDE:
	        case Cobol85Parser.END_EVALUATE:
	        case Cobol85Parser.END_IF:
	        case Cobol85Parser.END_MULTIPLY:
	        case Cobol85Parser.END_PERFORM:
	        case Cobol85Parser.END_READ:
	        case Cobol85Parser.END_RECEIVE:
	        case Cobol85Parser.END_RETURN:
	        case Cobol85Parser.END_REWRITE:
	        case Cobol85Parser.END_SEARCH:
	        case Cobol85Parser.END_START:
	        case Cobol85Parser.END_STRING:
	        case Cobol85Parser.END_SUBTRACT:
	        case Cobol85Parser.END_UNSTRING:
	        case Cobol85Parser.END_WRITE:
	        case Cobol85Parser.ENTRY:
	        case Cobol85Parser.EVALUATE:
	        case Cobol85Parser.EXCEPTION:
	        case Cobol85Parser.EXHIBIT:
	        case Cobol85Parser.EXIT:
	        case Cobol85Parser.GENERATE:
	        case Cobol85Parser.GOBACK:
	        case Cobol85Parser.GO:
	        case Cobol85Parser.IF:
	        case Cobol85Parser.INITIALIZE:
	        case Cobol85Parser.INITIATE:
	        case Cobol85Parser.INSPECT:
	        case Cobol85Parser.INVALID:
	        case Cobol85Parser.MERGE:
	        case Cobol85Parser.MOVE:
	        case Cobol85Parser.MULTIPLY:
	        case Cobol85Parser.NOT:
	        case Cobol85Parser.ON:
	        case Cobol85Parser.OPEN:
	        case Cobol85Parser.PERFORM:
	        case Cobol85Parser.PURGE:
	        case Cobol85Parser.READ:
	        case Cobol85Parser.RECEIVE:
	        case Cobol85Parser.RELEASE:
	        case Cobol85Parser.RETURN:
	        case Cobol85Parser.REWRITE:
	        case Cobol85Parser.SEARCH:
	        case Cobol85Parser.SEND:
	        case Cobol85Parser.SET:
	        case Cobol85Parser.SORT:
	        case Cobol85Parser.START:
	        case Cobol85Parser.STOP:
	        case Cobol85Parser.STRING:
	        case Cobol85Parser.SUBTRACT:
	        case Cobol85Parser.TERMINATE:
	        case Cobol85Parser.UNSTRING:
	        case Cobol85Parser.WHEN:
	        case Cobol85Parser.WITH:
	        case Cobol85Parser.WRITE:
	        case Cobol85Parser.DOT_FS:
	        case Cobol85Parser.EXECCICSLINE:
	        case Cobol85Parser.EXECSQLIMSLINE:
	        case Cobol85Parser.EXECSQLLINE:
	            this.state = 5016;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,747,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 5013;
	                    this.statement(); 
	                }
	                this.state = 5018;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,747,this._ctx);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sendStatement() {
	    let localctx = new SendStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 868, Cobol85Parser.RULE_sendStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5021;
	        this.match(Cobol85Parser.SEND);
	        this.state = 5024;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.ABORT:
	        case Cobol85Parser.ADDRESS:
	        case Cobol85Parser.ALL:
	        case Cobol85Parser.AS:
	        case Cobol85Parser.ASCII:
	        case Cobol85Parser.ASSOCIATED_DATA:
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	        case Cobol85Parser.ATTRIBUTE:
	        case Cobol85Parser.AUTO:
	        case Cobol85Parser.AUTO_SKIP:
	        case Cobol85Parser.BACKGROUND_COLOR:
	        case Cobol85Parser.BACKGROUND_COLOUR:
	        case Cobol85Parser.BEEP:
	        case Cobol85Parser.BELL:
	        case Cobol85Parser.BINARY:
	        case Cobol85Parser.BIT:
	        case Cobol85Parser.BLINK:
	        case Cobol85Parser.BOUNDS:
	        case Cobol85Parser.CAPABLE:
	        case Cobol85Parser.CCSVERSION:
	        case Cobol85Parser.CHANGED:
	        case Cobol85Parser.CHANNEL:
	        case Cobol85Parser.CLOSE_DISPOSITION:
	        case Cobol85Parser.COBOL:
	        case Cobol85Parser.COMMITMENT:
	        case Cobol85Parser.CONTROL_POINT:
	        case Cobol85Parser.CONVENTION:
	        case Cobol85Parser.CRUNCH:
	        case Cobol85Parser.CURSOR:
	        case Cobol85Parser.DATE:
	        case Cobol85Parser.DAY:
	        case Cobol85Parser.DAY_OF_WEEK:
	        case Cobol85Parser.DEBUG_CONTENTS:
	        case Cobol85Parser.DEBUG_ITEM:
	        case Cobol85Parser.DEBUG_LINE:
	        case Cobol85Parser.DEBUG_NAME:
	        case Cobol85Parser.DEBUG_SUB_1:
	        case Cobol85Parser.DEBUG_SUB_2:
	        case Cobol85Parser.DEBUG_SUB_3:
	        case Cobol85Parser.DEFAULT:
	        case Cobol85Parser.DEFAULT_DISPLAY:
	        case Cobol85Parser.DEFINITION:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.DISK:
	        case Cobol85Parser.DONTCARE:
	        case Cobol85Parser.DOUBLE:
	        case Cobol85Parser.EBCDIC:
	        case Cobol85Parser.EMPTY_CHECK:
	        case Cobol85Parser.ENTER:
	        case Cobol85Parser.ENTRY_PROCEDURE:
	        case Cobol85Parser.ERASE:
	        case Cobol85Parser.EOL:
	        case Cobol85Parser.EOS:
	        case Cobol85Parser.ESCAPE:
	        case Cobol85Parser.EVENT:
	        case Cobol85Parser.EXCLUSIVE:
	        case Cobol85Parser.EXPORT:
	        case Cobol85Parser.EXTENDED:
	        case Cobol85Parser.FALSE:
	        case Cobol85Parser.FOREGROUND_COLOR:
	        case Cobol85Parser.FOREGROUND_COLOUR:
	        case Cobol85Parser.FULL:
	        case Cobol85Parser.FUNCTION:
	        case Cobol85Parser.FUNCTIONNAME:
	        case Cobol85Parser.FUNCTION_POINTER:
	        case Cobol85Parser.GRID:
	        case Cobol85Parser.HIGHLIGHT:
	        case Cobol85Parser.HIGH_VALUE:
	        case Cobol85Parser.HIGH_VALUES:
	        case Cobol85Parser.IMPLICIT:
	        case Cobol85Parser.IMPORT:
	        case Cobol85Parser.INTEGER:
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.KEYBOARD:
	        case Cobol85Parser.LANGUAGE:
	        case Cobol85Parser.LB:
	        case Cobol85Parser.LD:
	        case Cobol85Parser.LEFTLINE:
	        case Cobol85Parser.LENGTH:
	        case Cobol85Parser.LENGTH_CHECK:
	        case Cobol85Parser.LIBACCESS:
	        case Cobol85Parser.LIBPARAMETER:
	        case Cobol85Parser.LIBRARY:
	        case Cobol85Parser.LINAGE_COUNTER:
	        case Cobol85Parser.LINE_COUNTER:
	        case Cobol85Parser.LIST:
	        case Cobol85Parser.LOCAL:
	        case Cobol85Parser.LONG_DATE:
	        case Cobol85Parser.LONG_TIME:
	        case Cobol85Parser.LOWER:
	        case Cobol85Parser.LOWLIGHT:
	        case Cobol85Parser.LOW_VALUE:
	        case Cobol85Parser.LOW_VALUES:
	        case Cobol85Parser.MMDDYYYY:
	        case Cobol85Parser.NAMED:
	        case Cobol85Parser.NATIONAL:
	        case Cobol85Parser.NATIONAL_EDITED:
	        case Cobol85Parser.NETWORK:
	        case Cobol85Parser.NO_ECHO:
	        case Cobol85Parser.NULL_:
	        case Cobol85Parser.NULLS:
	        case Cobol85Parser.NUMERIC_DATE:
	        case Cobol85Parser.NUMERIC_TIME:
	        case Cobol85Parser.ODT:
	        case Cobol85Parser.ORDERLY:
	        case Cobol85Parser.OVERLINE:
	        case Cobol85Parser.OWN:
	        case Cobol85Parser.PAGE_COUNTER:
	        case Cobol85Parser.PASSWORD:
	        case Cobol85Parser.PORT:
	        case Cobol85Parser.PRINTER:
	        case Cobol85Parser.PRIVATE:
	        case Cobol85Parser.PROCESS:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.PROMPT:
	        case Cobol85Parser.QUOTE:
	        case Cobol85Parser.QUOTES:
	        case Cobol85Parser.READER:
	        case Cobol85Parser.REMOTE:
	        case Cobol85Parser.REAL:
	        case Cobol85Parser.RECEIVED:
	        case Cobol85Parser.RECURSIVE:
	        case Cobol85Parser.REF:
	        case Cobol85Parser.REMOVE:
	        case Cobol85Parser.REQUIRED:
	        case Cobol85Parser.REVERSE_VIDEO:
	        case Cobol85Parser.RETURN_CODE:
	        case Cobol85Parser.SAVE:
	        case Cobol85Parser.SECURE:
	        case Cobol85Parser.SHARED:
	        case Cobol85Parser.SHAREDBYALL:
	        case Cobol85Parser.SHAREDBYRUNUNIT:
	        case Cobol85Parser.SHARING:
	        case Cobol85Parser.SHIFT_IN:
	        case Cobol85Parser.SHIFT_OUT:
	        case Cobol85Parser.SHORT_DATE:
	        case Cobol85Parser.SORT_CONTROL:
	        case Cobol85Parser.SORT_CORE_SIZE:
	        case Cobol85Parser.SORT_FILE_SIZE:
	        case Cobol85Parser.SORT_MESSAGE:
	        case Cobol85Parser.SORT_MODE_SIZE:
	        case Cobol85Parser.SORT_RETURN:
	        case Cobol85Parser.SPACE:
	        case Cobol85Parser.SPACES:
	        case Cobol85Parser.SYMBOL:
	        case Cobol85Parser.TALLY:
	        case Cobol85Parser.TASK:
	        case Cobol85Parser.THREAD:
	        case Cobol85Parser.THREAD_LOCAL:
	        case Cobol85Parser.TIME:
	        case Cobol85Parser.TIMER:
	        case Cobol85Parser.TODAYS_DATE:
	        case Cobol85Parser.TODAYS_NAME:
	        case Cobol85Parser.TRUE:
	        case Cobol85Parser.TRUNCATED:
	        case Cobol85Parser.TYPEDEF:
	        case Cobol85Parser.UNDERLINE:
	        case Cobol85Parser.VIRTUAL:
	        case Cobol85Parser.WAIT:
	        case Cobol85Parser.WHEN_COMPILED:
	        case Cobol85Parser.YEAR:
	        case Cobol85Parser.YYYYMMDD:
	        case Cobol85Parser.YYYYDDD:
	        case Cobol85Parser.ZERO:
	        case Cobol85Parser.ZERO_FILL:
	        case Cobol85Parser.ZEROS:
	        case Cobol85Parser.ZEROES:
	        case Cobol85Parser.NONNUMERICLITERAL:
	        case Cobol85Parser.LEVEL_NUMBER_66:
	        case Cobol85Parser.LEVEL_NUMBER_77:
	        case Cobol85Parser.LEVEL_NUMBER_88:
	        case Cobol85Parser.INTEGERLITERAL:
	        case Cobol85Parser.NUMERICLITERAL:
	        case Cobol85Parser.IDENTIFIER:
	            this.state = 5022;
	            this.sendStatementSync();
	            break;
	        case Cobol85Parser.TO:
	            this.state = 5023;
	            this.sendStatementAsync();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 5027;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,750,this._ctx);
	        if(la_===1) {
	            this.state = 5026;
	            this.onExceptionClause();

	        }
	        this.state = 5030;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,751,this._ctx);
	        if(la_===1) {
	            this.state = 5029;
	            this.notOnExceptionClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sendStatementSync() {
	    let localctx = new SendStatementSyncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 870, Cobol85Parser.RULE_sendStatementSync);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5034;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,752,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5032;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 5033;
	            this.literal();
	            break;

	        }
	        this.state = 5037;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FROM) {
	            this.state = 5036;
	            this.sendFromPhrase();
	        }

	        this.state = 5040;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,754,this._ctx);
	        if(la_===1) {
	            this.state = 5039;
	            this.sendWithPhrase();

	        }
	        this.state = 5043;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.REPLACING) {
	            this.state = 5042;
	            this.sendReplacingPhrase();
	        }

	        this.state = 5046;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.AFTER || _la===Cobol85Parser.BEFORE) {
	            this.state = 5045;
	            this.sendAdvancingPhrase();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sendStatementAsync() {
	    let localctx = new SendStatementAsyncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 872, Cobol85Parser.RULE_sendStatementAsync);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5048;
	        this.match(Cobol85Parser.TO);
	        this.state = 5049;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.BOTTOM || _la===Cobol85Parser.TOP)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5050;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sendFromPhrase() {
	    let localctx = new SendFromPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 874, Cobol85Parser.RULE_sendFromPhrase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5052;
	        this.match(Cobol85Parser.FROM);
	        this.state = 5053;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sendWithPhrase() {
	    let localctx = new SendWithPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 876, Cobol85Parser.RULE_sendWithPhrase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5055;
	        this.match(Cobol85Parser.WITH);
	        this.state = 5060;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.EGI:
	            this.state = 5056;
	            this.match(Cobol85Parser.EGI);
	            break;
	        case Cobol85Parser.EMI:
	            this.state = 5057;
	            this.match(Cobol85Parser.EMI);
	            break;
	        case Cobol85Parser.ESI:
	            this.state = 5058;
	            this.match(Cobol85Parser.ESI);
	            break;
	        case Cobol85Parser.ABORT:
	        case Cobol85Parser.ADDRESS:
	        case Cobol85Parser.AS:
	        case Cobol85Parser.ASCII:
	        case Cobol85Parser.ASSOCIATED_DATA:
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	        case Cobol85Parser.ATTRIBUTE:
	        case Cobol85Parser.AUTO:
	        case Cobol85Parser.AUTO_SKIP:
	        case Cobol85Parser.BACKGROUND_COLOR:
	        case Cobol85Parser.BACKGROUND_COLOUR:
	        case Cobol85Parser.BEEP:
	        case Cobol85Parser.BELL:
	        case Cobol85Parser.BINARY:
	        case Cobol85Parser.BIT:
	        case Cobol85Parser.BLINK:
	        case Cobol85Parser.BOUNDS:
	        case Cobol85Parser.CAPABLE:
	        case Cobol85Parser.CCSVERSION:
	        case Cobol85Parser.CHANGED:
	        case Cobol85Parser.CHANNEL:
	        case Cobol85Parser.CLOSE_DISPOSITION:
	        case Cobol85Parser.COBOL:
	        case Cobol85Parser.COMMITMENT:
	        case Cobol85Parser.CONTROL_POINT:
	        case Cobol85Parser.CONVENTION:
	        case Cobol85Parser.CRUNCH:
	        case Cobol85Parser.CURSOR:
	        case Cobol85Parser.DATE:
	        case Cobol85Parser.DAY:
	        case Cobol85Parser.DAY_OF_WEEK:
	        case Cobol85Parser.DEBUG_CONTENTS:
	        case Cobol85Parser.DEBUG_ITEM:
	        case Cobol85Parser.DEBUG_LINE:
	        case Cobol85Parser.DEBUG_NAME:
	        case Cobol85Parser.DEBUG_SUB_1:
	        case Cobol85Parser.DEBUG_SUB_2:
	        case Cobol85Parser.DEBUG_SUB_3:
	        case Cobol85Parser.DEFAULT:
	        case Cobol85Parser.DEFAULT_DISPLAY:
	        case Cobol85Parser.DEFINITION:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.DISK:
	        case Cobol85Parser.DONTCARE:
	        case Cobol85Parser.DOUBLE:
	        case Cobol85Parser.EBCDIC:
	        case Cobol85Parser.EMPTY_CHECK:
	        case Cobol85Parser.ENTER:
	        case Cobol85Parser.ENTRY_PROCEDURE:
	        case Cobol85Parser.ERASE:
	        case Cobol85Parser.EOL:
	        case Cobol85Parser.EOS:
	        case Cobol85Parser.ESCAPE:
	        case Cobol85Parser.EVENT:
	        case Cobol85Parser.EXCLUSIVE:
	        case Cobol85Parser.EXPORT:
	        case Cobol85Parser.EXTENDED:
	        case Cobol85Parser.FOREGROUND_COLOR:
	        case Cobol85Parser.FOREGROUND_COLOUR:
	        case Cobol85Parser.FULL:
	        case Cobol85Parser.FUNCTION:
	        case Cobol85Parser.FUNCTIONNAME:
	        case Cobol85Parser.FUNCTION_POINTER:
	        case Cobol85Parser.GRID:
	        case Cobol85Parser.HIGHLIGHT:
	        case Cobol85Parser.IMPLICIT:
	        case Cobol85Parser.IMPORT:
	        case Cobol85Parser.INTEGER:
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.KEYBOARD:
	        case Cobol85Parser.LANGUAGE:
	        case Cobol85Parser.LB:
	        case Cobol85Parser.LD:
	        case Cobol85Parser.LEFTLINE:
	        case Cobol85Parser.LENGTH:
	        case Cobol85Parser.LENGTH_CHECK:
	        case Cobol85Parser.LIBACCESS:
	        case Cobol85Parser.LIBPARAMETER:
	        case Cobol85Parser.LIBRARY:
	        case Cobol85Parser.LINAGE_COUNTER:
	        case Cobol85Parser.LINE_COUNTER:
	        case Cobol85Parser.LIST:
	        case Cobol85Parser.LOCAL:
	        case Cobol85Parser.LONG_DATE:
	        case Cobol85Parser.LONG_TIME:
	        case Cobol85Parser.LOWER:
	        case Cobol85Parser.LOWLIGHT:
	        case Cobol85Parser.MMDDYYYY:
	        case Cobol85Parser.NAMED:
	        case Cobol85Parser.NATIONAL:
	        case Cobol85Parser.NATIONAL_EDITED:
	        case Cobol85Parser.NETWORK:
	        case Cobol85Parser.NO_ECHO:
	        case Cobol85Parser.NUMERIC_DATE:
	        case Cobol85Parser.NUMERIC_TIME:
	        case Cobol85Parser.ODT:
	        case Cobol85Parser.ORDERLY:
	        case Cobol85Parser.OVERLINE:
	        case Cobol85Parser.OWN:
	        case Cobol85Parser.PAGE_COUNTER:
	        case Cobol85Parser.PASSWORD:
	        case Cobol85Parser.PORT:
	        case Cobol85Parser.PRINTER:
	        case Cobol85Parser.PRIVATE:
	        case Cobol85Parser.PROCESS:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.PROMPT:
	        case Cobol85Parser.READER:
	        case Cobol85Parser.REMOTE:
	        case Cobol85Parser.REAL:
	        case Cobol85Parser.RECEIVED:
	        case Cobol85Parser.RECURSIVE:
	        case Cobol85Parser.REF:
	        case Cobol85Parser.REMOVE:
	        case Cobol85Parser.REQUIRED:
	        case Cobol85Parser.REVERSE_VIDEO:
	        case Cobol85Parser.RETURN_CODE:
	        case Cobol85Parser.SAVE:
	        case Cobol85Parser.SECURE:
	        case Cobol85Parser.SHARED:
	        case Cobol85Parser.SHAREDBYALL:
	        case Cobol85Parser.SHAREDBYRUNUNIT:
	        case Cobol85Parser.SHARING:
	        case Cobol85Parser.SHIFT_IN:
	        case Cobol85Parser.SHIFT_OUT:
	        case Cobol85Parser.SHORT_DATE:
	        case Cobol85Parser.SORT_CONTROL:
	        case Cobol85Parser.SORT_CORE_SIZE:
	        case Cobol85Parser.SORT_FILE_SIZE:
	        case Cobol85Parser.SORT_MESSAGE:
	        case Cobol85Parser.SORT_MODE_SIZE:
	        case Cobol85Parser.SORT_RETURN:
	        case Cobol85Parser.SYMBOL:
	        case Cobol85Parser.TALLY:
	        case Cobol85Parser.TASK:
	        case Cobol85Parser.THREAD:
	        case Cobol85Parser.THREAD_LOCAL:
	        case Cobol85Parser.TIME:
	        case Cobol85Parser.TIMER:
	        case Cobol85Parser.TODAYS_DATE:
	        case Cobol85Parser.TODAYS_NAME:
	        case Cobol85Parser.TRUNCATED:
	        case Cobol85Parser.TYPEDEF:
	        case Cobol85Parser.UNDERLINE:
	        case Cobol85Parser.VIRTUAL:
	        case Cobol85Parser.WAIT:
	        case Cobol85Parser.WHEN_COMPILED:
	        case Cobol85Parser.YEAR:
	        case Cobol85Parser.YYYYMMDD:
	        case Cobol85Parser.YYYYDDD:
	        case Cobol85Parser.ZERO_FILL:
	        case Cobol85Parser.LEVEL_NUMBER_66:
	        case Cobol85Parser.LEVEL_NUMBER_77:
	        case Cobol85Parser.LEVEL_NUMBER_88:
	        case Cobol85Parser.INTEGERLITERAL:
	        case Cobol85Parser.IDENTIFIER:
	            this.state = 5059;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sendReplacingPhrase() {
	    let localctx = new SendReplacingPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 878, Cobol85Parser.RULE_sendReplacingPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5062;
	        this.match(Cobol85Parser.REPLACING);
	        this.state = 5064;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.LINE) {
	            this.state = 5063;
	            this.match(Cobol85Parser.LINE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sendAdvancingPhrase() {
	    let localctx = new SendAdvancingPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 880, Cobol85Parser.RULE_sendAdvancingPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5066;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.AFTER || _la===Cobol85Parser.BEFORE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5068;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ADVANCING) {
	            this.state = 5067;
	            this.match(Cobol85Parser.ADVANCING);
	        }

	        this.state = 5073;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,760,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5070;
	            this.sendAdvancingPage();
	            break;

	        case 2:
	            this.state = 5071;
	            this.sendAdvancingLines();
	            break;

	        case 3:
	            this.state = 5072;
	            this.sendAdvancingMnemonic();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sendAdvancingPage() {
	    let localctx = new SendAdvancingPageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 882, Cobol85Parser.RULE_sendAdvancingPage);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5075;
	        this.match(Cobol85Parser.PAGE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sendAdvancingLines() {
	    let localctx = new SendAdvancingLinesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 884, Cobol85Parser.RULE_sendAdvancingLines);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5079;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,761,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5077;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 5078;
	            this.literal();
	            break;

	        }
	        this.state = 5082;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.LINE || _la===Cobol85Parser.LINES) {
	            this.state = 5081;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.LINE || _la===Cobol85Parser.LINES)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sendAdvancingMnemonic() {
	    let localctx = new SendAdvancingMnemonicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 886, Cobol85Parser.RULE_sendAdvancingMnemonic);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5084;
	        this.mnemonicName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setStatement() {
	    let localctx = new SetStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 888, Cobol85Parser.RULE_setStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5086;
	        this.match(Cobol85Parser.SET);
	        this.state = 5093;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,764,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5088; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 5087;
	                this.setToStatement();
	                this.state = 5090; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	            break;

	        case 2:
	            this.state = 5092;
	            this.setUpDownByStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setToStatement() {
	    let localctx = new SetToStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 890, Cobol85Parser.RULE_setToStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5096; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 5095;
	            this.setTo();
	            this.state = 5098; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	        this.state = 5100;
	        this.match(Cobol85Parser.TO);
	        this.state = 5102; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 5101;
	        		this.setToValue();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 5104; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,766, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setUpDownByStatement() {
	    let localctx = new SetUpDownByStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 892, Cobol85Parser.RULE_setUpDownByStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5107; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 5106;
	            this.setTo();
	            this.state = 5109; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	        this.state = 5115;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.UP:
	            this.state = 5111;
	            this.match(Cobol85Parser.UP);
	            this.state = 5112;
	            this.match(Cobol85Parser.BY);
	            break;
	        case Cobol85Parser.DOWN:
	            this.state = 5113;
	            this.match(Cobol85Parser.DOWN);
	            this.state = 5114;
	            this.match(Cobol85Parser.BY);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 5117;
	        this.setByValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setTo() {
	    let localctx = new SetToContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 894, Cobol85Parser.RULE_setTo);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5119;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setToValue() {
	    let localctx = new SetToValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 896, Cobol85Parser.RULE_setToValue);
	    try {
	        this.state = 5130;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,770,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5121;
	            this.match(Cobol85Parser.ON);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5122;
	            this.match(Cobol85Parser.OFF);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5123;
	            this.match(Cobol85Parser.ENTRY);
	            this.state = 5126;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,769,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5124;
	                this.identifier();
	                break;

	            case 2:
	                this.state = 5125;
	                this.literal();
	                break;

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5128;
	            this.identifier();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5129;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setByValue() {
	    let localctx = new SetByValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 898, Cobol85Parser.RULE_setByValue);
	    try {
	        this.state = 5134;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,771,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5132;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5133;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortStatement() {
	    let localctx = new SortStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 900, Cobol85Parser.RULE_sortStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5136;
	        this.match(Cobol85Parser.SORT);
	        this.state = 5137;
	        this.fileName();
	        this.state = 5139; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 5138;
	        		this.sortOnKeyClause();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 5141; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,772, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 5144;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,773,this._ctx);
	        if(la_===1) {
	            this.state = 5143;
	            this.sortDuplicatesPhrase();

	        }
	        this.state = 5147;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.COLLATING || _la===Cobol85Parser.SEQUENCE) {
	            this.state = 5146;
	            this.sortCollatingSequencePhrase();
	        }

	        this.state = 5150;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.INPUT) {
	            this.state = 5149;
	            this.sortInputProcedurePhrase();
	        }

	        this.state = 5155;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.USING) {
	            this.state = 5152;
	            this.sortUsing();
	            this.state = 5157;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 5159;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.OUTPUT) {
	            this.state = 5158;
	            this.sortOutputProcedurePhrase();
	        }

	        this.state = 5164;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.GIVING) {
	            this.state = 5161;
	            this.sortGivingPhrase();
	            this.state = 5166;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortOnKeyClause() {
	    let localctx = new SortOnKeyClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 902, Cobol85Parser.RULE_sortOnKeyClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5168;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ON) {
	            this.state = 5167;
	            this.match(Cobol85Parser.ON);
	        }

	        this.state = 5170;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.ASCENDING || _la===Cobol85Parser.DESCENDING)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5172;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.KEY) {
	            this.state = 5171;
	            this.match(Cobol85Parser.KEY);
	        }

	        this.state = 5175; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 5174;
	            this.qualifiedDataName();
	            this.state = 5177; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortDuplicatesPhrase() {
	    let localctx = new SortDuplicatesPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 904, Cobol85Parser.RULE_sortDuplicatesPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5180;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.WITH) {
	            this.state = 5179;
	            this.match(Cobol85Parser.WITH);
	        }

	        this.state = 5182;
	        this.match(Cobol85Parser.DUPLICATES);
	        this.state = 5184;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IN) {
	            this.state = 5183;
	            this.match(Cobol85Parser.IN);
	        }

	        this.state = 5187;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ORDER) {
	            this.state = 5186;
	            this.match(Cobol85Parser.ORDER);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortCollatingSequencePhrase() {
	    let localctx = new SortCollatingSequencePhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 906, Cobol85Parser.RULE_sortCollatingSequencePhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5190;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.COLLATING) {
	            this.state = 5189;
	            this.match(Cobol85Parser.COLLATING);
	        }

	        this.state = 5192;
	        this.match(Cobol85Parser.SEQUENCE);
	        this.state = 5194;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 5193;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 5197; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 5196;
	        		this.alphabetName();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 5199; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,787, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 5202;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,788,this._ctx);
	        if(la_===1) {
	            this.state = 5201;
	            this.sortCollatingAlphanumeric();

	        }
	        this.state = 5205;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FOR || _la===Cobol85Parser.NATIONAL) {
	            this.state = 5204;
	            this.sortCollatingNational();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortCollatingAlphanumeric() {
	    let localctx = new SortCollatingAlphanumericContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 908, Cobol85Parser.RULE_sortCollatingAlphanumeric);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5208;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FOR) {
	            this.state = 5207;
	            this.match(Cobol85Parser.FOR);
	        }

	        this.state = 5210;
	        this.match(Cobol85Parser.ALPHANUMERIC);
	        this.state = 5211;
	        this.match(Cobol85Parser.IS);
	        this.state = 5212;
	        this.alphabetName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortCollatingNational() {
	    let localctx = new SortCollatingNationalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 910, Cobol85Parser.RULE_sortCollatingNational);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5215;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FOR) {
	            this.state = 5214;
	            this.match(Cobol85Parser.FOR);
	        }

	        this.state = 5217;
	        this.match(Cobol85Parser.NATIONAL);
	        this.state = 5219;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 5218;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 5221;
	        this.alphabetName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortInputProcedurePhrase() {
	    let localctx = new SortInputProcedurePhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 912, Cobol85Parser.RULE_sortInputProcedurePhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5223;
	        this.match(Cobol85Parser.INPUT);
	        this.state = 5224;
	        this.match(Cobol85Parser.PROCEDURE);
	        this.state = 5226;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 5225;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 5228;
	        this.procedureName();
	        this.state = 5230;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.THROUGH || _la===Cobol85Parser.THRU) {
	            this.state = 5229;
	            this.sortInputThrough();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortInputThrough() {
	    let localctx = new SortInputThroughContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 914, Cobol85Parser.RULE_sortInputThrough);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5232;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.THROUGH || _la===Cobol85Parser.THRU)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5233;
	        this.procedureName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortUsing() {
	    let localctx = new SortUsingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 916, Cobol85Parser.RULE_sortUsing);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5235;
	        this.match(Cobol85Parser.USING);
	        this.state = 5237; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 5236;
	            this.fileName();
	            this.state = 5239; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la===Cobol85Parser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortOutputProcedurePhrase() {
	    let localctx = new SortOutputProcedurePhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 918, Cobol85Parser.RULE_sortOutputProcedurePhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5241;
	        this.match(Cobol85Parser.OUTPUT);
	        this.state = 5242;
	        this.match(Cobol85Parser.PROCEDURE);
	        this.state = 5244;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 5243;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 5246;
	        this.procedureName();
	        this.state = 5248;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.THROUGH || _la===Cobol85Parser.THRU) {
	            this.state = 5247;
	            this.sortOutputThrough();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortOutputThrough() {
	    let localctx = new SortOutputThroughContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 920, Cobol85Parser.RULE_sortOutputThrough);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5250;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.THROUGH || _la===Cobol85Parser.THRU)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5251;
	        this.procedureName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortGivingPhrase() {
	    let localctx = new SortGivingPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 922, Cobol85Parser.RULE_sortGivingPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5253;
	        this.match(Cobol85Parser.GIVING);
	        this.state = 5255; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 5254;
	            this.sortGiving();
	            this.state = 5257; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la===Cobol85Parser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortGiving() {
	    let localctx = new SortGivingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 924, Cobol85Parser.RULE_sortGiving);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5259;
	        this.fileName();
	        this.state = 5269;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,799,this._ctx);
	        if(la_===1) {
	            this.state = 5260;
	            this.match(Cobol85Parser.LOCK);

	        } else if(la_===2) {
	            this.state = 5261;
	            this.match(Cobol85Parser.SAVE);

	        } else if(la_===3) {
	            this.state = 5262;
	            this.match(Cobol85Parser.NO);
	            this.state = 5263;
	            this.match(Cobol85Parser.REWIND);

	        } else if(la_===4) {
	            this.state = 5264;
	            this.match(Cobol85Parser.CRUNCH);

	        } else if(la_===5) {
	            this.state = 5265;
	            this.match(Cobol85Parser.RELEASE);

	        } else if(la_===6) {
	            this.state = 5266;
	            this.match(Cobol85Parser.WITH);
	            this.state = 5267;
	            this.match(Cobol85Parser.REMOVE);
	            this.state = 5268;
	            this.match(Cobol85Parser.CRUNCH);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startStatement() {
	    let localctx = new StartStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 926, Cobol85Parser.RULE_startStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5271;
	        this.match(Cobol85Parser.START);
	        this.state = 5272;
	        this.fileName();
	        this.state = 5274;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.KEY) {
	            this.state = 5273;
	            this.startKey();
	        }

	        this.state = 5277;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,801,this._ctx);
	        if(la_===1) {
	            this.state = 5276;
	            this.invalidKeyPhrase();

	        }
	        this.state = 5280;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,802,this._ctx);
	        if(la_===1) {
	            this.state = 5279;
	            this.notInvalidKeyPhrase();

	        }
	        this.state = 5283;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,803,this._ctx);
	        if(la_===1) {
	            this.state = 5282;
	            this.match(Cobol85Parser.END_START);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startKey() {
	    let localctx = new StartKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 928, Cobol85Parser.RULE_startKey);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5285;
	        this.match(Cobol85Parser.KEY);
	        this.state = 5287;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 5286;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 5316;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,810,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5289;
	            this.match(Cobol85Parser.EQUAL);
	            this.state = 5291;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.TO) {
	                this.state = 5290;
	                this.match(Cobol85Parser.TO);
	            }

	            break;

	        case 2:
	            this.state = 5293;
	            this.match(Cobol85Parser.EQUALCHAR);
	            break;

	        case 3:
	            this.state = 5294;
	            this.match(Cobol85Parser.GREATER);
	            this.state = 5296;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.THAN) {
	                this.state = 5295;
	                this.match(Cobol85Parser.THAN);
	            }

	            break;

	        case 4:
	            this.state = 5298;
	            this.match(Cobol85Parser.MORETHANCHAR);
	            break;

	        case 5:
	            this.state = 5299;
	            this.match(Cobol85Parser.NOT);
	            this.state = 5300;
	            this.match(Cobol85Parser.LESS);
	            this.state = 5302;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.THAN) {
	                this.state = 5301;
	                this.match(Cobol85Parser.THAN);
	            }

	            break;

	        case 6:
	            this.state = 5304;
	            this.match(Cobol85Parser.NOT);
	            this.state = 5305;
	            this.match(Cobol85Parser.LESSTHANCHAR);
	            break;

	        case 7:
	            this.state = 5306;
	            this.match(Cobol85Parser.GREATER);
	            this.state = 5308;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.THAN) {
	                this.state = 5307;
	                this.match(Cobol85Parser.THAN);
	            }

	            this.state = 5310;
	            this.match(Cobol85Parser.OR);
	            this.state = 5311;
	            this.match(Cobol85Parser.EQUAL);
	            this.state = 5313;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.TO) {
	                this.state = 5312;
	                this.match(Cobol85Parser.TO);
	            }

	            break;

	        case 8:
	            this.state = 5315;
	            this.match(Cobol85Parser.MORETHANOREQUAL);
	            break;

	        }
	        this.state = 5318;
	        this.qualifiedDataName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stopStatement() {
	    let localctx = new StopStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 930, Cobol85Parser.RULE_stopStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5320;
	        this.match(Cobol85Parser.STOP);
	        this.state = 5323;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.RUN:
	            this.state = 5321;
	            this.match(Cobol85Parser.RUN);
	            break;
	        case Cobol85Parser.ALL:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.FALSE:
	        case Cobol85Parser.HIGH_VALUE:
	        case Cobol85Parser.HIGH_VALUES:
	        case Cobol85Parser.LOW_VALUE:
	        case Cobol85Parser.LOW_VALUES:
	        case Cobol85Parser.NULL_:
	        case Cobol85Parser.NULLS:
	        case Cobol85Parser.QUOTE:
	        case Cobol85Parser.QUOTES:
	        case Cobol85Parser.SPACE:
	        case Cobol85Parser.SPACES:
	        case Cobol85Parser.TRUE:
	        case Cobol85Parser.ZERO:
	        case Cobol85Parser.ZEROS:
	        case Cobol85Parser.ZEROES:
	        case Cobol85Parser.NONNUMERICLITERAL:
	        case Cobol85Parser.LEVEL_NUMBER_66:
	        case Cobol85Parser.LEVEL_NUMBER_77:
	        case Cobol85Parser.LEVEL_NUMBER_88:
	        case Cobol85Parser.INTEGERLITERAL:
	        case Cobol85Parser.NUMERICLITERAL:
	            this.state = 5322;
	            this.literal();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringStatement() {
	    let localctx = new StringStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 932, Cobol85Parser.RULE_stringStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5325;
	        this.match(Cobol85Parser.STRING);
	        this.state = 5327; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 5326;
	            this.stringSendingPhrase();
	            this.state = 5329; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL_ - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1f) == 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
	        this.state = 5331;
	        this.stringIntoPhrase();
	        this.state = 5333;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,813,this._ctx);
	        if(la_===1) {
	            this.state = 5332;
	            this.stringWithPointerPhrase();

	        }
	        this.state = 5336;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,814,this._ctx);
	        if(la_===1) {
	            this.state = 5335;
	            this.onOverflowPhrase();

	        }
	        this.state = 5339;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,815,this._ctx);
	        if(la_===1) {
	            this.state = 5338;
	            this.notOnOverflowPhrase();

	        }
	        this.state = 5342;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,816,this._ctx);
	        if(la_===1) {
	            this.state = 5341;
	            this.match(Cobol85Parser.END_STRING);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringSendingPhrase() {
	    let localctx = new StringSendingPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 934, Cobol85Parser.RULE_stringSendingPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5345; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 5344;
	            this.stringSending();
	            this.state = 5347; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL_ - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1f) == 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
	        this.state = 5351;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.DELIMITED:
	            this.state = 5349;
	            this.stringDelimitedByPhrase();
	            break;
	        case Cobol85Parser.FOR:
	            this.state = 5350;
	            this.stringForPhrase();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringSending() {
	    let localctx = new StringSendingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 936, Cobol85Parser.RULE_stringSending);
	    try {
	        this.state = 5355;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,819,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5353;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5354;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringDelimitedByPhrase() {
	    let localctx = new StringDelimitedByPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 938, Cobol85Parser.RULE_stringDelimitedByPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5357;
	        this.match(Cobol85Parser.DELIMITED);
	        this.state = 5359;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.BY) {
	            this.state = 5358;
	            this.match(Cobol85Parser.BY);
	        }

	        this.state = 5364;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,821,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5361;
	            this.match(Cobol85Parser.SIZE);
	            break;

	        case 2:
	            this.state = 5362;
	            this.identifier();
	            break;

	        case 3:
	            this.state = 5363;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringForPhrase() {
	    let localctx = new StringForPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 940, Cobol85Parser.RULE_stringForPhrase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5366;
	        this.match(Cobol85Parser.FOR);
	        this.state = 5369;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,822,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5367;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 5368;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringIntoPhrase() {
	    let localctx = new StringIntoPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 942, Cobol85Parser.RULE_stringIntoPhrase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5371;
	        this.match(Cobol85Parser.INTO);
	        this.state = 5372;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringWithPointerPhrase() {
	    let localctx = new StringWithPointerPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 944, Cobol85Parser.RULE_stringWithPointerPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5375;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.WITH) {
	            this.state = 5374;
	            this.match(Cobol85Parser.WITH);
	        }

	        this.state = 5377;
	        this.match(Cobol85Parser.POINTER);
	        this.state = 5378;
	        this.qualifiedDataName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subtractStatement() {
	    let localctx = new SubtractStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 946, Cobol85Parser.RULE_subtractStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5380;
	        this.match(Cobol85Parser.SUBTRACT);
	        this.state = 5384;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,824,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5381;
	            this.subtractFromStatement();
	            break;

	        case 2:
	            this.state = 5382;
	            this.subtractFromGivingStatement();
	            break;

	        case 3:
	            this.state = 5383;
	            this.subtractCorrespondingStatement();
	            break;

	        }
	        this.state = 5387;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,825,this._ctx);
	        if(la_===1) {
	            this.state = 5386;
	            this.onSizeErrorPhrase();

	        }
	        this.state = 5390;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,826,this._ctx);
	        if(la_===1) {
	            this.state = 5389;
	            this.notOnSizeErrorPhrase();

	        }
	        this.state = 5393;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,827,this._ctx);
	        if(la_===1) {
	            this.state = 5392;
	            this.match(Cobol85Parser.END_SUBTRACT);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subtractFromStatement() {
	    let localctx = new SubtractFromStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 948, Cobol85Parser.RULE_subtractFromStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5396; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 5395;
	            this.subtractSubtrahend();
	            this.state = 5398; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL_ - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1f) == 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
	        this.state = 5400;
	        this.match(Cobol85Parser.FROM);
	        this.state = 5402; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 5401;
	            this.subtractMinuend();
	            this.state = 5404; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subtractFromGivingStatement() {
	    let localctx = new SubtractFromGivingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 950, Cobol85Parser.RULE_subtractFromGivingStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5407; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 5406;
	            this.subtractSubtrahend();
	            this.state = 5409; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL_ - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1f) == 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
	        this.state = 5411;
	        this.match(Cobol85Parser.FROM);
	        this.state = 5412;
	        this.subtractMinuendGiving();
	        this.state = 5413;
	        this.match(Cobol85Parser.GIVING);
	        this.state = 5415; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 5414;
	            this.subtractGiving();
	            this.state = 5417; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subtractCorrespondingStatement() {
	    let localctx = new SubtractCorrespondingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 952, Cobol85Parser.RULE_subtractCorrespondingStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5419;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.CORR || _la===Cobol85Parser.CORRESPONDING)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5420;
	        this.qualifiedDataName();
	        this.state = 5421;
	        this.match(Cobol85Parser.FROM);
	        this.state = 5422;
	        this.subtractMinuendCorresponding();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subtractSubtrahend() {
	    let localctx = new SubtractSubtrahendContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 954, Cobol85Parser.RULE_subtractSubtrahend);
	    try {
	        this.state = 5426;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,832,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5424;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5425;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subtractMinuend() {
	    let localctx = new SubtractMinuendContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 956, Cobol85Parser.RULE_subtractMinuend);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5428;
	        this.identifier();
	        this.state = 5430;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ROUNDED) {
	            this.state = 5429;
	            this.match(Cobol85Parser.ROUNDED);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subtractMinuendGiving() {
	    let localctx = new SubtractMinuendGivingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 958, Cobol85Parser.RULE_subtractMinuendGiving);
	    try {
	        this.state = 5434;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,834,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5432;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5433;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subtractGiving() {
	    let localctx = new SubtractGivingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 960, Cobol85Parser.RULE_subtractGiving);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5436;
	        this.identifier();
	        this.state = 5438;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ROUNDED) {
	            this.state = 5437;
	            this.match(Cobol85Parser.ROUNDED);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subtractMinuendCorresponding() {
	    let localctx = new SubtractMinuendCorrespondingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 962, Cobol85Parser.RULE_subtractMinuendCorresponding);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5440;
	        this.qualifiedDataName();
	        this.state = 5442;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ROUNDED) {
	            this.state = 5441;
	            this.match(Cobol85Parser.ROUNDED);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	terminateStatement() {
	    let localctx = new TerminateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 964, Cobol85Parser.RULE_terminateStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5444;
	        this.match(Cobol85Parser.TERMINATE);
	        this.state = 5445;
	        this.reportName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unstringStatement() {
	    let localctx = new UnstringStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 966, Cobol85Parser.RULE_unstringStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5447;
	        this.match(Cobol85Parser.UNSTRING);
	        this.state = 5448;
	        this.unstringSendingPhrase();
	        this.state = 5449;
	        this.unstringIntoPhrase();
	        this.state = 5451;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,837,this._ctx);
	        if(la_===1) {
	            this.state = 5450;
	            this.unstringWithPointerPhrase();

	        }
	        this.state = 5454;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.TALLYING) {
	            this.state = 5453;
	            this.unstringTallyingPhrase();
	        }

	        this.state = 5457;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,839,this._ctx);
	        if(la_===1) {
	            this.state = 5456;
	            this.onOverflowPhrase();

	        }
	        this.state = 5460;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,840,this._ctx);
	        if(la_===1) {
	            this.state = 5459;
	            this.notOnOverflowPhrase();

	        }
	        this.state = 5463;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,841,this._ctx);
	        if(la_===1) {
	            this.state = 5462;
	            this.match(Cobol85Parser.END_UNSTRING);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unstringSendingPhrase() {
	    let localctx = new UnstringSendingPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 968, Cobol85Parser.RULE_unstringSendingPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5465;
	        this.identifier();
	        this.state = 5473;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.DELIMITED) {
	            this.state = 5466;
	            this.unstringDelimitedByPhrase();
	            this.state = 5470;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Cobol85Parser.OR) {
	                this.state = 5467;
	                this.unstringOrAllPhrase();
	                this.state = 5472;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unstringDelimitedByPhrase() {
	    let localctx = new UnstringDelimitedByPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 970, Cobol85Parser.RULE_unstringDelimitedByPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5475;
	        this.match(Cobol85Parser.DELIMITED);
	        this.state = 5477;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.BY) {
	            this.state = 5476;
	            this.match(Cobol85Parser.BY);
	        }

	        this.state = 5480;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,845,this._ctx);
	        if(la_===1) {
	            this.state = 5479;
	            this.match(Cobol85Parser.ALL);

	        }
	        this.state = 5484;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,846,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5482;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 5483;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unstringOrAllPhrase() {
	    let localctx = new UnstringOrAllPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 972, Cobol85Parser.RULE_unstringOrAllPhrase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5486;
	        this.match(Cobol85Parser.OR);
	        this.state = 5488;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,847,this._ctx);
	        if(la_===1) {
	            this.state = 5487;
	            this.match(Cobol85Parser.ALL);

	        }
	        this.state = 5492;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,848,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5490;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 5491;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unstringIntoPhrase() {
	    let localctx = new UnstringIntoPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 974, Cobol85Parser.RULE_unstringIntoPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5494;
	        this.match(Cobol85Parser.INTO);
	        this.state = 5496; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 5495;
	            this.unstringInto();
	            this.state = 5498; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unstringInto() {
	    let localctx = new UnstringIntoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 976, Cobol85Parser.RULE_unstringInto);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5500;
	        this.identifier();
	        this.state = 5502;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.DELIMITER) {
	            this.state = 5501;
	            this.unstringDelimiterIn();
	        }

	        this.state = 5505;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.COUNT) {
	            this.state = 5504;
	            this.unstringCountIn();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unstringDelimiterIn() {
	    let localctx = new UnstringDelimiterInContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 978, Cobol85Parser.RULE_unstringDelimiterIn);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5507;
	        this.match(Cobol85Parser.DELIMITER);
	        this.state = 5509;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IN) {
	            this.state = 5508;
	            this.match(Cobol85Parser.IN);
	        }

	        this.state = 5511;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unstringCountIn() {
	    let localctx = new UnstringCountInContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 980, Cobol85Parser.RULE_unstringCountIn);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5513;
	        this.match(Cobol85Parser.COUNT);
	        this.state = 5515;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IN) {
	            this.state = 5514;
	            this.match(Cobol85Parser.IN);
	        }

	        this.state = 5517;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unstringWithPointerPhrase() {
	    let localctx = new UnstringWithPointerPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 982, Cobol85Parser.RULE_unstringWithPointerPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5520;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.WITH) {
	            this.state = 5519;
	            this.match(Cobol85Parser.WITH);
	        }

	        this.state = 5522;
	        this.match(Cobol85Parser.POINTER);
	        this.state = 5523;
	        this.qualifiedDataName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unstringTallyingPhrase() {
	    let localctx = new UnstringTallyingPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 984, Cobol85Parser.RULE_unstringTallyingPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5525;
	        this.match(Cobol85Parser.TALLYING);
	        this.state = 5527;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IN) {
	            this.state = 5526;
	            this.match(Cobol85Parser.IN);
	        }

	        this.state = 5529;
	        this.qualifiedDataName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useStatement() {
	    let localctx = new UseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 986, Cobol85Parser.RULE_useStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5531;
	        this.match(Cobol85Parser.USE);
	        this.state = 5534;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.AFTER:
	        case Cobol85Parser.GLOBAL:
	            this.state = 5532;
	            this.useAfterClause();
	            break;
	        case Cobol85Parser.DEBUGGING:
	        case Cobol85Parser.FOR:
	            this.state = 5533;
	            this.useDebugClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useAfterClause() {
	    let localctx = new UseAfterClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 988, Cobol85Parser.RULE_useAfterClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5537;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.GLOBAL) {
	            this.state = 5536;
	            this.match(Cobol85Parser.GLOBAL);
	        }

	        this.state = 5539;
	        this.match(Cobol85Parser.AFTER);
	        this.state = 5541;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.STANDARD) {
	            this.state = 5540;
	            this.match(Cobol85Parser.STANDARD);
	        }

	        this.state = 5543;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.ERROR || _la===Cobol85Parser.EXCEPTION)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5544;
	        this.match(Cobol85Parser.PROCEDURE);
	        this.state = 5546;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ON) {
	            this.state = 5545;
	            this.match(Cobol85Parser.ON);
	        }

	        this.state = 5548;
	        this.useAfterOn();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useAfterOn() {
	    let localctx = new UseAfterOnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 990, Cobol85Parser.RULE_useAfterOn);
	    var _la = 0; // Token type
	    try {
	        this.state = 5559;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.INPUT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5550;
	            this.match(Cobol85Parser.INPUT);
	            break;
	        case Cobol85Parser.OUTPUT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5551;
	            this.match(Cobol85Parser.OUTPUT);
	            break;
	        case Cobol85Parser.I_O:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5552;
	            this.match(Cobol85Parser.I_O);
	            break;
	        case Cobol85Parser.EXTEND:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5553;
	            this.match(Cobol85Parser.EXTEND);
	            break;
	        case Cobol85Parser.ABORT:
	        case Cobol85Parser.AS:
	        case Cobol85Parser.ASCII:
	        case Cobol85Parser.ASSOCIATED_DATA:
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	        case Cobol85Parser.ATTRIBUTE:
	        case Cobol85Parser.AUTO:
	        case Cobol85Parser.AUTO_SKIP:
	        case Cobol85Parser.BACKGROUND_COLOR:
	        case Cobol85Parser.BACKGROUND_COLOUR:
	        case Cobol85Parser.BEEP:
	        case Cobol85Parser.BELL:
	        case Cobol85Parser.BINARY:
	        case Cobol85Parser.BIT:
	        case Cobol85Parser.BLINK:
	        case Cobol85Parser.BOUNDS:
	        case Cobol85Parser.CAPABLE:
	        case Cobol85Parser.CCSVERSION:
	        case Cobol85Parser.CHANGED:
	        case Cobol85Parser.CHANNEL:
	        case Cobol85Parser.CLOSE_DISPOSITION:
	        case Cobol85Parser.COBOL:
	        case Cobol85Parser.COMMITMENT:
	        case Cobol85Parser.CONTROL_POINT:
	        case Cobol85Parser.CONVENTION:
	        case Cobol85Parser.CRUNCH:
	        case Cobol85Parser.CURSOR:
	        case Cobol85Parser.DEFAULT:
	        case Cobol85Parser.DEFAULT_DISPLAY:
	        case Cobol85Parser.DEFINITION:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.DISK:
	        case Cobol85Parser.DONTCARE:
	        case Cobol85Parser.DOUBLE:
	        case Cobol85Parser.EBCDIC:
	        case Cobol85Parser.EMPTY_CHECK:
	        case Cobol85Parser.ENTER:
	        case Cobol85Parser.ENTRY_PROCEDURE:
	        case Cobol85Parser.ERASE:
	        case Cobol85Parser.EOL:
	        case Cobol85Parser.EOS:
	        case Cobol85Parser.ESCAPE:
	        case Cobol85Parser.EVENT:
	        case Cobol85Parser.EXCLUSIVE:
	        case Cobol85Parser.EXPORT:
	        case Cobol85Parser.EXTENDED:
	        case Cobol85Parser.FOREGROUND_COLOR:
	        case Cobol85Parser.FOREGROUND_COLOUR:
	        case Cobol85Parser.FULL:
	        case Cobol85Parser.FUNCTIONNAME:
	        case Cobol85Parser.FUNCTION_POINTER:
	        case Cobol85Parser.GRID:
	        case Cobol85Parser.HIGHLIGHT:
	        case Cobol85Parser.IMPLICIT:
	        case Cobol85Parser.IMPORT:
	        case Cobol85Parser.INTEGER:
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.KEYBOARD:
	        case Cobol85Parser.LANGUAGE:
	        case Cobol85Parser.LB:
	        case Cobol85Parser.LD:
	        case Cobol85Parser.LEFTLINE:
	        case Cobol85Parser.LENGTH_CHECK:
	        case Cobol85Parser.LIBACCESS:
	        case Cobol85Parser.LIBPARAMETER:
	        case Cobol85Parser.LIBRARY:
	        case Cobol85Parser.LIST:
	        case Cobol85Parser.LOCAL:
	        case Cobol85Parser.LONG_DATE:
	        case Cobol85Parser.LONG_TIME:
	        case Cobol85Parser.LOWER:
	        case Cobol85Parser.LOWLIGHT:
	        case Cobol85Parser.MMDDYYYY:
	        case Cobol85Parser.NAMED:
	        case Cobol85Parser.NATIONAL:
	        case Cobol85Parser.NATIONAL_EDITED:
	        case Cobol85Parser.NETWORK:
	        case Cobol85Parser.NO_ECHO:
	        case Cobol85Parser.NUMERIC_DATE:
	        case Cobol85Parser.NUMERIC_TIME:
	        case Cobol85Parser.ODT:
	        case Cobol85Parser.ORDERLY:
	        case Cobol85Parser.OVERLINE:
	        case Cobol85Parser.OWN:
	        case Cobol85Parser.PASSWORD:
	        case Cobol85Parser.PORT:
	        case Cobol85Parser.PRINTER:
	        case Cobol85Parser.PRIVATE:
	        case Cobol85Parser.PROCESS:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.PROMPT:
	        case Cobol85Parser.READER:
	        case Cobol85Parser.REMOTE:
	        case Cobol85Parser.REAL:
	        case Cobol85Parser.RECEIVED:
	        case Cobol85Parser.RECURSIVE:
	        case Cobol85Parser.REF:
	        case Cobol85Parser.REMOVE:
	        case Cobol85Parser.REQUIRED:
	        case Cobol85Parser.REVERSE_VIDEO:
	        case Cobol85Parser.SAVE:
	        case Cobol85Parser.SECURE:
	        case Cobol85Parser.SHARED:
	        case Cobol85Parser.SHAREDBYALL:
	        case Cobol85Parser.SHAREDBYRUNUNIT:
	        case Cobol85Parser.SHARING:
	        case Cobol85Parser.SHORT_DATE:
	        case Cobol85Parser.SYMBOL:
	        case Cobol85Parser.TASK:
	        case Cobol85Parser.THREAD:
	        case Cobol85Parser.THREAD_LOCAL:
	        case Cobol85Parser.TIMER:
	        case Cobol85Parser.TODAYS_DATE:
	        case Cobol85Parser.TODAYS_NAME:
	        case Cobol85Parser.TRUNCATED:
	        case Cobol85Parser.TYPEDEF:
	        case Cobol85Parser.UNDERLINE:
	        case Cobol85Parser.VIRTUAL:
	        case Cobol85Parser.WAIT:
	        case Cobol85Parser.YEAR:
	        case Cobol85Parser.YYYYMMDD:
	        case Cobol85Parser.YYYYDDD:
	        case Cobol85Parser.ZERO_FILL:
	        case Cobol85Parser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5555; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 5554;
	                this.fileName();
	                this.state = 5557; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la===Cobol85Parser.IDENTIFIER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useDebugClause() {
	    let localctx = new UseDebugClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 992, Cobol85Parser.RULE_useDebugClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5562;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FOR) {
	            this.state = 5561;
	            this.match(Cobol85Parser.FOR);
	        }

	        this.state = 5564;
	        this.match(Cobol85Parser.DEBUGGING);
	        this.state = 5566;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ON) {
	            this.state = 5565;
	            this.match(Cobol85Parser.ON);
	        }

	        this.state = 5569; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 5568;
	            this.useDebugOn();
	            this.state = 5571; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useDebugOn() {
	    let localctx = new UseDebugOnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 994, Cobol85Parser.RULE_useDebugOn);
	    var _la = 0; // Token type
	    try {
	        this.state = 5585;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,867,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5573;
	            this.match(Cobol85Parser.ALL);
	            this.state = 5574;
	            this.match(Cobol85Parser.PROCEDURES);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5575;
	            this.match(Cobol85Parser.ALL);
	            this.state = 5577;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.REFERENCES) {
	                this.state = 5576;
	                this.match(Cobol85Parser.REFERENCES);
	            }

	            this.state = 5580;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.OF) {
	                this.state = 5579;
	                this.match(Cobol85Parser.OF);
	            }

	            this.state = 5582;
	            this.identifier();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5583;
	            this.procedureName();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5584;
	            this.fileName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	writeStatement() {
	    let localctx = new WriteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 996, Cobol85Parser.RULE_writeStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5587;
	        this.match(Cobol85Parser.WRITE);
	        this.state = 5588;
	        this.recordName();
	        this.state = 5590;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.FROM) {
	            this.state = 5589;
	            this.writeFromPhrase();
	        }

	        this.state = 5593;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.AFTER || _la===Cobol85Parser.BEFORE) {
	            this.state = 5592;
	            this.writeAdvancingPhrase();
	        }

	        this.state = 5596;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,870,this._ctx);
	        if(la_===1) {
	            this.state = 5595;
	            this.writeAtEndOfPagePhrase();

	        }
	        this.state = 5599;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,871,this._ctx);
	        if(la_===1) {
	            this.state = 5598;
	            this.writeNotAtEndOfPagePhrase();

	        }
	        this.state = 5602;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,872,this._ctx);
	        if(la_===1) {
	            this.state = 5601;
	            this.invalidKeyPhrase();

	        }
	        this.state = 5605;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,873,this._ctx);
	        if(la_===1) {
	            this.state = 5604;
	            this.notInvalidKeyPhrase();

	        }
	        this.state = 5608;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,874,this._ctx);
	        if(la_===1) {
	            this.state = 5607;
	            this.match(Cobol85Parser.END_WRITE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	writeFromPhrase() {
	    let localctx = new WriteFromPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 998, Cobol85Parser.RULE_writeFromPhrase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5610;
	        this.match(Cobol85Parser.FROM);
	        this.state = 5613;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,875,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5611;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 5612;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	writeAdvancingPhrase() {
	    let localctx = new WriteAdvancingPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1000, Cobol85Parser.RULE_writeAdvancingPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5615;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.AFTER || _la===Cobol85Parser.BEFORE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5617;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ADVANCING) {
	            this.state = 5616;
	            this.match(Cobol85Parser.ADVANCING);
	        }

	        this.state = 5622;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,877,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5619;
	            this.writeAdvancingPage();
	            break;

	        case 2:
	            this.state = 5620;
	            this.writeAdvancingLines();
	            break;

	        case 3:
	            this.state = 5621;
	            this.writeAdvancingMnemonic();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	writeAdvancingPage() {
	    let localctx = new WriteAdvancingPageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1002, Cobol85Parser.RULE_writeAdvancingPage);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5624;
	        this.match(Cobol85Parser.PAGE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	writeAdvancingLines() {
	    let localctx = new WriteAdvancingLinesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1004, Cobol85Parser.RULE_writeAdvancingLines);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5628;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,878,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5626;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 5627;
	            this.literal();
	            break;

	        }
	        this.state = 5631;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.LINE || _la===Cobol85Parser.LINES) {
	            this.state = 5630;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.LINE || _la===Cobol85Parser.LINES)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	writeAdvancingMnemonic() {
	    let localctx = new WriteAdvancingMnemonicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1006, Cobol85Parser.RULE_writeAdvancingMnemonic);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5633;
	        this.mnemonicName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	writeAtEndOfPagePhrase() {
	    let localctx = new WriteAtEndOfPagePhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1008, Cobol85Parser.RULE_writeAtEndOfPagePhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5636;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.AT) {
	            this.state = 5635;
	            this.match(Cobol85Parser.AT);
	        }

	        this.state = 5638;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.END_OF_PAGE || _la===Cobol85Parser.EOP)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5642;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,881,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5639;
	                this.statement(); 
	            }
	            this.state = 5644;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,881,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	writeNotAtEndOfPagePhrase() {
	    let localctx = new WriteNotAtEndOfPagePhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1010, Cobol85Parser.RULE_writeNotAtEndOfPagePhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5645;
	        this.match(Cobol85Parser.NOT);
	        this.state = 5647;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.AT) {
	            this.state = 5646;
	            this.match(Cobol85Parser.AT);
	        }

	        this.state = 5649;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.END_OF_PAGE || _la===Cobol85Parser.EOP)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5653;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,883,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5650;
	                this.statement(); 
	            }
	            this.state = 5655;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,883,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atEndPhrase() {
	    let localctx = new AtEndPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1012, Cobol85Parser.RULE_atEndPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5657;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.AT) {
	            this.state = 5656;
	            this.match(Cobol85Parser.AT);
	        }

	        this.state = 5659;
	        this.match(Cobol85Parser.END);
	        this.state = 5663;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,885,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5660;
	                this.statement(); 
	            }
	            this.state = 5665;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,885,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	notAtEndPhrase() {
	    let localctx = new NotAtEndPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1014, Cobol85Parser.RULE_notAtEndPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5666;
	        this.match(Cobol85Parser.NOT);
	        this.state = 5668;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.AT) {
	            this.state = 5667;
	            this.match(Cobol85Parser.AT);
	        }

	        this.state = 5670;
	        this.match(Cobol85Parser.END);
	        this.state = 5674;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,887,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5671;
	                this.statement(); 
	            }
	            this.state = 5676;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,887,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	invalidKeyPhrase() {
	    let localctx = new InvalidKeyPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1016, Cobol85Parser.RULE_invalidKeyPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5677;
	        this.match(Cobol85Parser.INVALID);
	        this.state = 5679;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.KEY) {
	            this.state = 5678;
	            this.match(Cobol85Parser.KEY);
	        }

	        this.state = 5684;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,889,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5681;
	                this.statement(); 
	            }
	            this.state = 5686;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,889,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	notInvalidKeyPhrase() {
	    let localctx = new NotInvalidKeyPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1018, Cobol85Parser.RULE_notInvalidKeyPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5687;
	        this.match(Cobol85Parser.NOT);
	        this.state = 5688;
	        this.match(Cobol85Parser.INVALID);
	        this.state = 5690;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.KEY) {
	            this.state = 5689;
	            this.match(Cobol85Parser.KEY);
	        }

	        this.state = 5695;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,891,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5692;
	                this.statement(); 
	            }
	            this.state = 5697;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,891,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	onOverflowPhrase() {
	    let localctx = new OnOverflowPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1020, Cobol85Parser.RULE_onOverflowPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5699;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ON) {
	            this.state = 5698;
	            this.match(Cobol85Parser.ON);
	        }

	        this.state = 5701;
	        this.match(Cobol85Parser.OVERFLOW);
	        this.state = 5705;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,893,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5702;
	                this.statement(); 
	            }
	            this.state = 5707;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,893,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	notOnOverflowPhrase() {
	    let localctx = new NotOnOverflowPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1022, Cobol85Parser.RULE_notOnOverflowPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5708;
	        this.match(Cobol85Parser.NOT);
	        this.state = 5710;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ON) {
	            this.state = 5709;
	            this.match(Cobol85Parser.ON);
	        }

	        this.state = 5712;
	        this.match(Cobol85Parser.OVERFLOW);
	        this.state = 5716;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,895,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5713;
	                this.statement(); 
	            }
	            this.state = 5718;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,895,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	onSizeErrorPhrase() {
	    let localctx = new OnSizeErrorPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1024, Cobol85Parser.RULE_onSizeErrorPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5720;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ON) {
	            this.state = 5719;
	            this.match(Cobol85Parser.ON);
	        }

	        this.state = 5722;
	        this.match(Cobol85Parser.SIZE);
	        this.state = 5723;
	        this.match(Cobol85Parser.ERROR);
	        this.state = 5727;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,897,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5724;
	                this.statement(); 
	            }
	            this.state = 5729;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,897,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	notOnSizeErrorPhrase() {
	    let localctx = new NotOnSizeErrorPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1026, Cobol85Parser.RULE_notOnSizeErrorPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5730;
	        this.match(Cobol85Parser.NOT);
	        this.state = 5732;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ON) {
	            this.state = 5731;
	            this.match(Cobol85Parser.ON);
	        }

	        this.state = 5734;
	        this.match(Cobol85Parser.SIZE);
	        this.state = 5735;
	        this.match(Cobol85Parser.ERROR);
	        this.state = 5739;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,899,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5736;
	                this.statement(); 
	            }
	            this.state = 5741;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,899,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	onExceptionClause() {
	    let localctx = new OnExceptionClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1028, Cobol85Parser.RULE_onExceptionClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5743;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ON) {
	            this.state = 5742;
	            this.match(Cobol85Parser.ON);
	        }

	        this.state = 5745;
	        this.match(Cobol85Parser.EXCEPTION);
	        this.state = 5749;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,901,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5746;
	                this.statement(); 
	            }
	            this.state = 5751;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,901,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	notOnExceptionClause() {
	    let localctx = new NotOnExceptionClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1030, Cobol85Parser.RULE_notOnExceptionClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5752;
	        this.match(Cobol85Parser.NOT);
	        this.state = 5754;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ON) {
	            this.state = 5753;
	            this.match(Cobol85Parser.ON);
	        }

	        this.state = 5756;
	        this.match(Cobol85Parser.EXCEPTION);
	        this.state = 5760;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,903,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5757;
	                this.statement(); 
	            }
	            this.state = 5762;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,903,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arithmeticExpression() {
	    let localctx = new ArithmeticExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1032, Cobol85Parser.RULE_arithmeticExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5763;
	        this.multDivs();
	        this.state = 5767;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,904,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5764;
	                this.plusMinus(); 
	            }
	            this.state = 5769;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,904,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	plusMinus() {
	    let localctx = new PlusMinusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1034, Cobol85Parser.RULE_plusMinus);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5770;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.MINUSCHAR || _la===Cobol85Parser.PLUSCHAR)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5771;
	        this.multDivs();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multDivs() {
	    let localctx = new MultDivsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1036, Cobol85Parser.RULE_multDivs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5773;
	        this.powers();
	        this.state = 5777;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.ASTERISKCHAR || _la===Cobol85Parser.SLASHCHAR) {
	            this.state = 5774;
	            this.multDiv();
	            this.state = 5779;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multDiv() {
	    let localctx = new MultDivContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1038, Cobol85Parser.RULE_multDiv);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5780;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.ASTERISKCHAR || _la===Cobol85Parser.SLASHCHAR)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5781;
	        this.powers();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	powers() {
	    let localctx = new PowersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1040, Cobol85Parser.RULE_powers);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5784;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.MINUSCHAR || _la===Cobol85Parser.PLUSCHAR) {
	            this.state = 5783;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.MINUSCHAR || _la===Cobol85Parser.PLUSCHAR)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 5786;
	        this.basis();
	        this.state = 5790;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.DOUBLEASTERISKCHAR) {
	            this.state = 5787;
	            this.power();
	            this.state = 5792;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	power() {
	    let localctx = new PowerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1042, Cobol85Parser.RULE_power);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5793;
	        this.match(Cobol85Parser.DOUBLEASTERISKCHAR);
	        this.state = 5794;
	        this.basis();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	basis() {
	    let localctx = new BasisContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1044, Cobol85Parser.RULE_basis);
	    try {
	        this.state = 5802;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,908,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5796;
	            this.match(Cobol85Parser.LPARENCHAR);
	            this.state = 5797;
	            this.arithmeticExpression();
	            this.state = 5798;
	            this.match(Cobol85Parser.RPARENCHAR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5800;
	            this.identifier();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5801;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	condition() {
	    let localctx = new ConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1046, Cobol85Parser.RULE_condition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5804;
	        this.combinableCondition();
	        this.state = 5808;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85Parser.AND || _la===Cobol85Parser.OR) {
	            this.state = 5805;
	            this.andOrCondition();
	            this.state = 5810;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	andOrCondition() {
	    let localctx = new AndOrConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1048, Cobol85Parser.RULE_andOrCondition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5811;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.AND || _la===Cobol85Parser.OR)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5818;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,911,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5812;
	            this.combinableCondition();
	            break;

	        case 2:
	            this.state = 5814; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 5813;
	            		this.abbreviation();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 5816; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,910, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	combinableCondition() {
	    let localctx = new CombinableConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1050, Cobol85Parser.RULE_combinableCondition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5821;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.NOT) {
	            this.state = 5820;
	            this.match(Cobol85Parser.NOT);
	        }

	        this.state = 5823;
	        this.simpleCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleCondition() {
	    let localctx = new SimpleConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1052, Cobol85Parser.RULE_simpleCondition);
	    try {
	        this.state = 5832;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,913,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5825;
	            this.match(Cobol85Parser.LPARENCHAR);
	            this.state = 5826;
	            this.condition();
	            this.state = 5827;
	            this.match(Cobol85Parser.RPARENCHAR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5829;
	            this.relationCondition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5830;
	            this.classCondition();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5831;
	            this.conditionNameReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classCondition() {
	    let localctx = new ClassConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1054, Cobol85Parser.RULE_classCondition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5834;
	        this.identifier();
	        this.state = 5836;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 5835;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 5839;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.NOT) {
	            this.state = 5838;
	            this.match(Cobol85Parser.NOT);
	        }

	        this.state = 5848;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.NUMERIC:
	            this.state = 5841;
	            this.match(Cobol85Parser.NUMERIC);
	            break;
	        case Cobol85Parser.ALPHABETIC:
	            this.state = 5842;
	            this.match(Cobol85Parser.ALPHABETIC);
	            break;
	        case Cobol85Parser.ALPHABETIC_LOWER:
	            this.state = 5843;
	            this.match(Cobol85Parser.ALPHABETIC_LOWER);
	            break;
	        case Cobol85Parser.ALPHABETIC_UPPER:
	            this.state = 5844;
	            this.match(Cobol85Parser.ALPHABETIC_UPPER);
	            break;
	        case Cobol85Parser.DBCS:
	            this.state = 5845;
	            this.match(Cobol85Parser.DBCS);
	            break;
	        case Cobol85Parser.KANJI:
	            this.state = 5846;
	            this.match(Cobol85Parser.KANJI);
	            break;
	        case Cobol85Parser.ABORT:
	        case Cobol85Parser.AS:
	        case Cobol85Parser.ASCII:
	        case Cobol85Parser.ASSOCIATED_DATA:
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	        case Cobol85Parser.ATTRIBUTE:
	        case Cobol85Parser.AUTO:
	        case Cobol85Parser.AUTO_SKIP:
	        case Cobol85Parser.BACKGROUND_COLOR:
	        case Cobol85Parser.BACKGROUND_COLOUR:
	        case Cobol85Parser.BEEP:
	        case Cobol85Parser.BELL:
	        case Cobol85Parser.BINARY:
	        case Cobol85Parser.BIT:
	        case Cobol85Parser.BLINK:
	        case Cobol85Parser.BOUNDS:
	        case Cobol85Parser.CAPABLE:
	        case Cobol85Parser.CCSVERSION:
	        case Cobol85Parser.CHANGED:
	        case Cobol85Parser.CHANNEL:
	        case Cobol85Parser.CLOSE_DISPOSITION:
	        case Cobol85Parser.COBOL:
	        case Cobol85Parser.COMMITMENT:
	        case Cobol85Parser.CONTROL_POINT:
	        case Cobol85Parser.CONVENTION:
	        case Cobol85Parser.CRUNCH:
	        case Cobol85Parser.CURSOR:
	        case Cobol85Parser.DEFAULT:
	        case Cobol85Parser.DEFAULT_DISPLAY:
	        case Cobol85Parser.DEFINITION:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.DISK:
	        case Cobol85Parser.DONTCARE:
	        case Cobol85Parser.DOUBLE:
	        case Cobol85Parser.EBCDIC:
	        case Cobol85Parser.EMPTY_CHECK:
	        case Cobol85Parser.ENTER:
	        case Cobol85Parser.ENTRY_PROCEDURE:
	        case Cobol85Parser.ERASE:
	        case Cobol85Parser.EOL:
	        case Cobol85Parser.EOS:
	        case Cobol85Parser.ESCAPE:
	        case Cobol85Parser.EVENT:
	        case Cobol85Parser.EXCLUSIVE:
	        case Cobol85Parser.EXPORT:
	        case Cobol85Parser.EXTENDED:
	        case Cobol85Parser.FOREGROUND_COLOR:
	        case Cobol85Parser.FOREGROUND_COLOUR:
	        case Cobol85Parser.FULL:
	        case Cobol85Parser.FUNCTIONNAME:
	        case Cobol85Parser.FUNCTION_POINTER:
	        case Cobol85Parser.GRID:
	        case Cobol85Parser.HIGHLIGHT:
	        case Cobol85Parser.IMPLICIT:
	        case Cobol85Parser.IMPORT:
	        case Cobol85Parser.INTEGER:
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.KEYBOARD:
	        case Cobol85Parser.LANGUAGE:
	        case Cobol85Parser.LB:
	        case Cobol85Parser.LD:
	        case Cobol85Parser.LEFTLINE:
	        case Cobol85Parser.LENGTH_CHECK:
	        case Cobol85Parser.LIBACCESS:
	        case Cobol85Parser.LIBPARAMETER:
	        case Cobol85Parser.LIBRARY:
	        case Cobol85Parser.LIST:
	        case Cobol85Parser.LOCAL:
	        case Cobol85Parser.LONG_DATE:
	        case Cobol85Parser.LONG_TIME:
	        case Cobol85Parser.LOWER:
	        case Cobol85Parser.LOWLIGHT:
	        case Cobol85Parser.MMDDYYYY:
	        case Cobol85Parser.NAMED:
	        case Cobol85Parser.NATIONAL:
	        case Cobol85Parser.NATIONAL_EDITED:
	        case Cobol85Parser.NETWORK:
	        case Cobol85Parser.NO_ECHO:
	        case Cobol85Parser.NUMERIC_DATE:
	        case Cobol85Parser.NUMERIC_TIME:
	        case Cobol85Parser.ODT:
	        case Cobol85Parser.ORDERLY:
	        case Cobol85Parser.OVERLINE:
	        case Cobol85Parser.OWN:
	        case Cobol85Parser.PASSWORD:
	        case Cobol85Parser.PORT:
	        case Cobol85Parser.PRINTER:
	        case Cobol85Parser.PRIVATE:
	        case Cobol85Parser.PROCESS:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.PROMPT:
	        case Cobol85Parser.READER:
	        case Cobol85Parser.REMOTE:
	        case Cobol85Parser.REAL:
	        case Cobol85Parser.RECEIVED:
	        case Cobol85Parser.RECURSIVE:
	        case Cobol85Parser.REF:
	        case Cobol85Parser.REMOVE:
	        case Cobol85Parser.REQUIRED:
	        case Cobol85Parser.REVERSE_VIDEO:
	        case Cobol85Parser.SAVE:
	        case Cobol85Parser.SECURE:
	        case Cobol85Parser.SHARED:
	        case Cobol85Parser.SHAREDBYALL:
	        case Cobol85Parser.SHAREDBYRUNUNIT:
	        case Cobol85Parser.SHARING:
	        case Cobol85Parser.SHORT_DATE:
	        case Cobol85Parser.SYMBOL:
	        case Cobol85Parser.TASK:
	        case Cobol85Parser.THREAD:
	        case Cobol85Parser.THREAD_LOCAL:
	        case Cobol85Parser.TIMER:
	        case Cobol85Parser.TODAYS_DATE:
	        case Cobol85Parser.TODAYS_NAME:
	        case Cobol85Parser.TRUNCATED:
	        case Cobol85Parser.TYPEDEF:
	        case Cobol85Parser.UNDERLINE:
	        case Cobol85Parser.VIRTUAL:
	        case Cobol85Parser.WAIT:
	        case Cobol85Parser.YEAR:
	        case Cobol85Parser.YYYYMMDD:
	        case Cobol85Parser.YYYYDDD:
	        case Cobol85Parser.ZERO_FILL:
	        case Cobol85Parser.IDENTIFIER:
	            this.state = 5847;
	            this.className();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionNameReference() {
	    let localctx = new ConditionNameReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1056, Cobol85Parser.RULE_conditionNameReference);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5850;
	        this.conditionName();
	        this.state = 5872;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,921,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5854;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,917,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 5851;
	                    this.inData(); 
	                }
	                this.state = 5856;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,917,this._ctx);
	            }

	            this.state = 5858;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.IN || _la===Cobol85Parser.OF) {
	                this.state = 5857;
	                this.inFile();
	            }

	            this.state = 5863;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Cobol85Parser.LPARENCHAR) {
	                this.state = 5860;
	                this.conditionNameSubscriptReference();
	                this.state = 5865;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.state = 5869;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Cobol85Parser.IN || _la===Cobol85Parser.OF) {
	                this.state = 5866;
	                this.inMnemonic();
	                this.state = 5871;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionNameSubscriptReference() {
	    let localctx = new ConditionNameSubscriptReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1058, Cobol85Parser.RULE_conditionNameSubscriptReference);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5874;
	        this.match(Cobol85Parser.LPARENCHAR);
	        this.state = 5875;
	        this.subscript_();
	        this.state = 5882;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL_ - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)) | (1 << (Cobol85Parser.COMMACHAR - 498)))) !== 0) || ((((_la - 542)) & ~0x1f) == 0 && ((1 << (_la - 542)) & ((1 << (Cobol85Parser.LPARENCHAR - 542)) | (1 << (Cobol85Parser.MINUSCHAR - 542)) | (1 << (Cobol85Parser.PLUSCHAR - 542)) | (1 << (Cobol85Parser.NONNUMERICLITERAL - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 542)) | (1 << (Cobol85Parser.INTEGERLITERAL - 542)) | (1 << (Cobol85Parser.NUMERICLITERAL - 542)) | (1 << (Cobol85Parser.IDENTIFIER - 542)))) !== 0)) {
	            this.state = 5877;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.COMMACHAR) {
	                this.state = 5876;
	                this.match(Cobol85Parser.COMMACHAR);
	            }

	            this.state = 5879;
	            this.subscript_();
	            this.state = 5884;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 5885;
	        this.match(Cobol85Parser.RPARENCHAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationCondition() {
	    let localctx = new RelationConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1060, Cobol85Parser.RULE_relationCondition);
	    try {
	        this.state = 5890;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,924,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5887;
	            this.relationSignCondition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5888;
	            this.relationArithmeticComparison();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5889;
	            this.relationCombinedComparison();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationSignCondition() {
	    let localctx = new RelationSignConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1062, Cobol85Parser.RULE_relationSignCondition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5892;
	        this.arithmeticExpression();
	        this.state = 5894;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.IS) {
	            this.state = 5893;
	            this.match(Cobol85Parser.IS);
	        }

	        this.state = 5897;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.NOT) {
	            this.state = 5896;
	            this.match(Cobol85Parser.NOT);
	        }

	        this.state = 5899;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.NEGATIVE || _la===Cobol85Parser.POSITIVE || _la===Cobol85Parser.ZERO)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationArithmeticComparison() {
	    let localctx = new RelationArithmeticComparisonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1064, Cobol85Parser.RULE_relationArithmeticComparison);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5901;
	        this.arithmeticExpression();
	        this.state = 5902;
	        this.relationalOperator();
	        this.state = 5903;
	        this.arithmeticExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationCombinedComparison() {
	    let localctx = new RelationCombinedComparisonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1066, Cobol85Parser.RULE_relationCombinedComparison);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5905;
	        this.arithmeticExpression();
	        this.state = 5906;
	        this.relationalOperator();
	        this.state = 5907;
	        this.match(Cobol85Parser.LPARENCHAR);
	        this.state = 5908;
	        this.relationCombinedCondition();
	        this.state = 5909;
	        this.match(Cobol85Parser.RPARENCHAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationCombinedCondition() {
	    let localctx = new RelationCombinedConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1068, Cobol85Parser.RULE_relationCombinedCondition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5911;
	        this.arithmeticExpression();
	        this.state = 5914; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 5912;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.AND || _la===Cobol85Parser.OR)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5913;
	            this.arithmeticExpression();
	            this.state = 5916; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===Cobol85Parser.AND || _la===Cobol85Parser.OR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationalOperator() {
	    let localctx = new RelationalOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1070, Cobol85Parser.RULE_relationalOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5919;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ARE || _la===Cobol85Parser.IS) {
	            this.state = 5918;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85Parser.ARE || _la===Cobol85Parser.IS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 5962;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,938,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5922;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.NOT) {
	                this.state = 5921;
	                this.match(Cobol85Parser.NOT);
	            }

	            this.state = 5939;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case Cobol85Parser.GREATER:
	                this.state = 5924;
	                this.match(Cobol85Parser.GREATER);
	                this.state = 5926;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Cobol85Parser.THAN) {
	                    this.state = 5925;
	                    this.match(Cobol85Parser.THAN);
	                }

	                break;
	            case Cobol85Parser.MORETHANCHAR:
	                this.state = 5928;
	                this.match(Cobol85Parser.MORETHANCHAR);
	                break;
	            case Cobol85Parser.LESS:
	                this.state = 5929;
	                this.match(Cobol85Parser.LESS);
	                this.state = 5931;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Cobol85Parser.THAN) {
	                    this.state = 5930;
	                    this.match(Cobol85Parser.THAN);
	                }

	                break;
	            case Cobol85Parser.LESSTHANCHAR:
	                this.state = 5933;
	                this.match(Cobol85Parser.LESSTHANCHAR);
	                break;
	            case Cobol85Parser.EQUAL:
	                this.state = 5934;
	                this.match(Cobol85Parser.EQUAL);
	                this.state = 5936;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Cobol85Parser.TO) {
	                    this.state = 5935;
	                    this.match(Cobol85Parser.TO);
	                }

	                break;
	            case Cobol85Parser.EQUALCHAR:
	                this.state = 5938;
	                this.match(Cobol85Parser.EQUALCHAR);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.state = 5941;
	            this.match(Cobol85Parser.NOTEQUALCHAR);
	            break;

	        case 3:
	            this.state = 5942;
	            this.match(Cobol85Parser.GREATER);
	            this.state = 5944;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.THAN) {
	                this.state = 5943;
	                this.match(Cobol85Parser.THAN);
	            }

	            this.state = 5946;
	            this.match(Cobol85Parser.OR);
	            this.state = 5947;
	            this.match(Cobol85Parser.EQUAL);
	            this.state = 5949;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.TO) {
	                this.state = 5948;
	                this.match(Cobol85Parser.TO);
	            }

	            break;

	        case 4:
	            this.state = 5951;
	            this.match(Cobol85Parser.MORETHANOREQUAL);
	            break;

	        case 5:
	            this.state = 5952;
	            this.match(Cobol85Parser.LESS);
	            this.state = 5954;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.THAN) {
	                this.state = 5953;
	                this.match(Cobol85Parser.THAN);
	            }

	            this.state = 5956;
	            this.match(Cobol85Parser.OR);
	            this.state = 5957;
	            this.match(Cobol85Parser.EQUAL);
	            this.state = 5959;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.TO) {
	                this.state = 5958;
	                this.match(Cobol85Parser.TO);
	            }

	            break;

	        case 6:
	            this.state = 5961;
	            this.match(Cobol85Parser.LESSTHANOREQUAL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abbreviation() {
	    let localctx = new AbbreviationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1072, Cobol85Parser.RULE_abbreviation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5965;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,939,this._ctx);
	        if(la_===1) {
	            this.state = 5964;
	            this.match(Cobol85Parser.NOT);

	        }
	        this.state = 5968;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Cobol85Parser.ARE || _la===Cobol85Parser.EQUAL || _la===Cobol85Parser.GREATER || _la===Cobol85Parser.IS || _la===Cobol85Parser.LESS || _la===Cobol85Parser.NOT || ((((_la - 536)) & ~0x1f) == 0 && ((1 << (_la - 536)) & ((1 << (Cobol85Parser.EQUALCHAR - 536)) | (1 << (Cobol85Parser.LESSTHANCHAR - 536)) | (1 << (Cobol85Parser.LESSTHANOREQUAL - 536)) | (1 << (Cobol85Parser.MORETHANCHAR - 536)) | (1 << (Cobol85Parser.MORETHANOREQUAL - 536)) | (1 << (Cobol85Parser.NOTEQUALCHAR - 536)))) !== 0)) {
	            this.state = 5967;
	            this.relationalOperator();
	        }

	        this.state = 5976;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,941,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5970;
	            this.arithmeticExpression();
	            break;

	        case 2:
	            this.state = 5971;
	            this.match(Cobol85Parser.LPARENCHAR);
	            this.state = 5972;
	            this.arithmeticExpression();
	            this.state = 5973;
	            this.abbreviation();
	            this.state = 5974;
	            this.match(Cobol85Parser.RPARENCHAR);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1074, Cobol85Parser.RULE_identifier);
	    try {
	        this.state = 5982;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,942,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5978;
	            this.qualifiedDataName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5979;
	            this.tableCall();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5980;
	            this.functionCall();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5981;
	            this.specialRegister();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableCall() {
	    let localctx = new TableCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1076, Cobol85Parser.RULE_tableCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5984;
	        this.qualifiedDataName();
	        this.state = 6000;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,945,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5985;
	                this.match(Cobol85Parser.LPARENCHAR);
	                this.state = 5986;
	                this.subscript_();
	                this.state = 5993;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL_ - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)) | (1 << (Cobol85Parser.COMMACHAR - 498)))) !== 0) || ((((_la - 542)) & ~0x1f) == 0 && ((1 << (_la - 542)) & ((1 << (Cobol85Parser.LPARENCHAR - 542)) | (1 << (Cobol85Parser.MINUSCHAR - 542)) | (1 << (Cobol85Parser.PLUSCHAR - 542)) | (1 << (Cobol85Parser.NONNUMERICLITERAL - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 542)) | (1 << (Cobol85Parser.INTEGERLITERAL - 542)) | (1 << (Cobol85Parser.NUMERICLITERAL - 542)) | (1 << (Cobol85Parser.IDENTIFIER - 542)))) !== 0)) {
	                    this.state = 5988;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===Cobol85Parser.COMMACHAR) {
	                        this.state = 5987;
	                        this.match(Cobol85Parser.COMMACHAR);
	                    }

	                    this.state = 5990;
	                    this.subscript_();
	                    this.state = 5995;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 5996;
	                this.match(Cobol85Parser.RPARENCHAR); 
	            }
	            this.state = 6002;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,945,this._ctx);
	        }

	        this.state = 6004;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,946,this._ctx);
	        if(la_===1) {
	            this.state = 6003;
	            this.referenceModifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionCall() {
	    let localctx = new FunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1078, Cobol85Parser.RULE_functionCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6006;
	        this.match(Cobol85Parser.FUNCTION);
	        this.state = 6007;
	        this.functionName();
	        this.state = 6023;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,949,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 6008;
	                this.match(Cobol85Parser.LPARENCHAR);
	                this.state = 6009;
	                this.argument();
	                this.state = 6016;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL_ - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)) | (1 << (Cobol85Parser.COMMACHAR - 498)))) !== 0) || ((((_la - 542)) & ~0x1f) == 0 && ((1 << (_la - 542)) & ((1 << (Cobol85Parser.LPARENCHAR - 542)) | (1 << (Cobol85Parser.MINUSCHAR - 542)) | (1 << (Cobol85Parser.PLUSCHAR - 542)) | (1 << (Cobol85Parser.NONNUMERICLITERAL - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 542)) | (1 << (Cobol85Parser.INTEGERLITERAL - 542)) | (1 << (Cobol85Parser.NUMERICLITERAL - 542)) | (1 << (Cobol85Parser.IDENTIFIER - 542)))) !== 0)) {
	                    this.state = 6011;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===Cobol85Parser.COMMACHAR) {
	                        this.state = 6010;
	                        this.match(Cobol85Parser.COMMACHAR);
	                    }

	                    this.state = 6013;
	                    this.argument();
	                    this.state = 6018;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 6019;
	                this.match(Cobol85Parser.RPARENCHAR); 
	            }
	            this.state = 6025;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,949,this._ctx);
	        }

	        this.state = 6027;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,950,this._ctx);
	        if(la_===1) {
	            this.state = 6026;
	            this.referenceModifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referenceModifier() {
	    let localctx = new ReferenceModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1080, Cobol85Parser.RULE_referenceModifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6029;
	        this.match(Cobol85Parser.LPARENCHAR);
	        this.state = 6030;
	        this.characterPosition();
	        this.state = 6031;
	        this.match(Cobol85Parser.COLONCHAR);
	        this.state = 6033;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL_ - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 542)) & ~0x1f) == 0 && ((1 << (_la - 542)) & ((1 << (Cobol85Parser.LPARENCHAR - 542)) | (1 << (Cobol85Parser.MINUSCHAR - 542)) | (1 << (Cobol85Parser.PLUSCHAR - 542)) | (1 << (Cobol85Parser.NONNUMERICLITERAL - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 542)) | (1 << (Cobol85Parser.INTEGERLITERAL - 542)) | (1 << (Cobol85Parser.NUMERICLITERAL - 542)) | (1 << (Cobol85Parser.IDENTIFIER - 542)))) !== 0)) {
	            this.state = 6032;
	            this.length();
	        }

	        this.state = 6035;
	        this.match(Cobol85Parser.RPARENCHAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	characterPosition() {
	    let localctx = new CharacterPositionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1082, Cobol85Parser.RULE_characterPosition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6037;
	        this.arithmeticExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	length() {
	    let localctx = new LengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1084, Cobol85Parser.RULE_length);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6039;
	        this.arithmeticExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subscript_() {
	    let localctx = new Subscript_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 1086, Cobol85Parser.RULE_subscript_);
	    try {
	        this.state = 6052;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,954,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6041;
	            this.match(Cobol85Parser.ALL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6042;
	            this.integerLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6043;
	            this.qualifiedDataName();
	            this.state = 6045;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,952,this._ctx);
	            if(la_===1) {
	                this.state = 6044;
	                this.integerLiteral();

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6047;
	            this.indexName();
	            this.state = 6049;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,953,this._ctx);
	            if(la_===1) {
	                this.state = 6048;
	                this.integerLiteral();

	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6051;
	            this.arithmeticExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument() {
	    let localctx = new ArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1088, Cobol85Parser.RULE_argument);
	    try {
	        this.state = 6065;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,957,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6054;
	            this.literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6055;
	            this.identifier();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6056;
	            this.qualifiedDataName();
	            this.state = 6058;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,955,this._ctx);
	            if(la_===1) {
	                this.state = 6057;
	                this.integerLiteral();

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6060;
	            this.indexName();
	            this.state = 6062;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,956,this._ctx);
	            if(la_===1) {
	                this.state = 6061;
	                this.integerLiteral();

	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6064;
	            this.arithmeticExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedDataName() {
	    let localctx = new QualifiedDataNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1090, Cobol85Parser.RULE_qualifiedDataName);
	    try {
	        this.state = 6071;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,958,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6067;
	            this.qualifiedDataNameFormat1();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6068;
	            this.qualifiedDataNameFormat2();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6069;
	            this.qualifiedDataNameFormat3();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6070;
	            this.qualifiedDataNameFormat4();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedDataNameFormat1() {
	    let localctx = new QualifiedDataNameFormat1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 1092, Cobol85Parser.RULE_qualifiedDataNameFormat1);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6075;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,959,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 6073;
	            this.dataName();
	            break;

	        case 2:
	            this.state = 6074;
	            this.conditionName();
	            break;

	        }
	        this.state = 6086;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,962,this._ctx);
	        if(la_===1) {
	            this.state = 6078; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 6077;
	            		this.qualifiedInData();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 6080; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,960, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 6083;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,961,this._ctx);
	            if(la_===1) {
	                this.state = 6082;
	                this.inFile();

	            }

	        } else if(la_===2) {
	            this.state = 6085;
	            this.inFile();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedDataNameFormat2() {
	    let localctx = new QualifiedDataNameFormat2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 1094, Cobol85Parser.RULE_qualifiedDataNameFormat2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6088;
	        this.paragraphName();
	        this.state = 6089;
	        this.inSection();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedDataNameFormat3() {
	    let localctx = new QualifiedDataNameFormat3Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 1096, Cobol85Parser.RULE_qualifiedDataNameFormat3);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6091;
	        this.textName();
	        this.state = 6092;
	        this.inLibrary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedDataNameFormat4() {
	    let localctx = new QualifiedDataNameFormat4Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 1098, Cobol85Parser.RULE_qualifiedDataNameFormat4);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6094;
	        this.match(Cobol85Parser.LINAGE_COUNTER);
	        this.state = 6095;
	        this.inFile();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedInData() {
	    let localctx = new QualifiedInDataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1100, Cobol85Parser.RULE_qualifiedInData);
	    try {
	        this.state = 6099;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,963,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6097;
	            this.inData();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6098;
	            this.inTable();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inData() {
	    let localctx = new InDataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1102, Cobol85Parser.RULE_inData);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6101;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.IN || _la===Cobol85Parser.OF)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 6102;
	        this.dataName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inFile() {
	    let localctx = new InFileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1104, Cobol85Parser.RULE_inFile);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6104;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.IN || _la===Cobol85Parser.OF)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 6105;
	        this.fileName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inMnemonic() {
	    let localctx = new InMnemonicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1106, Cobol85Parser.RULE_inMnemonic);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6107;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.IN || _la===Cobol85Parser.OF)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 6108;
	        this.mnemonicName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inSection() {
	    let localctx = new InSectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1108, Cobol85Parser.RULE_inSection);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6110;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.IN || _la===Cobol85Parser.OF)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 6111;
	        this.sectionName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inLibrary() {
	    let localctx = new InLibraryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1110, Cobol85Parser.RULE_inLibrary);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6113;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.IN || _la===Cobol85Parser.OF)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 6114;
	        this.libraryName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inTable() {
	    let localctx = new InTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1112, Cobol85Parser.RULE_inTable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6116;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.IN || _la===Cobol85Parser.OF)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 6117;
	        this.tableCall();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alphabetName() {
	    let localctx = new AlphabetNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1114, Cobol85Parser.RULE_alphabetName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6119;
	        this.cobolWord();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentName() {
	    let localctx = new AssignmentNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1116, Cobol85Parser.RULE_assignmentName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6121;
	        this.systemName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	basisName() {
	    let localctx = new BasisNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1118, Cobol85Parser.RULE_basisName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6123;
	        this.programName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cdName() {
	    let localctx = new CdNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1120, Cobol85Parser.RULE_cdName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6125;
	        this.cobolWord();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	className() {
	    let localctx = new ClassNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1122, Cobol85Parser.RULE_className);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6127;
	        this.cobolWord();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	computerName() {
	    let localctx = new ComputerNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1124, Cobol85Parser.RULE_computerName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6129;
	        this.systemName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionName() {
	    let localctx = new ConditionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1126, Cobol85Parser.RULE_conditionName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6131;
	        this.cobolWord();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataName() {
	    let localctx = new DataNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1128, Cobol85Parser.RULE_dataName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6133;
	        this.cobolWord();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataDescName() {
	    let localctx = new DataDescNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1130, Cobol85Parser.RULE_dataDescName);
	    try {
	        this.state = 6138;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,964,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6135;
	            this.match(Cobol85Parser.FILLER);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6136;
	            this.match(Cobol85Parser.CURSOR);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6137;
	            this.dataName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	environmentName() {
	    let localctx = new EnvironmentNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1132, Cobol85Parser.RULE_environmentName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6140;
	        this.systemName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fileName() {
	    let localctx = new FileNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1134, Cobol85Parser.RULE_fileName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6142;
	        this.cobolWord();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionName() {
	    let localctx = new FunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1136, Cobol85Parser.RULE_functionName);
	    try {
	        this.state = 6150;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,965,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6144;
	            this.match(Cobol85Parser.INTEGER);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6145;
	            this.match(Cobol85Parser.LENGTH);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6146;
	            this.match(Cobol85Parser.RANDOM);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6147;
	            this.match(Cobol85Parser.SUM);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6148;
	            this.match(Cobol85Parser.WHEN_COMPILED);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6149;
	            this.cobolWord();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexName() {
	    let localctx = new IndexNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1138, Cobol85Parser.RULE_indexName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6152;
	        this.cobolWord();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	languageName() {
	    let localctx = new LanguageNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1140, Cobol85Parser.RULE_languageName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6154;
	        this.systemName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryName() {
	    let localctx = new LibraryNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1142, Cobol85Parser.RULE_libraryName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6156;
	        this.cobolWord();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localName() {
	    let localctx = new LocalNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1144, Cobol85Parser.RULE_localName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6158;
	        this.cobolWord();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mnemonicName() {
	    let localctx = new MnemonicNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1146, Cobol85Parser.RULE_mnemonicName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6160;
	        this.cobolWord();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	paragraphName() {
	    let localctx = new ParagraphNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1148, Cobol85Parser.RULE_paragraphName);
	    try {
	        this.state = 6164;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.ABORT:
	        case Cobol85Parser.AS:
	        case Cobol85Parser.ASCII:
	        case Cobol85Parser.ASSOCIATED_DATA:
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	        case Cobol85Parser.ATTRIBUTE:
	        case Cobol85Parser.AUTO:
	        case Cobol85Parser.AUTO_SKIP:
	        case Cobol85Parser.BACKGROUND_COLOR:
	        case Cobol85Parser.BACKGROUND_COLOUR:
	        case Cobol85Parser.BEEP:
	        case Cobol85Parser.BELL:
	        case Cobol85Parser.BINARY:
	        case Cobol85Parser.BIT:
	        case Cobol85Parser.BLINK:
	        case Cobol85Parser.BOUNDS:
	        case Cobol85Parser.CAPABLE:
	        case Cobol85Parser.CCSVERSION:
	        case Cobol85Parser.CHANGED:
	        case Cobol85Parser.CHANNEL:
	        case Cobol85Parser.CLOSE_DISPOSITION:
	        case Cobol85Parser.COBOL:
	        case Cobol85Parser.COMMITMENT:
	        case Cobol85Parser.CONTROL_POINT:
	        case Cobol85Parser.CONVENTION:
	        case Cobol85Parser.CRUNCH:
	        case Cobol85Parser.CURSOR:
	        case Cobol85Parser.DEFAULT:
	        case Cobol85Parser.DEFAULT_DISPLAY:
	        case Cobol85Parser.DEFINITION:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.DISK:
	        case Cobol85Parser.DONTCARE:
	        case Cobol85Parser.DOUBLE:
	        case Cobol85Parser.EBCDIC:
	        case Cobol85Parser.EMPTY_CHECK:
	        case Cobol85Parser.ENTER:
	        case Cobol85Parser.ENTRY_PROCEDURE:
	        case Cobol85Parser.ERASE:
	        case Cobol85Parser.EOL:
	        case Cobol85Parser.EOS:
	        case Cobol85Parser.ESCAPE:
	        case Cobol85Parser.EVENT:
	        case Cobol85Parser.EXCLUSIVE:
	        case Cobol85Parser.EXPORT:
	        case Cobol85Parser.EXTENDED:
	        case Cobol85Parser.FOREGROUND_COLOR:
	        case Cobol85Parser.FOREGROUND_COLOUR:
	        case Cobol85Parser.FULL:
	        case Cobol85Parser.FUNCTIONNAME:
	        case Cobol85Parser.FUNCTION_POINTER:
	        case Cobol85Parser.GRID:
	        case Cobol85Parser.HIGHLIGHT:
	        case Cobol85Parser.IMPLICIT:
	        case Cobol85Parser.IMPORT:
	        case Cobol85Parser.INTEGER:
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.KEYBOARD:
	        case Cobol85Parser.LANGUAGE:
	        case Cobol85Parser.LB:
	        case Cobol85Parser.LD:
	        case Cobol85Parser.LEFTLINE:
	        case Cobol85Parser.LENGTH_CHECK:
	        case Cobol85Parser.LIBACCESS:
	        case Cobol85Parser.LIBPARAMETER:
	        case Cobol85Parser.LIBRARY:
	        case Cobol85Parser.LIST:
	        case Cobol85Parser.LOCAL:
	        case Cobol85Parser.LONG_DATE:
	        case Cobol85Parser.LONG_TIME:
	        case Cobol85Parser.LOWER:
	        case Cobol85Parser.LOWLIGHT:
	        case Cobol85Parser.MMDDYYYY:
	        case Cobol85Parser.NAMED:
	        case Cobol85Parser.NATIONAL:
	        case Cobol85Parser.NATIONAL_EDITED:
	        case Cobol85Parser.NETWORK:
	        case Cobol85Parser.NO_ECHO:
	        case Cobol85Parser.NUMERIC_DATE:
	        case Cobol85Parser.NUMERIC_TIME:
	        case Cobol85Parser.ODT:
	        case Cobol85Parser.ORDERLY:
	        case Cobol85Parser.OVERLINE:
	        case Cobol85Parser.OWN:
	        case Cobol85Parser.PASSWORD:
	        case Cobol85Parser.PORT:
	        case Cobol85Parser.PRINTER:
	        case Cobol85Parser.PRIVATE:
	        case Cobol85Parser.PROCESS:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.PROMPT:
	        case Cobol85Parser.READER:
	        case Cobol85Parser.REMOTE:
	        case Cobol85Parser.REAL:
	        case Cobol85Parser.RECEIVED:
	        case Cobol85Parser.RECURSIVE:
	        case Cobol85Parser.REF:
	        case Cobol85Parser.REMOVE:
	        case Cobol85Parser.REQUIRED:
	        case Cobol85Parser.REVERSE_VIDEO:
	        case Cobol85Parser.SAVE:
	        case Cobol85Parser.SECURE:
	        case Cobol85Parser.SHARED:
	        case Cobol85Parser.SHAREDBYALL:
	        case Cobol85Parser.SHAREDBYRUNUNIT:
	        case Cobol85Parser.SHARING:
	        case Cobol85Parser.SHORT_DATE:
	        case Cobol85Parser.SYMBOL:
	        case Cobol85Parser.TASK:
	        case Cobol85Parser.THREAD:
	        case Cobol85Parser.THREAD_LOCAL:
	        case Cobol85Parser.TIMER:
	        case Cobol85Parser.TODAYS_DATE:
	        case Cobol85Parser.TODAYS_NAME:
	        case Cobol85Parser.TRUNCATED:
	        case Cobol85Parser.TYPEDEF:
	        case Cobol85Parser.UNDERLINE:
	        case Cobol85Parser.VIRTUAL:
	        case Cobol85Parser.WAIT:
	        case Cobol85Parser.YEAR:
	        case Cobol85Parser.YYYYMMDD:
	        case Cobol85Parser.YYYYDDD:
	        case Cobol85Parser.ZERO_FILL:
	        case Cobol85Parser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6162;
	            this.cobolWord();
	            break;
	        case Cobol85Parser.LEVEL_NUMBER_66:
	        case Cobol85Parser.LEVEL_NUMBER_77:
	        case Cobol85Parser.LEVEL_NUMBER_88:
	        case Cobol85Parser.INTEGERLITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6163;
	            this.integerLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureName() {
	    let localctx = new ProcedureNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1150, Cobol85Parser.RULE_procedureName);
	    var _la = 0; // Token type
	    try {
	        this.state = 6171;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,968,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6166;
	            this.paragraphName();
	            this.state = 6168;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.IN || _la===Cobol85Parser.OF) {
	                this.state = 6167;
	                this.inSection();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6170;
	            this.sectionName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	programName() {
	    let localctx = new ProgramNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1152, Cobol85Parser.RULE_programName);
	    try {
	        this.state = 6175;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.NONNUMERICLITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6173;
	            this.match(Cobol85Parser.NONNUMERICLITERAL);
	            break;
	        case Cobol85Parser.ABORT:
	        case Cobol85Parser.AS:
	        case Cobol85Parser.ASCII:
	        case Cobol85Parser.ASSOCIATED_DATA:
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	        case Cobol85Parser.ATTRIBUTE:
	        case Cobol85Parser.AUTO:
	        case Cobol85Parser.AUTO_SKIP:
	        case Cobol85Parser.BACKGROUND_COLOR:
	        case Cobol85Parser.BACKGROUND_COLOUR:
	        case Cobol85Parser.BEEP:
	        case Cobol85Parser.BELL:
	        case Cobol85Parser.BINARY:
	        case Cobol85Parser.BIT:
	        case Cobol85Parser.BLINK:
	        case Cobol85Parser.BOUNDS:
	        case Cobol85Parser.CAPABLE:
	        case Cobol85Parser.CCSVERSION:
	        case Cobol85Parser.CHANGED:
	        case Cobol85Parser.CHANNEL:
	        case Cobol85Parser.CLOSE_DISPOSITION:
	        case Cobol85Parser.COBOL:
	        case Cobol85Parser.COMMITMENT:
	        case Cobol85Parser.CONTROL_POINT:
	        case Cobol85Parser.CONVENTION:
	        case Cobol85Parser.CRUNCH:
	        case Cobol85Parser.CURSOR:
	        case Cobol85Parser.DEFAULT:
	        case Cobol85Parser.DEFAULT_DISPLAY:
	        case Cobol85Parser.DEFINITION:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.DISK:
	        case Cobol85Parser.DONTCARE:
	        case Cobol85Parser.DOUBLE:
	        case Cobol85Parser.EBCDIC:
	        case Cobol85Parser.EMPTY_CHECK:
	        case Cobol85Parser.ENTER:
	        case Cobol85Parser.ENTRY_PROCEDURE:
	        case Cobol85Parser.ERASE:
	        case Cobol85Parser.EOL:
	        case Cobol85Parser.EOS:
	        case Cobol85Parser.ESCAPE:
	        case Cobol85Parser.EVENT:
	        case Cobol85Parser.EXCLUSIVE:
	        case Cobol85Parser.EXPORT:
	        case Cobol85Parser.EXTENDED:
	        case Cobol85Parser.FOREGROUND_COLOR:
	        case Cobol85Parser.FOREGROUND_COLOUR:
	        case Cobol85Parser.FULL:
	        case Cobol85Parser.FUNCTIONNAME:
	        case Cobol85Parser.FUNCTION_POINTER:
	        case Cobol85Parser.GRID:
	        case Cobol85Parser.HIGHLIGHT:
	        case Cobol85Parser.IMPLICIT:
	        case Cobol85Parser.IMPORT:
	        case Cobol85Parser.INTEGER:
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.KEYBOARD:
	        case Cobol85Parser.LANGUAGE:
	        case Cobol85Parser.LB:
	        case Cobol85Parser.LD:
	        case Cobol85Parser.LEFTLINE:
	        case Cobol85Parser.LENGTH_CHECK:
	        case Cobol85Parser.LIBACCESS:
	        case Cobol85Parser.LIBPARAMETER:
	        case Cobol85Parser.LIBRARY:
	        case Cobol85Parser.LIST:
	        case Cobol85Parser.LOCAL:
	        case Cobol85Parser.LONG_DATE:
	        case Cobol85Parser.LONG_TIME:
	        case Cobol85Parser.LOWER:
	        case Cobol85Parser.LOWLIGHT:
	        case Cobol85Parser.MMDDYYYY:
	        case Cobol85Parser.NAMED:
	        case Cobol85Parser.NATIONAL:
	        case Cobol85Parser.NATIONAL_EDITED:
	        case Cobol85Parser.NETWORK:
	        case Cobol85Parser.NO_ECHO:
	        case Cobol85Parser.NUMERIC_DATE:
	        case Cobol85Parser.NUMERIC_TIME:
	        case Cobol85Parser.ODT:
	        case Cobol85Parser.ORDERLY:
	        case Cobol85Parser.OVERLINE:
	        case Cobol85Parser.OWN:
	        case Cobol85Parser.PASSWORD:
	        case Cobol85Parser.PORT:
	        case Cobol85Parser.PRINTER:
	        case Cobol85Parser.PRIVATE:
	        case Cobol85Parser.PROCESS:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.PROMPT:
	        case Cobol85Parser.READER:
	        case Cobol85Parser.REMOTE:
	        case Cobol85Parser.REAL:
	        case Cobol85Parser.RECEIVED:
	        case Cobol85Parser.RECURSIVE:
	        case Cobol85Parser.REF:
	        case Cobol85Parser.REMOVE:
	        case Cobol85Parser.REQUIRED:
	        case Cobol85Parser.REVERSE_VIDEO:
	        case Cobol85Parser.SAVE:
	        case Cobol85Parser.SECURE:
	        case Cobol85Parser.SHARED:
	        case Cobol85Parser.SHAREDBYALL:
	        case Cobol85Parser.SHAREDBYRUNUNIT:
	        case Cobol85Parser.SHARING:
	        case Cobol85Parser.SHORT_DATE:
	        case Cobol85Parser.SYMBOL:
	        case Cobol85Parser.TASK:
	        case Cobol85Parser.THREAD:
	        case Cobol85Parser.THREAD_LOCAL:
	        case Cobol85Parser.TIMER:
	        case Cobol85Parser.TODAYS_DATE:
	        case Cobol85Parser.TODAYS_NAME:
	        case Cobol85Parser.TRUNCATED:
	        case Cobol85Parser.TYPEDEF:
	        case Cobol85Parser.UNDERLINE:
	        case Cobol85Parser.VIRTUAL:
	        case Cobol85Parser.WAIT:
	        case Cobol85Parser.YEAR:
	        case Cobol85Parser.YYYYMMDD:
	        case Cobol85Parser.YYYYDDD:
	        case Cobol85Parser.ZERO_FILL:
	        case Cobol85Parser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6174;
	            this.cobolWord();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordName() {
	    let localctx = new RecordNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1154, Cobol85Parser.RULE_recordName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6177;
	        this.qualifiedDataName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reportName() {
	    let localctx = new ReportNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1156, Cobol85Parser.RULE_reportName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6179;
	        this.qualifiedDataName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	routineName() {
	    let localctx = new RoutineNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1158, Cobol85Parser.RULE_routineName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6181;
	        this.cobolWord();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screenName() {
	    let localctx = new ScreenNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1160, Cobol85Parser.RULE_screenName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6183;
	        this.cobolWord();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sectionName() {
	    let localctx = new SectionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1162, Cobol85Parser.RULE_sectionName);
	    try {
	        this.state = 6187;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.ABORT:
	        case Cobol85Parser.AS:
	        case Cobol85Parser.ASCII:
	        case Cobol85Parser.ASSOCIATED_DATA:
	        case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
	        case Cobol85Parser.ATTRIBUTE:
	        case Cobol85Parser.AUTO:
	        case Cobol85Parser.AUTO_SKIP:
	        case Cobol85Parser.BACKGROUND_COLOR:
	        case Cobol85Parser.BACKGROUND_COLOUR:
	        case Cobol85Parser.BEEP:
	        case Cobol85Parser.BELL:
	        case Cobol85Parser.BINARY:
	        case Cobol85Parser.BIT:
	        case Cobol85Parser.BLINK:
	        case Cobol85Parser.BOUNDS:
	        case Cobol85Parser.CAPABLE:
	        case Cobol85Parser.CCSVERSION:
	        case Cobol85Parser.CHANGED:
	        case Cobol85Parser.CHANNEL:
	        case Cobol85Parser.CLOSE_DISPOSITION:
	        case Cobol85Parser.COBOL:
	        case Cobol85Parser.COMMITMENT:
	        case Cobol85Parser.CONTROL_POINT:
	        case Cobol85Parser.CONVENTION:
	        case Cobol85Parser.CRUNCH:
	        case Cobol85Parser.CURSOR:
	        case Cobol85Parser.DEFAULT:
	        case Cobol85Parser.DEFAULT_DISPLAY:
	        case Cobol85Parser.DEFINITION:
	        case Cobol85Parser.DFHRESP:
	        case Cobol85Parser.DFHVALUE:
	        case Cobol85Parser.DISK:
	        case Cobol85Parser.DONTCARE:
	        case Cobol85Parser.DOUBLE:
	        case Cobol85Parser.EBCDIC:
	        case Cobol85Parser.EMPTY_CHECK:
	        case Cobol85Parser.ENTER:
	        case Cobol85Parser.ENTRY_PROCEDURE:
	        case Cobol85Parser.ERASE:
	        case Cobol85Parser.EOL:
	        case Cobol85Parser.EOS:
	        case Cobol85Parser.ESCAPE:
	        case Cobol85Parser.EVENT:
	        case Cobol85Parser.EXCLUSIVE:
	        case Cobol85Parser.EXPORT:
	        case Cobol85Parser.EXTENDED:
	        case Cobol85Parser.FOREGROUND_COLOR:
	        case Cobol85Parser.FOREGROUND_COLOUR:
	        case Cobol85Parser.FULL:
	        case Cobol85Parser.FUNCTIONNAME:
	        case Cobol85Parser.FUNCTION_POINTER:
	        case Cobol85Parser.GRID:
	        case Cobol85Parser.HIGHLIGHT:
	        case Cobol85Parser.IMPLICIT:
	        case Cobol85Parser.IMPORT:
	        case Cobol85Parser.INTEGER:
	        case Cobol85Parser.KEPT:
	        case Cobol85Parser.KEYBOARD:
	        case Cobol85Parser.LANGUAGE:
	        case Cobol85Parser.LB:
	        case Cobol85Parser.LD:
	        case Cobol85Parser.LEFTLINE:
	        case Cobol85Parser.LENGTH_CHECK:
	        case Cobol85Parser.LIBACCESS:
	        case Cobol85Parser.LIBPARAMETER:
	        case Cobol85Parser.LIBRARY:
	        case Cobol85Parser.LIST:
	        case Cobol85Parser.LOCAL:
	        case Cobol85Parser.LONG_DATE:
	        case Cobol85Parser.LONG_TIME:
	        case Cobol85Parser.LOWER:
	        case Cobol85Parser.LOWLIGHT:
	        case Cobol85Parser.MMDDYYYY:
	        case Cobol85Parser.NAMED:
	        case Cobol85Parser.NATIONAL:
	        case Cobol85Parser.NATIONAL_EDITED:
	        case Cobol85Parser.NETWORK:
	        case Cobol85Parser.NO_ECHO:
	        case Cobol85Parser.NUMERIC_DATE:
	        case Cobol85Parser.NUMERIC_TIME:
	        case Cobol85Parser.ODT:
	        case Cobol85Parser.ORDERLY:
	        case Cobol85Parser.OVERLINE:
	        case Cobol85Parser.OWN:
	        case Cobol85Parser.PASSWORD:
	        case Cobol85Parser.PORT:
	        case Cobol85Parser.PRINTER:
	        case Cobol85Parser.PRIVATE:
	        case Cobol85Parser.PROCESS:
	        case Cobol85Parser.PROGRAM:
	        case Cobol85Parser.PROMPT:
	        case Cobol85Parser.READER:
	        case Cobol85Parser.REMOTE:
	        case Cobol85Parser.REAL:
	        case Cobol85Parser.RECEIVED:
	        case Cobol85Parser.RECURSIVE:
	        case Cobol85Parser.REF:
	        case Cobol85Parser.REMOVE:
	        case Cobol85Parser.REQUIRED:
	        case Cobol85Parser.REVERSE_VIDEO:
	        case Cobol85Parser.SAVE:
	        case Cobol85Parser.SECURE:
	        case Cobol85Parser.SHARED:
	        case Cobol85Parser.SHAREDBYALL:
	        case Cobol85Parser.SHAREDBYRUNUNIT:
	        case Cobol85Parser.SHARING:
	        case Cobol85Parser.SHORT_DATE:
	        case Cobol85Parser.SYMBOL:
	        case Cobol85Parser.TASK:
	        case Cobol85Parser.THREAD:
	        case Cobol85Parser.THREAD_LOCAL:
	        case Cobol85Parser.TIMER:
	        case Cobol85Parser.TODAYS_DATE:
	        case Cobol85Parser.TODAYS_NAME:
	        case Cobol85Parser.TRUNCATED:
	        case Cobol85Parser.TYPEDEF:
	        case Cobol85Parser.UNDERLINE:
	        case Cobol85Parser.VIRTUAL:
	        case Cobol85Parser.WAIT:
	        case Cobol85Parser.YEAR:
	        case Cobol85Parser.YYYYMMDD:
	        case Cobol85Parser.YYYYDDD:
	        case Cobol85Parser.ZERO_FILL:
	        case Cobol85Parser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6185;
	            this.cobolWord();
	            break;
	        case Cobol85Parser.LEVEL_NUMBER_66:
	        case Cobol85Parser.LEVEL_NUMBER_77:
	        case Cobol85Parser.LEVEL_NUMBER_88:
	        case Cobol85Parser.INTEGERLITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6186;
	            this.integerLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	systemName() {
	    let localctx = new SystemNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1164, Cobol85Parser.RULE_systemName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6189;
	        this.cobolWord();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	symbolicCharacter() {
	    let localctx = new SymbolicCharacterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1166, Cobol85Parser.RULE_symbolicCharacter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6191;
	        this.cobolWord();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textName() {
	    let localctx = new TextNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1168, Cobol85Parser.RULE_textName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6193;
	        this.cobolWord();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cobolWord() {
	    let localctx = new CobolWordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1170, Cobol85Parser.RULE_cobolWord);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6195;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1f) == 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1f) == 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1f) == 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1f) == 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1f) == 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1f) == 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1f) == 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1f) == 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la===Cobol85Parser.IDENTIFIER)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1172, Cobol85Parser.RULE_literal);
	    try {
	        this.state = 6203;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,971,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6197;
	            this.match(Cobol85Parser.NONNUMERICLITERAL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6198;
	            this.figurativeConstant();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6199;
	            this.numericLiteral();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6200;
	            this.booleanLiteral();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6201;
	            this.cicsDfhRespLiteral();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6202;
	            this.cicsDfhValueLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanLiteral() {
	    let localctx = new BooleanLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1174, Cobol85Parser.RULE_booleanLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6205;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85Parser.FALSE || _la===Cobol85Parser.TRUE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteral() {
	    let localctx = new NumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1176, Cobol85Parser.RULE_numericLiteral);
	    try {
	        this.state = 6210;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.NUMERICLITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6207;
	            this.match(Cobol85Parser.NUMERICLITERAL);
	            break;
	        case Cobol85Parser.ZERO:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6208;
	            this.match(Cobol85Parser.ZERO);
	            break;
	        case Cobol85Parser.LEVEL_NUMBER_66:
	        case Cobol85Parser.LEVEL_NUMBER_77:
	        case Cobol85Parser.LEVEL_NUMBER_88:
	        case Cobol85Parser.INTEGERLITERAL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6209;
	            this.integerLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integerLiteral() {
	    let localctx = new IntegerLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1178, Cobol85Parser.RULE_integerLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6212;
	        _la = this._input.LA(1);
	        if(!(((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cicsDfhRespLiteral() {
	    let localctx = new CicsDfhRespLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1180, Cobol85Parser.RULE_cicsDfhRespLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6214;
	        this.match(Cobol85Parser.DFHRESP);
	        this.state = 6215;
	        this.match(Cobol85Parser.LPARENCHAR);
	        this.state = 6218;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,973,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 6216;
	            this.cobolWord();
	            break;

	        case 2:
	            this.state = 6217;
	            this.literal();
	            break;

	        }
	        this.state = 6220;
	        this.match(Cobol85Parser.RPARENCHAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cicsDfhValueLiteral() {
	    let localctx = new CicsDfhValueLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1182, Cobol85Parser.RULE_cicsDfhValueLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6222;
	        this.match(Cobol85Parser.DFHVALUE);
	        this.state = 6223;
	        this.match(Cobol85Parser.LPARENCHAR);
	        this.state = 6226;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,974,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 6224;
	            this.cobolWord();
	            break;

	        case 2:
	            this.state = 6225;
	            this.literal();
	            break;

	        }
	        this.state = 6228;
	        this.match(Cobol85Parser.RPARENCHAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	figurativeConstant() {
	    let localctx = new FigurativeConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1184, Cobol85Parser.RULE_figurativeConstant);
	    try {
	        this.state = 6245;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.ALL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6230;
	            this.match(Cobol85Parser.ALL);
	            this.state = 6231;
	            this.literal();
	            break;
	        case Cobol85Parser.HIGH_VALUE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6232;
	            this.match(Cobol85Parser.HIGH_VALUE);
	            break;
	        case Cobol85Parser.HIGH_VALUES:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6233;
	            this.match(Cobol85Parser.HIGH_VALUES);
	            break;
	        case Cobol85Parser.LOW_VALUE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6234;
	            this.match(Cobol85Parser.LOW_VALUE);
	            break;
	        case Cobol85Parser.LOW_VALUES:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6235;
	            this.match(Cobol85Parser.LOW_VALUES);
	            break;
	        case Cobol85Parser.NULL_:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6236;
	            this.match(Cobol85Parser.NULL_);
	            break;
	        case Cobol85Parser.NULLS:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6237;
	            this.match(Cobol85Parser.NULLS);
	            break;
	        case Cobol85Parser.QUOTE:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 6238;
	            this.match(Cobol85Parser.QUOTE);
	            break;
	        case Cobol85Parser.QUOTES:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 6239;
	            this.match(Cobol85Parser.QUOTES);
	            break;
	        case Cobol85Parser.SPACE:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 6240;
	            this.match(Cobol85Parser.SPACE);
	            break;
	        case Cobol85Parser.SPACES:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 6241;
	            this.match(Cobol85Parser.SPACES);
	            break;
	        case Cobol85Parser.ZERO:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 6242;
	            this.match(Cobol85Parser.ZERO);
	            break;
	        case Cobol85Parser.ZEROS:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 6243;
	            this.match(Cobol85Parser.ZEROS);
	            break;
	        case Cobol85Parser.ZEROES:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 6244;
	            this.match(Cobol85Parser.ZEROES);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	specialRegister() {
	    let localctx = new SpecialRegisterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1186, Cobol85Parser.RULE_specialRegister);
	    var _la = 0; // Token type
	    try {
	        this.state = 6280;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85Parser.ADDRESS:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6247;
	            this.match(Cobol85Parser.ADDRESS);
	            this.state = 6248;
	            this.match(Cobol85Parser.OF);
	            this.state = 6249;
	            this.identifier();
	            break;
	        case Cobol85Parser.DATE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6250;
	            this.match(Cobol85Parser.DATE);
	            break;
	        case Cobol85Parser.DAY:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6251;
	            this.match(Cobol85Parser.DAY);
	            break;
	        case Cobol85Parser.DAY_OF_WEEK:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6252;
	            this.match(Cobol85Parser.DAY_OF_WEEK);
	            break;
	        case Cobol85Parser.DEBUG_CONTENTS:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6253;
	            this.match(Cobol85Parser.DEBUG_CONTENTS);
	            break;
	        case Cobol85Parser.DEBUG_ITEM:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6254;
	            this.match(Cobol85Parser.DEBUG_ITEM);
	            break;
	        case Cobol85Parser.DEBUG_LINE:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6255;
	            this.match(Cobol85Parser.DEBUG_LINE);
	            break;
	        case Cobol85Parser.DEBUG_NAME:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 6256;
	            this.match(Cobol85Parser.DEBUG_NAME);
	            break;
	        case Cobol85Parser.DEBUG_SUB_1:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 6257;
	            this.match(Cobol85Parser.DEBUG_SUB_1);
	            break;
	        case Cobol85Parser.DEBUG_SUB_2:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 6258;
	            this.match(Cobol85Parser.DEBUG_SUB_2);
	            break;
	        case Cobol85Parser.DEBUG_SUB_3:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 6259;
	            this.match(Cobol85Parser.DEBUG_SUB_3);
	            break;
	        case Cobol85Parser.LENGTH:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 6260;
	            this.match(Cobol85Parser.LENGTH);
	            this.state = 6262;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85Parser.OF) {
	                this.state = 6261;
	                this.match(Cobol85Parser.OF);
	            }

	            this.state = 6264;
	            this.identifier();
	            break;
	        case Cobol85Parser.LINAGE_COUNTER:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 6265;
	            this.match(Cobol85Parser.LINAGE_COUNTER);
	            break;
	        case Cobol85Parser.LINE_COUNTER:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 6266;
	            this.match(Cobol85Parser.LINE_COUNTER);
	            break;
	        case Cobol85Parser.PAGE_COUNTER:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 6267;
	            this.match(Cobol85Parser.PAGE_COUNTER);
	            break;
	        case Cobol85Parser.RETURN_CODE:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 6268;
	            this.match(Cobol85Parser.RETURN_CODE);
	            break;
	        case Cobol85Parser.SHIFT_IN:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 6269;
	            this.match(Cobol85Parser.SHIFT_IN);
	            break;
	        case Cobol85Parser.SHIFT_OUT:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 6270;
	            this.match(Cobol85Parser.SHIFT_OUT);
	            break;
	        case Cobol85Parser.SORT_CONTROL:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 6271;
	            this.match(Cobol85Parser.SORT_CONTROL);
	            break;
	        case Cobol85Parser.SORT_CORE_SIZE:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 6272;
	            this.match(Cobol85Parser.SORT_CORE_SIZE);
	            break;
	        case Cobol85Parser.SORT_FILE_SIZE:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 6273;
	            this.match(Cobol85Parser.SORT_FILE_SIZE);
	            break;
	        case Cobol85Parser.SORT_MESSAGE:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 6274;
	            this.match(Cobol85Parser.SORT_MESSAGE);
	            break;
	        case Cobol85Parser.SORT_MODE_SIZE:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 6275;
	            this.match(Cobol85Parser.SORT_MODE_SIZE);
	            break;
	        case Cobol85Parser.SORT_RETURN:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 6276;
	            this.match(Cobol85Parser.SORT_RETURN);
	            break;
	        case Cobol85Parser.TALLY:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 6277;
	            this.match(Cobol85Parser.TALLY);
	            break;
	        case Cobol85Parser.TIME:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 6278;
	            this.match(Cobol85Parser.TIME);
	            break;
	        case Cobol85Parser.WHEN_COMPILED:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 6279;
	            this.match(Cobol85Parser.WHEN_COMPILED);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commentEntry() {
	    let localctx = new CommentEntryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1188, Cobol85Parser.RULE_commentEntry);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6283; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 6282;
	            this.match(Cobol85Parser.COMMENTENTRYLINE);
	            this.state = 6285; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===Cobol85Parser.COMMENTENTRYLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

Cobol85Parser.EOF = antlr4.Token.EOF;
Cobol85Parser.ABORT = 1;
Cobol85Parser.ACCEPT = 2;
Cobol85Parser.ACCESS = 3;
Cobol85Parser.ADD = 4;
Cobol85Parser.ADDRESS = 5;
Cobol85Parser.ADVANCING = 6;
Cobol85Parser.AFTER = 7;
Cobol85Parser.ALIGNED = 8;
Cobol85Parser.ALL = 9;
Cobol85Parser.ALPHABET = 10;
Cobol85Parser.ALPHABETIC = 11;
Cobol85Parser.ALPHABETIC_LOWER = 12;
Cobol85Parser.ALPHABETIC_UPPER = 13;
Cobol85Parser.ALPHANUMERIC = 14;
Cobol85Parser.ALPHANUMERIC_EDITED = 15;
Cobol85Parser.ALSO = 16;
Cobol85Parser.ALTER = 17;
Cobol85Parser.ALTERNATE = 18;
Cobol85Parser.AND = 19;
Cobol85Parser.ANY = 20;
Cobol85Parser.ARE = 21;
Cobol85Parser.AREA = 22;
Cobol85Parser.AREAS = 23;
Cobol85Parser.AS = 24;
Cobol85Parser.ASCENDING = 25;
Cobol85Parser.ASCII = 26;
Cobol85Parser.ASSIGN = 27;
Cobol85Parser.ASSOCIATED_DATA = 28;
Cobol85Parser.ASSOCIATED_DATA_LENGTH = 29;
Cobol85Parser.AT = 30;
Cobol85Parser.ATTRIBUTE = 31;
Cobol85Parser.AUTHOR = 32;
Cobol85Parser.AUTO = 33;
Cobol85Parser.AUTO_SKIP = 34;
Cobol85Parser.BACKGROUND_COLOR = 35;
Cobol85Parser.BACKGROUND_COLOUR = 36;
Cobol85Parser.BASIS = 37;
Cobol85Parser.BEEP = 38;
Cobol85Parser.BEFORE = 39;
Cobol85Parser.BEGINNING = 40;
Cobol85Parser.BELL = 41;
Cobol85Parser.BINARY = 42;
Cobol85Parser.BIT = 43;
Cobol85Parser.BLANK = 44;
Cobol85Parser.BLINK = 45;
Cobol85Parser.BLOCK = 46;
Cobol85Parser.BOUNDS = 47;
Cobol85Parser.BOTTOM = 48;
Cobol85Parser.BY = 49;
Cobol85Parser.BYFUNCTION = 50;
Cobol85Parser.BYTITLE = 51;
Cobol85Parser.CALL = 52;
Cobol85Parser.CANCEL = 53;
Cobol85Parser.CAPABLE = 54;
Cobol85Parser.CCSVERSION = 55;
Cobol85Parser.CD = 56;
Cobol85Parser.CF = 57;
Cobol85Parser.CH = 58;
Cobol85Parser.CHAINING = 59;
Cobol85Parser.CHANGED = 60;
Cobol85Parser.CHANNEL = 61;
Cobol85Parser.CHARACTER = 62;
Cobol85Parser.CHARACTERS = 63;
Cobol85Parser.CLASS = 64;
Cobol85Parser.CLASS_ID = 65;
Cobol85Parser.CLOCK_UNITS = 66;
Cobol85Parser.CLOSE = 67;
Cobol85Parser.CLOSE_DISPOSITION = 68;
Cobol85Parser.COBOL = 69;
Cobol85Parser.CODE = 70;
Cobol85Parser.CODE_SET = 71;
Cobol85Parser.COLLATING = 72;
Cobol85Parser.COL = 73;
Cobol85Parser.COLUMN = 74;
Cobol85Parser.COM_REG = 75;
Cobol85Parser.COMMA = 76;
Cobol85Parser.COMMITMENT = 77;
Cobol85Parser.COMMON = 78;
Cobol85Parser.COMMUNICATION = 79;
Cobol85Parser.COMP = 80;
Cobol85Parser.COMP_1 = 81;
Cobol85Parser.COMP_2 = 82;
Cobol85Parser.COMP_3 = 83;
Cobol85Parser.COMP_4 = 84;
Cobol85Parser.COMP_5 = 85;
Cobol85Parser.COMPUTATIONAL = 86;
Cobol85Parser.COMPUTATIONAL_1 = 87;
Cobol85Parser.COMPUTATIONAL_2 = 88;
Cobol85Parser.COMPUTATIONAL_3 = 89;
Cobol85Parser.COMPUTATIONAL_4 = 90;
Cobol85Parser.COMPUTATIONAL_5 = 91;
Cobol85Parser.COMPUTE = 92;
Cobol85Parser.CONFIGURATION = 93;
Cobol85Parser.CONTAINS = 94;
Cobol85Parser.CONTENT = 95;
Cobol85Parser.CONTINUE = 96;
Cobol85Parser.CONTROL = 97;
Cobol85Parser.CONTROL_POINT = 98;
Cobol85Parser.CONTROLS = 99;
Cobol85Parser.CONVENTION = 100;
Cobol85Parser.CONVERTING = 101;
Cobol85Parser.COPY = 102;
Cobol85Parser.CORR = 103;
Cobol85Parser.CORRESPONDING = 104;
Cobol85Parser.COUNT = 105;
Cobol85Parser.CRUNCH = 106;
Cobol85Parser.CURRENCY = 107;
Cobol85Parser.CURSOR = 108;
Cobol85Parser.DATA = 109;
Cobol85Parser.DATA_BASE = 110;
Cobol85Parser.DATE = 111;
Cobol85Parser.DATE_COMPILED = 112;
Cobol85Parser.DATE_WRITTEN = 113;
Cobol85Parser.DAY = 114;
Cobol85Parser.DAY_OF_WEEK = 115;
Cobol85Parser.DBCS = 116;
Cobol85Parser.DE = 117;
Cobol85Parser.DEBUG_CONTENTS = 118;
Cobol85Parser.DEBUG_ITEM = 119;
Cobol85Parser.DEBUG_LINE = 120;
Cobol85Parser.DEBUG_NAME = 121;
Cobol85Parser.DEBUG_SUB_1 = 122;
Cobol85Parser.DEBUG_SUB_2 = 123;
Cobol85Parser.DEBUG_SUB_3 = 124;
Cobol85Parser.DEBUGGING = 125;
Cobol85Parser.DECIMAL_POINT = 126;
Cobol85Parser.DECLARATIVES = 127;
Cobol85Parser.DEFAULT = 128;
Cobol85Parser.DEFAULT_DISPLAY = 129;
Cobol85Parser.DEFINITION = 130;
Cobol85Parser.DELETE = 131;
Cobol85Parser.DELIMITED = 132;
Cobol85Parser.DELIMITER = 133;
Cobol85Parser.DEPENDING = 134;
Cobol85Parser.DESCENDING = 135;
Cobol85Parser.DESTINATION = 136;
Cobol85Parser.DETAIL = 137;
Cobol85Parser.DFHRESP = 138;
Cobol85Parser.DFHVALUE = 139;
Cobol85Parser.DISABLE = 140;
Cobol85Parser.DISK = 141;
Cobol85Parser.DISPLAY = 142;
Cobol85Parser.DISPLAY_1 = 143;
Cobol85Parser.DIVIDE = 144;
Cobol85Parser.DIVISION = 145;
Cobol85Parser.DONTCARE = 146;
Cobol85Parser.DOUBLE = 147;
Cobol85Parser.DOWN = 148;
Cobol85Parser.DUPLICATES = 149;
Cobol85Parser.DYNAMIC = 150;
Cobol85Parser.EBCDIC = 151;
Cobol85Parser.EGCS = 152;
Cobol85Parser.EGI = 153;
Cobol85Parser.ELSE = 154;
Cobol85Parser.EMI = 155;
Cobol85Parser.EMPTY_CHECK = 156;
Cobol85Parser.ENABLE = 157;
Cobol85Parser.END = 158;
Cobol85Parser.END_ACCEPT = 159;
Cobol85Parser.END_ADD = 160;
Cobol85Parser.END_CALL = 161;
Cobol85Parser.END_COMPUTE = 162;
Cobol85Parser.END_DELETE = 163;
Cobol85Parser.END_DIVIDE = 164;
Cobol85Parser.END_EVALUATE = 165;
Cobol85Parser.END_IF = 166;
Cobol85Parser.END_MULTIPLY = 167;
Cobol85Parser.END_OF_PAGE = 168;
Cobol85Parser.END_PERFORM = 169;
Cobol85Parser.END_READ = 170;
Cobol85Parser.END_RECEIVE = 171;
Cobol85Parser.END_RETURN = 172;
Cobol85Parser.END_REWRITE = 173;
Cobol85Parser.END_SEARCH = 174;
Cobol85Parser.END_START = 175;
Cobol85Parser.END_STRING = 176;
Cobol85Parser.END_SUBTRACT = 177;
Cobol85Parser.END_UNSTRING = 178;
Cobol85Parser.END_WRITE = 179;
Cobol85Parser.ENDING = 180;
Cobol85Parser.ENTER = 181;
Cobol85Parser.ENTRY = 182;
Cobol85Parser.ENTRY_PROCEDURE = 183;
Cobol85Parser.ENVIRONMENT = 184;
Cobol85Parser.EOP = 185;
Cobol85Parser.EQUAL = 186;
Cobol85Parser.ERASE = 187;
Cobol85Parser.ERROR = 188;
Cobol85Parser.EOL = 189;
Cobol85Parser.EOS = 190;
Cobol85Parser.ESCAPE = 191;
Cobol85Parser.ESI = 192;
Cobol85Parser.EVALUATE = 193;
Cobol85Parser.EVENT = 194;
Cobol85Parser.EVERY = 195;
Cobol85Parser.EXCEPTION = 196;
Cobol85Parser.EXCLUSIVE = 197;
Cobol85Parser.EXHIBIT = 198;
Cobol85Parser.EXIT = 199;
Cobol85Parser.EXPORT = 200;
Cobol85Parser.EXTEND = 201;
Cobol85Parser.EXTENDED = 202;
Cobol85Parser.EXTERNAL = 203;
Cobol85Parser.FALSE = 204;
Cobol85Parser.FD = 205;
Cobol85Parser.FILE = 206;
Cobol85Parser.FILE_CONTROL = 207;
Cobol85Parser.FILLER = 208;
Cobol85Parser.FINAL = 209;
Cobol85Parser.FIRST = 210;
Cobol85Parser.FOOTING = 211;
Cobol85Parser.FOR = 212;
Cobol85Parser.FOREGROUND_COLOR = 213;
Cobol85Parser.FOREGROUND_COLOUR = 214;
Cobol85Parser.FROM = 215;
Cobol85Parser.FULL = 216;
Cobol85Parser.FUNCTION = 217;
Cobol85Parser.FUNCTIONNAME = 218;
Cobol85Parser.FUNCTION_POINTER = 219;
Cobol85Parser.GENERATE = 220;
Cobol85Parser.GOBACK = 221;
Cobol85Parser.GIVING = 222;
Cobol85Parser.GLOBAL = 223;
Cobol85Parser.GO = 224;
Cobol85Parser.GREATER = 225;
Cobol85Parser.GRID = 226;
Cobol85Parser.GROUP = 227;
Cobol85Parser.HEADING = 228;
Cobol85Parser.HIGHLIGHT = 229;
Cobol85Parser.HIGH_VALUE = 230;
Cobol85Parser.HIGH_VALUES = 231;
Cobol85Parser.I_O = 232;
Cobol85Parser.I_O_CONTROL = 233;
Cobol85Parser.ID = 234;
Cobol85Parser.IDENTIFICATION = 235;
Cobol85Parser.IF = 236;
Cobol85Parser.IMPLICIT = 237;
Cobol85Parser.IMPORT = 238;
Cobol85Parser.IN = 239;
Cobol85Parser.INDEX = 240;
Cobol85Parser.INDEXED = 241;
Cobol85Parser.INDICATE = 242;
Cobol85Parser.INITIAL = 243;
Cobol85Parser.INITIALIZE = 244;
Cobol85Parser.INITIATE = 245;
Cobol85Parser.INPUT = 246;
Cobol85Parser.INPUT_OUTPUT = 247;
Cobol85Parser.INSPECT = 248;
Cobol85Parser.INSTALLATION = 249;
Cobol85Parser.INTEGER = 250;
Cobol85Parser.INTO = 251;
Cobol85Parser.INVALID = 252;
Cobol85Parser.INVOKE = 253;
Cobol85Parser.IS = 254;
Cobol85Parser.JUST = 255;
Cobol85Parser.JUSTIFIED = 256;
Cobol85Parser.KANJI = 257;
Cobol85Parser.KEPT = 258;
Cobol85Parser.KEY = 259;
Cobol85Parser.KEYBOARD = 260;
Cobol85Parser.LABEL = 261;
Cobol85Parser.LANGUAGE = 262;
Cobol85Parser.LAST = 263;
Cobol85Parser.LB = 264;
Cobol85Parser.LD = 265;
Cobol85Parser.LEADING = 266;
Cobol85Parser.LEFT = 267;
Cobol85Parser.LEFTLINE = 268;
Cobol85Parser.LENGTH = 269;
Cobol85Parser.LENGTH_CHECK = 270;
Cobol85Parser.LESS = 271;
Cobol85Parser.LIBACCESS = 272;
Cobol85Parser.LIBPARAMETER = 273;
Cobol85Parser.LIBRARY = 274;
Cobol85Parser.LIMIT = 275;
Cobol85Parser.LIMITS = 276;
Cobol85Parser.LINAGE = 277;
Cobol85Parser.LINAGE_COUNTER = 278;
Cobol85Parser.LINE = 279;
Cobol85Parser.LINES = 280;
Cobol85Parser.LINE_COUNTER = 281;
Cobol85Parser.LINKAGE = 282;
Cobol85Parser.LIST = 283;
Cobol85Parser.LOCAL = 284;
Cobol85Parser.LOCAL_STORAGE = 285;
Cobol85Parser.LOCK = 286;
Cobol85Parser.LONG_DATE = 287;
Cobol85Parser.LONG_TIME = 288;
Cobol85Parser.LOWER = 289;
Cobol85Parser.LOWLIGHT = 290;
Cobol85Parser.LOW_VALUE = 291;
Cobol85Parser.LOW_VALUES = 292;
Cobol85Parser.MEMORY = 293;
Cobol85Parser.MERGE = 294;
Cobol85Parser.MESSAGE = 295;
Cobol85Parser.MMDDYYYY = 296;
Cobol85Parser.MODE = 297;
Cobol85Parser.MODULES = 298;
Cobol85Parser.MORE_LABELS = 299;
Cobol85Parser.MOVE = 300;
Cobol85Parser.MULTIPLE = 301;
Cobol85Parser.MULTIPLY = 302;
Cobol85Parser.NAMED = 303;
Cobol85Parser.NATIONAL = 304;
Cobol85Parser.NATIONAL_EDITED = 305;
Cobol85Parser.NATIVE = 306;
Cobol85Parser.NEGATIVE = 307;
Cobol85Parser.NETWORK = 308;
Cobol85Parser.NEXT = 309;
Cobol85Parser.NO = 310;
Cobol85Parser.NO_ECHO = 311;
Cobol85Parser.NOT = 312;
Cobol85Parser.NULL_ = 313;
Cobol85Parser.NULLS = 314;
Cobol85Parser.NUMBER = 315;
Cobol85Parser.NUMERIC = 316;
Cobol85Parser.NUMERIC_DATE = 317;
Cobol85Parser.NUMERIC_EDITED = 318;
Cobol85Parser.NUMERIC_TIME = 319;
Cobol85Parser.OBJECT_COMPUTER = 320;
Cobol85Parser.OCCURS = 321;
Cobol85Parser.ODT = 322;
Cobol85Parser.OF = 323;
Cobol85Parser.OFF = 324;
Cobol85Parser.OMITTED = 325;
Cobol85Parser.ON = 326;
Cobol85Parser.OPEN = 327;
Cobol85Parser.OPTIONAL = 328;
Cobol85Parser.OR = 329;
Cobol85Parser.ORDER = 330;
Cobol85Parser.ORDERLY = 331;
Cobol85Parser.ORGANIZATION = 332;
Cobol85Parser.OTHER = 333;
Cobol85Parser.OUTPUT = 334;
Cobol85Parser.OVERFLOW = 335;
Cobol85Parser.OVERLINE = 336;
Cobol85Parser.OWN = 337;
Cobol85Parser.PACKED_DECIMAL = 338;
Cobol85Parser.PADDING = 339;
Cobol85Parser.PAGE = 340;
Cobol85Parser.PAGE_COUNTER = 341;
Cobol85Parser.PASSWORD = 342;
Cobol85Parser.PERFORM = 343;
Cobol85Parser.PF = 344;
Cobol85Parser.PH = 345;
Cobol85Parser.PIC = 346;
Cobol85Parser.PICTURE = 347;
Cobol85Parser.PLUS = 348;
Cobol85Parser.POINTER = 349;
Cobol85Parser.POSITION = 350;
Cobol85Parser.POSITIVE = 351;
Cobol85Parser.PORT = 352;
Cobol85Parser.PRINTER = 353;
Cobol85Parser.PRINTING = 354;
Cobol85Parser.PRIVATE = 355;
Cobol85Parser.PROCEDURE = 356;
Cobol85Parser.PROCEDURE_POINTER = 357;
Cobol85Parser.PROCEDURES = 358;
Cobol85Parser.PROCEED = 359;
Cobol85Parser.PROCESS = 360;
Cobol85Parser.PROGRAM = 361;
Cobol85Parser.PROGRAM_ID = 362;
Cobol85Parser.PROGRAM_LIBRARY = 363;
Cobol85Parser.PROMPT = 364;
Cobol85Parser.PURGE = 365;
Cobol85Parser.QUEUE = 366;
Cobol85Parser.QUOTE = 367;
Cobol85Parser.QUOTES = 368;
Cobol85Parser.RANDOM = 369;
Cobol85Parser.READER = 370;
Cobol85Parser.REMOTE = 371;
Cobol85Parser.RD = 372;
Cobol85Parser.REAL = 373;
Cobol85Parser.READ = 374;
Cobol85Parser.RECEIVE = 375;
Cobol85Parser.RECEIVED = 376;
Cobol85Parser.RECORD = 377;
Cobol85Parser.RECORDING = 378;
Cobol85Parser.RECORDS = 379;
Cobol85Parser.RECURSIVE = 380;
Cobol85Parser.REDEFINES = 381;
Cobol85Parser.REEL = 382;
Cobol85Parser.REF = 383;
Cobol85Parser.REFERENCE = 384;
Cobol85Parser.REFERENCES = 385;
Cobol85Parser.RELATIVE = 386;
Cobol85Parser.RELEASE = 387;
Cobol85Parser.REMAINDER = 388;
Cobol85Parser.REMARKS = 389;
Cobol85Parser.REMOVAL = 390;
Cobol85Parser.REMOVE = 391;
Cobol85Parser.RENAMES = 392;
Cobol85Parser.REPLACE = 393;
Cobol85Parser.REPLACING = 394;
Cobol85Parser.REPORT = 395;
Cobol85Parser.REPORTING = 396;
Cobol85Parser.REPORTS = 397;
Cobol85Parser.REQUIRED = 398;
Cobol85Parser.RERUN = 399;
Cobol85Parser.RESERVE = 400;
Cobol85Parser.REVERSE_VIDEO = 401;
Cobol85Parser.RESET = 402;
Cobol85Parser.RETURN = 403;
Cobol85Parser.RETURN_CODE = 404;
Cobol85Parser.RETURNING = 405;
Cobol85Parser.REVERSED = 406;
Cobol85Parser.REWIND = 407;
Cobol85Parser.REWRITE = 408;
Cobol85Parser.RF = 409;
Cobol85Parser.RH = 410;
Cobol85Parser.RIGHT = 411;
Cobol85Parser.ROUNDED = 412;
Cobol85Parser.RUN = 413;
Cobol85Parser.SAME = 414;
Cobol85Parser.SAVE = 415;
Cobol85Parser.SCREEN = 416;
Cobol85Parser.SD = 417;
Cobol85Parser.SEARCH = 418;
Cobol85Parser.SECTION = 419;
Cobol85Parser.SECURE = 420;
Cobol85Parser.SECURITY = 421;
Cobol85Parser.SEGMENT = 422;
Cobol85Parser.SEGMENT_LIMIT = 423;
Cobol85Parser.SELECT = 424;
Cobol85Parser.SEND = 425;
Cobol85Parser.SENTENCE = 426;
Cobol85Parser.SEPARATE = 427;
Cobol85Parser.SEQUENCE = 428;
Cobol85Parser.SEQUENTIAL = 429;
Cobol85Parser.SET = 430;
Cobol85Parser.SHARED = 431;
Cobol85Parser.SHAREDBYALL = 432;
Cobol85Parser.SHAREDBYRUNUNIT = 433;
Cobol85Parser.SHARING = 434;
Cobol85Parser.SHIFT_IN = 435;
Cobol85Parser.SHIFT_OUT = 436;
Cobol85Parser.SHORT_DATE = 437;
Cobol85Parser.SIGN = 438;
Cobol85Parser.SIZE = 439;
Cobol85Parser.SORT = 440;
Cobol85Parser.SORT_CONTROL = 441;
Cobol85Parser.SORT_CORE_SIZE = 442;
Cobol85Parser.SORT_FILE_SIZE = 443;
Cobol85Parser.SORT_MERGE = 444;
Cobol85Parser.SORT_MESSAGE = 445;
Cobol85Parser.SORT_MODE_SIZE = 446;
Cobol85Parser.SORT_RETURN = 447;
Cobol85Parser.SOURCE = 448;
Cobol85Parser.SOURCE_COMPUTER = 449;
Cobol85Parser.SPACE = 450;
Cobol85Parser.SPACES = 451;
Cobol85Parser.SPECIAL_NAMES = 452;
Cobol85Parser.STANDARD = 453;
Cobol85Parser.STANDARD_1 = 454;
Cobol85Parser.STANDARD_2 = 455;
Cobol85Parser.START = 456;
Cobol85Parser.STATUS = 457;
Cobol85Parser.STOP = 458;
Cobol85Parser.STRING = 459;
Cobol85Parser.SUB_QUEUE_1 = 460;
Cobol85Parser.SUB_QUEUE_2 = 461;
Cobol85Parser.SUB_QUEUE_3 = 462;
Cobol85Parser.SUBTRACT = 463;
Cobol85Parser.SUM = 464;
Cobol85Parser.SUPPRESS = 465;
Cobol85Parser.SYMBOL = 466;
Cobol85Parser.SYMBOLIC = 467;
Cobol85Parser.SYNC = 468;
Cobol85Parser.SYNCHRONIZED = 469;
Cobol85Parser.TABLE = 470;
Cobol85Parser.TALLY = 471;
Cobol85Parser.TALLYING = 472;
Cobol85Parser.TASK = 473;
Cobol85Parser.TAPE = 474;
Cobol85Parser.TERMINAL = 475;
Cobol85Parser.TERMINATE = 476;
Cobol85Parser.TEST = 477;
Cobol85Parser.TEXT = 478;
Cobol85Parser.THAN = 479;
Cobol85Parser.THEN = 480;
Cobol85Parser.THREAD = 481;
Cobol85Parser.THREAD_LOCAL = 482;
Cobol85Parser.THROUGH = 483;
Cobol85Parser.THRU = 484;
Cobol85Parser.TIME = 485;
Cobol85Parser.TIMER = 486;
Cobol85Parser.TIMES = 487;
Cobol85Parser.TITLE = 488;
Cobol85Parser.TO = 489;
Cobol85Parser.TODAYS_DATE = 490;
Cobol85Parser.TODAYS_NAME = 491;
Cobol85Parser.TOP = 492;
Cobol85Parser.TRAILING = 493;
Cobol85Parser.TRUE = 494;
Cobol85Parser.TRUNCATED = 495;
Cobol85Parser.TYPE = 496;
Cobol85Parser.TYPEDEF = 497;
Cobol85Parser.UNDERLINE = 498;
Cobol85Parser.UNIT = 499;
Cobol85Parser.UNSTRING = 500;
Cobol85Parser.UNTIL = 501;
Cobol85Parser.UP = 502;
Cobol85Parser.UPON = 503;
Cobol85Parser.USAGE = 504;
Cobol85Parser.USE = 505;
Cobol85Parser.USING = 506;
Cobol85Parser.VALUE = 507;
Cobol85Parser.VALUES = 508;
Cobol85Parser.VARYING = 509;
Cobol85Parser.VIRTUAL = 510;
Cobol85Parser.WAIT = 511;
Cobol85Parser.WHEN = 512;
Cobol85Parser.WHEN_COMPILED = 513;
Cobol85Parser.WITH = 514;
Cobol85Parser.WORDS = 515;
Cobol85Parser.WORKING_STORAGE = 516;
Cobol85Parser.WRITE = 517;
Cobol85Parser.YEAR = 518;
Cobol85Parser.YYYYMMDD = 519;
Cobol85Parser.YYYYDDD = 520;
Cobol85Parser.ZERO = 521;
Cobol85Parser.ZERO_FILL = 522;
Cobol85Parser.ZEROS = 523;
Cobol85Parser.ZEROES = 524;
Cobol85Parser.AMPCHAR = 525;
Cobol85Parser.ASTERISKCHAR = 526;
Cobol85Parser.DOUBLEASTERISKCHAR = 527;
Cobol85Parser.COLONCHAR = 528;
Cobol85Parser.COMMACHAR = 529;
Cobol85Parser.COMMENTENTRYTAG = 530;
Cobol85Parser.COMMENTTAG = 531;
Cobol85Parser.DOLLARCHAR = 532;
Cobol85Parser.DOUBLEQUOTE = 533;
Cobol85Parser.DOT_FS = 534;
Cobol85Parser.DOT = 535;
Cobol85Parser.EQUALCHAR = 536;
Cobol85Parser.EXECCICSTAG = 537;
Cobol85Parser.EXECSQLTAG = 538;
Cobol85Parser.EXECSQLIMSTAG = 539;
Cobol85Parser.LESSTHANCHAR = 540;
Cobol85Parser.LESSTHANOREQUAL = 541;
Cobol85Parser.LPARENCHAR = 542;
Cobol85Parser.MINUSCHAR = 543;
Cobol85Parser.MORETHANCHAR = 544;
Cobol85Parser.MORETHANOREQUAL = 545;
Cobol85Parser.NOTEQUALCHAR = 546;
Cobol85Parser.PLUSCHAR = 547;
Cobol85Parser.SINGLEQUOTE = 548;
Cobol85Parser.RPARENCHAR = 549;
Cobol85Parser.SLASHCHAR = 550;
Cobol85Parser.NONNUMERICLITERAL = 551;
Cobol85Parser.LEVEL_NUMBER_66 = 552;
Cobol85Parser.LEVEL_NUMBER_77 = 553;
Cobol85Parser.LEVEL_NUMBER_88 = 554;
Cobol85Parser.INTEGERLITERAL = 555;
Cobol85Parser.NUMERICLITERAL = 556;
Cobol85Parser.IDENTIFIER = 557;
Cobol85Parser.NEWLINE = 558;
Cobol85Parser.EXECCICSLINE = 559;
Cobol85Parser.EXECSQLIMSLINE = 560;
Cobol85Parser.EXECSQLLINE = 561;
Cobol85Parser.COMMENTENTRYLINE = 562;
Cobol85Parser.COMMENTLINE = 563;
Cobol85Parser.WS = 564;
Cobol85Parser.SEPARATOR = 565;

Cobol85Parser.RULE_startRule = 0;
Cobol85Parser.RULE_compilationUnit = 1;
Cobol85Parser.RULE_programUnit = 2;
Cobol85Parser.RULE_endProgramStatement = 3;
Cobol85Parser.RULE_identificationDivision = 4;
Cobol85Parser.RULE_identificationDivisionBody = 5;
Cobol85Parser.RULE_programIdParagraph = 6;
Cobol85Parser.RULE_authorParagraph = 7;
Cobol85Parser.RULE_installationParagraph = 8;
Cobol85Parser.RULE_dateWrittenParagraph = 9;
Cobol85Parser.RULE_dateCompiledParagraph = 10;
Cobol85Parser.RULE_securityParagraph = 11;
Cobol85Parser.RULE_remarksParagraph = 12;
Cobol85Parser.RULE_environmentDivision = 13;
Cobol85Parser.RULE_environmentDivisionBody = 14;
Cobol85Parser.RULE_configurationSection = 15;
Cobol85Parser.RULE_configurationSectionParagraph = 16;
Cobol85Parser.RULE_sourceComputerParagraph = 17;
Cobol85Parser.RULE_objectComputerParagraph = 18;
Cobol85Parser.RULE_objectComputerClause = 19;
Cobol85Parser.RULE_memorySizeClause = 20;
Cobol85Parser.RULE_diskSizeClause = 21;
Cobol85Parser.RULE_collatingSequenceClause = 22;
Cobol85Parser.RULE_collatingSequenceClauseAlphanumeric = 23;
Cobol85Parser.RULE_collatingSequenceClauseNational = 24;
Cobol85Parser.RULE_segmentLimitClause = 25;
Cobol85Parser.RULE_characterSetClause = 26;
Cobol85Parser.RULE_specialNamesParagraph = 27;
Cobol85Parser.RULE_specialNameClause = 28;
Cobol85Parser.RULE_alphabetClause = 29;
Cobol85Parser.RULE_alphabetClauseFormat1 = 30;
Cobol85Parser.RULE_alphabetLiterals = 31;
Cobol85Parser.RULE_alphabetThrough = 32;
Cobol85Parser.RULE_alphabetAlso = 33;
Cobol85Parser.RULE_alphabetClauseFormat2 = 34;
Cobol85Parser.RULE_channelClause = 35;
Cobol85Parser.RULE_classClause = 36;
Cobol85Parser.RULE_classClauseThrough = 37;
Cobol85Parser.RULE_classClauseFrom = 38;
Cobol85Parser.RULE_classClauseTo = 39;
Cobol85Parser.RULE_currencySignClause = 40;
Cobol85Parser.RULE_decimalPointClause = 41;
Cobol85Parser.RULE_defaultComputationalSignClause = 42;
Cobol85Parser.RULE_defaultDisplaySignClause = 43;
Cobol85Parser.RULE_environmentSwitchNameClause = 44;
Cobol85Parser.RULE_environmentSwitchNameSpecialNamesStatusPhrase = 45;
Cobol85Parser.RULE_odtClause = 46;
Cobol85Parser.RULE_reserveNetworkClause = 47;
Cobol85Parser.RULE_symbolicCharactersClause = 48;
Cobol85Parser.RULE_symbolicCharacters = 49;
Cobol85Parser.RULE_inputOutputSection = 50;
Cobol85Parser.RULE_inputOutputSectionParagraph = 51;
Cobol85Parser.RULE_fileControlParagraph = 52;
Cobol85Parser.RULE_fileControlEntry = 53;
Cobol85Parser.RULE_selectClause = 54;
Cobol85Parser.RULE_fileControlClause = 55;
Cobol85Parser.RULE_assignClause = 56;
Cobol85Parser.RULE_reserveClause = 57;
Cobol85Parser.RULE_organizationClause = 58;
Cobol85Parser.RULE_paddingCharacterClause = 59;
Cobol85Parser.RULE_recordDelimiterClause = 60;
Cobol85Parser.RULE_accessModeClause = 61;
Cobol85Parser.RULE_recordKeyClause = 62;
Cobol85Parser.RULE_alternateRecordKeyClause = 63;
Cobol85Parser.RULE_passwordClause = 64;
Cobol85Parser.RULE_fileStatusClause = 65;
Cobol85Parser.RULE_relativeKeyClause = 66;
Cobol85Parser.RULE_ioControlParagraph = 67;
Cobol85Parser.RULE_ioControlClause = 68;
Cobol85Parser.RULE_rerunClause = 69;
Cobol85Parser.RULE_rerunEveryRecords = 70;
Cobol85Parser.RULE_rerunEveryOf = 71;
Cobol85Parser.RULE_rerunEveryClock = 72;
Cobol85Parser.RULE_sameClause = 73;
Cobol85Parser.RULE_multipleFileClause = 74;
Cobol85Parser.RULE_multipleFilePosition = 75;
Cobol85Parser.RULE_commitmentControlClause = 76;
Cobol85Parser.RULE_dataDivision = 77;
Cobol85Parser.RULE_dataDivisionSection = 78;
Cobol85Parser.RULE_fileSection = 79;
Cobol85Parser.RULE_fileDescriptionEntry = 80;
Cobol85Parser.RULE_fileDescriptionEntryClause = 81;
Cobol85Parser.RULE_externalClause = 82;
Cobol85Parser.RULE_globalClause = 83;
Cobol85Parser.RULE_blockContainsClause = 84;
Cobol85Parser.RULE_blockContainsTo = 85;
Cobol85Parser.RULE_recordContainsClause = 86;
Cobol85Parser.RULE_recordContainsClauseFormat1 = 87;
Cobol85Parser.RULE_recordContainsClauseFormat2 = 88;
Cobol85Parser.RULE_recordContainsClauseFormat3 = 89;
Cobol85Parser.RULE_recordContainsTo = 90;
Cobol85Parser.RULE_labelRecordsClause = 91;
Cobol85Parser.RULE_valueOfClause = 92;
Cobol85Parser.RULE_valuePair = 93;
Cobol85Parser.RULE_dataRecordsClause = 94;
Cobol85Parser.RULE_linageClause = 95;
Cobol85Parser.RULE_linageAt = 96;
Cobol85Parser.RULE_linageFootingAt = 97;
Cobol85Parser.RULE_linageLinesAtTop = 98;
Cobol85Parser.RULE_linageLinesAtBottom = 99;
Cobol85Parser.RULE_recordingModeClause = 100;
Cobol85Parser.RULE_modeStatement = 101;
Cobol85Parser.RULE_codeSetClause = 102;
Cobol85Parser.RULE_reportClause = 103;
Cobol85Parser.RULE_dataBaseSection = 104;
Cobol85Parser.RULE_dataBaseSectionEntry = 105;
Cobol85Parser.RULE_workingStorageSection = 106;
Cobol85Parser.RULE_linkageSection = 107;
Cobol85Parser.RULE_communicationSection = 108;
Cobol85Parser.RULE_communicationDescriptionEntry = 109;
Cobol85Parser.RULE_communicationDescriptionEntryFormat1 = 110;
Cobol85Parser.RULE_communicationDescriptionEntryFormat2 = 111;
Cobol85Parser.RULE_communicationDescriptionEntryFormat3 = 112;
Cobol85Parser.RULE_destinationCountClause = 113;
Cobol85Parser.RULE_destinationTableClause = 114;
Cobol85Parser.RULE_endKeyClause = 115;
Cobol85Parser.RULE_errorKeyClause = 116;
Cobol85Parser.RULE_messageCountClause = 117;
Cobol85Parser.RULE_messageDateClause = 118;
Cobol85Parser.RULE_messageTimeClause = 119;
Cobol85Parser.RULE_statusKeyClause = 120;
Cobol85Parser.RULE_symbolicDestinationClause = 121;
Cobol85Parser.RULE_symbolicQueueClause = 122;
Cobol85Parser.RULE_symbolicSourceClause = 123;
Cobol85Parser.RULE_symbolicTerminalClause = 124;
Cobol85Parser.RULE_symbolicSubQueueClause = 125;
Cobol85Parser.RULE_textLengthClause = 126;
Cobol85Parser.RULE_localStorageSection = 127;
Cobol85Parser.RULE_screenSection = 128;
Cobol85Parser.RULE_screenDescriptionEntry = 129;
Cobol85Parser.RULE_screenDescriptionBlankClause = 130;
Cobol85Parser.RULE_screenDescriptionBellClause = 131;
Cobol85Parser.RULE_screenDescriptionBlinkClause = 132;
Cobol85Parser.RULE_screenDescriptionEraseClause = 133;
Cobol85Parser.RULE_screenDescriptionLightClause = 134;
Cobol85Parser.RULE_screenDescriptionGridClause = 135;
Cobol85Parser.RULE_screenDescriptionReverseVideoClause = 136;
Cobol85Parser.RULE_screenDescriptionUnderlineClause = 137;
Cobol85Parser.RULE_screenDescriptionSizeClause = 138;
Cobol85Parser.RULE_screenDescriptionLineClause = 139;
Cobol85Parser.RULE_screenDescriptionColumnClause = 140;
Cobol85Parser.RULE_screenDescriptionForegroundColorClause = 141;
Cobol85Parser.RULE_screenDescriptionBackgroundColorClause = 142;
Cobol85Parser.RULE_screenDescriptionControlClause = 143;
Cobol85Parser.RULE_screenDescriptionValueClause = 144;
Cobol85Parser.RULE_screenDescriptionPictureClause = 145;
Cobol85Parser.RULE_screenDescriptionFromClause = 146;
Cobol85Parser.RULE_screenDescriptionToClause = 147;
Cobol85Parser.RULE_screenDescriptionUsingClause = 148;
Cobol85Parser.RULE_screenDescriptionUsageClause = 149;
Cobol85Parser.RULE_screenDescriptionBlankWhenZeroClause = 150;
Cobol85Parser.RULE_screenDescriptionJustifiedClause = 151;
Cobol85Parser.RULE_screenDescriptionSignClause = 152;
Cobol85Parser.RULE_screenDescriptionAutoClause = 153;
Cobol85Parser.RULE_screenDescriptionSecureClause = 154;
Cobol85Parser.RULE_screenDescriptionRequiredClause = 155;
Cobol85Parser.RULE_screenDescriptionPromptClause = 156;
Cobol85Parser.RULE_screenDescriptionPromptOccursClause = 157;
Cobol85Parser.RULE_screenDescriptionFullClause = 158;
Cobol85Parser.RULE_screenDescriptionZeroFillClause = 159;
Cobol85Parser.RULE_reportSection = 160;
Cobol85Parser.RULE_reportDescription = 161;
Cobol85Parser.RULE_reportDescriptionEntry = 162;
Cobol85Parser.RULE_reportDescriptionGlobalClause = 163;
Cobol85Parser.RULE_reportDescriptionPageLimitClause = 164;
Cobol85Parser.RULE_reportDescriptionHeadingClause = 165;
Cobol85Parser.RULE_reportDescriptionFirstDetailClause = 166;
Cobol85Parser.RULE_reportDescriptionLastDetailClause = 167;
Cobol85Parser.RULE_reportDescriptionFootingClause = 168;
Cobol85Parser.RULE_reportGroupDescriptionEntry = 169;
Cobol85Parser.RULE_reportGroupDescriptionEntryFormat1 = 170;
Cobol85Parser.RULE_reportGroupDescriptionEntryFormat2 = 171;
Cobol85Parser.RULE_reportGroupDescriptionEntryFormat3 = 172;
Cobol85Parser.RULE_reportGroupBlankWhenZeroClause = 173;
Cobol85Parser.RULE_reportGroupColumnNumberClause = 174;
Cobol85Parser.RULE_reportGroupIndicateClause = 175;
Cobol85Parser.RULE_reportGroupJustifiedClause = 176;
Cobol85Parser.RULE_reportGroupLineNumberClause = 177;
Cobol85Parser.RULE_reportGroupLineNumberNextPage = 178;
Cobol85Parser.RULE_reportGroupLineNumberPlus = 179;
Cobol85Parser.RULE_reportGroupNextGroupClause = 180;
Cobol85Parser.RULE_reportGroupNextGroupPlus = 181;
Cobol85Parser.RULE_reportGroupNextGroupNextPage = 182;
Cobol85Parser.RULE_reportGroupPictureClause = 183;
Cobol85Parser.RULE_reportGroupResetClause = 184;
Cobol85Parser.RULE_reportGroupSignClause = 185;
Cobol85Parser.RULE_reportGroupSourceClause = 186;
Cobol85Parser.RULE_reportGroupSumClause = 187;
Cobol85Parser.RULE_reportGroupTypeClause = 188;
Cobol85Parser.RULE_reportGroupTypeReportHeading = 189;
Cobol85Parser.RULE_reportGroupTypePageHeading = 190;
Cobol85Parser.RULE_reportGroupTypeControlHeading = 191;
Cobol85Parser.RULE_reportGroupTypeDetail = 192;
Cobol85Parser.RULE_reportGroupTypeControlFooting = 193;
Cobol85Parser.RULE_reportGroupUsageClause = 194;
Cobol85Parser.RULE_reportGroupTypePageFooting = 195;
Cobol85Parser.RULE_reportGroupTypeReportFooting = 196;
Cobol85Parser.RULE_reportGroupValueClause = 197;
Cobol85Parser.RULE_programLibrarySection = 198;
Cobol85Parser.RULE_libraryDescriptionEntry = 199;
Cobol85Parser.RULE_libraryDescriptionEntryFormat1 = 200;
Cobol85Parser.RULE_libraryDescriptionEntryFormat2 = 201;
Cobol85Parser.RULE_libraryAttributeClauseFormat1 = 202;
Cobol85Parser.RULE_libraryAttributeClauseFormat2 = 203;
Cobol85Parser.RULE_libraryAttributeFunction = 204;
Cobol85Parser.RULE_libraryAttributeParameter = 205;
Cobol85Parser.RULE_libraryAttributeTitle = 206;
Cobol85Parser.RULE_libraryEntryProcedureClauseFormat1 = 207;
Cobol85Parser.RULE_libraryEntryProcedureClauseFormat2 = 208;
Cobol85Parser.RULE_libraryEntryProcedureForClause = 209;
Cobol85Parser.RULE_libraryEntryProcedureGivingClause = 210;
Cobol85Parser.RULE_libraryEntryProcedureUsingClause = 211;
Cobol85Parser.RULE_libraryEntryProcedureUsingName = 212;
Cobol85Parser.RULE_libraryEntryProcedureWithClause = 213;
Cobol85Parser.RULE_libraryEntryProcedureWithName = 214;
Cobol85Parser.RULE_libraryIsCommonClause = 215;
Cobol85Parser.RULE_libraryIsGlobalClause = 216;
Cobol85Parser.RULE_dataDescriptionEntry = 217;
Cobol85Parser.RULE_dataDescriptionEntryFormat1 = 218;
Cobol85Parser.RULE_dataDescriptionEntryFormat2 = 219;
Cobol85Parser.RULE_dataDescriptionEntryFormat3 = 220;
Cobol85Parser.RULE_dataDescriptionEntryExecSql = 221;
Cobol85Parser.RULE_dataAlignedClause = 222;
Cobol85Parser.RULE_dataBlankWhenZeroClause = 223;
Cobol85Parser.RULE_dataCommonOwnLocalClause = 224;
Cobol85Parser.RULE_dataExternalClause = 225;
Cobol85Parser.RULE_dataGlobalClause = 226;
Cobol85Parser.RULE_dataIntegerStringClause = 227;
Cobol85Parser.RULE_dataJustifiedClause = 228;
Cobol85Parser.RULE_dataOccursClause = 229;
Cobol85Parser.RULE_dataOccursTo = 230;
Cobol85Parser.RULE_dataOccursSort = 231;
Cobol85Parser.RULE_dataPictureClause = 232;
Cobol85Parser.RULE_pictureString = 233;
Cobol85Parser.RULE_pictureChars = 234;
Cobol85Parser.RULE_pictureCardinality = 235;
Cobol85Parser.RULE_dataReceivedByClause = 236;
Cobol85Parser.RULE_dataRecordAreaClause = 237;
Cobol85Parser.RULE_dataRedefinesClause = 238;
Cobol85Parser.RULE_dataRenamesClause = 239;
Cobol85Parser.RULE_dataSignClause = 240;
Cobol85Parser.RULE_dataSynchronizedClause = 241;
Cobol85Parser.RULE_dataThreadLocalClause = 242;
Cobol85Parser.RULE_dataTypeClause = 243;
Cobol85Parser.RULE_dataTypeDefClause = 244;
Cobol85Parser.RULE_dataUsageClause = 245;
Cobol85Parser.RULE_dataUsingClause = 246;
Cobol85Parser.RULE_dataValueClause = 247;
Cobol85Parser.RULE_dataValueInterval = 248;
Cobol85Parser.RULE_dataValueIntervalFrom = 249;
Cobol85Parser.RULE_dataValueIntervalTo = 250;
Cobol85Parser.RULE_dataWithLowerBoundsClause = 251;
Cobol85Parser.RULE_procedureDivision = 252;
Cobol85Parser.RULE_procedureDivisionUsingClause = 253;
Cobol85Parser.RULE_procedureDivisionGivingClause = 254;
Cobol85Parser.RULE_procedureDivisionUsingParameter = 255;
Cobol85Parser.RULE_procedureDivisionByReferencePhrase = 256;
Cobol85Parser.RULE_procedureDivisionByReference = 257;
Cobol85Parser.RULE_procedureDivisionByValuePhrase = 258;
Cobol85Parser.RULE_procedureDivisionByValue = 259;
Cobol85Parser.RULE_procedureDeclaratives = 260;
Cobol85Parser.RULE_procedureDeclarative = 261;
Cobol85Parser.RULE_procedureSectionHeader = 262;
Cobol85Parser.RULE_procedureDivisionBody = 263;
Cobol85Parser.RULE_procedureSection = 264;
Cobol85Parser.RULE_paragraphs = 265;
Cobol85Parser.RULE_paragraph = 266;
Cobol85Parser.RULE_sentence = 267;
Cobol85Parser.RULE_statement = 268;
Cobol85Parser.RULE_acceptStatement = 269;
Cobol85Parser.RULE_acceptFromDateStatement = 270;
Cobol85Parser.RULE_acceptFromMnemonicStatement = 271;
Cobol85Parser.RULE_acceptFromEscapeKeyStatement = 272;
Cobol85Parser.RULE_acceptMessageCountStatement = 273;
Cobol85Parser.RULE_addStatement = 274;
Cobol85Parser.RULE_addToStatement = 275;
Cobol85Parser.RULE_addToGivingStatement = 276;
Cobol85Parser.RULE_addCorrespondingStatement = 277;
Cobol85Parser.RULE_addFrom = 278;
Cobol85Parser.RULE_addTo = 279;
Cobol85Parser.RULE_addToGiving = 280;
Cobol85Parser.RULE_addGiving = 281;
Cobol85Parser.RULE_alteredGoTo = 282;
Cobol85Parser.RULE_alterStatement = 283;
Cobol85Parser.RULE_alterProceedTo = 284;
Cobol85Parser.RULE_callStatement = 285;
Cobol85Parser.RULE_callUsingPhrase = 286;
Cobol85Parser.RULE_callUsingParameter = 287;
Cobol85Parser.RULE_callByReferencePhrase = 288;
Cobol85Parser.RULE_callByReference = 289;
Cobol85Parser.RULE_callByValuePhrase = 290;
Cobol85Parser.RULE_callByValue = 291;
Cobol85Parser.RULE_callByContentPhrase = 292;
Cobol85Parser.RULE_callByContent = 293;
Cobol85Parser.RULE_callGivingPhrase = 294;
Cobol85Parser.RULE_cancelStatement = 295;
Cobol85Parser.RULE_cancelCall = 296;
Cobol85Parser.RULE_closeStatement = 297;
Cobol85Parser.RULE_closeFile = 298;
Cobol85Parser.RULE_closeReelUnitStatement = 299;
Cobol85Parser.RULE_closeRelativeStatement = 300;
Cobol85Parser.RULE_closePortFileIOStatement = 301;
Cobol85Parser.RULE_closePortFileIOUsing = 302;
Cobol85Parser.RULE_closePortFileIOUsingCloseDisposition = 303;
Cobol85Parser.RULE_closePortFileIOUsingAssociatedData = 304;
Cobol85Parser.RULE_closePortFileIOUsingAssociatedDataLength = 305;
Cobol85Parser.RULE_computeStatement = 306;
Cobol85Parser.RULE_computeStore = 307;
Cobol85Parser.RULE_continueStatement = 308;
Cobol85Parser.RULE_deleteStatement = 309;
Cobol85Parser.RULE_disableStatement = 310;
Cobol85Parser.RULE_displayStatement = 311;
Cobol85Parser.RULE_displayOperand = 312;
Cobol85Parser.RULE_displayAt = 313;
Cobol85Parser.RULE_displayUpon = 314;
Cobol85Parser.RULE_displayWith = 315;
Cobol85Parser.RULE_divideStatement = 316;
Cobol85Parser.RULE_divideIntoStatement = 317;
Cobol85Parser.RULE_divideIntoGivingStatement = 318;
Cobol85Parser.RULE_divideByGivingStatement = 319;
Cobol85Parser.RULE_divideGivingPhrase = 320;
Cobol85Parser.RULE_divideInto = 321;
Cobol85Parser.RULE_divideGiving = 322;
Cobol85Parser.RULE_divideRemainder = 323;
Cobol85Parser.RULE_enableStatement = 324;
Cobol85Parser.RULE_entryStatement = 325;
Cobol85Parser.RULE_evaluateStatement = 326;
Cobol85Parser.RULE_evaluateSelect = 327;
Cobol85Parser.RULE_evaluateAlsoSelect = 328;
Cobol85Parser.RULE_evaluateWhenPhrase = 329;
Cobol85Parser.RULE_evaluateWhen = 330;
Cobol85Parser.RULE_evaluateCondition = 331;
Cobol85Parser.RULE_evaluateThrough = 332;
Cobol85Parser.RULE_evaluateAlsoCondition = 333;
Cobol85Parser.RULE_evaluateWhenOther = 334;
Cobol85Parser.RULE_evaluateValue = 335;
Cobol85Parser.RULE_execCicsStatement = 336;
Cobol85Parser.RULE_execSqlStatement = 337;
Cobol85Parser.RULE_execSqlImsStatement = 338;
Cobol85Parser.RULE_exhibitStatement = 339;
Cobol85Parser.RULE_exhibitOperand = 340;
Cobol85Parser.RULE_exitStatement = 341;
Cobol85Parser.RULE_generateStatement = 342;
Cobol85Parser.RULE_gobackStatement = 343;
Cobol85Parser.RULE_goToStatement = 344;
Cobol85Parser.RULE_goToStatementSimple = 345;
Cobol85Parser.RULE_goToDependingOnStatement = 346;
Cobol85Parser.RULE_ifStatement = 347;
Cobol85Parser.RULE_ifThen = 348;
Cobol85Parser.RULE_ifElse = 349;
Cobol85Parser.RULE_initializeStatement = 350;
Cobol85Parser.RULE_initializeReplacingPhrase = 351;
Cobol85Parser.RULE_initializeReplacingBy = 352;
Cobol85Parser.RULE_initiateStatement = 353;
Cobol85Parser.RULE_inspectStatement = 354;
Cobol85Parser.RULE_inspectTallyingPhrase = 355;
Cobol85Parser.RULE_inspectReplacingPhrase = 356;
Cobol85Parser.RULE_inspectTallyingReplacingPhrase = 357;
Cobol85Parser.RULE_inspectConvertingPhrase = 358;
Cobol85Parser.RULE_inspectFor = 359;
Cobol85Parser.RULE_inspectCharacters = 360;
Cobol85Parser.RULE_inspectReplacingCharacters = 361;
Cobol85Parser.RULE_inspectAllLeadings = 362;
Cobol85Parser.RULE_inspectReplacingAllLeadings = 363;
Cobol85Parser.RULE_inspectAllLeading = 364;
Cobol85Parser.RULE_inspectReplacingAllLeading = 365;
Cobol85Parser.RULE_inspectBy = 366;
Cobol85Parser.RULE_inspectTo = 367;
Cobol85Parser.RULE_inspectBeforeAfter = 368;
Cobol85Parser.RULE_mergeStatement = 369;
Cobol85Parser.RULE_mergeOnKeyClause = 370;
Cobol85Parser.RULE_mergeCollatingSequencePhrase = 371;
Cobol85Parser.RULE_mergeCollatingAlphanumeric = 372;
Cobol85Parser.RULE_mergeCollatingNational = 373;
Cobol85Parser.RULE_mergeUsing = 374;
Cobol85Parser.RULE_mergeOutputProcedurePhrase = 375;
Cobol85Parser.RULE_mergeOutputThrough = 376;
Cobol85Parser.RULE_mergeGivingPhrase = 377;
Cobol85Parser.RULE_mergeGiving = 378;
Cobol85Parser.RULE_moveStatement = 379;
Cobol85Parser.RULE_moveToStatement = 380;
Cobol85Parser.RULE_moveToSendingArea = 381;
Cobol85Parser.RULE_moveCorrespondingToStatement = 382;
Cobol85Parser.RULE_moveCorrespondingToSendingArea = 383;
Cobol85Parser.RULE_multiplyStatement = 384;
Cobol85Parser.RULE_multiplyRegular = 385;
Cobol85Parser.RULE_multiplyRegularOperand = 386;
Cobol85Parser.RULE_multiplyGiving = 387;
Cobol85Parser.RULE_multiplyGivingOperand = 388;
Cobol85Parser.RULE_multiplyGivingResult = 389;
Cobol85Parser.RULE_openStatement = 390;
Cobol85Parser.RULE_openInputStatement = 391;
Cobol85Parser.RULE_openInput = 392;
Cobol85Parser.RULE_openOutputStatement = 393;
Cobol85Parser.RULE_openOutput = 394;
Cobol85Parser.RULE_openIOStatement = 395;
Cobol85Parser.RULE_openExtendStatement = 396;
Cobol85Parser.RULE_performStatement = 397;
Cobol85Parser.RULE_performInlineStatement = 398;
Cobol85Parser.RULE_performProcedureStatement = 399;
Cobol85Parser.RULE_performType = 400;
Cobol85Parser.RULE_performTimes = 401;
Cobol85Parser.RULE_performUntil = 402;
Cobol85Parser.RULE_performVarying = 403;
Cobol85Parser.RULE_performVaryingClause = 404;
Cobol85Parser.RULE_performVaryingPhrase = 405;
Cobol85Parser.RULE_performAfter = 406;
Cobol85Parser.RULE_performFrom = 407;
Cobol85Parser.RULE_performBy = 408;
Cobol85Parser.RULE_performTestClause = 409;
Cobol85Parser.RULE_purgeStatement = 410;
Cobol85Parser.RULE_readStatement = 411;
Cobol85Parser.RULE_readInto = 412;
Cobol85Parser.RULE_readWith = 413;
Cobol85Parser.RULE_readKey = 414;
Cobol85Parser.RULE_receiveStatement = 415;
Cobol85Parser.RULE_receiveFromStatement = 416;
Cobol85Parser.RULE_receiveFrom = 417;
Cobol85Parser.RULE_receiveIntoStatement = 418;
Cobol85Parser.RULE_receiveNoData = 419;
Cobol85Parser.RULE_receiveWithData = 420;
Cobol85Parser.RULE_receiveBefore = 421;
Cobol85Parser.RULE_receiveWith = 422;
Cobol85Parser.RULE_receiveThread = 423;
Cobol85Parser.RULE_receiveSize = 424;
Cobol85Parser.RULE_receiveStatus = 425;
Cobol85Parser.RULE_releaseStatement = 426;
Cobol85Parser.RULE_returnStatement = 427;
Cobol85Parser.RULE_returnInto = 428;
Cobol85Parser.RULE_rewriteStatement = 429;
Cobol85Parser.RULE_rewriteFrom = 430;
Cobol85Parser.RULE_searchStatement = 431;
Cobol85Parser.RULE_searchVarying = 432;
Cobol85Parser.RULE_searchWhen = 433;
Cobol85Parser.RULE_sendStatement = 434;
Cobol85Parser.RULE_sendStatementSync = 435;
Cobol85Parser.RULE_sendStatementAsync = 436;
Cobol85Parser.RULE_sendFromPhrase = 437;
Cobol85Parser.RULE_sendWithPhrase = 438;
Cobol85Parser.RULE_sendReplacingPhrase = 439;
Cobol85Parser.RULE_sendAdvancingPhrase = 440;
Cobol85Parser.RULE_sendAdvancingPage = 441;
Cobol85Parser.RULE_sendAdvancingLines = 442;
Cobol85Parser.RULE_sendAdvancingMnemonic = 443;
Cobol85Parser.RULE_setStatement = 444;
Cobol85Parser.RULE_setToStatement = 445;
Cobol85Parser.RULE_setUpDownByStatement = 446;
Cobol85Parser.RULE_setTo = 447;
Cobol85Parser.RULE_setToValue = 448;
Cobol85Parser.RULE_setByValue = 449;
Cobol85Parser.RULE_sortStatement = 450;
Cobol85Parser.RULE_sortOnKeyClause = 451;
Cobol85Parser.RULE_sortDuplicatesPhrase = 452;
Cobol85Parser.RULE_sortCollatingSequencePhrase = 453;
Cobol85Parser.RULE_sortCollatingAlphanumeric = 454;
Cobol85Parser.RULE_sortCollatingNational = 455;
Cobol85Parser.RULE_sortInputProcedurePhrase = 456;
Cobol85Parser.RULE_sortInputThrough = 457;
Cobol85Parser.RULE_sortUsing = 458;
Cobol85Parser.RULE_sortOutputProcedurePhrase = 459;
Cobol85Parser.RULE_sortOutputThrough = 460;
Cobol85Parser.RULE_sortGivingPhrase = 461;
Cobol85Parser.RULE_sortGiving = 462;
Cobol85Parser.RULE_startStatement = 463;
Cobol85Parser.RULE_startKey = 464;
Cobol85Parser.RULE_stopStatement = 465;
Cobol85Parser.RULE_stringStatement = 466;
Cobol85Parser.RULE_stringSendingPhrase = 467;
Cobol85Parser.RULE_stringSending = 468;
Cobol85Parser.RULE_stringDelimitedByPhrase = 469;
Cobol85Parser.RULE_stringForPhrase = 470;
Cobol85Parser.RULE_stringIntoPhrase = 471;
Cobol85Parser.RULE_stringWithPointerPhrase = 472;
Cobol85Parser.RULE_subtractStatement = 473;
Cobol85Parser.RULE_subtractFromStatement = 474;
Cobol85Parser.RULE_subtractFromGivingStatement = 475;
Cobol85Parser.RULE_subtractCorrespondingStatement = 476;
Cobol85Parser.RULE_subtractSubtrahend = 477;
Cobol85Parser.RULE_subtractMinuend = 478;
Cobol85Parser.RULE_subtractMinuendGiving = 479;
Cobol85Parser.RULE_subtractGiving = 480;
Cobol85Parser.RULE_subtractMinuendCorresponding = 481;
Cobol85Parser.RULE_terminateStatement = 482;
Cobol85Parser.RULE_unstringStatement = 483;
Cobol85Parser.RULE_unstringSendingPhrase = 484;
Cobol85Parser.RULE_unstringDelimitedByPhrase = 485;
Cobol85Parser.RULE_unstringOrAllPhrase = 486;
Cobol85Parser.RULE_unstringIntoPhrase = 487;
Cobol85Parser.RULE_unstringInto = 488;
Cobol85Parser.RULE_unstringDelimiterIn = 489;
Cobol85Parser.RULE_unstringCountIn = 490;
Cobol85Parser.RULE_unstringWithPointerPhrase = 491;
Cobol85Parser.RULE_unstringTallyingPhrase = 492;
Cobol85Parser.RULE_useStatement = 493;
Cobol85Parser.RULE_useAfterClause = 494;
Cobol85Parser.RULE_useAfterOn = 495;
Cobol85Parser.RULE_useDebugClause = 496;
Cobol85Parser.RULE_useDebugOn = 497;
Cobol85Parser.RULE_writeStatement = 498;
Cobol85Parser.RULE_writeFromPhrase = 499;
Cobol85Parser.RULE_writeAdvancingPhrase = 500;
Cobol85Parser.RULE_writeAdvancingPage = 501;
Cobol85Parser.RULE_writeAdvancingLines = 502;
Cobol85Parser.RULE_writeAdvancingMnemonic = 503;
Cobol85Parser.RULE_writeAtEndOfPagePhrase = 504;
Cobol85Parser.RULE_writeNotAtEndOfPagePhrase = 505;
Cobol85Parser.RULE_atEndPhrase = 506;
Cobol85Parser.RULE_notAtEndPhrase = 507;
Cobol85Parser.RULE_invalidKeyPhrase = 508;
Cobol85Parser.RULE_notInvalidKeyPhrase = 509;
Cobol85Parser.RULE_onOverflowPhrase = 510;
Cobol85Parser.RULE_notOnOverflowPhrase = 511;
Cobol85Parser.RULE_onSizeErrorPhrase = 512;
Cobol85Parser.RULE_notOnSizeErrorPhrase = 513;
Cobol85Parser.RULE_onExceptionClause = 514;
Cobol85Parser.RULE_notOnExceptionClause = 515;
Cobol85Parser.RULE_arithmeticExpression = 516;
Cobol85Parser.RULE_plusMinus = 517;
Cobol85Parser.RULE_multDivs = 518;
Cobol85Parser.RULE_multDiv = 519;
Cobol85Parser.RULE_powers = 520;
Cobol85Parser.RULE_power = 521;
Cobol85Parser.RULE_basis = 522;
Cobol85Parser.RULE_condition = 523;
Cobol85Parser.RULE_andOrCondition = 524;
Cobol85Parser.RULE_combinableCondition = 525;
Cobol85Parser.RULE_simpleCondition = 526;
Cobol85Parser.RULE_classCondition = 527;
Cobol85Parser.RULE_conditionNameReference = 528;
Cobol85Parser.RULE_conditionNameSubscriptReference = 529;
Cobol85Parser.RULE_relationCondition = 530;
Cobol85Parser.RULE_relationSignCondition = 531;
Cobol85Parser.RULE_relationArithmeticComparison = 532;
Cobol85Parser.RULE_relationCombinedComparison = 533;
Cobol85Parser.RULE_relationCombinedCondition = 534;
Cobol85Parser.RULE_relationalOperator = 535;
Cobol85Parser.RULE_abbreviation = 536;
Cobol85Parser.RULE_identifier = 537;
Cobol85Parser.RULE_tableCall = 538;
Cobol85Parser.RULE_functionCall = 539;
Cobol85Parser.RULE_referenceModifier = 540;
Cobol85Parser.RULE_characterPosition = 541;
Cobol85Parser.RULE_length = 542;
Cobol85Parser.RULE_subscript_ = 543;
Cobol85Parser.RULE_argument = 544;
Cobol85Parser.RULE_qualifiedDataName = 545;
Cobol85Parser.RULE_qualifiedDataNameFormat1 = 546;
Cobol85Parser.RULE_qualifiedDataNameFormat2 = 547;
Cobol85Parser.RULE_qualifiedDataNameFormat3 = 548;
Cobol85Parser.RULE_qualifiedDataNameFormat4 = 549;
Cobol85Parser.RULE_qualifiedInData = 550;
Cobol85Parser.RULE_inData = 551;
Cobol85Parser.RULE_inFile = 552;
Cobol85Parser.RULE_inMnemonic = 553;
Cobol85Parser.RULE_inSection = 554;
Cobol85Parser.RULE_inLibrary = 555;
Cobol85Parser.RULE_inTable = 556;
Cobol85Parser.RULE_alphabetName = 557;
Cobol85Parser.RULE_assignmentName = 558;
Cobol85Parser.RULE_basisName = 559;
Cobol85Parser.RULE_cdName = 560;
Cobol85Parser.RULE_className = 561;
Cobol85Parser.RULE_computerName = 562;
Cobol85Parser.RULE_conditionName = 563;
Cobol85Parser.RULE_dataName = 564;
Cobol85Parser.RULE_dataDescName = 565;
Cobol85Parser.RULE_environmentName = 566;
Cobol85Parser.RULE_fileName = 567;
Cobol85Parser.RULE_functionName = 568;
Cobol85Parser.RULE_indexName = 569;
Cobol85Parser.RULE_languageName = 570;
Cobol85Parser.RULE_libraryName = 571;
Cobol85Parser.RULE_localName = 572;
Cobol85Parser.RULE_mnemonicName = 573;
Cobol85Parser.RULE_paragraphName = 574;
Cobol85Parser.RULE_procedureName = 575;
Cobol85Parser.RULE_programName = 576;
Cobol85Parser.RULE_recordName = 577;
Cobol85Parser.RULE_reportName = 578;
Cobol85Parser.RULE_routineName = 579;
Cobol85Parser.RULE_screenName = 580;
Cobol85Parser.RULE_sectionName = 581;
Cobol85Parser.RULE_systemName = 582;
Cobol85Parser.RULE_symbolicCharacter = 583;
Cobol85Parser.RULE_textName = 584;
Cobol85Parser.RULE_cobolWord = 585;
Cobol85Parser.RULE_literal = 586;
Cobol85Parser.RULE_booleanLiteral = 587;
Cobol85Parser.RULE_numericLiteral = 588;
Cobol85Parser.RULE_integerLiteral = 589;
Cobol85Parser.RULE_cicsDfhRespLiteral = 590;
Cobol85Parser.RULE_cicsDfhValueLiteral = 591;
Cobol85Parser.RULE_figurativeConstant = 592;
Cobol85Parser.RULE_specialRegister = 593;
Cobol85Parser.RULE_commentEntry = 594;

class StartRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_startRule;
    }

	compilationUnit() {
	    return this.getTypedRuleContext(CompilationUnitContext,0);
	};

	EOF() {
	    return this.getToken(Cobol85Parser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterStartRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitStartRule(this);
		}
	}


}



class CompilationUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_compilationUnit;
    }

	programUnit = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProgramUnitContext);
	    } else {
	        return this.getTypedRuleContext(ProgramUnitContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCompilationUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCompilationUnit(this);
		}
	}


}



class ProgramUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_programUnit;
    }

	identificationDivision() {
	    return this.getTypedRuleContext(IdentificationDivisionContext,0);
	};

	environmentDivision() {
	    return this.getTypedRuleContext(EnvironmentDivisionContext,0);
	};

	dataDivision() {
	    return this.getTypedRuleContext(DataDivisionContext,0);
	};

	procedureDivision() {
	    return this.getTypedRuleContext(ProcedureDivisionContext,0);
	};

	programUnit = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProgramUnitContext);
	    } else {
	        return this.getTypedRuleContext(ProgramUnitContext,i);
	    }
	};

	endProgramStatement() {
	    return this.getTypedRuleContext(EndProgramStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterProgramUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitProgramUnit(this);
		}
	}


}



class EndProgramStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_endProgramStatement;
    }

	END() {
	    return this.getToken(Cobol85Parser.END, 0);
	};

	PROGRAM() {
	    return this.getToken(Cobol85Parser.PROGRAM, 0);
	};

	programName() {
	    return this.getTypedRuleContext(ProgramNameContext,0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterEndProgramStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitEndProgramStatement(this);
		}
	}


}



class IdentificationDivisionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_identificationDivision;
    }

	DIVISION() {
	    return this.getToken(Cobol85Parser.DIVISION, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	programIdParagraph() {
	    return this.getTypedRuleContext(ProgramIdParagraphContext,0);
	};

	IDENTIFICATION() {
	    return this.getToken(Cobol85Parser.IDENTIFICATION, 0);
	};

	ID() {
	    return this.getToken(Cobol85Parser.ID, 0);
	};

	identificationDivisionBody = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentificationDivisionBodyContext);
	    } else {
	        return this.getTypedRuleContext(IdentificationDivisionBodyContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterIdentificationDivision(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitIdentificationDivision(this);
		}
	}


}



class IdentificationDivisionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_identificationDivisionBody;
    }

	authorParagraph() {
	    return this.getTypedRuleContext(AuthorParagraphContext,0);
	};

	installationParagraph() {
	    return this.getTypedRuleContext(InstallationParagraphContext,0);
	};

	dateWrittenParagraph() {
	    return this.getTypedRuleContext(DateWrittenParagraphContext,0);
	};

	dateCompiledParagraph() {
	    return this.getTypedRuleContext(DateCompiledParagraphContext,0);
	};

	securityParagraph() {
	    return this.getTypedRuleContext(SecurityParagraphContext,0);
	};

	remarksParagraph() {
	    return this.getTypedRuleContext(RemarksParagraphContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterIdentificationDivisionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitIdentificationDivisionBody(this);
		}
	}


}



class ProgramIdParagraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_programIdParagraph;
    }

	PROGRAM_ID() {
	    return this.getToken(Cobol85Parser.PROGRAM_ID, 0);
	};

	DOT_FS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.DOT_FS);
	    } else {
	        return this.getToken(Cobol85Parser.DOT_FS, i);
	    }
	};


	programName() {
	    return this.getTypedRuleContext(ProgramNameContext,0);
	};

	commentEntry() {
	    return this.getTypedRuleContext(CommentEntryContext,0);
	};

	COMMON() {
	    return this.getToken(Cobol85Parser.COMMON, 0);
	};

	INITIAL() {
	    return this.getToken(Cobol85Parser.INITIAL, 0);
	};

	LIBRARY() {
	    return this.getToken(Cobol85Parser.LIBRARY, 0);
	};

	DEFINITION() {
	    return this.getToken(Cobol85Parser.DEFINITION, 0);
	};

	RECURSIVE() {
	    return this.getToken(Cobol85Parser.RECURSIVE, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	PROGRAM() {
	    return this.getToken(Cobol85Parser.PROGRAM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterProgramIdParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitProgramIdParagraph(this);
		}
	}


}



class AuthorParagraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_authorParagraph;
    }

	AUTHOR() {
	    return this.getToken(Cobol85Parser.AUTHOR, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	commentEntry() {
	    return this.getTypedRuleContext(CommentEntryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAuthorParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAuthorParagraph(this);
		}
	}


}



class InstallationParagraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_installationParagraph;
    }

	INSTALLATION() {
	    return this.getToken(Cobol85Parser.INSTALLATION, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	commentEntry() {
	    return this.getTypedRuleContext(CommentEntryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInstallationParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInstallationParagraph(this);
		}
	}


}



class DateWrittenParagraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dateWrittenParagraph;
    }

	DATE_WRITTEN() {
	    return this.getToken(Cobol85Parser.DATE_WRITTEN, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	commentEntry() {
	    return this.getTypedRuleContext(CommentEntryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDateWrittenParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDateWrittenParagraph(this);
		}
	}


}



class DateCompiledParagraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dateCompiledParagraph;
    }

	DATE_COMPILED() {
	    return this.getToken(Cobol85Parser.DATE_COMPILED, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	commentEntry() {
	    return this.getTypedRuleContext(CommentEntryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDateCompiledParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDateCompiledParagraph(this);
		}
	}


}



class SecurityParagraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_securityParagraph;
    }

	SECURITY() {
	    return this.getToken(Cobol85Parser.SECURITY, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	commentEntry() {
	    return this.getTypedRuleContext(CommentEntryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSecurityParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSecurityParagraph(this);
		}
	}


}



class RemarksParagraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_remarksParagraph;
    }

	REMARKS() {
	    return this.getToken(Cobol85Parser.REMARKS, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	commentEntry() {
	    return this.getTypedRuleContext(CommentEntryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterRemarksParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitRemarksParagraph(this);
		}
	}


}



class EnvironmentDivisionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_environmentDivision;
    }

	ENVIRONMENT() {
	    return this.getToken(Cobol85Parser.ENVIRONMENT, 0);
	};

	DIVISION() {
	    return this.getToken(Cobol85Parser.DIVISION, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	environmentDivisionBody = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnvironmentDivisionBodyContext);
	    } else {
	        return this.getTypedRuleContext(EnvironmentDivisionBodyContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterEnvironmentDivision(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitEnvironmentDivision(this);
		}
	}


}



class EnvironmentDivisionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_environmentDivisionBody;
    }

	configurationSection() {
	    return this.getTypedRuleContext(ConfigurationSectionContext,0);
	};

	specialNamesParagraph() {
	    return this.getTypedRuleContext(SpecialNamesParagraphContext,0);
	};

	inputOutputSection() {
	    return this.getTypedRuleContext(InputOutputSectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterEnvironmentDivisionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitEnvironmentDivisionBody(this);
		}
	}


}



class ConfigurationSectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_configurationSection;
    }

	CONFIGURATION() {
	    return this.getToken(Cobol85Parser.CONFIGURATION, 0);
	};

	SECTION() {
	    return this.getToken(Cobol85Parser.SECTION, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	configurationSectionParagraph = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConfigurationSectionParagraphContext);
	    } else {
	        return this.getTypedRuleContext(ConfigurationSectionParagraphContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterConfigurationSection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitConfigurationSection(this);
		}
	}


}



class ConfigurationSectionParagraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_configurationSectionParagraph;
    }

	sourceComputerParagraph() {
	    return this.getTypedRuleContext(SourceComputerParagraphContext,0);
	};

	objectComputerParagraph() {
	    return this.getTypedRuleContext(ObjectComputerParagraphContext,0);
	};

	specialNamesParagraph() {
	    return this.getTypedRuleContext(SpecialNamesParagraphContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterConfigurationSectionParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitConfigurationSectionParagraph(this);
		}
	}


}



class SourceComputerParagraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sourceComputerParagraph;
    }

	SOURCE_COMPUTER() {
	    return this.getToken(Cobol85Parser.SOURCE_COMPUTER, 0);
	};

	DOT_FS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.DOT_FS);
	    } else {
	        return this.getToken(Cobol85Parser.DOT_FS, i);
	    }
	};


	computerName() {
	    return this.getTypedRuleContext(ComputerNameContext,0);
	};

	DEBUGGING() {
	    return this.getToken(Cobol85Parser.DEBUGGING, 0);
	};

	MODE() {
	    return this.getToken(Cobol85Parser.MODE, 0);
	};

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSourceComputerParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSourceComputerParagraph(this);
		}
	}


}



class ObjectComputerParagraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_objectComputerParagraph;
    }

	OBJECT_COMPUTER() {
	    return this.getToken(Cobol85Parser.OBJECT_COMPUTER, 0);
	};

	DOT_FS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.DOT_FS);
	    } else {
	        return this.getToken(Cobol85Parser.DOT_FS, i);
	    }
	};


	computerName() {
	    return this.getTypedRuleContext(ComputerNameContext,0);
	};

	objectComputerClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ObjectComputerClauseContext);
	    } else {
	        return this.getTypedRuleContext(ObjectComputerClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterObjectComputerParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitObjectComputerParagraph(this);
		}
	}


}



class ObjectComputerClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_objectComputerClause;
    }

	memorySizeClause() {
	    return this.getTypedRuleContext(MemorySizeClauseContext,0);
	};

	diskSizeClause() {
	    return this.getTypedRuleContext(DiskSizeClauseContext,0);
	};

	collatingSequenceClause() {
	    return this.getTypedRuleContext(CollatingSequenceClauseContext,0);
	};

	segmentLimitClause() {
	    return this.getTypedRuleContext(SegmentLimitClauseContext,0);
	};

	characterSetClause() {
	    return this.getTypedRuleContext(CharacterSetClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterObjectComputerClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitObjectComputerClause(this);
		}
	}


}



class MemorySizeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_memorySizeClause;
    }

	MEMORY() {
	    return this.getToken(Cobol85Parser.MEMORY, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	SIZE() {
	    return this.getToken(Cobol85Parser.SIZE, 0);
	};

	WORDS() {
	    return this.getToken(Cobol85Parser.WORDS, 0);
	};

	CHARACTERS() {
	    return this.getToken(Cobol85Parser.CHARACTERS, 0);
	};

	MODULES() {
	    return this.getToken(Cobol85Parser.MODULES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMemorySizeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMemorySizeClause(this);
		}
	}


}



class DiskSizeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_diskSizeClause;
    }

	DISK() {
	    return this.getToken(Cobol85Parser.DISK, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	SIZE() {
	    return this.getToken(Cobol85Parser.SIZE, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	WORDS() {
	    return this.getToken(Cobol85Parser.WORDS, 0);
	};

	MODULES() {
	    return this.getToken(Cobol85Parser.MODULES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDiskSizeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDiskSizeClause(this);
		}
	}


}



class CollatingSequenceClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_collatingSequenceClause;
    }

	SEQUENCE() {
	    return this.getToken(Cobol85Parser.SEQUENCE, 0);
	};

	PROGRAM() {
	    return this.getToken(Cobol85Parser.PROGRAM, 0);
	};

	COLLATING() {
	    return this.getToken(Cobol85Parser.COLLATING, 0);
	};

	collatingSequenceClauseAlphanumeric() {
	    return this.getTypedRuleContext(CollatingSequenceClauseAlphanumericContext,0);
	};

	collatingSequenceClauseNational() {
	    return this.getTypedRuleContext(CollatingSequenceClauseNationalContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	alphabetName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlphabetNameContext);
	    } else {
	        return this.getTypedRuleContext(AlphabetNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCollatingSequenceClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCollatingSequenceClause(this);
		}
	}


}



class CollatingSequenceClauseAlphanumericContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_collatingSequenceClauseAlphanumeric;
    }

	ALPHANUMERIC() {
	    return this.getToken(Cobol85Parser.ALPHANUMERIC, 0);
	};

	alphabetName() {
	    return this.getTypedRuleContext(AlphabetNameContext,0);
	};

	FOR() {
	    return this.getToken(Cobol85Parser.FOR, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCollatingSequenceClauseAlphanumeric(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCollatingSequenceClauseAlphanumeric(this);
		}
	}


}



class CollatingSequenceClauseNationalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_collatingSequenceClauseNational;
    }

	NATIONAL() {
	    return this.getToken(Cobol85Parser.NATIONAL, 0);
	};

	alphabetName() {
	    return this.getTypedRuleContext(AlphabetNameContext,0);
	};

	FOR() {
	    return this.getToken(Cobol85Parser.FOR, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCollatingSequenceClauseNational(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCollatingSequenceClauseNational(this);
		}
	}


}



class SegmentLimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_segmentLimitClause;
    }

	SEGMENT_LIMIT() {
	    return this.getToken(Cobol85Parser.SEGMENT_LIMIT, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSegmentLimitClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSegmentLimitClause(this);
		}
	}


}



class CharacterSetClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_characterSetClause;
    }

	CHARACTER() {
	    return this.getToken(Cobol85Parser.CHARACTER, 0);
	};

	SET() {
	    return this.getToken(Cobol85Parser.SET, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCharacterSetClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCharacterSetClause(this);
		}
	}


}



class SpecialNamesParagraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_specialNamesParagraph;
    }

	SPECIAL_NAMES() {
	    return this.getToken(Cobol85Parser.SPECIAL_NAMES, 0);
	};

	DOT_FS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.DOT_FS);
	    } else {
	        return this.getToken(Cobol85Parser.DOT_FS, i);
	    }
	};


	specialNameClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SpecialNameClauseContext);
	    } else {
	        return this.getTypedRuleContext(SpecialNameClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSpecialNamesParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSpecialNamesParagraph(this);
		}
	}


}



class SpecialNameClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_specialNameClause;
    }

	channelClause() {
	    return this.getTypedRuleContext(ChannelClauseContext,0);
	};

	odtClause() {
	    return this.getTypedRuleContext(OdtClauseContext,0);
	};

	alphabetClause() {
	    return this.getTypedRuleContext(AlphabetClauseContext,0);
	};

	classClause() {
	    return this.getTypedRuleContext(ClassClauseContext,0);
	};

	currencySignClause() {
	    return this.getTypedRuleContext(CurrencySignClauseContext,0);
	};

	decimalPointClause() {
	    return this.getTypedRuleContext(DecimalPointClauseContext,0);
	};

	symbolicCharactersClause() {
	    return this.getTypedRuleContext(SymbolicCharactersClauseContext,0);
	};

	environmentSwitchNameClause() {
	    return this.getTypedRuleContext(EnvironmentSwitchNameClauseContext,0);
	};

	defaultDisplaySignClause() {
	    return this.getTypedRuleContext(DefaultDisplaySignClauseContext,0);
	};

	defaultComputationalSignClause() {
	    return this.getTypedRuleContext(DefaultComputationalSignClauseContext,0);
	};

	reserveNetworkClause() {
	    return this.getTypedRuleContext(ReserveNetworkClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSpecialNameClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSpecialNameClause(this);
		}
	}


}



class AlphabetClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_alphabetClause;
    }

	alphabetClauseFormat1() {
	    return this.getTypedRuleContext(AlphabetClauseFormat1Context,0);
	};

	alphabetClauseFormat2() {
	    return this.getTypedRuleContext(AlphabetClauseFormat2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAlphabetClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAlphabetClause(this);
		}
	}


}



class AlphabetClauseFormat1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_alphabetClauseFormat1;
    }

	ALPHABET() {
	    return this.getToken(Cobol85Parser.ALPHABET, 0);
	};

	alphabetName() {
	    return this.getTypedRuleContext(AlphabetNameContext,0);
	};

	EBCDIC() {
	    return this.getToken(Cobol85Parser.EBCDIC, 0);
	};

	ASCII() {
	    return this.getToken(Cobol85Parser.ASCII, 0);
	};

	STANDARD_1() {
	    return this.getToken(Cobol85Parser.STANDARD_1, 0);
	};

	STANDARD_2() {
	    return this.getToken(Cobol85Parser.STANDARD_2, 0);
	};

	NATIVE() {
	    return this.getToken(Cobol85Parser.NATIVE, 0);
	};

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	FOR() {
	    return this.getToken(Cobol85Parser.FOR, 0);
	};

	ALPHANUMERIC() {
	    return this.getToken(Cobol85Parser.ALPHANUMERIC, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	alphabetLiterals = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlphabetLiteralsContext);
	    } else {
	        return this.getTypedRuleContext(AlphabetLiteralsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAlphabetClauseFormat1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAlphabetClauseFormat1(this);
		}
	}


}



class AlphabetLiteralsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_alphabetLiterals;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	alphabetThrough() {
	    return this.getTypedRuleContext(AlphabetThroughContext,0);
	};

	alphabetAlso = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlphabetAlsoContext);
	    } else {
	        return this.getTypedRuleContext(AlphabetAlsoContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAlphabetLiterals(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAlphabetLiterals(this);
		}
	}


}



class AlphabetThroughContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_alphabetThrough;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	THROUGH() {
	    return this.getToken(Cobol85Parser.THROUGH, 0);
	};

	THRU() {
	    return this.getToken(Cobol85Parser.THRU, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAlphabetThrough(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAlphabetThrough(this);
		}
	}


}



class AlphabetAlsoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_alphabetAlso;
    }

	ALSO() {
	    return this.getToken(Cobol85Parser.ALSO, 0);
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAlphabetAlso(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAlphabetAlso(this);
		}
	}


}



class AlphabetClauseFormat2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_alphabetClauseFormat2;
    }

	ALPHABET() {
	    return this.getToken(Cobol85Parser.ALPHABET, 0);
	};

	alphabetName() {
	    return this.getTypedRuleContext(AlphabetNameContext,0);
	};

	NATIONAL() {
	    return this.getToken(Cobol85Parser.NATIONAL, 0);
	};

	NATIVE() {
	    return this.getToken(Cobol85Parser.NATIVE, 0);
	};

	CCSVERSION() {
	    return this.getToken(Cobol85Parser.CCSVERSION, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	FOR() {
	    return this.getToken(Cobol85Parser.FOR, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAlphabetClauseFormat2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAlphabetClauseFormat2(this);
		}
	}


}



class ChannelClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_channelClause;
    }

	CHANNEL() {
	    return this.getToken(Cobol85Parser.CHANNEL, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	mnemonicName() {
	    return this.getTypedRuleContext(MnemonicNameContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterChannelClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitChannelClause(this);
		}
	}


}



class ClassClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_classClause;
    }

	CLASS() {
	    return this.getToken(Cobol85Parser.CLASS, 0);
	};

	className() {
	    return this.getTypedRuleContext(ClassNameContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	classClauseThrough = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassClauseThroughContext);
	    } else {
	        return this.getTypedRuleContext(ClassClauseThroughContext,i);
	    }
	};

	ALPHANUMERIC() {
	    return this.getToken(Cobol85Parser.ALPHANUMERIC, 0);
	};

	NATIONAL() {
	    return this.getToken(Cobol85Parser.NATIONAL, 0);
	};

	FOR() {
	    return this.getToken(Cobol85Parser.FOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterClassClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitClassClause(this);
		}
	}


}



class ClassClauseThroughContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_classClauseThrough;
    }

	classClauseFrom() {
	    return this.getTypedRuleContext(ClassClauseFromContext,0);
	};

	classClauseTo() {
	    return this.getTypedRuleContext(ClassClauseToContext,0);
	};

	THROUGH() {
	    return this.getToken(Cobol85Parser.THROUGH, 0);
	};

	THRU() {
	    return this.getToken(Cobol85Parser.THRU, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterClassClauseThrough(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitClassClauseThrough(this);
		}
	}


}



class ClassClauseFromContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_classClauseFrom;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterClassClauseFrom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitClassClauseFrom(this);
		}
	}


}



class ClassClauseToContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_classClauseTo;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterClassClauseTo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitClassClauseTo(this);
		}
	}


}



class CurrencySignClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_currencySignClause;
    }

	CURRENCY() {
	    return this.getToken(Cobol85Parser.CURRENCY, 0);
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	SIGN() {
	    return this.getToken(Cobol85Parser.SIGN, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	PICTURE() {
	    return this.getToken(Cobol85Parser.PICTURE, 0);
	};

	SYMBOL() {
	    return this.getToken(Cobol85Parser.SYMBOL, 0);
	};

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCurrencySignClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCurrencySignClause(this);
		}
	}


}



class DecimalPointClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_decimalPointClause;
    }

	DECIMAL_POINT() {
	    return this.getToken(Cobol85Parser.DECIMAL_POINT, 0);
	};

	COMMA() {
	    return this.getToken(Cobol85Parser.COMMA, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDecimalPointClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDecimalPointClause(this);
		}
	}


}



class DefaultComputationalSignClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_defaultComputationalSignClause;
    }

	DEFAULT() {
	    return this.getToken(Cobol85Parser.DEFAULT, 0);
	};

	SEPARATE() {
	    return this.getToken(Cobol85Parser.SEPARATE, 0);
	};

	SIGN() {
	    return this.getToken(Cobol85Parser.SIGN, 0);
	};

	COMPUTATIONAL() {
	    return this.getToken(Cobol85Parser.COMPUTATIONAL, 0);
	};

	COMP() {
	    return this.getToken(Cobol85Parser.COMP, 0);
	};

	LEADING() {
	    return this.getToken(Cobol85Parser.LEADING, 0);
	};

	TRAILING() {
	    return this.getToken(Cobol85Parser.TRAILING, 0);
	};

	CHARACTER() {
	    return this.getToken(Cobol85Parser.CHARACTER, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDefaultComputationalSignClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDefaultComputationalSignClause(this);
		}
	}


}



class DefaultDisplaySignClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_defaultDisplaySignClause;
    }

	DEFAULT_DISPLAY() {
	    return this.getToken(Cobol85Parser.DEFAULT_DISPLAY, 0);
	};

	LEADING() {
	    return this.getToken(Cobol85Parser.LEADING, 0);
	};

	TRAILING() {
	    return this.getToken(Cobol85Parser.TRAILING, 0);
	};

	SIGN() {
	    return this.getToken(Cobol85Parser.SIGN, 0);
	};

	SEPARATE() {
	    return this.getToken(Cobol85Parser.SEPARATE, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	CHARACTER() {
	    return this.getToken(Cobol85Parser.CHARACTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDefaultDisplaySignClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDefaultDisplaySignClause(this);
		}
	}


}



class EnvironmentSwitchNameClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_environmentSwitchNameClause;
    }

	environmentName() {
	    return this.getTypedRuleContext(EnvironmentNameContext,0);
	};

	mnemonicName() {
	    return this.getTypedRuleContext(MnemonicNameContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	environmentSwitchNameSpecialNamesStatusPhrase() {
	    return this.getTypedRuleContext(EnvironmentSwitchNameSpecialNamesStatusPhraseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterEnvironmentSwitchNameClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitEnvironmentSwitchNameClause(this);
		}
	}


}



class EnvironmentSwitchNameSpecialNamesStatusPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_environmentSwitchNameSpecialNamesStatusPhrase;
    }

	ON() {
	    return this.getToken(Cobol85Parser.ON, 0);
	};

	condition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionContext,i);
	    }
	};

	STATUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.STATUS);
	    } else {
	        return this.getToken(Cobol85Parser.STATUS, i);
	    }
	};


	IS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.IS);
	    } else {
	        return this.getToken(Cobol85Parser.IS, i);
	    }
	};


	OFF() {
	    return this.getToken(Cobol85Parser.OFF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterEnvironmentSwitchNameSpecialNamesStatusPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitEnvironmentSwitchNameSpecialNamesStatusPhrase(this);
		}
	}


}



class OdtClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_odtClause;
    }

	ODT() {
	    return this.getToken(Cobol85Parser.ODT, 0);
	};

	mnemonicName() {
	    return this.getTypedRuleContext(MnemonicNameContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterOdtClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitOdtClause(this);
		}
	}


}



class ReserveNetworkClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reserveNetworkClause;
    }

	RESERVE() {
	    return this.getToken(Cobol85Parser.RESERVE, 0);
	};

	NETWORK() {
	    return this.getToken(Cobol85Parser.NETWORK, 0);
	};

	WORDS() {
	    return this.getToken(Cobol85Parser.WORDS, 0);
	};

	LIST() {
	    return this.getToken(Cobol85Parser.LIST, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	CAPABLE() {
	    return this.getToken(Cobol85Parser.CAPABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReserveNetworkClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReserveNetworkClause(this);
		}
	}


}



class SymbolicCharactersClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_symbolicCharactersClause;
    }

	SYMBOLIC() {
	    return this.getToken(Cobol85Parser.SYMBOLIC, 0);
	};

	CHARACTERS() {
	    return this.getToken(Cobol85Parser.CHARACTERS, 0);
	};

	symbolicCharacters = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolicCharactersContext);
	    } else {
	        return this.getTypedRuleContext(SymbolicCharactersContext,i);
	    }
	};

	IN() {
	    return this.getToken(Cobol85Parser.IN, 0);
	};

	alphabetName() {
	    return this.getTypedRuleContext(AlphabetNameContext,0);
	};

	ALPHANUMERIC() {
	    return this.getToken(Cobol85Parser.ALPHANUMERIC, 0);
	};

	NATIONAL() {
	    return this.getToken(Cobol85Parser.NATIONAL, 0);
	};

	FOR() {
	    return this.getToken(Cobol85Parser.FOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSymbolicCharactersClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSymbolicCharactersClause(this);
		}
	}


}



class SymbolicCharactersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_symbolicCharacters;
    }

	symbolicCharacter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolicCharacterContext);
	    } else {
	        return this.getTypedRuleContext(SymbolicCharacterContext,i);
	    }
	};

	integerLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntegerLiteralContext);
	    } else {
	        return this.getTypedRuleContext(IntegerLiteralContext,i);
	    }
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	ARE() {
	    return this.getToken(Cobol85Parser.ARE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSymbolicCharacters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSymbolicCharacters(this);
		}
	}


}



class InputOutputSectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_inputOutputSection;
    }

	INPUT_OUTPUT() {
	    return this.getToken(Cobol85Parser.INPUT_OUTPUT, 0);
	};

	SECTION() {
	    return this.getToken(Cobol85Parser.SECTION, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	inputOutputSectionParagraph = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InputOutputSectionParagraphContext);
	    } else {
	        return this.getTypedRuleContext(InputOutputSectionParagraphContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInputOutputSection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInputOutputSection(this);
		}
	}


}



class InputOutputSectionParagraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_inputOutputSectionParagraph;
    }

	fileControlParagraph() {
	    return this.getTypedRuleContext(FileControlParagraphContext,0);
	};

	ioControlParagraph() {
	    return this.getTypedRuleContext(IoControlParagraphContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInputOutputSectionParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInputOutputSectionParagraph(this);
		}
	}


}



class FileControlParagraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_fileControlParagraph;
    }

	FILE_CONTROL() {
	    return this.getToken(Cobol85Parser.FILE_CONTROL, 0);
	};

	DOT_FS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.DOT_FS);
	    } else {
	        return this.getToken(Cobol85Parser.DOT_FS, i);
	    }
	};


	fileControlEntry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FileControlEntryContext);
	    } else {
	        return this.getTypedRuleContext(FileControlEntryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterFileControlParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitFileControlParagraph(this);
		}
	}


}



class FileControlEntryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_fileControlEntry;
    }

	selectClause() {
	    return this.getTypedRuleContext(SelectClauseContext,0);
	};

	fileControlClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FileControlClauseContext);
	    } else {
	        return this.getTypedRuleContext(FileControlClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterFileControlEntry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitFileControlEntry(this);
		}
	}


}



class SelectClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_selectClause;
    }

	SELECT() {
	    return this.getToken(Cobol85Parser.SELECT, 0);
	};

	fileName() {
	    return this.getTypedRuleContext(FileNameContext,0);
	};

	OPTIONAL() {
	    return this.getToken(Cobol85Parser.OPTIONAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSelectClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSelectClause(this);
		}
	}


}



class FileControlClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_fileControlClause;
    }

	assignClause() {
	    return this.getTypedRuleContext(AssignClauseContext,0);
	};

	reserveClause() {
	    return this.getTypedRuleContext(ReserveClauseContext,0);
	};

	organizationClause() {
	    return this.getTypedRuleContext(OrganizationClauseContext,0);
	};

	paddingCharacterClause() {
	    return this.getTypedRuleContext(PaddingCharacterClauseContext,0);
	};

	recordDelimiterClause() {
	    return this.getTypedRuleContext(RecordDelimiterClauseContext,0);
	};

	accessModeClause() {
	    return this.getTypedRuleContext(AccessModeClauseContext,0);
	};

	recordKeyClause() {
	    return this.getTypedRuleContext(RecordKeyClauseContext,0);
	};

	alternateRecordKeyClause() {
	    return this.getTypedRuleContext(AlternateRecordKeyClauseContext,0);
	};

	fileStatusClause() {
	    return this.getTypedRuleContext(FileStatusClauseContext,0);
	};

	passwordClause() {
	    return this.getTypedRuleContext(PasswordClauseContext,0);
	};

	relativeKeyClause() {
	    return this.getTypedRuleContext(RelativeKeyClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterFileControlClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitFileControlClause(this);
		}
	}


}



class AssignClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_assignClause;
    }

	ASSIGN() {
	    return this.getToken(Cobol85Parser.ASSIGN, 0);
	};

	DISK() {
	    return this.getToken(Cobol85Parser.DISK, 0);
	};

	DISPLAY() {
	    return this.getToken(Cobol85Parser.DISPLAY, 0);
	};

	KEYBOARD() {
	    return this.getToken(Cobol85Parser.KEYBOARD, 0);
	};

	PORT() {
	    return this.getToken(Cobol85Parser.PORT, 0);
	};

	PRINTER() {
	    return this.getToken(Cobol85Parser.PRINTER, 0);
	};

	READER() {
	    return this.getToken(Cobol85Parser.READER, 0);
	};

	REMOTE() {
	    return this.getToken(Cobol85Parser.REMOTE, 0);
	};

	TAPE() {
	    return this.getToken(Cobol85Parser.TAPE, 0);
	};

	VIRTUAL() {
	    return this.getToken(Cobol85Parser.VIRTUAL, 0);
	};

	assignmentName() {
	    return this.getTypedRuleContext(AssignmentNameContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	TO() {
	    return this.getToken(Cobol85Parser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAssignClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAssignClause(this);
		}
	}


}



class ReserveClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reserveClause;
    }

	RESERVE() {
	    return this.getToken(Cobol85Parser.RESERVE, 0);
	};

	NO() {
	    return this.getToken(Cobol85Parser.NO, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	ALTERNATE() {
	    return this.getToken(Cobol85Parser.ALTERNATE, 0);
	};

	AREA() {
	    return this.getToken(Cobol85Parser.AREA, 0);
	};

	AREAS() {
	    return this.getToken(Cobol85Parser.AREAS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReserveClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReserveClause(this);
		}
	}


}



class OrganizationClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_organizationClause;
    }

	SEQUENTIAL() {
	    return this.getToken(Cobol85Parser.SEQUENTIAL, 0);
	};

	RELATIVE() {
	    return this.getToken(Cobol85Parser.RELATIVE, 0);
	};

	INDEXED() {
	    return this.getToken(Cobol85Parser.INDEXED, 0);
	};

	ORGANIZATION() {
	    return this.getToken(Cobol85Parser.ORGANIZATION, 0);
	};

	LINE() {
	    return this.getToken(Cobol85Parser.LINE, 0);
	};

	RECORD() {
	    return this.getToken(Cobol85Parser.RECORD, 0);
	};

	BINARY() {
	    return this.getToken(Cobol85Parser.BINARY, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterOrganizationClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitOrganizationClause(this);
		}
	}


}



class PaddingCharacterClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_paddingCharacterClause;
    }

	PADDING() {
	    return this.getToken(Cobol85Parser.PADDING, 0);
	};

	qualifiedDataName() {
	    return this.getTypedRuleContext(QualifiedDataNameContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	CHARACTER() {
	    return this.getToken(Cobol85Parser.CHARACTER, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterPaddingCharacterClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitPaddingCharacterClause(this);
		}
	}


}



class RecordDelimiterClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_recordDelimiterClause;
    }

	RECORD() {
	    return this.getToken(Cobol85Parser.RECORD, 0);
	};

	DELIMITER() {
	    return this.getToken(Cobol85Parser.DELIMITER, 0);
	};

	STANDARD_1() {
	    return this.getToken(Cobol85Parser.STANDARD_1, 0);
	};

	IMPLICIT() {
	    return this.getToken(Cobol85Parser.IMPLICIT, 0);
	};

	assignmentName() {
	    return this.getTypedRuleContext(AssignmentNameContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterRecordDelimiterClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitRecordDelimiterClause(this);
		}
	}


}



class AccessModeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_accessModeClause;
    }

	ACCESS() {
	    return this.getToken(Cobol85Parser.ACCESS, 0);
	};

	SEQUENTIAL() {
	    return this.getToken(Cobol85Parser.SEQUENTIAL, 0);
	};

	RANDOM() {
	    return this.getToken(Cobol85Parser.RANDOM, 0);
	};

	DYNAMIC() {
	    return this.getToken(Cobol85Parser.DYNAMIC, 0);
	};

	EXCLUSIVE() {
	    return this.getToken(Cobol85Parser.EXCLUSIVE, 0);
	};

	MODE() {
	    return this.getToken(Cobol85Parser.MODE, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAccessModeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAccessModeClause(this);
		}
	}


}



class RecordKeyClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_recordKeyClause;
    }

	RECORD() {
	    return this.getToken(Cobol85Parser.RECORD, 0);
	};

	qualifiedDataName() {
	    return this.getTypedRuleContext(QualifiedDataNameContext,0);
	};

	KEY() {
	    return this.getToken(Cobol85Parser.KEY, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	passwordClause() {
	    return this.getTypedRuleContext(PasswordClauseContext,0);
	};

	DUPLICATES() {
	    return this.getToken(Cobol85Parser.DUPLICATES, 0);
	};

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterRecordKeyClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitRecordKeyClause(this);
		}
	}


}



class AlternateRecordKeyClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_alternateRecordKeyClause;
    }

	ALTERNATE() {
	    return this.getToken(Cobol85Parser.ALTERNATE, 0);
	};

	RECORD() {
	    return this.getToken(Cobol85Parser.RECORD, 0);
	};

	qualifiedDataName() {
	    return this.getTypedRuleContext(QualifiedDataNameContext,0);
	};

	KEY() {
	    return this.getToken(Cobol85Parser.KEY, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	passwordClause() {
	    return this.getTypedRuleContext(PasswordClauseContext,0);
	};

	DUPLICATES() {
	    return this.getToken(Cobol85Parser.DUPLICATES, 0);
	};

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAlternateRecordKeyClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAlternateRecordKeyClause(this);
		}
	}


}



class PasswordClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_passwordClause;
    }

	PASSWORD() {
	    return this.getToken(Cobol85Parser.PASSWORD, 0);
	};

	dataName() {
	    return this.getTypedRuleContext(DataNameContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterPasswordClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitPasswordClause(this);
		}
	}


}



class FileStatusClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_fileStatusClause;
    }

	STATUS() {
	    return this.getToken(Cobol85Parser.STATUS, 0);
	};

	qualifiedDataName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedDataNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedDataNameContext,i);
	    }
	};

	FILE() {
	    return this.getToken(Cobol85Parser.FILE, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterFileStatusClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitFileStatusClause(this);
		}
	}


}



class RelativeKeyClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_relativeKeyClause;
    }

	RELATIVE() {
	    return this.getToken(Cobol85Parser.RELATIVE, 0);
	};

	qualifiedDataName() {
	    return this.getTypedRuleContext(QualifiedDataNameContext,0);
	};

	KEY() {
	    return this.getToken(Cobol85Parser.KEY, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterRelativeKeyClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitRelativeKeyClause(this);
		}
	}


}



class IoControlParagraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_ioControlParagraph;
    }

	I_O_CONTROL() {
	    return this.getToken(Cobol85Parser.I_O_CONTROL, 0);
	};

	DOT_FS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.DOT_FS);
	    } else {
	        return this.getToken(Cobol85Parser.DOT_FS, i);
	    }
	};


	fileName() {
	    return this.getTypedRuleContext(FileNameContext,0);
	};

	ioControlClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IoControlClauseContext);
	    } else {
	        return this.getTypedRuleContext(IoControlClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterIoControlParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitIoControlParagraph(this);
		}
	}


}



class IoControlClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_ioControlClause;
    }

	rerunClause() {
	    return this.getTypedRuleContext(RerunClauseContext,0);
	};

	sameClause() {
	    return this.getTypedRuleContext(SameClauseContext,0);
	};

	multipleFileClause() {
	    return this.getTypedRuleContext(MultipleFileClauseContext,0);
	};

	commitmentControlClause() {
	    return this.getTypedRuleContext(CommitmentControlClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterIoControlClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitIoControlClause(this);
		}
	}


}



class RerunClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_rerunClause;
    }

	RERUN() {
	    return this.getToken(Cobol85Parser.RERUN, 0);
	};

	EVERY() {
	    return this.getToken(Cobol85Parser.EVERY, 0);
	};

	rerunEveryRecords() {
	    return this.getTypedRuleContext(RerunEveryRecordsContext,0);
	};

	rerunEveryOf() {
	    return this.getTypedRuleContext(RerunEveryOfContext,0);
	};

	rerunEveryClock() {
	    return this.getTypedRuleContext(RerunEveryClockContext,0);
	};

	ON() {
	    return this.getToken(Cobol85Parser.ON, 0);
	};

	assignmentName() {
	    return this.getTypedRuleContext(AssignmentNameContext,0);
	};

	fileName() {
	    return this.getTypedRuleContext(FileNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterRerunClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitRerunClause(this);
		}
	}


}



class RerunEveryRecordsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_rerunEveryRecords;
    }

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	RECORDS() {
	    return this.getToken(Cobol85Parser.RECORDS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterRerunEveryRecords(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitRerunEveryRecords(this);
		}
	}


}



class RerunEveryOfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_rerunEveryOf;
    }

	OF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.OF);
	    } else {
	        return this.getToken(Cobol85Parser.OF, i);
	    }
	};


	fileName() {
	    return this.getTypedRuleContext(FileNameContext,0);
	};

	REEL() {
	    return this.getToken(Cobol85Parser.REEL, 0);
	};

	UNIT() {
	    return this.getToken(Cobol85Parser.UNIT, 0);
	};

	END() {
	    return this.getToken(Cobol85Parser.END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterRerunEveryOf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitRerunEveryOf(this);
		}
	}


}



class RerunEveryClockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_rerunEveryClock;
    }

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	CLOCK_UNITS() {
	    return this.getToken(Cobol85Parser.CLOCK_UNITS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterRerunEveryClock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitRerunEveryClock(this);
		}
	}


}



class SameClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sameClause;
    }

	SAME() {
	    return this.getToken(Cobol85Parser.SAME, 0);
	};

	AREA() {
	    return this.getToken(Cobol85Parser.AREA, 0);
	};

	FOR() {
	    return this.getToken(Cobol85Parser.FOR, 0);
	};

	fileName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FileNameContext);
	    } else {
	        return this.getTypedRuleContext(FileNameContext,i);
	    }
	};

	RECORD() {
	    return this.getToken(Cobol85Parser.RECORD, 0);
	};

	SORT() {
	    return this.getToken(Cobol85Parser.SORT, 0);
	};

	SORT_MERGE() {
	    return this.getToken(Cobol85Parser.SORT_MERGE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSameClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSameClause(this);
		}
	}


}



class MultipleFileClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_multipleFileClause;
    }

	MULTIPLE() {
	    return this.getToken(Cobol85Parser.MULTIPLE, 0);
	};

	FILE() {
	    return this.getToken(Cobol85Parser.FILE, 0);
	};

	TAPE() {
	    return this.getToken(Cobol85Parser.TAPE, 0);
	};

	CONTAINS() {
	    return this.getToken(Cobol85Parser.CONTAINS, 0);
	};

	multipleFilePosition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultipleFilePositionContext);
	    } else {
	        return this.getTypedRuleContext(MultipleFilePositionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMultipleFileClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMultipleFileClause(this);
		}
	}


}



class MultipleFilePositionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_multipleFilePosition;
    }

	fileName() {
	    return this.getTypedRuleContext(FileNameContext,0);
	};

	POSITION() {
	    return this.getToken(Cobol85Parser.POSITION, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMultipleFilePosition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMultipleFilePosition(this);
		}
	}


}



class CommitmentControlClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_commitmentControlClause;
    }

	COMMITMENT() {
	    return this.getToken(Cobol85Parser.COMMITMENT, 0);
	};

	CONTROL() {
	    return this.getToken(Cobol85Parser.CONTROL, 0);
	};

	fileName() {
	    return this.getTypedRuleContext(FileNameContext,0);
	};

	FOR() {
	    return this.getToken(Cobol85Parser.FOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCommitmentControlClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCommitmentControlClause(this);
		}
	}


}



class DataDivisionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataDivision;
    }

	DATA() {
	    return this.getToken(Cobol85Parser.DATA, 0);
	};

	DIVISION() {
	    return this.getToken(Cobol85Parser.DIVISION, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	dataDivisionSection = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataDivisionSectionContext);
	    } else {
	        return this.getTypedRuleContext(DataDivisionSectionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataDivision(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataDivision(this);
		}
	}


}



class DataDivisionSectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataDivisionSection;
    }

	fileSection() {
	    return this.getTypedRuleContext(FileSectionContext,0);
	};

	dataBaseSection() {
	    return this.getTypedRuleContext(DataBaseSectionContext,0);
	};

	workingStorageSection() {
	    return this.getTypedRuleContext(WorkingStorageSectionContext,0);
	};

	linkageSection() {
	    return this.getTypedRuleContext(LinkageSectionContext,0);
	};

	communicationSection() {
	    return this.getTypedRuleContext(CommunicationSectionContext,0);
	};

	localStorageSection() {
	    return this.getTypedRuleContext(LocalStorageSectionContext,0);
	};

	screenSection() {
	    return this.getTypedRuleContext(ScreenSectionContext,0);
	};

	reportSection() {
	    return this.getTypedRuleContext(ReportSectionContext,0);
	};

	programLibrarySection() {
	    return this.getTypedRuleContext(ProgramLibrarySectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataDivisionSection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataDivisionSection(this);
		}
	}


}



class FileSectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_fileSection;
    }

	FILE() {
	    return this.getToken(Cobol85Parser.FILE, 0);
	};

	SECTION() {
	    return this.getToken(Cobol85Parser.SECTION, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	fileDescriptionEntry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FileDescriptionEntryContext);
	    } else {
	        return this.getTypedRuleContext(FileDescriptionEntryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterFileSection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitFileSection(this);
		}
	}


}



class FileDescriptionEntryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_fileDescriptionEntry;
    }

	fileName() {
	    return this.getTypedRuleContext(FileNameContext,0);
	};

	DOT_FS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.DOT_FS);
	    } else {
	        return this.getToken(Cobol85Parser.DOT_FS, i);
	    }
	};


	FD() {
	    return this.getToken(Cobol85Parser.FD, 0);
	};

	SD() {
	    return this.getToken(Cobol85Parser.SD, 0);
	};

	fileDescriptionEntryClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FileDescriptionEntryClauseContext);
	    } else {
	        return this.getTypedRuleContext(FileDescriptionEntryClauseContext,i);
	    }
	};

	dataDescriptionEntry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataDescriptionEntryContext);
	    } else {
	        return this.getTypedRuleContext(DataDescriptionEntryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterFileDescriptionEntry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitFileDescriptionEntry(this);
		}
	}


}



class FileDescriptionEntryClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_fileDescriptionEntryClause;
    }

	externalClause() {
	    return this.getTypedRuleContext(ExternalClauseContext,0);
	};

	globalClause() {
	    return this.getTypedRuleContext(GlobalClauseContext,0);
	};

	blockContainsClause() {
	    return this.getTypedRuleContext(BlockContainsClauseContext,0);
	};

	recordContainsClause() {
	    return this.getTypedRuleContext(RecordContainsClauseContext,0);
	};

	labelRecordsClause() {
	    return this.getTypedRuleContext(LabelRecordsClauseContext,0);
	};

	valueOfClause() {
	    return this.getTypedRuleContext(ValueOfClauseContext,0);
	};

	dataRecordsClause() {
	    return this.getTypedRuleContext(DataRecordsClauseContext,0);
	};

	linageClause() {
	    return this.getTypedRuleContext(LinageClauseContext,0);
	};

	codeSetClause() {
	    return this.getTypedRuleContext(CodeSetClauseContext,0);
	};

	reportClause() {
	    return this.getTypedRuleContext(ReportClauseContext,0);
	};

	recordingModeClause() {
	    return this.getTypedRuleContext(RecordingModeClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterFileDescriptionEntryClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitFileDescriptionEntryClause(this);
		}
	}


}



class ExternalClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_externalClause;
    }

	EXTERNAL() {
	    return this.getToken(Cobol85Parser.EXTERNAL, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterExternalClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitExternalClause(this);
		}
	}


}



class GlobalClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_globalClause;
    }

	GLOBAL() {
	    return this.getToken(Cobol85Parser.GLOBAL, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterGlobalClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitGlobalClause(this);
		}
	}


}



class BlockContainsClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_blockContainsClause;
    }

	BLOCK() {
	    return this.getToken(Cobol85Parser.BLOCK, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	CONTAINS() {
	    return this.getToken(Cobol85Parser.CONTAINS, 0);
	};

	blockContainsTo() {
	    return this.getTypedRuleContext(BlockContainsToContext,0);
	};

	RECORDS() {
	    return this.getToken(Cobol85Parser.RECORDS, 0);
	};

	CHARACTERS() {
	    return this.getToken(Cobol85Parser.CHARACTERS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterBlockContainsClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitBlockContainsClause(this);
		}
	}


}



class BlockContainsToContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_blockContainsTo;
    }

	TO() {
	    return this.getToken(Cobol85Parser.TO, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterBlockContainsTo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitBlockContainsTo(this);
		}
	}


}



class RecordContainsClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_recordContainsClause;
    }

	RECORD() {
	    return this.getToken(Cobol85Parser.RECORD, 0);
	};

	recordContainsClauseFormat1() {
	    return this.getTypedRuleContext(RecordContainsClauseFormat1Context,0);
	};

	recordContainsClauseFormat2() {
	    return this.getTypedRuleContext(RecordContainsClauseFormat2Context,0);
	};

	recordContainsClauseFormat3() {
	    return this.getTypedRuleContext(RecordContainsClauseFormat3Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterRecordContainsClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitRecordContainsClause(this);
		}
	}


}



class RecordContainsClauseFormat1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_recordContainsClauseFormat1;
    }

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	CONTAINS() {
	    return this.getToken(Cobol85Parser.CONTAINS, 0);
	};

	CHARACTERS() {
	    return this.getToken(Cobol85Parser.CHARACTERS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterRecordContainsClauseFormat1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitRecordContainsClauseFormat1(this);
		}
	}


}



class RecordContainsClauseFormat2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_recordContainsClauseFormat2;
    }

	VARYING() {
	    return this.getToken(Cobol85Parser.VARYING, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	IN() {
	    return this.getToken(Cobol85Parser.IN, 0);
	};

	SIZE() {
	    return this.getToken(Cobol85Parser.SIZE, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	DEPENDING() {
	    return this.getToken(Cobol85Parser.DEPENDING, 0);
	};

	qualifiedDataName() {
	    return this.getTypedRuleContext(QualifiedDataNameContext,0);
	};

	FROM() {
	    return this.getToken(Cobol85Parser.FROM, 0);
	};

	recordContainsTo() {
	    return this.getTypedRuleContext(RecordContainsToContext,0);
	};

	CHARACTERS() {
	    return this.getToken(Cobol85Parser.CHARACTERS, 0);
	};

	ON() {
	    return this.getToken(Cobol85Parser.ON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterRecordContainsClauseFormat2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitRecordContainsClauseFormat2(this);
		}
	}


}



class RecordContainsClauseFormat3Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_recordContainsClauseFormat3;
    }

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	recordContainsTo() {
	    return this.getTypedRuleContext(RecordContainsToContext,0);
	};

	CONTAINS() {
	    return this.getToken(Cobol85Parser.CONTAINS, 0);
	};

	CHARACTERS() {
	    return this.getToken(Cobol85Parser.CHARACTERS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterRecordContainsClauseFormat3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitRecordContainsClauseFormat3(this);
		}
	}


}



class RecordContainsToContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_recordContainsTo;
    }

	TO() {
	    return this.getToken(Cobol85Parser.TO, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterRecordContainsTo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitRecordContainsTo(this);
		}
	}


}



class LabelRecordsClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_labelRecordsClause;
    }

	LABEL() {
	    return this.getToken(Cobol85Parser.LABEL, 0);
	};

	RECORD() {
	    return this.getToken(Cobol85Parser.RECORD, 0);
	};

	RECORDS() {
	    return this.getToken(Cobol85Parser.RECORDS, 0);
	};

	OMITTED() {
	    return this.getToken(Cobol85Parser.OMITTED, 0);
	};

	STANDARD() {
	    return this.getToken(Cobol85Parser.STANDARD, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	ARE() {
	    return this.getToken(Cobol85Parser.ARE, 0);
	};

	dataName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataNameContext);
	    } else {
	        return this.getTypedRuleContext(DataNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLabelRecordsClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLabelRecordsClause(this);
		}
	}


}



class ValueOfClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_valueOfClause;
    }

	VALUE() {
	    return this.getToken(Cobol85Parser.VALUE, 0);
	};

	OF() {
	    return this.getToken(Cobol85Parser.OF, 0);
	};

	valuePair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValuePairContext);
	    } else {
	        return this.getTypedRuleContext(ValuePairContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterValueOfClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitValueOfClause(this);
		}
	}


}



class ValuePairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_valuePair;
    }

	systemName() {
	    return this.getTypedRuleContext(SystemNameContext,0);
	};

	qualifiedDataName() {
	    return this.getTypedRuleContext(QualifiedDataNameContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterValuePair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitValuePair(this);
		}
	}


}



class DataRecordsClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataRecordsClause;
    }

	DATA() {
	    return this.getToken(Cobol85Parser.DATA, 0);
	};

	RECORD() {
	    return this.getToken(Cobol85Parser.RECORD, 0);
	};

	RECORDS() {
	    return this.getToken(Cobol85Parser.RECORDS, 0);
	};

	dataName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataNameContext);
	    } else {
	        return this.getTypedRuleContext(DataNameContext,i);
	    }
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	ARE() {
	    return this.getToken(Cobol85Parser.ARE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataRecordsClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataRecordsClause(this);
		}
	}


}



class LinageClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_linageClause;
    }

	LINAGE() {
	    return this.getToken(Cobol85Parser.LINAGE, 0);
	};

	dataName() {
	    return this.getTypedRuleContext(DataNameContext,0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	LINES() {
	    return this.getToken(Cobol85Parser.LINES, 0);
	};

	linageAt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LinageAtContext);
	    } else {
	        return this.getTypedRuleContext(LinageAtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLinageClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLinageClause(this);
		}
	}


}



class LinageAtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_linageAt;
    }

	linageFootingAt() {
	    return this.getTypedRuleContext(LinageFootingAtContext,0);
	};

	linageLinesAtTop() {
	    return this.getTypedRuleContext(LinageLinesAtTopContext,0);
	};

	linageLinesAtBottom() {
	    return this.getTypedRuleContext(LinageLinesAtBottomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLinageAt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLinageAt(this);
		}
	}


}



class LinageFootingAtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_linageFootingAt;
    }

	FOOTING() {
	    return this.getToken(Cobol85Parser.FOOTING, 0);
	};

	dataName() {
	    return this.getTypedRuleContext(DataNameContext,0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	AT() {
	    return this.getToken(Cobol85Parser.AT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLinageFootingAt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLinageFootingAt(this);
		}
	}


}



class LinageLinesAtTopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_linageLinesAtTop;
    }

	TOP() {
	    return this.getToken(Cobol85Parser.TOP, 0);
	};

	dataName() {
	    return this.getTypedRuleContext(DataNameContext,0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	LINES() {
	    return this.getToken(Cobol85Parser.LINES, 0);
	};

	AT() {
	    return this.getToken(Cobol85Parser.AT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLinageLinesAtTop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLinageLinesAtTop(this);
		}
	}


}



class LinageLinesAtBottomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_linageLinesAtBottom;
    }

	BOTTOM() {
	    return this.getToken(Cobol85Parser.BOTTOM, 0);
	};

	dataName() {
	    return this.getTypedRuleContext(DataNameContext,0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	LINES() {
	    return this.getToken(Cobol85Parser.LINES, 0);
	};

	AT() {
	    return this.getToken(Cobol85Parser.AT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLinageLinesAtBottom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLinageLinesAtBottom(this);
		}
	}


}



class RecordingModeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_recordingModeClause;
    }

	RECORDING() {
	    return this.getToken(Cobol85Parser.RECORDING, 0);
	};

	modeStatement() {
	    return this.getTypedRuleContext(ModeStatementContext,0);
	};

	MODE() {
	    return this.getToken(Cobol85Parser.MODE, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterRecordingModeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitRecordingModeClause(this);
		}
	}


}



class ModeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_modeStatement;
    }

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterModeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitModeStatement(this);
		}
	}


}



class CodeSetClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_codeSetClause;
    }

	CODE_SET() {
	    return this.getToken(Cobol85Parser.CODE_SET, 0);
	};

	alphabetName() {
	    return this.getTypedRuleContext(AlphabetNameContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCodeSetClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCodeSetClause(this);
		}
	}


}



class ReportClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportClause;
    }

	REPORT() {
	    return this.getToken(Cobol85Parser.REPORT, 0);
	};

	REPORTS() {
	    return this.getToken(Cobol85Parser.REPORTS, 0);
	};

	reportName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReportNameContext);
	    } else {
	        return this.getTypedRuleContext(ReportNameContext,i);
	    }
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	ARE() {
	    return this.getToken(Cobol85Parser.ARE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportClause(this);
		}
	}


}



class DataBaseSectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataBaseSection;
    }

	DATA_BASE() {
	    return this.getToken(Cobol85Parser.DATA_BASE, 0);
	};

	SECTION() {
	    return this.getToken(Cobol85Parser.SECTION, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	dataBaseSectionEntry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataBaseSectionEntryContext);
	    } else {
	        return this.getTypedRuleContext(DataBaseSectionEntryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataBaseSection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataBaseSection(this);
		}
	}


}



class DataBaseSectionEntryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataBaseSectionEntry;
    }

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	INVOKE() {
	    return this.getToken(Cobol85Parser.INVOKE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataBaseSectionEntry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataBaseSectionEntry(this);
		}
	}


}



class WorkingStorageSectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_workingStorageSection;
    }

	WORKING_STORAGE() {
	    return this.getToken(Cobol85Parser.WORKING_STORAGE, 0);
	};

	SECTION() {
	    return this.getToken(Cobol85Parser.SECTION, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	dataDescriptionEntry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataDescriptionEntryContext);
	    } else {
	        return this.getTypedRuleContext(DataDescriptionEntryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterWorkingStorageSection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitWorkingStorageSection(this);
		}
	}


}



class LinkageSectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_linkageSection;
    }

	LINKAGE() {
	    return this.getToken(Cobol85Parser.LINKAGE, 0);
	};

	SECTION() {
	    return this.getToken(Cobol85Parser.SECTION, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	dataDescriptionEntry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataDescriptionEntryContext);
	    } else {
	        return this.getTypedRuleContext(DataDescriptionEntryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLinkageSection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLinkageSection(this);
		}
	}


}



class CommunicationSectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_communicationSection;
    }

	COMMUNICATION() {
	    return this.getToken(Cobol85Parser.COMMUNICATION, 0);
	};

	SECTION() {
	    return this.getToken(Cobol85Parser.SECTION, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	communicationDescriptionEntry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommunicationDescriptionEntryContext);
	    } else {
	        return this.getTypedRuleContext(CommunicationDescriptionEntryContext,i);
	    }
	};

	dataDescriptionEntry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataDescriptionEntryContext);
	    } else {
	        return this.getTypedRuleContext(DataDescriptionEntryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCommunicationSection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCommunicationSection(this);
		}
	}


}



class CommunicationDescriptionEntryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_communicationDescriptionEntry;
    }

	communicationDescriptionEntryFormat1() {
	    return this.getTypedRuleContext(CommunicationDescriptionEntryFormat1Context,0);
	};

	communicationDescriptionEntryFormat2() {
	    return this.getTypedRuleContext(CommunicationDescriptionEntryFormat2Context,0);
	};

	communicationDescriptionEntryFormat3() {
	    return this.getTypedRuleContext(CommunicationDescriptionEntryFormat3Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCommunicationDescriptionEntry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCommunicationDescriptionEntry(this);
		}
	}


}



class CommunicationDescriptionEntryFormat1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_communicationDescriptionEntryFormat1;
    }

	CD() {
	    return this.getToken(Cobol85Parser.CD, 0);
	};

	cdName() {
	    return this.getTypedRuleContext(CdNameContext,0);
	};

	INPUT() {
	    return this.getToken(Cobol85Parser.INPUT, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	FOR() {
	    return this.getToken(Cobol85Parser.FOR, 0);
	};

	INITIAL() {
	    return this.getToken(Cobol85Parser.INITIAL, 0);
	};

	dataDescName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataDescNameContext);
	    } else {
	        return this.getTypedRuleContext(DataDescNameContext,i);
	    }
	};

	symbolicQueueClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolicQueueClauseContext);
	    } else {
	        return this.getTypedRuleContext(SymbolicQueueClauseContext,i);
	    }
	};

	symbolicSubQueueClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolicSubQueueClauseContext);
	    } else {
	        return this.getTypedRuleContext(SymbolicSubQueueClauseContext,i);
	    }
	};

	messageDateClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MessageDateClauseContext);
	    } else {
	        return this.getTypedRuleContext(MessageDateClauseContext,i);
	    }
	};

	messageTimeClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MessageTimeClauseContext);
	    } else {
	        return this.getTypedRuleContext(MessageTimeClauseContext,i);
	    }
	};

	symbolicSourceClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolicSourceClauseContext);
	    } else {
	        return this.getTypedRuleContext(SymbolicSourceClauseContext,i);
	    }
	};

	textLengthClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TextLengthClauseContext);
	    } else {
	        return this.getTypedRuleContext(TextLengthClauseContext,i);
	    }
	};

	endKeyClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EndKeyClauseContext);
	    } else {
	        return this.getTypedRuleContext(EndKeyClauseContext,i);
	    }
	};

	statusKeyClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatusKeyClauseContext);
	    } else {
	        return this.getTypedRuleContext(StatusKeyClauseContext,i);
	    }
	};

	messageCountClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MessageCountClauseContext);
	    } else {
	        return this.getTypedRuleContext(MessageCountClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCommunicationDescriptionEntryFormat1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCommunicationDescriptionEntryFormat1(this);
		}
	}


}



class CommunicationDescriptionEntryFormat2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_communicationDescriptionEntryFormat2;
    }

	CD() {
	    return this.getToken(Cobol85Parser.CD, 0);
	};

	cdName() {
	    return this.getTypedRuleContext(CdNameContext,0);
	};

	OUTPUT() {
	    return this.getToken(Cobol85Parser.OUTPUT, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	FOR() {
	    return this.getToken(Cobol85Parser.FOR, 0);
	};

	destinationCountClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DestinationCountClauseContext);
	    } else {
	        return this.getTypedRuleContext(DestinationCountClauseContext,i);
	    }
	};

	textLengthClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TextLengthClauseContext);
	    } else {
	        return this.getTypedRuleContext(TextLengthClauseContext,i);
	    }
	};

	statusKeyClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatusKeyClauseContext);
	    } else {
	        return this.getTypedRuleContext(StatusKeyClauseContext,i);
	    }
	};

	destinationTableClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DestinationTableClauseContext);
	    } else {
	        return this.getTypedRuleContext(DestinationTableClauseContext,i);
	    }
	};

	errorKeyClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ErrorKeyClauseContext);
	    } else {
	        return this.getTypedRuleContext(ErrorKeyClauseContext,i);
	    }
	};

	symbolicDestinationClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolicDestinationClauseContext);
	    } else {
	        return this.getTypedRuleContext(SymbolicDestinationClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCommunicationDescriptionEntryFormat2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCommunicationDescriptionEntryFormat2(this);
		}
	}


}



class CommunicationDescriptionEntryFormat3Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_communicationDescriptionEntryFormat3;
    }

	CD() {
	    return this.getToken(Cobol85Parser.CD, 0);
	};

	cdName() {
	    return this.getTypedRuleContext(CdNameContext,0);
	};

	INITIAL() {
	    return this.getToken(Cobol85Parser.INITIAL, 0);
	};

	I_O() {
	    return this.getToken(Cobol85Parser.I_O, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	FOR() {
	    return this.getToken(Cobol85Parser.FOR, 0);
	};

	dataDescName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataDescNameContext);
	    } else {
	        return this.getTypedRuleContext(DataDescNameContext,i);
	    }
	};

	messageDateClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MessageDateClauseContext);
	    } else {
	        return this.getTypedRuleContext(MessageDateClauseContext,i);
	    }
	};

	messageTimeClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MessageTimeClauseContext);
	    } else {
	        return this.getTypedRuleContext(MessageTimeClauseContext,i);
	    }
	};

	symbolicTerminalClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolicTerminalClauseContext);
	    } else {
	        return this.getTypedRuleContext(SymbolicTerminalClauseContext,i);
	    }
	};

	textLengthClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TextLengthClauseContext);
	    } else {
	        return this.getTypedRuleContext(TextLengthClauseContext,i);
	    }
	};

	endKeyClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EndKeyClauseContext);
	    } else {
	        return this.getTypedRuleContext(EndKeyClauseContext,i);
	    }
	};

	statusKeyClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatusKeyClauseContext);
	    } else {
	        return this.getTypedRuleContext(StatusKeyClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCommunicationDescriptionEntryFormat3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCommunicationDescriptionEntryFormat3(this);
		}
	}


}



class DestinationCountClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_destinationCountClause;
    }

	DESTINATION() {
	    return this.getToken(Cobol85Parser.DESTINATION, 0);
	};

	COUNT() {
	    return this.getToken(Cobol85Parser.COUNT, 0);
	};

	dataDescName() {
	    return this.getTypedRuleContext(DataDescNameContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDestinationCountClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDestinationCountClause(this);
		}
	}


}



class DestinationTableClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_destinationTableClause;
    }

	DESTINATION() {
	    return this.getToken(Cobol85Parser.DESTINATION, 0);
	};

	TABLE() {
	    return this.getToken(Cobol85Parser.TABLE, 0);
	};

	OCCURS() {
	    return this.getToken(Cobol85Parser.OCCURS, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	TIMES() {
	    return this.getToken(Cobol85Parser.TIMES, 0);
	};

	INDEXED() {
	    return this.getToken(Cobol85Parser.INDEXED, 0);
	};

	BY() {
	    return this.getToken(Cobol85Parser.BY, 0);
	};

	indexName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexNameContext);
	    } else {
	        return this.getTypedRuleContext(IndexNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDestinationTableClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDestinationTableClause(this);
		}
	}


}



class EndKeyClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_endKeyClause;
    }

	END() {
	    return this.getToken(Cobol85Parser.END, 0);
	};

	KEY() {
	    return this.getToken(Cobol85Parser.KEY, 0);
	};

	dataDescName() {
	    return this.getTypedRuleContext(DataDescNameContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterEndKeyClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitEndKeyClause(this);
		}
	}


}



class ErrorKeyClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_errorKeyClause;
    }

	ERROR() {
	    return this.getToken(Cobol85Parser.ERROR, 0);
	};

	KEY() {
	    return this.getToken(Cobol85Parser.KEY, 0);
	};

	dataDescName() {
	    return this.getTypedRuleContext(DataDescNameContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterErrorKeyClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitErrorKeyClause(this);
		}
	}


}



class MessageCountClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_messageCountClause;
    }

	COUNT() {
	    return this.getToken(Cobol85Parser.COUNT, 0);
	};

	dataDescName() {
	    return this.getTypedRuleContext(DataDescNameContext,0);
	};

	MESSAGE() {
	    return this.getToken(Cobol85Parser.MESSAGE, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMessageCountClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMessageCountClause(this);
		}
	}


}



class MessageDateClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_messageDateClause;
    }

	MESSAGE() {
	    return this.getToken(Cobol85Parser.MESSAGE, 0);
	};

	DATE() {
	    return this.getToken(Cobol85Parser.DATE, 0);
	};

	dataDescName() {
	    return this.getTypedRuleContext(DataDescNameContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMessageDateClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMessageDateClause(this);
		}
	}


}



class MessageTimeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_messageTimeClause;
    }

	MESSAGE() {
	    return this.getToken(Cobol85Parser.MESSAGE, 0);
	};

	TIME() {
	    return this.getToken(Cobol85Parser.TIME, 0);
	};

	dataDescName() {
	    return this.getTypedRuleContext(DataDescNameContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMessageTimeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMessageTimeClause(this);
		}
	}


}



class StatusKeyClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_statusKeyClause;
    }

	STATUS() {
	    return this.getToken(Cobol85Parser.STATUS, 0);
	};

	KEY() {
	    return this.getToken(Cobol85Parser.KEY, 0);
	};

	dataDescName() {
	    return this.getTypedRuleContext(DataDescNameContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterStatusKeyClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitStatusKeyClause(this);
		}
	}


}



class SymbolicDestinationClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_symbolicDestinationClause;
    }

	DESTINATION() {
	    return this.getToken(Cobol85Parser.DESTINATION, 0);
	};

	dataDescName() {
	    return this.getTypedRuleContext(DataDescNameContext,0);
	};

	SYMBOLIC() {
	    return this.getToken(Cobol85Parser.SYMBOLIC, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSymbolicDestinationClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSymbolicDestinationClause(this);
		}
	}


}



class SymbolicQueueClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_symbolicQueueClause;
    }

	QUEUE() {
	    return this.getToken(Cobol85Parser.QUEUE, 0);
	};

	dataDescName() {
	    return this.getTypedRuleContext(DataDescNameContext,0);
	};

	SYMBOLIC() {
	    return this.getToken(Cobol85Parser.SYMBOLIC, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSymbolicQueueClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSymbolicQueueClause(this);
		}
	}


}



class SymbolicSourceClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_symbolicSourceClause;
    }

	SOURCE() {
	    return this.getToken(Cobol85Parser.SOURCE, 0);
	};

	dataDescName() {
	    return this.getTypedRuleContext(DataDescNameContext,0);
	};

	SYMBOLIC() {
	    return this.getToken(Cobol85Parser.SYMBOLIC, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSymbolicSourceClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSymbolicSourceClause(this);
		}
	}


}



class SymbolicTerminalClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_symbolicTerminalClause;
    }

	TERMINAL() {
	    return this.getToken(Cobol85Parser.TERMINAL, 0);
	};

	dataDescName() {
	    return this.getTypedRuleContext(DataDescNameContext,0);
	};

	SYMBOLIC() {
	    return this.getToken(Cobol85Parser.SYMBOLIC, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSymbolicTerminalClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSymbolicTerminalClause(this);
		}
	}


}



class SymbolicSubQueueClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_symbolicSubQueueClause;
    }

	dataDescName() {
	    return this.getTypedRuleContext(DataDescNameContext,0);
	};

	SUB_QUEUE_1() {
	    return this.getToken(Cobol85Parser.SUB_QUEUE_1, 0);
	};

	SUB_QUEUE_2() {
	    return this.getToken(Cobol85Parser.SUB_QUEUE_2, 0);
	};

	SUB_QUEUE_3() {
	    return this.getToken(Cobol85Parser.SUB_QUEUE_3, 0);
	};

	SYMBOLIC() {
	    return this.getToken(Cobol85Parser.SYMBOLIC, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSymbolicSubQueueClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSymbolicSubQueueClause(this);
		}
	}


}



class TextLengthClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_textLengthClause;
    }

	TEXT() {
	    return this.getToken(Cobol85Parser.TEXT, 0);
	};

	LENGTH() {
	    return this.getToken(Cobol85Parser.LENGTH, 0);
	};

	dataDescName() {
	    return this.getTypedRuleContext(DataDescNameContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterTextLengthClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitTextLengthClause(this);
		}
	}


}



class LocalStorageSectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_localStorageSection;
    }

	LOCAL_STORAGE() {
	    return this.getToken(Cobol85Parser.LOCAL_STORAGE, 0);
	};

	SECTION() {
	    return this.getToken(Cobol85Parser.SECTION, 0);
	};

	DOT_FS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.DOT_FS);
	    } else {
	        return this.getToken(Cobol85Parser.DOT_FS, i);
	    }
	};


	LD() {
	    return this.getToken(Cobol85Parser.LD, 0);
	};

	localName() {
	    return this.getTypedRuleContext(LocalNameContext,0);
	};

	dataDescriptionEntry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataDescriptionEntryContext);
	    } else {
	        return this.getTypedRuleContext(DataDescriptionEntryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLocalStorageSection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLocalStorageSection(this);
		}
	}


}



class ScreenSectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenSection;
    }

	SCREEN() {
	    return this.getToken(Cobol85Parser.SCREEN, 0);
	};

	SECTION() {
	    return this.getToken(Cobol85Parser.SECTION, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	screenDescriptionEntry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionEntryContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionEntryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenSection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenSection(this);
		}
	}


}



class ScreenDescriptionEntryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionEntry;
    }

	INTEGERLITERAL() {
	    return this.getToken(Cobol85Parser.INTEGERLITERAL, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	FILLER() {
	    return this.getToken(Cobol85Parser.FILLER, 0);
	};

	screenName() {
	    return this.getTypedRuleContext(ScreenNameContext,0);
	};

	screenDescriptionBlankClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionBlankClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionBlankClauseContext,i);
	    }
	};

	screenDescriptionBellClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionBellClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionBellClauseContext,i);
	    }
	};

	screenDescriptionBlinkClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionBlinkClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionBlinkClauseContext,i);
	    }
	};

	screenDescriptionEraseClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionEraseClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionEraseClauseContext,i);
	    }
	};

	screenDescriptionLightClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionLightClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionLightClauseContext,i);
	    }
	};

	screenDescriptionGridClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionGridClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionGridClauseContext,i);
	    }
	};

	screenDescriptionReverseVideoClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionReverseVideoClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionReverseVideoClauseContext,i);
	    }
	};

	screenDescriptionUnderlineClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionUnderlineClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionUnderlineClauseContext,i);
	    }
	};

	screenDescriptionSizeClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionSizeClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionSizeClauseContext,i);
	    }
	};

	screenDescriptionLineClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionLineClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionLineClauseContext,i);
	    }
	};

	screenDescriptionColumnClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionColumnClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionColumnClauseContext,i);
	    }
	};

	screenDescriptionForegroundColorClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionForegroundColorClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionForegroundColorClauseContext,i);
	    }
	};

	screenDescriptionBackgroundColorClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionBackgroundColorClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionBackgroundColorClauseContext,i);
	    }
	};

	screenDescriptionControlClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionControlClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionControlClauseContext,i);
	    }
	};

	screenDescriptionValueClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionValueClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionValueClauseContext,i);
	    }
	};

	screenDescriptionPictureClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionPictureClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionPictureClauseContext,i);
	    }
	};

	screenDescriptionUsageClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionUsageClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionUsageClauseContext,i);
	    }
	};

	screenDescriptionBlankWhenZeroClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionBlankWhenZeroClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionBlankWhenZeroClauseContext,i);
	    }
	};

	screenDescriptionJustifiedClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionJustifiedClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionJustifiedClauseContext,i);
	    }
	};

	screenDescriptionSignClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionSignClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionSignClauseContext,i);
	    }
	};

	screenDescriptionAutoClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionAutoClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionAutoClauseContext,i);
	    }
	};

	screenDescriptionSecureClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionSecureClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionSecureClauseContext,i);
	    }
	};

	screenDescriptionRequiredClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionRequiredClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionRequiredClauseContext,i);
	    }
	};

	screenDescriptionPromptClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionPromptClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionPromptClauseContext,i);
	    }
	};

	screenDescriptionFullClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionFullClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionFullClauseContext,i);
	    }
	};

	screenDescriptionZeroFillClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionZeroFillClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionZeroFillClauseContext,i);
	    }
	};

	screenDescriptionFromClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionFromClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionFromClauseContext,i);
	    }
	};

	screenDescriptionUsingClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ScreenDescriptionUsingClauseContext);
	    } else {
	        return this.getTypedRuleContext(ScreenDescriptionUsingClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionEntry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionEntry(this);
		}
	}


}



class ScreenDescriptionBlankClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionBlankClause;
    }

	BLANK() {
	    return this.getToken(Cobol85Parser.BLANK, 0);
	};

	SCREEN() {
	    return this.getToken(Cobol85Parser.SCREEN, 0);
	};

	LINE() {
	    return this.getToken(Cobol85Parser.LINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionBlankClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionBlankClause(this);
		}
	}


}



class ScreenDescriptionBellClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionBellClause;
    }

	BELL() {
	    return this.getToken(Cobol85Parser.BELL, 0);
	};

	BEEP() {
	    return this.getToken(Cobol85Parser.BEEP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionBellClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionBellClause(this);
		}
	}


}



class ScreenDescriptionBlinkClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionBlinkClause;
    }

	BLINK() {
	    return this.getToken(Cobol85Parser.BLINK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionBlinkClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionBlinkClause(this);
		}
	}


}



class ScreenDescriptionEraseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionEraseClause;
    }

	ERASE() {
	    return this.getToken(Cobol85Parser.ERASE, 0);
	};

	EOL() {
	    return this.getToken(Cobol85Parser.EOL, 0);
	};

	EOS() {
	    return this.getToken(Cobol85Parser.EOS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionEraseClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionEraseClause(this);
		}
	}


}



class ScreenDescriptionLightClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionLightClause;
    }

	HIGHLIGHT() {
	    return this.getToken(Cobol85Parser.HIGHLIGHT, 0);
	};

	LOWLIGHT() {
	    return this.getToken(Cobol85Parser.LOWLIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionLightClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionLightClause(this);
		}
	}


}



class ScreenDescriptionGridClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionGridClause;
    }

	GRID() {
	    return this.getToken(Cobol85Parser.GRID, 0);
	};

	LEFTLINE() {
	    return this.getToken(Cobol85Parser.LEFTLINE, 0);
	};

	OVERLINE() {
	    return this.getToken(Cobol85Parser.OVERLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionGridClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionGridClause(this);
		}
	}


}



class ScreenDescriptionReverseVideoClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionReverseVideoClause;
    }

	REVERSE_VIDEO() {
	    return this.getToken(Cobol85Parser.REVERSE_VIDEO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionReverseVideoClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionReverseVideoClause(this);
		}
	}


}



class ScreenDescriptionUnderlineClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionUnderlineClause;
    }

	UNDERLINE() {
	    return this.getToken(Cobol85Parser.UNDERLINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionUnderlineClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionUnderlineClause(this);
		}
	}


}



class ScreenDescriptionSizeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionSizeClause;
    }

	SIZE() {
	    return this.getToken(Cobol85Parser.SIZE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionSizeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionSizeClause(this);
		}
	}


}



class ScreenDescriptionLineClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionLineClause;
    }

	LINE() {
	    return this.getToken(Cobol85Parser.LINE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	PLUS() {
	    return this.getToken(Cobol85Parser.PLUS, 0);
	};

	PLUSCHAR() {
	    return this.getToken(Cobol85Parser.PLUSCHAR, 0);
	};

	MINUSCHAR() {
	    return this.getToken(Cobol85Parser.MINUSCHAR, 0);
	};

	NUMBER() {
	    return this.getToken(Cobol85Parser.NUMBER, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionLineClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionLineClause(this);
		}
	}


}



class ScreenDescriptionColumnClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionColumnClause;
    }

	COLUMN() {
	    return this.getToken(Cobol85Parser.COLUMN, 0);
	};

	COL() {
	    return this.getToken(Cobol85Parser.COL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	PLUS() {
	    return this.getToken(Cobol85Parser.PLUS, 0);
	};

	PLUSCHAR() {
	    return this.getToken(Cobol85Parser.PLUSCHAR, 0);
	};

	MINUSCHAR() {
	    return this.getToken(Cobol85Parser.MINUSCHAR, 0);
	};

	NUMBER() {
	    return this.getToken(Cobol85Parser.NUMBER, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionColumnClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionColumnClause(this);
		}
	}


}



class ScreenDescriptionForegroundColorClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionForegroundColorClause;
    }

	FOREGROUND_COLOR() {
	    return this.getToken(Cobol85Parser.FOREGROUND_COLOR, 0);
	};

	FOREGROUND_COLOUR() {
	    return this.getToken(Cobol85Parser.FOREGROUND_COLOUR, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionForegroundColorClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionForegroundColorClause(this);
		}
	}


}



class ScreenDescriptionBackgroundColorClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionBackgroundColorClause;
    }

	BACKGROUND_COLOR() {
	    return this.getToken(Cobol85Parser.BACKGROUND_COLOR, 0);
	};

	BACKGROUND_COLOUR() {
	    return this.getToken(Cobol85Parser.BACKGROUND_COLOUR, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionBackgroundColorClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionBackgroundColorClause(this);
		}
	}


}



class ScreenDescriptionControlClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionControlClause;
    }

	CONTROL() {
	    return this.getToken(Cobol85Parser.CONTROL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionControlClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionControlClause(this);
		}
	}


}



class ScreenDescriptionValueClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionValueClause;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	VALUE() {
	    return this.getToken(Cobol85Parser.VALUE, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionValueClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionValueClause(this);
		}
	}


}



class ScreenDescriptionPictureClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionPictureClause;
    }

	pictureString() {
	    return this.getTypedRuleContext(PictureStringContext,0);
	};

	PICTURE() {
	    return this.getToken(Cobol85Parser.PICTURE, 0);
	};

	PIC() {
	    return this.getToken(Cobol85Parser.PIC, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionPictureClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionPictureClause(this);
		}
	}


}



class ScreenDescriptionFromClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionFromClause;
    }

	FROM() {
	    return this.getToken(Cobol85Parser.FROM, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	screenDescriptionToClause() {
	    return this.getTypedRuleContext(ScreenDescriptionToClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionFromClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionFromClause(this);
		}
	}


}



class ScreenDescriptionToClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionToClause;
    }

	TO() {
	    return this.getToken(Cobol85Parser.TO, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionToClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionToClause(this);
		}
	}


}



class ScreenDescriptionUsingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionUsingClause;
    }

	USING() {
	    return this.getToken(Cobol85Parser.USING, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionUsingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionUsingClause(this);
		}
	}


}



class ScreenDescriptionUsageClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionUsageClause;
    }

	DISPLAY() {
	    return this.getToken(Cobol85Parser.DISPLAY, 0);
	};

	DISPLAY_1() {
	    return this.getToken(Cobol85Parser.DISPLAY_1, 0);
	};

	USAGE() {
	    return this.getToken(Cobol85Parser.USAGE, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionUsageClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionUsageClause(this);
		}
	}


}



class ScreenDescriptionBlankWhenZeroClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionBlankWhenZeroClause;
    }

	BLANK() {
	    return this.getToken(Cobol85Parser.BLANK, 0);
	};

	ZERO() {
	    return this.getToken(Cobol85Parser.ZERO, 0);
	};

	WHEN() {
	    return this.getToken(Cobol85Parser.WHEN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionBlankWhenZeroClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionBlankWhenZeroClause(this);
		}
	}


}



class ScreenDescriptionJustifiedClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionJustifiedClause;
    }

	JUSTIFIED() {
	    return this.getToken(Cobol85Parser.JUSTIFIED, 0);
	};

	JUST() {
	    return this.getToken(Cobol85Parser.JUST, 0);
	};

	RIGHT() {
	    return this.getToken(Cobol85Parser.RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionJustifiedClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionJustifiedClause(this);
		}
	}


}



class ScreenDescriptionSignClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionSignClause;
    }

	LEADING() {
	    return this.getToken(Cobol85Parser.LEADING, 0);
	};

	TRAILING() {
	    return this.getToken(Cobol85Parser.TRAILING, 0);
	};

	SIGN() {
	    return this.getToken(Cobol85Parser.SIGN, 0);
	};

	SEPARATE() {
	    return this.getToken(Cobol85Parser.SEPARATE, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	CHARACTER() {
	    return this.getToken(Cobol85Parser.CHARACTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionSignClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionSignClause(this);
		}
	}


}



class ScreenDescriptionAutoClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionAutoClause;
    }

	AUTO() {
	    return this.getToken(Cobol85Parser.AUTO, 0);
	};

	AUTO_SKIP() {
	    return this.getToken(Cobol85Parser.AUTO_SKIP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionAutoClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionAutoClause(this);
		}
	}


}



class ScreenDescriptionSecureClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionSecureClause;
    }

	SECURE() {
	    return this.getToken(Cobol85Parser.SECURE, 0);
	};

	NO_ECHO() {
	    return this.getToken(Cobol85Parser.NO_ECHO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionSecureClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionSecureClause(this);
		}
	}


}



class ScreenDescriptionRequiredClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionRequiredClause;
    }

	REQUIRED() {
	    return this.getToken(Cobol85Parser.REQUIRED, 0);
	};

	EMPTY_CHECK() {
	    return this.getToken(Cobol85Parser.EMPTY_CHECK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionRequiredClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionRequiredClause(this);
		}
	}


}



class ScreenDescriptionPromptClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionPromptClause;
    }

	PROMPT() {
	    return this.getToken(Cobol85Parser.PROMPT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	CHARACTER() {
	    return this.getToken(Cobol85Parser.CHARACTER, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	screenDescriptionPromptOccursClause() {
	    return this.getTypedRuleContext(ScreenDescriptionPromptOccursClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionPromptClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionPromptClause(this);
		}
	}


}



class ScreenDescriptionPromptOccursClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionPromptOccursClause;
    }

	OCCURS() {
	    return this.getToken(Cobol85Parser.OCCURS, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	TIMES() {
	    return this.getToken(Cobol85Parser.TIMES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionPromptOccursClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionPromptOccursClause(this);
		}
	}


}



class ScreenDescriptionFullClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionFullClause;
    }

	FULL() {
	    return this.getToken(Cobol85Parser.FULL, 0);
	};

	LENGTH_CHECK() {
	    return this.getToken(Cobol85Parser.LENGTH_CHECK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionFullClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionFullClause(this);
		}
	}


}



class ScreenDescriptionZeroFillClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenDescriptionZeroFillClause;
    }

	ZERO_FILL() {
	    return this.getToken(Cobol85Parser.ZERO_FILL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenDescriptionZeroFillClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenDescriptionZeroFillClause(this);
		}
	}


}



class ReportSectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportSection;
    }

	REPORT() {
	    return this.getToken(Cobol85Parser.REPORT, 0);
	};

	SECTION() {
	    return this.getToken(Cobol85Parser.SECTION, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	reportDescription = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReportDescriptionContext);
	    } else {
	        return this.getTypedRuleContext(ReportDescriptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportSection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportSection(this);
		}
	}


}



class ReportDescriptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportDescription;
    }

	reportDescriptionEntry() {
	    return this.getTypedRuleContext(ReportDescriptionEntryContext,0);
	};

	reportGroupDescriptionEntry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReportGroupDescriptionEntryContext);
	    } else {
	        return this.getTypedRuleContext(ReportGroupDescriptionEntryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportDescription(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportDescription(this);
		}
	}


}



class ReportDescriptionEntryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportDescriptionEntry;
    }

	RD() {
	    return this.getToken(Cobol85Parser.RD, 0);
	};

	reportName() {
	    return this.getTypedRuleContext(ReportNameContext,0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	reportDescriptionGlobalClause() {
	    return this.getTypedRuleContext(ReportDescriptionGlobalClauseContext,0);
	};

	reportDescriptionPageLimitClause() {
	    return this.getTypedRuleContext(ReportDescriptionPageLimitClauseContext,0);
	};

	reportDescriptionHeadingClause() {
	    return this.getTypedRuleContext(ReportDescriptionHeadingClauseContext,0);
	};

	reportDescriptionFirstDetailClause() {
	    return this.getTypedRuleContext(ReportDescriptionFirstDetailClauseContext,0);
	};

	reportDescriptionLastDetailClause() {
	    return this.getTypedRuleContext(ReportDescriptionLastDetailClauseContext,0);
	};

	reportDescriptionFootingClause() {
	    return this.getTypedRuleContext(ReportDescriptionFootingClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportDescriptionEntry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportDescriptionEntry(this);
		}
	}


}



class ReportDescriptionGlobalClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportDescriptionGlobalClause;
    }

	GLOBAL() {
	    return this.getToken(Cobol85Parser.GLOBAL, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportDescriptionGlobalClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportDescriptionGlobalClause(this);
		}
	}


}



class ReportDescriptionPageLimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportDescriptionPageLimitClause;
    }

	PAGE() {
	    return this.getToken(Cobol85Parser.PAGE, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	LIMIT() {
	    return this.getToken(Cobol85Parser.LIMIT, 0);
	};

	LIMITS() {
	    return this.getToken(Cobol85Parser.LIMITS, 0);
	};

	LINE() {
	    return this.getToken(Cobol85Parser.LINE, 0);
	};

	LINES() {
	    return this.getToken(Cobol85Parser.LINES, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	ARE() {
	    return this.getToken(Cobol85Parser.ARE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportDescriptionPageLimitClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportDescriptionPageLimitClause(this);
		}
	}


}



class ReportDescriptionHeadingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportDescriptionHeadingClause;
    }

	HEADING() {
	    return this.getToken(Cobol85Parser.HEADING, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportDescriptionHeadingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportDescriptionHeadingClause(this);
		}
	}


}



class ReportDescriptionFirstDetailClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportDescriptionFirstDetailClause;
    }

	FIRST() {
	    return this.getToken(Cobol85Parser.FIRST, 0);
	};

	DETAIL() {
	    return this.getToken(Cobol85Parser.DETAIL, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportDescriptionFirstDetailClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportDescriptionFirstDetailClause(this);
		}
	}


}



class ReportDescriptionLastDetailClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportDescriptionLastDetailClause;
    }

	LAST() {
	    return this.getToken(Cobol85Parser.LAST, 0);
	};

	DETAIL() {
	    return this.getToken(Cobol85Parser.DETAIL, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportDescriptionLastDetailClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportDescriptionLastDetailClause(this);
		}
	}


}



class ReportDescriptionFootingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportDescriptionFootingClause;
    }

	FOOTING() {
	    return this.getToken(Cobol85Parser.FOOTING, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportDescriptionFootingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportDescriptionFootingClause(this);
		}
	}


}



class ReportGroupDescriptionEntryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupDescriptionEntry;
    }

	reportGroupDescriptionEntryFormat1() {
	    return this.getTypedRuleContext(ReportGroupDescriptionEntryFormat1Context,0);
	};

	reportGroupDescriptionEntryFormat2() {
	    return this.getTypedRuleContext(ReportGroupDescriptionEntryFormat2Context,0);
	};

	reportGroupDescriptionEntryFormat3() {
	    return this.getTypedRuleContext(ReportGroupDescriptionEntryFormat3Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupDescriptionEntry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupDescriptionEntry(this);
		}
	}


}



class ReportGroupDescriptionEntryFormat1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupDescriptionEntryFormat1;
    }

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	dataName() {
	    return this.getTypedRuleContext(DataNameContext,0);
	};

	reportGroupTypeClause() {
	    return this.getTypedRuleContext(ReportGroupTypeClauseContext,0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	reportGroupLineNumberClause() {
	    return this.getTypedRuleContext(ReportGroupLineNumberClauseContext,0);
	};

	reportGroupNextGroupClause() {
	    return this.getTypedRuleContext(ReportGroupNextGroupClauseContext,0);
	};

	reportGroupUsageClause() {
	    return this.getTypedRuleContext(ReportGroupUsageClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupDescriptionEntryFormat1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupDescriptionEntryFormat1(this);
		}
	}


}



class ReportGroupDescriptionEntryFormat2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupDescriptionEntryFormat2;
    }

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	reportGroupUsageClause() {
	    return this.getTypedRuleContext(ReportGroupUsageClauseContext,0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	dataName() {
	    return this.getTypedRuleContext(DataNameContext,0);
	};

	reportGroupLineNumberClause() {
	    return this.getTypedRuleContext(ReportGroupLineNumberClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupDescriptionEntryFormat2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupDescriptionEntryFormat2(this);
		}
	}


}



class ReportGroupDescriptionEntryFormat3Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupDescriptionEntryFormat3;
    }

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	dataName() {
	    return this.getTypedRuleContext(DataNameContext,0);
	};

	reportGroupPictureClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReportGroupPictureClauseContext);
	    } else {
	        return this.getTypedRuleContext(ReportGroupPictureClauseContext,i);
	    }
	};

	reportGroupUsageClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReportGroupUsageClauseContext);
	    } else {
	        return this.getTypedRuleContext(ReportGroupUsageClauseContext,i);
	    }
	};

	reportGroupSignClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReportGroupSignClauseContext);
	    } else {
	        return this.getTypedRuleContext(ReportGroupSignClauseContext,i);
	    }
	};

	reportGroupJustifiedClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReportGroupJustifiedClauseContext);
	    } else {
	        return this.getTypedRuleContext(ReportGroupJustifiedClauseContext,i);
	    }
	};

	reportGroupBlankWhenZeroClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReportGroupBlankWhenZeroClauseContext);
	    } else {
	        return this.getTypedRuleContext(ReportGroupBlankWhenZeroClauseContext,i);
	    }
	};

	reportGroupLineNumberClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReportGroupLineNumberClauseContext);
	    } else {
	        return this.getTypedRuleContext(ReportGroupLineNumberClauseContext,i);
	    }
	};

	reportGroupColumnNumberClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReportGroupColumnNumberClauseContext);
	    } else {
	        return this.getTypedRuleContext(ReportGroupColumnNumberClauseContext,i);
	    }
	};

	reportGroupIndicateClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReportGroupIndicateClauseContext);
	    } else {
	        return this.getTypedRuleContext(ReportGroupIndicateClauseContext,i);
	    }
	};

	reportGroupSourceClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReportGroupSourceClauseContext);
	    } else {
	        return this.getTypedRuleContext(ReportGroupSourceClauseContext,i);
	    }
	};

	reportGroupValueClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReportGroupValueClauseContext);
	    } else {
	        return this.getTypedRuleContext(ReportGroupValueClauseContext,i);
	    }
	};

	reportGroupSumClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReportGroupSumClauseContext);
	    } else {
	        return this.getTypedRuleContext(ReportGroupSumClauseContext,i);
	    }
	};

	reportGroupResetClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReportGroupResetClauseContext);
	    } else {
	        return this.getTypedRuleContext(ReportGroupResetClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupDescriptionEntryFormat3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupDescriptionEntryFormat3(this);
		}
	}


}



class ReportGroupBlankWhenZeroClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupBlankWhenZeroClause;
    }

	BLANK() {
	    return this.getToken(Cobol85Parser.BLANK, 0);
	};

	ZERO() {
	    return this.getToken(Cobol85Parser.ZERO, 0);
	};

	WHEN() {
	    return this.getToken(Cobol85Parser.WHEN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupBlankWhenZeroClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupBlankWhenZeroClause(this);
		}
	}


}



class ReportGroupColumnNumberClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupColumnNumberClause;
    }

	COLUMN() {
	    return this.getToken(Cobol85Parser.COLUMN, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	NUMBER() {
	    return this.getToken(Cobol85Parser.NUMBER, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupColumnNumberClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupColumnNumberClause(this);
		}
	}


}



class ReportGroupIndicateClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupIndicateClause;
    }

	GROUP() {
	    return this.getToken(Cobol85Parser.GROUP, 0);
	};

	INDICATE() {
	    return this.getToken(Cobol85Parser.INDICATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupIndicateClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupIndicateClause(this);
		}
	}


}



class ReportGroupJustifiedClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupJustifiedClause;
    }

	JUSTIFIED() {
	    return this.getToken(Cobol85Parser.JUSTIFIED, 0);
	};

	JUST() {
	    return this.getToken(Cobol85Parser.JUST, 0);
	};

	RIGHT() {
	    return this.getToken(Cobol85Parser.RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupJustifiedClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupJustifiedClause(this);
		}
	}


}



class ReportGroupLineNumberClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupLineNumberClause;
    }

	reportGroupLineNumberNextPage() {
	    return this.getTypedRuleContext(ReportGroupLineNumberNextPageContext,0);
	};

	reportGroupLineNumberPlus() {
	    return this.getTypedRuleContext(ReportGroupLineNumberPlusContext,0);
	};

	LINE() {
	    return this.getToken(Cobol85Parser.LINE, 0);
	};

	NUMBER() {
	    return this.getToken(Cobol85Parser.NUMBER, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupLineNumberClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupLineNumberClause(this);
		}
	}


}



class ReportGroupLineNumberNextPageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupLineNumberNextPage;
    }

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	NEXT() {
	    return this.getToken(Cobol85Parser.NEXT, 0);
	};

	PAGE() {
	    return this.getToken(Cobol85Parser.PAGE, 0);
	};

	ON() {
	    return this.getToken(Cobol85Parser.ON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupLineNumberNextPage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupLineNumberNextPage(this);
		}
	}


}



class ReportGroupLineNumberPlusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupLineNumberPlus;
    }

	PLUS() {
	    return this.getToken(Cobol85Parser.PLUS, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupLineNumberPlus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupLineNumberPlus(this);
		}
	}


}



class ReportGroupNextGroupClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupNextGroupClause;
    }

	NEXT() {
	    return this.getToken(Cobol85Parser.NEXT, 0);
	};

	GROUP() {
	    return this.getToken(Cobol85Parser.GROUP, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	reportGroupNextGroupNextPage() {
	    return this.getTypedRuleContext(ReportGroupNextGroupNextPageContext,0);
	};

	reportGroupNextGroupPlus() {
	    return this.getTypedRuleContext(ReportGroupNextGroupPlusContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupNextGroupClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupNextGroupClause(this);
		}
	}


}



class ReportGroupNextGroupPlusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupNextGroupPlus;
    }

	PLUS() {
	    return this.getToken(Cobol85Parser.PLUS, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupNextGroupPlus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupNextGroupPlus(this);
		}
	}


}



class ReportGroupNextGroupNextPageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupNextGroupNextPage;
    }

	NEXT() {
	    return this.getToken(Cobol85Parser.NEXT, 0);
	};

	PAGE() {
	    return this.getToken(Cobol85Parser.PAGE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupNextGroupNextPage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupNextGroupNextPage(this);
		}
	}


}



class ReportGroupPictureClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupPictureClause;
    }

	pictureString() {
	    return this.getTypedRuleContext(PictureStringContext,0);
	};

	PICTURE() {
	    return this.getToken(Cobol85Parser.PICTURE, 0);
	};

	PIC() {
	    return this.getToken(Cobol85Parser.PIC, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupPictureClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupPictureClause(this);
		}
	}


}



class ReportGroupResetClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupResetClause;
    }

	RESET() {
	    return this.getToken(Cobol85Parser.RESET, 0);
	};

	FINAL() {
	    return this.getToken(Cobol85Parser.FINAL, 0);
	};

	dataName() {
	    return this.getTypedRuleContext(DataNameContext,0);
	};

	ON() {
	    return this.getToken(Cobol85Parser.ON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupResetClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupResetClause(this);
		}
	}


}



class ReportGroupSignClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupSignClause;
    }

	SIGN() {
	    return this.getToken(Cobol85Parser.SIGN, 0);
	};

	SEPARATE() {
	    return this.getToken(Cobol85Parser.SEPARATE, 0);
	};

	LEADING() {
	    return this.getToken(Cobol85Parser.LEADING, 0);
	};

	TRAILING() {
	    return this.getToken(Cobol85Parser.TRAILING, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	CHARACTER() {
	    return this.getToken(Cobol85Parser.CHARACTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupSignClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupSignClause(this);
		}
	}


}



class ReportGroupSourceClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupSourceClause;
    }

	SOURCE() {
	    return this.getToken(Cobol85Parser.SOURCE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupSourceClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupSourceClause(this);
		}
	}


}



class ReportGroupSumClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupSumClause;
    }

	SUM() {
	    return this.getToken(Cobol85Parser.SUM, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	UPON() {
	    return this.getToken(Cobol85Parser.UPON, 0);
	};

	dataName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataNameContext);
	    } else {
	        return this.getTypedRuleContext(DataNameContext,i);
	    }
	};

	COMMACHAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.COMMACHAR);
	    } else {
	        return this.getToken(Cobol85Parser.COMMACHAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupSumClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupSumClause(this);
		}
	}


}



class ReportGroupTypeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupTypeClause;
    }

	TYPE() {
	    return this.getToken(Cobol85Parser.TYPE, 0);
	};

	reportGroupTypeReportHeading() {
	    return this.getTypedRuleContext(ReportGroupTypeReportHeadingContext,0);
	};

	reportGroupTypePageHeading() {
	    return this.getTypedRuleContext(ReportGroupTypePageHeadingContext,0);
	};

	reportGroupTypeControlHeading() {
	    return this.getTypedRuleContext(ReportGroupTypeControlHeadingContext,0);
	};

	reportGroupTypeDetail() {
	    return this.getTypedRuleContext(ReportGroupTypeDetailContext,0);
	};

	reportGroupTypeControlFooting() {
	    return this.getTypedRuleContext(ReportGroupTypeControlFootingContext,0);
	};

	reportGroupTypePageFooting() {
	    return this.getTypedRuleContext(ReportGroupTypePageFootingContext,0);
	};

	reportGroupTypeReportFooting() {
	    return this.getTypedRuleContext(ReportGroupTypeReportFootingContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupTypeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupTypeClause(this);
		}
	}


}



class ReportGroupTypeReportHeadingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupTypeReportHeading;
    }

	REPORT() {
	    return this.getToken(Cobol85Parser.REPORT, 0);
	};

	HEADING() {
	    return this.getToken(Cobol85Parser.HEADING, 0);
	};

	RH() {
	    return this.getToken(Cobol85Parser.RH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupTypeReportHeading(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupTypeReportHeading(this);
		}
	}


}



class ReportGroupTypePageHeadingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupTypePageHeading;
    }

	PAGE() {
	    return this.getToken(Cobol85Parser.PAGE, 0);
	};

	HEADING() {
	    return this.getToken(Cobol85Parser.HEADING, 0);
	};

	PH() {
	    return this.getToken(Cobol85Parser.PH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupTypePageHeading(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupTypePageHeading(this);
		}
	}


}



class ReportGroupTypeControlHeadingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupTypeControlHeading;
    }

	CONTROL() {
	    return this.getToken(Cobol85Parser.CONTROL, 0);
	};

	HEADING() {
	    return this.getToken(Cobol85Parser.HEADING, 0);
	};

	CH() {
	    return this.getToken(Cobol85Parser.CH, 0);
	};

	FINAL() {
	    return this.getToken(Cobol85Parser.FINAL, 0);
	};

	dataName() {
	    return this.getTypedRuleContext(DataNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupTypeControlHeading(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupTypeControlHeading(this);
		}
	}


}



class ReportGroupTypeDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupTypeDetail;
    }

	DETAIL() {
	    return this.getToken(Cobol85Parser.DETAIL, 0);
	};

	DE() {
	    return this.getToken(Cobol85Parser.DE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupTypeDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupTypeDetail(this);
		}
	}


}



class ReportGroupTypeControlFootingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupTypeControlFooting;
    }

	CONTROL() {
	    return this.getToken(Cobol85Parser.CONTROL, 0);
	};

	FOOTING() {
	    return this.getToken(Cobol85Parser.FOOTING, 0);
	};

	CF() {
	    return this.getToken(Cobol85Parser.CF, 0);
	};

	FINAL() {
	    return this.getToken(Cobol85Parser.FINAL, 0);
	};

	dataName() {
	    return this.getTypedRuleContext(DataNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupTypeControlFooting(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupTypeControlFooting(this);
		}
	}


}



class ReportGroupUsageClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupUsageClause;
    }

	DISPLAY() {
	    return this.getToken(Cobol85Parser.DISPLAY, 0);
	};

	DISPLAY_1() {
	    return this.getToken(Cobol85Parser.DISPLAY_1, 0);
	};

	USAGE() {
	    return this.getToken(Cobol85Parser.USAGE, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupUsageClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupUsageClause(this);
		}
	}


}



class ReportGroupTypePageFootingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupTypePageFooting;
    }

	PAGE() {
	    return this.getToken(Cobol85Parser.PAGE, 0);
	};

	FOOTING() {
	    return this.getToken(Cobol85Parser.FOOTING, 0);
	};

	PF() {
	    return this.getToken(Cobol85Parser.PF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupTypePageFooting(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupTypePageFooting(this);
		}
	}


}



class ReportGroupTypeReportFootingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupTypeReportFooting;
    }

	REPORT() {
	    return this.getToken(Cobol85Parser.REPORT, 0);
	};

	FOOTING() {
	    return this.getToken(Cobol85Parser.FOOTING, 0);
	};

	RF() {
	    return this.getToken(Cobol85Parser.RF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupTypeReportFooting(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupTypeReportFooting(this);
		}
	}


}



class ReportGroupValueClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportGroupValueClause;
    }

	VALUE() {
	    return this.getToken(Cobol85Parser.VALUE, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportGroupValueClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportGroupValueClause(this);
		}
	}


}



class ProgramLibrarySectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_programLibrarySection;
    }

	PROGRAM_LIBRARY() {
	    return this.getToken(Cobol85Parser.PROGRAM_LIBRARY, 0);
	};

	SECTION() {
	    return this.getToken(Cobol85Parser.SECTION, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	libraryDescriptionEntry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LibraryDescriptionEntryContext);
	    } else {
	        return this.getTypedRuleContext(LibraryDescriptionEntryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterProgramLibrarySection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitProgramLibrarySection(this);
		}
	}


}



class LibraryDescriptionEntryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_libraryDescriptionEntry;
    }

	libraryDescriptionEntryFormat1() {
	    return this.getTypedRuleContext(LibraryDescriptionEntryFormat1Context,0);
	};

	libraryDescriptionEntryFormat2() {
	    return this.getTypedRuleContext(LibraryDescriptionEntryFormat2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLibraryDescriptionEntry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLibraryDescriptionEntry(this);
		}
	}


}



class LibraryDescriptionEntryFormat1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_libraryDescriptionEntryFormat1;
    }

	LD() {
	    return this.getToken(Cobol85Parser.LD, 0);
	};

	libraryName() {
	    return this.getTypedRuleContext(LibraryNameContext,0);
	};

	EXPORT() {
	    return this.getToken(Cobol85Parser.EXPORT, 0);
	};

	libraryAttributeClauseFormat1() {
	    return this.getTypedRuleContext(LibraryAttributeClauseFormat1Context,0);
	};

	libraryEntryProcedureClauseFormat1() {
	    return this.getTypedRuleContext(LibraryEntryProcedureClauseFormat1Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLibraryDescriptionEntryFormat1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLibraryDescriptionEntryFormat1(this);
		}
	}


}



class LibraryDescriptionEntryFormat2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_libraryDescriptionEntryFormat2;
    }

	LB() {
	    return this.getToken(Cobol85Parser.LB, 0);
	};

	libraryName() {
	    return this.getTypedRuleContext(LibraryNameContext,0);
	};

	IMPORT() {
	    return this.getToken(Cobol85Parser.IMPORT, 0);
	};

	libraryIsGlobalClause() {
	    return this.getTypedRuleContext(LibraryIsGlobalClauseContext,0);
	};

	libraryIsCommonClause() {
	    return this.getTypedRuleContext(LibraryIsCommonClauseContext,0);
	};

	libraryAttributeClauseFormat2 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LibraryAttributeClauseFormat2Context);
	    } else {
	        return this.getTypedRuleContext(LibraryAttributeClauseFormat2Context,i);
	    }
	};

	libraryEntryProcedureClauseFormat2 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LibraryEntryProcedureClauseFormat2Context);
	    } else {
	        return this.getTypedRuleContext(LibraryEntryProcedureClauseFormat2Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLibraryDescriptionEntryFormat2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLibraryDescriptionEntryFormat2(this);
		}
	}


}



class LibraryAttributeClauseFormat1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_libraryAttributeClauseFormat1;
    }

	ATTRIBUTE() {
	    return this.getToken(Cobol85Parser.ATTRIBUTE, 0);
	};

	SHARING() {
	    return this.getToken(Cobol85Parser.SHARING, 0);
	};

	DONTCARE() {
	    return this.getToken(Cobol85Parser.DONTCARE, 0);
	};

	PRIVATE() {
	    return this.getToken(Cobol85Parser.PRIVATE, 0);
	};

	SHAREDBYRUNUNIT() {
	    return this.getToken(Cobol85Parser.SHAREDBYRUNUNIT, 0);
	};

	SHAREDBYALL() {
	    return this.getToken(Cobol85Parser.SHAREDBYALL, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLibraryAttributeClauseFormat1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLibraryAttributeClauseFormat1(this);
		}
	}


}



class LibraryAttributeClauseFormat2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_libraryAttributeClauseFormat2;
    }

	ATTRIBUTE() {
	    return this.getToken(Cobol85Parser.ATTRIBUTE, 0);
	};

	libraryAttributeFunction() {
	    return this.getTypedRuleContext(LibraryAttributeFunctionContext,0);
	};

	LIBACCESS() {
	    return this.getToken(Cobol85Parser.LIBACCESS, 0);
	};

	libraryAttributeParameter() {
	    return this.getTypedRuleContext(LibraryAttributeParameterContext,0);
	};

	libraryAttributeTitle() {
	    return this.getTypedRuleContext(LibraryAttributeTitleContext,0);
	};

	BYFUNCTION() {
	    return this.getToken(Cobol85Parser.BYFUNCTION, 0);
	};

	BYTITLE() {
	    return this.getToken(Cobol85Parser.BYTITLE, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLibraryAttributeClauseFormat2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLibraryAttributeClauseFormat2(this);
		}
	}


}



class LibraryAttributeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_libraryAttributeFunction;
    }

	FUNCTIONNAME() {
	    return this.getToken(Cobol85Parser.FUNCTIONNAME, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLibraryAttributeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLibraryAttributeFunction(this);
		}
	}


}



class LibraryAttributeParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_libraryAttributeParameter;
    }

	LIBPARAMETER() {
	    return this.getToken(Cobol85Parser.LIBPARAMETER, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLibraryAttributeParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLibraryAttributeParameter(this);
		}
	}


}



class LibraryAttributeTitleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_libraryAttributeTitle;
    }

	TITLE() {
	    return this.getToken(Cobol85Parser.TITLE, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLibraryAttributeTitle(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLibraryAttributeTitle(this);
		}
	}


}



class LibraryEntryProcedureClauseFormat1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_libraryEntryProcedureClauseFormat1;
    }

	ENTRY_PROCEDURE() {
	    return this.getToken(Cobol85Parser.ENTRY_PROCEDURE, 0);
	};

	programName() {
	    return this.getTypedRuleContext(ProgramNameContext,0);
	};

	libraryEntryProcedureForClause() {
	    return this.getTypedRuleContext(LibraryEntryProcedureForClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLibraryEntryProcedureClauseFormat1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLibraryEntryProcedureClauseFormat1(this);
		}
	}


}



class LibraryEntryProcedureClauseFormat2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_libraryEntryProcedureClauseFormat2;
    }

	ENTRY_PROCEDURE() {
	    return this.getToken(Cobol85Parser.ENTRY_PROCEDURE, 0);
	};

	programName() {
	    return this.getTypedRuleContext(ProgramNameContext,0);
	};

	libraryEntryProcedureForClause() {
	    return this.getTypedRuleContext(LibraryEntryProcedureForClauseContext,0);
	};

	libraryEntryProcedureWithClause() {
	    return this.getTypedRuleContext(LibraryEntryProcedureWithClauseContext,0);
	};

	libraryEntryProcedureUsingClause() {
	    return this.getTypedRuleContext(LibraryEntryProcedureUsingClauseContext,0);
	};

	libraryEntryProcedureGivingClause() {
	    return this.getTypedRuleContext(LibraryEntryProcedureGivingClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLibraryEntryProcedureClauseFormat2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLibraryEntryProcedureClauseFormat2(this);
		}
	}


}



class LibraryEntryProcedureForClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_libraryEntryProcedureForClause;
    }

	FOR() {
	    return this.getToken(Cobol85Parser.FOR, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLibraryEntryProcedureForClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLibraryEntryProcedureForClause(this);
		}
	}


}



class LibraryEntryProcedureGivingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_libraryEntryProcedureGivingClause;
    }

	GIVING() {
	    return this.getToken(Cobol85Parser.GIVING, 0);
	};

	dataName() {
	    return this.getTypedRuleContext(DataNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLibraryEntryProcedureGivingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLibraryEntryProcedureGivingClause(this);
		}
	}


}



class LibraryEntryProcedureUsingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_libraryEntryProcedureUsingClause;
    }

	USING() {
	    return this.getToken(Cobol85Parser.USING, 0);
	};

	libraryEntryProcedureUsingName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LibraryEntryProcedureUsingNameContext);
	    } else {
	        return this.getTypedRuleContext(LibraryEntryProcedureUsingNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLibraryEntryProcedureUsingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLibraryEntryProcedureUsingClause(this);
		}
	}


}



class LibraryEntryProcedureUsingNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_libraryEntryProcedureUsingName;
    }

	dataName() {
	    return this.getTypedRuleContext(DataNameContext,0);
	};

	fileName() {
	    return this.getTypedRuleContext(FileNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLibraryEntryProcedureUsingName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLibraryEntryProcedureUsingName(this);
		}
	}


}



class LibraryEntryProcedureWithClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_libraryEntryProcedureWithClause;
    }

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	libraryEntryProcedureWithName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LibraryEntryProcedureWithNameContext);
	    } else {
	        return this.getTypedRuleContext(LibraryEntryProcedureWithNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLibraryEntryProcedureWithClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLibraryEntryProcedureWithClause(this);
		}
	}


}



class LibraryEntryProcedureWithNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_libraryEntryProcedureWithName;
    }

	localName() {
	    return this.getTypedRuleContext(LocalNameContext,0);
	};

	fileName() {
	    return this.getTypedRuleContext(FileNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLibraryEntryProcedureWithName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLibraryEntryProcedureWithName(this);
		}
	}


}



class LibraryIsCommonClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_libraryIsCommonClause;
    }

	COMMON() {
	    return this.getToken(Cobol85Parser.COMMON, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLibraryIsCommonClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLibraryIsCommonClause(this);
		}
	}


}



class LibraryIsGlobalClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_libraryIsGlobalClause;
    }

	GLOBAL() {
	    return this.getToken(Cobol85Parser.GLOBAL, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLibraryIsGlobalClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLibraryIsGlobalClause(this);
		}
	}


}



class DataDescriptionEntryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataDescriptionEntry;
    }

	dataDescriptionEntryFormat1() {
	    return this.getTypedRuleContext(DataDescriptionEntryFormat1Context,0);
	};

	dataDescriptionEntryFormat2() {
	    return this.getTypedRuleContext(DataDescriptionEntryFormat2Context,0);
	};

	dataDescriptionEntryFormat3() {
	    return this.getTypedRuleContext(DataDescriptionEntryFormat3Context,0);
	};

	dataDescriptionEntryExecSql() {
	    return this.getTypedRuleContext(DataDescriptionEntryExecSqlContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataDescriptionEntry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataDescriptionEntry(this);
		}
	}


}



class DataDescriptionEntryFormat1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataDescriptionEntryFormat1;
    }

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	INTEGERLITERAL() {
	    return this.getToken(Cobol85Parser.INTEGERLITERAL, 0);
	};

	LEVEL_NUMBER_77() {
	    return this.getToken(Cobol85Parser.LEVEL_NUMBER_77, 0);
	};

	FILLER() {
	    return this.getToken(Cobol85Parser.FILLER, 0);
	};

	dataName() {
	    return this.getTypedRuleContext(DataNameContext,0);
	};

	dataRedefinesClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataRedefinesClauseContext);
	    } else {
	        return this.getTypedRuleContext(DataRedefinesClauseContext,i);
	    }
	};

	dataIntegerStringClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataIntegerStringClauseContext);
	    } else {
	        return this.getTypedRuleContext(DataIntegerStringClauseContext,i);
	    }
	};

	dataExternalClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataExternalClauseContext);
	    } else {
	        return this.getTypedRuleContext(DataExternalClauseContext,i);
	    }
	};

	dataGlobalClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataGlobalClauseContext);
	    } else {
	        return this.getTypedRuleContext(DataGlobalClauseContext,i);
	    }
	};

	dataTypeDefClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataTypeDefClauseContext);
	    } else {
	        return this.getTypedRuleContext(DataTypeDefClauseContext,i);
	    }
	};

	dataThreadLocalClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataThreadLocalClauseContext);
	    } else {
	        return this.getTypedRuleContext(DataThreadLocalClauseContext,i);
	    }
	};

	dataPictureClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataPictureClauseContext);
	    } else {
	        return this.getTypedRuleContext(DataPictureClauseContext,i);
	    }
	};

	dataCommonOwnLocalClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataCommonOwnLocalClauseContext);
	    } else {
	        return this.getTypedRuleContext(DataCommonOwnLocalClauseContext,i);
	    }
	};

	dataTypeClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataTypeClauseContext);
	    } else {
	        return this.getTypedRuleContext(DataTypeClauseContext,i);
	    }
	};

	dataUsingClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataUsingClauseContext);
	    } else {
	        return this.getTypedRuleContext(DataUsingClauseContext,i);
	    }
	};

	dataUsageClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataUsageClauseContext);
	    } else {
	        return this.getTypedRuleContext(DataUsageClauseContext,i);
	    }
	};

	dataValueClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataValueClauseContext);
	    } else {
	        return this.getTypedRuleContext(DataValueClauseContext,i);
	    }
	};

	dataReceivedByClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataReceivedByClauseContext);
	    } else {
	        return this.getTypedRuleContext(DataReceivedByClauseContext,i);
	    }
	};

	dataOccursClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataOccursClauseContext);
	    } else {
	        return this.getTypedRuleContext(DataOccursClauseContext,i);
	    }
	};

	dataSignClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataSignClauseContext);
	    } else {
	        return this.getTypedRuleContext(DataSignClauseContext,i);
	    }
	};

	dataSynchronizedClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataSynchronizedClauseContext);
	    } else {
	        return this.getTypedRuleContext(DataSynchronizedClauseContext,i);
	    }
	};

	dataJustifiedClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataJustifiedClauseContext);
	    } else {
	        return this.getTypedRuleContext(DataJustifiedClauseContext,i);
	    }
	};

	dataBlankWhenZeroClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataBlankWhenZeroClauseContext);
	    } else {
	        return this.getTypedRuleContext(DataBlankWhenZeroClauseContext,i);
	    }
	};

	dataWithLowerBoundsClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataWithLowerBoundsClauseContext);
	    } else {
	        return this.getTypedRuleContext(DataWithLowerBoundsClauseContext,i);
	    }
	};

	dataAlignedClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataAlignedClauseContext);
	    } else {
	        return this.getTypedRuleContext(DataAlignedClauseContext,i);
	    }
	};

	dataRecordAreaClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataRecordAreaClauseContext);
	    } else {
	        return this.getTypedRuleContext(DataRecordAreaClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataDescriptionEntryFormat1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataDescriptionEntryFormat1(this);
		}
	}


}



class DataDescriptionEntryFormat2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataDescriptionEntryFormat2;
    }

	LEVEL_NUMBER_66() {
	    return this.getToken(Cobol85Parser.LEVEL_NUMBER_66, 0);
	};

	dataName() {
	    return this.getTypedRuleContext(DataNameContext,0);
	};

	dataRenamesClause() {
	    return this.getTypedRuleContext(DataRenamesClauseContext,0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataDescriptionEntryFormat2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataDescriptionEntryFormat2(this);
		}
	}


}



class DataDescriptionEntryFormat3Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataDescriptionEntryFormat3;
    }

	LEVEL_NUMBER_88() {
	    return this.getToken(Cobol85Parser.LEVEL_NUMBER_88, 0);
	};

	conditionName() {
	    return this.getTypedRuleContext(ConditionNameContext,0);
	};

	dataValueClause() {
	    return this.getTypedRuleContext(DataValueClauseContext,0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataDescriptionEntryFormat3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataDescriptionEntryFormat3(this);
		}
	}


}



class DataDescriptionEntryExecSqlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataDescriptionEntryExecSql;
    }

	EXECSQLLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.EXECSQLLINE);
	    } else {
	        return this.getToken(Cobol85Parser.EXECSQLLINE, i);
	    }
	};


	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataDescriptionEntryExecSql(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataDescriptionEntryExecSql(this);
		}
	}


}



class DataAlignedClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataAlignedClause;
    }

	ALIGNED() {
	    return this.getToken(Cobol85Parser.ALIGNED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataAlignedClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataAlignedClause(this);
		}
	}


}



class DataBlankWhenZeroClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataBlankWhenZeroClause;
    }

	BLANK() {
	    return this.getToken(Cobol85Parser.BLANK, 0);
	};

	ZERO() {
	    return this.getToken(Cobol85Parser.ZERO, 0);
	};

	ZEROS() {
	    return this.getToken(Cobol85Parser.ZEROS, 0);
	};

	ZEROES() {
	    return this.getToken(Cobol85Parser.ZEROES, 0);
	};

	WHEN() {
	    return this.getToken(Cobol85Parser.WHEN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataBlankWhenZeroClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataBlankWhenZeroClause(this);
		}
	}


}



class DataCommonOwnLocalClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataCommonOwnLocalClause;
    }

	COMMON() {
	    return this.getToken(Cobol85Parser.COMMON, 0);
	};

	OWN() {
	    return this.getToken(Cobol85Parser.OWN, 0);
	};

	LOCAL() {
	    return this.getToken(Cobol85Parser.LOCAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataCommonOwnLocalClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataCommonOwnLocalClause(this);
		}
	}


}



class DataExternalClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataExternalClause;
    }

	EXTERNAL() {
	    return this.getToken(Cobol85Parser.EXTERNAL, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	BY() {
	    return this.getToken(Cobol85Parser.BY, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataExternalClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataExternalClause(this);
		}
	}


}



class DataGlobalClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataGlobalClause;
    }

	GLOBAL() {
	    return this.getToken(Cobol85Parser.GLOBAL, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataGlobalClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataGlobalClause(this);
		}
	}


}



class DataIntegerStringClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataIntegerStringClause;
    }

	INTEGER() {
	    return this.getToken(Cobol85Parser.INTEGER, 0);
	};

	STRING() {
	    return this.getToken(Cobol85Parser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataIntegerStringClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataIntegerStringClause(this);
		}
	}


}



class DataJustifiedClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataJustifiedClause;
    }

	JUSTIFIED() {
	    return this.getToken(Cobol85Parser.JUSTIFIED, 0);
	};

	JUST() {
	    return this.getToken(Cobol85Parser.JUST, 0);
	};

	RIGHT() {
	    return this.getToken(Cobol85Parser.RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataJustifiedClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataJustifiedClause(this);
		}
	}


}



class DataOccursClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataOccursClause;
    }

	OCCURS() {
	    return this.getToken(Cobol85Parser.OCCURS, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	dataOccursTo() {
	    return this.getTypedRuleContext(DataOccursToContext,0);
	};

	TIMES() {
	    return this.getToken(Cobol85Parser.TIMES, 0);
	};

	DEPENDING() {
	    return this.getToken(Cobol85Parser.DEPENDING, 0);
	};

	qualifiedDataName() {
	    return this.getTypedRuleContext(QualifiedDataNameContext,0);
	};

	dataOccursSort = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataOccursSortContext);
	    } else {
	        return this.getTypedRuleContext(DataOccursSortContext,i);
	    }
	};

	INDEXED() {
	    return this.getToken(Cobol85Parser.INDEXED, 0);
	};

	ON() {
	    return this.getToken(Cobol85Parser.ON, 0);
	};

	BY() {
	    return this.getToken(Cobol85Parser.BY, 0);
	};

	LOCAL() {
	    return this.getToken(Cobol85Parser.LOCAL, 0);
	};

	indexName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexNameContext);
	    } else {
	        return this.getTypedRuleContext(IndexNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataOccursClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataOccursClause(this);
		}
	}


}



class DataOccursToContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataOccursTo;
    }

	TO() {
	    return this.getToken(Cobol85Parser.TO, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataOccursTo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataOccursTo(this);
		}
	}


}



class DataOccursSortContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataOccursSort;
    }

	ASCENDING() {
	    return this.getToken(Cobol85Parser.ASCENDING, 0);
	};

	DESCENDING() {
	    return this.getToken(Cobol85Parser.DESCENDING, 0);
	};

	KEY() {
	    return this.getToken(Cobol85Parser.KEY, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	qualifiedDataName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedDataNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedDataNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataOccursSort(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataOccursSort(this);
		}
	}


}



class DataPictureClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataPictureClause;
    }

	pictureString() {
	    return this.getTypedRuleContext(PictureStringContext,0);
	};

	PICTURE() {
	    return this.getToken(Cobol85Parser.PICTURE, 0);
	};

	PIC() {
	    return this.getToken(Cobol85Parser.PIC, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataPictureClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataPictureClause(this);
		}
	}


}



class PictureStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_pictureString;
    }

	pictureChars = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PictureCharsContext);
	    } else {
	        return this.getTypedRuleContext(PictureCharsContext,i);
	    }
	};

	pictureCardinality = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PictureCardinalityContext);
	    } else {
	        return this.getTypedRuleContext(PictureCardinalityContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterPictureString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitPictureString(this);
		}
	}


}



class PictureCharsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_pictureChars;
    }

	DOLLARCHAR() {
	    return this.getToken(Cobol85Parser.DOLLARCHAR, 0);
	};

	IDENTIFIER() {
	    return this.getToken(Cobol85Parser.IDENTIFIER, 0);
	};

	NUMERICLITERAL() {
	    return this.getToken(Cobol85Parser.NUMERICLITERAL, 0);
	};

	SLASHCHAR() {
	    return this.getToken(Cobol85Parser.SLASHCHAR, 0);
	};

	COMMACHAR() {
	    return this.getToken(Cobol85Parser.COMMACHAR, 0);
	};

	DOT() {
	    return this.getToken(Cobol85Parser.DOT, 0);
	};

	COLONCHAR() {
	    return this.getToken(Cobol85Parser.COLONCHAR, 0);
	};

	ASTERISKCHAR() {
	    return this.getToken(Cobol85Parser.ASTERISKCHAR, 0);
	};

	DOUBLEASTERISKCHAR() {
	    return this.getToken(Cobol85Parser.DOUBLEASTERISKCHAR, 0);
	};

	LPARENCHAR() {
	    return this.getToken(Cobol85Parser.LPARENCHAR, 0);
	};

	RPARENCHAR() {
	    return this.getToken(Cobol85Parser.RPARENCHAR, 0);
	};

	PLUSCHAR() {
	    return this.getToken(Cobol85Parser.PLUSCHAR, 0);
	};

	MINUSCHAR() {
	    return this.getToken(Cobol85Parser.MINUSCHAR, 0);
	};

	LESSTHANCHAR() {
	    return this.getToken(Cobol85Parser.LESSTHANCHAR, 0);
	};

	MORETHANCHAR() {
	    return this.getToken(Cobol85Parser.MORETHANCHAR, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterPictureChars(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitPictureChars(this);
		}
	}


}



class PictureCardinalityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_pictureCardinality;
    }

	LPARENCHAR() {
	    return this.getToken(Cobol85Parser.LPARENCHAR, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	RPARENCHAR() {
	    return this.getToken(Cobol85Parser.RPARENCHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterPictureCardinality(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitPictureCardinality(this);
		}
	}


}



class DataReceivedByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataReceivedByClause;
    }

	CONTENT() {
	    return this.getToken(Cobol85Parser.CONTENT, 0);
	};

	REFERENCE() {
	    return this.getToken(Cobol85Parser.REFERENCE, 0);
	};

	REF() {
	    return this.getToken(Cobol85Parser.REF, 0);
	};

	RECEIVED() {
	    return this.getToken(Cobol85Parser.RECEIVED, 0);
	};

	BY() {
	    return this.getToken(Cobol85Parser.BY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataReceivedByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataReceivedByClause(this);
		}
	}


}



class DataRecordAreaClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataRecordAreaClause;
    }

	RECORD() {
	    return this.getToken(Cobol85Parser.RECORD, 0);
	};

	AREA() {
	    return this.getToken(Cobol85Parser.AREA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataRecordAreaClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataRecordAreaClause(this);
		}
	}


}



class DataRedefinesClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataRedefinesClause;
    }

	REDEFINES() {
	    return this.getToken(Cobol85Parser.REDEFINES, 0);
	};

	dataName() {
	    return this.getTypedRuleContext(DataNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataRedefinesClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataRedefinesClause(this);
		}
	}


}



class DataRenamesClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataRenamesClause;
    }

	RENAMES() {
	    return this.getToken(Cobol85Parser.RENAMES, 0);
	};

	qualifiedDataName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedDataNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedDataNameContext,i);
	    }
	};

	THROUGH() {
	    return this.getToken(Cobol85Parser.THROUGH, 0);
	};

	THRU() {
	    return this.getToken(Cobol85Parser.THRU, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataRenamesClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataRenamesClause(this);
		}
	}


}



class DataSignClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataSignClause;
    }

	LEADING() {
	    return this.getToken(Cobol85Parser.LEADING, 0);
	};

	TRAILING() {
	    return this.getToken(Cobol85Parser.TRAILING, 0);
	};

	SIGN() {
	    return this.getToken(Cobol85Parser.SIGN, 0);
	};

	SEPARATE() {
	    return this.getToken(Cobol85Parser.SEPARATE, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	CHARACTER() {
	    return this.getToken(Cobol85Parser.CHARACTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataSignClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataSignClause(this);
		}
	}


}



class DataSynchronizedClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataSynchronizedClause;
    }

	SYNCHRONIZED() {
	    return this.getToken(Cobol85Parser.SYNCHRONIZED, 0);
	};

	SYNC() {
	    return this.getToken(Cobol85Parser.SYNC, 0);
	};

	LEFT() {
	    return this.getToken(Cobol85Parser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(Cobol85Parser.RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataSynchronizedClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataSynchronizedClause(this);
		}
	}


}



class DataThreadLocalClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataThreadLocalClause;
    }

	THREAD_LOCAL() {
	    return this.getToken(Cobol85Parser.THREAD_LOCAL, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataThreadLocalClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataThreadLocalClause(this);
		}
	}


}



class DataTypeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataTypeClause;
    }

	TYPE() {
	    return this.getToken(Cobol85Parser.TYPE, 0);
	};

	SHORT_DATE() {
	    return this.getToken(Cobol85Parser.SHORT_DATE, 0);
	};

	LONG_DATE() {
	    return this.getToken(Cobol85Parser.LONG_DATE, 0);
	};

	NUMERIC_DATE() {
	    return this.getToken(Cobol85Parser.NUMERIC_DATE, 0);
	};

	NUMERIC_TIME() {
	    return this.getToken(Cobol85Parser.NUMERIC_TIME, 0);
	};

	LONG_TIME() {
	    return this.getToken(Cobol85Parser.LONG_TIME, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataTypeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataTypeClause(this);
		}
	}


}



class DataTypeDefClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataTypeDefClause;
    }

	TYPEDEF() {
	    return this.getToken(Cobol85Parser.TYPEDEF, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataTypeDefClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataTypeDefClause(this);
		}
	}


}



class DataUsageClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataUsageClause;
    }

	BINARY() {
	    return this.getToken(Cobol85Parser.BINARY, 0);
	};

	BIT() {
	    return this.getToken(Cobol85Parser.BIT, 0);
	};

	COMP() {
	    return this.getToken(Cobol85Parser.COMP, 0);
	};

	COMP_1() {
	    return this.getToken(Cobol85Parser.COMP_1, 0);
	};

	COMP_2() {
	    return this.getToken(Cobol85Parser.COMP_2, 0);
	};

	COMP_3() {
	    return this.getToken(Cobol85Parser.COMP_3, 0);
	};

	COMP_4() {
	    return this.getToken(Cobol85Parser.COMP_4, 0);
	};

	COMP_5() {
	    return this.getToken(Cobol85Parser.COMP_5, 0);
	};

	COMPUTATIONAL() {
	    return this.getToken(Cobol85Parser.COMPUTATIONAL, 0);
	};

	COMPUTATIONAL_1() {
	    return this.getToken(Cobol85Parser.COMPUTATIONAL_1, 0);
	};

	COMPUTATIONAL_2() {
	    return this.getToken(Cobol85Parser.COMPUTATIONAL_2, 0);
	};

	COMPUTATIONAL_3() {
	    return this.getToken(Cobol85Parser.COMPUTATIONAL_3, 0);
	};

	COMPUTATIONAL_4() {
	    return this.getToken(Cobol85Parser.COMPUTATIONAL_4, 0);
	};

	COMPUTATIONAL_5() {
	    return this.getToken(Cobol85Parser.COMPUTATIONAL_5, 0);
	};

	CONTROL_POINT() {
	    return this.getToken(Cobol85Parser.CONTROL_POINT, 0);
	};

	DATE() {
	    return this.getToken(Cobol85Parser.DATE, 0);
	};

	DISPLAY() {
	    return this.getToken(Cobol85Parser.DISPLAY, 0);
	};

	DISPLAY_1() {
	    return this.getToken(Cobol85Parser.DISPLAY_1, 0);
	};

	DOUBLE() {
	    return this.getToken(Cobol85Parser.DOUBLE, 0);
	};

	EVENT() {
	    return this.getToken(Cobol85Parser.EVENT, 0);
	};

	FUNCTION_POINTER() {
	    return this.getToken(Cobol85Parser.FUNCTION_POINTER, 0);
	};

	INDEX() {
	    return this.getToken(Cobol85Parser.INDEX, 0);
	};

	KANJI() {
	    return this.getToken(Cobol85Parser.KANJI, 0);
	};

	LOCK() {
	    return this.getToken(Cobol85Parser.LOCK, 0);
	};

	NATIONAL() {
	    return this.getToken(Cobol85Parser.NATIONAL, 0);
	};

	PACKED_DECIMAL() {
	    return this.getToken(Cobol85Parser.PACKED_DECIMAL, 0);
	};

	POINTER() {
	    return this.getToken(Cobol85Parser.POINTER, 0);
	};

	PROCEDURE_POINTER() {
	    return this.getToken(Cobol85Parser.PROCEDURE_POINTER, 0);
	};

	REAL() {
	    return this.getToken(Cobol85Parser.REAL, 0);
	};

	TASK() {
	    return this.getToken(Cobol85Parser.TASK, 0);
	};

	USAGE() {
	    return this.getToken(Cobol85Parser.USAGE, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	TRUNCATED() {
	    return this.getToken(Cobol85Parser.TRUNCATED, 0);
	};

	EXTENDED() {
	    return this.getToken(Cobol85Parser.EXTENDED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataUsageClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataUsageClause(this);
		}
	}


}



class DataUsingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataUsingClause;
    }

	USING() {
	    return this.getToken(Cobol85Parser.USING, 0);
	};

	LANGUAGE() {
	    return this.getToken(Cobol85Parser.LANGUAGE, 0);
	};

	CONVENTION() {
	    return this.getToken(Cobol85Parser.CONVENTION, 0);
	};

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	dataName() {
	    return this.getTypedRuleContext(DataNameContext,0);
	};

	OF() {
	    return this.getToken(Cobol85Parser.OF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataUsingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataUsingClause(this);
		}
	}


}



class DataValueClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataValueClause;
    }

	dataValueInterval = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataValueIntervalContext);
	    } else {
	        return this.getTypedRuleContext(DataValueIntervalContext,i);
	    }
	};

	VALUE() {
	    return this.getToken(Cobol85Parser.VALUE, 0);
	};

	VALUES() {
	    return this.getToken(Cobol85Parser.VALUES, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	ARE() {
	    return this.getToken(Cobol85Parser.ARE, 0);
	};

	COMMACHAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.COMMACHAR);
	    } else {
	        return this.getToken(Cobol85Parser.COMMACHAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataValueClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataValueClause(this);
		}
	}


}



class DataValueIntervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataValueInterval;
    }

	dataValueIntervalFrom() {
	    return this.getTypedRuleContext(DataValueIntervalFromContext,0);
	};

	dataValueIntervalTo() {
	    return this.getTypedRuleContext(DataValueIntervalToContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataValueInterval(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataValueInterval(this);
		}
	}


}



class DataValueIntervalFromContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataValueIntervalFrom;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataValueIntervalFrom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataValueIntervalFrom(this);
		}
	}


}



class DataValueIntervalToContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataValueIntervalTo;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	THROUGH() {
	    return this.getToken(Cobol85Parser.THROUGH, 0);
	};

	THRU() {
	    return this.getToken(Cobol85Parser.THRU, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataValueIntervalTo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataValueIntervalTo(this);
		}
	}


}



class DataWithLowerBoundsClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataWithLowerBoundsClause;
    }

	LOWER() {
	    return this.getToken(Cobol85Parser.LOWER, 0);
	};

	BOUNDS() {
	    return this.getToken(Cobol85Parser.BOUNDS, 0);
	};

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataWithLowerBoundsClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataWithLowerBoundsClause(this);
		}
	}


}



class ProcedureDivisionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_procedureDivision;
    }

	PROCEDURE() {
	    return this.getToken(Cobol85Parser.PROCEDURE, 0);
	};

	DIVISION() {
	    return this.getToken(Cobol85Parser.DIVISION, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	procedureDivisionBody() {
	    return this.getTypedRuleContext(ProcedureDivisionBodyContext,0);
	};

	procedureDivisionUsingClause() {
	    return this.getTypedRuleContext(ProcedureDivisionUsingClauseContext,0);
	};

	procedureDivisionGivingClause() {
	    return this.getTypedRuleContext(ProcedureDivisionGivingClauseContext,0);
	};

	procedureDeclaratives() {
	    return this.getTypedRuleContext(ProcedureDeclarativesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterProcedureDivision(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitProcedureDivision(this);
		}
	}


}



class ProcedureDivisionUsingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_procedureDivisionUsingClause;
    }

	USING() {
	    return this.getToken(Cobol85Parser.USING, 0);
	};

	CHAINING() {
	    return this.getToken(Cobol85Parser.CHAINING, 0);
	};

	procedureDivisionUsingParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureDivisionUsingParameterContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureDivisionUsingParameterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterProcedureDivisionUsingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitProcedureDivisionUsingClause(this);
		}
	}


}



class ProcedureDivisionGivingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_procedureDivisionGivingClause;
    }

	dataName() {
	    return this.getTypedRuleContext(DataNameContext,0);
	};

	GIVING() {
	    return this.getToken(Cobol85Parser.GIVING, 0);
	};

	RETURNING() {
	    return this.getToken(Cobol85Parser.RETURNING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterProcedureDivisionGivingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitProcedureDivisionGivingClause(this);
		}
	}


}



class ProcedureDivisionUsingParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_procedureDivisionUsingParameter;
    }

	procedureDivisionByReferencePhrase() {
	    return this.getTypedRuleContext(ProcedureDivisionByReferencePhraseContext,0);
	};

	procedureDivisionByValuePhrase() {
	    return this.getTypedRuleContext(ProcedureDivisionByValuePhraseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterProcedureDivisionUsingParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitProcedureDivisionUsingParameter(this);
		}
	}


}



class ProcedureDivisionByReferencePhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_procedureDivisionByReferencePhrase;
    }

	REFERENCE() {
	    return this.getToken(Cobol85Parser.REFERENCE, 0);
	};

	procedureDivisionByReference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureDivisionByReferenceContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureDivisionByReferenceContext,i);
	    }
	};

	BY() {
	    return this.getToken(Cobol85Parser.BY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterProcedureDivisionByReferencePhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitProcedureDivisionByReferencePhrase(this);
		}
	}


}



class ProcedureDivisionByReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_procedureDivisionByReference;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	fileName() {
	    return this.getTypedRuleContext(FileNameContext,0);
	};

	OPTIONAL() {
	    return this.getToken(Cobol85Parser.OPTIONAL, 0);
	};

	ANY() {
	    return this.getToken(Cobol85Parser.ANY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterProcedureDivisionByReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitProcedureDivisionByReference(this);
		}
	}


}



class ProcedureDivisionByValuePhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_procedureDivisionByValuePhrase;
    }

	VALUE() {
	    return this.getToken(Cobol85Parser.VALUE, 0);
	};

	BY() {
	    return this.getToken(Cobol85Parser.BY, 0);
	};

	procedureDivisionByValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureDivisionByValueContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureDivisionByValueContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterProcedureDivisionByValuePhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitProcedureDivisionByValuePhrase(this);
		}
	}


}



class ProcedureDivisionByValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_procedureDivisionByValue;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	ANY() {
	    return this.getToken(Cobol85Parser.ANY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterProcedureDivisionByValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitProcedureDivisionByValue(this);
		}
	}


}



class ProcedureDeclarativesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_procedureDeclaratives;
    }

	DECLARATIVES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.DECLARATIVES);
	    } else {
	        return this.getToken(Cobol85Parser.DECLARATIVES, i);
	    }
	};


	DOT_FS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.DOT_FS);
	    } else {
	        return this.getToken(Cobol85Parser.DOT_FS, i);
	    }
	};


	END() {
	    return this.getToken(Cobol85Parser.END, 0);
	};

	procedureDeclarative = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureDeclarativeContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureDeclarativeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterProcedureDeclaratives(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitProcedureDeclaratives(this);
		}
	}


}



class ProcedureDeclarativeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_procedureDeclarative;
    }

	procedureSectionHeader() {
	    return this.getTypedRuleContext(ProcedureSectionHeaderContext,0);
	};

	DOT_FS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.DOT_FS);
	    } else {
	        return this.getToken(Cobol85Parser.DOT_FS, i);
	    }
	};


	useStatement() {
	    return this.getTypedRuleContext(UseStatementContext,0);
	};

	paragraphs() {
	    return this.getTypedRuleContext(ParagraphsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterProcedureDeclarative(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitProcedureDeclarative(this);
		}
	}


}



class ProcedureSectionHeaderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_procedureSectionHeader;
    }

	sectionName() {
	    return this.getTypedRuleContext(SectionNameContext,0);
	};

	SECTION() {
	    return this.getToken(Cobol85Parser.SECTION, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterProcedureSectionHeader(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitProcedureSectionHeader(this);
		}
	}


}



class ProcedureDivisionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_procedureDivisionBody;
    }

	paragraphs() {
	    return this.getTypedRuleContext(ParagraphsContext,0);
	};

	procedureSection = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSectionContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSectionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterProcedureDivisionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitProcedureDivisionBody(this);
		}
	}


}



class ProcedureSectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_procedureSection;
    }

	procedureSectionHeader() {
	    return this.getTypedRuleContext(ProcedureSectionHeaderContext,0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	paragraphs() {
	    return this.getTypedRuleContext(ParagraphsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterProcedureSection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitProcedureSection(this);
		}
	}


}



class ParagraphsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_paragraphs;
    }

	sentence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SentenceContext);
	    } else {
	        return this.getTypedRuleContext(SentenceContext,i);
	    }
	};

	paragraph = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParagraphContext);
	    } else {
	        return this.getTypedRuleContext(ParagraphContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterParagraphs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitParagraphs(this);
		}
	}


}



class ParagraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_paragraph;
    }

	paragraphName() {
	    return this.getTypedRuleContext(ParagraphNameContext,0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	alteredGoTo() {
	    return this.getTypedRuleContext(AlteredGoToContext,0);
	};

	sentence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SentenceContext);
	    } else {
	        return this.getTypedRuleContext(SentenceContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterParagraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitParagraph(this);
		}
	}


}



class SentenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sentence;
    }

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSentence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSentence(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_statement;
    }

	acceptStatement() {
	    return this.getTypedRuleContext(AcceptStatementContext,0);
	};

	addStatement() {
	    return this.getTypedRuleContext(AddStatementContext,0);
	};

	alterStatement() {
	    return this.getTypedRuleContext(AlterStatementContext,0);
	};

	callStatement() {
	    return this.getTypedRuleContext(CallStatementContext,0);
	};

	cancelStatement() {
	    return this.getTypedRuleContext(CancelStatementContext,0);
	};

	closeStatement() {
	    return this.getTypedRuleContext(CloseStatementContext,0);
	};

	computeStatement() {
	    return this.getTypedRuleContext(ComputeStatementContext,0);
	};

	continueStatement() {
	    return this.getTypedRuleContext(ContinueStatementContext,0);
	};

	deleteStatement() {
	    return this.getTypedRuleContext(DeleteStatementContext,0);
	};

	disableStatement() {
	    return this.getTypedRuleContext(DisableStatementContext,0);
	};

	displayStatement() {
	    return this.getTypedRuleContext(DisplayStatementContext,0);
	};

	divideStatement() {
	    return this.getTypedRuleContext(DivideStatementContext,0);
	};

	enableStatement() {
	    return this.getTypedRuleContext(EnableStatementContext,0);
	};

	entryStatement() {
	    return this.getTypedRuleContext(EntryStatementContext,0);
	};

	evaluateStatement() {
	    return this.getTypedRuleContext(EvaluateStatementContext,0);
	};

	exhibitStatement() {
	    return this.getTypedRuleContext(ExhibitStatementContext,0);
	};

	execCicsStatement() {
	    return this.getTypedRuleContext(ExecCicsStatementContext,0);
	};

	execSqlStatement() {
	    return this.getTypedRuleContext(ExecSqlStatementContext,0);
	};

	execSqlImsStatement() {
	    return this.getTypedRuleContext(ExecSqlImsStatementContext,0);
	};

	exitStatement() {
	    return this.getTypedRuleContext(ExitStatementContext,0);
	};

	generateStatement() {
	    return this.getTypedRuleContext(GenerateStatementContext,0);
	};

	gobackStatement() {
	    return this.getTypedRuleContext(GobackStatementContext,0);
	};

	goToStatement() {
	    return this.getTypedRuleContext(GoToStatementContext,0);
	};

	ifStatement() {
	    return this.getTypedRuleContext(IfStatementContext,0);
	};

	initializeStatement() {
	    return this.getTypedRuleContext(InitializeStatementContext,0);
	};

	initiateStatement() {
	    return this.getTypedRuleContext(InitiateStatementContext,0);
	};

	inspectStatement() {
	    return this.getTypedRuleContext(InspectStatementContext,0);
	};

	mergeStatement() {
	    return this.getTypedRuleContext(MergeStatementContext,0);
	};

	moveStatement() {
	    return this.getTypedRuleContext(MoveStatementContext,0);
	};

	multiplyStatement() {
	    return this.getTypedRuleContext(MultiplyStatementContext,0);
	};

	openStatement() {
	    return this.getTypedRuleContext(OpenStatementContext,0);
	};

	performStatement() {
	    return this.getTypedRuleContext(PerformStatementContext,0);
	};

	purgeStatement() {
	    return this.getTypedRuleContext(PurgeStatementContext,0);
	};

	readStatement() {
	    return this.getTypedRuleContext(ReadStatementContext,0);
	};

	receiveStatement() {
	    return this.getTypedRuleContext(ReceiveStatementContext,0);
	};

	releaseStatement() {
	    return this.getTypedRuleContext(ReleaseStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	rewriteStatement() {
	    return this.getTypedRuleContext(RewriteStatementContext,0);
	};

	searchStatement() {
	    return this.getTypedRuleContext(SearchStatementContext,0);
	};

	sendStatement() {
	    return this.getTypedRuleContext(SendStatementContext,0);
	};

	setStatement() {
	    return this.getTypedRuleContext(SetStatementContext,0);
	};

	sortStatement() {
	    return this.getTypedRuleContext(SortStatementContext,0);
	};

	startStatement() {
	    return this.getTypedRuleContext(StartStatementContext,0);
	};

	stopStatement() {
	    return this.getTypedRuleContext(StopStatementContext,0);
	};

	stringStatement() {
	    return this.getTypedRuleContext(StringStatementContext,0);
	};

	subtractStatement() {
	    return this.getTypedRuleContext(SubtractStatementContext,0);
	};

	terminateStatement() {
	    return this.getTypedRuleContext(TerminateStatementContext,0);
	};

	unstringStatement() {
	    return this.getTypedRuleContext(UnstringStatementContext,0);
	};

	writeStatement() {
	    return this.getTypedRuleContext(WriteStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitStatement(this);
		}
	}


}



class AcceptStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_acceptStatement;
    }

	ACCEPT() {
	    return this.getToken(Cobol85Parser.ACCEPT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	acceptFromDateStatement() {
	    return this.getTypedRuleContext(AcceptFromDateStatementContext,0);
	};

	acceptFromEscapeKeyStatement() {
	    return this.getTypedRuleContext(AcceptFromEscapeKeyStatementContext,0);
	};

	acceptFromMnemonicStatement() {
	    return this.getTypedRuleContext(AcceptFromMnemonicStatementContext,0);
	};

	acceptMessageCountStatement() {
	    return this.getTypedRuleContext(AcceptMessageCountStatementContext,0);
	};

	onExceptionClause() {
	    return this.getTypedRuleContext(OnExceptionClauseContext,0);
	};

	notOnExceptionClause() {
	    return this.getTypedRuleContext(NotOnExceptionClauseContext,0);
	};

	END_ACCEPT() {
	    return this.getToken(Cobol85Parser.END_ACCEPT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAcceptStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAcceptStatement(this);
		}
	}


}



class AcceptFromDateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_acceptFromDateStatement;
    }

	FROM() {
	    return this.getToken(Cobol85Parser.FROM, 0);
	};

	DATE() {
	    return this.getToken(Cobol85Parser.DATE, 0);
	};

	DAY() {
	    return this.getToken(Cobol85Parser.DAY, 0);
	};

	DAY_OF_WEEK() {
	    return this.getToken(Cobol85Parser.DAY_OF_WEEK, 0);
	};

	TIME() {
	    return this.getToken(Cobol85Parser.TIME, 0);
	};

	TIMER() {
	    return this.getToken(Cobol85Parser.TIMER, 0);
	};

	TODAYS_DATE() {
	    return this.getToken(Cobol85Parser.TODAYS_DATE, 0);
	};

	TODAYS_NAME() {
	    return this.getToken(Cobol85Parser.TODAYS_NAME, 0);
	};

	YEAR() {
	    return this.getToken(Cobol85Parser.YEAR, 0);
	};

	YYYYMMDD() {
	    return this.getToken(Cobol85Parser.YYYYMMDD, 0);
	};

	YYYYDDD() {
	    return this.getToken(Cobol85Parser.YYYYDDD, 0);
	};

	MMDDYYYY() {
	    return this.getToken(Cobol85Parser.MMDDYYYY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAcceptFromDateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAcceptFromDateStatement(this);
		}
	}


}



class AcceptFromMnemonicStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_acceptFromMnemonicStatement;
    }

	FROM() {
	    return this.getToken(Cobol85Parser.FROM, 0);
	};

	mnemonicName() {
	    return this.getTypedRuleContext(MnemonicNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAcceptFromMnemonicStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAcceptFromMnemonicStatement(this);
		}
	}


}



class AcceptFromEscapeKeyStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_acceptFromEscapeKeyStatement;
    }

	FROM() {
	    return this.getToken(Cobol85Parser.FROM, 0);
	};

	ESCAPE() {
	    return this.getToken(Cobol85Parser.ESCAPE, 0);
	};

	KEY() {
	    return this.getToken(Cobol85Parser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAcceptFromEscapeKeyStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAcceptFromEscapeKeyStatement(this);
		}
	}


}



class AcceptMessageCountStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_acceptMessageCountStatement;
    }

	COUNT() {
	    return this.getToken(Cobol85Parser.COUNT, 0);
	};

	MESSAGE() {
	    return this.getToken(Cobol85Parser.MESSAGE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAcceptMessageCountStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAcceptMessageCountStatement(this);
		}
	}


}



class AddStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_addStatement;
    }

	ADD() {
	    return this.getToken(Cobol85Parser.ADD, 0);
	};

	addToStatement() {
	    return this.getTypedRuleContext(AddToStatementContext,0);
	};

	addToGivingStatement() {
	    return this.getTypedRuleContext(AddToGivingStatementContext,0);
	};

	addCorrespondingStatement() {
	    return this.getTypedRuleContext(AddCorrespondingStatementContext,0);
	};

	onSizeErrorPhrase() {
	    return this.getTypedRuleContext(OnSizeErrorPhraseContext,0);
	};

	notOnSizeErrorPhrase() {
	    return this.getTypedRuleContext(NotOnSizeErrorPhraseContext,0);
	};

	END_ADD() {
	    return this.getToken(Cobol85Parser.END_ADD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAddStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAddStatement(this);
		}
	}


}



class AddToStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_addToStatement;
    }

	TO() {
	    return this.getToken(Cobol85Parser.TO, 0);
	};

	addFrom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AddFromContext);
	    } else {
	        return this.getTypedRuleContext(AddFromContext,i);
	    }
	};

	addTo = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AddToContext);
	    } else {
	        return this.getTypedRuleContext(AddToContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAddToStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAddToStatement(this);
		}
	}


}



class AddToGivingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_addToGivingStatement;
    }

	GIVING() {
	    return this.getToken(Cobol85Parser.GIVING, 0);
	};

	addFrom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AddFromContext);
	    } else {
	        return this.getTypedRuleContext(AddFromContext,i);
	    }
	};

	TO() {
	    return this.getToken(Cobol85Parser.TO, 0);
	};

	addGiving = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AddGivingContext);
	    } else {
	        return this.getTypedRuleContext(AddGivingContext,i);
	    }
	};

	addToGiving = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AddToGivingContext);
	    } else {
	        return this.getTypedRuleContext(AddToGivingContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAddToGivingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAddToGivingStatement(this);
		}
	}


}



class AddCorrespondingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_addCorrespondingStatement;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	TO() {
	    return this.getToken(Cobol85Parser.TO, 0);
	};

	addTo() {
	    return this.getTypedRuleContext(AddToContext,0);
	};

	CORRESPONDING() {
	    return this.getToken(Cobol85Parser.CORRESPONDING, 0);
	};

	CORR() {
	    return this.getToken(Cobol85Parser.CORR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAddCorrespondingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAddCorrespondingStatement(this);
		}
	}


}



class AddFromContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_addFrom;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAddFrom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAddFrom(this);
		}
	}


}



class AddToContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_addTo;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ROUNDED() {
	    return this.getToken(Cobol85Parser.ROUNDED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAddTo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAddTo(this);
		}
	}


}



class AddToGivingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_addToGiving;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAddToGiving(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAddToGiving(this);
		}
	}


}



class AddGivingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_addGiving;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ROUNDED() {
	    return this.getToken(Cobol85Parser.ROUNDED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAddGiving(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAddGiving(this);
		}
	}


}



class AlteredGoToContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_alteredGoTo;
    }

	GO() {
	    return this.getToken(Cobol85Parser.GO, 0);
	};

	DOT_FS() {
	    return this.getToken(Cobol85Parser.DOT_FS, 0);
	};

	TO() {
	    return this.getToken(Cobol85Parser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAlteredGoTo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAlteredGoTo(this);
		}
	}


}



class AlterStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_alterStatement;
    }

	ALTER() {
	    return this.getToken(Cobol85Parser.ALTER, 0);
	};

	alterProceedTo = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlterProceedToContext);
	    } else {
	        return this.getTypedRuleContext(AlterProceedToContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAlterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAlterStatement(this);
		}
	}


}



class AlterProceedToContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_alterProceedTo;
    }

	procedureName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureNameContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureNameContext,i);
	    }
	};

	TO = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.TO);
	    } else {
	        return this.getToken(Cobol85Parser.TO, i);
	    }
	};


	PROCEED() {
	    return this.getToken(Cobol85Parser.PROCEED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAlterProceedTo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAlterProceedTo(this);
		}
	}


}



class CallStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_callStatement;
    }

	CALL() {
	    return this.getToken(Cobol85Parser.CALL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	callUsingPhrase() {
	    return this.getTypedRuleContext(CallUsingPhraseContext,0);
	};

	callGivingPhrase() {
	    return this.getTypedRuleContext(CallGivingPhraseContext,0);
	};

	onOverflowPhrase() {
	    return this.getTypedRuleContext(OnOverflowPhraseContext,0);
	};

	onExceptionClause() {
	    return this.getTypedRuleContext(OnExceptionClauseContext,0);
	};

	notOnExceptionClause() {
	    return this.getTypedRuleContext(NotOnExceptionClauseContext,0);
	};

	END_CALL() {
	    return this.getToken(Cobol85Parser.END_CALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCallStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCallStatement(this);
		}
	}


}



class CallUsingPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_callUsingPhrase;
    }

	USING() {
	    return this.getToken(Cobol85Parser.USING, 0);
	};

	callUsingParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallUsingParameterContext);
	    } else {
	        return this.getTypedRuleContext(CallUsingParameterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCallUsingPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCallUsingPhrase(this);
		}
	}


}



class CallUsingParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_callUsingParameter;
    }

	callByReferencePhrase() {
	    return this.getTypedRuleContext(CallByReferencePhraseContext,0);
	};

	callByValuePhrase() {
	    return this.getTypedRuleContext(CallByValuePhraseContext,0);
	};

	callByContentPhrase() {
	    return this.getTypedRuleContext(CallByContentPhraseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCallUsingParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCallUsingParameter(this);
		}
	}


}



class CallByReferencePhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_callByReferencePhrase;
    }

	REFERENCE() {
	    return this.getToken(Cobol85Parser.REFERENCE, 0);
	};

	callByReference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallByReferenceContext);
	    } else {
	        return this.getTypedRuleContext(CallByReferenceContext,i);
	    }
	};

	BY() {
	    return this.getToken(Cobol85Parser.BY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCallByReferencePhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCallByReferencePhrase(this);
		}
	}


}



class CallByReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_callByReference;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	fileName() {
	    return this.getTypedRuleContext(FileNameContext,0);
	};

	ADDRESS() {
	    return this.getToken(Cobol85Parser.ADDRESS, 0);
	};

	OF() {
	    return this.getToken(Cobol85Parser.OF, 0);
	};

	INTEGER() {
	    return this.getToken(Cobol85Parser.INTEGER, 0);
	};

	STRING() {
	    return this.getToken(Cobol85Parser.STRING, 0);
	};

	OMITTED() {
	    return this.getToken(Cobol85Parser.OMITTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCallByReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCallByReference(this);
		}
	}


}



class CallByValuePhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_callByValuePhrase;
    }

	VALUE() {
	    return this.getToken(Cobol85Parser.VALUE, 0);
	};

	BY() {
	    return this.getToken(Cobol85Parser.BY, 0);
	};

	callByValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallByValueContext);
	    } else {
	        return this.getTypedRuleContext(CallByValueContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCallByValuePhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCallByValuePhrase(this);
		}
	}


}



class CallByValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_callByValue;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	ADDRESS() {
	    return this.getToken(Cobol85Parser.ADDRESS, 0);
	};

	OF() {
	    return this.getToken(Cobol85Parser.OF, 0);
	};

	LENGTH() {
	    return this.getToken(Cobol85Parser.LENGTH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCallByValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCallByValue(this);
		}
	}


}



class CallByContentPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_callByContentPhrase;
    }

	CONTENT() {
	    return this.getToken(Cobol85Parser.CONTENT, 0);
	};

	BY() {
	    return this.getToken(Cobol85Parser.BY, 0);
	};

	callByContent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallByContentContext);
	    } else {
	        return this.getTypedRuleContext(CallByContentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCallByContentPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCallByContentPhrase(this);
		}
	}


}



class CallByContentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_callByContent;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ADDRESS() {
	    return this.getToken(Cobol85Parser.ADDRESS, 0);
	};

	OF() {
	    return this.getToken(Cobol85Parser.OF, 0);
	};

	LENGTH() {
	    return this.getToken(Cobol85Parser.LENGTH, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	OMITTED() {
	    return this.getToken(Cobol85Parser.OMITTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCallByContent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCallByContent(this);
		}
	}


}



class CallGivingPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_callGivingPhrase;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	GIVING() {
	    return this.getToken(Cobol85Parser.GIVING, 0);
	};

	RETURNING() {
	    return this.getToken(Cobol85Parser.RETURNING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCallGivingPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCallGivingPhrase(this);
		}
	}


}



class CancelStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_cancelStatement;
    }

	CANCEL() {
	    return this.getToken(Cobol85Parser.CANCEL, 0);
	};

	cancelCall = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CancelCallContext);
	    } else {
	        return this.getTypedRuleContext(CancelCallContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCancelStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCancelStatement(this);
		}
	}


}



class CancelCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_cancelCall;
    }

	libraryName() {
	    return this.getTypedRuleContext(LibraryNameContext,0);
	};

	BYTITLE() {
	    return this.getToken(Cobol85Parser.BYTITLE, 0);
	};

	BYFUNCTION() {
	    return this.getToken(Cobol85Parser.BYFUNCTION, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCancelCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCancelCall(this);
		}
	}


}



class CloseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_closeStatement;
    }

	CLOSE() {
	    return this.getToken(Cobol85Parser.CLOSE, 0);
	};

	closeFile = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CloseFileContext);
	    } else {
	        return this.getTypedRuleContext(CloseFileContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCloseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCloseStatement(this);
		}
	}


}



class CloseFileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_closeFile;
    }

	fileName() {
	    return this.getTypedRuleContext(FileNameContext,0);
	};

	closeReelUnitStatement() {
	    return this.getTypedRuleContext(CloseReelUnitStatementContext,0);
	};

	closeRelativeStatement() {
	    return this.getTypedRuleContext(CloseRelativeStatementContext,0);
	};

	closePortFileIOStatement() {
	    return this.getTypedRuleContext(ClosePortFileIOStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCloseFile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCloseFile(this);
		}
	}


}



class CloseReelUnitStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_closeReelUnitStatement;
    }

	REEL() {
	    return this.getToken(Cobol85Parser.REEL, 0);
	};

	UNIT() {
	    return this.getToken(Cobol85Parser.UNIT, 0);
	};

	REMOVAL() {
	    return this.getToken(Cobol85Parser.REMOVAL, 0);
	};

	NO() {
	    return this.getToken(Cobol85Parser.NO, 0);
	};

	REWIND() {
	    return this.getToken(Cobol85Parser.REWIND, 0);
	};

	LOCK() {
	    return this.getToken(Cobol85Parser.LOCK, 0);
	};

	FOR() {
	    return this.getToken(Cobol85Parser.FOR, 0);
	};

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCloseReelUnitStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCloseReelUnitStatement(this);
		}
	}


}



class CloseRelativeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_closeRelativeStatement;
    }

	NO() {
	    return this.getToken(Cobol85Parser.NO, 0);
	};

	REWIND() {
	    return this.getToken(Cobol85Parser.REWIND, 0);
	};

	LOCK() {
	    return this.getToken(Cobol85Parser.LOCK, 0);
	};

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCloseRelativeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCloseRelativeStatement(this);
		}
	}


}



class ClosePortFileIOStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_closePortFileIOStatement;
    }

	NO() {
	    return this.getToken(Cobol85Parser.NO, 0);
	};

	WAIT() {
	    return this.getToken(Cobol85Parser.WAIT, 0);
	};

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	USING() {
	    return this.getToken(Cobol85Parser.USING, 0);
	};

	closePortFileIOUsing = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClosePortFileIOUsingContext);
	    } else {
	        return this.getTypedRuleContext(ClosePortFileIOUsingContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterClosePortFileIOStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitClosePortFileIOStatement(this);
		}
	}


}



class ClosePortFileIOUsingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_closePortFileIOUsing;
    }

	closePortFileIOUsingCloseDisposition() {
	    return this.getTypedRuleContext(ClosePortFileIOUsingCloseDispositionContext,0);
	};

	closePortFileIOUsingAssociatedData() {
	    return this.getTypedRuleContext(ClosePortFileIOUsingAssociatedDataContext,0);
	};

	closePortFileIOUsingAssociatedDataLength() {
	    return this.getTypedRuleContext(ClosePortFileIOUsingAssociatedDataLengthContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterClosePortFileIOUsing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitClosePortFileIOUsing(this);
		}
	}


}



class ClosePortFileIOUsingCloseDispositionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_closePortFileIOUsingCloseDisposition;
    }

	CLOSE_DISPOSITION() {
	    return this.getToken(Cobol85Parser.CLOSE_DISPOSITION, 0);
	};

	ABORT() {
	    return this.getToken(Cobol85Parser.ABORT, 0);
	};

	ORDERLY() {
	    return this.getToken(Cobol85Parser.ORDERLY, 0);
	};

	OF() {
	    return this.getToken(Cobol85Parser.OF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterClosePortFileIOUsingCloseDisposition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitClosePortFileIOUsingCloseDisposition(this);
		}
	}


}



class ClosePortFileIOUsingAssociatedDataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_closePortFileIOUsingAssociatedData;
    }

	ASSOCIATED_DATA() {
	    return this.getToken(Cobol85Parser.ASSOCIATED_DATA, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterClosePortFileIOUsingAssociatedData(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitClosePortFileIOUsingAssociatedData(this);
		}
	}


}



class ClosePortFileIOUsingAssociatedDataLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_closePortFileIOUsingAssociatedDataLength;
    }

	ASSOCIATED_DATA_LENGTH() {
	    return this.getToken(Cobol85Parser.ASSOCIATED_DATA_LENGTH, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	OF() {
	    return this.getToken(Cobol85Parser.OF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterClosePortFileIOUsingAssociatedDataLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitClosePortFileIOUsingAssociatedDataLength(this);
		}
	}


}



class ComputeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_computeStatement;
    }

	COMPUTE() {
	    return this.getToken(Cobol85Parser.COMPUTE, 0);
	};

	arithmeticExpression() {
	    return this.getTypedRuleContext(ArithmeticExpressionContext,0);
	};

	EQUALCHAR() {
	    return this.getToken(Cobol85Parser.EQUALCHAR, 0);
	};

	EQUAL() {
	    return this.getToken(Cobol85Parser.EQUAL, 0);
	};

	computeStore = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ComputeStoreContext);
	    } else {
	        return this.getTypedRuleContext(ComputeStoreContext,i);
	    }
	};

	onSizeErrorPhrase() {
	    return this.getTypedRuleContext(OnSizeErrorPhraseContext,0);
	};

	notOnSizeErrorPhrase() {
	    return this.getTypedRuleContext(NotOnSizeErrorPhraseContext,0);
	};

	END_COMPUTE() {
	    return this.getToken(Cobol85Parser.END_COMPUTE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterComputeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitComputeStatement(this);
		}
	}


}



class ComputeStoreContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_computeStore;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ROUNDED() {
	    return this.getToken(Cobol85Parser.ROUNDED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterComputeStore(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitComputeStore(this);
		}
	}


}



class ContinueStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_continueStatement;
    }

	CONTINUE() {
	    return this.getToken(Cobol85Parser.CONTINUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterContinueStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitContinueStatement(this);
		}
	}


}



class DeleteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_deleteStatement;
    }

	DELETE() {
	    return this.getToken(Cobol85Parser.DELETE, 0);
	};

	fileName() {
	    return this.getTypedRuleContext(FileNameContext,0);
	};

	RECORD() {
	    return this.getToken(Cobol85Parser.RECORD, 0);
	};

	invalidKeyPhrase() {
	    return this.getTypedRuleContext(InvalidKeyPhraseContext,0);
	};

	notInvalidKeyPhrase() {
	    return this.getTypedRuleContext(NotInvalidKeyPhraseContext,0);
	};

	END_DELETE() {
	    return this.getToken(Cobol85Parser.END_DELETE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDeleteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDeleteStatement(this);
		}
	}


}



class DisableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_disableStatement;
    }

	DISABLE() {
	    return this.getToken(Cobol85Parser.DISABLE, 0);
	};

	cdName() {
	    return this.getTypedRuleContext(CdNameContext,0);
	};

	KEY() {
	    return this.getToken(Cobol85Parser.KEY, 0);
	};

	INPUT() {
	    return this.getToken(Cobol85Parser.INPUT, 0);
	};

	I_O() {
	    return this.getToken(Cobol85Parser.I_O, 0);
	};

	TERMINAL() {
	    return this.getToken(Cobol85Parser.TERMINAL, 0);
	};

	OUTPUT() {
	    return this.getToken(Cobol85Parser.OUTPUT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDisableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDisableStatement(this);
		}
	}


}



class DisplayStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_displayStatement;
    }

	DISPLAY() {
	    return this.getToken(Cobol85Parser.DISPLAY, 0);
	};

	displayOperand = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DisplayOperandContext);
	    } else {
	        return this.getTypedRuleContext(DisplayOperandContext,i);
	    }
	};

	displayAt() {
	    return this.getTypedRuleContext(DisplayAtContext,0);
	};

	displayUpon() {
	    return this.getTypedRuleContext(DisplayUponContext,0);
	};

	displayWith() {
	    return this.getTypedRuleContext(DisplayWithContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDisplayStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDisplayStatement(this);
		}
	}


}



class DisplayOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_displayOperand;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDisplayOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDisplayOperand(this);
		}
	}


}



class DisplayAtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_displayAt;
    }

	AT() {
	    return this.getToken(Cobol85Parser.AT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDisplayAt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDisplayAt(this);
		}
	}


}



class DisplayUponContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_displayUpon;
    }

	UPON() {
	    return this.getToken(Cobol85Parser.UPON, 0);
	};

	mnemonicName() {
	    return this.getTypedRuleContext(MnemonicNameContext,0);
	};

	environmentName() {
	    return this.getTypedRuleContext(EnvironmentNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDisplayUpon(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDisplayUpon(this);
		}
	}


}



class DisplayWithContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_displayWith;
    }

	NO() {
	    return this.getToken(Cobol85Parser.NO, 0);
	};

	ADVANCING() {
	    return this.getToken(Cobol85Parser.ADVANCING, 0);
	};

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDisplayWith(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDisplayWith(this);
		}
	}


}



class DivideStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_divideStatement;
    }

	DIVIDE() {
	    return this.getToken(Cobol85Parser.DIVIDE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	divideIntoStatement() {
	    return this.getTypedRuleContext(DivideIntoStatementContext,0);
	};

	divideIntoGivingStatement() {
	    return this.getTypedRuleContext(DivideIntoGivingStatementContext,0);
	};

	divideByGivingStatement() {
	    return this.getTypedRuleContext(DivideByGivingStatementContext,0);
	};

	divideRemainder() {
	    return this.getTypedRuleContext(DivideRemainderContext,0);
	};

	onSizeErrorPhrase() {
	    return this.getTypedRuleContext(OnSizeErrorPhraseContext,0);
	};

	notOnSizeErrorPhrase() {
	    return this.getTypedRuleContext(NotOnSizeErrorPhraseContext,0);
	};

	END_DIVIDE() {
	    return this.getToken(Cobol85Parser.END_DIVIDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDivideStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDivideStatement(this);
		}
	}


}



class DivideIntoStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_divideIntoStatement;
    }

	INTO() {
	    return this.getToken(Cobol85Parser.INTO, 0);
	};

	divideInto = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DivideIntoContext);
	    } else {
	        return this.getTypedRuleContext(DivideIntoContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDivideIntoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDivideIntoStatement(this);
		}
	}


}



class DivideIntoGivingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_divideIntoGivingStatement;
    }

	INTO() {
	    return this.getToken(Cobol85Parser.INTO, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	divideGivingPhrase() {
	    return this.getTypedRuleContext(DivideGivingPhraseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDivideIntoGivingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDivideIntoGivingStatement(this);
		}
	}


}



class DivideByGivingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_divideByGivingStatement;
    }

	BY() {
	    return this.getToken(Cobol85Parser.BY, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	divideGivingPhrase() {
	    return this.getTypedRuleContext(DivideGivingPhraseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDivideByGivingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDivideByGivingStatement(this);
		}
	}


}



class DivideGivingPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_divideGivingPhrase;
    }

	GIVING() {
	    return this.getToken(Cobol85Parser.GIVING, 0);
	};

	divideGiving = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DivideGivingContext);
	    } else {
	        return this.getTypedRuleContext(DivideGivingContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDivideGivingPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDivideGivingPhrase(this);
		}
	}


}



class DivideIntoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_divideInto;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ROUNDED() {
	    return this.getToken(Cobol85Parser.ROUNDED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDivideInto(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDivideInto(this);
		}
	}


}



class DivideGivingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_divideGiving;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ROUNDED() {
	    return this.getToken(Cobol85Parser.ROUNDED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDivideGiving(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDivideGiving(this);
		}
	}


}



class DivideRemainderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_divideRemainder;
    }

	REMAINDER() {
	    return this.getToken(Cobol85Parser.REMAINDER, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDivideRemainder(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDivideRemainder(this);
		}
	}


}



class EnableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_enableStatement;
    }

	ENABLE() {
	    return this.getToken(Cobol85Parser.ENABLE, 0);
	};

	cdName() {
	    return this.getTypedRuleContext(CdNameContext,0);
	};

	KEY() {
	    return this.getToken(Cobol85Parser.KEY, 0);
	};

	INPUT() {
	    return this.getToken(Cobol85Parser.INPUT, 0);
	};

	I_O() {
	    return this.getToken(Cobol85Parser.I_O, 0);
	};

	TERMINAL() {
	    return this.getToken(Cobol85Parser.TERMINAL, 0);
	};

	OUTPUT() {
	    return this.getToken(Cobol85Parser.OUTPUT, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterEnableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitEnableStatement(this);
		}
	}


}



class EntryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_entryStatement;
    }

	ENTRY() {
	    return this.getToken(Cobol85Parser.ENTRY, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	USING() {
	    return this.getToken(Cobol85Parser.USING, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterEntryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitEntryStatement(this);
		}
	}


}



class EvaluateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_evaluateStatement;
    }

	EVALUATE() {
	    return this.getToken(Cobol85Parser.EVALUATE, 0);
	};

	evaluateSelect() {
	    return this.getTypedRuleContext(EvaluateSelectContext,0);
	};

	evaluateAlsoSelect = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EvaluateAlsoSelectContext);
	    } else {
	        return this.getTypedRuleContext(EvaluateAlsoSelectContext,i);
	    }
	};

	evaluateWhenPhrase = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EvaluateWhenPhraseContext);
	    } else {
	        return this.getTypedRuleContext(EvaluateWhenPhraseContext,i);
	    }
	};

	evaluateWhenOther() {
	    return this.getTypedRuleContext(EvaluateWhenOtherContext,0);
	};

	END_EVALUATE() {
	    return this.getToken(Cobol85Parser.END_EVALUATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterEvaluateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitEvaluateStatement(this);
		}
	}


}



class EvaluateSelectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_evaluateSelect;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	arithmeticExpression() {
	    return this.getTypedRuleContext(ArithmeticExpressionContext,0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterEvaluateSelect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitEvaluateSelect(this);
		}
	}


}



class EvaluateAlsoSelectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_evaluateAlsoSelect;
    }

	ALSO() {
	    return this.getToken(Cobol85Parser.ALSO, 0);
	};

	evaluateSelect() {
	    return this.getTypedRuleContext(EvaluateSelectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterEvaluateAlsoSelect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitEvaluateAlsoSelect(this);
		}
	}


}



class EvaluateWhenPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_evaluateWhenPhrase;
    }

	evaluateWhen = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EvaluateWhenContext);
	    } else {
	        return this.getTypedRuleContext(EvaluateWhenContext,i);
	    }
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterEvaluateWhenPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitEvaluateWhenPhrase(this);
		}
	}


}



class EvaluateWhenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_evaluateWhen;
    }

	WHEN() {
	    return this.getToken(Cobol85Parser.WHEN, 0);
	};

	evaluateCondition() {
	    return this.getTypedRuleContext(EvaluateConditionContext,0);
	};

	evaluateAlsoCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EvaluateAlsoConditionContext);
	    } else {
	        return this.getTypedRuleContext(EvaluateAlsoConditionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterEvaluateWhen(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitEvaluateWhen(this);
		}
	}


}



class EvaluateConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_evaluateCondition;
    }

	ANY() {
	    return this.getToken(Cobol85Parser.ANY, 0);
	};

	evaluateValue() {
	    return this.getTypedRuleContext(EvaluateValueContext,0);
	};

	NOT() {
	    return this.getToken(Cobol85Parser.NOT, 0);
	};

	evaluateThrough() {
	    return this.getTypedRuleContext(EvaluateThroughContext,0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterEvaluateCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitEvaluateCondition(this);
		}
	}


}



class EvaluateThroughContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_evaluateThrough;
    }

	evaluateValue() {
	    return this.getTypedRuleContext(EvaluateValueContext,0);
	};

	THROUGH() {
	    return this.getToken(Cobol85Parser.THROUGH, 0);
	};

	THRU() {
	    return this.getToken(Cobol85Parser.THRU, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterEvaluateThrough(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitEvaluateThrough(this);
		}
	}


}



class EvaluateAlsoConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_evaluateAlsoCondition;
    }

	ALSO() {
	    return this.getToken(Cobol85Parser.ALSO, 0);
	};

	evaluateCondition() {
	    return this.getTypedRuleContext(EvaluateConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterEvaluateAlsoCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitEvaluateAlsoCondition(this);
		}
	}


}



class EvaluateWhenOtherContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_evaluateWhenOther;
    }

	WHEN() {
	    return this.getToken(Cobol85Parser.WHEN, 0);
	};

	OTHER() {
	    return this.getToken(Cobol85Parser.OTHER, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterEvaluateWhenOther(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitEvaluateWhenOther(this);
		}
	}


}



class EvaluateValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_evaluateValue;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	arithmeticExpression() {
	    return this.getTypedRuleContext(ArithmeticExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterEvaluateValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitEvaluateValue(this);
		}
	}


}



class ExecCicsStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_execCicsStatement;
    }

	EXECCICSLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.EXECCICSLINE);
	    } else {
	        return this.getToken(Cobol85Parser.EXECCICSLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterExecCicsStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitExecCicsStatement(this);
		}
	}


}



class ExecSqlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_execSqlStatement;
    }

	EXECSQLLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.EXECSQLLINE);
	    } else {
	        return this.getToken(Cobol85Parser.EXECSQLLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterExecSqlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitExecSqlStatement(this);
		}
	}


}



class ExecSqlImsStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_execSqlImsStatement;
    }

	EXECSQLIMSLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.EXECSQLIMSLINE);
	    } else {
	        return this.getToken(Cobol85Parser.EXECSQLIMSLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterExecSqlImsStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitExecSqlImsStatement(this);
		}
	}


}



class ExhibitStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_exhibitStatement;
    }

	EXHIBIT() {
	    return this.getToken(Cobol85Parser.EXHIBIT, 0);
	};

	NAMED() {
	    return this.getToken(Cobol85Parser.NAMED, 0);
	};

	CHANGED() {
	    return this.getToken(Cobol85Parser.CHANGED, 0);
	};

	exhibitOperand = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExhibitOperandContext);
	    } else {
	        return this.getTypedRuleContext(ExhibitOperandContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterExhibitStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitExhibitStatement(this);
		}
	}


}



class ExhibitOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_exhibitOperand;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterExhibitOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitExhibitOperand(this);
		}
	}


}



class ExitStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_exitStatement;
    }

	EXIT() {
	    return this.getToken(Cobol85Parser.EXIT, 0);
	};

	PROGRAM() {
	    return this.getToken(Cobol85Parser.PROGRAM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterExitStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitExitStatement(this);
		}
	}


}



class GenerateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_generateStatement;
    }

	GENERATE() {
	    return this.getToken(Cobol85Parser.GENERATE, 0);
	};

	reportName() {
	    return this.getTypedRuleContext(ReportNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterGenerateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitGenerateStatement(this);
		}
	}


}



class GobackStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_gobackStatement;
    }

	GOBACK() {
	    return this.getToken(Cobol85Parser.GOBACK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterGobackStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitGobackStatement(this);
		}
	}


}



class GoToStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_goToStatement;
    }

	GO() {
	    return this.getToken(Cobol85Parser.GO, 0);
	};

	goToStatementSimple() {
	    return this.getTypedRuleContext(GoToStatementSimpleContext,0);
	};

	goToDependingOnStatement() {
	    return this.getTypedRuleContext(GoToDependingOnStatementContext,0);
	};

	TO() {
	    return this.getToken(Cobol85Parser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterGoToStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitGoToStatement(this);
		}
	}


}



class GoToStatementSimpleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_goToStatementSimple;
    }

	procedureName() {
	    return this.getTypedRuleContext(ProcedureNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterGoToStatementSimple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitGoToStatementSimple(this);
		}
	}


}



class GoToDependingOnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_goToDependingOnStatement;
    }

	MORE_LABELS() {
	    return this.getToken(Cobol85Parser.MORE_LABELS, 0);
	};

	procedureName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureNameContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureNameContext,i);
	    }
	};

	DEPENDING() {
	    return this.getToken(Cobol85Parser.DEPENDING, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ON() {
	    return this.getToken(Cobol85Parser.ON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterGoToDependingOnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitGoToDependingOnStatement(this);
		}
	}


}



class IfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_ifStatement;
    }

	IF() {
	    return this.getToken(Cobol85Parser.IF, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	ifThen() {
	    return this.getTypedRuleContext(IfThenContext,0);
	};

	ifElse() {
	    return this.getTypedRuleContext(IfElseContext,0);
	};

	END_IF() {
	    return this.getToken(Cobol85Parser.END_IF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitIfStatement(this);
		}
	}


}



class IfThenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_ifThen;
    }

	NEXT() {
	    return this.getToken(Cobol85Parser.NEXT, 0);
	};

	SENTENCE() {
	    return this.getToken(Cobol85Parser.SENTENCE, 0);
	};

	THEN() {
	    return this.getToken(Cobol85Parser.THEN, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterIfThen(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitIfThen(this);
		}
	}


}



class IfElseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_ifElse;
    }

	ELSE() {
	    return this.getToken(Cobol85Parser.ELSE, 0);
	};

	NEXT() {
	    return this.getToken(Cobol85Parser.NEXT, 0);
	};

	SENTENCE() {
	    return this.getToken(Cobol85Parser.SENTENCE, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterIfElse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitIfElse(this);
		}
	}


}



class InitializeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_initializeStatement;
    }

	INITIALIZE() {
	    return this.getToken(Cobol85Parser.INITIALIZE, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	initializeReplacingPhrase() {
	    return this.getTypedRuleContext(InitializeReplacingPhraseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInitializeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInitializeStatement(this);
		}
	}


}



class InitializeReplacingPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_initializeReplacingPhrase;
    }

	REPLACING() {
	    return this.getToken(Cobol85Parser.REPLACING, 0);
	};

	initializeReplacingBy = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InitializeReplacingByContext);
	    } else {
	        return this.getTypedRuleContext(InitializeReplacingByContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInitializeReplacingPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInitializeReplacingPhrase(this);
		}
	}


}



class InitializeReplacingByContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_initializeReplacingBy;
    }

	BY() {
	    return this.getToken(Cobol85Parser.BY, 0);
	};

	ALPHABETIC() {
	    return this.getToken(Cobol85Parser.ALPHABETIC, 0);
	};

	ALPHANUMERIC() {
	    return this.getToken(Cobol85Parser.ALPHANUMERIC, 0);
	};

	ALPHANUMERIC_EDITED() {
	    return this.getToken(Cobol85Parser.ALPHANUMERIC_EDITED, 0);
	};

	NATIONAL() {
	    return this.getToken(Cobol85Parser.NATIONAL, 0);
	};

	NATIONAL_EDITED() {
	    return this.getToken(Cobol85Parser.NATIONAL_EDITED, 0);
	};

	NUMERIC() {
	    return this.getToken(Cobol85Parser.NUMERIC, 0);
	};

	NUMERIC_EDITED() {
	    return this.getToken(Cobol85Parser.NUMERIC_EDITED, 0);
	};

	DBCS() {
	    return this.getToken(Cobol85Parser.DBCS, 0);
	};

	EGCS() {
	    return this.getToken(Cobol85Parser.EGCS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	DATA() {
	    return this.getToken(Cobol85Parser.DATA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInitializeReplacingBy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInitializeReplacingBy(this);
		}
	}


}



class InitiateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_initiateStatement;
    }

	INITIATE() {
	    return this.getToken(Cobol85Parser.INITIATE, 0);
	};

	reportName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReportNameContext);
	    } else {
	        return this.getTypedRuleContext(ReportNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInitiateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInitiateStatement(this);
		}
	}


}



class InspectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_inspectStatement;
    }

	INSPECT() {
	    return this.getToken(Cobol85Parser.INSPECT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	inspectTallyingPhrase() {
	    return this.getTypedRuleContext(InspectTallyingPhraseContext,0);
	};

	inspectReplacingPhrase() {
	    return this.getTypedRuleContext(InspectReplacingPhraseContext,0);
	};

	inspectTallyingReplacingPhrase() {
	    return this.getTypedRuleContext(InspectTallyingReplacingPhraseContext,0);
	};

	inspectConvertingPhrase() {
	    return this.getTypedRuleContext(InspectConvertingPhraseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInspectStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInspectStatement(this);
		}
	}


}



class InspectTallyingPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_inspectTallyingPhrase;
    }

	TALLYING() {
	    return this.getToken(Cobol85Parser.TALLYING, 0);
	};

	inspectFor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InspectForContext);
	    } else {
	        return this.getTypedRuleContext(InspectForContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInspectTallyingPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInspectTallyingPhrase(this);
		}
	}


}



class InspectReplacingPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_inspectReplacingPhrase;
    }

	REPLACING() {
	    return this.getToken(Cobol85Parser.REPLACING, 0);
	};

	inspectReplacingCharacters = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InspectReplacingCharactersContext);
	    } else {
	        return this.getTypedRuleContext(InspectReplacingCharactersContext,i);
	    }
	};

	inspectReplacingAllLeadings = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InspectReplacingAllLeadingsContext);
	    } else {
	        return this.getTypedRuleContext(InspectReplacingAllLeadingsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInspectReplacingPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInspectReplacingPhrase(this);
		}
	}


}



class InspectTallyingReplacingPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_inspectTallyingReplacingPhrase;
    }

	TALLYING() {
	    return this.getToken(Cobol85Parser.TALLYING, 0);
	};

	inspectFor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InspectForContext);
	    } else {
	        return this.getTypedRuleContext(InspectForContext,i);
	    }
	};

	inspectReplacingPhrase = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InspectReplacingPhraseContext);
	    } else {
	        return this.getTypedRuleContext(InspectReplacingPhraseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInspectTallyingReplacingPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInspectTallyingReplacingPhrase(this);
		}
	}


}



class InspectConvertingPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_inspectConvertingPhrase;
    }

	CONVERTING() {
	    return this.getToken(Cobol85Parser.CONVERTING, 0);
	};

	inspectTo() {
	    return this.getTypedRuleContext(InspectToContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	inspectBeforeAfter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InspectBeforeAfterContext);
	    } else {
	        return this.getTypedRuleContext(InspectBeforeAfterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInspectConvertingPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInspectConvertingPhrase(this);
		}
	}


}



class InspectForContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_inspectFor;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	FOR() {
	    return this.getToken(Cobol85Parser.FOR, 0);
	};

	inspectCharacters = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InspectCharactersContext);
	    } else {
	        return this.getTypedRuleContext(InspectCharactersContext,i);
	    }
	};

	inspectAllLeadings = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InspectAllLeadingsContext);
	    } else {
	        return this.getTypedRuleContext(InspectAllLeadingsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInspectFor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInspectFor(this);
		}
	}


}



class InspectCharactersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_inspectCharacters;
    }

	CHARACTERS() {
	    return this.getToken(Cobol85Parser.CHARACTERS, 0);
	};

	inspectBeforeAfter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InspectBeforeAfterContext);
	    } else {
	        return this.getTypedRuleContext(InspectBeforeAfterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInspectCharacters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInspectCharacters(this);
		}
	}


}



class InspectReplacingCharactersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_inspectReplacingCharacters;
    }

	CHARACTERS() {
	    return this.getToken(Cobol85Parser.CHARACTERS, 0);
	};

	inspectBy() {
	    return this.getTypedRuleContext(InspectByContext,0);
	};

	inspectBeforeAfter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InspectBeforeAfterContext);
	    } else {
	        return this.getTypedRuleContext(InspectBeforeAfterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInspectReplacingCharacters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInspectReplacingCharacters(this);
		}
	}


}



class InspectAllLeadingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_inspectAllLeadings;
    }

	ALL() {
	    return this.getToken(Cobol85Parser.ALL, 0);
	};

	LEADING() {
	    return this.getToken(Cobol85Parser.LEADING, 0);
	};

	inspectAllLeading = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InspectAllLeadingContext);
	    } else {
	        return this.getTypedRuleContext(InspectAllLeadingContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInspectAllLeadings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInspectAllLeadings(this);
		}
	}


}



class InspectReplacingAllLeadingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_inspectReplacingAllLeadings;
    }

	ALL() {
	    return this.getToken(Cobol85Parser.ALL, 0);
	};

	LEADING() {
	    return this.getToken(Cobol85Parser.LEADING, 0);
	};

	FIRST() {
	    return this.getToken(Cobol85Parser.FIRST, 0);
	};

	inspectReplacingAllLeading = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InspectReplacingAllLeadingContext);
	    } else {
	        return this.getTypedRuleContext(InspectReplacingAllLeadingContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInspectReplacingAllLeadings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInspectReplacingAllLeadings(this);
		}
	}


}



class InspectAllLeadingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_inspectAllLeading;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	inspectBeforeAfter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InspectBeforeAfterContext);
	    } else {
	        return this.getTypedRuleContext(InspectBeforeAfterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInspectAllLeading(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInspectAllLeading(this);
		}
	}


}



class InspectReplacingAllLeadingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_inspectReplacingAllLeading;
    }

	inspectBy() {
	    return this.getTypedRuleContext(InspectByContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	inspectBeforeAfter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InspectBeforeAfterContext);
	    } else {
	        return this.getTypedRuleContext(InspectBeforeAfterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInspectReplacingAllLeading(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInspectReplacingAllLeading(this);
		}
	}


}



class InspectByContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_inspectBy;
    }

	BY() {
	    return this.getToken(Cobol85Parser.BY, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInspectBy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInspectBy(this);
		}
	}


}



class InspectToContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_inspectTo;
    }

	TO() {
	    return this.getToken(Cobol85Parser.TO, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInspectTo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInspectTo(this);
		}
	}


}



class InspectBeforeAfterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_inspectBeforeAfter;
    }

	BEFORE() {
	    return this.getToken(Cobol85Parser.BEFORE, 0);
	};

	AFTER() {
	    return this.getToken(Cobol85Parser.AFTER, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	INITIAL() {
	    return this.getToken(Cobol85Parser.INITIAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInspectBeforeAfter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInspectBeforeAfter(this);
		}
	}


}



class MergeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_mergeStatement;
    }

	MERGE() {
	    return this.getToken(Cobol85Parser.MERGE, 0);
	};

	fileName() {
	    return this.getTypedRuleContext(FileNameContext,0);
	};

	mergeOnKeyClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MergeOnKeyClauseContext);
	    } else {
	        return this.getTypedRuleContext(MergeOnKeyClauseContext,i);
	    }
	};

	mergeCollatingSequencePhrase() {
	    return this.getTypedRuleContext(MergeCollatingSequencePhraseContext,0);
	};

	mergeUsing = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MergeUsingContext);
	    } else {
	        return this.getTypedRuleContext(MergeUsingContext,i);
	    }
	};

	mergeOutputProcedurePhrase() {
	    return this.getTypedRuleContext(MergeOutputProcedurePhraseContext,0);
	};

	mergeGivingPhrase = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MergeGivingPhraseContext);
	    } else {
	        return this.getTypedRuleContext(MergeGivingPhraseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMergeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMergeStatement(this);
		}
	}


}



class MergeOnKeyClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_mergeOnKeyClause;
    }

	ASCENDING() {
	    return this.getToken(Cobol85Parser.ASCENDING, 0);
	};

	DESCENDING() {
	    return this.getToken(Cobol85Parser.DESCENDING, 0);
	};

	ON() {
	    return this.getToken(Cobol85Parser.ON, 0);
	};

	KEY() {
	    return this.getToken(Cobol85Parser.KEY, 0);
	};

	qualifiedDataName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedDataNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedDataNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMergeOnKeyClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMergeOnKeyClause(this);
		}
	}


}



class MergeCollatingSequencePhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_mergeCollatingSequencePhrase;
    }

	SEQUENCE() {
	    return this.getToken(Cobol85Parser.SEQUENCE, 0);
	};

	COLLATING() {
	    return this.getToken(Cobol85Parser.COLLATING, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	alphabetName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlphabetNameContext);
	    } else {
	        return this.getTypedRuleContext(AlphabetNameContext,i);
	    }
	};

	mergeCollatingAlphanumeric() {
	    return this.getTypedRuleContext(MergeCollatingAlphanumericContext,0);
	};

	mergeCollatingNational() {
	    return this.getTypedRuleContext(MergeCollatingNationalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMergeCollatingSequencePhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMergeCollatingSequencePhrase(this);
		}
	}


}



class MergeCollatingAlphanumericContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_mergeCollatingAlphanumeric;
    }

	ALPHANUMERIC() {
	    return this.getToken(Cobol85Parser.ALPHANUMERIC, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	alphabetName() {
	    return this.getTypedRuleContext(AlphabetNameContext,0);
	};

	FOR() {
	    return this.getToken(Cobol85Parser.FOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMergeCollatingAlphanumeric(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMergeCollatingAlphanumeric(this);
		}
	}


}



class MergeCollatingNationalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_mergeCollatingNational;
    }

	NATIONAL() {
	    return this.getToken(Cobol85Parser.NATIONAL, 0);
	};

	alphabetName() {
	    return this.getTypedRuleContext(AlphabetNameContext,0);
	};

	FOR() {
	    return this.getToken(Cobol85Parser.FOR, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMergeCollatingNational(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMergeCollatingNational(this);
		}
	}


}



class MergeUsingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_mergeUsing;
    }

	USING() {
	    return this.getToken(Cobol85Parser.USING, 0);
	};

	fileName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FileNameContext);
	    } else {
	        return this.getTypedRuleContext(FileNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMergeUsing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMergeUsing(this);
		}
	}


}



class MergeOutputProcedurePhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_mergeOutputProcedurePhrase;
    }

	OUTPUT() {
	    return this.getToken(Cobol85Parser.OUTPUT, 0);
	};

	PROCEDURE() {
	    return this.getToken(Cobol85Parser.PROCEDURE, 0);
	};

	procedureName() {
	    return this.getTypedRuleContext(ProcedureNameContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	mergeOutputThrough() {
	    return this.getTypedRuleContext(MergeOutputThroughContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMergeOutputProcedurePhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMergeOutputProcedurePhrase(this);
		}
	}


}



class MergeOutputThroughContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_mergeOutputThrough;
    }

	procedureName() {
	    return this.getTypedRuleContext(ProcedureNameContext,0);
	};

	THROUGH() {
	    return this.getToken(Cobol85Parser.THROUGH, 0);
	};

	THRU() {
	    return this.getToken(Cobol85Parser.THRU, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMergeOutputThrough(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMergeOutputThrough(this);
		}
	}


}



class MergeGivingPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_mergeGivingPhrase;
    }

	GIVING() {
	    return this.getToken(Cobol85Parser.GIVING, 0);
	};

	mergeGiving = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MergeGivingContext);
	    } else {
	        return this.getTypedRuleContext(MergeGivingContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMergeGivingPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMergeGivingPhrase(this);
		}
	}


}



class MergeGivingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_mergeGiving;
    }

	fileName() {
	    return this.getTypedRuleContext(FileNameContext,0);
	};

	LOCK() {
	    return this.getToken(Cobol85Parser.LOCK, 0);
	};

	SAVE() {
	    return this.getToken(Cobol85Parser.SAVE, 0);
	};

	NO() {
	    return this.getToken(Cobol85Parser.NO, 0);
	};

	REWIND() {
	    return this.getToken(Cobol85Parser.REWIND, 0);
	};

	CRUNCH() {
	    return this.getToken(Cobol85Parser.CRUNCH, 0);
	};

	RELEASE() {
	    return this.getToken(Cobol85Parser.RELEASE, 0);
	};

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	REMOVE() {
	    return this.getToken(Cobol85Parser.REMOVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMergeGiving(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMergeGiving(this);
		}
	}


}



class MoveStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_moveStatement;
    }

	MOVE() {
	    return this.getToken(Cobol85Parser.MOVE, 0);
	};

	moveToStatement() {
	    return this.getTypedRuleContext(MoveToStatementContext,0);
	};

	moveCorrespondingToStatement() {
	    return this.getTypedRuleContext(MoveCorrespondingToStatementContext,0);
	};

	ALL() {
	    return this.getToken(Cobol85Parser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMoveStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMoveStatement(this);
		}
	}


}



class MoveToStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_moveToStatement;
    }

	moveToSendingArea() {
	    return this.getTypedRuleContext(MoveToSendingAreaContext,0);
	};

	TO() {
	    return this.getToken(Cobol85Parser.TO, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMoveToStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMoveToStatement(this);
		}
	}


}



class MoveToSendingAreaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_moveToSendingArea;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMoveToSendingArea(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMoveToSendingArea(this);
		}
	}


}



class MoveCorrespondingToStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_moveCorrespondingToStatement;
    }

	moveCorrespondingToSendingArea() {
	    return this.getTypedRuleContext(MoveCorrespondingToSendingAreaContext,0);
	};

	TO() {
	    return this.getToken(Cobol85Parser.TO, 0);
	};

	CORRESPONDING() {
	    return this.getToken(Cobol85Parser.CORRESPONDING, 0);
	};

	CORR() {
	    return this.getToken(Cobol85Parser.CORR, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMoveCorrespondingToStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMoveCorrespondingToStatement(this);
		}
	}


}



class MoveCorrespondingToSendingAreaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_moveCorrespondingToSendingArea;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMoveCorrespondingToSendingArea(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMoveCorrespondingToSendingArea(this);
		}
	}


}



class MultiplyStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_multiplyStatement;
    }

	MULTIPLY() {
	    return this.getToken(Cobol85Parser.MULTIPLY, 0);
	};

	BY() {
	    return this.getToken(Cobol85Parser.BY, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	multiplyRegular() {
	    return this.getTypedRuleContext(MultiplyRegularContext,0);
	};

	multiplyGiving() {
	    return this.getTypedRuleContext(MultiplyGivingContext,0);
	};

	onSizeErrorPhrase() {
	    return this.getTypedRuleContext(OnSizeErrorPhraseContext,0);
	};

	notOnSizeErrorPhrase() {
	    return this.getTypedRuleContext(NotOnSizeErrorPhraseContext,0);
	};

	END_MULTIPLY() {
	    return this.getToken(Cobol85Parser.END_MULTIPLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMultiplyStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMultiplyStatement(this);
		}
	}


}



class MultiplyRegularContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_multiplyRegular;
    }

	multiplyRegularOperand = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplyRegularOperandContext);
	    } else {
	        return this.getTypedRuleContext(MultiplyRegularOperandContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMultiplyRegular(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMultiplyRegular(this);
		}
	}


}



class MultiplyRegularOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_multiplyRegularOperand;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ROUNDED() {
	    return this.getToken(Cobol85Parser.ROUNDED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMultiplyRegularOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMultiplyRegularOperand(this);
		}
	}


}



class MultiplyGivingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_multiplyGiving;
    }

	multiplyGivingOperand() {
	    return this.getTypedRuleContext(MultiplyGivingOperandContext,0);
	};

	GIVING() {
	    return this.getToken(Cobol85Parser.GIVING, 0);
	};

	multiplyGivingResult = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplyGivingResultContext);
	    } else {
	        return this.getTypedRuleContext(MultiplyGivingResultContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMultiplyGiving(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMultiplyGiving(this);
		}
	}


}



class MultiplyGivingOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_multiplyGivingOperand;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMultiplyGivingOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMultiplyGivingOperand(this);
		}
	}


}



class MultiplyGivingResultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_multiplyGivingResult;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ROUNDED() {
	    return this.getToken(Cobol85Parser.ROUNDED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMultiplyGivingResult(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMultiplyGivingResult(this);
		}
	}


}



class OpenStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_openStatement;
    }

	OPEN() {
	    return this.getToken(Cobol85Parser.OPEN, 0);
	};

	openInputStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OpenInputStatementContext);
	    } else {
	        return this.getTypedRuleContext(OpenInputStatementContext,i);
	    }
	};

	openOutputStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OpenOutputStatementContext);
	    } else {
	        return this.getTypedRuleContext(OpenOutputStatementContext,i);
	    }
	};

	openIOStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OpenIOStatementContext);
	    } else {
	        return this.getTypedRuleContext(OpenIOStatementContext,i);
	    }
	};

	openExtendStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OpenExtendStatementContext);
	    } else {
	        return this.getTypedRuleContext(OpenExtendStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterOpenStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitOpenStatement(this);
		}
	}


}



class OpenInputStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_openInputStatement;
    }

	INPUT() {
	    return this.getToken(Cobol85Parser.INPUT, 0);
	};

	openInput = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OpenInputContext);
	    } else {
	        return this.getTypedRuleContext(OpenInputContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterOpenInputStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitOpenInputStatement(this);
		}
	}


}



class OpenInputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_openInput;
    }

	fileName() {
	    return this.getTypedRuleContext(FileNameContext,0);
	};

	REVERSED() {
	    return this.getToken(Cobol85Parser.REVERSED, 0);
	};

	NO() {
	    return this.getToken(Cobol85Parser.NO, 0);
	};

	REWIND() {
	    return this.getToken(Cobol85Parser.REWIND, 0);
	};

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterOpenInput(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitOpenInput(this);
		}
	}


}



class OpenOutputStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_openOutputStatement;
    }

	OUTPUT() {
	    return this.getToken(Cobol85Parser.OUTPUT, 0);
	};

	openOutput = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OpenOutputContext);
	    } else {
	        return this.getTypedRuleContext(OpenOutputContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterOpenOutputStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitOpenOutputStatement(this);
		}
	}


}



class OpenOutputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_openOutput;
    }

	fileName() {
	    return this.getTypedRuleContext(FileNameContext,0);
	};

	NO() {
	    return this.getToken(Cobol85Parser.NO, 0);
	};

	REWIND() {
	    return this.getToken(Cobol85Parser.REWIND, 0);
	};

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterOpenOutput(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitOpenOutput(this);
		}
	}


}



class OpenIOStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_openIOStatement;
    }

	I_O() {
	    return this.getToken(Cobol85Parser.I_O, 0);
	};

	fileName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FileNameContext);
	    } else {
	        return this.getTypedRuleContext(FileNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterOpenIOStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitOpenIOStatement(this);
		}
	}


}



class OpenExtendStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_openExtendStatement;
    }

	EXTEND() {
	    return this.getToken(Cobol85Parser.EXTEND, 0);
	};

	fileName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FileNameContext);
	    } else {
	        return this.getTypedRuleContext(FileNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterOpenExtendStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitOpenExtendStatement(this);
		}
	}


}



class PerformStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_performStatement;
    }

	PERFORM() {
	    return this.getToken(Cobol85Parser.PERFORM, 0);
	};

	performInlineStatement() {
	    return this.getTypedRuleContext(PerformInlineStatementContext,0);
	};

	performProcedureStatement() {
	    return this.getTypedRuleContext(PerformProcedureStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterPerformStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitPerformStatement(this);
		}
	}


}



class PerformInlineStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_performInlineStatement;
    }

	END_PERFORM() {
	    return this.getToken(Cobol85Parser.END_PERFORM, 0);
	};

	performType() {
	    return this.getTypedRuleContext(PerformTypeContext,0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterPerformInlineStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitPerformInlineStatement(this);
		}
	}


}



class PerformProcedureStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_performProcedureStatement;
    }

	procedureName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureNameContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureNameContext,i);
	    }
	};

	performType() {
	    return this.getTypedRuleContext(PerformTypeContext,0);
	};

	THROUGH() {
	    return this.getToken(Cobol85Parser.THROUGH, 0);
	};

	THRU() {
	    return this.getToken(Cobol85Parser.THRU, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterPerformProcedureStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitPerformProcedureStatement(this);
		}
	}


}



class PerformTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_performType;
    }

	performTimes() {
	    return this.getTypedRuleContext(PerformTimesContext,0);
	};

	performUntil() {
	    return this.getTypedRuleContext(PerformUntilContext,0);
	};

	performVarying() {
	    return this.getTypedRuleContext(PerformVaryingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterPerformType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitPerformType(this);
		}
	}


}



class PerformTimesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_performTimes;
    }

	TIMES() {
	    return this.getToken(Cobol85Parser.TIMES, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterPerformTimes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitPerformTimes(this);
		}
	}


}



class PerformUntilContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_performUntil;
    }

	UNTIL() {
	    return this.getToken(Cobol85Parser.UNTIL, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	performTestClause() {
	    return this.getTypedRuleContext(PerformTestClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterPerformUntil(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitPerformUntil(this);
		}
	}


}



class PerformVaryingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_performVarying;
    }

	performTestClause() {
	    return this.getTypedRuleContext(PerformTestClauseContext,0);
	};

	performVaryingClause() {
	    return this.getTypedRuleContext(PerformVaryingClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterPerformVarying(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitPerformVarying(this);
		}
	}


}



class PerformVaryingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_performVaryingClause;
    }

	VARYING() {
	    return this.getToken(Cobol85Parser.VARYING, 0);
	};

	performVaryingPhrase() {
	    return this.getTypedRuleContext(PerformVaryingPhraseContext,0);
	};

	performAfter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PerformAfterContext);
	    } else {
	        return this.getTypedRuleContext(PerformAfterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterPerformVaryingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitPerformVaryingClause(this);
		}
	}


}



class PerformVaryingPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_performVaryingPhrase;
    }

	performFrom() {
	    return this.getTypedRuleContext(PerformFromContext,0);
	};

	performBy() {
	    return this.getTypedRuleContext(PerformByContext,0);
	};

	performUntil() {
	    return this.getTypedRuleContext(PerformUntilContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterPerformVaryingPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitPerformVaryingPhrase(this);
		}
	}


}



class PerformAfterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_performAfter;
    }

	AFTER() {
	    return this.getToken(Cobol85Parser.AFTER, 0);
	};

	performVaryingPhrase() {
	    return this.getTypedRuleContext(PerformVaryingPhraseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterPerformAfter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitPerformAfter(this);
		}
	}


}



class PerformFromContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_performFrom;
    }

	FROM() {
	    return this.getToken(Cobol85Parser.FROM, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	arithmeticExpression() {
	    return this.getTypedRuleContext(ArithmeticExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterPerformFrom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitPerformFrom(this);
		}
	}


}



class PerformByContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_performBy;
    }

	BY() {
	    return this.getToken(Cobol85Parser.BY, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	arithmeticExpression() {
	    return this.getTypedRuleContext(ArithmeticExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterPerformBy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitPerformBy(this);
		}
	}


}



class PerformTestClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_performTestClause;
    }

	TEST() {
	    return this.getToken(Cobol85Parser.TEST, 0);
	};

	BEFORE() {
	    return this.getToken(Cobol85Parser.BEFORE, 0);
	};

	AFTER() {
	    return this.getToken(Cobol85Parser.AFTER, 0);
	};

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterPerformTestClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitPerformTestClause(this);
		}
	}


}



class PurgeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_purgeStatement;
    }

	PURGE() {
	    return this.getToken(Cobol85Parser.PURGE, 0);
	};

	cdName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CdNameContext);
	    } else {
	        return this.getTypedRuleContext(CdNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterPurgeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitPurgeStatement(this);
		}
	}


}



class ReadStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_readStatement;
    }

	READ() {
	    return this.getToken(Cobol85Parser.READ, 0);
	};

	fileName() {
	    return this.getTypedRuleContext(FileNameContext,0);
	};

	NEXT() {
	    return this.getToken(Cobol85Parser.NEXT, 0);
	};

	RECORD() {
	    return this.getToken(Cobol85Parser.RECORD, 0);
	};

	readInto() {
	    return this.getTypedRuleContext(ReadIntoContext,0);
	};

	readWith() {
	    return this.getTypedRuleContext(ReadWithContext,0);
	};

	readKey() {
	    return this.getTypedRuleContext(ReadKeyContext,0);
	};

	invalidKeyPhrase() {
	    return this.getTypedRuleContext(InvalidKeyPhraseContext,0);
	};

	notInvalidKeyPhrase() {
	    return this.getTypedRuleContext(NotInvalidKeyPhraseContext,0);
	};

	atEndPhrase() {
	    return this.getTypedRuleContext(AtEndPhraseContext,0);
	};

	notAtEndPhrase() {
	    return this.getTypedRuleContext(NotAtEndPhraseContext,0);
	};

	END_READ() {
	    return this.getToken(Cobol85Parser.END_READ, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReadStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReadStatement(this);
		}
	}


}



class ReadIntoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_readInto;
    }

	INTO() {
	    return this.getToken(Cobol85Parser.INTO, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReadInto(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReadInto(this);
		}
	}


}



class ReadWithContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_readWith;
    }

	LOCK() {
	    return this.getToken(Cobol85Parser.LOCK, 0);
	};

	WAIT() {
	    return this.getToken(Cobol85Parser.WAIT, 0);
	};

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	KEPT() {
	    return this.getToken(Cobol85Parser.KEPT, 0);
	};

	NO() {
	    return this.getToken(Cobol85Parser.NO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReadWith(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReadWith(this);
		}
	}


}



class ReadKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_readKey;
    }

	KEY() {
	    return this.getToken(Cobol85Parser.KEY, 0);
	};

	qualifiedDataName() {
	    return this.getTypedRuleContext(QualifiedDataNameContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReadKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReadKey(this);
		}
	}


}



class ReceiveStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_receiveStatement;
    }

	RECEIVE() {
	    return this.getToken(Cobol85Parser.RECEIVE, 0);
	};

	receiveFromStatement() {
	    return this.getTypedRuleContext(ReceiveFromStatementContext,0);
	};

	receiveIntoStatement() {
	    return this.getTypedRuleContext(ReceiveIntoStatementContext,0);
	};

	onExceptionClause() {
	    return this.getTypedRuleContext(OnExceptionClauseContext,0);
	};

	notOnExceptionClause() {
	    return this.getTypedRuleContext(NotOnExceptionClauseContext,0);
	};

	END_RECEIVE() {
	    return this.getToken(Cobol85Parser.END_RECEIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReceiveStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReceiveStatement(this);
		}
	}


}



class ReceiveFromStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_receiveFromStatement;
    }

	dataName() {
	    return this.getTypedRuleContext(DataNameContext,0);
	};

	FROM() {
	    return this.getToken(Cobol85Parser.FROM, 0);
	};

	receiveFrom() {
	    return this.getTypedRuleContext(ReceiveFromContext,0);
	};

	receiveBefore = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReceiveBeforeContext);
	    } else {
	        return this.getTypedRuleContext(ReceiveBeforeContext,i);
	    }
	};

	receiveWith = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReceiveWithContext);
	    } else {
	        return this.getTypedRuleContext(ReceiveWithContext,i);
	    }
	};

	receiveThread = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReceiveThreadContext);
	    } else {
	        return this.getTypedRuleContext(ReceiveThreadContext,i);
	    }
	};

	receiveSize = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReceiveSizeContext);
	    } else {
	        return this.getTypedRuleContext(ReceiveSizeContext,i);
	    }
	};

	receiveStatus = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReceiveStatusContext);
	    } else {
	        return this.getTypedRuleContext(ReceiveStatusContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReceiveFromStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReceiveFromStatement(this);
		}
	}


}



class ReceiveFromContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_receiveFrom;
    }

	THREAD() {
	    return this.getToken(Cobol85Parser.THREAD, 0);
	};

	dataName() {
	    return this.getTypedRuleContext(DataNameContext,0);
	};

	LAST() {
	    return this.getToken(Cobol85Parser.LAST, 0);
	};

	ANY() {
	    return this.getToken(Cobol85Parser.ANY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReceiveFrom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReceiveFrom(this);
		}
	}


}



class ReceiveIntoStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_receiveIntoStatement;
    }

	cdName() {
	    return this.getTypedRuleContext(CdNameContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	MESSAGE() {
	    return this.getToken(Cobol85Parser.MESSAGE, 0);
	};

	SEGMENT() {
	    return this.getToken(Cobol85Parser.SEGMENT, 0);
	};

	INTO() {
	    return this.getToken(Cobol85Parser.INTO, 0);
	};

	receiveNoData() {
	    return this.getTypedRuleContext(ReceiveNoDataContext,0);
	};

	receiveWithData() {
	    return this.getTypedRuleContext(ReceiveWithDataContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReceiveIntoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReceiveIntoStatement(this);
		}
	}


}



class ReceiveNoDataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_receiveNoData;
    }

	NO() {
	    return this.getToken(Cobol85Parser.NO, 0);
	};

	DATA() {
	    return this.getToken(Cobol85Parser.DATA, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReceiveNoData(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReceiveNoData(this);
		}
	}


}



class ReceiveWithDataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_receiveWithData;
    }

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	DATA() {
	    return this.getToken(Cobol85Parser.DATA, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReceiveWithData(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReceiveWithData(this);
		}
	}


}



class ReceiveBeforeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_receiveBefore;
    }

	BEFORE() {
	    return this.getToken(Cobol85Parser.BEFORE, 0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	TIME() {
	    return this.getToken(Cobol85Parser.TIME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReceiveBefore(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReceiveBefore(this);
		}
	}


}



class ReceiveWithContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_receiveWith;
    }

	NO() {
	    return this.getToken(Cobol85Parser.NO, 0);
	};

	WAIT() {
	    return this.getToken(Cobol85Parser.WAIT, 0);
	};

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReceiveWith(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReceiveWith(this);
		}
	}


}



class ReceiveThreadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_receiveThread;
    }

	THREAD() {
	    return this.getToken(Cobol85Parser.THREAD, 0);
	};

	dataName() {
	    return this.getTypedRuleContext(DataNameContext,0);
	};

	IN() {
	    return this.getToken(Cobol85Parser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReceiveThread(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReceiveThread(this);
		}
	}


}



class ReceiveSizeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_receiveSize;
    }

	SIZE() {
	    return this.getToken(Cobol85Parser.SIZE, 0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IN() {
	    return this.getToken(Cobol85Parser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReceiveSize(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReceiveSize(this);
		}
	}


}



class ReceiveStatusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_receiveStatus;
    }

	STATUS() {
	    return this.getToken(Cobol85Parser.STATUS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IN() {
	    return this.getToken(Cobol85Parser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReceiveStatus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReceiveStatus(this);
		}
	}


}



class ReleaseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_releaseStatement;
    }

	RELEASE() {
	    return this.getToken(Cobol85Parser.RELEASE, 0);
	};

	recordName() {
	    return this.getTypedRuleContext(RecordNameContext,0);
	};

	FROM() {
	    return this.getToken(Cobol85Parser.FROM, 0);
	};

	qualifiedDataName() {
	    return this.getTypedRuleContext(QualifiedDataNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReleaseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReleaseStatement(this);
		}
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_returnStatement;
    }

	RETURN() {
	    return this.getToken(Cobol85Parser.RETURN, 0);
	};

	fileName() {
	    return this.getTypedRuleContext(FileNameContext,0);
	};

	atEndPhrase() {
	    return this.getTypedRuleContext(AtEndPhraseContext,0);
	};

	RECORD() {
	    return this.getToken(Cobol85Parser.RECORD, 0);
	};

	returnInto() {
	    return this.getTypedRuleContext(ReturnIntoContext,0);
	};

	notAtEndPhrase() {
	    return this.getTypedRuleContext(NotAtEndPhraseContext,0);
	};

	END_RETURN() {
	    return this.getToken(Cobol85Parser.END_RETURN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReturnStatement(this);
		}
	}


}



class ReturnIntoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_returnInto;
    }

	INTO() {
	    return this.getToken(Cobol85Parser.INTO, 0);
	};

	qualifiedDataName() {
	    return this.getTypedRuleContext(QualifiedDataNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReturnInto(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReturnInto(this);
		}
	}


}



class RewriteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_rewriteStatement;
    }

	REWRITE() {
	    return this.getToken(Cobol85Parser.REWRITE, 0);
	};

	recordName() {
	    return this.getTypedRuleContext(RecordNameContext,0);
	};

	rewriteFrom() {
	    return this.getTypedRuleContext(RewriteFromContext,0);
	};

	invalidKeyPhrase() {
	    return this.getTypedRuleContext(InvalidKeyPhraseContext,0);
	};

	notInvalidKeyPhrase() {
	    return this.getTypedRuleContext(NotInvalidKeyPhraseContext,0);
	};

	END_REWRITE() {
	    return this.getToken(Cobol85Parser.END_REWRITE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterRewriteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitRewriteStatement(this);
		}
	}


}



class RewriteFromContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_rewriteFrom;
    }

	FROM() {
	    return this.getToken(Cobol85Parser.FROM, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterRewriteFrom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitRewriteFrom(this);
		}
	}


}



class SearchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_searchStatement;
    }

	SEARCH() {
	    return this.getToken(Cobol85Parser.SEARCH, 0);
	};

	qualifiedDataName() {
	    return this.getTypedRuleContext(QualifiedDataNameContext,0);
	};

	ALL() {
	    return this.getToken(Cobol85Parser.ALL, 0);
	};

	searchVarying() {
	    return this.getTypedRuleContext(SearchVaryingContext,0);
	};

	atEndPhrase() {
	    return this.getTypedRuleContext(AtEndPhraseContext,0);
	};

	searchWhen = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SearchWhenContext);
	    } else {
	        return this.getTypedRuleContext(SearchWhenContext,i);
	    }
	};

	END_SEARCH() {
	    return this.getToken(Cobol85Parser.END_SEARCH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSearchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSearchStatement(this);
		}
	}


}



class SearchVaryingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_searchVarying;
    }

	VARYING() {
	    return this.getToken(Cobol85Parser.VARYING, 0);
	};

	qualifiedDataName() {
	    return this.getTypedRuleContext(QualifiedDataNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSearchVarying(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSearchVarying(this);
		}
	}


}



class SearchWhenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_searchWhen;
    }

	WHEN() {
	    return this.getToken(Cobol85Parser.WHEN, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	NEXT() {
	    return this.getToken(Cobol85Parser.NEXT, 0);
	};

	SENTENCE() {
	    return this.getToken(Cobol85Parser.SENTENCE, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSearchWhen(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSearchWhen(this);
		}
	}


}



class SendStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sendStatement;
    }

	SEND() {
	    return this.getToken(Cobol85Parser.SEND, 0);
	};

	sendStatementSync() {
	    return this.getTypedRuleContext(SendStatementSyncContext,0);
	};

	sendStatementAsync() {
	    return this.getTypedRuleContext(SendStatementAsyncContext,0);
	};

	onExceptionClause() {
	    return this.getTypedRuleContext(OnExceptionClauseContext,0);
	};

	notOnExceptionClause() {
	    return this.getTypedRuleContext(NotOnExceptionClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSendStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSendStatement(this);
		}
	}


}



class SendStatementSyncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sendStatementSync;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	sendFromPhrase() {
	    return this.getTypedRuleContext(SendFromPhraseContext,0);
	};

	sendWithPhrase() {
	    return this.getTypedRuleContext(SendWithPhraseContext,0);
	};

	sendReplacingPhrase() {
	    return this.getTypedRuleContext(SendReplacingPhraseContext,0);
	};

	sendAdvancingPhrase() {
	    return this.getTypedRuleContext(SendAdvancingPhraseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSendStatementSync(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSendStatementSync(this);
		}
	}


}



class SendStatementAsyncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sendStatementAsync;
    }

	TO() {
	    return this.getToken(Cobol85Parser.TO, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	TOP() {
	    return this.getToken(Cobol85Parser.TOP, 0);
	};

	BOTTOM() {
	    return this.getToken(Cobol85Parser.BOTTOM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSendStatementAsync(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSendStatementAsync(this);
		}
	}


}



class SendFromPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sendFromPhrase;
    }

	FROM() {
	    return this.getToken(Cobol85Parser.FROM, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSendFromPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSendFromPhrase(this);
		}
	}


}



class SendWithPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sendWithPhrase;
    }

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	EGI() {
	    return this.getToken(Cobol85Parser.EGI, 0);
	};

	EMI() {
	    return this.getToken(Cobol85Parser.EMI, 0);
	};

	ESI() {
	    return this.getToken(Cobol85Parser.ESI, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSendWithPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSendWithPhrase(this);
		}
	}


}



class SendReplacingPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sendReplacingPhrase;
    }

	REPLACING() {
	    return this.getToken(Cobol85Parser.REPLACING, 0);
	};

	LINE() {
	    return this.getToken(Cobol85Parser.LINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSendReplacingPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSendReplacingPhrase(this);
		}
	}


}



class SendAdvancingPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sendAdvancingPhrase;
    }

	BEFORE() {
	    return this.getToken(Cobol85Parser.BEFORE, 0);
	};

	AFTER() {
	    return this.getToken(Cobol85Parser.AFTER, 0);
	};

	sendAdvancingPage() {
	    return this.getTypedRuleContext(SendAdvancingPageContext,0);
	};

	sendAdvancingLines() {
	    return this.getTypedRuleContext(SendAdvancingLinesContext,0);
	};

	sendAdvancingMnemonic() {
	    return this.getTypedRuleContext(SendAdvancingMnemonicContext,0);
	};

	ADVANCING() {
	    return this.getToken(Cobol85Parser.ADVANCING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSendAdvancingPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSendAdvancingPhrase(this);
		}
	}


}



class SendAdvancingPageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sendAdvancingPage;
    }

	PAGE() {
	    return this.getToken(Cobol85Parser.PAGE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSendAdvancingPage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSendAdvancingPage(this);
		}
	}


}



class SendAdvancingLinesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sendAdvancingLines;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	LINE() {
	    return this.getToken(Cobol85Parser.LINE, 0);
	};

	LINES() {
	    return this.getToken(Cobol85Parser.LINES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSendAdvancingLines(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSendAdvancingLines(this);
		}
	}


}



class SendAdvancingMnemonicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sendAdvancingMnemonic;
    }

	mnemonicName() {
	    return this.getTypedRuleContext(MnemonicNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSendAdvancingMnemonic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSendAdvancingMnemonic(this);
		}
	}


}



class SetStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_setStatement;
    }

	SET() {
	    return this.getToken(Cobol85Parser.SET, 0);
	};

	setUpDownByStatement() {
	    return this.getTypedRuleContext(SetUpDownByStatementContext,0);
	};

	setToStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetToStatementContext);
	    } else {
	        return this.getTypedRuleContext(SetToStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSetStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSetStatement(this);
		}
	}


}



class SetToStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_setToStatement;
    }

	TO() {
	    return this.getToken(Cobol85Parser.TO, 0);
	};

	setTo = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetToContext);
	    } else {
	        return this.getTypedRuleContext(SetToContext,i);
	    }
	};

	setToValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetToValueContext);
	    } else {
	        return this.getTypedRuleContext(SetToValueContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSetToStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSetToStatement(this);
		}
	}


}



class SetUpDownByStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_setUpDownByStatement;
    }

	setByValue() {
	    return this.getTypedRuleContext(SetByValueContext,0);
	};

	UP() {
	    return this.getToken(Cobol85Parser.UP, 0);
	};

	BY() {
	    return this.getToken(Cobol85Parser.BY, 0);
	};

	DOWN() {
	    return this.getToken(Cobol85Parser.DOWN, 0);
	};

	setTo = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetToContext);
	    } else {
	        return this.getTypedRuleContext(SetToContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSetUpDownByStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSetUpDownByStatement(this);
		}
	}


}



class SetToContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_setTo;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSetTo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSetTo(this);
		}
	}


}



class SetToValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_setToValue;
    }

	ON() {
	    return this.getToken(Cobol85Parser.ON, 0);
	};

	OFF() {
	    return this.getToken(Cobol85Parser.OFF, 0);
	};

	ENTRY() {
	    return this.getToken(Cobol85Parser.ENTRY, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSetToValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSetToValue(this);
		}
	}


}



class SetByValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_setByValue;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSetByValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSetByValue(this);
		}
	}


}



class SortStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sortStatement;
    }

	SORT() {
	    return this.getToken(Cobol85Parser.SORT, 0);
	};

	fileName() {
	    return this.getTypedRuleContext(FileNameContext,0);
	};

	sortOnKeyClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortOnKeyClauseContext);
	    } else {
	        return this.getTypedRuleContext(SortOnKeyClauseContext,i);
	    }
	};

	sortDuplicatesPhrase() {
	    return this.getTypedRuleContext(SortDuplicatesPhraseContext,0);
	};

	sortCollatingSequencePhrase() {
	    return this.getTypedRuleContext(SortCollatingSequencePhraseContext,0);
	};

	sortInputProcedurePhrase() {
	    return this.getTypedRuleContext(SortInputProcedurePhraseContext,0);
	};

	sortUsing = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortUsingContext);
	    } else {
	        return this.getTypedRuleContext(SortUsingContext,i);
	    }
	};

	sortOutputProcedurePhrase() {
	    return this.getTypedRuleContext(SortOutputProcedurePhraseContext,0);
	};

	sortGivingPhrase = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortGivingPhraseContext);
	    } else {
	        return this.getTypedRuleContext(SortGivingPhraseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSortStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSortStatement(this);
		}
	}


}



class SortOnKeyClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sortOnKeyClause;
    }

	ASCENDING() {
	    return this.getToken(Cobol85Parser.ASCENDING, 0);
	};

	DESCENDING() {
	    return this.getToken(Cobol85Parser.DESCENDING, 0);
	};

	ON() {
	    return this.getToken(Cobol85Parser.ON, 0);
	};

	KEY() {
	    return this.getToken(Cobol85Parser.KEY, 0);
	};

	qualifiedDataName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedDataNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedDataNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSortOnKeyClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSortOnKeyClause(this);
		}
	}


}



class SortDuplicatesPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sortDuplicatesPhrase;
    }

	DUPLICATES() {
	    return this.getToken(Cobol85Parser.DUPLICATES, 0);
	};

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	IN() {
	    return this.getToken(Cobol85Parser.IN, 0);
	};

	ORDER() {
	    return this.getToken(Cobol85Parser.ORDER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSortDuplicatesPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSortDuplicatesPhrase(this);
		}
	}


}



class SortCollatingSequencePhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sortCollatingSequencePhrase;
    }

	SEQUENCE() {
	    return this.getToken(Cobol85Parser.SEQUENCE, 0);
	};

	COLLATING() {
	    return this.getToken(Cobol85Parser.COLLATING, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	alphabetName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlphabetNameContext);
	    } else {
	        return this.getTypedRuleContext(AlphabetNameContext,i);
	    }
	};

	sortCollatingAlphanumeric() {
	    return this.getTypedRuleContext(SortCollatingAlphanumericContext,0);
	};

	sortCollatingNational() {
	    return this.getTypedRuleContext(SortCollatingNationalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSortCollatingSequencePhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSortCollatingSequencePhrase(this);
		}
	}


}



class SortCollatingAlphanumericContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sortCollatingAlphanumeric;
    }

	ALPHANUMERIC() {
	    return this.getToken(Cobol85Parser.ALPHANUMERIC, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	alphabetName() {
	    return this.getTypedRuleContext(AlphabetNameContext,0);
	};

	FOR() {
	    return this.getToken(Cobol85Parser.FOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSortCollatingAlphanumeric(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSortCollatingAlphanumeric(this);
		}
	}


}



class SortCollatingNationalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sortCollatingNational;
    }

	NATIONAL() {
	    return this.getToken(Cobol85Parser.NATIONAL, 0);
	};

	alphabetName() {
	    return this.getTypedRuleContext(AlphabetNameContext,0);
	};

	FOR() {
	    return this.getToken(Cobol85Parser.FOR, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSortCollatingNational(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSortCollatingNational(this);
		}
	}


}



class SortInputProcedurePhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sortInputProcedurePhrase;
    }

	INPUT() {
	    return this.getToken(Cobol85Parser.INPUT, 0);
	};

	PROCEDURE() {
	    return this.getToken(Cobol85Parser.PROCEDURE, 0);
	};

	procedureName() {
	    return this.getTypedRuleContext(ProcedureNameContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	sortInputThrough() {
	    return this.getTypedRuleContext(SortInputThroughContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSortInputProcedurePhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSortInputProcedurePhrase(this);
		}
	}


}



class SortInputThroughContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sortInputThrough;
    }

	procedureName() {
	    return this.getTypedRuleContext(ProcedureNameContext,0);
	};

	THROUGH() {
	    return this.getToken(Cobol85Parser.THROUGH, 0);
	};

	THRU() {
	    return this.getToken(Cobol85Parser.THRU, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSortInputThrough(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSortInputThrough(this);
		}
	}


}



class SortUsingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sortUsing;
    }

	USING() {
	    return this.getToken(Cobol85Parser.USING, 0);
	};

	fileName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FileNameContext);
	    } else {
	        return this.getTypedRuleContext(FileNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSortUsing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSortUsing(this);
		}
	}


}



class SortOutputProcedurePhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sortOutputProcedurePhrase;
    }

	OUTPUT() {
	    return this.getToken(Cobol85Parser.OUTPUT, 0);
	};

	PROCEDURE() {
	    return this.getToken(Cobol85Parser.PROCEDURE, 0);
	};

	procedureName() {
	    return this.getTypedRuleContext(ProcedureNameContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	sortOutputThrough() {
	    return this.getTypedRuleContext(SortOutputThroughContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSortOutputProcedurePhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSortOutputProcedurePhrase(this);
		}
	}


}



class SortOutputThroughContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sortOutputThrough;
    }

	procedureName() {
	    return this.getTypedRuleContext(ProcedureNameContext,0);
	};

	THROUGH() {
	    return this.getToken(Cobol85Parser.THROUGH, 0);
	};

	THRU() {
	    return this.getToken(Cobol85Parser.THRU, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSortOutputThrough(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSortOutputThrough(this);
		}
	}


}



class SortGivingPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sortGivingPhrase;
    }

	GIVING() {
	    return this.getToken(Cobol85Parser.GIVING, 0);
	};

	sortGiving = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortGivingContext);
	    } else {
	        return this.getTypedRuleContext(SortGivingContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSortGivingPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSortGivingPhrase(this);
		}
	}


}



class SortGivingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sortGiving;
    }

	fileName() {
	    return this.getTypedRuleContext(FileNameContext,0);
	};

	LOCK() {
	    return this.getToken(Cobol85Parser.LOCK, 0);
	};

	SAVE() {
	    return this.getToken(Cobol85Parser.SAVE, 0);
	};

	NO() {
	    return this.getToken(Cobol85Parser.NO, 0);
	};

	REWIND() {
	    return this.getToken(Cobol85Parser.REWIND, 0);
	};

	CRUNCH() {
	    return this.getToken(Cobol85Parser.CRUNCH, 0);
	};

	RELEASE() {
	    return this.getToken(Cobol85Parser.RELEASE, 0);
	};

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	REMOVE() {
	    return this.getToken(Cobol85Parser.REMOVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSortGiving(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSortGiving(this);
		}
	}


}



class StartStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_startStatement;
    }

	START() {
	    return this.getToken(Cobol85Parser.START, 0);
	};

	fileName() {
	    return this.getTypedRuleContext(FileNameContext,0);
	};

	startKey() {
	    return this.getTypedRuleContext(StartKeyContext,0);
	};

	invalidKeyPhrase() {
	    return this.getTypedRuleContext(InvalidKeyPhraseContext,0);
	};

	notInvalidKeyPhrase() {
	    return this.getTypedRuleContext(NotInvalidKeyPhraseContext,0);
	};

	END_START() {
	    return this.getToken(Cobol85Parser.END_START, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterStartStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitStartStatement(this);
		}
	}


}



class StartKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_startKey;
    }

	KEY() {
	    return this.getToken(Cobol85Parser.KEY, 0);
	};

	qualifiedDataName() {
	    return this.getTypedRuleContext(QualifiedDataNameContext,0);
	};

	EQUAL() {
	    return this.getToken(Cobol85Parser.EQUAL, 0);
	};

	EQUALCHAR() {
	    return this.getToken(Cobol85Parser.EQUALCHAR, 0);
	};

	GREATER() {
	    return this.getToken(Cobol85Parser.GREATER, 0);
	};

	MORETHANCHAR() {
	    return this.getToken(Cobol85Parser.MORETHANCHAR, 0);
	};

	NOT() {
	    return this.getToken(Cobol85Parser.NOT, 0);
	};

	LESS() {
	    return this.getToken(Cobol85Parser.LESS, 0);
	};

	LESSTHANCHAR() {
	    return this.getToken(Cobol85Parser.LESSTHANCHAR, 0);
	};

	OR() {
	    return this.getToken(Cobol85Parser.OR, 0);
	};

	MORETHANOREQUAL() {
	    return this.getToken(Cobol85Parser.MORETHANOREQUAL, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	TO() {
	    return this.getToken(Cobol85Parser.TO, 0);
	};

	THAN() {
	    return this.getToken(Cobol85Parser.THAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterStartKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitStartKey(this);
		}
	}


}



class StopStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_stopStatement;
    }

	STOP() {
	    return this.getToken(Cobol85Parser.STOP, 0);
	};

	RUN() {
	    return this.getToken(Cobol85Parser.RUN, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterStopStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitStopStatement(this);
		}
	}


}



class StringStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_stringStatement;
    }

	STRING() {
	    return this.getToken(Cobol85Parser.STRING, 0);
	};

	stringIntoPhrase() {
	    return this.getTypedRuleContext(StringIntoPhraseContext,0);
	};

	stringSendingPhrase = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringSendingPhraseContext);
	    } else {
	        return this.getTypedRuleContext(StringSendingPhraseContext,i);
	    }
	};

	stringWithPointerPhrase() {
	    return this.getTypedRuleContext(StringWithPointerPhraseContext,0);
	};

	onOverflowPhrase() {
	    return this.getTypedRuleContext(OnOverflowPhraseContext,0);
	};

	notOnOverflowPhrase() {
	    return this.getTypedRuleContext(NotOnOverflowPhraseContext,0);
	};

	END_STRING() {
	    return this.getToken(Cobol85Parser.END_STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterStringStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitStringStatement(this);
		}
	}


}



class StringSendingPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_stringSendingPhrase;
    }

	stringDelimitedByPhrase() {
	    return this.getTypedRuleContext(StringDelimitedByPhraseContext,0);
	};

	stringForPhrase() {
	    return this.getTypedRuleContext(StringForPhraseContext,0);
	};

	stringSending = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringSendingContext);
	    } else {
	        return this.getTypedRuleContext(StringSendingContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterStringSendingPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitStringSendingPhrase(this);
		}
	}


}



class StringSendingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_stringSending;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterStringSending(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitStringSending(this);
		}
	}


}



class StringDelimitedByPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_stringDelimitedByPhrase;
    }

	DELIMITED() {
	    return this.getToken(Cobol85Parser.DELIMITED, 0);
	};

	SIZE() {
	    return this.getToken(Cobol85Parser.SIZE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	BY() {
	    return this.getToken(Cobol85Parser.BY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterStringDelimitedByPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitStringDelimitedByPhrase(this);
		}
	}


}



class StringForPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_stringForPhrase;
    }

	FOR() {
	    return this.getToken(Cobol85Parser.FOR, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterStringForPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitStringForPhrase(this);
		}
	}


}



class StringIntoPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_stringIntoPhrase;
    }

	INTO() {
	    return this.getToken(Cobol85Parser.INTO, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterStringIntoPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitStringIntoPhrase(this);
		}
	}


}



class StringWithPointerPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_stringWithPointerPhrase;
    }

	POINTER() {
	    return this.getToken(Cobol85Parser.POINTER, 0);
	};

	qualifiedDataName() {
	    return this.getTypedRuleContext(QualifiedDataNameContext,0);
	};

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterStringWithPointerPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitStringWithPointerPhrase(this);
		}
	}


}



class SubtractStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_subtractStatement;
    }

	SUBTRACT() {
	    return this.getToken(Cobol85Parser.SUBTRACT, 0);
	};

	subtractFromStatement() {
	    return this.getTypedRuleContext(SubtractFromStatementContext,0);
	};

	subtractFromGivingStatement() {
	    return this.getTypedRuleContext(SubtractFromGivingStatementContext,0);
	};

	subtractCorrespondingStatement() {
	    return this.getTypedRuleContext(SubtractCorrespondingStatementContext,0);
	};

	onSizeErrorPhrase() {
	    return this.getTypedRuleContext(OnSizeErrorPhraseContext,0);
	};

	notOnSizeErrorPhrase() {
	    return this.getTypedRuleContext(NotOnSizeErrorPhraseContext,0);
	};

	END_SUBTRACT() {
	    return this.getToken(Cobol85Parser.END_SUBTRACT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSubtractStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSubtractStatement(this);
		}
	}


}



class SubtractFromStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_subtractFromStatement;
    }

	FROM() {
	    return this.getToken(Cobol85Parser.FROM, 0);
	};

	subtractSubtrahend = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubtractSubtrahendContext);
	    } else {
	        return this.getTypedRuleContext(SubtractSubtrahendContext,i);
	    }
	};

	subtractMinuend = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubtractMinuendContext);
	    } else {
	        return this.getTypedRuleContext(SubtractMinuendContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSubtractFromStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSubtractFromStatement(this);
		}
	}


}



class SubtractFromGivingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_subtractFromGivingStatement;
    }

	FROM() {
	    return this.getToken(Cobol85Parser.FROM, 0);
	};

	subtractMinuendGiving() {
	    return this.getTypedRuleContext(SubtractMinuendGivingContext,0);
	};

	GIVING() {
	    return this.getToken(Cobol85Parser.GIVING, 0);
	};

	subtractSubtrahend = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubtractSubtrahendContext);
	    } else {
	        return this.getTypedRuleContext(SubtractSubtrahendContext,i);
	    }
	};

	subtractGiving = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubtractGivingContext);
	    } else {
	        return this.getTypedRuleContext(SubtractGivingContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSubtractFromGivingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSubtractFromGivingStatement(this);
		}
	}


}



class SubtractCorrespondingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_subtractCorrespondingStatement;
    }

	qualifiedDataName() {
	    return this.getTypedRuleContext(QualifiedDataNameContext,0);
	};

	FROM() {
	    return this.getToken(Cobol85Parser.FROM, 0);
	};

	subtractMinuendCorresponding() {
	    return this.getTypedRuleContext(SubtractMinuendCorrespondingContext,0);
	};

	CORRESPONDING() {
	    return this.getToken(Cobol85Parser.CORRESPONDING, 0);
	};

	CORR() {
	    return this.getToken(Cobol85Parser.CORR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSubtractCorrespondingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSubtractCorrespondingStatement(this);
		}
	}


}



class SubtractSubtrahendContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_subtractSubtrahend;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSubtractSubtrahend(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSubtractSubtrahend(this);
		}
	}


}



class SubtractMinuendContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_subtractMinuend;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ROUNDED() {
	    return this.getToken(Cobol85Parser.ROUNDED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSubtractMinuend(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSubtractMinuend(this);
		}
	}


}



class SubtractMinuendGivingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_subtractMinuendGiving;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSubtractMinuendGiving(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSubtractMinuendGiving(this);
		}
	}


}



class SubtractGivingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_subtractGiving;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ROUNDED() {
	    return this.getToken(Cobol85Parser.ROUNDED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSubtractGiving(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSubtractGiving(this);
		}
	}


}



class SubtractMinuendCorrespondingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_subtractMinuendCorresponding;
    }

	qualifiedDataName() {
	    return this.getTypedRuleContext(QualifiedDataNameContext,0);
	};

	ROUNDED() {
	    return this.getToken(Cobol85Parser.ROUNDED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSubtractMinuendCorresponding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSubtractMinuendCorresponding(this);
		}
	}


}



class TerminateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_terminateStatement;
    }

	TERMINATE() {
	    return this.getToken(Cobol85Parser.TERMINATE, 0);
	};

	reportName() {
	    return this.getTypedRuleContext(ReportNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterTerminateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitTerminateStatement(this);
		}
	}


}



class UnstringStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_unstringStatement;
    }

	UNSTRING() {
	    return this.getToken(Cobol85Parser.UNSTRING, 0);
	};

	unstringSendingPhrase() {
	    return this.getTypedRuleContext(UnstringSendingPhraseContext,0);
	};

	unstringIntoPhrase() {
	    return this.getTypedRuleContext(UnstringIntoPhraseContext,0);
	};

	unstringWithPointerPhrase() {
	    return this.getTypedRuleContext(UnstringWithPointerPhraseContext,0);
	};

	unstringTallyingPhrase() {
	    return this.getTypedRuleContext(UnstringTallyingPhraseContext,0);
	};

	onOverflowPhrase() {
	    return this.getTypedRuleContext(OnOverflowPhraseContext,0);
	};

	notOnOverflowPhrase() {
	    return this.getTypedRuleContext(NotOnOverflowPhraseContext,0);
	};

	END_UNSTRING() {
	    return this.getToken(Cobol85Parser.END_UNSTRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterUnstringStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitUnstringStatement(this);
		}
	}


}



class UnstringSendingPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_unstringSendingPhrase;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	unstringDelimitedByPhrase() {
	    return this.getTypedRuleContext(UnstringDelimitedByPhraseContext,0);
	};

	unstringOrAllPhrase = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnstringOrAllPhraseContext);
	    } else {
	        return this.getTypedRuleContext(UnstringOrAllPhraseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterUnstringSendingPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitUnstringSendingPhrase(this);
		}
	}


}



class UnstringDelimitedByPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_unstringDelimitedByPhrase;
    }

	DELIMITED() {
	    return this.getToken(Cobol85Parser.DELIMITED, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	BY() {
	    return this.getToken(Cobol85Parser.BY, 0);
	};

	ALL() {
	    return this.getToken(Cobol85Parser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterUnstringDelimitedByPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitUnstringDelimitedByPhrase(this);
		}
	}


}



class UnstringOrAllPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_unstringOrAllPhrase;
    }

	OR() {
	    return this.getToken(Cobol85Parser.OR, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	ALL() {
	    return this.getToken(Cobol85Parser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterUnstringOrAllPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitUnstringOrAllPhrase(this);
		}
	}


}



class UnstringIntoPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_unstringIntoPhrase;
    }

	INTO() {
	    return this.getToken(Cobol85Parser.INTO, 0);
	};

	unstringInto = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnstringIntoContext);
	    } else {
	        return this.getTypedRuleContext(UnstringIntoContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterUnstringIntoPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitUnstringIntoPhrase(this);
		}
	}


}



class UnstringIntoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_unstringInto;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	unstringDelimiterIn() {
	    return this.getTypedRuleContext(UnstringDelimiterInContext,0);
	};

	unstringCountIn() {
	    return this.getTypedRuleContext(UnstringCountInContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterUnstringInto(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitUnstringInto(this);
		}
	}


}



class UnstringDelimiterInContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_unstringDelimiterIn;
    }

	DELIMITER() {
	    return this.getToken(Cobol85Parser.DELIMITER, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IN() {
	    return this.getToken(Cobol85Parser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterUnstringDelimiterIn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitUnstringDelimiterIn(this);
		}
	}


}



class UnstringCountInContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_unstringCountIn;
    }

	COUNT() {
	    return this.getToken(Cobol85Parser.COUNT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IN() {
	    return this.getToken(Cobol85Parser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterUnstringCountIn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitUnstringCountIn(this);
		}
	}


}



class UnstringWithPointerPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_unstringWithPointerPhrase;
    }

	POINTER() {
	    return this.getToken(Cobol85Parser.POINTER, 0);
	};

	qualifiedDataName() {
	    return this.getTypedRuleContext(QualifiedDataNameContext,0);
	};

	WITH() {
	    return this.getToken(Cobol85Parser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterUnstringWithPointerPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitUnstringWithPointerPhrase(this);
		}
	}


}



class UnstringTallyingPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_unstringTallyingPhrase;
    }

	TALLYING() {
	    return this.getToken(Cobol85Parser.TALLYING, 0);
	};

	qualifiedDataName() {
	    return this.getTypedRuleContext(QualifiedDataNameContext,0);
	};

	IN() {
	    return this.getToken(Cobol85Parser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterUnstringTallyingPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitUnstringTallyingPhrase(this);
		}
	}


}



class UseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_useStatement;
    }

	USE() {
	    return this.getToken(Cobol85Parser.USE, 0);
	};

	useAfterClause() {
	    return this.getTypedRuleContext(UseAfterClauseContext,0);
	};

	useDebugClause() {
	    return this.getTypedRuleContext(UseDebugClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterUseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitUseStatement(this);
		}
	}


}



class UseAfterClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_useAfterClause;
    }

	AFTER() {
	    return this.getToken(Cobol85Parser.AFTER, 0);
	};

	PROCEDURE() {
	    return this.getToken(Cobol85Parser.PROCEDURE, 0);
	};

	useAfterOn() {
	    return this.getTypedRuleContext(UseAfterOnContext,0);
	};

	EXCEPTION() {
	    return this.getToken(Cobol85Parser.EXCEPTION, 0);
	};

	ERROR() {
	    return this.getToken(Cobol85Parser.ERROR, 0);
	};

	GLOBAL() {
	    return this.getToken(Cobol85Parser.GLOBAL, 0);
	};

	STANDARD() {
	    return this.getToken(Cobol85Parser.STANDARD, 0);
	};

	ON() {
	    return this.getToken(Cobol85Parser.ON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterUseAfterClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitUseAfterClause(this);
		}
	}


}



class UseAfterOnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_useAfterOn;
    }

	INPUT() {
	    return this.getToken(Cobol85Parser.INPUT, 0);
	};

	OUTPUT() {
	    return this.getToken(Cobol85Parser.OUTPUT, 0);
	};

	I_O() {
	    return this.getToken(Cobol85Parser.I_O, 0);
	};

	EXTEND() {
	    return this.getToken(Cobol85Parser.EXTEND, 0);
	};

	fileName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FileNameContext);
	    } else {
	        return this.getTypedRuleContext(FileNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterUseAfterOn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitUseAfterOn(this);
		}
	}


}



class UseDebugClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_useDebugClause;
    }

	DEBUGGING() {
	    return this.getToken(Cobol85Parser.DEBUGGING, 0);
	};

	FOR() {
	    return this.getToken(Cobol85Parser.FOR, 0);
	};

	ON() {
	    return this.getToken(Cobol85Parser.ON, 0);
	};

	useDebugOn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UseDebugOnContext);
	    } else {
	        return this.getTypedRuleContext(UseDebugOnContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterUseDebugClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitUseDebugClause(this);
		}
	}


}



class UseDebugOnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_useDebugOn;
    }

	ALL() {
	    return this.getToken(Cobol85Parser.ALL, 0);
	};

	PROCEDURES() {
	    return this.getToken(Cobol85Parser.PROCEDURES, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	REFERENCES() {
	    return this.getToken(Cobol85Parser.REFERENCES, 0);
	};

	OF() {
	    return this.getToken(Cobol85Parser.OF, 0);
	};

	procedureName() {
	    return this.getTypedRuleContext(ProcedureNameContext,0);
	};

	fileName() {
	    return this.getTypedRuleContext(FileNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterUseDebugOn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitUseDebugOn(this);
		}
	}


}



class WriteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_writeStatement;
    }

	WRITE() {
	    return this.getToken(Cobol85Parser.WRITE, 0);
	};

	recordName() {
	    return this.getTypedRuleContext(RecordNameContext,0);
	};

	writeFromPhrase() {
	    return this.getTypedRuleContext(WriteFromPhraseContext,0);
	};

	writeAdvancingPhrase() {
	    return this.getTypedRuleContext(WriteAdvancingPhraseContext,0);
	};

	writeAtEndOfPagePhrase() {
	    return this.getTypedRuleContext(WriteAtEndOfPagePhraseContext,0);
	};

	writeNotAtEndOfPagePhrase() {
	    return this.getTypedRuleContext(WriteNotAtEndOfPagePhraseContext,0);
	};

	invalidKeyPhrase() {
	    return this.getTypedRuleContext(InvalidKeyPhraseContext,0);
	};

	notInvalidKeyPhrase() {
	    return this.getTypedRuleContext(NotInvalidKeyPhraseContext,0);
	};

	END_WRITE() {
	    return this.getToken(Cobol85Parser.END_WRITE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterWriteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitWriteStatement(this);
		}
	}


}



class WriteFromPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_writeFromPhrase;
    }

	FROM() {
	    return this.getToken(Cobol85Parser.FROM, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterWriteFromPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitWriteFromPhrase(this);
		}
	}


}



class WriteAdvancingPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_writeAdvancingPhrase;
    }

	BEFORE() {
	    return this.getToken(Cobol85Parser.BEFORE, 0);
	};

	AFTER() {
	    return this.getToken(Cobol85Parser.AFTER, 0);
	};

	writeAdvancingPage() {
	    return this.getTypedRuleContext(WriteAdvancingPageContext,0);
	};

	writeAdvancingLines() {
	    return this.getTypedRuleContext(WriteAdvancingLinesContext,0);
	};

	writeAdvancingMnemonic() {
	    return this.getTypedRuleContext(WriteAdvancingMnemonicContext,0);
	};

	ADVANCING() {
	    return this.getToken(Cobol85Parser.ADVANCING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterWriteAdvancingPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitWriteAdvancingPhrase(this);
		}
	}


}



class WriteAdvancingPageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_writeAdvancingPage;
    }

	PAGE() {
	    return this.getToken(Cobol85Parser.PAGE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterWriteAdvancingPage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitWriteAdvancingPage(this);
		}
	}


}



class WriteAdvancingLinesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_writeAdvancingLines;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	LINE() {
	    return this.getToken(Cobol85Parser.LINE, 0);
	};

	LINES() {
	    return this.getToken(Cobol85Parser.LINES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterWriteAdvancingLines(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitWriteAdvancingLines(this);
		}
	}


}



class WriteAdvancingMnemonicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_writeAdvancingMnemonic;
    }

	mnemonicName() {
	    return this.getTypedRuleContext(MnemonicNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterWriteAdvancingMnemonic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitWriteAdvancingMnemonic(this);
		}
	}


}



class WriteAtEndOfPagePhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_writeAtEndOfPagePhrase;
    }

	END_OF_PAGE() {
	    return this.getToken(Cobol85Parser.END_OF_PAGE, 0);
	};

	EOP() {
	    return this.getToken(Cobol85Parser.EOP, 0);
	};

	AT() {
	    return this.getToken(Cobol85Parser.AT, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterWriteAtEndOfPagePhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitWriteAtEndOfPagePhrase(this);
		}
	}


}



class WriteNotAtEndOfPagePhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_writeNotAtEndOfPagePhrase;
    }

	NOT() {
	    return this.getToken(Cobol85Parser.NOT, 0);
	};

	END_OF_PAGE() {
	    return this.getToken(Cobol85Parser.END_OF_PAGE, 0);
	};

	EOP() {
	    return this.getToken(Cobol85Parser.EOP, 0);
	};

	AT() {
	    return this.getToken(Cobol85Parser.AT, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterWriteNotAtEndOfPagePhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitWriteNotAtEndOfPagePhrase(this);
		}
	}


}



class AtEndPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_atEndPhrase;
    }

	END() {
	    return this.getToken(Cobol85Parser.END, 0);
	};

	AT() {
	    return this.getToken(Cobol85Parser.AT, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAtEndPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAtEndPhrase(this);
		}
	}


}



class NotAtEndPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_notAtEndPhrase;
    }

	NOT() {
	    return this.getToken(Cobol85Parser.NOT, 0);
	};

	END() {
	    return this.getToken(Cobol85Parser.END, 0);
	};

	AT() {
	    return this.getToken(Cobol85Parser.AT, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterNotAtEndPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitNotAtEndPhrase(this);
		}
	}


}



class InvalidKeyPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_invalidKeyPhrase;
    }

	INVALID() {
	    return this.getToken(Cobol85Parser.INVALID, 0);
	};

	KEY() {
	    return this.getToken(Cobol85Parser.KEY, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInvalidKeyPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInvalidKeyPhrase(this);
		}
	}


}



class NotInvalidKeyPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_notInvalidKeyPhrase;
    }

	NOT() {
	    return this.getToken(Cobol85Parser.NOT, 0);
	};

	INVALID() {
	    return this.getToken(Cobol85Parser.INVALID, 0);
	};

	KEY() {
	    return this.getToken(Cobol85Parser.KEY, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterNotInvalidKeyPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitNotInvalidKeyPhrase(this);
		}
	}


}



class OnOverflowPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_onOverflowPhrase;
    }

	OVERFLOW() {
	    return this.getToken(Cobol85Parser.OVERFLOW, 0);
	};

	ON() {
	    return this.getToken(Cobol85Parser.ON, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterOnOverflowPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitOnOverflowPhrase(this);
		}
	}


}



class NotOnOverflowPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_notOnOverflowPhrase;
    }

	NOT() {
	    return this.getToken(Cobol85Parser.NOT, 0);
	};

	OVERFLOW() {
	    return this.getToken(Cobol85Parser.OVERFLOW, 0);
	};

	ON() {
	    return this.getToken(Cobol85Parser.ON, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterNotOnOverflowPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitNotOnOverflowPhrase(this);
		}
	}


}



class OnSizeErrorPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_onSizeErrorPhrase;
    }

	SIZE() {
	    return this.getToken(Cobol85Parser.SIZE, 0);
	};

	ERROR() {
	    return this.getToken(Cobol85Parser.ERROR, 0);
	};

	ON() {
	    return this.getToken(Cobol85Parser.ON, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterOnSizeErrorPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitOnSizeErrorPhrase(this);
		}
	}


}



class NotOnSizeErrorPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_notOnSizeErrorPhrase;
    }

	NOT() {
	    return this.getToken(Cobol85Parser.NOT, 0);
	};

	SIZE() {
	    return this.getToken(Cobol85Parser.SIZE, 0);
	};

	ERROR() {
	    return this.getToken(Cobol85Parser.ERROR, 0);
	};

	ON() {
	    return this.getToken(Cobol85Parser.ON, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterNotOnSizeErrorPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitNotOnSizeErrorPhrase(this);
		}
	}


}



class OnExceptionClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_onExceptionClause;
    }

	EXCEPTION() {
	    return this.getToken(Cobol85Parser.EXCEPTION, 0);
	};

	ON() {
	    return this.getToken(Cobol85Parser.ON, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterOnExceptionClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitOnExceptionClause(this);
		}
	}


}



class NotOnExceptionClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_notOnExceptionClause;
    }

	NOT() {
	    return this.getToken(Cobol85Parser.NOT, 0);
	};

	EXCEPTION() {
	    return this.getToken(Cobol85Parser.EXCEPTION, 0);
	};

	ON() {
	    return this.getToken(Cobol85Parser.ON, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterNotOnExceptionClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitNotOnExceptionClause(this);
		}
	}


}



class ArithmeticExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_arithmeticExpression;
    }

	multDivs() {
	    return this.getTypedRuleContext(MultDivsContext,0);
	};

	plusMinus = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PlusMinusContext);
	    } else {
	        return this.getTypedRuleContext(PlusMinusContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterArithmeticExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitArithmeticExpression(this);
		}
	}


}



class PlusMinusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_plusMinus;
    }

	multDivs() {
	    return this.getTypedRuleContext(MultDivsContext,0);
	};

	PLUSCHAR() {
	    return this.getToken(Cobol85Parser.PLUSCHAR, 0);
	};

	MINUSCHAR() {
	    return this.getToken(Cobol85Parser.MINUSCHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterPlusMinus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitPlusMinus(this);
		}
	}


}



class MultDivsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_multDivs;
    }

	powers() {
	    return this.getTypedRuleContext(PowersContext,0);
	};

	multDiv = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultDivContext);
	    } else {
	        return this.getTypedRuleContext(MultDivContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMultDivs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMultDivs(this);
		}
	}


}



class MultDivContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_multDiv;
    }

	powers() {
	    return this.getTypedRuleContext(PowersContext,0);
	};

	ASTERISKCHAR() {
	    return this.getToken(Cobol85Parser.ASTERISKCHAR, 0);
	};

	SLASHCHAR() {
	    return this.getToken(Cobol85Parser.SLASHCHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMultDiv(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMultDiv(this);
		}
	}


}



class PowersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_powers;
    }

	basis() {
	    return this.getTypedRuleContext(BasisContext,0);
	};

	power = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PowerContext);
	    } else {
	        return this.getTypedRuleContext(PowerContext,i);
	    }
	};

	PLUSCHAR() {
	    return this.getToken(Cobol85Parser.PLUSCHAR, 0);
	};

	MINUSCHAR() {
	    return this.getToken(Cobol85Parser.MINUSCHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterPowers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitPowers(this);
		}
	}


}



class PowerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_power;
    }

	DOUBLEASTERISKCHAR() {
	    return this.getToken(Cobol85Parser.DOUBLEASTERISKCHAR, 0);
	};

	basis() {
	    return this.getTypedRuleContext(BasisContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterPower(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitPower(this);
		}
	}


}



class BasisContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_basis;
    }

	LPARENCHAR() {
	    return this.getToken(Cobol85Parser.LPARENCHAR, 0);
	};

	arithmeticExpression() {
	    return this.getTypedRuleContext(ArithmeticExpressionContext,0);
	};

	RPARENCHAR() {
	    return this.getToken(Cobol85Parser.RPARENCHAR, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterBasis(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitBasis(this);
		}
	}


}



class ConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_condition;
    }

	combinableCondition() {
	    return this.getTypedRuleContext(CombinableConditionContext,0);
	};

	andOrCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AndOrConditionContext);
	    } else {
	        return this.getTypedRuleContext(AndOrConditionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCondition(this);
		}
	}


}



class AndOrConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_andOrCondition;
    }

	AND() {
	    return this.getToken(Cobol85Parser.AND, 0);
	};

	OR() {
	    return this.getToken(Cobol85Parser.OR, 0);
	};

	combinableCondition() {
	    return this.getTypedRuleContext(CombinableConditionContext,0);
	};

	abbreviation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AbbreviationContext);
	    } else {
	        return this.getTypedRuleContext(AbbreviationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAndOrCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAndOrCondition(this);
		}
	}


}



class CombinableConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_combinableCondition;
    }

	simpleCondition() {
	    return this.getTypedRuleContext(SimpleConditionContext,0);
	};

	NOT() {
	    return this.getToken(Cobol85Parser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCombinableCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCombinableCondition(this);
		}
	}


}



class SimpleConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_simpleCondition;
    }

	LPARENCHAR() {
	    return this.getToken(Cobol85Parser.LPARENCHAR, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	RPARENCHAR() {
	    return this.getToken(Cobol85Parser.RPARENCHAR, 0);
	};

	relationCondition() {
	    return this.getTypedRuleContext(RelationConditionContext,0);
	};

	classCondition() {
	    return this.getTypedRuleContext(ClassConditionContext,0);
	};

	conditionNameReference() {
	    return this.getTypedRuleContext(ConditionNameReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSimpleCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSimpleCondition(this);
		}
	}


}



class ClassConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_classCondition;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	NUMERIC() {
	    return this.getToken(Cobol85Parser.NUMERIC, 0);
	};

	ALPHABETIC() {
	    return this.getToken(Cobol85Parser.ALPHABETIC, 0);
	};

	ALPHABETIC_LOWER() {
	    return this.getToken(Cobol85Parser.ALPHABETIC_LOWER, 0);
	};

	ALPHABETIC_UPPER() {
	    return this.getToken(Cobol85Parser.ALPHABETIC_UPPER, 0);
	};

	DBCS() {
	    return this.getToken(Cobol85Parser.DBCS, 0);
	};

	KANJI() {
	    return this.getToken(Cobol85Parser.KANJI, 0);
	};

	className() {
	    return this.getTypedRuleContext(ClassNameContext,0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	NOT() {
	    return this.getToken(Cobol85Parser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterClassCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitClassCondition(this);
		}
	}


}



class ConditionNameReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_conditionNameReference;
    }

	conditionName() {
	    return this.getTypedRuleContext(ConditionNameContext,0);
	};

	inData = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InDataContext);
	    } else {
	        return this.getTypedRuleContext(InDataContext,i);
	    }
	};

	inFile() {
	    return this.getTypedRuleContext(InFileContext,0);
	};

	conditionNameSubscriptReference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionNameSubscriptReferenceContext);
	    } else {
	        return this.getTypedRuleContext(ConditionNameSubscriptReferenceContext,i);
	    }
	};

	inMnemonic = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InMnemonicContext);
	    } else {
	        return this.getTypedRuleContext(InMnemonicContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterConditionNameReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitConditionNameReference(this);
		}
	}


}



class ConditionNameSubscriptReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_conditionNameSubscriptReference;
    }

	LPARENCHAR() {
	    return this.getToken(Cobol85Parser.LPARENCHAR, 0);
	};

	subscript_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Subscript_Context);
	    } else {
	        return this.getTypedRuleContext(Subscript_Context,i);
	    }
	};

	RPARENCHAR() {
	    return this.getToken(Cobol85Parser.RPARENCHAR, 0);
	};

	COMMACHAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.COMMACHAR);
	    } else {
	        return this.getToken(Cobol85Parser.COMMACHAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterConditionNameSubscriptReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitConditionNameSubscriptReference(this);
		}
	}


}



class RelationConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_relationCondition;
    }

	relationSignCondition() {
	    return this.getTypedRuleContext(RelationSignConditionContext,0);
	};

	relationArithmeticComparison() {
	    return this.getTypedRuleContext(RelationArithmeticComparisonContext,0);
	};

	relationCombinedComparison() {
	    return this.getTypedRuleContext(RelationCombinedComparisonContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterRelationCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitRelationCondition(this);
		}
	}


}



class RelationSignConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_relationSignCondition;
    }

	arithmeticExpression() {
	    return this.getTypedRuleContext(ArithmeticExpressionContext,0);
	};

	POSITIVE() {
	    return this.getToken(Cobol85Parser.POSITIVE, 0);
	};

	NEGATIVE() {
	    return this.getToken(Cobol85Parser.NEGATIVE, 0);
	};

	ZERO() {
	    return this.getToken(Cobol85Parser.ZERO, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	NOT() {
	    return this.getToken(Cobol85Parser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterRelationSignCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitRelationSignCondition(this);
		}
	}


}



class RelationArithmeticComparisonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_relationArithmeticComparison;
    }

	arithmeticExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArithmeticExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ArithmeticExpressionContext,i);
	    }
	};

	relationalOperator() {
	    return this.getTypedRuleContext(RelationalOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterRelationArithmeticComparison(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitRelationArithmeticComparison(this);
		}
	}


}



class RelationCombinedComparisonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_relationCombinedComparison;
    }

	arithmeticExpression() {
	    return this.getTypedRuleContext(ArithmeticExpressionContext,0);
	};

	relationalOperator() {
	    return this.getTypedRuleContext(RelationalOperatorContext,0);
	};

	LPARENCHAR() {
	    return this.getToken(Cobol85Parser.LPARENCHAR, 0);
	};

	relationCombinedCondition() {
	    return this.getTypedRuleContext(RelationCombinedConditionContext,0);
	};

	RPARENCHAR() {
	    return this.getToken(Cobol85Parser.RPARENCHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterRelationCombinedComparison(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitRelationCombinedComparison(this);
		}
	}


}



class RelationCombinedConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_relationCombinedCondition;
    }

	arithmeticExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArithmeticExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ArithmeticExpressionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.AND);
	    } else {
	        return this.getToken(Cobol85Parser.AND, i);
	    }
	};


	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.OR);
	    } else {
	        return this.getToken(Cobol85Parser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterRelationCombinedCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitRelationCombinedCondition(this);
		}
	}


}



class RelationalOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_relationalOperator;
    }

	NOTEQUALCHAR() {
	    return this.getToken(Cobol85Parser.NOTEQUALCHAR, 0);
	};

	GREATER() {
	    return this.getToken(Cobol85Parser.GREATER, 0);
	};

	OR() {
	    return this.getToken(Cobol85Parser.OR, 0);
	};

	EQUAL() {
	    return this.getToken(Cobol85Parser.EQUAL, 0);
	};

	MORETHANOREQUAL() {
	    return this.getToken(Cobol85Parser.MORETHANOREQUAL, 0);
	};

	LESS() {
	    return this.getToken(Cobol85Parser.LESS, 0);
	};

	LESSTHANOREQUAL() {
	    return this.getToken(Cobol85Parser.LESSTHANOREQUAL, 0);
	};

	IS() {
	    return this.getToken(Cobol85Parser.IS, 0);
	};

	ARE() {
	    return this.getToken(Cobol85Parser.ARE, 0);
	};

	MORETHANCHAR() {
	    return this.getToken(Cobol85Parser.MORETHANCHAR, 0);
	};

	LESSTHANCHAR() {
	    return this.getToken(Cobol85Parser.LESSTHANCHAR, 0);
	};

	EQUALCHAR() {
	    return this.getToken(Cobol85Parser.EQUALCHAR, 0);
	};

	NOT() {
	    return this.getToken(Cobol85Parser.NOT, 0);
	};

	THAN() {
	    return this.getToken(Cobol85Parser.THAN, 0);
	};

	TO() {
	    return this.getToken(Cobol85Parser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterRelationalOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitRelationalOperator(this);
		}
	}


}



class AbbreviationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_abbreviation;
    }

	arithmeticExpression() {
	    return this.getTypedRuleContext(ArithmeticExpressionContext,0);
	};

	LPARENCHAR() {
	    return this.getToken(Cobol85Parser.LPARENCHAR, 0);
	};

	abbreviation() {
	    return this.getTypedRuleContext(AbbreviationContext,0);
	};

	RPARENCHAR() {
	    return this.getToken(Cobol85Parser.RPARENCHAR, 0);
	};

	NOT() {
	    return this.getToken(Cobol85Parser.NOT, 0);
	};

	relationalOperator() {
	    return this.getTypedRuleContext(RelationalOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAbbreviation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAbbreviation(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_identifier;
    }

	qualifiedDataName() {
	    return this.getTypedRuleContext(QualifiedDataNameContext,0);
	};

	tableCall() {
	    return this.getTypedRuleContext(TableCallContext,0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	specialRegister() {
	    return this.getTypedRuleContext(SpecialRegisterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class TableCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_tableCall;
    }

	qualifiedDataName() {
	    return this.getTypedRuleContext(QualifiedDataNameContext,0);
	};

	LPARENCHAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.LPARENCHAR);
	    } else {
	        return this.getToken(Cobol85Parser.LPARENCHAR, i);
	    }
	};


	subscript_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Subscript_Context);
	    } else {
	        return this.getTypedRuleContext(Subscript_Context,i);
	    }
	};

	RPARENCHAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.RPARENCHAR);
	    } else {
	        return this.getToken(Cobol85Parser.RPARENCHAR, i);
	    }
	};


	referenceModifier() {
	    return this.getTypedRuleContext(ReferenceModifierContext,0);
	};

	COMMACHAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.COMMACHAR);
	    } else {
	        return this.getToken(Cobol85Parser.COMMACHAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterTableCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitTableCall(this);
		}
	}


}



class FunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_functionCall;
    }

	FUNCTION() {
	    return this.getToken(Cobol85Parser.FUNCTION, 0);
	};

	functionName() {
	    return this.getTypedRuleContext(FunctionNameContext,0);
	};

	LPARENCHAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.LPARENCHAR);
	    } else {
	        return this.getToken(Cobol85Parser.LPARENCHAR, i);
	    }
	};


	argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentContext,i);
	    }
	};

	RPARENCHAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.RPARENCHAR);
	    } else {
	        return this.getToken(Cobol85Parser.RPARENCHAR, i);
	    }
	};


	referenceModifier() {
	    return this.getTypedRuleContext(ReferenceModifierContext,0);
	};

	COMMACHAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.COMMACHAR);
	    } else {
	        return this.getToken(Cobol85Parser.COMMACHAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitFunctionCall(this);
		}
	}


}



class ReferenceModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_referenceModifier;
    }

	LPARENCHAR() {
	    return this.getToken(Cobol85Parser.LPARENCHAR, 0);
	};

	characterPosition() {
	    return this.getTypedRuleContext(CharacterPositionContext,0);
	};

	COLONCHAR() {
	    return this.getToken(Cobol85Parser.COLONCHAR, 0);
	};

	RPARENCHAR() {
	    return this.getToken(Cobol85Parser.RPARENCHAR, 0);
	};

	length() {
	    return this.getTypedRuleContext(LengthContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReferenceModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReferenceModifier(this);
		}
	}


}



class CharacterPositionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_characterPosition;
    }

	arithmeticExpression() {
	    return this.getTypedRuleContext(ArithmeticExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCharacterPosition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCharacterPosition(this);
		}
	}


}



class LengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_length;
    }

	arithmeticExpression() {
	    return this.getTypedRuleContext(ArithmeticExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLength(this);
		}
	}


}



class Subscript_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_subscript_;
    }

	ALL() {
	    return this.getToken(Cobol85Parser.ALL, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	qualifiedDataName() {
	    return this.getTypedRuleContext(QualifiedDataNameContext,0);
	};

	indexName() {
	    return this.getTypedRuleContext(IndexNameContext,0);
	};

	arithmeticExpression() {
	    return this.getTypedRuleContext(ArithmeticExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSubscript_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSubscript_(this);
		}
	}


}



class ArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_argument;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	qualifiedDataName() {
	    return this.getTypedRuleContext(QualifiedDataNameContext,0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	indexName() {
	    return this.getTypedRuleContext(IndexNameContext,0);
	};

	arithmeticExpression() {
	    return this.getTypedRuleContext(ArithmeticExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitArgument(this);
		}
	}


}



class QualifiedDataNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_qualifiedDataName;
    }

	qualifiedDataNameFormat1() {
	    return this.getTypedRuleContext(QualifiedDataNameFormat1Context,0);
	};

	qualifiedDataNameFormat2() {
	    return this.getTypedRuleContext(QualifiedDataNameFormat2Context,0);
	};

	qualifiedDataNameFormat3() {
	    return this.getTypedRuleContext(QualifiedDataNameFormat3Context,0);
	};

	qualifiedDataNameFormat4() {
	    return this.getTypedRuleContext(QualifiedDataNameFormat4Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterQualifiedDataName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitQualifiedDataName(this);
		}
	}


}



class QualifiedDataNameFormat1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_qualifiedDataNameFormat1;
    }

	dataName() {
	    return this.getTypedRuleContext(DataNameContext,0);
	};

	conditionName() {
	    return this.getTypedRuleContext(ConditionNameContext,0);
	};

	inFile() {
	    return this.getTypedRuleContext(InFileContext,0);
	};

	qualifiedInData = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedInDataContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedInDataContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterQualifiedDataNameFormat1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitQualifiedDataNameFormat1(this);
		}
	}


}



class QualifiedDataNameFormat2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_qualifiedDataNameFormat2;
    }

	paragraphName() {
	    return this.getTypedRuleContext(ParagraphNameContext,0);
	};

	inSection() {
	    return this.getTypedRuleContext(InSectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterQualifiedDataNameFormat2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitQualifiedDataNameFormat2(this);
		}
	}


}



class QualifiedDataNameFormat3Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_qualifiedDataNameFormat3;
    }

	textName() {
	    return this.getTypedRuleContext(TextNameContext,0);
	};

	inLibrary() {
	    return this.getTypedRuleContext(InLibraryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterQualifiedDataNameFormat3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitQualifiedDataNameFormat3(this);
		}
	}


}



class QualifiedDataNameFormat4Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_qualifiedDataNameFormat4;
    }

	LINAGE_COUNTER() {
	    return this.getToken(Cobol85Parser.LINAGE_COUNTER, 0);
	};

	inFile() {
	    return this.getTypedRuleContext(InFileContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterQualifiedDataNameFormat4(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitQualifiedDataNameFormat4(this);
		}
	}


}



class QualifiedInDataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_qualifiedInData;
    }

	inData() {
	    return this.getTypedRuleContext(InDataContext,0);
	};

	inTable() {
	    return this.getTypedRuleContext(InTableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterQualifiedInData(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitQualifiedInData(this);
		}
	}


}



class InDataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_inData;
    }

	dataName() {
	    return this.getTypedRuleContext(DataNameContext,0);
	};

	IN() {
	    return this.getToken(Cobol85Parser.IN, 0);
	};

	OF() {
	    return this.getToken(Cobol85Parser.OF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInData(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInData(this);
		}
	}


}



class InFileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_inFile;
    }

	fileName() {
	    return this.getTypedRuleContext(FileNameContext,0);
	};

	IN() {
	    return this.getToken(Cobol85Parser.IN, 0);
	};

	OF() {
	    return this.getToken(Cobol85Parser.OF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInFile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInFile(this);
		}
	}


}



class InMnemonicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_inMnemonic;
    }

	mnemonicName() {
	    return this.getTypedRuleContext(MnemonicNameContext,0);
	};

	IN() {
	    return this.getToken(Cobol85Parser.IN, 0);
	};

	OF() {
	    return this.getToken(Cobol85Parser.OF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInMnemonic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInMnemonic(this);
		}
	}


}



class InSectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_inSection;
    }

	sectionName() {
	    return this.getTypedRuleContext(SectionNameContext,0);
	};

	IN() {
	    return this.getToken(Cobol85Parser.IN, 0);
	};

	OF() {
	    return this.getToken(Cobol85Parser.OF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInSection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInSection(this);
		}
	}


}



class InLibraryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_inLibrary;
    }

	libraryName() {
	    return this.getTypedRuleContext(LibraryNameContext,0);
	};

	IN() {
	    return this.getToken(Cobol85Parser.IN, 0);
	};

	OF() {
	    return this.getToken(Cobol85Parser.OF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInLibrary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInLibrary(this);
		}
	}


}



class InTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_inTable;
    }

	tableCall() {
	    return this.getTypedRuleContext(TableCallContext,0);
	};

	IN() {
	    return this.getToken(Cobol85Parser.IN, 0);
	};

	OF() {
	    return this.getToken(Cobol85Parser.OF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterInTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitInTable(this);
		}
	}


}



class AlphabetNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_alphabetName;
    }

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAlphabetName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAlphabetName(this);
		}
	}


}



class AssignmentNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_assignmentName;
    }

	systemName() {
	    return this.getTypedRuleContext(SystemNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterAssignmentName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitAssignmentName(this);
		}
	}


}



class BasisNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_basisName;
    }

	programName() {
	    return this.getTypedRuleContext(ProgramNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterBasisName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitBasisName(this);
		}
	}


}



class CdNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_cdName;
    }

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCdName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCdName(this);
		}
	}


}



class ClassNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_className;
    }

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterClassName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitClassName(this);
		}
	}


}



class ComputerNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_computerName;
    }

	systemName() {
	    return this.getTypedRuleContext(SystemNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterComputerName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitComputerName(this);
		}
	}


}



class ConditionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_conditionName;
    }

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterConditionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitConditionName(this);
		}
	}


}



class DataNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataName;
    }

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataName(this);
		}
	}


}



class DataDescNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_dataDescName;
    }

	FILLER() {
	    return this.getToken(Cobol85Parser.FILLER, 0);
	};

	CURSOR() {
	    return this.getToken(Cobol85Parser.CURSOR, 0);
	};

	dataName() {
	    return this.getTypedRuleContext(DataNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterDataDescName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitDataDescName(this);
		}
	}


}



class EnvironmentNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_environmentName;
    }

	systemName() {
	    return this.getTypedRuleContext(SystemNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterEnvironmentName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitEnvironmentName(this);
		}
	}


}



class FileNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_fileName;
    }

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterFileName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitFileName(this);
		}
	}


}



class FunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_functionName;
    }

	INTEGER() {
	    return this.getToken(Cobol85Parser.INTEGER, 0);
	};

	LENGTH() {
	    return this.getToken(Cobol85Parser.LENGTH, 0);
	};

	RANDOM() {
	    return this.getToken(Cobol85Parser.RANDOM, 0);
	};

	SUM() {
	    return this.getToken(Cobol85Parser.SUM, 0);
	};

	WHEN_COMPILED() {
	    return this.getToken(Cobol85Parser.WHEN_COMPILED, 0);
	};

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitFunctionName(this);
		}
	}


}



class IndexNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_indexName;
    }

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterIndexName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitIndexName(this);
		}
	}


}



class LanguageNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_languageName;
    }

	systemName() {
	    return this.getTypedRuleContext(SystemNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLanguageName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLanguageName(this);
		}
	}


}



class LibraryNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_libraryName;
    }

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLibraryName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLibraryName(this);
		}
	}


}



class LocalNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_localName;
    }

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLocalName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLocalName(this);
		}
	}


}



class MnemonicNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_mnemonicName;
    }

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterMnemonicName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitMnemonicName(this);
		}
	}


}



class ParagraphNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_paragraphName;
    }

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterParagraphName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitParagraphName(this);
		}
	}


}



class ProcedureNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_procedureName;
    }

	paragraphName() {
	    return this.getTypedRuleContext(ParagraphNameContext,0);
	};

	inSection() {
	    return this.getTypedRuleContext(InSectionContext,0);
	};

	sectionName() {
	    return this.getTypedRuleContext(SectionNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterProcedureName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitProcedureName(this);
		}
	}


}



class ProgramNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_programName;
    }

	NONNUMERICLITERAL() {
	    return this.getToken(Cobol85Parser.NONNUMERICLITERAL, 0);
	};

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterProgramName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitProgramName(this);
		}
	}


}



class RecordNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_recordName;
    }

	qualifiedDataName() {
	    return this.getTypedRuleContext(QualifiedDataNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterRecordName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitRecordName(this);
		}
	}


}



class ReportNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_reportName;
    }

	qualifiedDataName() {
	    return this.getTypedRuleContext(QualifiedDataNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterReportName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitReportName(this);
		}
	}


}



class RoutineNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_routineName;
    }

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterRoutineName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitRoutineName(this);
		}
	}


}



class ScreenNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_screenName;
    }

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterScreenName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitScreenName(this);
		}
	}


}



class SectionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_sectionName;
    }

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSectionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSectionName(this);
		}
	}


}



class SystemNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_systemName;
    }

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSystemName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSystemName(this);
		}
	}


}



class SymbolicCharacterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_symbolicCharacter;
    }

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSymbolicCharacter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSymbolicCharacter(this);
		}
	}


}



class TextNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_textName;
    }

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterTextName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitTextName(this);
		}
	}


}



class CobolWordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_cobolWord;
    }

	IDENTIFIER() {
	    return this.getToken(Cobol85Parser.IDENTIFIER, 0);
	};

	COBOL() {
	    return this.getToken(Cobol85Parser.COBOL, 0);
	};

	PROGRAM() {
	    return this.getToken(Cobol85Parser.PROGRAM, 0);
	};

	ABORT() {
	    return this.getToken(Cobol85Parser.ABORT, 0);
	};

	AS() {
	    return this.getToken(Cobol85Parser.AS, 0);
	};

	ASCII() {
	    return this.getToken(Cobol85Parser.ASCII, 0);
	};

	ASSOCIATED_DATA() {
	    return this.getToken(Cobol85Parser.ASSOCIATED_DATA, 0);
	};

	ASSOCIATED_DATA_LENGTH() {
	    return this.getToken(Cobol85Parser.ASSOCIATED_DATA_LENGTH, 0);
	};

	ATTRIBUTE() {
	    return this.getToken(Cobol85Parser.ATTRIBUTE, 0);
	};

	AUTO() {
	    return this.getToken(Cobol85Parser.AUTO, 0);
	};

	AUTO_SKIP() {
	    return this.getToken(Cobol85Parser.AUTO_SKIP, 0);
	};

	BACKGROUND_COLOR() {
	    return this.getToken(Cobol85Parser.BACKGROUND_COLOR, 0);
	};

	BACKGROUND_COLOUR() {
	    return this.getToken(Cobol85Parser.BACKGROUND_COLOUR, 0);
	};

	BEEP() {
	    return this.getToken(Cobol85Parser.BEEP, 0);
	};

	BELL() {
	    return this.getToken(Cobol85Parser.BELL, 0);
	};

	BINARY() {
	    return this.getToken(Cobol85Parser.BINARY, 0);
	};

	BIT() {
	    return this.getToken(Cobol85Parser.BIT, 0);
	};

	BLINK() {
	    return this.getToken(Cobol85Parser.BLINK, 0);
	};

	BOUNDS() {
	    return this.getToken(Cobol85Parser.BOUNDS, 0);
	};

	CAPABLE() {
	    return this.getToken(Cobol85Parser.CAPABLE, 0);
	};

	CCSVERSION() {
	    return this.getToken(Cobol85Parser.CCSVERSION, 0);
	};

	CHANGED() {
	    return this.getToken(Cobol85Parser.CHANGED, 0);
	};

	CHANNEL() {
	    return this.getToken(Cobol85Parser.CHANNEL, 0);
	};

	CLOSE_DISPOSITION() {
	    return this.getToken(Cobol85Parser.CLOSE_DISPOSITION, 0);
	};

	COMMITMENT() {
	    return this.getToken(Cobol85Parser.COMMITMENT, 0);
	};

	CONTROL_POINT() {
	    return this.getToken(Cobol85Parser.CONTROL_POINT, 0);
	};

	CONVENTION() {
	    return this.getToken(Cobol85Parser.CONVENTION, 0);
	};

	CRUNCH() {
	    return this.getToken(Cobol85Parser.CRUNCH, 0);
	};

	CURSOR() {
	    return this.getToken(Cobol85Parser.CURSOR, 0);
	};

	DEFAULT() {
	    return this.getToken(Cobol85Parser.DEFAULT, 0);
	};

	DEFAULT_DISPLAY() {
	    return this.getToken(Cobol85Parser.DEFAULT_DISPLAY, 0);
	};

	DEFINITION() {
	    return this.getToken(Cobol85Parser.DEFINITION, 0);
	};

	DFHRESP() {
	    return this.getToken(Cobol85Parser.DFHRESP, 0);
	};

	DFHVALUE() {
	    return this.getToken(Cobol85Parser.DFHVALUE, 0);
	};

	DISK() {
	    return this.getToken(Cobol85Parser.DISK, 0);
	};

	DONTCARE() {
	    return this.getToken(Cobol85Parser.DONTCARE, 0);
	};

	DOUBLE() {
	    return this.getToken(Cobol85Parser.DOUBLE, 0);
	};

	EBCDIC() {
	    return this.getToken(Cobol85Parser.EBCDIC, 0);
	};

	EMPTY_CHECK() {
	    return this.getToken(Cobol85Parser.EMPTY_CHECK, 0);
	};

	ENTER() {
	    return this.getToken(Cobol85Parser.ENTER, 0);
	};

	ENTRY_PROCEDURE() {
	    return this.getToken(Cobol85Parser.ENTRY_PROCEDURE, 0);
	};

	EOL() {
	    return this.getToken(Cobol85Parser.EOL, 0);
	};

	EOS() {
	    return this.getToken(Cobol85Parser.EOS, 0);
	};

	ERASE() {
	    return this.getToken(Cobol85Parser.ERASE, 0);
	};

	ESCAPE() {
	    return this.getToken(Cobol85Parser.ESCAPE, 0);
	};

	EVENT() {
	    return this.getToken(Cobol85Parser.EVENT, 0);
	};

	EXCLUSIVE() {
	    return this.getToken(Cobol85Parser.EXCLUSIVE, 0);
	};

	EXPORT() {
	    return this.getToken(Cobol85Parser.EXPORT, 0);
	};

	EXTENDED() {
	    return this.getToken(Cobol85Parser.EXTENDED, 0);
	};

	FOREGROUND_COLOR() {
	    return this.getToken(Cobol85Parser.FOREGROUND_COLOR, 0);
	};

	FOREGROUND_COLOUR() {
	    return this.getToken(Cobol85Parser.FOREGROUND_COLOUR, 0);
	};

	FULL() {
	    return this.getToken(Cobol85Parser.FULL, 0);
	};

	FUNCTIONNAME() {
	    return this.getToken(Cobol85Parser.FUNCTIONNAME, 0);
	};

	FUNCTION_POINTER() {
	    return this.getToken(Cobol85Parser.FUNCTION_POINTER, 0);
	};

	GRID() {
	    return this.getToken(Cobol85Parser.GRID, 0);
	};

	HIGHLIGHT() {
	    return this.getToken(Cobol85Parser.HIGHLIGHT, 0);
	};

	IMPLICIT() {
	    return this.getToken(Cobol85Parser.IMPLICIT, 0);
	};

	IMPORT() {
	    return this.getToken(Cobol85Parser.IMPORT, 0);
	};

	INTEGER() {
	    return this.getToken(Cobol85Parser.INTEGER, 0);
	};

	KEPT() {
	    return this.getToken(Cobol85Parser.KEPT, 0);
	};

	KEYBOARD() {
	    return this.getToken(Cobol85Parser.KEYBOARD, 0);
	};

	LANGUAGE() {
	    return this.getToken(Cobol85Parser.LANGUAGE, 0);
	};

	LB() {
	    return this.getToken(Cobol85Parser.LB, 0);
	};

	LD() {
	    return this.getToken(Cobol85Parser.LD, 0);
	};

	LEFTLINE() {
	    return this.getToken(Cobol85Parser.LEFTLINE, 0);
	};

	LENGTH_CHECK() {
	    return this.getToken(Cobol85Parser.LENGTH_CHECK, 0);
	};

	LIBACCESS() {
	    return this.getToken(Cobol85Parser.LIBACCESS, 0);
	};

	LIBPARAMETER() {
	    return this.getToken(Cobol85Parser.LIBPARAMETER, 0);
	};

	LIBRARY() {
	    return this.getToken(Cobol85Parser.LIBRARY, 0);
	};

	LIST() {
	    return this.getToken(Cobol85Parser.LIST, 0);
	};

	LOCAL() {
	    return this.getToken(Cobol85Parser.LOCAL, 0);
	};

	LONG_DATE() {
	    return this.getToken(Cobol85Parser.LONG_DATE, 0);
	};

	LONG_TIME() {
	    return this.getToken(Cobol85Parser.LONG_TIME, 0);
	};

	LOWER() {
	    return this.getToken(Cobol85Parser.LOWER, 0);
	};

	LOWLIGHT() {
	    return this.getToken(Cobol85Parser.LOWLIGHT, 0);
	};

	MMDDYYYY() {
	    return this.getToken(Cobol85Parser.MMDDYYYY, 0);
	};

	NAMED() {
	    return this.getToken(Cobol85Parser.NAMED, 0);
	};

	NATIONAL() {
	    return this.getToken(Cobol85Parser.NATIONAL, 0);
	};

	NATIONAL_EDITED() {
	    return this.getToken(Cobol85Parser.NATIONAL_EDITED, 0);
	};

	NETWORK() {
	    return this.getToken(Cobol85Parser.NETWORK, 0);
	};

	NO_ECHO() {
	    return this.getToken(Cobol85Parser.NO_ECHO, 0);
	};

	NUMERIC_DATE() {
	    return this.getToken(Cobol85Parser.NUMERIC_DATE, 0);
	};

	NUMERIC_TIME() {
	    return this.getToken(Cobol85Parser.NUMERIC_TIME, 0);
	};

	ODT() {
	    return this.getToken(Cobol85Parser.ODT, 0);
	};

	ORDERLY() {
	    return this.getToken(Cobol85Parser.ORDERLY, 0);
	};

	OVERLINE() {
	    return this.getToken(Cobol85Parser.OVERLINE, 0);
	};

	OWN() {
	    return this.getToken(Cobol85Parser.OWN, 0);
	};

	PASSWORD() {
	    return this.getToken(Cobol85Parser.PASSWORD, 0);
	};

	PORT() {
	    return this.getToken(Cobol85Parser.PORT, 0);
	};

	PRINTER() {
	    return this.getToken(Cobol85Parser.PRINTER, 0);
	};

	PRIVATE() {
	    return this.getToken(Cobol85Parser.PRIVATE, 0);
	};

	PROCESS() {
	    return this.getToken(Cobol85Parser.PROCESS, 0);
	};

	PROMPT() {
	    return this.getToken(Cobol85Parser.PROMPT, 0);
	};

	READER() {
	    return this.getToken(Cobol85Parser.READER, 0);
	};

	REAL() {
	    return this.getToken(Cobol85Parser.REAL, 0);
	};

	RECEIVED() {
	    return this.getToken(Cobol85Parser.RECEIVED, 0);
	};

	RECURSIVE() {
	    return this.getToken(Cobol85Parser.RECURSIVE, 0);
	};

	REF() {
	    return this.getToken(Cobol85Parser.REF, 0);
	};

	REMOTE() {
	    return this.getToken(Cobol85Parser.REMOTE, 0);
	};

	REMOVE() {
	    return this.getToken(Cobol85Parser.REMOVE, 0);
	};

	REQUIRED() {
	    return this.getToken(Cobol85Parser.REQUIRED, 0);
	};

	REVERSE_VIDEO() {
	    return this.getToken(Cobol85Parser.REVERSE_VIDEO, 0);
	};

	SAVE() {
	    return this.getToken(Cobol85Parser.SAVE, 0);
	};

	SECURE() {
	    return this.getToken(Cobol85Parser.SECURE, 0);
	};

	SHARED() {
	    return this.getToken(Cobol85Parser.SHARED, 0);
	};

	SHAREDBYALL() {
	    return this.getToken(Cobol85Parser.SHAREDBYALL, 0);
	};

	SHAREDBYRUNUNIT() {
	    return this.getToken(Cobol85Parser.SHAREDBYRUNUNIT, 0);
	};

	SHARING() {
	    return this.getToken(Cobol85Parser.SHARING, 0);
	};

	SHORT_DATE() {
	    return this.getToken(Cobol85Parser.SHORT_DATE, 0);
	};

	SYMBOL() {
	    return this.getToken(Cobol85Parser.SYMBOL, 0);
	};

	TASK() {
	    return this.getToken(Cobol85Parser.TASK, 0);
	};

	THREAD() {
	    return this.getToken(Cobol85Parser.THREAD, 0);
	};

	THREAD_LOCAL() {
	    return this.getToken(Cobol85Parser.THREAD_LOCAL, 0);
	};

	TIMER() {
	    return this.getToken(Cobol85Parser.TIMER, 0);
	};

	TODAYS_DATE() {
	    return this.getToken(Cobol85Parser.TODAYS_DATE, 0);
	};

	TODAYS_NAME() {
	    return this.getToken(Cobol85Parser.TODAYS_NAME, 0);
	};

	TRUNCATED() {
	    return this.getToken(Cobol85Parser.TRUNCATED, 0);
	};

	TYPEDEF() {
	    return this.getToken(Cobol85Parser.TYPEDEF, 0);
	};

	UNDERLINE() {
	    return this.getToken(Cobol85Parser.UNDERLINE, 0);
	};

	VIRTUAL() {
	    return this.getToken(Cobol85Parser.VIRTUAL, 0);
	};

	WAIT() {
	    return this.getToken(Cobol85Parser.WAIT, 0);
	};

	YEAR() {
	    return this.getToken(Cobol85Parser.YEAR, 0);
	};

	YYYYMMDD() {
	    return this.getToken(Cobol85Parser.YYYYMMDD, 0);
	};

	YYYYDDD() {
	    return this.getToken(Cobol85Parser.YYYYDDD, 0);
	};

	ZERO_FILL() {
	    return this.getToken(Cobol85Parser.ZERO_FILL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCobolWord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCobolWord(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_literal;
    }

	NONNUMERICLITERAL() {
	    return this.getToken(Cobol85Parser.NONNUMERICLITERAL, 0);
	};

	figurativeConstant() {
	    return this.getTypedRuleContext(FigurativeConstantContext,0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	cicsDfhRespLiteral() {
	    return this.getTypedRuleContext(CicsDfhRespLiteralContext,0);
	};

	cicsDfhValueLiteral() {
	    return this.getTypedRuleContext(CicsDfhValueLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitLiteral(this);
		}
	}


}



class BooleanLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_booleanLiteral;
    }

	TRUE() {
	    return this.getToken(Cobol85Parser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(Cobol85Parser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitBooleanLiteral(this);
		}
	}


}



class NumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_numericLiteral;
    }

	NUMERICLITERAL() {
	    return this.getToken(Cobol85Parser.NUMERICLITERAL, 0);
	};

	ZERO() {
	    return this.getToken(Cobol85Parser.ZERO, 0);
	};

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitNumericLiteral(this);
		}
	}


}



class IntegerLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_integerLiteral;
    }

	INTEGERLITERAL() {
	    return this.getToken(Cobol85Parser.INTEGERLITERAL, 0);
	};

	LEVEL_NUMBER_66() {
	    return this.getToken(Cobol85Parser.LEVEL_NUMBER_66, 0);
	};

	LEVEL_NUMBER_77() {
	    return this.getToken(Cobol85Parser.LEVEL_NUMBER_77, 0);
	};

	LEVEL_NUMBER_88() {
	    return this.getToken(Cobol85Parser.LEVEL_NUMBER_88, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitIntegerLiteral(this);
		}
	}


}



class CicsDfhRespLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_cicsDfhRespLiteral;
    }

	DFHRESP() {
	    return this.getToken(Cobol85Parser.DFHRESP, 0);
	};

	LPARENCHAR() {
	    return this.getToken(Cobol85Parser.LPARENCHAR, 0);
	};

	RPARENCHAR() {
	    return this.getToken(Cobol85Parser.RPARENCHAR, 0);
	};

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCicsDfhRespLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCicsDfhRespLiteral(this);
		}
	}


}



class CicsDfhValueLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_cicsDfhValueLiteral;
    }

	DFHVALUE() {
	    return this.getToken(Cobol85Parser.DFHVALUE, 0);
	};

	LPARENCHAR() {
	    return this.getToken(Cobol85Parser.LPARENCHAR, 0);
	};

	RPARENCHAR() {
	    return this.getToken(Cobol85Parser.RPARENCHAR, 0);
	};

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCicsDfhValueLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCicsDfhValueLiteral(this);
		}
	}


}



class FigurativeConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_figurativeConstant;
    }

	ALL() {
	    return this.getToken(Cobol85Parser.ALL, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	HIGH_VALUE() {
	    return this.getToken(Cobol85Parser.HIGH_VALUE, 0);
	};

	HIGH_VALUES() {
	    return this.getToken(Cobol85Parser.HIGH_VALUES, 0);
	};

	LOW_VALUE() {
	    return this.getToken(Cobol85Parser.LOW_VALUE, 0);
	};

	LOW_VALUES() {
	    return this.getToken(Cobol85Parser.LOW_VALUES, 0);
	};

	NULL_() {
	    return this.getToken(Cobol85Parser.NULL_, 0);
	};

	NULLS() {
	    return this.getToken(Cobol85Parser.NULLS, 0);
	};

	QUOTE() {
	    return this.getToken(Cobol85Parser.QUOTE, 0);
	};

	QUOTES() {
	    return this.getToken(Cobol85Parser.QUOTES, 0);
	};

	SPACE() {
	    return this.getToken(Cobol85Parser.SPACE, 0);
	};

	SPACES() {
	    return this.getToken(Cobol85Parser.SPACES, 0);
	};

	ZERO() {
	    return this.getToken(Cobol85Parser.ZERO, 0);
	};

	ZEROS() {
	    return this.getToken(Cobol85Parser.ZEROS, 0);
	};

	ZEROES() {
	    return this.getToken(Cobol85Parser.ZEROES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterFigurativeConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitFigurativeConstant(this);
		}
	}


}



class SpecialRegisterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_specialRegister;
    }

	ADDRESS() {
	    return this.getToken(Cobol85Parser.ADDRESS, 0);
	};

	OF() {
	    return this.getToken(Cobol85Parser.OF, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	DATE() {
	    return this.getToken(Cobol85Parser.DATE, 0);
	};

	DAY() {
	    return this.getToken(Cobol85Parser.DAY, 0);
	};

	DAY_OF_WEEK() {
	    return this.getToken(Cobol85Parser.DAY_OF_WEEK, 0);
	};

	DEBUG_CONTENTS() {
	    return this.getToken(Cobol85Parser.DEBUG_CONTENTS, 0);
	};

	DEBUG_ITEM() {
	    return this.getToken(Cobol85Parser.DEBUG_ITEM, 0);
	};

	DEBUG_LINE() {
	    return this.getToken(Cobol85Parser.DEBUG_LINE, 0);
	};

	DEBUG_NAME() {
	    return this.getToken(Cobol85Parser.DEBUG_NAME, 0);
	};

	DEBUG_SUB_1() {
	    return this.getToken(Cobol85Parser.DEBUG_SUB_1, 0);
	};

	DEBUG_SUB_2() {
	    return this.getToken(Cobol85Parser.DEBUG_SUB_2, 0);
	};

	DEBUG_SUB_3() {
	    return this.getToken(Cobol85Parser.DEBUG_SUB_3, 0);
	};

	LENGTH() {
	    return this.getToken(Cobol85Parser.LENGTH, 0);
	};

	LINAGE_COUNTER() {
	    return this.getToken(Cobol85Parser.LINAGE_COUNTER, 0);
	};

	LINE_COUNTER() {
	    return this.getToken(Cobol85Parser.LINE_COUNTER, 0);
	};

	PAGE_COUNTER() {
	    return this.getToken(Cobol85Parser.PAGE_COUNTER, 0);
	};

	RETURN_CODE() {
	    return this.getToken(Cobol85Parser.RETURN_CODE, 0);
	};

	SHIFT_IN() {
	    return this.getToken(Cobol85Parser.SHIFT_IN, 0);
	};

	SHIFT_OUT() {
	    return this.getToken(Cobol85Parser.SHIFT_OUT, 0);
	};

	SORT_CONTROL() {
	    return this.getToken(Cobol85Parser.SORT_CONTROL, 0);
	};

	SORT_CORE_SIZE() {
	    return this.getToken(Cobol85Parser.SORT_CORE_SIZE, 0);
	};

	SORT_FILE_SIZE() {
	    return this.getToken(Cobol85Parser.SORT_FILE_SIZE, 0);
	};

	SORT_MESSAGE() {
	    return this.getToken(Cobol85Parser.SORT_MESSAGE, 0);
	};

	SORT_MODE_SIZE() {
	    return this.getToken(Cobol85Parser.SORT_MODE_SIZE, 0);
	};

	SORT_RETURN() {
	    return this.getToken(Cobol85Parser.SORT_RETURN, 0);
	};

	TALLY() {
	    return this.getToken(Cobol85Parser.TALLY, 0);
	};

	TIME() {
	    return this.getToken(Cobol85Parser.TIME, 0);
	};

	WHEN_COMPILED() {
	    return this.getToken(Cobol85Parser.WHEN_COMPILED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterSpecialRegister(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitSpecialRegister(this);
		}
	}


}



class CommentEntryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85Parser.RULE_commentEntry;
    }

	COMMENTENTRYLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85Parser.COMMENTENTRYLINE);
	    } else {
	        return this.getToken(Cobol85Parser.COMMENTENTRYLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.enterCommentEntry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85Listener ) {
	        listener.exitCommentEntry(this);
		}
	}


}




Cobol85Parser.StartRuleContext = StartRuleContext; 
Cobol85Parser.CompilationUnitContext = CompilationUnitContext; 
Cobol85Parser.ProgramUnitContext = ProgramUnitContext; 
Cobol85Parser.EndProgramStatementContext = EndProgramStatementContext; 
Cobol85Parser.IdentificationDivisionContext = IdentificationDivisionContext; 
Cobol85Parser.IdentificationDivisionBodyContext = IdentificationDivisionBodyContext; 
Cobol85Parser.ProgramIdParagraphContext = ProgramIdParagraphContext; 
Cobol85Parser.AuthorParagraphContext = AuthorParagraphContext; 
Cobol85Parser.InstallationParagraphContext = InstallationParagraphContext; 
Cobol85Parser.DateWrittenParagraphContext = DateWrittenParagraphContext; 
Cobol85Parser.DateCompiledParagraphContext = DateCompiledParagraphContext; 
Cobol85Parser.SecurityParagraphContext = SecurityParagraphContext; 
Cobol85Parser.RemarksParagraphContext = RemarksParagraphContext; 
Cobol85Parser.EnvironmentDivisionContext = EnvironmentDivisionContext; 
Cobol85Parser.EnvironmentDivisionBodyContext = EnvironmentDivisionBodyContext; 
Cobol85Parser.ConfigurationSectionContext = ConfigurationSectionContext; 
Cobol85Parser.ConfigurationSectionParagraphContext = ConfigurationSectionParagraphContext; 
Cobol85Parser.SourceComputerParagraphContext = SourceComputerParagraphContext; 
Cobol85Parser.ObjectComputerParagraphContext = ObjectComputerParagraphContext; 
Cobol85Parser.ObjectComputerClauseContext = ObjectComputerClauseContext; 
Cobol85Parser.MemorySizeClauseContext = MemorySizeClauseContext; 
Cobol85Parser.DiskSizeClauseContext = DiskSizeClauseContext; 
Cobol85Parser.CollatingSequenceClauseContext = CollatingSequenceClauseContext; 
Cobol85Parser.CollatingSequenceClauseAlphanumericContext = CollatingSequenceClauseAlphanumericContext; 
Cobol85Parser.CollatingSequenceClauseNationalContext = CollatingSequenceClauseNationalContext; 
Cobol85Parser.SegmentLimitClauseContext = SegmentLimitClauseContext; 
Cobol85Parser.CharacterSetClauseContext = CharacterSetClauseContext; 
Cobol85Parser.SpecialNamesParagraphContext = SpecialNamesParagraphContext; 
Cobol85Parser.SpecialNameClauseContext = SpecialNameClauseContext; 
Cobol85Parser.AlphabetClauseContext = AlphabetClauseContext; 
Cobol85Parser.AlphabetClauseFormat1Context = AlphabetClauseFormat1Context; 
Cobol85Parser.AlphabetLiteralsContext = AlphabetLiteralsContext; 
Cobol85Parser.AlphabetThroughContext = AlphabetThroughContext; 
Cobol85Parser.AlphabetAlsoContext = AlphabetAlsoContext; 
Cobol85Parser.AlphabetClauseFormat2Context = AlphabetClauseFormat2Context; 
Cobol85Parser.ChannelClauseContext = ChannelClauseContext; 
Cobol85Parser.ClassClauseContext = ClassClauseContext; 
Cobol85Parser.ClassClauseThroughContext = ClassClauseThroughContext; 
Cobol85Parser.ClassClauseFromContext = ClassClauseFromContext; 
Cobol85Parser.ClassClauseToContext = ClassClauseToContext; 
Cobol85Parser.CurrencySignClauseContext = CurrencySignClauseContext; 
Cobol85Parser.DecimalPointClauseContext = DecimalPointClauseContext; 
Cobol85Parser.DefaultComputationalSignClauseContext = DefaultComputationalSignClauseContext; 
Cobol85Parser.DefaultDisplaySignClauseContext = DefaultDisplaySignClauseContext; 
Cobol85Parser.EnvironmentSwitchNameClauseContext = EnvironmentSwitchNameClauseContext; 
Cobol85Parser.EnvironmentSwitchNameSpecialNamesStatusPhraseContext = EnvironmentSwitchNameSpecialNamesStatusPhraseContext; 
Cobol85Parser.OdtClauseContext = OdtClauseContext; 
Cobol85Parser.ReserveNetworkClauseContext = ReserveNetworkClauseContext; 
Cobol85Parser.SymbolicCharactersClauseContext = SymbolicCharactersClauseContext; 
Cobol85Parser.SymbolicCharactersContext = SymbolicCharactersContext; 
Cobol85Parser.InputOutputSectionContext = InputOutputSectionContext; 
Cobol85Parser.InputOutputSectionParagraphContext = InputOutputSectionParagraphContext; 
Cobol85Parser.FileControlParagraphContext = FileControlParagraphContext; 
Cobol85Parser.FileControlEntryContext = FileControlEntryContext; 
Cobol85Parser.SelectClauseContext = SelectClauseContext; 
Cobol85Parser.FileControlClauseContext = FileControlClauseContext; 
Cobol85Parser.AssignClauseContext = AssignClauseContext; 
Cobol85Parser.ReserveClauseContext = ReserveClauseContext; 
Cobol85Parser.OrganizationClauseContext = OrganizationClauseContext; 
Cobol85Parser.PaddingCharacterClauseContext = PaddingCharacterClauseContext; 
Cobol85Parser.RecordDelimiterClauseContext = RecordDelimiterClauseContext; 
Cobol85Parser.AccessModeClauseContext = AccessModeClauseContext; 
Cobol85Parser.RecordKeyClauseContext = RecordKeyClauseContext; 
Cobol85Parser.AlternateRecordKeyClauseContext = AlternateRecordKeyClauseContext; 
Cobol85Parser.PasswordClauseContext = PasswordClauseContext; 
Cobol85Parser.FileStatusClauseContext = FileStatusClauseContext; 
Cobol85Parser.RelativeKeyClauseContext = RelativeKeyClauseContext; 
Cobol85Parser.IoControlParagraphContext = IoControlParagraphContext; 
Cobol85Parser.IoControlClauseContext = IoControlClauseContext; 
Cobol85Parser.RerunClauseContext = RerunClauseContext; 
Cobol85Parser.RerunEveryRecordsContext = RerunEveryRecordsContext; 
Cobol85Parser.RerunEveryOfContext = RerunEveryOfContext; 
Cobol85Parser.RerunEveryClockContext = RerunEveryClockContext; 
Cobol85Parser.SameClauseContext = SameClauseContext; 
Cobol85Parser.MultipleFileClauseContext = MultipleFileClauseContext; 
Cobol85Parser.MultipleFilePositionContext = MultipleFilePositionContext; 
Cobol85Parser.CommitmentControlClauseContext = CommitmentControlClauseContext; 
Cobol85Parser.DataDivisionContext = DataDivisionContext; 
Cobol85Parser.DataDivisionSectionContext = DataDivisionSectionContext; 
Cobol85Parser.FileSectionContext = FileSectionContext; 
Cobol85Parser.FileDescriptionEntryContext = FileDescriptionEntryContext; 
Cobol85Parser.FileDescriptionEntryClauseContext = FileDescriptionEntryClauseContext; 
Cobol85Parser.ExternalClauseContext = ExternalClauseContext; 
Cobol85Parser.GlobalClauseContext = GlobalClauseContext; 
Cobol85Parser.BlockContainsClauseContext = BlockContainsClauseContext; 
Cobol85Parser.BlockContainsToContext = BlockContainsToContext; 
Cobol85Parser.RecordContainsClauseContext = RecordContainsClauseContext; 
Cobol85Parser.RecordContainsClauseFormat1Context = RecordContainsClauseFormat1Context; 
Cobol85Parser.RecordContainsClauseFormat2Context = RecordContainsClauseFormat2Context; 
Cobol85Parser.RecordContainsClauseFormat3Context = RecordContainsClauseFormat3Context; 
Cobol85Parser.RecordContainsToContext = RecordContainsToContext; 
Cobol85Parser.LabelRecordsClauseContext = LabelRecordsClauseContext; 
Cobol85Parser.ValueOfClauseContext = ValueOfClauseContext; 
Cobol85Parser.ValuePairContext = ValuePairContext; 
Cobol85Parser.DataRecordsClauseContext = DataRecordsClauseContext; 
Cobol85Parser.LinageClauseContext = LinageClauseContext; 
Cobol85Parser.LinageAtContext = LinageAtContext; 
Cobol85Parser.LinageFootingAtContext = LinageFootingAtContext; 
Cobol85Parser.LinageLinesAtTopContext = LinageLinesAtTopContext; 
Cobol85Parser.LinageLinesAtBottomContext = LinageLinesAtBottomContext; 
Cobol85Parser.RecordingModeClauseContext = RecordingModeClauseContext; 
Cobol85Parser.ModeStatementContext = ModeStatementContext; 
Cobol85Parser.CodeSetClauseContext = CodeSetClauseContext; 
Cobol85Parser.ReportClauseContext = ReportClauseContext; 
Cobol85Parser.DataBaseSectionContext = DataBaseSectionContext; 
Cobol85Parser.DataBaseSectionEntryContext = DataBaseSectionEntryContext; 
Cobol85Parser.WorkingStorageSectionContext = WorkingStorageSectionContext; 
Cobol85Parser.LinkageSectionContext = LinkageSectionContext; 
Cobol85Parser.CommunicationSectionContext = CommunicationSectionContext; 
Cobol85Parser.CommunicationDescriptionEntryContext = CommunicationDescriptionEntryContext; 
Cobol85Parser.CommunicationDescriptionEntryFormat1Context = CommunicationDescriptionEntryFormat1Context; 
Cobol85Parser.CommunicationDescriptionEntryFormat2Context = CommunicationDescriptionEntryFormat2Context; 
Cobol85Parser.CommunicationDescriptionEntryFormat3Context = CommunicationDescriptionEntryFormat3Context; 
Cobol85Parser.DestinationCountClauseContext = DestinationCountClauseContext; 
Cobol85Parser.DestinationTableClauseContext = DestinationTableClauseContext; 
Cobol85Parser.EndKeyClauseContext = EndKeyClauseContext; 
Cobol85Parser.ErrorKeyClauseContext = ErrorKeyClauseContext; 
Cobol85Parser.MessageCountClauseContext = MessageCountClauseContext; 
Cobol85Parser.MessageDateClauseContext = MessageDateClauseContext; 
Cobol85Parser.MessageTimeClauseContext = MessageTimeClauseContext; 
Cobol85Parser.StatusKeyClauseContext = StatusKeyClauseContext; 
Cobol85Parser.SymbolicDestinationClauseContext = SymbolicDestinationClauseContext; 
Cobol85Parser.SymbolicQueueClauseContext = SymbolicQueueClauseContext; 
Cobol85Parser.SymbolicSourceClauseContext = SymbolicSourceClauseContext; 
Cobol85Parser.SymbolicTerminalClauseContext = SymbolicTerminalClauseContext; 
Cobol85Parser.SymbolicSubQueueClauseContext = SymbolicSubQueueClauseContext; 
Cobol85Parser.TextLengthClauseContext = TextLengthClauseContext; 
Cobol85Parser.LocalStorageSectionContext = LocalStorageSectionContext; 
Cobol85Parser.ScreenSectionContext = ScreenSectionContext; 
Cobol85Parser.ScreenDescriptionEntryContext = ScreenDescriptionEntryContext; 
Cobol85Parser.ScreenDescriptionBlankClauseContext = ScreenDescriptionBlankClauseContext; 
Cobol85Parser.ScreenDescriptionBellClauseContext = ScreenDescriptionBellClauseContext; 
Cobol85Parser.ScreenDescriptionBlinkClauseContext = ScreenDescriptionBlinkClauseContext; 
Cobol85Parser.ScreenDescriptionEraseClauseContext = ScreenDescriptionEraseClauseContext; 
Cobol85Parser.ScreenDescriptionLightClauseContext = ScreenDescriptionLightClauseContext; 
Cobol85Parser.ScreenDescriptionGridClauseContext = ScreenDescriptionGridClauseContext; 
Cobol85Parser.ScreenDescriptionReverseVideoClauseContext = ScreenDescriptionReverseVideoClauseContext; 
Cobol85Parser.ScreenDescriptionUnderlineClauseContext = ScreenDescriptionUnderlineClauseContext; 
Cobol85Parser.ScreenDescriptionSizeClauseContext = ScreenDescriptionSizeClauseContext; 
Cobol85Parser.ScreenDescriptionLineClauseContext = ScreenDescriptionLineClauseContext; 
Cobol85Parser.ScreenDescriptionColumnClauseContext = ScreenDescriptionColumnClauseContext; 
Cobol85Parser.ScreenDescriptionForegroundColorClauseContext = ScreenDescriptionForegroundColorClauseContext; 
Cobol85Parser.ScreenDescriptionBackgroundColorClauseContext = ScreenDescriptionBackgroundColorClauseContext; 
Cobol85Parser.ScreenDescriptionControlClauseContext = ScreenDescriptionControlClauseContext; 
Cobol85Parser.ScreenDescriptionValueClauseContext = ScreenDescriptionValueClauseContext; 
Cobol85Parser.ScreenDescriptionPictureClauseContext = ScreenDescriptionPictureClauseContext; 
Cobol85Parser.ScreenDescriptionFromClauseContext = ScreenDescriptionFromClauseContext; 
Cobol85Parser.ScreenDescriptionToClauseContext = ScreenDescriptionToClauseContext; 
Cobol85Parser.ScreenDescriptionUsingClauseContext = ScreenDescriptionUsingClauseContext; 
Cobol85Parser.ScreenDescriptionUsageClauseContext = ScreenDescriptionUsageClauseContext; 
Cobol85Parser.ScreenDescriptionBlankWhenZeroClauseContext = ScreenDescriptionBlankWhenZeroClauseContext; 
Cobol85Parser.ScreenDescriptionJustifiedClauseContext = ScreenDescriptionJustifiedClauseContext; 
Cobol85Parser.ScreenDescriptionSignClauseContext = ScreenDescriptionSignClauseContext; 
Cobol85Parser.ScreenDescriptionAutoClauseContext = ScreenDescriptionAutoClauseContext; 
Cobol85Parser.ScreenDescriptionSecureClauseContext = ScreenDescriptionSecureClauseContext; 
Cobol85Parser.ScreenDescriptionRequiredClauseContext = ScreenDescriptionRequiredClauseContext; 
Cobol85Parser.ScreenDescriptionPromptClauseContext = ScreenDescriptionPromptClauseContext; 
Cobol85Parser.ScreenDescriptionPromptOccursClauseContext = ScreenDescriptionPromptOccursClauseContext; 
Cobol85Parser.ScreenDescriptionFullClauseContext = ScreenDescriptionFullClauseContext; 
Cobol85Parser.ScreenDescriptionZeroFillClauseContext = ScreenDescriptionZeroFillClauseContext; 
Cobol85Parser.ReportSectionContext = ReportSectionContext; 
Cobol85Parser.ReportDescriptionContext = ReportDescriptionContext; 
Cobol85Parser.ReportDescriptionEntryContext = ReportDescriptionEntryContext; 
Cobol85Parser.ReportDescriptionGlobalClauseContext = ReportDescriptionGlobalClauseContext; 
Cobol85Parser.ReportDescriptionPageLimitClauseContext = ReportDescriptionPageLimitClauseContext; 
Cobol85Parser.ReportDescriptionHeadingClauseContext = ReportDescriptionHeadingClauseContext; 
Cobol85Parser.ReportDescriptionFirstDetailClauseContext = ReportDescriptionFirstDetailClauseContext; 
Cobol85Parser.ReportDescriptionLastDetailClauseContext = ReportDescriptionLastDetailClauseContext; 
Cobol85Parser.ReportDescriptionFootingClauseContext = ReportDescriptionFootingClauseContext; 
Cobol85Parser.ReportGroupDescriptionEntryContext = ReportGroupDescriptionEntryContext; 
Cobol85Parser.ReportGroupDescriptionEntryFormat1Context = ReportGroupDescriptionEntryFormat1Context; 
Cobol85Parser.ReportGroupDescriptionEntryFormat2Context = ReportGroupDescriptionEntryFormat2Context; 
Cobol85Parser.ReportGroupDescriptionEntryFormat3Context = ReportGroupDescriptionEntryFormat3Context; 
Cobol85Parser.ReportGroupBlankWhenZeroClauseContext = ReportGroupBlankWhenZeroClauseContext; 
Cobol85Parser.ReportGroupColumnNumberClauseContext = ReportGroupColumnNumberClauseContext; 
Cobol85Parser.ReportGroupIndicateClauseContext = ReportGroupIndicateClauseContext; 
Cobol85Parser.ReportGroupJustifiedClauseContext = ReportGroupJustifiedClauseContext; 
Cobol85Parser.ReportGroupLineNumberClauseContext = ReportGroupLineNumberClauseContext; 
Cobol85Parser.ReportGroupLineNumberNextPageContext = ReportGroupLineNumberNextPageContext; 
Cobol85Parser.ReportGroupLineNumberPlusContext = ReportGroupLineNumberPlusContext; 
Cobol85Parser.ReportGroupNextGroupClauseContext = ReportGroupNextGroupClauseContext; 
Cobol85Parser.ReportGroupNextGroupPlusContext = ReportGroupNextGroupPlusContext; 
Cobol85Parser.ReportGroupNextGroupNextPageContext = ReportGroupNextGroupNextPageContext; 
Cobol85Parser.ReportGroupPictureClauseContext = ReportGroupPictureClauseContext; 
Cobol85Parser.ReportGroupResetClauseContext = ReportGroupResetClauseContext; 
Cobol85Parser.ReportGroupSignClauseContext = ReportGroupSignClauseContext; 
Cobol85Parser.ReportGroupSourceClauseContext = ReportGroupSourceClauseContext; 
Cobol85Parser.ReportGroupSumClauseContext = ReportGroupSumClauseContext; 
Cobol85Parser.ReportGroupTypeClauseContext = ReportGroupTypeClauseContext; 
Cobol85Parser.ReportGroupTypeReportHeadingContext = ReportGroupTypeReportHeadingContext; 
Cobol85Parser.ReportGroupTypePageHeadingContext = ReportGroupTypePageHeadingContext; 
Cobol85Parser.ReportGroupTypeControlHeadingContext = ReportGroupTypeControlHeadingContext; 
Cobol85Parser.ReportGroupTypeDetailContext = ReportGroupTypeDetailContext; 
Cobol85Parser.ReportGroupTypeControlFootingContext = ReportGroupTypeControlFootingContext; 
Cobol85Parser.ReportGroupUsageClauseContext = ReportGroupUsageClauseContext; 
Cobol85Parser.ReportGroupTypePageFootingContext = ReportGroupTypePageFootingContext; 
Cobol85Parser.ReportGroupTypeReportFootingContext = ReportGroupTypeReportFootingContext; 
Cobol85Parser.ReportGroupValueClauseContext = ReportGroupValueClauseContext; 
Cobol85Parser.ProgramLibrarySectionContext = ProgramLibrarySectionContext; 
Cobol85Parser.LibraryDescriptionEntryContext = LibraryDescriptionEntryContext; 
Cobol85Parser.LibraryDescriptionEntryFormat1Context = LibraryDescriptionEntryFormat1Context; 
Cobol85Parser.LibraryDescriptionEntryFormat2Context = LibraryDescriptionEntryFormat2Context; 
Cobol85Parser.LibraryAttributeClauseFormat1Context = LibraryAttributeClauseFormat1Context; 
Cobol85Parser.LibraryAttributeClauseFormat2Context = LibraryAttributeClauseFormat2Context; 
Cobol85Parser.LibraryAttributeFunctionContext = LibraryAttributeFunctionContext; 
Cobol85Parser.LibraryAttributeParameterContext = LibraryAttributeParameterContext; 
Cobol85Parser.LibraryAttributeTitleContext = LibraryAttributeTitleContext; 
Cobol85Parser.LibraryEntryProcedureClauseFormat1Context = LibraryEntryProcedureClauseFormat1Context; 
Cobol85Parser.LibraryEntryProcedureClauseFormat2Context = LibraryEntryProcedureClauseFormat2Context; 
Cobol85Parser.LibraryEntryProcedureForClauseContext = LibraryEntryProcedureForClauseContext; 
Cobol85Parser.LibraryEntryProcedureGivingClauseContext = LibraryEntryProcedureGivingClauseContext; 
Cobol85Parser.LibraryEntryProcedureUsingClauseContext = LibraryEntryProcedureUsingClauseContext; 
Cobol85Parser.LibraryEntryProcedureUsingNameContext = LibraryEntryProcedureUsingNameContext; 
Cobol85Parser.LibraryEntryProcedureWithClauseContext = LibraryEntryProcedureWithClauseContext; 
Cobol85Parser.LibraryEntryProcedureWithNameContext = LibraryEntryProcedureWithNameContext; 
Cobol85Parser.LibraryIsCommonClauseContext = LibraryIsCommonClauseContext; 
Cobol85Parser.LibraryIsGlobalClauseContext = LibraryIsGlobalClauseContext; 
Cobol85Parser.DataDescriptionEntryContext = DataDescriptionEntryContext; 
Cobol85Parser.DataDescriptionEntryFormat1Context = DataDescriptionEntryFormat1Context; 
Cobol85Parser.DataDescriptionEntryFormat2Context = DataDescriptionEntryFormat2Context; 
Cobol85Parser.DataDescriptionEntryFormat3Context = DataDescriptionEntryFormat3Context; 
Cobol85Parser.DataDescriptionEntryExecSqlContext = DataDescriptionEntryExecSqlContext; 
Cobol85Parser.DataAlignedClauseContext = DataAlignedClauseContext; 
Cobol85Parser.DataBlankWhenZeroClauseContext = DataBlankWhenZeroClauseContext; 
Cobol85Parser.DataCommonOwnLocalClauseContext = DataCommonOwnLocalClauseContext; 
Cobol85Parser.DataExternalClauseContext = DataExternalClauseContext; 
Cobol85Parser.DataGlobalClauseContext = DataGlobalClauseContext; 
Cobol85Parser.DataIntegerStringClauseContext = DataIntegerStringClauseContext; 
Cobol85Parser.DataJustifiedClauseContext = DataJustifiedClauseContext; 
Cobol85Parser.DataOccursClauseContext = DataOccursClauseContext; 
Cobol85Parser.DataOccursToContext = DataOccursToContext; 
Cobol85Parser.DataOccursSortContext = DataOccursSortContext; 
Cobol85Parser.DataPictureClauseContext = DataPictureClauseContext; 
Cobol85Parser.PictureStringContext = PictureStringContext; 
Cobol85Parser.PictureCharsContext = PictureCharsContext; 
Cobol85Parser.PictureCardinalityContext = PictureCardinalityContext; 
Cobol85Parser.DataReceivedByClauseContext = DataReceivedByClauseContext; 
Cobol85Parser.DataRecordAreaClauseContext = DataRecordAreaClauseContext; 
Cobol85Parser.DataRedefinesClauseContext = DataRedefinesClauseContext; 
Cobol85Parser.DataRenamesClauseContext = DataRenamesClauseContext; 
Cobol85Parser.DataSignClauseContext = DataSignClauseContext; 
Cobol85Parser.DataSynchronizedClauseContext = DataSynchronizedClauseContext; 
Cobol85Parser.DataThreadLocalClauseContext = DataThreadLocalClauseContext; 
Cobol85Parser.DataTypeClauseContext = DataTypeClauseContext; 
Cobol85Parser.DataTypeDefClauseContext = DataTypeDefClauseContext; 
Cobol85Parser.DataUsageClauseContext = DataUsageClauseContext; 
Cobol85Parser.DataUsingClauseContext = DataUsingClauseContext; 
Cobol85Parser.DataValueClauseContext = DataValueClauseContext; 
Cobol85Parser.DataValueIntervalContext = DataValueIntervalContext; 
Cobol85Parser.DataValueIntervalFromContext = DataValueIntervalFromContext; 
Cobol85Parser.DataValueIntervalToContext = DataValueIntervalToContext; 
Cobol85Parser.DataWithLowerBoundsClauseContext = DataWithLowerBoundsClauseContext; 
Cobol85Parser.ProcedureDivisionContext = ProcedureDivisionContext; 
Cobol85Parser.ProcedureDivisionUsingClauseContext = ProcedureDivisionUsingClauseContext; 
Cobol85Parser.ProcedureDivisionGivingClauseContext = ProcedureDivisionGivingClauseContext; 
Cobol85Parser.ProcedureDivisionUsingParameterContext = ProcedureDivisionUsingParameterContext; 
Cobol85Parser.ProcedureDivisionByReferencePhraseContext = ProcedureDivisionByReferencePhraseContext; 
Cobol85Parser.ProcedureDivisionByReferenceContext = ProcedureDivisionByReferenceContext; 
Cobol85Parser.ProcedureDivisionByValuePhraseContext = ProcedureDivisionByValuePhraseContext; 
Cobol85Parser.ProcedureDivisionByValueContext = ProcedureDivisionByValueContext; 
Cobol85Parser.ProcedureDeclarativesContext = ProcedureDeclarativesContext; 
Cobol85Parser.ProcedureDeclarativeContext = ProcedureDeclarativeContext; 
Cobol85Parser.ProcedureSectionHeaderContext = ProcedureSectionHeaderContext; 
Cobol85Parser.ProcedureDivisionBodyContext = ProcedureDivisionBodyContext; 
Cobol85Parser.ProcedureSectionContext = ProcedureSectionContext; 
Cobol85Parser.ParagraphsContext = ParagraphsContext; 
Cobol85Parser.ParagraphContext = ParagraphContext; 
Cobol85Parser.SentenceContext = SentenceContext; 
Cobol85Parser.StatementContext = StatementContext; 
Cobol85Parser.AcceptStatementContext = AcceptStatementContext; 
Cobol85Parser.AcceptFromDateStatementContext = AcceptFromDateStatementContext; 
Cobol85Parser.AcceptFromMnemonicStatementContext = AcceptFromMnemonicStatementContext; 
Cobol85Parser.AcceptFromEscapeKeyStatementContext = AcceptFromEscapeKeyStatementContext; 
Cobol85Parser.AcceptMessageCountStatementContext = AcceptMessageCountStatementContext; 
Cobol85Parser.AddStatementContext = AddStatementContext; 
Cobol85Parser.AddToStatementContext = AddToStatementContext; 
Cobol85Parser.AddToGivingStatementContext = AddToGivingStatementContext; 
Cobol85Parser.AddCorrespondingStatementContext = AddCorrespondingStatementContext; 
Cobol85Parser.AddFromContext = AddFromContext; 
Cobol85Parser.AddToContext = AddToContext; 
Cobol85Parser.AddToGivingContext = AddToGivingContext; 
Cobol85Parser.AddGivingContext = AddGivingContext; 
Cobol85Parser.AlteredGoToContext = AlteredGoToContext; 
Cobol85Parser.AlterStatementContext = AlterStatementContext; 
Cobol85Parser.AlterProceedToContext = AlterProceedToContext; 
Cobol85Parser.CallStatementContext = CallStatementContext; 
Cobol85Parser.CallUsingPhraseContext = CallUsingPhraseContext; 
Cobol85Parser.CallUsingParameterContext = CallUsingParameterContext; 
Cobol85Parser.CallByReferencePhraseContext = CallByReferencePhraseContext; 
Cobol85Parser.CallByReferenceContext = CallByReferenceContext; 
Cobol85Parser.CallByValuePhraseContext = CallByValuePhraseContext; 
Cobol85Parser.CallByValueContext = CallByValueContext; 
Cobol85Parser.CallByContentPhraseContext = CallByContentPhraseContext; 
Cobol85Parser.CallByContentContext = CallByContentContext; 
Cobol85Parser.CallGivingPhraseContext = CallGivingPhraseContext; 
Cobol85Parser.CancelStatementContext = CancelStatementContext; 
Cobol85Parser.CancelCallContext = CancelCallContext; 
Cobol85Parser.CloseStatementContext = CloseStatementContext; 
Cobol85Parser.CloseFileContext = CloseFileContext; 
Cobol85Parser.CloseReelUnitStatementContext = CloseReelUnitStatementContext; 
Cobol85Parser.CloseRelativeStatementContext = CloseRelativeStatementContext; 
Cobol85Parser.ClosePortFileIOStatementContext = ClosePortFileIOStatementContext; 
Cobol85Parser.ClosePortFileIOUsingContext = ClosePortFileIOUsingContext; 
Cobol85Parser.ClosePortFileIOUsingCloseDispositionContext = ClosePortFileIOUsingCloseDispositionContext; 
Cobol85Parser.ClosePortFileIOUsingAssociatedDataContext = ClosePortFileIOUsingAssociatedDataContext; 
Cobol85Parser.ClosePortFileIOUsingAssociatedDataLengthContext = ClosePortFileIOUsingAssociatedDataLengthContext; 
Cobol85Parser.ComputeStatementContext = ComputeStatementContext; 
Cobol85Parser.ComputeStoreContext = ComputeStoreContext; 
Cobol85Parser.ContinueStatementContext = ContinueStatementContext; 
Cobol85Parser.DeleteStatementContext = DeleteStatementContext; 
Cobol85Parser.DisableStatementContext = DisableStatementContext; 
Cobol85Parser.DisplayStatementContext = DisplayStatementContext; 
Cobol85Parser.DisplayOperandContext = DisplayOperandContext; 
Cobol85Parser.DisplayAtContext = DisplayAtContext; 
Cobol85Parser.DisplayUponContext = DisplayUponContext; 
Cobol85Parser.DisplayWithContext = DisplayWithContext; 
Cobol85Parser.DivideStatementContext = DivideStatementContext; 
Cobol85Parser.DivideIntoStatementContext = DivideIntoStatementContext; 
Cobol85Parser.DivideIntoGivingStatementContext = DivideIntoGivingStatementContext; 
Cobol85Parser.DivideByGivingStatementContext = DivideByGivingStatementContext; 
Cobol85Parser.DivideGivingPhraseContext = DivideGivingPhraseContext; 
Cobol85Parser.DivideIntoContext = DivideIntoContext; 
Cobol85Parser.DivideGivingContext = DivideGivingContext; 
Cobol85Parser.DivideRemainderContext = DivideRemainderContext; 
Cobol85Parser.EnableStatementContext = EnableStatementContext; 
Cobol85Parser.EntryStatementContext = EntryStatementContext; 
Cobol85Parser.EvaluateStatementContext = EvaluateStatementContext; 
Cobol85Parser.EvaluateSelectContext = EvaluateSelectContext; 
Cobol85Parser.EvaluateAlsoSelectContext = EvaluateAlsoSelectContext; 
Cobol85Parser.EvaluateWhenPhraseContext = EvaluateWhenPhraseContext; 
Cobol85Parser.EvaluateWhenContext = EvaluateWhenContext; 
Cobol85Parser.EvaluateConditionContext = EvaluateConditionContext; 
Cobol85Parser.EvaluateThroughContext = EvaluateThroughContext; 
Cobol85Parser.EvaluateAlsoConditionContext = EvaluateAlsoConditionContext; 
Cobol85Parser.EvaluateWhenOtherContext = EvaluateWhenOtherContext; 
Cobol85Parser.EvaluateValueContext = EvaluateValueContext; 
Cobol85Parser.ExecCicsStatementContext = ExecCicsStatementContext; 
Cobol85Parser.ExecSqlStatementContext = ExecSqlStatementContext; 
Cobol85Parser.ExecSqlImsStatementContext = ExecSqlImsStatementContext; 
Cobol85Parser.ExhibitStatementContext = ExhibitStatementContext; 
Cobol85Parser.ExhibitOperandContext = ExhibitOperandContext; 
Cobol85Parser.ExitStatementContext = ExitStatementContext; 
Cobol85Parser.GenerateStatementContext = GenerateStatementContext; 
Cobol85Parser.GobackStatementContext = GobackStatementContext; 
Cobol85Parser.GoToStatementContext = GoToStatementContext; 
Cobol85Parser.GoToStatementSimpleContext = GoToStatementSimpleContext; 
Cobol85Parser.GoToDependingOnStatementContext = GoToDependingOnStatementContext; 
Cobol85Parser.IfStatementContext = IfStatementContext; 
Cobol85Parser.IfThenContext = IfThenContext; 
Cobol85Parser.IfElseContext = IfElseContext; 
Cobol85Parser.InitializeStatementContext = InitializeStatementContext; 
Cobol85Parser.InitializeReplacingPhraseContext = InitializeReplacingPhraseContext; 
Cobol85Parser.InitializeReplacingByContext = InitializeReplacingByContext; 
Cobol85Parser.InitiateStatementContext = InitiateStatementContext; 
Cobol85Parser.InspectStatementContext = InspectStatementContext; 
Cobol85Parser.InspectTallyingPhraseContext = InspectTallyingPhraseContext; 
Cobol85Parser.InspectReplacingPhraseContext = InspectReplacingPhraseContext; 
Cobol85Parser.InspectTallyingReplacingPhraseContext = InspectTallyingReplacingPhraseContext; 
Cobol85Parser.InspectConvertingPhraseContext = InspectConvertingPhraseContext; 
Cobol85Parser.InspectForContext = InspectForContext; 
Cobol85Parser.InspectCharactersContext = InspectCharactersContext; 
Cobol85Parser.InspectReplacingCharactersContext = InspectReplacingCharactersContext; 
Cobol85Parser.InspectAllLeadingsContext = InspectAllLeadingsContext; 
Cobol85Parser.InspectReplacingAllLeadingsContext = InspectReplacingAllLeadingsContext; 
Cobol85Parser.InspectAllLeadingContext = InspectAllLeadingContext; 
Cobol85Parser.InspectReplacingAllLeadingContext = InspectReplacingAllLeadingContext; 
Cobol85Parser.InspectByContext = InspectByContext; 
Cobol85Parser.InspectToContext = InspectToContext; 
Cobol85Parser.InspectBeforeAfterContext = InspectBeforeAfterContext; 
Cobol85Parser.MergeStatementContext = MergeStatementContext; 
Cobol85Parser.MergeOnKeyClauseContext = MergeOnKeyClauseContext; 
Cobol85Parser.MergeCollatingSequencePhraseContext = MergeCollatingSequencePhraseContext; 
Cobol85Parser.MergeCollatingAlphanumericContext = MergeCollatingAlphanumericContext; 
Cobol85Parser.MergeCollatingNationalContext = MergeCollatingNationalContext; 
Cobol85Parser.MergeUsingContext = MergeUsingContext; 
Cobol85Parser.MergeOutputProcedurePhraseContext = MergeOutputProcedurePhraseContext; 
Cobol85Parser.MergeOutputThroughContext = MergeOutputThroughContext; 
Cobol85Parser.MergeGivingPhraseContext = MergeGivingPhraseContext; 
Cobol85Parser.MergeGivingContext = MergeGivingContext; 
Cobol85Parser.MoveStatementContext = MoveStatementContext; 
Cobol85Parser.MoveToStatementContext = MoveToStatementContext; 
Cobol85Parser.MoveToSendingAreaContext = MoveToSendingAreaContext; 
Cobol85Parser.MoveCorrespondingToStatementContext = MoveCorrespondingToStatementContext; 
Cobol85Parser.MoveCorrespondingToSendingAreaContext = MoveCorrespondingToSendingAreaContext; 
Cobol85Parser.MultiplyStatementContext = MultiplyStatementContext; 
Cobol85Parser.MultiplyRegularContext = MultiplyRegularContext; 
Cobol85Parser.MultiplyRegularOperandContext = MultiplyRegularOperandContext; 
Cobol85Parser.MultiplyGivingContext = MultiplyGivingContext; 
Cobol85Parser.MultiplyGivingOperandContext = MultiplyGivingOperandContext; 
Cobol85Parser.MultiplyGivingResultContext = MultiplyGivingResultContext; 
Cobol85Parser.OpenStatementContext = OpenStatementContext; 
Cobol85Parser.OpenInputStatementContext = OpenInputStatementContext; 
Cobol85Parser.OpenInputContext = OpenInputContext; 
Cobol85Parser.OpenOutputStatementContext = OpenOutputStatementContext; 
Cobol85Parser.OpenOutputContext = OpenOutputContext; 
Cobol85Parser.OpenIOStatementContext = OpenIOStatementContext; 
Cobol85Parser.OpenExtendStatementContext = OpenExtendStatementContext; 
Cobol85Parser.PerformStatementContext = PerformStatementContext; 
Cobol85Parser.PerformInlineStatementContext = PerformInlineStatementContext; 
Cobol85Parser.PerformProcedureStatementContext = PerformProcedureStatementContext; 
Cobol85Parser.PerformTypeContext = PerformTypeContext; 
Cobol85Parser.PerformTimesContext = PerformTimesContext; 
Cobol85Parser.PerformUntilContext = PerformUntilContext; 
Cobol85Parser.PerformVaryingContext = PerformVaryingContext; 
Cobol85Parser.PerformVaryingClauseContext = PerformVaryingClauseContext; 
Cobol85Parser.PerformVaryingPhraseContext = PerformVaryingPhraseContext; 
Cobol85Parser.PerformAfterContext = PerformAfterContext; 
Cobol85Parser.PerformFromContext = PerformFromContext; 
Cobol85Parser.PerformByContext = PerformByContext; 
Cobol85Parser.PerformTestClauseContext = PerformTestClauseContext; 
Cobol85Parser.PurgeStatementContext = PurgeStatementContext; 
Cobol85Parser.ReadStatementContext = ReadStatementContext; 
Cobol85Parser.ReadIntoContext = ReadIntoContext; 
Cobol85Parser.ReadWithContext = ReadWithContext; 
Cobol85Parser.ReadKeyContext = ReadKeyContext; 
Cobol85Parser.ReceiveStatementContext = ReceiveStatementContext; 
Cobol85Parser.ReceiveFromStatementContext = ReceiveFromStatementContext; 
Cobol85Parser.ReceiveFromContext = ReceiveFromContext; 
Cobol85Parser.ReceiveIntoStatementContext = ReceiveIntoStatementContext; 
Cobol85Parser.ReceiveNoDataContext = ReceiveNoDataContext; 
Cobol85Parser.ReceiveWithDataContext = ReceiveWithDataContext; 
Cobol85Parser.ReceiveBeforeContext = ReceiveBeforeContext; 
Cobol85Parser.ReceiveWithContext = ReceiveWithContext; 
Cobol85Parser.ReceiveThreadContext = ReceiveThreadContext; 
Cobol85Parser.ReceiveSizeContext = ReceiveSizeContext; 
Cobol85Parser.ReceiveStatusContext = ReceiveStatusContext; 
Cobol85Parser.ReleaseStatementContext = ReleaseStatementContext; 
Cobol85Parser.ReturnStatementContext = ReturnStatementContext; 
Cobol85Parser.ReturnIntoContext = ReturnIntoContext; 
Cobol85Parser.RewriteStatementContext = RewriteStatementContext; 
Cobol85Parser.RewriteFromContext = RewriteFromContext; 
Cobol85Parser.SearchStatementContext = SearchStatementContext; 
Cobol85Parser.SearchVaryingContext = SearchVaryingContext; 
Cobol85Parser.SearchWhenContext = SearchWhenContext; 
Cobol85Parser.SendStatementContext = SendStatementContext; 
Cobol85Parser.SendStatementSyncContext = SendStatementSyncContext; 
Cobol85Parser.SendStatementAsyncContext = SendStatementAsyncContext; 
Cobol85Parser.SendFromPhraseContext = SendFromPhraseContext; 
Cobol85Parser.SendWithPhraseContext = SendWithPhraseContext; 
Cobol85Parser.SendReplacingPhraseContext = SendReplacingPhraseContext; 
Cobol85Parser.SendAdvancingPhraseContext = SendAdvancingPhraseContext; 
Cobol85Parser.SendAdvancingPageContext = SendAdvancingPageContext; 
Cobol85Parser.SendAdvancingLinesContext = SendAdvancingLinesContext; 
Cobol85Parser.SendAdvancingMnemonicContext = SendAdvancingMnemonicContext; 
Cobol85Parser.SetStatementContext = SetStatementContext; 
Cobol85Parser.SetToStatementContext = SetToStatementContext; 
Cobol85Parser.SetUpDownByStatementContext = SetUpDownByStatementContext; 
Cobol85Parser.SetToContext = SetToContext; 
Cobol85Parser.SetToValueContext = SetToValueContext; 
Cobol85Parser.SetByValueContext = SetByValueContext; 
Cobol85Parser.SortStatementContext = SortStatementContext; 
Cobol85Parser.SortOnKeyClauseContext = SortOnKeyClauseContext; 
Cobol85Parser.SortDuplicatesPhraseContext = SortDuplicatesPhraseContext; 
Cobol85Parser.SortCollatingSequencePhraseContext = SortCollatingSequencePhraseContext; 
Cobol85Parser.SortCollatingAlphanumericContext = SortCollatingAlphanumericContext; 
Cobol85Parser.SortCollatingNationalContext = SortCollatingNationalContext; 
Cobol85Parser.SortInputProcedurePhraseContext = SortInputProcedurePhraseContext; 
Cobol85Parser.SortInputThroughContext = SortInputThroughContext; 
Cobol85Parser.SortUsingContext = SortUsingContext; 
Cobol85Parser.SortOutputProcedurePhraseContext = SortOutputProcedurePhraseContext; 
Cobol85Parser.SortOutputThroughContext = SortOutputThroughContext; 
Cobol85Parser.SortGivingPhraseContext = SortGivingPhraseContext; 
Cobol85Parser.SortGivingContext = SortGivingContext; 
Cobol85Parser.StartStatementContext = StartStatementContext; 
Cobol85Parser.StartKeyContext = StartKeyContext; 
Cobol85Parser.StopStatementContext = StopStatementContext; 
Cobol85Parser.StringStatementContext = StringStatementContext; 
Cobol85Parser.StringSendingPhraseContext = StringSendingPhraseContext; 
Cobol85Parser.StringSendingContext = StringSendingContext; 
Cobol85Parser.StringDelimitedByPhraseContext = StringDelimitedByPhraseContext; 
Cobol85Parser.StringForPhraseContext = StringForPhraseContext; 
Cobol85Parser.StringIntoPhraseContext = StringIntoPhraseContext; 
Cobol85Parser.StringWithPointerPhraseContext = StringWithPointerPhraseContext; 
Cobol85Parser.SubtractStatementContext = SubtractStatementContext; 
Cobol85Parser.SubtractFromStatementContext = SubtractFromStatementContext; 
Cobol85Parser.SubtractFromGivingStatementContext = SubtractFromGivingStatementContext; 
Cobol85Parser.SubtractCorrespondingStatementContext = SubtractCorrespondingStatementContext; 
Cobol85Parser.SubtractSubtrahendContext = SubtractSubtrahendContext; 
Cobol85Parser.SubtractMinuendContext = SubtractMinuendContext; 
Cobol85Parser.SubtractMinuendGivingContext = SubtractMinuendGivingContext; 
Cobol85Parser.SubtractGivingContext = SubtractGivingContext; 
Cobol85Parser.SubtractMinuendCorrespondingContext = SubtractMinuendCorrespondingContext; 
Cobol85Parser.TerminateStatementContext = TerminateStatementContext; 
Cobol85Parser.UnstringStatementContext = UnstringStatementContext; 
Cobol85Parser.UnstringSendingPhraseContext = UnstringSendingPhraseContext; 
Cobol85Parser.UnstringDelimitedByPhraseContext = UnstringDelimitedByPhraseContext; 
Cobol85Parser.UnstringOrAllPhraseContext = UnstringOrAllPhraseContext; 
Cobol85Parser.UnstringIntoPhraseContext = UnstringIntoPhraseContext; 
Cobol85Parser.UnstringIntoContext = UnstringIntoContext; 
Cobol85Parser.UnstringDelimiterInContext = UnstringDelimiterInContext; 
Cobol85Parser.UnstringCountInContext = UnstringCountInContext; 
Cobol85Parser.UnstringWithPointerPhraseContext = UnstringWithPointerPhraseContext; 
Cobol85Parser.UnstringTallyingPhraseContext = UnstringTallyingPhraseContext; 
Cobol85Parser.UseStatementContext = UseStatementContext; 
Cobol85Parser.UseAfterClauseContext = UseAfterClauseContext; 
Cobol85Parser.UseAfterOnContext = UseAfterOnContext; 
Cobol85Parser.UseDebugClauseContext = UseDebugClauseContext; 
Cobol85Parser.UseDebugOnContext = UseDebugOnContext; 
Cobol85Parser.WriteStatementContext = WriteStatementContext; 
Cobol85Parser.WriteFromPhraseContext = WriteFromPhraseContext; 
Cobol85Parser.WriteAdvancingPhraseContext = WriteAdvancingPhraseContext; 
Cobol85Parser.WriteAdvancingPageContext = WriteAdvancingPageContext; 
Cobol85Parser.WriteAdvancingLinesContext = WriteAdvancingLinesContext; 
Cobol85Parser.WriteAdvancingMnemonicContext = WriteAdvancingMnemonicContext; 
Cobol85Parser.WriteAtEndOfPagePhraseContext = WriteAtEndOfPagePhraseContext; 
Cobol85Parser.WriteNotAtEndOfPagePhraseContext = WriteNotAtEndOfPagePhraseContext; 
Cobol85Parser.AtEndPhraseContext = AtEndPhraseContext; 
Cobol85Parser.NotAtEndPhraseContext = NotAtEndPhraseContext; 
Cobol85Parser.InvalidKeyPhraseContext = InvalidKeyPhraseContext; 
Cobol85Parser.NotInvalidKeyPhraseContext = NotInvalidKeyPhraseContext; 
Cobol85Parser.OnOverflowPhraseContext = OnOverflowPhraseContext; 
Cobol85Parser.NotOnOverflowPhraseContext = NotOnOverflowPhraseContext; 
Cobol85Parser.OnSizeErrorPhraseContext = OnSizeErrorPhraseContext; 
Cobol85Parser.NotOnSizeErrorPhraseContext = NotOnSizeErrorPhraseContext; 
Cobol85Parser.OnExceptionClauseContext = OnExceptionClauseContext; 
Cobol85Parser.NotOnExceptionClauseContext = NotOnExceptionClauseContext; 
Cobol85Parser.ArithmeticExpressionContext = ArithmeticExpressionContext; 
Cobol85Parser.PlusMinusContext = PlusMinusContext; 
Cobol85Parser.MultDivsContext = MultDivsContext; 
Cobol85Parser.MultDivContext = MultDivContext; 
Cobol85Parser.PowersContext = PowersContext; 
Cobol85Parser.PowerContext = PowerContext; 
Cobol85Parser.BasisContext = BasisContext; 
Cobol85Parser.ConditionContext = ConditionContext; 
Cobol85Parser.AndOrConditionContext = AndOrConditionContext; 
Cobol85Parser.CombinableConditionContext = CombinableConditionContext; 
Cobol85Parser.SimpleConditionContext = SimpleConditionContext; 
Cobol85Parser.ClassConditionContext = ClassConditionContext; 
Cobol85Parser.ConditionNameReferenceContext = ConditionNameReferenceContext; 
Cobol85Parser.ConditionNameSubscriptReferenceContext = ConditionNameSubscriptReferenceContext; 
Cobol85Parser.RelationConditionContext = RelationConditionContext; 
Cobol85Parser.RelationSignConditionContext = RelationSignConditionContext; 
Cobol85Parser.RelationArithmeticComparisonContext = RelationArithmeticComparisonContext; 
Cobol85Parser.RelationCombinedComparisonContext = RelationCombinedComparisonContext; 
Cobol85Parser.RelationCombinedConditionContext = RelationCombinedConditionContext; 
Cobol85Parser.RelationalOperatorContext = RelationalOperatorContext; 
Cobol85Parser.AbbreviationContext = AbbreviationContext; 
Cobol85Parser.IdentifierContext = IdentifierContext; 
Cobol85Parser.TableCallContext = TableCallContext; 
Cobol85Parser.FunctionCallContext = FunctionCallContext; 
Cobol85Parser.ReferenceModifierContext = ReferenceModifierContext; 
Cobol85Parser.CharacterPositionContext = CharacterPositionContext; 
Cobol85Parser.LengthContext = LengthContext; 
Cobol85Parser.Subscript_Context = Subscript_Context; 
Cobol85Parser.ArgumentContext = ArgumentContext; 
Cobol85Parser.QualifiedDataNameContext = QualifiedDataNameContext; 
Cobol85Parser.QualifiedDataNameFormat1Context = QualifiedDataNameFormat1Context; 
Cobol85Parser.QualifiedDataNameFormat2Context = QualifiedDataNameFormat2Context; 
Cobol85Parser.QualifiedDataNameFormat3Context = QualifiedDataNameFormat3Context; 
Cobol85Parser.QualifiedDataNameFormat4Context = QualifiedDataNameFormat4Context; 
Cobol85Parser.QualifiedInDataContext = QualifiedInDataContext; 
Cobol85Parser.InDataContext = InDataContext; 
Cobol85Parser.InFileContext = InFileContext; 
Cobol85Parser.InMnemonicContext = InMnemonicContext; 
Cobol85Parser.InSectionContext = InSectionContext; 
Cobol85Parser.InLibraryContext = InLibraryContext; 
Cobol85Parser.InTableContext = InTableContext; 
Cobol85Parser.AlphabetNameContext = AlphabetNameContext; 
Cobol85Parser.AssignmentNameContext = AssignmentNameContext; 
Cobol85Parser.BasisNameContext = BasisNameContext; 
Cobol85Parser.CdNameContext = CdNameContext; 
Cobol85Parser.ClassNameContext = ClassNameContext; 
Cobol85Parser.ComputerNameContext = ComputerNameContext; 
Cobol85Parser.ConditionNameContext = ConditionNameContext; 
Cobol85Parser.DataNameContext = DataNameContext; 
Cobol85Parser.DataDescNameContext = DataDescNameContext; 
Cobol85Parser.EnvironmentNameContext = EnvironmentNameContext; 
Cobol85Parser.FileNameContext = FileNameContext; 
Cobol85Parser.FunctionNameContext = FunctionNameContext; 
Cobol85Parser.IndexNameContext = IndexNameContext; 
Cobol85Parser.LanguageNameContext = LanguageNameContext; 
Cobol85Parser.LibraryNameContext = LibraryNameContext; 
Cobol85Parser.LocalNameContext = LocalNameContext; 
Cobol85Parser.MnemonicNameContext = MnemonicNameContext; 
Cobol85Parser.ParagraphNameContext = ParagraphNameContext; 
Cobol85Parser.ProcedureNameContext = ProcedureNameContext; 
Cobol85Parser.ProgramNameContext = ProgramNameContext; 
Cobol85Parser.RecordNameContext = RecordNameContext; 
Cobol85Parser.ReportNameContext = ReportNameContext; 
Cobol85Parser.RoutineNameContext = RoutineNameContext; 
Cobol85Parser.ScreenNameContext = ScreenNameContext; 
Cobol85Parser.SectionNameContext = SectionNameContext; 
Cobol85Parser.SystemNameContext = SystemNameContext; 
Cobol85Parser.SymbolicCharacterContext = SymbolicCharacterContext; 
Cobol85Parser.TextNameContext = TextNameContext; 
Cobol85Parser.CobolWordContext = CobolWordContext; 
Cobol85Parser.LiteralContext = LiteralContext; 
Cobol85Parser.BooleanLiteralContext = BooleanLiteralContext; 
Cobol85Parser.NumericLiteralContext = NumericLiteralContext; 
Cobol85Parser.IntegerLiteralContext = IntegerLiteralContext; 
Cobol85Parser.CicsDfhRespLiteralContext = CicsDfhRespLiteralContext; 
Cobol85Parser.CicsDfhValueLiteralContext = CicsDfhValueLiteralContext; 
Cobol85Parser.FigurativeConstantContext = FigurativeConstantContext; 
Cobol85Parser.SpecialRegisterContext = SpecialRegisterContext; 
Cobol85Parser.CommentEntryContext = CommentEntryContext; 
