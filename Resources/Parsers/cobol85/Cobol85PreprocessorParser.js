// Generated from Resources/Parsers/cobol85/Cobol85Preprocessor.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import Cobol85PreprocessorListener from './Cobol85PreprocessorListener.js';
const serializedATN = [4,1,292,678,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
5,0,73,8,0,10,0,12,0,76,9,0,1,0,1,0,1,1,1,1,3,1,82,8,1,1,1,1,1,4,1,86,8,
1,11,1,12,1,87,1,2,1,2,1,2,1,2,3,2,94,8,2,1,2,5,2,97,8,2,10,2,12,2,100,9,
2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
3,1,3,1,3,1,3,1,3,3,3,124,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,149,8,3,1,3,3,3,152,
8,3,1,3,3,3,155,8,3,1,3,3,3,158,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,178,8,3,1,3,1,3,1,3,1,3,1,3,1,3,
3,3,186,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,218,8,3,
1,3,1,3,1,3,1,3,1,3,1,3,3,3,226,8,3,1,3,1,3,1,3,1,3,3,3,232,8,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,249,8,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,322,8,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,337,8,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
3,3,359,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,369,8,3,1,3,1,3,1,3,1,3,
3,3,375,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,
391,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,400,8,3,1,3,3,3,403,8,3,1,3,3,3,
406,8,3,1,3,3,3,409,8,3,1,3,3,3,412,8,3,1,3,3,3,415,8,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,435,8,3,1,3,
3,3,438,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,446,8,3,1,4,1,4,1,4,1,4,1,4,3,4,
453,8,4,1,5,1,5,1,5,1,5,1,5,3,5,460,8,5,1,6,1,6,1,6,1,6,1,6,3,6,467,8,6,
1,7,1,7,1,7,5,7,472,8,7,10,7,12,7,475,9,7,1,7,1,7,1,7,1,7,3,7,481,8,7,5,
7,483,8,7,10,7,12,7,486,9,7,1,7,5,7,489,8,7,10,7,12,7,492,9,7,1,7,1,7,1,
8,1,8,1,8,3,8,499,8,8,1,8,1,8,3,8,503,8,8,1,9,1,9,3,9,507,8,9,1,10,1,10,
5,10,511,8,10,10,10,12,10,514,9,10,1,10,1,10,4,10,518,8,10,11,10,12,10,519,
1,10,5,10,523,8,10,10,10,12,10,526,9,10,1,11,1,11,1,11,5,11,531,8,11,10,
11,12,11,534,9,11,1,11,3,11,537,8,11,1,12,1,12,5,12,541,8,12,10,12,12,12,
544,9,12,1,12,4,12,547,8,12,11,12,12,12,548,1,12,1,12,1,13,1,13,1,13,1,13,
1,14,1,14,5,14,559,8,14,10,14,12,14,562,9,14,1,14,1,14,5,14,566,8,14,10,
14,12,14,569,9,14,1,14,1,14,5,14,573,8,14,10,14,12,14,576,9,14,1,14,3,14,
579,8,14,1,14,5,14,582,8,14,10,14,12,14,585,9,14,1,14,3,14,588,8,14,1,15,
1,15,5,15,592,8,15,10,15,12,15,595,9,15,1,15,1,15,3,15,599,8,15,1,16,1,16,
5,16,603,8,16,10,16,12,16,606,9,16,1,16,1,16,3,16,610,8,16,1,17,1,17,1,17,
1,17,3,17,616,8,17,1,18,1,18,1,18,1,18,3,18,622,8,18,1,19,1,19,3,19,626,
8,19,1,20,1,20,3,20,630,8,20,1,21,1,21,1,21,3,21,635,8,21,1,22,1,22,3,22,
639,8,22,1,22,1,22,1,23,1,23,4,23,645,8,23,11,23,12,23,646,1,24,1,24,1,24,
1,24,4,24,653,8,24,11,24,12,24,654,1,25,1,25,1,25,1,25,1,25,1,25,1,25,4,
25,664,8,25,11,25,12,25,665,1,26,1,26,3,26,670,8,26,1,27,1,27,1,28,1,28,
1,29,1,29,1,29,0,0,30,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
38,40,42,44,46,48,50,52,54,56,58,0,83,2,0,16,16,216,216,1,0,7,8,4,0,23,23,
59,59,268,268,270,270,1,0,13,14,2,0,22,22,26,26,2,0,24,24,268,268,1,0,30,
31,2,0,33,33,41,41,2,0,62,62,139,139,2,0,184,184,253,253,2,0,37,37,269,269,
2,0,38,38,42,42,1,0,43,44,1,0,45,46,1,0,57,58,2,0,60,60,64,64,2,0,62,62,
271,271,3,0,270,270,273,273,277,279,1,0,272,274,6,0,35,35,101,101,241,241,
269,269,275,275,277,277,2,0,4,4,80,80,1,0,74,75,4,0,29,29,50,51,71,73,255,
255,2,0,76,76,82,82,1,0,93,94,4,0,24,24,108,108,112,112,268,268,2,0,3,3,
105,105,3,0,29,29,50,50,73,73,2,0,108,108,112,112,3,0,270,270,277,277,279,
279,1,0,114,115,2,0,117,117,126,126,2,0,116,116,121,121,1,0,124,125,2,0,
122,122,127,127,1,0,128,129,1,0,134,135,2,0,137,137,142,142,2,0,136,136,
139,139,1,0,150,151,1,0,153,154,1,0,155,156,1,0,157,158,1,0,160,161,2,0,
170,170,179,179,2,0,167,167,171,171,1,0,174,175,1,0,176,177,1,0,180,181,
1,0,186,187,2,0,191,191,193,193,2,0,34,34,98,99,1,0,188,189,1,0,194,195,
3,0,95,95,164,164,212,212,1,0,197,198,1,0,200,201,2,0,206,206,208,208,2,
0,65,65,244,244,1,0,210,211,1,0,214,215,8,0,19,19,23,23,85,87,89,89,96,96,
256,256,274,274,278,278,2,0,218,218,276,276,1,0,226,227,2,0,229,229,247,
247,2,0,230,230,277,277,1,0,235,236,1,0,242,243,1,0,248,249,2,0,68,68,144,
144,2,0,168,169,224,225,2,0,49,49,131,131,3,0,11,11,206,206,244,244,1,0,
258,259,2,0,260,260,263,263,4,0,23,23,261,261,268,268,280,280,2,0,264,264,
280,280,2,0,65,65,228,228,1,0,265,266,2,0,69,69,199,199,1,0,238,240,1,0,
285,286,16,0,1,17,19,24,26,51,53,54,56,60,62,76,78,87,89,185,187,219,221,
222,224,236,241,244,246,258,260,262,264,280,282,282,891,0,74,1,0,0,0,2,79,
1,0,0,0,4,89,1,0,0,0,6,445,1,0,0,0,8,447,1,0,0,0,10,454,1,0,0,0,12,461,1,
0,0,0,14,468,1,0,0,0,16,498,1,0,0,0,18,506,1,0,0,0,20,508,1,0,0,0,22,527,
1,0,0,0,24,538,1,0,0,0,26,552,1,0,0,0,28,556,1,0,0,0,30,589,1,0,0,0,32,600,
1,0,0,0,34,615,1,0,0,0,36,621,1,0,0,0,38,623,1,0,0,0,40,627,1,0,0,0,42,631,
1,0,0,0,44,636,1,0,0,0,46,644,1,0,0,0,48,652,1,0,0,0,50,663,1,0,0,0,52,669,
1,0,0,0,54,671,1,0,0,0,56,673,1,0,0,0,58,675,1,0,0,0,60,73,3,2,1,0,61,73,
3,14,7,0,62,73,3,8,4,0,63,73,3,10,5,0,64,73,3,12,6,0,65,73,3,26,13,0,66,
73,3,22,11,0,67,73,3,38,19,0,68,73,3,40,20,0,69,73,3,42,21,0,70,73,3,50,
25,0,71,73,5,289,0,0,72,60,1,0,0,0,72,61,1,0,0,0,72,62,1,0,0,0,72,63,1,0,
0,0,72,64,1,0,0,0,72,65,1,0,0,0,72,66,1,0,0,0,72,67,1,0,0,0,72,68,1,0,0,
0,72,69,1,0,0,0,72,70,1,0,0,0,72,71,1,0,0,0,73,76,1,0,0,0,74,72,1,0,0,0,
74,75,1,0,0,0,75,77,1,0,0,0,76,74,1,0,0,0,77,78,5,0,0,1,78,1,1,0,0,0,79,
85,7,0,0,0,80,82,5,282,0,0,81,80,1,0,0,0,81,82,1,0,0,0,82,83,1,0,0,0,83,
86,3,6,3,0,84,86,3,4,2,0,85,81,1,0,0,0,85,84,1,0,0,0,86,87,1,0,0,0,87,85,
1,0,0,0,87,88,1,0,0,0,88,3,1,0,0,0,89,90,5,262,0,0,90,91,5,88,0,0,91,98,
3,6,3,0,92,94,5,282,0,0,93,92,1,0,0,0,93,94,1,0,0,0,94,95,1,0,0,0,95,97,
3,6,3,0,96,93,1,0,0,0,97,100,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,101,
1,0,0,0,100,98,1,0,0,0,101,102,5,223,0,0,102,5,1,0,0,0,103,446,5,1,0,0,104,
446,5,2,0,0,105,446,5,6,0,0,106,107,7,1,0,0,107,108,5,88,0,0,108,109,7,2,
0,0,109,446,5,223,0,0,110,446,5,10,0,0,111,446,5,12,0,0,112,113,7,3,0,0,
113,114,5,88,0,0,114,115,3,54,27,0,115,116,5,223,0,0,116,446,1,0,0,0,117,
446,5,17,0,0,118,123,5,18,0,0,119,120,5,88,0,0,120,121,3,54,27,0,121,122,
5,223,0,0,122,124,1,0,0,0,123,119,1,0,0,0,123,124,1,0,0,0,124,446,1,0,0,
0,125,446,5,20,0,0,126,446,5,21,0,0,127,128,7,4,0,0,128,129,5,88,0,0,129,
130,3,54,27,0,130,131,5,223,0,0,131,446,1,0,0,0,132,446,7,5,0,0,133,446,
5,27,0,0,134,446,5,28,0,0,135,136,7,6,0,0,136,137,5,88,0,0,137,138,3,54,
27,0,138,139,5,223,0,0,139,446,1,0,0,0,140,141,5,32,0,0,141,142,5,88,0,0,
142,143,3,54,27,0,143,144,5,223,0,0,144,446,1,0,0,0,145,157,7,7,0,0,146,
148,5,88,0,0,147,149,7,8,0,0,148,147,1,0,0,0,148,149,1,0,0,0,149,151,1,0,
0,0,150,152,5,282,0,0,151,150,1,0,0,0,151,152,1,0,0,0,152,154,1,0,0,0,153,
155,7,9,0,0,154,153,1,0,0,0,154,155,1,0,0,0,155,156,1,0,0,0,156,158,5,223,
0,0,157,146,1,0,0,0,157,158,1,0,0,0,158,446,1,0,0,0,159,446,5,34,0,0,160,
446,7,10,0,0,161,446,5,36,0,0,162,446,7,11,0,0,163,446,5,40,0,0,164,446,
7,12,0,0,165,446,7,13,0,0,166,446,5,47,0,0,167,446,5,53,0,0,168,446,5,56,
0,0,169,446,7,14,0,0,170,446,7,15,0,0,171,446,5,61,0,0,172,173,7,16,0,0,
173,174,5,88,0,0,174,177,7,17,0,0,175,176,5,282,0,0,176,178,7,17,0,0,177,
175,1,0,0,0,177,178,1,0,0,0,178,179,1,0,0,0,179,446,5,223,0,0,180,181,5,
63,0,0,181,182,5,88,0,0,182,185,7,18,0,0,183,184,5,282,0,0,184,186,7,19,
0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,187,1,0,0,0,187,446,5,223,0,0,188,
446,5,66,0,0,189,446,5,67,0,0,190,191,5,70,0,0,191,192,5,88,0,0,192,193,
7,20,0,0,193,446,5,223,0,0,194,195,7,21,0,0,195,196,5,88,0,0,196,197,7,22,
0,0,197,446,5,223,0,0,198,446,5,77,0,0,199,446,5,78,0,0,200,446,5,79,0,0,
201,446,5,81,0,0,202,203,7,23,0,0,203,204,5,88,0,0,204,205,3,54,27,0,205,
206,5,223,0,0,206,446,1,0,0,0,207,446,5,83,0,0,208,446,5,84,0,0,209,446,
5,90,0,0,210,211,5,91,0,0,211,212,5,88,0,0,212,213,3,54,27,0,213,214,5,282,
0,0,214,217,3,54,27,0,215,216,5,282,0,0,216,218,3,54,27,0,217,215,1,0,0,
0,217,218,1,0,0,0,218,219,1,0,0,0,219,220,5,223,0,0,220,446,1,0,0,0,221,
225,7,24,0,0,222,223,5,88,0,0,223,224,7,25,0,0,224,226,5,223,0,0,225,222,
1,0,0,0,225,226,1,0,0,0,226,446,1,0,0,0,227,231,5,97,0,0,228,229,5,88,0,
0,229,230,7,26,0,0,230,232,5,223,0,0,231,228,1,0,0,0,231,232,1,0,0,0,232,
446,1,0,0,0,233,234,5,100,0,0,234,235,5,88,0,0,235,236,7,27,0,0,236,446,
5,223,0,0,237,446,5,103,0,0,238,446,5,104,0,0,239,446,5,106,0,0,240,446,
5,107,0,0,241,446,5,109,0,0,242,446,5,110,0,0,243,446,5,111,0,0,244,248,
7,28,0,0,245,246,5,88,0,0,246,247,7,29,0,0,247,249,5,223,0,0,248,245,1,0,
0,0,248,249,1,0,0,0,249,446,1,0,0,0,250,446,5,113,0,0,251,446,7,30,0,0,252,
446,7,31,0,0,253,446,5,118,0,0,254,446,5,120,0,0,255,446,7,32,0,0,256,446,
5,123,0,0,257,446,5,119,0,0,258,446,7,33,0,0,259,446,7,34,0,0,260,446,7,
35,0,0,261,446,5,130,0,0,262,446,5,132,0,0,263,446,5,133,0,0,264,446,7,36,
0,0,265,446,7,37,0,0,266,446,5,138,0,0,267,446,7,38,0,0,268,446,5,140,0,
0,269,446,5,141,0,0,270,446,5,143,0,0,271,446,5,145,0,0,272,446,5,146,0,
0,273,446,5,147,0,0,274,446,5,148,0,0,275,446,5,149,0,0,276,446,7,39,0,0,
277,446,5,152,0,0,278,446,7,40,0,0,279,446,7,41,0,0,280,446,7,42,0,0,281,
446,5,159,0,0,282,446,7,43,0,0,283,446,5,162,0,0,284,446,5,163,0,0,285,446,
5,165,0,0,286,446,5,166,0,0,287,446,7,44,0,0,288,446,7,45,0,0,289,446,5,
172,0,0,290,446,5,173,0,0,291,446,7,46,0,0,292,446,7,47,0,0,293,446,5,178,
0,0,294,446,7,48,0,0,295,446,5,182,0,0,296,446,5,183,0,0,297,446,5,185,0,
0,298,446,7,49,0,0,299,446,5,192,0,0,300,301,7,50,0,0,301,302,5,88,0,0,302,
303,7,51,0,0,303,446,5,223,0,0,304,446,5,185,0,0,305,446,7,52,0,0,306,446,
5,190,0,0,307,446,7,53,0,0,308,309,5,196,0,0,309,310,5,88,0,0,310,311,7,
54,0,0,311,446,5,223,0,0,312,446,7,55,0,0,313,446,7,56,0,0,314,315,5,204,
0,0,315,316,5,88,0,0,316,317,3,54,27,0,317,318,5,282,0,0,318,321,3,54,27,
0,319,320,5,282,0,0,320,322,3,54,27,0,321,319,1,0,0,0,321,322,1,0,0,0,322,
323,1,0,0,0,323,324,5,223,0,0,324,446,1,0,0,0,325,326,5,205,0,0,326,327,
5,88,0,0,327,328,3,54,27,0,328,329,5,282,0,0,329,330,3,54,27,0,330,331,5,
223,0,0,331,446,1,0,0,0,332,336,7,57,0,0,333,334,5,88,0,0,334,335,7,58,0,
0,335,337,5,223,0,0,336,333,1,0,0,0,336,337,1,0,0,0,337,446,1,0,0,0,338,
446,5,207,0,0,339,446,5,209,0,0,340,446,5,203,0,0,341,342,7,59,0,0,342,343,
5,88,0,0,343,344,3,52,26,0,344,345,5,223,0,0,345,446,1,0,0,0,346,347,7,60,
0,0,347,348,5,88,0,0,348,349,7,61,0,0,349,446,5,223,0,0,350,446,5,217,0,
0,351,446,7,62,0,0,352,446,5,219,0,0,353,354,5,222,0,0,354,358,5,88,0,0,
355,359,5,5,0,0,356,359,5,9,0,0,357,359,3,54,27,0,358,355,1,0,0,0,358,356,
1,0,0,0,358,357,1,0,0,0,359,360,1,0,0,0,360,446,5,223,0,0,361,368,7,63,0,
0,362,363,5,88,0,0,363,364,3,54,27,0,364,365,5,282,0,0,365,366,3,54,27,0,
366,367,5,223,0,0,367,369,1,0,0,0,368,362,1,0,0,0,368,369,1,0,0,0,369,446,
1,0,0,0,370,371,7,64,0,0,371,374,5,88,0,0,372,375,5,92,0,0,373,375,3,54,
27,0,374,372,1,0,0,0,374,373,1,0,0,0,375,376,1,0,0,0,376,446,5,223,0,0,377,
446,7,65,0,0,378,446,5,231,0,0,379,380,5,232,0,0,380,381,5,88,0,0,381,382,
3,54,27,0,382,383,5,223,0,0,383,446,1,0,0,0,384,446,5,233,0,0,385,390,5,
234,0,0,386,387,5,88,0,0,387,388,3,54,27,0,388,389,5,223,0,0,389,391,1,0,
0,0,390,386,1,0,0,0,390,391,1,0,0,0,391,446,1,0,0,0,392,446,7,66,0,0,393,
446,7,67,0,0,394,446,5,246,0,0,395,446,7,68,0,0,396,414,5,250,0,0,397,399,
5,88,0,0,398,400,7,69,0,0,399,398,1,0,0,0,399,400,1,0,0,0,400,402,1,0,0,
0,401,403,5,282,0,0,402,401,1,0,0,0,402,403,1,0,0,0,403,405,1,0,0,0,404,
406,7,70,0,0,405,404,1,0,0,0,405,406,1,0,0,0,406,408,1,0,0,0,407,409,5,282,
0,0,408,407,1,0,0,0,408,409,1,0,0,0,409,411,1,0,0,0,410,412,7,71,0,0,411,
410,1,0,0,0,411,412,1,0,0,0,412,413,1,0,0,0,413,415,5,223,0,0,414,397,1,
0,0,0,414,415,1,0,0,0,415,446,1,0,0,0,416,446,5,251,0,0,417,418,5,254,0,
0,418,419,5,88,0,0,419,420,7,72,0,0,420,446,5,223,0,0,421,446,5,257,0,0,
422,423,7,73,0,0,423,424,5,88,0,0,424,425,3,52,26,0,425,426,5,223,0,0,426,
446,1,0,0,0,427,428,7,74,0,0,428,429,5,88,0,0,429,430,7,75,0,0,430,446,5,
223,0,0,431,437,7,76,0,0,432,434,5,88,0,0,433,435,7,77,0,0,434,433,1,0,0,
0,434,435,1,0,0,0,435,436,1,0,0,0,436,438,5,223,0,0,437,432,1,0,0,0,437,
438,1,0,0,0,438,446,1,0,0,0,439,440,7,78,0,0,440,441,5,88,0,0,441,442,3,
54,27,0,442,443,5,223,0,0,443,446,1,0,0,0,444,446,5,267,0,0,445,103,1,0,
0,0,445,104,1,0,0,0,445,105,1,0,0,0,445,106,1,0,0,0,445,110,1,0,0,0,445,
111,1,0,0,0,445,112,1,0,0,0,445,117,1,0,0,0,445,118,1,0,0,0,445,125,1,0,
0,0,445,126,1,0,0,0,445,127,1,0,0,0,445,132,1,0,0,0,445,133,1,0,0,0,445,
134,1,0,0,0,445,135,1,0,0,0,445,140,1,0,0,0,445,145,1,0,0,0,445,159,1,0,
0,0,445,160,1,0,0,0,445,161,1,0,0,0,445,162,1,0,0,0,445,163,1,0,0,0,445,
164,1,0,0,0,445,165,1,0,0,0,445,166,1,0,0,0,445,167,1,0,0,0,445,168,1,0,
0,0,445,169,1,0,0,0,445,170,1,0,0,0,445,171,1,0,0,0,445,172,1,0,0,0,445,
180,1,0,0,0,445,188,1,0,0,0,445,189,1,0,0,0,445,190,1,0,0,0,445,194,1,0,
0,0,445,198,1,0,0,0,445,199,1,0,0,0,445,200,1,0,0,0,445,201,1,0,0,0,445,
202,1,0,0,0,445,207,1,0,0,0,445,208,1,0,0,0,445,209,1,0,0,0,445,210,1,0,
0,0,445,221,1,0,0,0,445,227,1,0,0,0,445,233,1,0,0,0,445,237,1,0,0,0,445,
238,1,0,0,0,445,239,1,0,0,0,445,240,1,0,0,0,445,241,1,0,0,0,445,242,1,0,
0,0,445,243,1,0,0,0,445,244,1,0,0,0,445,250,1,0,0,0,445,251,1,0,0,0,445,
252,1,0,0,0,445,253,1,0,0,0,445,254,1,0,0,0,445,255,1,0,0,0,445,256,1,0,
0,0,445,257,1,0,0,0,445,258,1,0,0,0,445,259,1,0,0,0,445,260,1,0,0,0,445,
261,1,0,0,0,445,262,1,0,0,0,445,263,1,0,0,0,445,264,1,0,0,0,445,265,1,0,
0,0,445,266,1,0,0,0,445,267,1,0,0,0,445,268,1,0,0,0,445,269,1,0,0,0,445,
270,1,0,0,0,445,271,1,0,0,0,445,272,1,0,0,0,445,273,1,0,0,0,445,274,1,0,
0,0,445,275,1,0,0,0,445,276,1,0,0,0,445,277,1,0,0,0,445,278,1,0,0,0,445,
279,1,0,0,0,445,280,1,0,0,0,445,281,1,0,0,0,445,282,1,0,0,0,445,283,1,0,
0,0,445,284,1,0,0,0,445,285,1,0,0,0,445,286,1,0,0,0,445,287,1,0,0,0,445,
288,1,0,0,0,445,289,1,0,0,0,445,290,1,0,0,0,445,291,1,0,0,0,445,292,1,0,
0,0,445,293,1,0,0,0,445,294,1,0,0,0,445,295,1,0,0,0,445,296,1,0,0,0,445,
297,1,0,0,0,445,298,1,0,0,0,445,299,1,0,0,0,445,300,1,0,0,0,445,304,1,0,
0,0,445,305,1,0,0,0,445,306,1,0,0,0,445,307,1,0,0,0,445,308,1,0,0,0,445,
312,1,0,0,0,445,313,1,0,0,0,445,314,1,0,0,0,445,325,1,0,0,0,445,332,1,0,
0,0,445,338,1,0,0,0,445,339,1,0,0,0,445,340,1,0,0,0,445,341,1,0,0,0,445,
346,1,0,0,0,445,350,1,0,0,0,445,351,1,0,0,0,445,352,1,0,0,0,445,353,1,0,
0,0,445,361,1,0,0,0,445,370,1,0,0,0,445,377,1,0,0,0,445,378,1,0,0,0,445,
379,1,0,0,0,445,384,1,0,0,0,445,385,1,0,0,0,445,392,1,0,0,0,445,393,1,0,
0,0,445,394,1,0,0,0,445,395,1,0,0,0,445,396,1,0,0,0,445,416,1,0,0,0,445,
417,1,0,0,0,445,421,1,0,0,0,445,422,1,0,0,0,445,427,1,0,0,0,445,431,1,0,
0,0,445,439,1,0,0,0,445,444,1,0,0,0,446,7,1,0,0,0,447,448,5,55,0,0,448,449,
5,18,0,0,449,450,3,46,23,0,450,452,5,52,0,0,451,453,5,283,0,0,452,451,1,
0,0,0,452,453,1,0,0,0,453,9,1,0,0,0,454,455,5,55,0,0,455,456,5,234,0,0,456,
457,3,48,24,0,457,459,5,52,0,0,458,460,5,283,0,0,459,458,1,0,0,0,459,460,
1,0,0,0,460,11,1,0,0,0,461,462,5,55,0,0,462,463,5,237,0,0,463,464,3,46,23,
0,464,466,5,52,0,0,465,467,5,283,0,0,466,465,1,0,0,0,466,467,1,0,0,0,467,
13,1,0,0,0,468,469,5,25,0,0,469,484,3,16,8,0,470,472,5,289,0,0,471,470,1,
0,0,0,472,475,1,0,0,0,473,471,1,0,0,0,473,474,1,0,0,0,474,480,1,0,0,0,475,
473,1,0,0,0,476,481,3,30,15,0,477,481,3,32,16,0,478,481,3,20,10,0,479,481,
5,245,0,0,480,476,1,0,0,0,480,477,1,0,0,0,480,478,1,0,0,0,480,479,1,0,0,
0,481,483,1,0,0,0,482,473,1,0,0,0,483,486,1,0,0,0,484,482,1,0,0,0,484,485,
1,0,0,0,485,490,1,0,0,0,486,484,1,0,0,0,487,489,5,289,0,0,488,487,1,0,0,
0,489,492,1,0,0,0,490,488,1,0,0,0,490,491,1,0,0,0,491,493,1,0,0,0,492,490,
1,0,0,0,493,494,5,283,0,0,494,15,1,0,0,0,495,499,3,54,27,0,496,499,3,52,
26,0,497,499,3,56,28,0,498,495,1,0,0,0,498,496,1,0,0,0,498,497,1,0,0,0,499,
502,1,0,0,0,500,501,7,79,0,0,501,503,3,18,9,0,502,500,1,0,0,0,502,503,1,
0,0,0,503,17,1,0,0,0,504,507,3,54,27,0,505,507,3,52,26,0,506,504,1,0,0,0,
506,505,1,0,0,0,507,19,1,0,0,0,508,512,5,221,0,0,509,511,5,289,0,0,510,509,
1,0,0,0,511,514,1,0,0,0,512,510,1,0,0,0,512,513,1,0,0,0,513,515,1,0,0,0,
514,512,1,0,0,0,515,524,3,28,14,0,516,518,5,289,0,0,517,516,1,0,0,0,518,
519,1,0,0,0,519,517,1,0,0,0,519,520,1,0,0,0,520,521,1,0,0,0,521,523,3,28,
14,0,522,517,1,0,0,0,523,526,1,0,0,0,524,522,1,0,0,0,524,525,1,0,0,0,525,
21,1,0,0,0,526,524,1,0,0,0,527,532,3,24,12,0,528,531,3,14,7,0,529,531,3,
46,23,0,530,528,1,0,0,0,530,529,1,0,0,0,531,534,1,0,0,0,532,530,1,0,0,0,
532,533,1,0,0,0,533,536,1,0,0,0,534,532,1,0,0,0,535,537,3,26,13,0,536,535,
1,0,0,0,536,537,1,0,0,0,537,23,1,0,0,0,538,546,5,220,0,0,539,541,5,289,0,
0,540,539,1,0,0,0,541,544,1,0,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,545,
1,0,0,0,544,542,1,0,0,0,545,547,3,28,14,0,546,542,1,0,0,0,547,548,1,0,0,
0,548,546,1,0,0,0,548,549,1,0,0,0,549,550,1,0,0,0,550,551,5,283,0,0,551,
25,1,0,0,0,552,553,5,220,0,0,553,554,5,200,0,0,554,555,5,283,0,0,555,27,
1,0,0,0,556,560,3,34,17,0,557,559,5,289,0,0,558,557,1,0,0,0,559,562,1,0,
0,0,560,558,1,0,0,0,560,561,1,0,0,0,561,563,1,0,0,0,562,560,1,0,0,0,563,
567,5,15,0,0,564,566,5,289,0,0,565,564,1,0,0,0,566,569,1,0,0,0,567,565,1,
0,0,0,567,568,1,0,0,0,568,570,1,0,0,0,569,567,1,0,0,0,570,578,3,36,18,0,
571,573,5,289,0,0,572,571,1,0,0,0,573,576,1,0,0,0,574,572,1,0,0,0,574,575,
1,0,0,0,575,577,1,0,0,0,576,574,1,0,0,0,577,579,3,30,15,0,578,574,1,0,0,
0,578,579,1,0,0,0,579,587,1,0,0,0,580,582,5,289,0,0,581,580,1,0,0,0,582,
585,1,0,0,0,583,581,1,0,0,0,583,584,1,0,0,0,584,586,1,0,0,0,585,583,1,0,
0,0,586,588,3,32,16,0,587,583,1,0,0,0,587,588,1,0,0,0,588,29,1,0,0,0,589,
593,7,79,0,0,590,592,5,289,0,0,591,590,1,0,0,0,592,595,1,0,0,0,593,591,1,
0,0,0,593,594,1,0,0,0,594,598,1,0,0,0,595,593,1,0,0,0,596,599,3,54,27,0,
597,599,3,52,26,0,598,596,1,0,0,0,598,597,1,0,0,0,599,31,1,0,0,0,600,604,
5,202,0,0,601,603,5,289,0,0,602,601,1,0,0,0,603,606,1,0,0,0,604,602,1,0,
0,0,604,605,1,0,0,0,605,609,1,0,0,0,606,604,1,0,0,0,607,610,3,54,27,0,608,
610,3,52,26,0,609,607,1,0,0,0,609,608,1,0,0,0,610,33,1,0,0,0,611,616,3,54,
27,0,612,616,3,52,26,0,613,616,3,44,22,0,614,616,3,50,25,0,615,611,1,0,0,
0,615,612,1,0,0,0,615,613,1,0,0,0,615,614,1,0,0,0,616,35,1,0,0,0,617,622,
3,54,27,0,618,622,3,52,26,0,619,622,3,44,22,0,620,622,3,50,25,0,621,617,
1,0,0,0,621,618,1,0,0,0,621,619,1,0,0,0,621,620,1,0,0,0,622,37,1,0,0,0,623,
625,5,48,0,0,624,626,5,283,0,0,625,624,1,0,0,0,625,626,1,0,0,0,626,39,1,
0,0,0,627,629,7,80,0,0,628,630,5,283,0,0,629,628,1,0,0,0,629,630,1,0,0,0,
630,41,1,0,0,0,631,632,5,252,0,0,632,634,3,54,27,0,633,635,5,283,0,0,634,
633,1,0,0,0,634,635,1,0,0,0,635,43,1,0,0,0,636,638,5,284,0,0,637,639,3,46,
23,0,638,637,1,0,0,0,638,639,1,0,0,0,639,640,1,0,0,0,640,641,5,284,0,0,641,
45,1,0,0,0,642,645,3,50,25,0,643,645,5,289,0,0,644,642,1,0,0,0,644,643,1,
0,0,0,645,646,1,0,0,0,646,644,1,0,0,0,646,647,1,0,0,0,647,47,1,0,0,0,648,
653,3,50,25,0,649,653,5,25,0,0,650,653,5,220,0,0,651,653,5,289,0,0,652,648,
1,0,0,0,652,649,1,0,0,0,652,650,1,0,0,0,652,651,1,0,0,0,653,654,1,0,0,0,
654,652,1,0,0,0,654,655,1,0,0,0,655,49,1,0,0,0,656,664,3,52,26,0,657,664,
3,54,27,0,658,664,3,56,28,0,659,664,5,292,0,0,660,664,5,283,0,0,661,664,
5,88,0,0,662,664,5,223,0,0,663,656,1,0,0,0,663,657,1,0,0,0,663,658,1,0,0,
0,663,659,1,0,0,0,663,660,1,0,0,0,663,661,1,0,0,0,663,662,1,0,0,0,664,665,
1,0,0,0,665,663,1,0,0,0,665,666,1,0,0,0,666,51,1,0,0,0,667,670,5,287,0,0,
668,670,3,58,29,0,669,667,1,0,0,0,669,668,1,0,0,0,670,53,1,0,0,0,671,672,
7,81,0,0,672,55,1,0,0,0,673,674,5,288,0,0,674,57,1,0,0,0,675,676,7,82,0,
0,676,59,1,0,0,0,74,72,74,81,85,87,93,98,123,148,151,154,157,177,185,217,
225,231,248,321,336,358,368,374,390,399,402,405,408,411,414,434,437,445,
452,459,466,473,480,484,490,498,502,506,512,519,524,530,532,536,542,548,
560,567,574,578,583,587,593,598,604,609,615,621,625,629,634,638,644,646,
652,654,663,665,669];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class Cobol85PreprocessorParser extends antlr4.Parser {

    static grammarFileName = "Cobol85Preprocessor.g4";
    static literalNames = [ null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            "'('", null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, "')'", 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, "'*>'", "','", "'.'", "'=='" ];
    static symbolicNames = [ null, "ADATA", "ADV", "ALIAS", "ANSI", "ANY", 
                             "APOST", "AR", "ARITH", "AUTO", "AWO", "BIN", 
                             "BLOCK0", "BUF", "BUFSIZE", "BY", "CBL", "CBLCARD", 
                             "CICS", "CO", "COBOL2", "COBOL3", "CODEPAGE", 
                             "COMPAT", "COMPILE", "COPY", "CP", "CPP", "CPSM", 
                             "CS", "CURR", "CURRENCY", "DATA", "DATEPROC", 
                             "DBCS", "DD", "DEBUG", "DECK", "DIAGTRUNC", 
                             "DLI", "DLL", "DP", "DTR", "DU", "DUMP", "DYN", 
                             "DYNAM", "EDF", "EJECT", "EJPD", "EN", "ENGLISH", 
                             "END_EXEC", "EPILOG", "EXCI", "EXEC", "EXIT", 
                             "EXP", "EXPORTALL", "EXTEND", "FASTSRT", "FEPI", 
                             "FLAG", "FLAGSTD", "FSRT", "FULL", "GDS", "GRAPHIC", 
                             "HOOK", "IN", "INTDATE", "JA", "JP", "KA", 
                             "LANG", "LANGUAGE", "LC", "LEASM", "LENGTH", 
                             "LIB", "LILIAN", "LIN", "LINECOUNT", "LINKAGE", 
                             "LIST", "LM", "LONGMIXED", "LONGUPPER", "LPARENCHAR", 
                             "LU", "MAP", "MARGINS", "MAX", "MD", "MDECK", 
                             "MIG", "MIXED", "NAME", "NAT", "NATIONAL", 
                             "NATLANG", "NN", "NO", "NOADATA", "NOADV", 
                             "NOALIAS", "NOAWO", "NOBLOCK0", "NOC", "NOCBLCARD", 
                             "NOCICS", "NOCMPR2", "NOCOMPILE", "NOCPSM", 
                             "NOCURR", "NOCURRENCY", "NOD", "NODATEPROC", 
                             "NODBCS", "NODE", "NODEBUG", "NODECK", "NODIAGTRUNC", 
                             "NODLL", "NODU", "NODUMP", "NODP", "NODTR", 
                             "NODYN", "NODYNAM", "NOEDF", "NOEJPD", "NOEPILOG", 
                             "NOEXIT", "NOEXP", "NOEXPORTALL", "NOF", "NOFASTSRT", 
                             "NOFEPI", "NOFLAG", "NOFLAGMIG", "NOFLAGSTD", 
                             "NOFSRT", "NOGRAPHIC", "NOHOOK", "NOLENGTH", 
                             "NOLIB", "NOLINKAGE", "NOLIST", "NOMAP", "NOMD", 
                             "NOMDECK", "NONAME", "NONUM", "NONUMBER", "NOOBJ", 
                             "NOOBJECT", "NOOFF", "NOOFFSET", "NOOPSEQUENCE", 
                             "NOOPT", "NOOPTIMIZE", "NOOPTIONS", "NOP", 
                             "NOPFD", "NOPROLOG", "NORENT", "NOS", "NOSEP", 
                             "NOSEPARATE", "NOSEQ", "NOSOURCE", "NOSPIE", 
                             "NOSQL", "NOSQLC", "NOSQLCCSID", "NOSSR", "NOSSRANGE", 
                             "NOSTDTRUNC", "NOSEQUENCE", "NOTERM", "NOTERMINAL", 
                             "NOTEST", "NOTHREAD", "NOTRIG", "NOVBREF", 
                             "NOWD", "NOWORD", "NOX", "NOXREF", "NOZWB", 
                             "NS", "NSEQ", "NSYMBOL", "NUM", "NUMBER", "NUMPROC", 
                             "OBJ", "OBJECT", "OF", "OFF", "OFFSET", "ON", 
                             "OP", "OPMARGINS", "OPSEQUENCE", "OPT", "OPTFILE", 
                             "OPTIMIZE", "OPTIONS", "OUT", "OUTDD", "PFD", 
                             "PPTDBG", "PGMN", "PGMNAME", "PROCESS", "PROLOG", 
                             "QUOTE", "RENT", "REPLACE", "REPLACING", "RMODE", 
                             "RPARENCHAR", "SEP", "SEPARATE", "SEQ", "SEQUENCE", 
                             "SHORT", "SIZE", "SOURCE", "SP", "SPACE", "SPIE", 
                             "SQL", "SQLC", "SQLCCSID", "SQLIMS", "SKIP1", 
                             "SKIP2", "SKIP3", "SS", "SSR", "SSRANGE", "STD", 
                             "SUPPRESS", "SYSEIB", "SZ", "TERM", "TERMINAL", 
                             "TEST", "THREAD", "TITLE", "TRIG", "TRUNC", 
                             "UE", "UPPER", "VBREF", "WD", "WORD", "XMLPARSE", 
                             "XMLSS", "XOPTS", "XP", "XREF", "YEARWINDOW", 
                             "YW", "ZWB", "C_CHAR", "D_CHAR", "E_CHAR", 
                             "F_CHAR", "H_CHAR", "I_CHAR", "M_CHAR", "N_CHAR", 
                             "Q_CHAR", "S_CHAR", "U_CHAR", "W_CHAR", "X_CHAR", 
                             "COMMENTTAG", "COMMACHAR", "DOT", "DOUBLEEQUALCHAR", 
                             "NONNUMERICLITERAL", "NUMERICLITERAL", "IDENTIFIER", 
                             "FILENAME", "NEWLINE", "COMMENTLINE", "WS", 
                             "TEXT" ];
    static ruleNames = [ "startRule", "compilerOptions", "compilerXOpts", 
                         "compilerOption", "execCicsStatement", "execSqlStatement", 
                         "execSqlImsStatement", "copyStatement", "copySource", 
                         "copyLibrary", "replacingPhrase", "replaceArea", 
                         "replaceByStatement", "replaceOffStatement", "replaceClause", 
                         "directoryPhrase", "familyPhrase", "replaceable", 
                         "replacement", "ejectStatement", "skipStatement", 
                         "titleStatement", "pseudoText", "charData", "charDataSql", 
                         "charDataLine", "cobolWord", "literal", "filename", 
                         "charDataKeyword" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = Cobol85PreprocessorParser.ruleNames;
        this.literalNames = Cobol85PreprocessorParser.literalNames;
        this.symbolicNames = Cobol85PreprocessorParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	startRule() {
	    let localctx = new StartRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, Cobol85PreprocessorParser.RULE_startRule);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 74;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85PreprocessorParser.ADATA) | (1 << Cobol85PreprocessorParser.ADV) | (1 << Cobol85PreprocessorParser.ALIAS) | (1 << Cobol85PreprocessorParser.ANSI) | (1 << Cobol85PreprocessorParser.ANY) | (1 << Cobol85PreprocessorParser.APOST) | (1 << Cobol85PreprocessorParser.AR) | (1 << Cobol85PreprocessorParser.ARITH) | (1 << Cobol85PreprocessorParser.AUTO) | (1 << Cobol85PreprocessorParser.AWO) | (1 << Cobol85PreprocessorParser.BIN) | (1 << Cobol85PreprocessorParser.BLOCK0) | (1 << Cobol85PreprocessorParser.BUF) | (1 << Cobol85PreprocessorParser.BUFSIZE) | (1 << Cobol85PreprocessorParser.BY) | (1 << Cobol85PreprocessorParser.CBL) | (1 << Cobol85PreprocessorParser.CBLCARD) | (1 << Cobol85PreprocessorParser.CO) | (1 << Cobol85PreprocessorParser.COBOL2) | (1 << Cobol85PreprocessorParser.COBOL3) | (1 << Cobol85PreprocessorParser.CODEPAGE) | (1 << Cobol85PreprocessorParser.COMPAT) | (1 << Cobol85PreprocessorParser.COMPILE) | (1 << Cobol85PreprocessorParser.COPY) | (1 << Cobol85PreprocessorParser.CP) | (1 << Cobol85PreprocessorParser.CPP) | (1 << Cobol85PreprocessorParser.CPSM) | (1 << Cobol85PreprocessorParser.CS) | (1 << Cobol85PreprocessorParser.CURR) | (1 << Cobol85PreprocessorParser.CURRENCY))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Cobol85PreprocessorParser.DATA - 32)) | (1 << (Cobol85PreprocessorParser.DATEPROC - 32)) | (1 << (Cobol85PreprocessorParser.DBCS - 32)) | (1 << (Cobol85PreprocessorParser.DD - 32)) | (1 << (Cobol85PreprocessorParser.DEBUG - 32)) | (1 << (Cobol85PreprocessorParser.DECK - 32)) | (1 << (Cobol85PreprocessorParser.DIAGTRUNC - 32)) | (1 << (Cobol85PreprocessorParser.DLI - 32)) | (1 << (Cobol85PreprocessorParser.DLL - 32)) | (1 << (Cobol85PreprocessorParser.DP - 32)) | (1 << (Cobol85PreprocessorParser.DTR - 32)) | (1 << (Cobol85PreprocessorParser.DU - 32)) | (1 << (Cobol85PreprocessorParser.DUMP - 32)) | (1 << (Cobol85PreprocessorParser.DYN - 32)) | (1 << (Cobol85PreprocessorParser.DYNAM - 32)) | (1 << (Cobol85PreprocessorParser.EDF - 32)) | (1 << (Cobol85PreprocessorParser.EJECT - 32)) | (1 << (Cobol85PreprocessorParser.EJPD - 32)) | (1 << (Cobol85PreprocessorParser.EN - 32)) | (1 << (Cobol85PreprocessorParser.ENGLISH - 32)) | (1 << (Cobol85PreprocessorParser.EPILOG - 32)) | (1 << (Cobol85PreprocessorParser.EXCI - 32)) | (1 << (Cobol85PreprocessorParser.EXEC - 32)) | (1 << (Cobol85PreprocessorParser.EXIT - 32)) | (1 << (Cobol85PreprocessorParser.EXP - 32)) | (1 << (Cobol85PreprocessorParser.EXPORTALL - 32)) | (1 << (Cobol85PreprocessorParser.EXTEND - 32)) | (1 << (Cobol85PreprocessorParser.FASTSRT - 32)) | (1 << (Cobol85PreprocessorParser.FLAG - 32)) | (1 << (Cobol85PreprocessorParser.FLAGSTD - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Cobol85PreprocessorParser.FSRT - 64)) | (1 << (Cobol85PreprocessorParser.FULL - 64)) | (1 << (Cobol85PreprocessorParser.GDS - 64)) | (1 << (Cobol85PreprocessorParser.GRAPHIC - 64)) | (1 << (Cobol85PreprocessorParser.HOOK - 64)) | (1 << (Cobol85PreprocessorParser.IN - 64)) | (1 << (Cobol85PreprocessorParser.INTDATE - 64)) | (1 << (Cobol85PreprocessorParser.JA - 64)) | (1 << (Cobol85PreprocessorParser.JP - 64)) | (1 << (Cobol85PreprocessorParser.KA - 64)) | (1 << (Cobol85PreprocessorParser.LANG - 64)) | (1 << (Cobol85PreprocessorParser.LANGUAGE - 64)) | (1 << (Cobol85PreprocessorParser.LC - 64)) | (1 << (Cobol85PreprocessorParser.LENGTH - 64)) | (1 << (Cobol85PreprocessorParser.LIB - 64)) | (1 << (Cobol85PreprocessorParser.LILIAN - 64)) | (1 << (Cobol85PreprocessorParser.LIN - 64)) | (1 << (Cobol85PreprocessorParser.LINECOUNT - 64)) | (1 << (Cobol85PreprocessorParser.LINKAGE - 64)) | (1 << (Cobol85PreprocessorParser.LIST - 64)) | (1 << (Cobol85PreprocessorParser.LM - 64)) | (1 << (Cobol85PreprocessorParser.LONGMIXED - 64)) | (1 << (Cobol85PreprocessorParser.LONGUPPER - 64)) | (1 << (Cobol85PreprocessorParser.LPARENCHAR - 64)) | (1 << (Cobol85PreprocessorParser.LU - 64)) | (1 << (Cobol85PreprocessorParser.MAP - 64)) | (1 << (Cobol85PreprocessorParser.MARGINS - 64)) | (1 << (Cobol85PreprocessorParser.MAX - 64)) | (1 << (Cobol85PreprocessorParser.MD - 64)) | (1 << (Cobol85PreprocessorParser.MDECK - 64)) | (1 << (Cobol85PreprocessorParser.MIG - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Cobol85PreprocessorParser.MIXED - 96)) | (1 << (Cobol85PreprocessorParser.NAME - 96)) | (1 << (Cobol85PreprocessorParser.NAT - 96)) | (1 << (Cobol85PreprocessorParser.NATIONAL - 96)) | (1 << (Cobol85PreprocessorParser.NATLANG - 96)) | (1 << (Cobol85PreprocessorParser.NN - 96)) | (1 << (Cobol85PreprocessorParser.NO - 96)) | (1 << (Cobol85PreprocessorParser.NOADATA - 96)) | (1 << (Cobol85PreprocessorParser.NOADV - 96)) | (1 << (Cobol85PreprocessorParser.NOALIAS - 96)) | (1 << (Cobol85PreprocessorParser.NOAWO - 96)) | (1 << (Cobol85PreprocessorParser.NOBLOCK0 - 96)) | (1 << (Cobol85PreprocessorParser.NOC - 96)) | (1 << (Cobol85PreprocessorParser.NOCBLCARD - 96)) | (1 << (Cobol85PreprocessorParser.NOCICS - 96)) | (1 << (Cobol85PreprocessorParser.NOCMPR2 - 96)) | (1 << (Cobol85PreprocessorParser.NOCOMPILE - 96)) | (1 << (Cobol85PreprocessorParser.NOCPSM - 96)) | (1 << (Cobol85PreprocessorParser.NOCURR - 96)) | (1 << (Cobol85PreprocessorParser.NOCURRENCY - 96)) | (1 << (Cobol85PreprocessorParser.NOD - 96)) | (1 << (Cobol85PreprocessorParser.NODATEPROC - 96)) | (1 << (Cobol85PreprocessorParser.NODBCS - 96)) | (1 << (Cobol85PreprocessorParser.NODE - 96)) | (1 << (Cobol85PreprocessorParser.NODEBUG - 96)) | (1 << (Cobol85PreprocessorParser.NODECK - 96)) | (1 << (Cobol85PreprocessorParser.NODIAGTRUNC - 96)) | (1 << (Cobol85PreprocessorParser.NODLL - 96)) | (1 << (Cobol85PreprocessorParser.NODU - 96)) | (1 << (Cobol85PreprocessorParser.NODUMP - 96)) | (1 << (Cobol85PreprocessorParser.NODP - 96)) | (1 << (Cobol85PreprocessorParser.NODTR - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (Cobol85PreprocessorParser.NODYN - 128)) | (1 << (Cobol85PreprocessorParser.NODYNAM - 128)) | (1 << (Cobol85PreprocessorParser.NOEDF - 128)) | (1 << (Cobol85PreprocessorParser.NOEJPD - 128)) | (1 << (Cobol85PreprocessorParser.NOEPILOG - 128)) | (1 << (Cobol85PreprocessorParser.NOEXIT - 128)) | (1 << (Cobol85PreprocessorParser.NOEXP - 128)) | (1 << (Cobol85PreprocessorParser.NOEXPORTALL - 128)) | (1 << (Cobol85PreprocessorParser.NOF - 128)) | (1 << (Cobol85PreprocessorParser.NOFASTSRT - 128)) | (1 << (Cobol85PreprocessorParser.NOFEPI - 128)) | (1 << (Cobol85PreprocessorParser.NOFLAG - 128)) | (1 << (Cobol85PreprocessorParser.NOFLAGMIG - 128)) | (1 << (Cobol85PreprocessorParser.NOFLAGSTD - 128)) | (1 << (Cobol85PreprocessorParser.NOFSRT - 128)) | (1 << (Cobol85PreprocessorParser.NOGRAPHIC - 128)) | (1 << (Cobol85PreprocessorParser.NOHOOK - 128)) | (1 << (Cobol85PreprocessorParser.NOLENGTH - 128)) | (1 << (Cobol85PreprocessorParser.NOLIB - 128)) | (1 << (Cobol85PreprocessorParser.NOLINKAGE - 128)) | (1 << (Cobol85PreprocessorParser.NOLIST - 128)) | (1 << (Cobol85PreprocessorParser.NOMAP - 128)) | (1 << (Cobol85PreprocessorParser.NOMD - 128)) | (1 << (Cobol85PreprocessorParser.NOMDECK - 128)) | (1 << (Cobol85PreprocessorParser.NONAME - 128)) | (1 << (Cobol85PreprocessorParser.NONUM - 128)) | (1 << (Cobol85PreprocessorParser.NONUMBER - 128)) | (1 << (Cobol85PreprocessorParser.NOOBJ - 128)) | (1 << (Cobol85PreprocessorParser.NOOBJECT - 128)) | (1 << (Cobol85PreprocessorParser.NOOFF - 128)) | (1 << (Cobol85PreprocessorParser.NOOFFSET - 128)) | (1 << (Cobol85PreprocessorParser.NOOPSEQUENCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (Cobol85PreprocessorParser.NOOPT - 160)) | (1 << (Cobol85PreprocessorParser.NOOPTIMIZE - 160)) | (1 << (Cobol85PreprocessorParser.NOOPTIONS - 160)) | (1 << (Cobol85PreprocessorParser.NOP - 160)) | (1 << (Cobol85PreprocessorParser.NOPFD - 160)) | (1 << (Cobol85PreprocessorParser.NOPROLOG - 160)) | (1 << (Cobol85PreprocessorParser.NORENT - 160)) | (1 << (Cobol85PreprocessorParser.NOS - 160)) | (1 << (Cobol85PreprocessorParser.NOSEP - 160)) | (1 << (Cobol85PreprocessorParser.NOSEPARATE - 160)) | (1 << (Cobol85PreprocessorParser.NOSEQ - 160)) | (1 << (Cobol85PreprocessorParser.NOSOURCE - 160)) | (1 << (Cobol85PreprocessorParser.NOSPIE - 160)) | (1 << (Cobol85PreprocessorParser.NOSQL - 160)) | (1 << (Cobol85PreprocessorParser.NOSQLC - 160)) | (1 << (Cobol85PreprocessorParser.NOSQLCCSID - 160)) | (1 << (Cobol85PreprocessorParser.NOSSR - 160)) | (1 << (Cobol85PreprocessorParser.NOSSRANGE - 160)) | (1 << (Cobol85PreprocessorParser.NOSTDTRUNC - 160)) | (1 << (Cobol85PreprocessorParser.NOSEQUENCE - 160)) | (1 << (Cobol85PreprocessorParser.NOTERM - 160)) | (1 << (Cobol85PreprocessorParser.NOTERMINAL - 160)) | (1 << (Cobol85PreprocessorParser.NOTEST - 160)) | (1 << (Cobol85PreprocessorParser.NOTHREAD - 160)) | (1 << (Cobol85PreprocessorParser.NOTRIG - 160)) | (1 << (Cobol85PreprocessorParser.NOVBREF - 160)) | (1 << (Cobol85PreprocessorParser.NOWORD - 160)) | (1 << (Cobol85PreprocessorParser.NOX - 160)) | (1 << (Cobol85PreprocessorParser.NOXREF - 160)) | (1 << (Cobol85PreprocessorParser.NOZWB - 160)) | (1 << (Cobol85PreprocessorParser.NS - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (Cobol85PreprocessorParser.NSEQ - 192)) | (1 << (Cobol85PreprocessorParser.NSYMBOL - 192)) | (1 << (Cobol85PreprocessorParser.NUM - 192)) | (1 << (Cobol85PreprocessorParser.NUMBER - 192)) | (1 << (Cobol85PreprocessorParser.NUMPROC - 192)) | (1 << (Cobol85PreprocessorParser.OBJ - 192)) | (1 << (Cobol85PreprocessorParser.OBJECT - 192)) | (1 << (Cobol85PreprocessorParser.OF - 192)) | (1 << (Cobol85PreprocessorParser.OFF - 192)) | (1 << (Cobol85PreprocessorParser.OFFSET - 192)) | (1 << (Cobol85PreprocessorParser.ON - 192)) | (1 << (Cobol85PreprocessorParser.OP - 192)) | (1 << (Cobol85PreprocessorParser.OPMARGINS - 192)) | (1 << (Cobol85PreprocessorParser.OPSEQUENCE - 192)) | (1 << (Cobol85PreprocessorParser.OPT - 192)) | (1 << (Cobol85PreprocessorParser.OPTFILE - 192)) | (1 << (Cobol85PreprocessorParser.OPTIMIZE - 192)) | (1 << (Cobol85PreprocessorParser.OPTIONS - 192)) | (1 << (Cobol85PreprocessorParser.OUT - 192)) | (1 << (Cobol85PreprocessorParser.OUTDD - 192)) | (1 << (Cobol85PreprocessorParser.PFD - 192)) | (1 << (Cobol85PreprocessorParser.PPTDBG - 192)) | (1 << (Cobol85PreprocessorParser.PGMN - 192)) | (1 << (Cobol85PreprocessorParser.PGMNAME - 192)) | (1 << (Cobol85PreprocessorParser.PROCESS - 192)) | (1 << (Cobol85PreprocessorParser.PROLOG - 192)) | (1 << (Cobol85PreprocessorParser.QUOTE - 192)) | (1 << (Cobol85PreprocessorParser.RENT - 192)) | (1 << (Cobol85PreprocessorParser.REPLACE - 192)) | (1 << (Cobol85PreprocessorParser.REPLACING - 192)) | (1 << (Cobol85PreprocessorParser.RMODE - 192)) | (1 << (Cobol85PreprocessorParser.RPARENCHAR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (Cobol85PreprocessorParser.SEP - 224)) | (1 << (Cobol85PreprocessorParser.SEPARATE - 224)) | (1 << (Cobol85PreprocessorParser.SEQ - 224)) | (1 << (Cobol85PreprocessorParser.SEQUENCE - 224)) | (1 << (Cobol85PreprocessorParser.SHORT - 224)) | (1 << (Cobol85PreprocessorParser.SIZE - 224)) | (1 << (Cobol85PreprocessorParser.SOURCE - 224)) | (1 << (Cobol85PreprocessorParser.SP - 224)) | (1 << (Cobol85PreprocessorParser.SPACE - 224)) | (1 << (Cobol85PreprocessorParser.SPIE - 224)) | (1 << (Cobol85PreprocessorParser.SQL - 224)) | (1 << (Cobol85PreprocessorParser.SQLC - 224)) | (1 << (Cobol85PreprocessorParser.SQLCCSID - 224)) | (1 << (Cobol85PreprocessorParser.SKIP1 - 224)) | (1 << (Cobol85PreprocessorParser.SKIP2 - 224)) | (1 << (Cobol85PreprocessorParser.SKIP3 - 224)) | (1 << (Cobol85PreprocessorParser.SS - 224)) | (1 << (Cobol85PreprocessorParser.SSR - 224)) | (1 << (Cobol85PreprocessorParser.SSRANGE - 224)) | (1 << (Cobol85PreprocessorParser.STD - 224)) | (1 << (Cobol85PreprocessorParser.SYSEIB - 224)) | (1 << (Cobol85PreprocessorParser.SZ - 224)) | (1 << (Cobol85PreprocessorParser.TERM - 224)) | (1 << (Cobol85PreprocessorParser.TERMINAL - 224)) | (1 << (Cobol85PreprocessorParser.TEST - 224)) | (1 << (Cobol85PreprocessorParser.THREAD - 224)) | (1 << (Cobol85PreprocessorParser.TITLE - 224)) | (1 << (Cobol85PreprocessorParser.TRIG - 224)) | (1 << (Cobol85PreprocessorParser.TRUNC - 224)) | (1 << (Cobol85PreprocessorParser.UE - 224)))) !== 0) || ((((_la - 256)) & ~0x1f) == 0 && ((1 << (_la - 256)) & ((1 << (Cobol85PreprocessorParser.UPPER - 256)) | (1 << (Cobol85PreprocessorParser.VBREF - 256)) | (1 << (Cobol85PreprocessorParser.WD - 256)) | (1 << (Cobol85PreprocessorParser.XMLPARSE - 256)) | (1 << (Cobol85PreprocessorParser.XMLSS - 256)) | (1 << (Cobol85PreprocessorParser.XOPTS - 256)) | (1 << (Cobol85PreprocessorParser.XREF - 256)) | (1 << (Cobol85PreprocessorParser.YEARWINDOW - 256)) | (1 << (Cobol85PreprocessorParser.YW - 256)) | (1 << (Cobol85PreprocessorParser.ZWB - 256)) | (1 << (Cobol85PreprocessorParser.C_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.D_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.E_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.F_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.H_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.I_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.M_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.N_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.Q_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.S_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.U_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.W_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.X_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.COMMACHAR - 256)) | (1 << (Cobol85PreprocessorParser.DOT - 256)) | (1 << (Cobol85PreprocessorParser.NONNUMERICLITERAL - 256)) | (1 << (Cobol85PreprocessorParser.NUMERICLITERAL - 256)) | (1 << (Cobol85PreprocessorParser.IDENTIFIER - 256)))) !== 0) || ((((_la - 288)) & ~0x1f) == 0 && ((1 << (_la - 288)) & ((1 << (Cobol85PreprocessorParser.FILENAME - 288)) | (1 << (Cobol85PreprocessorParser.NEWLINE - 288)) | (1 << (Cobol85PreprocessorParser.TEXT - 288)))) !== 0)) {
	            this.state = 72;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 60;
	                this.compilerOptions();
	                break;

	            case 2:
	                this.state = 61;
	                this.copyStatement();
	                break;

	            case 3:
	                this.state = 62;
	                this.execCicsStatement();
	                break;

	            case 4:
	                this.state = 63;
	                this.execSqlStatement();
	                break;

	            case 5:
	                this.state = 64;
	                this.execSqlImsStatement();
	                break;

	            case 6:
	                this.state = 65;
	                this.replaceOffStatement();
	                break;

	            case 7:
	                this.state = 66;
	                this.replaceArea();
	                break;

	            case 8:
	                this.state = 67;
	                this.ejectStatement();
	                break;

	            case 9:
	                this.state = 68;
	                this.skipStatement();
	                break;

	            case 10:
	                this.state = 69;
	                this.titleStatement();
	                break;

	            case 11:
	                this.state = 70;
	                this.charDataLine();
	                break;

	            case 12:
	                this.state = 71;
	                this.match(Cobol85PreprocessorParser.NEWLINE);
	                break;

	            }
	            this.state = 76;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 77;
	        this.match(Cobol85PreprocessorParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compilerOptions() {
	    let localctx = new CompilerOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, Cobol85PreprocessorParser.RULE_compilerOptions);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 79;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85PreprocessorParser.CBL || _la===Cobol85PreprocessorParser.PROCESS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 85; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 85;
	        		this._errHandler.sync(this);
	        		switch(this._input.LA(1)) {
	        		case Cobol85PreprocessorParser.ADATA:
	        		case Cobol85PreprocessorParser.ADV:
	        		case Cobol85PreprocessorParser.APOST:
	        		case Cobol85PreprocessorParser.AR:
	        		case Cobol85PreprocessorParser.ARITH:
	        		case Cobol85PreprocessorParser.AWO:
	        		case Cobol85PreprocessorParser.BLOCK0:
	        		case Cobol85PreprocessorParser.BUF:
	        		case Cobol85PreprocessorParser.BUFSIZE:
	        		case Cobol85PreprocessorParser.CBLCARD:
	        		case Cobol85PreprocessorParser.CICS:
	        		case Cobol85PreprocessorParser.COBOL2:
	        		case Cobol85PreprocessorParser.COBOL3:
	        		case Cobol85PreprocessorParser.CODEPAGE:
	        		case Cobol85PreprocessorParser.COMPILE:
	        		case Cobol85PreprocessorParser.CP:
	        		case Cobol85PreprocessorParser.CPP:
	        		case Cobol85PreprocessorParser.CPSM:
	        		case Cobol85PreprocessorParser.CURR:
	        		case Cobol85PreprocessorParser.CURRENCY:
	        		case Cobol85PreprocessorParser.DATA:
	        		case Cobol85PreprocessorParser.DATEPROC:
	        		case Cobol85PreprocessorParser.DBCS:
	        		case Cobol85PreprocessorParser.DEBUG:
	        		case Cobol85PreprocessorParser.DECK:
	        		case Cobol85PreprocessorParser.DIAGTRUNC:
	        		case Cobol85PreprocessorParser.DLL:
	        		case Cobol85PreprocessorParser.DP:
	        		case Cobol85PreprocessorParser.DTR:
	        		case Cobol85PreprocessorParser.DU:
	        		case Cobol85PreprocessorParser.DUMP:
	        		case Cobol85PreprocessorParser.DYN:
	        		case Cobol85PreprocessorParser.DYNAM:
	        		case Cobol85PreprocessorParser.EDF:
	        		case Cobol85PreprocessorParser.EPILOG:
	        		case Cobol85PreprocessorParser.EXIT:
	        		case Cobol85PreprocessorParser.EXP:
	        		case Cobol85PreprocessorParser.EXPORTALL:
	        		case Cobol85PreprocessorParser.FASTSRT:
	        		case Cobol85PreprocessorParser.FEPI:
	        		case Cobol85PreprocessorParser.FLAG:
	        		case Cobol85PreprocessorParser.FLAGSTD:
	        		case Cobol85PreprocessorParser.FSRT:
	        		case Cobol85PreprocessorParser.GDS:
	        		case Cobol85PreprocessorParser.GRAPHIC:
	        		case Cobol85PreprocessorParser.INTDATE:
	        		case Cobol85PreprocessorParser.LANG:
	        		case Cobol85PreprocessorParser.LANGUAGE:
	        		case Cobol85PreprocessorParser.LC:
	        		case Cobol85PreprocessorParser.LEASM:
	        		case Cobol85PreprocessorParser.LENGTH:
	        		case Cobol85PreprocessorParser.LIB:
	        		case Cobol85PreprocessorParser.LIN:
	        		case Cobol85PreprocessorParser.LINECOUNT:
	        		case Cobol85PreprocessorParser.LINKAGE:
	        		case Cobol85PreprocessorParser.LIST:
	        		case Cobol85PreprocessorParser.MAP:
	        		case Cobol85PreprocessorParser.MARGINS:
	        		case Cobol85PreprocessorParser.MD:
	        		case Cobol85PreprocessorParser.MDECK:
	        		case Cobol85PreprocessorParser.NAME:
	        		case Cobol85PreprocessorParser.NATLANG:
	        		case Cobol85PreprocessorParser.NOADATA:
	        		case Cobol85PreprocessorParser.NOADV:
	        		case Cobol85PreprocessorParser.NOAWO:
	        		case Cobol85PreprocessorParser.NOBLOCK0:
	        		case Cobol85PreprocessorParser.NOC:
	        		case Cobol85PreprocessorParser.NOCBLCARD:
	        		case Cobol85PreprocessorParser.NOCICS:
	        		case Cobol85PreprocessorParser.NOCMPR2:
	        		case Cobol85PreprocessorParser.NOCOMPILE:
	        		case Cobol85PreprocessorParser.NOCPSM:
	        		case Cobol85PreprocessorParser.NOCURR:
	        		case Cobol85PreprocessorParser.NOCURRENCY:
	        		case Cobol85PreprocessorParser.NOD:
	        		case Cobol85PreprocessorParser.NODATEPROC:
	        		case Cobol85PreprocessorParser.NODBCS:
	        		case Cobol85PreprocessorParser.NODE:
	        		case Cobol85PreprocessorParser.NODEBUG:
	        		case Cobol85PreprocessorParser.NODECK:
	        		case Cobol85PreprocessorParser.NODIAGTRUNC:
	        		case Cobol85PreprocessorParser.NODLL:
	        		case Cobol85PreprocessorParser.NODU:
	        		case Cobol85PreprocessorParser.NODUMP:
	        		case Cobol85PreprocessorParser.NODP:
	        		case Cobol85PreprocessorParser.NODTR:
	        		case Cobol85PreprocessorParser.NODYN:
	        		case Cobol85PreprocessorParser.NODYNAM:
	        		case Cobol85PreprocessorParser.NOEDF:
	        		case Cobol85PreprocessorParser.NOEPILOG:
	        		case Cobol85PreprocessorParser.NOEXIT:
	        		case Cobol85PreprocessorParser.NOEXP:
	        		case Cobol85PreprocessorParser.NOEXPORTALL:
	        		case Cobol85PreprocessorParser.NOF:
	        		case Cobol85PreprocessorParser.NOFASTSRT:
	        		case Cobol85PreprocessorParser.NOFEPI:
	        		case Cobol85PreprocessorParser.NOFLAG:
	        		case Cobol85PreprocessorParser.NOFLAGMIG:
	        		case Cobol85PreprocessorParser.NOFLAGSTD:
	        		case Cobol85PreprocessorParser.NOFSRT:
	        		case Cobol85PreprocessorParser.NOGRAPHIC:
	        		case Cobol85PreprocessorParser.NOLENGTH:
	        		case Cobol85PreprocessorParser.NOLIB:
	        		case Cobol85PreprocessorParser.NOLINKAGE:
	        		case Cobol85PreprocessorParser.NOLIST:
	        		case Cobol85PreprocessorParser.NOMAP:
	        		case Cobol85PreprocessorParser.NOMD:
	        		case Cobol85PreprocessorParser.NOMDECK:
	        		case Cobol85PreprocessorParser.NONAME:
	        		case Cobol85PreprocessorParser.NONUM:
	        		case Cobol85PreprocessorParser.NONUMBER:
	        		case Cobol85PreprocessorParser.NOOBJ:
	        		case Cobol85PreprocessorParser.NOOBJECT:
	        		case Cobol85PreprocessorParser.NOOFF:
	        		case Cobol85PreprocessorParser.NOOFFSET:
	        		case Cobol85PreprocessorParser.NOOPSEQUENCE:
	        		case Cobol85PreprocessorParser.NOOPT:
	        		case Cobol85PreprocessorParser.NOOPTIMIZE:
	        		case Cobol85PreprocessorParser.NOOPTIONS:
	        		case Cobol85PreprocessorParser.NOP:
	        		case Cobol85PreprocessorParser.NOPROLOG:
	        		case Cobol85PreprocessorParser.NORENT:
	        		case Cobol85PreprocessorParser.NOS:
	        		case Cobol85PreprocessorParser.NOSEQ:
	        		case Cobol85PreprocessorParser.NOSOURCE:
	        		case Cobol85PreprocessorParser.NOSPIE:
	        		case Cobol85PreprocessorParser.NOSQL:
	        		case Cobol85PreprocessorParser.NOSQLC:
	        		case Cobol85PreprocessorParser.NOSQLCCSID:
	        		case Cobol85PreprocessorParser.NOSSR:
	        		case Cobol85PreprocessorParser.NOSSRANGE:
	        		case Cobol85PreprocessorParser.NOSTDTRUNC:
	        		case Cobol85PreprocessorParser.NOSEQUENCE:
	        		case Cobol85PreprocessorParser.NOTERM:
	        		case Cobol85PreprocessorParser.NOTERMINAL:
	        		case Cobol85PreprocessorParser.NOTEST:
	        		case Cobol85PreprocessorParser.NOTHREAD:
	        		case Cobol85PreprocessorParser.NOVBREF:
	        		case Cobol85PreprocessorParser.NOWD:
	        		case Cobol85PreprocessorParser.NOWORD:
	        		case Cobol85PreprocessorParser.NOX:
	        		case Cobol85PreprocessorParser.NOXREF:
	        		case Cobol85PreprocessorParser.NOZWB:
	        		case Cobol85PreprocessorParser.NS:
	        		case Cobol85PreprocessorParser.NSEQ:
	        		case Cobol85PreprocessorParser.NSYMBOL:
	        		case Cobol85PreprocessorParser.NUM:
	        		case Cobol85PreprocessorParser.NUMBER:
	        		case Cobol85PreprocessorParser.NUMPROC:
	        		case Cobol85PreprocessorParser.OBJ:
	        		case Cobol85PreprocessorParser.OBJECT:
	        		case Cobol85PreprocessorParser.OFF:
	        		case Cobol85PreprocessorParser.OFFSET:
	        		case Cobol85PreprocessorParser.OP:
	        		case Cobol85PreprocessorParser.OPMARGINS:
	        		case Cobol85PreprocessorParser.OPSEQUENCE:
	        		case Cobol85PreprocessorParser.OPT:
	        		case Cobol85PreprocessorParser.OPTFILE:
	        		case Cobol85PreprocessorParser.OPTIMIZE:
	        		case Cobol85PreprocessorParser.OPTIONS:
	        		case Cobol85PreprocessorParser.OUT:
	        		case Cobol85PreprocessorParser.OUTDD:
	        		case Cobol85PreprocessorParser.PGMN:
	        		case Cobol85PreprocessorParser.PGMNAME:
	        		case Cobol85PreprocessorParser.PROLOG:
	        		case Cobol85PreprocessorParser.QUOTE:
	        		case Cobol85PreprocessorParser.RENT:
	        		case Cobol85PreprocessorParser.RMODE:
	        		case Cobol85PreprocessorParser.SEQ:
	        		case Cobol85PreprocessorParser.SEQUENCE:
	        		case Cobol85PreprocessorParser.SIZE:
	        		case Cobol85PreprocessorParser.SOURCE:
	        		case Cobol85PreprocessorParser.SP:
	        		case Cobol85PreprocessorParser.SPACE:
	        		case Cobol85PreprocessorParser.SPIE:
	        		case Cobol85PreprocessorParser.SQL:
	        		case Cobol85PreprocessorParser.SQLC:
	        		case Cobol85PreprocessorParser.SQLCCSID:
	        		case Cobol85PreprocessorParser.SSR:
	        		case Cobol85PreprocessorParser.SSRANGE:
	        		case Cobol85PreprocessorParser.SYSEIB:
	        		case Cobol85PreprocessorParser.SZ:
	        		case Cobol85PreprocessorParser.TERM:
	        		case Cobol85PreprocessorParser.TERMINAL:
	        		case Cobol85PreprocessorParser.TEST:
	        		case Cobol85PreprocessorParser.THREAD:
	        		case Cobol85PreprocessorParser.TRUNC:
	        		case Cobol85PreprocessorParser.VBREF:
	        		case Cobol85PreprocessorParser.WD:
	        		case Cobol85PreprocessorParser.WORD:
	        		case Cobol85PreprocessorParser.XMLPARSE:
	        		case Cobol85PreprocessorParser.XP:
	        		case Cobol85PreprocessorParser.XREF:
	        		case Cobol85PreprocessorParser.YEARWINDOW:
	        		case Cobol85PreprocessorParser.YW:
	        		case Cobol85PreprocessorParser.ZWB:
	        		case Cobol85PreprocessorParser.C_CHAR:
	        		case Cobol85PreprocessorParser.D_CHAR:
	        		case Cobol85PreprocessorParser.F_CHAR:
	        		case Cobol85PreprocessorParser.Q_CHAR:
	        		case Cobol85PreprocessorParser.S_CHAR:
	        		case Cobol85PreprocessorParser.X_CHAR:
	        		case Cobol85PreprocessorParser.COMMACHAR:
	        		    this.state = 81;
	        		    this._errHandler.sync(this);
	        		    _la = this._input.LA(1);
	        		    if(_la===Cobol85PreprocessorParser.COMMACHAR) {
	        		        this.state = 80;
	        		        this.match(Cobol85PreprocessorParser.COMMACHAR);
	        		    }

	        		    this.state = 83;
	        		    this.compilerOption();
	        		    break;
	        		case Cobol85PreprocessorParser.XOPTS:
	        		    this.state = 84;
	        		    this.compilerXOpts();
	        		    break;
	        		default:
	        		    throw new antlr4.error.NoViableAltException(this);
	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 87; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,4, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compilerXOpts() {
	    let localctx = new CompilerXOptsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, Cobol85PreprocessorParser.RULE_compilerXOpts);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 89;
	        this.match(Cobol85PreprocessorParser.XOPTS);
	        this.state = 90;
	        this.match(Cobol85PreprocessorParser.LPARENCHAR);
	        this.state = 91;
	        this.compilerOption();
	        this.state = 98;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85PreprocessorParser.ADATA) | (1 << Cobol85PreprocessorParser.ADV) | (1 << Cobol85PreprocessorParser.APOST) | (1 << Cobol85PreprocessorParser.AR) | (1 << Cobol85PreprocessorParser.ARITH) | (1 << Cobol85PreprocessorParser.AWO) | (1 << Cobol85PreprocessorParser.BLOCK0) | (1 << Cobol85PreprocessorParser.BUF) | (1 << Cobol85PreprocessorParser.BUFSIZE) | (1 << Cobol85PreprocessorParser.CBLCARD) | (1 << Cobol85PreprocessorParser.CICS) | (1 << Cobol85PreprocessorParser.COBOL2) | (1 << Cobol85PreprocessorParser.COBOL3) | (1 << Cobol85PreprocessorParser.CODEPAGE) | (1 << Cobol85PreprocessorParser.COMPILE) | (1 << Cobol85PreprocessorParser.CP) | (1 << Cobol85PreprocessorParser.CPP) | (1 << Cobol85PreprocessorParser.CPSM) | (1 << Cobol85PreprocessorParser.CURR) | (1 << Cobol85PreprocessorParser.CURRENCY))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Cobol85PreprocessorParser.DATA - 32)) | (1 << (Cobol85PreprocessorParser.DATEPROC - 32)) | (1 << (Cobol85PreprocessorParser.DBCS - 32)) | (1 << (Cobol85PreprocessorParser.DEBUG - 32)) | (1 << (Cobol85PreprocessorParser.DECK - 32)) | (1 << (Cobol85PreprocessorParser.DIAGTRUNC - 32)) | (1 << (Cobol85PreprocessorParser.DLL - 32)) | (1 << (Cobol85PreprocessorParser.DP - 32)) | (1 << (Cobol85PreprocessorParser.DTR - 32)) | (1 << (Cobol85PreprocessorParser.DU - 32)) | (1 << (Cobol85PreprocessorParser.DUMP - 32)) | (1 << (Cobol85PreprocessorParser.DYN - 32)) | (1 << (Cobol85PreprocessorParser.DYNAM - 32)) | (1 << (Cobol85PreprocessorParser.EDF - 32)) | (1 << (Cobol85PreprocessorParser.EPILOG - 32)) | (1 << (Cobol85PreprocessorParser.EXIT - 32)) | (1 << (Cobol85PreprocessorParser.EXP - 32)) | (1 << (Cobol85PreprocessorParser.EXPORTALL - 32)) | (1 << (Cobol85PreprocessorParser.FASTSRT - 32)) | (1 << (Cobol85PreprocessorParser.FEPI - 32)) | (1 << (Cobol85PreprocessorParser.FLAG - 32)) | (1 << (Cobol85PreprocessorParser.FLAGSTD - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Cobol85PreprocessorParser.FSRT - 64)) | (1 << (Cobol85PreprocessorParser.GDS - 64)) | (1 << (Cobol85PreprocessorParser.GRAPHIC - 64)) | (1 << (Cobol85PreprocessorParser.INTDATE - 64)) | (1 << (Cobol85PreprocessorParser.LANG - 64)) | (1 << (Cobol85PreprocessorParser.LANGUAGE - 64)) | (1 << (Cobol85PreprocessorParser.LC - 64)) | (1 << (Cobol85PreprocessorParser.LEASM - 64)) | (1 << (Cobol85PreprocessorParser.LENGTH - 64)) | (1 << (Cobol85PreprocessorParser.LIB - 64)) | (1 << (Cobol85PreprocessorParser.LIN - 64)) | (1 << (Cobol85PreprocessorParser.LINECOUNT - 64)) | (1 << (Cobol85PreprocessorParser.LINKAGE - 64)) | (1 << (Cobol85PreprocessorParser.LIST - 64)) | (1 << (Cobol85PreprocessorParser.MAP - 64)) | (1 << (Cobol85PreprocessorParser.MARGINS - 64)) | (1 << (Cobol85PreprocessorParser.MD - 64)) | (1 << (Cobol85PreprocessorParser.MDECK - 64)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (Cobol85PreprocessorParser.NAME - 97)) | (1 << (Cobol85PreprocessorParser.NATLANG - 97)) | (1 << (Cobol85PreprocessorParser.NOADATA - 97)) | (1 << (Cobol85PreprocessorParser.NOADV - 97)) | (1 << (Cobol85PreprocessorParser.NOAWO - 97)) | (1 << (Cobol85PreprocessorParser.NOBLOCK0 - 97)) | (1 << (Cobol85PreprocessorParser.NOC - 97)) | (1 << (Cobol85PreprocessorParser.NOCBLCARD - 97)) | (1 << (Cobol85PreprocessorParser.NOCICS - 97)) | (1 << (Cobol85PreprocessorParser.NOCMPR2 - 97)) | (1 << (Cobol85PreprocessorParser.NOCOMPILE - 97)) | (1 << (Cobol85PreprocessorParser.NOCPSM - 97)) | (1 << (Cobol85PreprocessorParser.NOCURR - 97)) | (1 << (Cobol85PreprocessorParser.NOCURRENCY - 97)) | (1 << (Cobol85PreprocessorParser.NOD - 97)) | (1 << (Cobol85PreprocessorParser.NODATEPROC - 97)) | (1 << (Cobol85PreprocessorParser.NODBCS - 97)) | (1 << (Cobol85PreprocessorParser.NODE - 97)) | (1 << (Cobol85PreprocessorParser.NODEBUG - 97)) | (1 << (Cobol85PreprocessorParser.NODECK - 97)) | (1 << (Cobol85PreprocessorParser.NODIAGTRUNC - 97)) | (1 << (Cobol85PreprocessorParser.NODLL - 97)) | (1 << (Cobol85PreprocessorParser.NODU - 97)) | (1 << (Cobol85PreprocessorParser.NODUMP - 97)) | (1 << (Cobol85PreprocessorParser.NODP - 97)) | (1 << (Cobol85PreprocessorParser.NODTR - 97)) | (1 << (Cobol85PreprocessorParser.NODYN - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (Cobol85PreprocessorParser.NODYNAM - 129)) | (1 << (Cobol85PreprocessorParser.NOEDF - 129)) | (1 << (Cobol85PreprocessorParser.NOEPILOG - 129)) | (1 << (Cobol85PreprocessorParser.NOEXIT - 129)) | (1 << (Cobol85PreprocessorParser.NOEXP - 129)) | (1 << (Cobol85PreprocessorParser.NOEXPORTALL - 129)) | (1 << (Cobol85PreprocessorParser.NOF - 129)) | (1 << (Cobol85PreprocessorParser.NOFASTSRT - 129)) | (1 << (Cobol85PreprocessorParser.NOFEPI - 129)) | (1 << (Cobol85PreprocessorParser.NOFLAG - 129)) | (1 << (Cobol85PreprocessorParser.NOFLAGMIG - 129)) | (1 << (Cobol85PreprocessorParser.NOFLAGSTD - 129)) | (1 << (Cobol85PreprocessorParser.NOFSRT - 129)) | (1 << (Cobol85PreprocessorParser.NOGRAPHIC - 129)) | (1 << (Cobol85PreprocessorParser.NOLENGTH - 129)) | (1 << (Cobol85PreprocessorParser.NOLIB - 129)) | (1 << (Cobol85PreprocessorParser.NOLINKAGE - 129)) | (1 << (Cobol85PreprocessorParser.NOLIST - 129)) | (1 << (Cobol85PreprocessorParser.NOMAP - 129)) | (1 << (Cobol85PreprocessorParser.NOMD - 129)) | (1 << (Cobol85PreprocessorParser.NOMDECK - 129)) | (1 << (Cobol85PreprocessorParser.NONAME - 129)) | (1 << (Cobol85PreprocessorParser.NONUM - 129)) | (1 << (Cobol85PreprocessorParser.NONUMBER - 129)) | (1 << (Cobol85PreprocessorParser.NOOBJ - 129)) | (1 << (Cobol85PreprocessorParser.NOOBJECT - 129)) | (1 << (Cobol85PreprocessorParser.NOOFF - 129)) | (1 << (Cobol85PreprocessorParser.NOOFFSET - 129)) | (1 << (Cobol85PreprocessorParser.NOOPSEQUENCE - 129)) | (1 << (Cobol85PreprocessorParser.NOOPT - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (Cobol85PreprocessorParser.NOOPTIMIZE - 161)) | (1 << (Cobol85PreprocessorParser.NOOPTIONS - 161)) | (1 << (Cobol85PreprocessorParser.NOP - 161)) | (1 << (Cobol85PreprocessorParser.NOPROLOG - 161)) | (1 << (Cobol85PreprocessorParser.NORENT - 161)) | (1 << (Cobol85PreprocessorParser.NOS - 161)) | (1 << (Cobol85PreprocessorParser.NOSEQ - 161)) | (1 << (Cobol85PreprocessorParser.NOSOURCE - 161)) | (1 << (Cobol85PreprocessorParser.NOSPIE - 161)) | (1 << (Cobol85PreprocessorParser.NOSQL - 161)) | (1 << (Cobol85PreprocessorParser.NOSQLC - 161)) | (1 << (Cobol85PreprocessorParser.NOSQLCCSID - 161)) | (1 << (Cobol85PreprocessorParser.NOSSR - 161)) | (1 << (Cobol85PreprocessorParser.NOSSRANGE - 161)) | (1 << (Cobol85PreprocessorParser.NOSTDTRUNC - 161)) | (1 << (Cobol85PreprocessorParser.NOSEQUENCE - 161)) | (1 << (Cobol85PreprocessorParser.NOTERM - 161)) | (1 << (Cobol85PreprocessorParser.NOTERMINAL - 161)) | (1 << (Cobol85PreprocessorParser.NOTEST - 161)) | (1 << (Cobol85PreprocessorParser.NOTHREAD - 161)) | (1 << (Cobol85PreprocessorParser.NOVBREF - 161)) | (1 << (Cobol85PreprocessorParser.NOWD - 161)) | (1 << (Cobol85PreprocessorParser.NOWORD - 161)) | (1 << (Cobol85PreprocessorParser.NOX - 161)) | (1 << (Cobol85PreprocessorParser.NOXREF - 161)) | (1 << (Cobol85PreprocessorParser.NOZWB - 161)) | (1 << (Cobol85PreprocessorParser.NS - 161)) | (1 << (Cobol85PreprocessorParser.NSEQ - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (Cobol85PreprocessorParser.NSYMBOL - 193)) | (1 << (Cobol85PreprocessorParser.NUM - 193)) | (1 << (Cobol85PreprocessorParser.NUMBER - 193)) | (1 << (Cobol85PreprocessorParser.NUMPROC - 193)) | (1 << (Cobol85PreprocessorParser.OBJ - 193)) | (1 << (Cobol85PreprocessorParser.OBJECT - 193)) | (1 << (Cobol85PreprocessorParser.OFF - 193)) | (1 << (Cobol85PreprocessorParser.OFFSET - 193)) | (1 << (Cobol85PreprocessorParser.OP - 193)) | (1 << (Cobol85PreprocessorParser.OPMARGINS - 193)) | (1 << (Cobol85PreprocessorParser.OPSEQUENCE - 193)) | (1 << (Cobol85PreprocessorParser.OPT - 193)) | (1 << (Cobol85PreprocessorParser.OPTFILE - 193)) | (1 << (Cobol85PreprocessorParser.OPTIMIZE - 193)) | (1 << (Cobol85PreprocessorParser.OPTIONS - 193)) | (1 << (Cobol85PreprocessorParser.OUT - 193)) | (1 << (Cobol85PreprocessorParser.OUTDD - 193)) | (1 << (Cobol85PreprocessorParser.PGMN - 193)) | (1 << (Cobol85PreprocessorParser.PGMNAME - 193)) | (1 << (Cobol85PreprocessorParser.PROLOG - 193)) | (1 << (Cobol85PreprocessorParser.QUOTE - 193)) | (1 << (Cobol85PreprocessorParser.RENT - 193)) | (1 << (Cobol85PreprocessorParser.RMODE - 193)))) !== 0) || ((((_la - 226)) & ~0x1f) == 0 && ((1 << (_la - 226)) & ((1 << (Cobol85PreprocessorParser.SEQ - 226)) | (1 << (Cobol85PreprocessorParser.SEQUENCE - 226)) | (1 << (Cobol85PreprocessorParser.SIZE - 226)) | (1 << (Cobol85PreprocessorParser.SOURCE - 226)) | (1 << (Cobol85PreprocessorParser.SP - 226)) | (1 << (Cobol85PreprocessorParser.SPACE - 226)) | (1 << (Cobol85PreprocessorParser.SPIE - 226)) | (1 << (Cobol85PreprocessorParser.SQL - 226)) | (1 << (Cobol85PreprocessorParser.SQLC - 226)) | (1 << (Cobol85PreprocessorParser.SQLCCSID - 226)) | (1 << (Cobol85PreprocessorParser.SSR - 226)) | (1 << (Cobol85PreprocessorParser.SSRANGE - 226)) | (1 << (Cobol85PreprocessorParser.SYSEIB - 226)) | (1 << (Cobol85PreprocessorParser.SZ - 226)) | (1 << (Cobol85PreprocessorParser.TERM - 226)) | (1 << (Cobol85PreprocessorParser.TERMINAL - 226)) | (1 << (Cobol85PreprocessorParser.TEST - 226)) | (1 << (Cobol85PreprocessorParser.THREAD - 226)) | (1 << (Cobol85PreprocessorParser.TRUNC - 226)) | (1 << (Cobol85PreprocessorParser.VBREF - 226)))) !== 0) || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (Cobol85PreprocessorParser.WD - 258)) | (1 << (Cobol85PreprocessorParser.WORD - 258)) | (1 << (Cobol85PreprocessorParser.XMLPARSE - 258)) | (1 << (Cobol85PreprocessorParser.XP - 258)) | (1 << (Cobol85PreprocessorParser.XREF - 258)) | (1 << (Cobol85PreprocessorParser.YEARWINDOW - 258)) | (1 << (Cobol85PreprocessorParser.YW - 258)) | (1 << (Cobol85PreprocessorParser.ZWB - 258)) | (1 << (Cobol85PreprocessorParser.C_CHAR - 258)) | (1 << (Cobol85PreprocessorParser.D_CHAR - 258)) | (1 << (Cobol85PreprocessorParser.F_CHAR - 258)) | (1 << (Cobol85PreprocessorParser.Q_CHAR - 258)) | (1 << (Cobol85PreprocessorParser.S_CHAR - 258)) | (1 << (Cobol85PreprocessorParser.X_CHAR - 258)) | (1 << (Cobol85PreprocessorParser.COMMACHAR - 258)))) !== 0)) {
	            this.state = 93;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85PreprocessorParser.COMMACHAR) {
	                this.state = 92;
	                this.match(Cobol85PreprocessorParser.COMMACHAR);
	            }

	            this.state = 95;
	            this.compilerOption();
	            this.state = 100;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 101;
	        this.match(Cobol85PreprocessorParser.RPARENCHAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compilerOption() {
	    let localctx = new CompilerOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, Cobol85PreprocessorParser.RULE_compilerOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 445;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 103;
	            this.match(Cobol85PreprocessorParser.ADATA);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 104;
	            this.match(Cobol85PreprocessorParser.ADV);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 105;
	            this.match(Cobol85PreprocessorParser.APOST);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 106;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.AR || _la===Cobol85PreprocessorParser.ARITH)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 107;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 108;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.COMPAT || _la===Cobol85PreprocessorParser.EXTEND || _la===Cobol85PreprocessorParser.C_CHAR || _la===Cobol85PreprocessorParser.E_CHAR)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 109;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 110;
	            this.match(Cobol85PreprocessorParser.AWO);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 111;
	            this.match(Cobol85PreprocessorParser.BLOCK0);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 112;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.BUF || _la===Cobol85PreprocessorParser.BUFSIZE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 113;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 114;
	            this.literal();
	            this.state = 115;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 117;
	            this.match(Cobol85PreprocessorParser.CBLCARD);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 118;
	            this.match(Cobol85PreprocessorParser.CICS);
	            this.state = 123;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	            if(la_===1) {
	                this.state = 119;
	                this.match(Cobol85PreprocessorParser.LPARENCHAR);
	                this.state = 120;
	                this.literal();
	                this.state = 121;
	                this.match(Cobol85PreprocessorParser.RPARENCHAR);

	            }
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 125;
	            this.match(Cobol85PreprocessorParser.COBOL2);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 126;
	            this.match(Cobol85PreprocessorParser.COBOL3);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 127;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.CODEPAGE || _la===Cobol85PreprocessorParser.CP)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 128;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 129;
	            this.literal();
	            this.state = 130;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 132;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.COMPILE || _la===Cobol85PreprocessorParser.C_CHAR)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 133;
	            this.match(Cobol85PreprocessorParser.CPP);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 134;
	            this.match(Cobol85PreprocessorParser.CPSM);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 135;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.CURR || _la===Cobol85PreprocessorParser.CURRENCY)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 136;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 137;
	            this.literal();
	            this.state = 138;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 140;
	            this.match(Cobol85PreprocessorParser.DATA);
	            this.state = 141;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 142;
	            this.literal();
	            this.state = 143;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 145;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.DATEPROC || _la===Cobol85PreprocessorParser.DP)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 157;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	            if(la_===1) {
	                this.state = 146;
	                this.match(Cobol85PreprocessorParser.LPARENCHAR);
	                this.state = 148;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Cobol85PreprocessorParser.FLAG || _la===Cobol85PreprocessorParser.NOFLAG) {
	                    this.state = 147;
	                    _la = this._input.LA(1);
	                    if(!(_la===Cobol85PreprocessorParser.FLAG || _la===Cobol85PreprocessorParser.NOFLAG)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 151;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Cobol85PreprocessorParser.COMMACHAR) {
	                    this.state = 150;
	                    this.match(Cobol85PreprocessorParser.COMMACHAR);
	                }

	                this.state = 154;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Cobol85PreprocessorParser.NOTRIG || _la===Cobol85PreprocessorParser.TRIG) {
	                    this.state = 153;
	                    _la = this._input.LA(1);
	                    if(!(_la===Cobol85PreprocessorParser.NOTRIG || _la===Cobol85PreprocessorParser.TRIG)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 156;
	                this.match(Cobol85PreprocessorParser.RPARENCHAR);

	            }
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 159;
	            this.match(Cobol85PreprocessorParser.DBCS);
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 160;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.DECK || _la===Cobol85PreprocessorParser.D_CHAR)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 161;
	            this.match(Cobol85PreprocessorParser.DEBUG);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 162;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.DIAGTRUNC || _la===Cobol85PreprocessorParser.DTR)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 163;
	            this.match(Cobol85PreprocessorParser.DLL);
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 164;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.DU || _la===Cobol85PreprocessorParser.DUMP)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 165;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.DYN || _la===Cobol85PreprocessorParser.DYNAM)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 166;
	            this.match(Cobol85PreprocessorParser.EDF);
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 167;
	            this.match(Cobol85PreprocessorParser.EPILOG);
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 168;
	            this.match(Cobol85PreprocessorParser.EXIT);
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 169;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.EXP || _la===Cobol85PreprocessorParser.EXPORTALL)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 170;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.FASTSRT || _la===Cobol85PreprocessorParser.FSRT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 171;
	            this.match(Cobol85PreprocessorParser.FEPI);
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 172;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.FLAG || _la===Cobol85PreprocessorParser.F_CHAR)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 173;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 174;
	            _la = this._input.LA(1);
	            if(!(((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (Cobol85PreprocessorParser.E_CHAR - 270)) | (1 << (Cobol85PreprocessorParser.I_CHAR - 270)) | (1 << (Cobol85PreprocessorParser.S_CHAR - 270)) | (1 << (Cobol85PreprocessorParser.U_CHAR - 270)) | (1 << (Cobol85PreprocessorParser.W_CHAR - 270)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 177;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85PreprocessorParser.COMMACHAR) {
	                this.state = 175;
	                this.match(Cobol85PreprocessorParser.COMMACHAR);
	                this.state = 176;
	                _la = this._input.LA(1);
	                if(!(((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (Cobol85PreprocessorParser.E_CHAR - 270)) | (1 << (Cobol85PreprocessorParser.I_CHAR - 270)) | (1 << (Cobol85PreprocessorParser.S_CHAR - 270)) | (1 << (Cobol85PreprocessorParser.U_CHAR - 270)) | (1 << (Cobol85PreprocessorParser.W_CHAR - 270)))) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 179;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 180;
	            this.match(Cobol85PreprocessorParser.FLAGSTD);
	            this.state = 181;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 182;
	            _la = this._input.LA(1);
	            if(!(((((_la - 272)) & ~0x1f) == 0 && ((1 << (_la - 272)) & ((1 << (Cobol85PreprocessorParser.H_CHAR - 272)) | (1 << (Cobol85PreprocessorParser.I_CHAR - 272)) | (1 << (Cobol85PreprocessorParser.M_CHAR - 272)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 185;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85PreprocessorParser.COMMACHAR) {
	                this.state = 183;
	                this.match(Cobol85PreprocessorParser.COMMACHAR);
	                this.state = 184;
	                _la = this._input.LA(1);
	                if(!(_la===Cobol85PreprocessorParser.DD || _la===Cobol85PreprocessorParser.NN || _la===Cobol85PreprocessorParser.SS || _la===Cobol85PreprocessorParser.D_CHAR || _la===Cobol85PreprocessorParser.N_CHAR || _la===Cobol85PreprocessorParser.S_CHAR)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 187;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 188;
	            this.match(Cobol85PreprocessorParser.GDS);
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 189;
	            this.match(Cobol85PreprocessorParser.GRAPHIC);
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 190;
	            this.match(Cobol85PreprocessorParser.INTDATE);
	            this.state = 191;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 192;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.ANSI || _la===Cobol85PreprocessorParser.LILIAN)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 193;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 194;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.LANG || _la===Cobol85PreprocessorParser.LANGUAGE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 195;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 196;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.CS || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (Cobol85PreprocessorParser.EN - 50)) | (1 << (Cobol85PreprocessorParser.ENGLISH - 50)) | (1 << (Cobol85PreprocessorParser.JA - 50)) | (1 << (Cobol85PreprocessorParser.JP - 50)) | (1 << (Cobol85PreprocessorParser.KA - 50)))) !== 0) || _la===Cobol85PreprocessorParser.UE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 197;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 198;
	            this.match(Cobol85PreprocessorParser.LEASM);
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 199;
	            this.match(Cobol85PreprocessorParser.LENGTH);
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 200;
	            this.match(Cobol85PreprocessorParser.LIB);
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 201;
	            this.match(Cobol85PreprocessorParser.LIN);
	            break;

	        case 42:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 202;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.LC || _la===Cobol85PreprocessorParser.LINECOUNT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 203;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 204;
	            this.literal();
	            this.state = 205;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 43:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 207;
	            this.match(Cobol85PreprocessorParser.LINKAGE);
	            break;

	        case 44:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 208;
	            this.match(Cobol85PreprocessorParser.LIST);
	            break;

	        case 45:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 209;
	            this.match(Cobol85PreprocessorParser.MAP);
	            break;

	        case 46:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 210;
	            this.match(Cobol85PreprocessorParser.MARGINS);
	            this.state = 211;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 212;
	            this.literal();
	            this.state = 213;
	            this.match(Cobol85PreprocessorParser.COMMACHAR);
	            this.state = 214;
	            this.literal();
	            this.state = 217;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85PreprocessorParser.COMMACHAR) {
	                this.state = 215;
	                this.match(Cobol85PreprocessorParser.COMMACHAR);
	                this.state = 216;
	                this.literal();
	            }

	            this.state = 219;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 47:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 221;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.MD || _la===Cobol85PreprocessorParser.MDECK)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 225;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	            if(la_===1) {
	                this.state = 222;
	                this.match(Cobol85PreprocessorParser.LPARENCHAR);
	                this.state = 223;
	                _la = this._input.LA(1);
	                if(!(_la===Cobol85PreprocessorParser.COMPILE || _la===Cobol85PreprocessorParser.NOC || _la===Cobol85PreprocessorParser.NOCOMPILE || _la===Cobol85PreprocessorParser.C_CHAR)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 224;
	                this.match(Cobol85PreprocessorParser.RPARENCHAR);

	            }
	            break;

	        case 48:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 227;
	            this.match(Cobol85PreprocessorParser.NAME);
	            this.state = 231;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	            if(la_===1) {
	                this.state = 228;
	                this.match(Cobol85PreprocessorParser.LPARENCHAR);
	                this.state = 229;
	                _la = this._input.LA(1);
	                if(!(_la===Cobol85PreprocessorParser.ALIAS || _la===Cobol85PreprocessorParser.NOALIAS)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 230;
	                this.match(Cobol85PreprocessorParser.RPARENCHAR);

	            }
	            break;

	        case 49:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 233;
	            this.match(Cobol85PreprocessorParser.NATLANG);
	            this.state = 234;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 235;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.CS || _la===Cobol85PreprocessorParser.EN || _la===Cobol85PreprocessorParser.KA)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 236;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 50:
	            this.enterOuterAlt(localctx, 50);
	            this.state = 237;
	            this.match(Cobol85PreprocessorParser.NOADATA);
	            break;

	        case 51:
	            this.enterOuterAlt(localctx, 51);
	            this.state = 238;
	            this.match(Cobol85PreprocessorParser.NOADV);
	            break;

	        case 52:
	            this.enterOuterAlt(localctx, 52);
	            this.state = 239;
	            this.match(Cobol85PreprocessorParser.NOAWO);
	            break;

	        case 53:
	            this.enterOuterAlt(localctx, 53);
	            this.state = 240;
	            this.match(Cobol85PreprocessorParser.NOBLOCK0);
	            break;

	        case 54:
	            this.enterOuterAlt(localctx, 54);
	            this.state = 241;
	            this.match(Cobol85PreprocessorParser.NOCBLCARD);
	            break;

	        case 55:
	            this.enterOuterAlt(localctx, 55);
	            this.state = 242;
	            this.match(Cobol85PreprocessorParser.NOCICS);
	            break;

	        case 56:
	            this.enterOuterAlt(localctx, 56);
	            this.state = 243;
	            this.match(Cobol85PreprocessorParser.NOCMPR2);
	            break;

	        case 57:
	            this.enterOuterAlt(localctx, 57);
	            this.state = 244;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.NOC || _la===Cobol85PreprocessorParser.NOCOMPILE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 248;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	            if(la_===1) {
	                this.state = 245;
	                this.match(Cobol85PreprocessorParser.LPARENCHAR);
	                this.state = 246;
	                _la = this._input.LA(1);
	                if(!(((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (Cobol85PreprocessorParser.E_CHAR - 270)) | (1 << (Cobol85PreprocessorParser.S_CHAR - 270)) | (1 << (Cobol85PreprocessorParser.W_CHAR - 270)))) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 247;
	                this.match(Cobol85PreprocessorParser.RPARENCHAR);

	            }
	            break;

	        case 58:
	            this.enterOuterAlt(localctx, 58);
	            this.state = 250;
	            this.match(Cobol85PreprocessorParser.NOCPSM);
	            break;

	        case 59:
	            this.enterOuterAlt(localctx, 59);
	            this.state = 251;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.NOCURR || _la===Cobol85PreprocessorParser.NOCURRENCY)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 60:
	            this.enterOuterAlt(localctx, 60);
	            this.state = 252;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.NODATEPROC || _la===Cobol85PreprocessorParser.NODP)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 61:
	            this.enterOuterAlt(localctx, 61);
	            this.state = 253;
	            this.match(Cobol85PreprocessorParser.NODBCS);
	            break;

	        case 62:
	            this.enterOuterAlt(localctx, 62);
	            this.state = 254;
	            this.match(Cobol85PreprocessorParser.NODEBUG);
	            break;

	        case 63:
	            this.enterOuterAlt(localctx, 63);
	            this.state = 255;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.NOD || _la===Cobol85PreprocessorParser.NODECK)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 64:
	            this.enterOuterAlt(localctx, 64);
	            this.state = 256;
	            this.match(Cobol85PreprocessorParser.NODLL);
	            break;

	        case 65:
	            this.enterOuterAlt(localctx, 65);
	            this.state = 257;
	            this.match(Cobol85PreprocessorParser.NODE);
	            break;

	        case 66:
	            this.enterOuterAlt(localctx, 66);
	            this.state = 258;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.NODU || _la===Cobol85PreprocessorParser.NODUMP)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 67:
	            this.enterOuterAlt(localctx, 67);
	            this.state = 259;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.NODIAGTRUNC || _la===Cobol85PreprocessorParser.NODTR)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 68:
	            this.enterOuterAlt(localctx, 68);
	            this.state = 260;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.NODYN || _la===Cobol85PreprocessorParser.NODYNAM)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 69:
	            this.enterOuterAlt(localctx, 69);
	            this.state = 261;
	            this.match(Cobol85PreprocessorParser.NOEDF);
	            break;

	        case 70:
	            this.enterOuterAlt(localctx, 70);
	            this.state = 262;
	            this.match(Cobol85PreprocessorParser.NOEPILOG);
	            break;

	        case 71:
	            this.enterOuterAlt(localctx, 71);
	            this.state = 263;
	            this.match(Cobol85PreprocessorParser.NOEXIT);
	            break;

	        case 72:
	            this.enterOuterAlt(localctx, 72);
	            this.state = 264;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.NOEXP || _la===Cobol85PreprocessorParser.NOEXPORTALL)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 73:
	            this.enterOuterAlt(localctx, 73);
	            this.state = 265;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.NOFASTSRT || _la===Cobol85PreprocessorParser.NOFSRT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 74:
	            this.enterOuterAlt(localctx, 74);
	            this.state = 266;
	            this.match(Cobol85PreprocessorParser.NOFEPI);
	            break;

	        case 75:
	            this.enterOuterAlt(localctx, 75);
	            this.state = 267;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.NOF || _la===Cobol85PreprocessorParser.NOFLAG)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 76:
	            this.enterOuterAlt(localctx, 76);
	            this.state = 268;
	            this.match(Cobol85PreprocessorParser.NOFLAGMIG);
	            break;

	        case 77:
	            this.enterOuterAlt(localctx, 77);
	            this.state = 269;
	            this.match(Cobol85PreprocessorParser.NOFLAGSTD);
	            break;

	        case 78:
	            this.enterOuterAlt(localctx, 78);
	            this.state = 270;
	            this.match(Cobol85PreprocessorParser.NOGRAPHIC);
	            break;

	        case 79:
	            this.enterOuterAlt(localctx, 79);
	            this.state = 271;
	            this.match(Cobol85PreprocessorParser.NOLENGTH);
	            break;

	        case 80:
	            this.enterOuterAlt(localctx, 80);
	            this.state = 272;
	            this.match(Cobol85PreprocessorParser.NOLIB);
	            break;

	        case 81:
	            this.enterOuterAlt(localctx, 81);
	            this.state = 273;
	            this.match(Cobol85PreprocessorParser.NOLINKAGE);
	            break;

	        case 82:
	            this.enterOuterAlt(localctx, 82);
	            this.state = 274;
	            this.match(Cobol85PreprocessorParser.NOLIST);
	            break;

	        case 83:
	            this.enterOuterAlt(localctx, 83);
	            this.state = 275;
	            this.match(Cobol85PreprocessorParser.NOMAP);
	            break;

	        case 84:
	            this.enterOuterAlt(localctx, 84);
	            this.state = 276;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.NOMD || _la===Cobol85PreprocessorParser.NOMDECK)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 85:
	            this.enterOuterAlt(localctx, 85);
	            this.state = 277;
	            this.match(Cobol85PreprocessorParser.NONAME);
	            break;

	        case 86:
	            this.enterOuterAlt(localctx, 86);
	            this.state = 278;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.NONUM || _la===Cobol85PreprocessorParser.NONUMBER)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 87:
	            this.enterOuterAlt(localctx, 87);
	            this.state = 279;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.NOOBJ || _la===Cobol85PreprocessorParser.NOOBJECT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 88:
	            this.enterOuterAlt(localctx, 88);
	            this.state = 280;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.NOOFF || _la===Cobol85PreprocessorParser.NOOFFSET)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 89:
	            this.enterOuterAlt(localctx, 89);
	            this.state = 281;
	            this.match(Cobol85PreprocessorParser.NOOPSEQUENCE);
	            break;

	        case 90:
	            this.enterOuterAlt(localctx, 90);
	            this.state = 282;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.NOOPT || _la===Cobol85PreprocessorParser.NOOPTIMIZE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 91:
	            this.enterOuterAlt(localctx, 91);
	            this.state = 283;
	            this.match(Cobol85PreprocessorParser.NOOPTIONS);
	            break;

	        case 92:
	            this.enterOuterAlt(localctx, 92);
	            this.state = 284;
	            this.match(Cobol85PreprocessorParser.NOP);
	            break;

	        case 93:
	            this.enterOuterAlt(localctx, 93);
	            this.state = 285;
	            this.match(Cobol85PreprocessorParser.NOPROLOG);
	            break;

	        case 94:
	            this.enterOuterAlt(localctx, 94);
	            this.state = 286;
	            this.match(Cobol85PreprocessorParser.NORENT);
	            break;

	        case 95:
	            this.enterOuterAlt(localctx, 95);
	            this.state = 287;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.NOSEQ || _la===Cobol85PreprocessorParser.NOSEQUENCE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 96:
	            this.enterOuterAlt(localctx, 96);
	            this.state = 288;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.NOS || _la===Cobol85PreprocessorParser.NOSOURCE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 97:
	            this.enterOuterAlt(localctx, 97);
	            this.state = 289;
	            this.match(Cobol85PreprocessorParser.NOSPIE);
	            break;

	        case 98:
	            this.enterOuterAlt(localctx, 98);
	            this.state = 290;
	            this.match(Cobol85PreprocessorParser.NOSQL);
	            break;

	        case 99:
	            this.enterOuterAlt(localctx, 99);
	            this.state = 291;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.NOSQLC || _la===Cobol85PreprocessorParser.NOSQLCCSID)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 100:
	            this.enterOuterAlt(localctx, 100);
	            this.state = 292;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.NOSSR || _la===Cobol85PreprocessorParser.NOSSRANGE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 101:
	            this.enterOuterAlt(localctx, 101);
	            this.state = 293;
	            this.match(Cobol85PreprocessorParser.NOSTDTRUNC);
	            break;

	        case 102:
	            this.enterOuterAlt(localctx, 102);
	            this.state = 294;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.NOTERM || _la===Cobol85PreprocessorParser.NOTERMINAL)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 103:
	            this.enterOuterAlt(localctx, 103);
	            this.state = 295;
	            this.match(Cobol85PreprocessorParser.NOTEST);
	            break;

	        case 104:
	            this.enterOuterAlt(localctx, 104);
	            this.state = 296;
	            this.match(Cobol85PreprocessorParser.NOTHREAD);
	            break;

	        case 105:
	            this.enterOuterAlt(localctx, 105);
	            this.state = 297;
	            this.match(Cobol85PreprocessorParser.NOVBREF);
	            break;

	        case 106:
	            this.enterOuterAlt(localctx, 106);
	            this.state = 298;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.NOWD || _la===Cobol85PreprocessorParser.NOWORD)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 107:
	            this.enterOuterAlt(localctx, 107);
	            this.state = 299;
	            this.match(Cobol85PreprocessorParser.NSEQ);
	            break;

	        case 108:
	            this.enterOuterAlt(localctx, 108);
	            this.state = 300;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.NS || _la===Cobol85PreprocessorParser.NSYMBOL)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 301;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 302;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.DBCS || _la===Cobol85PreprocessorParser.NAT || _la===Cobol85PreprocessorParser.NATIONAL)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 303;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 109:
	            this.enterOuterAlt(localctx, 109);
	            this.state = 304;
	            this.match(Cobol85PreprocessorParser.NOVBREF);
	            break;

	        case 110:
	            this.enterOuterAlt(localctx, 110);
	            this.state = 305;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.NOX || _la===Cobol85PreprocessorParser.NOXREF)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 111:
	            this.enterOuterAlt(localctx, 111);
	            this.state = 306;
	            this.match(Cobol85PreprocessorParser.NOZWB);
	            break;

	        case 112:
	            this.enterOuterAlt(localctx, 112);
	            this.state = 307;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.NUM || _la===Cobol85PreprocessorParser.NUMBER)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 113:
	            this.enterOuterAlt(localctx, 113);
	            this.state = 308;
	            this.match(Cobol85PreprocessorParser.NUMPROC);
	            this.state = 309;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 310;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.MIG || _la===Cobol85PreprocessorParser.NOPFD || _la===Cobol85PreprocessorParser.PFD)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 311;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 114:
	            this.enterOuterAlt(localctx, 114);
	            this.state = 312;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.OBJ || _la===Cobol85PreprocessorParser.OBJECT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 115:
	            this.enterOuterAlt(localctx, 115);
	            this.state = 313;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.OFF || _la===Cobol85PreprocessorParser.OFFSET)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 116:
	            this.enterOuterAlt(localctx, 116);
	            this.state = 314;
	            this.match(Cobol85PreprocessorParser.OPMARGINS);
	            this.state = 315;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 316;
	            this.literal();
	            this.state = 317;
	            this.match(Cobol85PreprocessorParser.COMMACHAR);
	            this.state = 318;
	            this.literal();
	            this.state = 321;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Cobol85PreprocessorParser.COMMACHAR) {
	                this.state = 319;
	                this.match(Cobol85PreprocessorParser.COMMACHAR);
	                this.state = 320;
	                this.literal();
	            }

	            this.state = 323;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 117:
	            this.enterOuterAlt(localctx, 117);
	            this.state = 325;
	            this.match(Cobol85PreprocessorParser.OPSEQUENCE);
	            this.state = 326;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 327;
	            this.literal();
	            this.state = 328;
	            this.match(Cobol85PreprocessorParser.COMMACHAR);
	            this.state = 329;
	            this.literal();
	            this.state = 330;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 118:
	            this.enterOuterAlt(localctx, 118);
	            this.state = 332;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.OPT || _la===Cobol85PreprocessorParser.OPTIMIZE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 336;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	            if(la_===1) {
	                this.state = 333;
	                this.match(Cobol85PreprocessorParser.LPARENCHAR);
	                this.state = 334;
	                _la = this._input.LA(1);
	                if(!(_la===Cobol85PreprocessorParser.FULL || _la===Cobol85PreprocessorParser.STD)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 335;
	                this.match(Cobol85PreprocessorParser.RPARENCHAR);

	            }
	            break;

	        case 119:
	            this.enterOuterAlt(localctx, 119);
	            this.state = 338;
	            this.match(Cobol85PreprocessorParser.OPTFILE);
	            break;

	        case 120:
	            this.enterOuterAlt(localctx, 120);
	            this.state = 339;
	            this.match(Cobol85PreprocessorParser.OPTIONS);
	            break;

	        case 121:
	            this.enterOuterAlt(localctx, 121);
	            this.state = 340;
	            this.match(Cobol85PreprocessorParser.OP);
	            break;

	        case 122:
	            this.enterOuterAlt(localctx, 122);
	            this.state = 341;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.OUT || _la===Cobol85PreprocessorParser.OUTDD)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 342;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 343;
	            this.cobolWord();
	            this.state = 344;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 123:
	            this.enterOuterAlt(localctx, 123);
	            this.state = 346;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.PGMN || _la===Cobol85PreprocessorParser.PGMNAME)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 347;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 348;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.CO || _la===Cobol85PreprocessorParser.COMPAT || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (Cobol85PreprocessorParser.LM - 85)) | (1 << (Cobol85PreprocessorParser.LONGMIXED - 85)) | (1 << (Cobol85PreprocessorParser.LONGUPPER - 85)) | (1 << (Cobol85PreprocessorParser.LU - 85)) | (1 << (Cobol85PreprocessorParser.MIXED - 85)))) !== 0) || ((((_la - 256)) & ~0x1f) == 0 && ((1 << (_la - 256)) & ((1 << (Cobol85PreprocessorParser.UPPER - 256)) | (1 << (Cobol85PreprocessorParser.M_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.U_CHAR - 256)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 349;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 124:
	            this.enterOuterAlt(localctx, 124);
	            this.state = 350;
	            this.match(Cobol85PreprocessorParser.PROLOG);
	            break;

	        case 125:
	            this.enterOuterAlt(localctx, 125);
	            this.state = 351;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.QUOTE || _la===Cobol85PreprocessorParser.Q_CHAR)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 126:
	            this.enterOuterAlt(localctx, 126);
	            this.state = 352;
	            this.match(Cobol85PreprocessorParser.RENT);
	            break;

	        case 127:
	            this.enterOuterAlt(localctx, 127);
	            this.state = 353;
	            this.match(Cobol85PreprocessorParser.RMODE);
	            this.state = 354;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 358;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case Cobol85PreprocessorParser.ANY:
	                this.state = 355;
	                this.match(Cobol85PreprocessorParser.ANY);
	                break;
	            case Cobol85PreprocessorParser.AUTO:
	                this.state = 356;
	                this.match(Cobol85PreprocessorParser.AUTO);
	                break;
	            case Cobol85PreprocessorParser.NONNUMERICLITERAL:
	            case Cobol85PreprocessorParser.NUMERICLITERAL:
	                this.state = 357;
	                this.literal();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 360;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 128:
	            this.enterOuterAlt(localctx, 128);
	            this.state = 361;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.SEQ || _la===Cobol85PreprocessorParser.SEQUENCE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 368;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	            if(la_===1) {
	                this.state = 362;
	                this.match(Cobol85PreprocessorParser.LPARENCHAR);
	                this.state = 363;
	                this.literal();
	                this.state = 364;
	                this.match(Cobol85PreprocessorParser.COMMACHAR);
	                this.state = 365;
	                this.literal();
	                this.state = 366;
	                this.match(Cobol85PreprocessorParser.RPARENCHAR);

	            }
	            break;

	        case 129:
	            this.enterOuterAlt(localctx, 129);
	            this.state = 370;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.SIZE || _la===Cobol85PreprocessorParser.SZ)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 371;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 374;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case Cobol85PreprocessorParser.MAX:
	                this.state = 372;
	                this.match(Cobol85PreprocessorParser.MAX);
	                break;
	            case Cobol85PreprocessorParser.NONNUMERICLITERAL:
	            case Cobol85PreprocessorParser.NUMERICLITERAL:
	                this.state = 373;
	                this.literal();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 376;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 130:
	            this.enterOuterAlt(localctx, 130);
	            this.state = 377;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.SOURCE || _la===Cobol85PreprocessorParser.S_CHAR)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 131:
	            this.enterOuterAlt(localctx, 131);
	            this.state = 378;
	            this.match(Cobol85PreprocessorParser.SP);
	            break;

	        case 132:
	            this.enterOuterAlt(localctx, 132);
	            this.state = 379;
	            this.match(Cobol85PreprocessorParser.SPACE);
	            this.state = 380;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 381;
	            this.literal();
	            this.state = 382;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 133:
	            this.enterOuterAlt(localctx, 133);
	            this.state = 384;
	            this.match(Cobol85PreprocessorParser.SPIE);
	            break;

	        case 134:
	            this.enterOuterAlt(localctx, 134);
	            this.state = 385;
	            this.match(Cobol85PreprocessorParser.SQL);
	            this.state = 390;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	            if(la_===1) {
	                this.state = 386;
	                this.match(Cobol85PreprocessorParser.LPARENCHAR);
	                this.state = 387;
	                this.literal();
	                this.state = 388;
	                this.match(Cobol85PreprocessorParser.RPARENCHAR);

	            }
	            break;

	        case 135:
	            this.enterOuterAlt(localctx, 135);
	            this.state = 392;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.SQLC || _la===Cobol85PreprocessorParser.SQLCCSID)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 136:
	            this.enterOuterAlt(localctx, 136);
	            this.state = 393;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.SSR || _la===Cobol85PreprocessorParser.SSRANGE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 137:
	            this.enterOuterAlt(localctx, 137);
	            this.state = 394;
	            this.match(Cobol85PreprocessorParser.SYSEIB);
	            break;

	        case 138:
	            this.enterOuterAlt(localctx, 138);
	            this.state = 395;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.TERM || _la===Cobol85PreprocessorParser.TERMINAL)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 139:
	            this.enterOuterAlt(localctx, 139);
	            this.state = 396;
	            this.match(Cobol85PreprocessorParser.TEST);
	            this.state = 414;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	            if(la_===1) {
	                this.state = 397;
	                this.match(Cobol85PreprocessorParser.LPARENCHAR);
	                this.state = 399;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Cobol85PreprocessorParser.HOOK || _la===Cobol85PreprocessorParser.NOHOOK) {
	                    this.state = 398;
	                    _la = this._input.LA(1);
	                    if(!(_la===Cobol85PreprocessorParser.HOOK || _la===Cobol85PreprocessorParser.NOHOOK)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 402;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	                if(la_===1) {
	                    this.state = 401;
	                    this.match(Cobol85PreprocessorParser.COMMACHAR);

	                }
	                this.state = 405;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Cobol85PreprocessorParser.NOSEP || _la===Cobol85PreprocessorParser.NOSEPARATE || _la===Cobol85PreprocessorParser.SEP || _la===Cobol85PreprocessorParser.SEPARATE) {
	                    this.state = 404;
	                    _la = this._input.LA(1);
	                    if(!(_la===Cobol85PreprocessorParser.NOSEP || _la===Cobol85PreprocessorParser.NOSEPARATE || _la===Cobol85PreprocessorParser.SEP || _la===Cobol85PreprocessorParser.SEPARATE)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 408;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Cobol85PreprocessorParser.COMMACHAR) {
	                    this.state = 407;
	                    this.match(Cobol85PreprocessorParser.COMMACHAR);
	                }

	                this.state = 411;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Cobol85PreprocessorParser.EJPD || _la===Cobol85PreprocessorParser.NOEJPD) {
	                    this.state = 410;
	                    _la = this._input.LA(1);
	                    if(!(_la===Cobol85PreprocessorParser.EJPD || _la===Cobol85PreprocessorParser.NOEJPD)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 413;
	                this.match(Cobol85PreprocessorParser.RPARENCHAR);

	            }
	            break;

	        case 140:
	            this.enterOuterAlt(localctx, 140);
	            this.state = 416;
	            this.match(Cobol85PreprocessorParser.THREAD);
	            break;

	        case 141:
	            this.enterOuterAlt(localctx, 141);
	            this.state = 417;
	            this.match(Cobol85PreprocessorParser.TRUNC);
	            this.state = 418;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 419;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.BIN || _la===Cobol85PreprocessorParser.OPT || _la===Cobol85PreprocessorParser.STD)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 420;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 142:
	            this.enterOuterAlt(localctx, 142);
	            this.state = 421;
	            this.match(Cobol85PreprocessorParser.VBREF);
	            break;

	        case 143:
	            this.enterOuterAlt(localctx, 143);
	            this.state = 422;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.WD || _la===Cobol85PreprocessorParser.WORD)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 423;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 424;
	            this.cobolWord();
	            this.state = 425;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 144:
	            this.enterOuterAlt(localctx, 144);
	            this.state = 427;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.XMLPARSE || _la===Cobol85PreprocessorParser.XP)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 428;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 429;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.COMPAT || ((((_la - 261)) & ~0x1f) == 0 && ((1 << (_la - 261)) & ((1 << (Cobol85PreprocessorParser.XMLSS - 261)) | (1 << (Cobol85PreprocessorParser.C_CHAR - 261)) | (1 << (Cobol85PreprocessorParser.X_CHAR - 261)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 430;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 145:
	            this.enterOuterAlt(localctx, 145);
	            this.state = 431;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.XREF || _la===Cobol85PreprocessorParser.X_CHAR)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 437;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	            if(la_===1) {
	                this.state = 432;
	                this.match(Cobol85PreprocessorParser.LPARENCHAR);
	                this.state = 434;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Cobol85PreprocessorParser.FULL || _la===Cobol85PreprocessorParser.SHORT) {
	                    this.state = 433;
	                    _la = this._input.LA(1);
	                    if(!(_la===Cobol85PreprocessorParser.FULL || _la===Cobol85PreprocessorParser.SHORT)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 436;
	                this.match(Cobol85PreprocessorParser.RPARENCHAR);

	            }
	            break;

	        case 146:
	            this.enterOuterAlt(localctx, 146);
	            this.state = 439;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.YEARWINDOW || _la===Cobol85PreprocessorParser.YW)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 440;
	            this.match(Cobol85PreprocessorParser.LPARENCHAR);
	            this.state = 441;
	            this.literal();
	            this.state = 442;
	            this.match(Cobol85PreprocessorParser.RPARENCHAR);
	            break;

	        case 147:
	            this.enterOuterAlt(localctx, 147);
	            this.state = 444;
	            this.match(Cobol85PreprocessorParser.ZWB);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	execCicsStatement() {
	    let localctx = new ExecCicsStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, Cobol85PreprocessorParser.RULE_execCicsStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 447;
	        this.match(Cobol85PreprocessorParser.EXEC);
	        this.state = 448;
	        this.match(Cobol85PreprocessorParser.CICS);
	        this.state = 449;
	        this.charData();
	        this.state = 450;
	        this.match(Cobol85PreprocessorParser.END_EXEC);
	        this.state = 452;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        if(la_===1) {
	            this.state = 451;
	            this.match(Cobol85PreprocessorParser.DOT);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	execSqlStatement() {
	    let localctx = new ExecSqlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, Cobol85PreprocessorParser.RULE_execSqlStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 454;
	        this.match(Cobol85PreprocessorParser.EXEC);
	        this.state = 455;
	        this.match(Cobol85PreprocessorParser.SQL);
	        this.state = 456;
	        this.charDataSql();
	        this.state = 457;
	        this.match(Cobol85PreprocessorParser.END_EXEC);
	        this.state = 459;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	        if(la_===1) {
	            this.state = 458;
	            this.match(Cobol85PreprocessorParser.DOT);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	execSqlImsStatement() {
	    let localctx = new ExecSqlImsStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, Cobol85PreprocessorParser.RULE_execSqlImsStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 461;
	        this.match(Cobol85PreprocessorParser.EXEC);
	        this.state = 462;
	        this.match(Cobol85PreprocessorParser.SQLIMS);
	        this.state = 463;
	        this.charData();
	        this.state = 464;
	        this.match(Cobol85PreprocessorParser.END_EXEC);
	        this.state = 466;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        if(la_===1) {
	            this.state = 465;
	            this.match(Cobol85PreprocessorParser.DOT);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copyStatement() {
	    let localctx = new CopyStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, Cobol85PreprocessorParser.RULE_copyStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 468;
	        this.match(Cobol85PreprocessorParser.COPY);
	        this.state = 469;
	        this.copySource();
	        this.state = 484;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,38,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 473;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===Cobol85PreprocessorParser.NEWLINE) {
	                    this.state = 470;
	                    this.match(Cobol85PreprocessorParser.NEWLINE);
	                    this.state = 475;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 480;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case Cobol85PreprocessorParser.IN:
	                case Cobol85PreprocessorParser.OF:
	                    this.state = 476;
	                    this.directoryPhrase();
	                    break;
	                case Cobol85PreprocessorParser.ON:
	                    this.state = 477;
	                    this.familyPhrase();
	                    break;
	                case Cobol85PreprocessorParser.REPLACING:
	                    this.state = 478;
	                    this.replacingPhrase();
	                    break;
	                case Cobol85PreprocessorParser.SUPPRESS:
	                    this.state = 479;
	                    this.match(Cobol85PreprocessorParser.SUPPRESS);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 486;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,38,this._ctx);
	        }

	        this.state = 490;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85PreprocessorParser.NEWLINE) {
	            this.state = 487;
	            this.match(Cobol85PreprocessorParser.NEWLINE);
	            this.state = 492;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 493;
	        this.match(Cobol85PreprocessorParser.DOT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copySource() {
	    let localctx = new CopySourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, Cobol85PreprocessorParser.RULE_copySource);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 498;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85PreprocessorParser.NONNUMERICLITERAL:
	        case Cobol85PreprocessorParser.NUMERICLITERAL:
	            this.state = 495;
	            this.literal();
	            break;
	        case Cobol85PreprocessorParser.ADATA:
	        case Cobol85PreprocessorParser.ADV:
	        case Cobol85PreprocessorParser.ALIAS:
	        case Cobol85PreprocessorParser.ANSI:
	        case Cobol85PreprocessorParser.ANY:
	        case Cobol85PreprocessorParser.APOST:
	        case Cobol85PreprocessorParser.AR:
	        case Cobol85PreprocessorParser.ARITH:
	        case Cobol85PreprocessorParser.AUTO:
	        case Cobol85PreprocessorParser.AWO:
	        case Cobol85PreprocessorParser.BIN:
	        case Cobol85PreprocessorParser.BLOCK0:
	        case Cobol85PreprocessorParser.BUF:
	        case Cobol85PreprocessorParser.BUFSIZE:
	        case Cobol85PreprocessorParser.BY:
	        case Cobol85PreprocessorParser.CBL:
	        case Cobol85PreprocessorParser.CBLCARD:
	        case Cobol85PreprocessorParser.CO:
	        case Cobol85PreprocessorParser.COBOL2:
	        case Cobol85PreprocessorParser.COBOL3:
	        case Cobol85PreprocessorParser.CODEPAGE:
	        case Cobol85PreprocessorParser.COMPAT:
	        case Cobol85PreprocessorParser.COMPILE:
	        case Cobol85PreprocessorParser.CP:
	        case Cobol85PreprocessorParser.CPP:
	        case Cobol85PreprocessorParser.CPSM:
	        case Cobol85PreprocessorParser.CS:
	        case Cobol85PreprocessorParser.CURR:
	        case Cobol85PreprocessorParser.CURRENCY:
	        case Cobol85PreprocessorParser.DATA:
	        case Cobol85PreprocessorParser.DATEPROC:
	        case Cobol85PreprocessorParser.DBCS:
	        case Cobol85PreprocessorParser.DD:
	        case Cobol85PreprocessorParser.DEBUG:
	        case Cobol85PreprocessorParser.DECK:
	        case Cobol85PreprocessorParser.DIAGTRUNC:
	        case Cobol85PreprocessorParser.DLI:
	        case Cobol85PreprocessorParser.DLL:
	        case Cobol85PreprocessorParser.DP:
	        case Cobol85PreprocessorParser.DTR:
	        case Cobol85PreprocessorParser.DU:
	        case Cobol85PreprocessorParser.DUMP:
	        case Cobol85PreprocessorParser.DYN:
	        case Cobol85PreprocessorParser.DYNAM:
	        case Cobol85PreprocessorParser.EDF:
	        case Cobol85PreprocessorParser.EJECT:
	        case Cobol85PreprocessorParser.EJPD:
	        case Cobol85PreprocessorParser.EN:
	        case Cobol85PreprocessorParser.ENGLISH:
	        case Cobol85PreprocessorParser.EPILOG:
	        case Cobol85PreprocessorParser.EXCI:
	        case Cobol85PreprocessorParser.EXIT:
	        case Cobol85PreprocessorParser.EXP:
	        case Cobol85PreprocessorParser.EXPORTALL:
	        case Cobol85PreprocessorParser.EXTEND:
	        case Cobol85PreprocessorParser.FASTSRT:
	        case Cobol85PreprocessorParser.FLAG:
	        case Cobol85PreprocessorParser.FLAGSTD:
	        case Cobol85PreprocessorParser.FSRT:
	        case Cobol85PreprocessorParser.FULL:
	        case Cobol85PreprocessorParser.GDS:
	        case Cobol85PreprocessorParser.GRAPHIC:
	        case Cobol85PreprocessorParser.HOOK:
	        case Cobol85PreprocessorParser.IN:
	        case Cobol85PreprocessorParser.INTDATE:
	        case Cobol85PreprocessorParser.JA:
	        case Cobol85PreprocessorParser.JP:
	        case Cobol85PreprocessorParser.KA:
	        case Cobol85PreprocessorParser.LANG:
	        case Cobol85PreprocessorParser.LANGUAGE:
	        case Cobol85PreprocessorParser.LC:
	        case Cobol85PreprocessorParser.LENGTH:
	        case Cobol85PreprocessorParser.LIB:
	        case Cobol85PreprocessorParser.LILIAN:
	        case Cobol85PreprocessorParser.LIN:
	        case Cobol85PreprocessorParser.LINECOUNT:
	        case Cobol85PreprocessorParser.LINKAGE:
	        case Cobol85PreprocessorParser.LIST:
	        case Cobol85PreprocessorParser.LM:
	        case Cobol85PreprocessorParser.LONGMIXED:
	        case Cobol85PreprocessorParser.LONGUPPER:
	        case Cobol85PreprocessorParser.LU:
	        case Cobol85PreprocessorParser.MAP:
	        case Cobol85PreprocessorParser.MARGINS:
	        case Cobol85PreprocessorParser.MAX:
	        case Cobol85PreprocessorParser.MD:
	        case Cobol85PreprocessorParser.MDECK:
	        case Cobol85PreprocessorParser.MIG:
	        case Cobol85PreprocessorParser.MIXED:
	        case Cobol85PreprocessorParser.NAME:
	        case Cobol85PreprocessorParser.NAT:
	        case Cobol85PreprocessorParser.NATIONAL:
	        case Cobol85PreprocessorParser.NATLANG:
	        case Cobol85PreprocessorParser.NN:
	        case Cobol85PreprocessorParser.NO:
	        case Cobol85PreprocessorParser.NOADATA:
	        case Cobol85PreprocessorParser.NOADV:
	        case Cobol85PreprocessorParser.NOALIAS:
	        case Cobol85PreprocessorParser.NOAWO:
	        case Cobol85PreprocessorParser.NOBLOCK0:
	        case Cobol85PreprocessorParser.NOC:
	        case Cobol85PreprocessorParser.NOCBLCARD:
	        case Cobol85PreprocessorParser.NOCICS:
	        case Cobol85PreprocessorParser.NOCMPR2:
	        case Cobol85PreprocessorParser.NOCOMPILE:
	        case Cobol85PreprocessorParser.NOCPSM:
	        case Cobol85PreprocessorParser.NOCURR:
	        case Cobol85PreprocessorParser.NOCURRENCY:
	        case Cobol85PreprocessorParser.NOD:
	        case Cobol85PreprocessorParser.NODATEPROC:
	        case Cobol85PreprocessorParser.NODBCS:
	        case Cobol85PreprocessorParser.NODE:
	        case Cobol85PreprocessorParser.NODEBUG:
	        case Cobol85PreprocessorParser.NODECK:
	        case Cobol85PreprocessorParser.NODIAGTRUNC:
	        case Cobol85PreprocessorParser.NODLL:
	        case Cobol85PreprocessorParser.NODU:
	        case Cobol85PreprocessorParser.NODUMP:
	        case Cobol85PreprocessorParser.NODP:
	        case Cobol85PreprocessorParser.NODTR:
	        case Cobol85PreprocessorParser.NODYN:
	        case Cobol85PreprocessorParser.NODYNAM:
	        case Cobol85PreprocessorParser.NOEDF:
	        case Cobol85PreprocessorParser.NOEJPD:
	        case Cobol85PreprocessorParser.NOEPILOG:
	        case Cobol85PreprocessorParser.NOEXIT:
	        case Cobol85PreprocessorParser.NOEXP:
	        case Cobol85PreprocessorParser.NOEXPORTALL:
	        case Cobol85PreprocessorParser.NOF:
	        case Cobol85PreprocessorParser.NOFASTSRT:
	        case Cobol85PreprocessorParser.NOFEPI:
	        case Cobol85PreprocessorParser.NOFLAG:
	        case Cobol85PreprocessorParser.NOFLAGMIG:
	        case Cobol85PreprocessorParser.NOFLAGSTD:
	        case Cobol85PreprocessorParser.NOFSRT:
	        case Cobol85PreprocessorParser.NOGRAPHIC:
	        case Cobol85PreprocessorParser.NOHOOK:
	        case Cobol85PreprocessorParser.NOLENGTH:
	        case Cobol85PreprocessorParser.NOLIB:
	        case Cobol85PreprocessorParser.NOLINKAGE:
	        case Cobol85PreprocessorParser.NOLIST:
	        case Cobol85PreprocessorParser.NOMAP:
	        case Cobol85PreprocessorParser.NOMD:
	        case Cobol85PreprocessorParser.NOMDECK:
	        case Cobol85PreprocessorParser.NONAME:
	        case Cobol85PreprocessorParser.NONUM:
	        case Cobol85PreprocessorParser.NONUMBER:
	        case Cobol85PreprocessorParser.NOOBJ:
	        case Cobol85PreprocessorParser.NOOBJECT:
	        case Cobol85PreprocessorParser.NOOFF:
	        case Cobol85PreprocessorParser.NOOFFSET:
	        case Cobol85PreprocessorParser.NOOPSEQUENCE:
	        case Cobol85PreprocessorParser.NOOPT:
	        case Cobol85PreprocessorParser.NOOPTIMIZE:
	        case Cobol85PreprocessorParser.NOOPTIONS:
	        case Cobol85PreprocessorParser.NOP:
	        case Cobol85PreprocessorParser.NOPFD:
	        case Cobol85PreprocessorParser.NOPROLOG:
	        case Cobol85PreprocessorParser.NORENT:
	        case Cobol85PreprocessorParser.NOS:
	        case Cobol85PreprocessorParser.NOSEP:
	        case Cobol85PreprocessorParser.NOSEPARATE:
	        case Cobol85PreprocessorParser.NOSEQ:
	        case Cobol85PreprocessorParser.NOSOURCE:
	        case Cobol85PreprocessorParser.NOSPIE:
	        case Cobol85PreprocessorParser.NOSQL:
	        case Cobol85PreprocessorParser.NOSQLC:
	        case Cobol85PreprocessorParser.NOSQLCCSID:
	        case Cobol85PreprocessorParser.NOSSR:
	        case Cobol85PreprocessorParser.NOSSRANGE:
	        case Cobol85PreprocessorParser.NOSTDTRUNC:
	        case Cobol85PreprocessorParser.NOSEQUENCE:
	        case Cobol85PreprocessorParser.NOTERM:
	        case Cobol85PreprocessorParser.NOTERMINAL:
	        case Cobol85PreprocessorParser.NOTEST:
	        case Cobol85PreprocessorParser.NOTHREAD:
	        case Cobol85PreprocessorParser.NOTRIG:
	        case Cobol85PreprocessorParser.NOVBREF:
	        case Cobol85PreprocessorParser.NOWORD:
	        case Cobol85PreprocessorParser.NOX:
	        case Cobol85PreprocessorParser.NOXREF:
	        case Cobol85PreprocessorParser.NOZWB:
	        case Cobol85PreprocessorParser.NS:
	        case Cobol85PreprocessorParser.NSEQ:
	        case Cobol85PreprocessorParser.NSYMBOL:
	        case Cobol85PreprocessorParser.NUM:
	        case Cobol85PreprocessorParser.NUMBER:
	        case Cobol85PreprocessorParser.NUMPROC:
	        case Cobol85PreprocessorParser.OBJ:
	        case Cobol85PreprocessorParser.OBJECT:
	        case Cobol85PreprocessorParser.OF:
	        case Cobol85PreprocessorParser.OFF:
	        case Cobol85PreprocessorParser.OFFSET:
	        case Cobol85PreprocessorParser.ON:
	        case Cobol85PreprocessorParser.OP:
	        case Cobol85PreprocessorParser.OPMARGINS:
	        case Cobol85PreprocessorParser.OPSEQUENCE:
	        case Cobol85PreprocessorParser.OPT:
	        case Cobol85PreprocessorParser.OPTFILE:
	        case Cobol85PreprocessorParser.OPTIMIZE:
	        case Cobol85PreprocessorParser.OPTIONS:
	        case Cobol85PreprocessorParser.OUT:
	        case Cobol85PreprocessorParser.OUTDD:
	        case Cobol85PreprocessorParser.PFD:
	        case Cobol85PreprocessorParser.PPTDBG:
	        case Cobol85PreprocessorParser.PGMN:
	        case Cobol85PreprocessorParser.PGMNAME:
	        case Cobol85PreprocessorParser.PROCESS:
	        case Cobol85PreprocessorParser.PROLOG:
	        case Cobol85PreprocessorParser.QUOTE:
	        case Cobol85PreprocessorParser.RENT:
	        case Cobol85PreprocessorParser.REPLACING:
	        case Cobol85PreprocessorParser.RMODE:
	        case Cobol85PreprocessorParser.SEP:
	        case Cobol85PreprocessorParser.SEPARATE:
	        case Cobol85PreprocessorParser.SEQ:
	        case Cobol85PreprocessorParser.SEQUENCE:
	        case Cobol85PreprocessorParser.SHORT:
	        case Cobol85PreprocessorParser.SIZE:
	        case Cobol85PreprocessorParser.SOURCE:
	        case Cobol85PreprocessorParser.SP:
	        case Cobol85PreprocessorParser.SPACE:
	        case Cobol85PreprocessorParser.SPIE:
	        case Cobol85PreprocessorParser.SQL:
	        case Cobol85PreprocessorParser.SQLC:
	        case Cobol85PreprocessorParser.SQLCCSID:
	        case Cobol85PreprocessorParser.SS:
	        case Cobol85PreprocessorParser.SSR:
	        case Cobol85PreprocessorParser.SSRANGE:
	        case Cobol85PreprocessorParser.STD:
	        case Cobol85PreprocessorParser.SYSEIB:
	        case Cobol85PreprocessorParser.SZ:
	        case Cobol85PreprocessorParser.TERM:
	        case Cobol85PreprocessorParser.TERMINAL:
	        case Cobol85PreprocessorParser.TEST:
	        case Cobol85PreprocessorParser.THREAD:
	        case Cobol85PreprocessorParser.TITLE:
	        case Cobol85PreprocessorParser.TRIG:
	        case Cobol85PreprocessorParser.TRUNC:
	        case Cobol85PreprocessorParser.UE:
	        case Cobol85PreprocessorParser.UPPER:
	        case Cobol85PreprocessorParser.VBREF:
	        case Cobol85PreprocessorParser.WD:
	        case Cobol85PreprocessorParser.XMLPARSE:
	        case Cobol85PreprocessorParser.XMLSS:
	        case Cobol85PreprocessorParser.XOPTS:
	        case Cobol85PreprocessorParser.XREF:
	        case Cobol85PreprocessorParser.YEARWINDOW:
	        case Cobol85PreprocessorParser.YW:
	        case Cobol85PreprocessorParser.ZWB:
	        case Cobol85PreprocessorParser.C_CHAR:
	        case Cobol85PreprocessorParser.D_CHAR:
	        case Cobol85PreprocessorParser.E_CHAR:
	        case Cobol85PreprocessorParser.F_CHAR:
	        case Cobol85PreprocessorParser.H_CHAR:
	        case Cobol85PreprocessorParser.I_CHAR:
	        case Cobol85PreprocessorParser.M_CHAR:
	        case Cobol85PreprocessorParser.N_CHAR:
	        case Cobol85PreprocessorParser.Q_CHAR:
	        case Cobol85PreprocessorParser.S_CHAR:
	        case Cobol85PreprocessorParser.U_CHAR:
	        case Cobol85PreprocessorParser.W_CHAR:
	        case Cobol85PreprocessorParser.X_CHAR:
	        case Cobol85PreprocessorParser.COMMACHAR:
	        case Cobol85PreprocessorParser.IDENTIFIER:
	            this.state = 496;
	            this.cobolWord();
	            break;
	        case Cobol85PreprocessorParser.FILENAME:
	            this.state = 497;
	            this.filename();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 502;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
	        if(la_===1) {
	            this.state = 500;
	            _la = this._input.LA(1);
	            if(!(_la===Cobol85PreprocessorParser.IN || _la===Cobol85PreprocessorParser.OF)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 501;
	            this.copyLibrary();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copyLibrary() {
	    let localctx = new CopyLibraryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, Cobol85PreprocessorParser.RULE_copyLibrary);
	    try {
	        this.state = 506;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85PreprocessorParser.NONNUMERICLITERAL:
	        case Cobol85PreprocessorParser.NUMERICLITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 504;
	            this.literal();
	            break;
	        case Cobol85PreprocessorParser.ADATA:
	        case Cobol85PreprocessorParser.ADV:
	        case Cobol85PreprocessorParser.ALIAS:
	        case Cobol85PreprocessorParser.ANSI:
	        case Cobol85PreprocessorParser.ANY:
	        case Cobol85PreprocessorParser.APOST:
	        case Cobol85PreprocessorParser.AR:
	        case Cobol85PreprocessorParser.ARITH:
	        case Cobol85PreprocessorParser.AUTO:
	        case Cobol85PreprocessorParser.AWO:
	        case Cobol85PreprocessorParser.BIN:
	        case Cobol85PreprocessorParser.BLOCK0:
	        case Cobol85PreprocessorParser.BUF:
	        case Cobol85PreprocessorParser.BUFSIZE:
	        case Cobol85PreprocessorParser.BY:
	        case Cobol85PreprocessorParser.CBL:
	        case Cobol85PreprocessorParser.CBLCARD:
	        case Cobol85PreprocessorParser.CO:
	        case Cobol85PreprocessorParser.COBOL2:
	        case Cobol85PreprocessorParser.COBOL3:
	        case Cobol85PreprocessorParser.CODEPAGE:
	        case Cobol85PreprocessorParser.COMPAT:
	        case Cobol85PreprocessorParser.COMPILE:
	        case Cobol85PreprocessorParser.CP:
	        case Cobol85PreprocessorParser.CPP:
	        case Cobol85PreprocessorParser.CPSM:
	        case Cobol85PreprocessorParser.CS:
	        case Cobol85PreprocessorParser.CURR:
	        case Cobol85PreprocessorParser.CURRENCY:
	        case Cobol85PreprocessorParser.DATA:
	        case Cobol85PreprocessorParser.DATEPROC:
	        case Cobol85PreprocessorParser.DBCS:
	        case Cobol85PreprocessorParser.DD:
	        case Cobol85PreprocessorParser.DEBUG:
	        case Cobol85PreprocessorParser.DECK:
	        case Cobol85PreprocessorParser.DIAGTRUNC:
	        case Cobol85PreprocessorParser.DLI:
	        case Cobol85PreprocessorParser.DLL:
	        case Cobol85PreprocessorParser.DP:
	        case Cobol85PreprocessorParser.DTR:
	        case Cobol85PreprocessorParser.DU:
	        case Cobol85PreprocessorParser.DUMP:
	        case Cobol85PreprocessorParser.DYN:
	        case Cobol85PreprocessorParser.DYNAM:
	        case Cobol85PreprocessorParser.EDF:
	        case Cobol85PreprocessorParser.EJECT:
	        case Cobol85PreprocessorParser.EJPD:
	        case Cobol85PreprocessorParser.EN:
	        case Cobol85PreprocessorParser.ENGLISH:
	        case Cobol85PreprocessorParser.EPILOG:
	        case Cobol85PreprocessorParser.EXCI:
	        case Cobol85PreprocessorParser.EXIT:
	        case Cobol85PreprocessorParser.EXP:
	        case Cobol85PreprocessorParser.EXPORTALL:
	        case Cobol85PreprocessorParser.EXTEND:
	        case Cobol85PreprocessorParser.FASTSRT:
	        case Cobol85PreprocessorParser.FLAG:
	        case Cobol85PreprocessorParser.FLAGSTD:
	        case Cobol85PreprocessorParser.FSRT:
	        case Cobol85PreprocessorParser.FULL:
	        case Cobol85PreprocessorParser.GDS:
	        case Cobol85PreprocessorParser.GRAPHIC:
	        case Cobol85PreprocessorParser.HOOK:
	        case Cobol85PreprocessorParser.IN:
	        case Cobol85PreprocessorParser.INTDATE:
	        case Cobol85PreprocessorParser.JA:
	        case Cobol85PreprocessorParser.JP:
	        case Cobol85PreprocessorParser.KA:
	        case Cobol85PreprocessorParser.LANG:
	        case Cobol85PreprocessorParser.LANGUAGE:
	        case Cobol85PreprocessorParser.LC:
	        case Cobol85PreprocessorParser.LENGTH:
	        case Cobol85PreprocessorParser.LIB:
	        case Cobol85PreprocessorParser.LILIAN:
	        case Cobol85PreprocessorParser.LIN:
	        case Cobol85PreprocessorParser.LINECOUNT:
	        case Cobol85PreprocessorParser.LINKAGE:
	        case Cobol85PreprocessorParser.LIST:
	        case Cobol85PreprocessorParser.LM:
	        case Cobol85PreprocessorParser.LONGMIXED:
	        case Cobol85PreprocessorParser.LONGUPPER:
	        case Cobol85PreprocessorParser.LU:
	        case Cobol85PreprocessorParser.MAP:
	        case Cobol85PreprocessorParser.MARGINS:
	        case Cobol85PreprocessorParser.MAX:
	        case Cobol85PreprocessorParser.MD:
	        case Cobol85PreprocessorParser.MDECK:
	        case Cobol85PreprocessorParser.MIG:
	        case Cobol85PreprocessorParser.MIXED:
	        case Cobol85PreprocessorParser.NAME:
	        case Cobol85PreprocessorParser.NAT:
	        case Cobol85PreprocessorParser.NATIONAL:
	        case Cobol85PreprocessorParser.NATLANG:
	        case Cobol85PreprocessorParser.NN:
	        case Cobol85PreprocessorParser.NO:
	        case Cobol85PreprocessorParser.NOADATA:
	        case Cobol85PreprocessorParser.NOADV:
	        case Cobol85PreprocessorParser.NOALIAS:
	        case Cobol85PreprocessorParser.NOAWO:
	        case Cobol85PreprocessorParser.NOBLOCK0:
	        case Cobol85PreprocessorParser.NOC:
	        case Cobol85PreprocessorParser.NOCBLCARD:
	        case Cobol85PreprocessorParser.NOCICS:
	        case Cobol85PreprocessorParser.NOCMPR2:
	        case Cobol85PreprocessorParser.NOCOMPILE:
	        case Cobol85PreprocessorParser.NOCPSM:
	        case Cobol85PreprocessorParser.NOCURR:
	        case Cobol85PreprocessorParser.NOCURRENCY:
	        case Cobol85PreprocessorParser.NOD:
	        case Cobol85PreprocessorParser.NODATEPROC:
	        case Cobol85PreprocessorParser.NODBCS:
	        case Cobol85PreprocessorParser.NODE:
	        case Cobol85PreprocessorParser.NODEBUG:
	        case Cobol85PreprocessorParser.NODECK:
	        case Cobol85PreprocessorParser.NODIAGTRUNC:
	        case Cobol85PreprocessorParser.NODLL:
	        case Cobol85PreprocessorParser.NODU:
	        case Cobol85PreprocessorParser.NODUMP:
	        case Cobol85PreprocessorParser.NODP:
	        case Cobol85PreprocessorParser.NODTR:
	        case Cobol85PreprocessorParser.NODYN:
	        case Cobol85PreprocessorParser.NODYNAM:
	        case Cobol85PreprocessorParser.NOEDF:
	        case Cobol85PreprocessorParser.NOEJPD:
	        case Cobol85PreprocessorParser.NOEPILOG:
	        case Cobol85PreprocessorParser.NOEXIT:
	        case Cobol85PreprocessorParser.NOEXP:
	        case Cobol85PreprocessorParser.NOEXPORTALL:
	        case Cobol85PreprocessorParser.NOF:
	        case Cobol85PreprocessorParser.NOFASTSRT:
	        case Cobol85PreprocessorParser.NOFEPI:
	        case Cobol85PreprocessorParser.NOFLAG:
	        case Cobol85PreprocessorParser.NOFLAGMIG:
	        case Cobol85PreprocessorParser.NOFLAGSTD:
	        case Cobol85PreprocessorParser.NOFSRT:
	        case Cobol85PreprocessorParser.NOGRAPHIC:
	        case Cobol85PreprocessorParser.NOHOOK:
	        case Cobol85PreprocessorParser.NOLENGTH:
	        case Cobol85PreprocessorParser.NOLIB:
	        case Cobol85PreprocessorParser.NOLINKAGE:
	        case Cobol85PreprocessorParser.NOLIST:
	        case Cobol85PreprocessorParser.NOMAP:
	        case Cobol85PreprocessorParser.NOMD:
	        case Cobol85PreprocessorParser.NOMDECK:
	        case Cobol85PreprocessorParser.NONAME:
	        case Cobol85PreprocessorParser.NONUM:
	        case Cobol85PreprocessorParser.NONUMBER:
	        case Cobol85PreprocessorParser.NOOBJ:
	        case Cobol85PreprocessorParser.NOOBJECT:
	        case Cobol85PreprocessorParser.NOOFF:
	        case Cobol85PreprocessorParser.NOOFFSET:
	        case Cobol85PreprocessorParser.NOOPSEQUENCE:
	        case Cobol85PreprocessorParser.NOOPT:
	        case Cobol85PreprocessorParser.NOOPTIMIZE:
	        case Cobol85PreprocessorParser.NOOPTIONS:
	        case Cobol85PreprocessorParser.NOP:
	        case Cobol85PreprocessorParser.NOPFD:
	        case Cobol85PreprocessorParser.NOPROLOG:
	        case Cobol85PreprocessorParser.NORENT:
	        case Cobol85PreprocessorParser.NOS:
	        case Cobol85PreprocessorParser.NOSEP:
	        case Cobol85PreprocessorParser.NOSEPARATE:
	        case Cobol85PreprocessorParser.NOSEQ:
	        case Cobol85PreprocessorParser.NOSOURCE:
	        case Cobol85PreprocessorParser.NOSPIE:
	        case Cobol85PreprocessorParser.NOSQL:
	        case Cobol85PreprocessorParser.NOSQLC:
	        case Cobol85PreprocessorParser.NOSQLCCSID:
	        case Cobol85PreprocessorParser.NOSSR:
	        case Cobol85PreprocessorParser.NOSSRANGE:
	        case Cobol85PreprocessorParser.NOSTDTRUNC:
	        case Cobol85PreprocessorParser.NOSEQUENCE:
	        case Cobol85PreprocessorParser.NOTERM:
	        case Cobol85PreprocessorParser.NOTERMINAL:
	        case Cobol85PreprocessorParser.NOTEST:
	        case Cobol85PreprocessorParser.NOTHREAD:
	        case Cobol85PreprocessorParser.NOTRIG:
	        case Cobol85PreprocessorParser.NOVBREF:
	        case Cobol85PreprocessorParser.NOWORD:
	        case Cobol85PreprocessorParser.NOX:
	        case Cobol85PreprocessorParser.NOXREF:
	        case Cobol85PreprocessorParser.NOZWB:
	        case Cobol85PreprocessorParser.NS:
	        case Cobol85PreprocessorParser.NSEQ:
	        case Cobol85PreprocessorParser.NSYMBOL:
	        case Cobol85PreprocessorParser.NUM:
	        case Cobol85PreprocessorParser.NUMBER:
	        case Cobol85PreprocessorParser.NUMPROC:
	        case Cobol85PreprocessorParser.OBJ:
	        case Cobol85PreprocessorParser.OBJECT:
	        case Cobol85PreprocessorParser.OF:
	        case Cobol85PreprocessorParser.OFF:
	        case Cobol85PreprocessorParser.OFFSET:
	        case Cobol85PreprocessorParser.ON:
	        case Cobol85PreprocessorParser.OP:
	        case Cobol85PreprocessorParser.OPMARGINS:
	        case Cobol85PreprocessorParser.OPSEQUENCE:
	        case Cobol85PreprocessorParser.OPT:
	        case Cobol85PreprocessorParser.OPTFILE:
	        case Cobol85PreprocessorParser.OPTIMIZE:
	        case Cobol85PreprocessorParser.OPTIONS:
	        case Cobol85PreprocessorParser.OUT:
	        case Cobol85PreprocessorParser.OUTDD:
	        case Cobol85PreprocessorParser.PFD:
	        case Cobol85PreprocessorParser.PPTDBG:
	        case Cobol85PreprocessorParser.PGMN:
	        case Cobol85PreprocessorParser.PGMNAME:
	        case Cobol85PreprocessorParser.PROCESS:
	        case Cobol85PreprocessorParser.PROLOG:
	        case Cobol85PreprocessorParser.QUOTE:
	        case Cobol85PreprocessorParser.RENT:
	        case Cobol85PreprocessorParser.REPLACING:
	        case Cobol85PreprocessorParser.RMODE:
	        case Cobol85PreprocessorParser.SEP:
	        case Cobol85PreprocessorParser.SEPARATE:
	        case Cobol85PreprocessorParser.SEQ:
	        case Cobol85PreprocessorParser.SEQUENCE:
	        case Cobol85PreprocessorParser.SHORT:
	        case Cobol85PreprocessorParser.SIZE:
	        case Cobol85PreprocessorParser.SOURCE:
	        case Cobol85PreprocessorParser.SP:
	        case Cobol85PreprocessorParser.SPACE:
	        case Cobol85PreprocessorParser.SPIE:
	        case Cobol85PreprocessorParser.SQL:
	        case Cobol85PreprocessorParser.SQLC:
	        case Cobol85PreprocessorParser.SQLCCSID:
	        case Cobol85PreprocessorParser.SS:
	        case Cobol85PreprocessorParser.SSR:
	        case Cobol85PreprocessorParser.SSRANGE:
	        case Cobol85PreprocessorParser.STD:
	        case Cobol85PreprocessorParser.SYSEIB:
	        case Cobol85PreprocessorParser.SZ:
	        case Cobol85PreprocessorParser.TERM:
	        case Cobol85PreprocessorParser.TERMINAL:
	        case Cobol85PreprocessorParser.TEST:
	        case Cobol85PreprocessorParser.THREAD:
	        case Cobol85PreprocessorParser.TITLE:
	        case Cobol85PreprocessorParser.TRIG:
	        case Cobol85PreprocessorParser.TRUNC:
	        case Cobol85PreprocessorParser.UE:
	        case Cobol85PreprocessorParser.UPPER:
	        case Cobol85PreprocessorParser.VBREF:
	        case Cobol85PreprocessorParser.WD:
	        case Cobol85PreprocessorParser.XMLPARSE:
	        case Cobol85PreprocessorParser.XMLSS:
	        case Cobol85PreprocessorParser.XOPTS:
	        case Cobol85PreprocessorParser.XREF:
	        case Cobol85PreprocessorParser.YEARWINDOW:
	        case Cobol85PreprocessorParser.YW:
	        case Cobol85PreprocessorParser.ZWB:
	        case Cobol85PreprocessorParser.C_CHAR:
	        case Cobol85PreprocessorParser.D_CHAR:
	        case Cobol85PreprocessorParser.E_CHAR:
	        case Cobol85PreprocessorParser.F_CHAR:
	        case Cobol85PreprocessorParser.H_CHAR:
	        case Cobol85PreprocessorParser.I_CHAR:
	        case Cobol85PreprocessorParser.M_CHAR:
	        case Cobol85PreprocessorParser.N_CHAR:
	        case Cobol85PreprocessorParser.Q_CHAR:
	        case Cobol85PreprocessorParser.S_CHAR:
	        case Cobol85PreprocessorParser.U_CHAR:
	        case Cobol85PreprocessorParser.W_CHAR:
	        case Cobol85PreprocessorParser.X_CHAR:
	        case Cobol85PreprocessorParser.COMMACHAR:
	        case Cobol85PreprocessorParser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 505;
	            this.cobolWord();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replacingPhrase() {
	    let localctx = new ReplacingPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, Cobol85PreprocessorParser.RULE_replacingPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 508;
	        this.match(Cobol85PreprocessorParser.REPLACING);
	        this.state = 512;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85PreprocessorParser.NEWLINE) {
	            this.state = 509;
	            this.match(Cobol85PreprocessorParser.NEWLINE);
	            this.state = 514;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 515;
	        this.replaceClause();
	        this.state = 524;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,45,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 517; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 516;
	                    this.match(Cobol85PreprocessorParser.NEWLINE);
	                    this.state = 519; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===Cobol85PreprocessorParser.NEWLINE);
	                this.state = 521;
	                this.replaceClause(); 
	            }
	            this.state = 526;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,45,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replaceArea() {
	    let localctx = new ReplaceAreaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, Cobol85PreprocessorParser.RULE_replaceArea);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 527;
	        this.replaceByStatement();
	        this.state = 532;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,47,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 530;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case Cobol85PreprocessorParser.COPY:
	                    this.state = 528;
	                    this.copyStatement();
	                    break;
	                case Cobol85PreprocessorParser.ADATA:
	                case Cobol85PreprocessorParser.ADV:
	                case Cobol85PreprocessorParser.ALIAS:
	                case Cobol85PreprocessorParser.ANSI:
	                case Cobol85PreprocessorParser.ANY:
	                case Cobol85PreprocessorParser.APOST:
	                case Cobol85PreprocessorParser.AR:
	                case Cobol85PreprocessorParser.ARITH:
	                case Cobol85PreprocessorParser.AUTO:
	                case Cobol85PreprocessorParser.AWO:
	                case Cobol85PreprocessorParser.BIN:
	                case Cobol85PreprocessorParser.BLOCK0:
	                case Cobol85PreprocessorParser.BUF:
	                case Cobol85PreprocessorParser.BUFSIZE:
	                case Cobol85PreprocessorParser.BY:
	                case Cobol85PreprocessorParser.CBL:
	                case Cobol85PreprocessorParser.CBLCARD:
	                case Cobol85PreprocessorParser.CO:
	                case Cobol85PreprocessorParser.COBOL2:
	                case Cobol85PreprocessorParser.COBOL3:
	                case Cobol85PreprocessorParser.CODEPAGE:
	                case Cobol85PreprocessorParser.COMPAT:
	                case Cobol85PreprocessorParser.COMPILE:
	                case Cobol85PreprocessorParser.CP:
	                case Cobol85PreprocessorParser.CPP:
	                case Cobol85PreprocessorParser.CPSM:
	                case Cobol85PreprocessorParser.CS:
	                case Cobol85PreprocessorParser.CURR:
	                case Cobol85PreprocessorParser.CURRENCY:
	                case Cobol85PreprocessorParser.DATA:
	                case Cobol85PreprocessorParser.DATEPROC:
	                case Cobol85PreprocessorParser.DBCS:
	                case Cobol85PreprocessorParser.DD:
	                case Cobol85PreprocessorParser.DEBUG:
	                case Cobol85PreprocessorParser.DECK:
	                case Cobol85PreprocessorParser.DIAGTRUNC:
	                case Cobol85PreprocessorParser.DLI:
	                case Cobol85PreprocessorParser.DLL:
	                case Cobol85PreprocessorParser.DP:
	                case Cobol85PreprocessorParser.DTR:
	                case Cobol85PreprocessorParser.DU:
	                case Cobol85PreprocessorParser.DUMP:
	                case Cobol85PreprocessorParser.DYN:
	                case Cobol85PreprocessorParser.DYNAM:
	                case Cobol85PreprocessorParser.EDF:
	                case Cobol85PreprocessorParser.EJECT:
	                case Cobol85PreprocessorParser.EJPD:
	                case Cobol85PreprocessorParser.EN:
	                case Cobol85PreprocessorParser.ENGLISH:
	                case Cobol85PreprocessorParser.EPILOG:
	                case Cobol85PreprocessorParser.EXCI:
	                case Cobol85PreprocessorParser.EXIT:
	                case Cobol85PreprocessorParser.EXP:
	                case Cobol85PreprocessorParser.EXPORTALL:
	                case Cobol85PreprocessorParser.EXTEND:
	                case Cobol85PreprocessorParser.FASTSRT:
	                case Cobol85PreprocessorParser.FLAG:
	                case Cobol85PreprocessorParser.FLAGSTD:
	                case Cobol85PreprocessorParser.FSRT:
	                case Cobol85PreprocessorParser.FULL:
	                case Cobol85PreprocessorParser.GDS:
	                case Cobol85PreprocessorParser.GRAPHIC:
	                case Cobol85PreprocessorParser.HOOK:
	                case Cobol85PreprocessorParser.IN:
	                case Cobol85PreprocessorParser.INTDATE:
	                case Cobol85PreprocessorParser.JA:
	                case Cobol85PreprocessorParser.JP:
	                case Cobol85PreprocessorParser.KA:
	                case Cobol85PreprocessorParser.LANG:
	                case Cobol85PreprocessorParser.LANGUAGE:
	                case Cobol85PreprocessorParser.LC:
	                case Cobol85PreprocessorParser.LENGTH:
	                case Cobol85PreprocessorParser.LIB:
	                case Cobol85PreprocessorParser.LILIAN:
	                case Cobol85PreprocessorParser.LIN:
	                case Cobol85PreprocessorParser.LINECOUNT:
	                case Cobol85PreprocessorParser.LINKAGE:
	                case Cobol85PreprocessorParser.LIST:
	                case Cobol85PreprocessorParser.LM:
	                case Cobol85PreprocessorParser.LONGMIXED:
	                case Cobol85PreprocessorParser.LONGUPPER:
	                case Cobol85PreprocessorParser.LPARENCHAR:
	                case Cobol85PreprocessorParser.LU:
	                case Cobol85PreprocessorParser.MAP:
	                case Cobol85PreprocessorParser.MARGINS:
	                case Cobol85PreprocessorParser.MAX:
	                case Cobol85PreprocessorParser.MD:
	                case Cobol85PreprocessorParser.MDECK:
	                case Cobol85PreprocessorParser.MIG:
	                case Cobol85PreprocessorParser.MIXED:
	                case Cobol85PreprocessorParser.NAME:
	                case Cobol85PreprocessorParser.NAT:
	                case Cobol85PreprocessorParser.NATIONAL:
	                case Cobol85PreprocessorParser.NATLANG:
	                case Cobol85PreprocessorParser.NN:
	                case Cobol85PreprocessorParser.NO:
	                case Cobol85PreprocessorParser.NOADATA:
	                case Cobol85PreprocessorParser.NOADV:
	                case Cobol85PreprocessorParser.NOALIAS:
	                case Cobol85PreprocessorParser.NOAWO:
	                case Cobol85PreprocessorParser.NOBLOCK0:
	                case Cobol85PreprocessorParser.NOC:
	                case Cobol85PreprocessorParser.NOCBLCARD:
	                case Cobol85PreprocessorParser.NOCICS:
	                case Cobol85PreprocessorParser.NOCMPR2:
	                case Cobol85PreprocessorParser.NOCOMPILE:
	                case Cobol85PreprocessorParser.NOCPSM:
	                case Cobol85PreprocessorParser.NOCURR:
	                case Cobol85PreprocessorParser.NOCURRENCY:
	                case Cobol85PreprocessorParser.NOD:
	                case Cobol85PreprocessorParser.NODATEPROC:
	                case Cobol85PreprocessorParser.NODBCS:
	                case Cobol85PreprocessorParser.NODE:
	                case Cobol85PreprocessorParser.NODEBUG:
	                case Cobol85PreprocessorParser.NODECK:
	                case Cobol85PreprocessorParser.NODIAGTRUNC:
	                case Cobol85PreprocessorParser.NODLL:
	                case Cobol85PreprocessorParser.NODU:
	                case Cobol85PreprocessorParser.NODUMP:
	                case Cobol85PreprocessorParser.NODP:
	                case Cobol85PreprocessorParser.NODTR:
	                case Cobol85PreprocessorParser.NODYN:
	                case Cobol85PreprocessorParser.NODYNAM:
	                case Cobol85PreprocessorParser.NOEDF:
	                case Cobol85PreprocessorParser.NOEJPD:
	                case Cobol85PreprocessorParser.NOEPILOG:
	                case Cobol85PreprocessorParser.NOEXIT:
	                case Cobol85PreprocessorParser.NOEXP:
	                case Cobol85PreprocessorParser.NOEXPORTALL:
	                case Cobol85PreprocessorParser.NOF:
	                case Cobol85PreprocessorParser.NOFASTSRT:
	                case Cobol85PreprocessorParser.NOFEPI:
	                case Cobol85PreprocessorParser.NOFLAG:
	                case Cobol85PreprocessorParser.NOFLAGMIG:
	                case Cobol85PreprocessorParser.NOFLAGSTD:
	                case Cobol85PreprocessorParser.NOFSRT:
	                case Cobol85PreprocessorParser.NOGRAPHIC:
	                case Cobol85PreprocessorParser.NOHOOK:
	                case Cobol85PreprocessorParser.NOLENGTH:
	                case Cobol85PreprocessorParser.NOLIB:
	                case Cobol85PreprocessorParser.NOLINKAGE:
	                case Cobol85PreprocessorParser.NOLIST:
	                case Cobol85PreprocessorParser.NOMAP:
	                case Cobol85PreprocessorParser.NOMD:
	                case Cobol85PreprocessorParser.NOMDECK:
	                case Cobol85PreprocessorParser.NONAME:
	                case Cobol85PreprocessorParser.NONUM:
	                case Cobol85PreprocessorParser.NONUMBER:
	                case Cobol85PreprocessorParser.NOOBJ:
	                case Cobol85PreprocessorParser.NOOBJECT:
	                case Cobol85PreprocessorParser.NOOFF:
	                case Cobol85PreprocessorParser.NOOFFSET:
	                case Cobol85PreprocessorParser.NOOPSEQUENCE:
	                case Cobol85PreprocessorParser.NOOPT:
	                case Cobol85PreprocessorParser.NOOPTIMIZE:
	                case Cobol85PreprocessorParser.NOOPTIONS:
	                case Cobol85PreprocessorParser.NOP:
	                case Cobol85PreprocessorParser.NOPFD:
	                case Cobol85PreprocessorParser.NOPROLOG:
	                case Cobol85PreprocessorParser.NORENT:
	                case Cobol85PreprocessorParser.NOS:
	                case Cobol85PreprocessorParser.NOSEP:
	                case Cobol85PreprocessorParser.NOSEPARATE:
	                case Cobol85PreprocessorParser.NOSEQ:
	                case Cobol85PreprocessorParser.NOSOURCE:
	                case Cobol85PreprocessorParser.NOSPIE:
	                case Cobol85PreprocessorParser.NOSQL:
	                case Cobol85PreprocessorParser.NOSQLC:
	                case Cobol85PreprocessorParser.NOSQLCCSID:
	                case Cobol85PreprocessorParser.NOSSR:
	                case Cobol85PreprocessorParser.NOSSRANGE:
	                case Cobol85PreprocessorParser.NOSTDTRUNC:
	                case Cobol85PreprocessorParser.NOSEQUENCE:
	                case Cobol85PreprocessorParser.NOTERM:
	                case Cobol85PreprocessorParser.NOTERMINAL:
	                case Cobol85PreprocessorParser.NOTEST:
	                case Cobol85PreprocessorParser.NOTHREAD:
	                case Cobol85PreprocessorParser.NOTRIG:
	                case Cobol85PreprocessorParser.NOVBREF:
	                case Cobol85PreprocessorParser.NOWORD:
	                case Cobol85PreprocessorParser.NOX:
	                case Cobol85PreprocessorParser.NOXREF:
	                case Cobol85PreprocessorParser.NOZWB:
	                case Cobol85PreprocessorParser.NS:
	                case Cobol85PreprocessorParser.NSEQ:
	                case Cobol85PreprocessorParser.NSYMBOL:
	                case Cobol85PreprocessorParser.NUM:
	                case Cobol85PreprocessorParser.NUMBER:
	                case Cobol85PreprocessorParser.NUMPROC:
	                case Cobol85PreprocessorParser.OBJ:
	                case Cobol85PreprocessorParser.OBJECT:
	                case Cobol85PreprocessorParser.OF:
	                case Cobol85PreprocessorParser.OFF:
	                case Cobol85PreprocessorParser.OFFSET:
	                case Cobol85PreprocessorParser.ON:
	                case Cobol85PreprocessorParser.OP:
	                case Cobol85PreprocessorParser.OPMARGINS:
	                case Cobol85PreprocessorParser.OPSEQUENCE:
	                case Cobol85PreprocessorParser.OPT:
	                case Cobol85PreprocessorParser.OPTFILE:
	                case Cobol85PreprocessorParser.OPTIMIZE:
	                case Cobol85PreprocessorParser.OPTIONS:
	                case Cobol85PreprocessorParser.OUT:
	                case Cobol85PreprocessorParser.OUTDD:
	                case Cobol85PreprocessorParser.PFD:
	                case Cobol85PreprocessorParser.PPTDBG:
	                case Cobol85PreprocessorParser.PGMN:
	                case Cobol85PreprocessorParser.PGMNAME:
	                case Cobol85PreprocessorParser.PROCESS:
	                case Cobol85PreprocessorParser.PROLOG:
	                case Cobol85PreprocessorParser.QUOTE:
	                case Cobol85PreprocessorParser.RENT:
	                case Cobol85PreprocessorParser.REPLACING:
	                case Cobol85PreprocessorParser.RMODE:
	                case Cobol85PreprocessorParser.RPARENCHAR:
	                case Cobol85PreprocessorParser.SEP:
	                case Cobol85PreprocessorParser.SEPARATE:
	                case Cobol85PreprocessorParser.SEQ:
	                case Cobol85PreprocessorParser.SEQUENCE:
	                case Cobol85PreprocessorParser.SHORT:
	                case Cobol85PreprocessorParser.SIZE:
	                case Cobol85PreprocessorParser.SOURCE:
	                case Cobol85PreprocessorParser.SP:
	                case Cobol85PreprocessorParser.SPACE:
	                case Cobol85PreprocessorParser.SPIE:
	                case Cobol85PreprocessorParser.SQL:
	                case Cobol85PreprocessorParser.SQLC:
	                case Cobol85PreprocessorParser.SQLCCSID:
	                case Cobol85PreprocessorParser.SS:
	                case Cobol85PreprocessorParser.SSR:
	                case Cobol85PreprocessorParser.SSRANGE:
	                case Cobol85PreprocessorParser.STD:
	                case Cobol85PreprocessorParser.SYSEIB:
	                case Cobol85PreprocessorParser.SZ:
	                case Cobol85PreprocessorParser.TERM:
	                case Cobol85PreprocessorParser.TERMINAL:
	                case Cobol85PreprocessorParser.TEST:
	                case Cobol85PreprocessorParser.THREAD:
	                case Cobol85PreprocessorParser.TITLE:
	                case Cobol85PreprocessorParser.TRIG:
	                case Cobol85PreprocessorParser.TRUNC:
	                case Cobol85PreprocessorParser.UE:
	                case Cobol85PreprocessorParser.UPPER:
	                case Cobol85PreprocessorParser.VBREF:
	                case Cobol85PreprocessorParser.WD:
	                case Cobol85PreprocessorParser.XMLPARSE:
	                case Cobol85PreprocessorParser.XMLSS:
	                case Cobol85PreprocessorParser.XOPTS:
	                case Cobol85PreprocessorParser.XREF:
	                case Cobol85PreprocessorParser.YEARWINDOW:
	                case Cobol85PreprocessorParser.YW:
	                case Cobol85PreprocessorParser.ZWB:
	                case Cobol85PreprocessorParser.C_CHAR:
	                case Cobol85PreprocessorParser.D_CHAR:
	                case Cobol85PreprocessorParser.E_CHAR:
	                case Cobol85PreprocessorParser.F_CHAR:
	                case Cobol85PreprocessorParser.H_CHAR:
	                case Cobol85PreprocessorParser.I_CHAR:
	                case Cobol85PreprocessorParser.M_CHAR:
	                case Cobol85PreprocessorParser.N_CHAR:
	                case Cobol85PreprocessorParser.Q_CHAR:
	                case Cobol85PreprocessorParser.S_CHAR:
	                case Cobol85PreprocessorParser.U_CHAR:
	                case Cobol85PreprocessorParser.W_CHAR:
	                case Cobol85PreprocessorParser.X_CHAR:
	                case Cobol85PreprocessorParser.COMMACHAR:
	                case Cobol85PreprocessorParser.DOT:
	                case Cobol85PreprocessorParser.NONNUMERICLITERAL:
	                case Cobol85PreprocessorParser.NUMERICLITERAL:
	                case Cobol85PreprocessorParser.IDENTIFIER:
	                case Cobol85PreprocessorParser.FILENAME:
	                case Cobol85PreprocessorParser.NEWLINE:
	                case Cobol85PreprocessorParser.TEXT:
	                    this.state = 529;
	                    this.charData();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 534;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,47,this._ctx);
	        }

	        this.state = 536;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        if(la_===1) {
	            this.state = 535;
	            this.replaceOffStatement();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replaceByStatement() {
	    let localctx = new ReplaceByStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, Cobol85PreprocessorParser.RULE_replaceByStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 538;
	        this.match(Cobol85PreprocessorParser.REPLACE);
	        this.state = 546; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 542;
	        		this._errHandler.sync(this);
	        		_la = this._input.LA(1);
	        		while(_la===Cobol85PreprocessorParser.NEWLINE) {
	        		    this.state = 539;
	        		    this.match(Cobol85PreprocessorParser.NEWLINE);
	        		    this.state = 544;
	        		    this._errHandler.sync(this);
	        		    _la = this._input.LA(1);
	        		}
	        		this.state = 545;
	        		this.replaceClause();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 548; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,50, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 550;
	        this.match(Cobol85PreprocessorParser.DOT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replaceOffStatement() {
	    let localctx = new ReplaceOffStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, Cobol85PreprocessorParser.RULE_replaceOffStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 552;
	        this.match(Cobol85PreprocessorParser.REPLACE);
	        this.state = 553;
	        this.match(Cobol85PreprocessorParser.OFF);
	        this.state = 554;
	        this.match(Cobol85PreprocessorParser.DOT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replaceClause() {
	    let localctx = new ReplaceClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, Cobol85PreprocessorParser.RULE_replaceClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 556;
	        this.replaceable();
	        this.state = 560;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85PreprocessorParser.NEWLINE) {
	            this.state = 557;
	            this.match(Cobol85PreprocessorParser.NEWLINE);
	            this.state = 562;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 563;
	        this.match(Cobol85PreprocessorParser.BY);
	        this.state = 567;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85PreprocessorParser.NEWLINE) {
	            this.state = 564;
	            this.match(Cobol85PreprocessorParser.NEWLINE);
	            this.state = 569;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 570;
	        this.replacement();
	        this.state = 578;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	        if(la_===1) {
	            this.state = 574;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Cobol85PreprocessorParser.NEWLINE) {
	                this.state = 571;
	                this.match(Cobol85PreprocessorParser.NEWLINE);
	                this.state = 576;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 577;
	            this.directoryPhrase();

	        }
	        this.state = 587;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
	        if(la_===1) {
	            this.state = 583;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Cobol85PreprocessorParser.NEWLINE) {
	                this.state = 580;
	                this.match(Cobol85PreprocessorParser.NEWLINE);
	                this.state = 585;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 586;
	            this.familyPhrase();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	directoryPhrase() {
	    let localctx = new DirectoryPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, Cobol85PreprocessorParser.RULE_directoryPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 589;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85PreprocessorParser.IN || _la===Cobol85PreprocessorParser.OF)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 593;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85PreprocessorParser.NEWLINE) {
	            this.state = 590;
	            this.match(Cobol85PreprocessorParser.NEWLINE);
	            this.state = 595;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 598;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85PreprocessorParser.NONNUMERICLITERAL:
	        case Cobol85PreprocessorParser.NUMERICLITERAL:
	            this.state = 596;
	            this.literal();
	            break;
	        case Cobol85PreprocessorParser.ADATA:
	        case Cobol85PreprocessorParser.ADV:
	        case Cobol85PreprocessorParser.ALIAS:
	        case Cobol85PreprocessorParser.ANSI:
	        case Cobol85PreprocessorParser.ANY:
	        case Cobol85PreprocessorParser.APOST:
	        case Cobol85PreprocessorParser.AR:
	        case Cobol85PreprocessorParser.ARITH:
	        case Cobol85PreprocessorParser.AUTO:
	        case Cobol85PreprocessorParser.AWO:
	        case Cobol85PreprocessorParser.BIN:
	        case Cobol85PreprocessorParser.BLOCK0:
	        case Cobol85PreprocessorParser.BUF:
	        case Cobol85PreprocessorParser.BUFSIZE:
	        case Cobol85PreprocessorParser.BY:
	        case Cobol85PreprocessorParser.CBL:
	        case Cobol85PreprocessorParser.CBLCARD:
	        case Cobol85PreprocessorParser.CO:
	        case Cobol85PreprocessorParser.COBOL2:
	        case Cobol85PreprocessorParser.COBOL3:
	        case Cobol85PreprocessorParser.CODEPAGE:
	        case Cobol85PreprocessorParser.COMPAT:
	        case Cobol85PreprocessorParser.COMPILE:
	        case Cobol85PreprocessorParser.CP:
	        case Cobol85PreprocessorParser.CPP:
	        case Cobol85PreprocessorParser.CPSM:
	        case Cobol85PreprocessorParser.CS:
	        case Cobol85PreprocessorParser.CURR:
	        case Cobol85PreprocessorParser.CURRENCY:
	        case Cobol85PreprocessorParser.DATA:
	        case Cobol85PreprocessorParser.DATEPROC:
	        case Cobol85PreprocessorParser.DBCS:
	        case Cobol85PreprocessorParser.DD:
	        case Cobol85PreprocessorParser.DEBUG:
	        case Cobol85PreprocessorParser.DECK:
	        case Cobol85PreprocessorParser.DIAGTRUNC:
	        case Cobol85PreprocessorParser.DLI:
	        case Cobol85PreprocessorParser.DLL:
	        case Cobol85PreprocessorParser.DP:
	        case Cobol85PreprocessorParser.DTR:
	        case Cobol85PreprocessorParser.DU:
	        case Cobol85PreprocessorParser.DUMP:
	        case Cobol85PreprocessorParser.DYN:
	        case Cobol85PreprocessorParser.DYNAM:
	        case Cobol85PreprocessorParser.EDF:
	        case Cobol85PreprocessorParser.EJECT:
	        case Cobol85PreprocessorParser.EJPD:
	        case Cobol85PreprocessorParser.EN:
	        case Cobol85PreprocessorParser.ENGLISH:
	        case Cobol85PreprocessorParser.EPILOG:
	        case Cobol85PreprocessorParser.EXCI:
	        case Cobol85PreprocessorParser.EXIT:
	        case Cobol85PreprocessorParser.EXP:
	        case Cobol85PreprocessorParser.EXPORTALL:
	        case Cobol85PreprocessorParser.EXTEND:
	        case Cobol85PreprocessorParser.FASTSRT:
	        case Cobol85PreprocessorParser.FLAG:
	        case Cobol85PreprocessorParser.FLAGSTD:
	        case Cobol85PreprocessorParser.FSRT:
	        case Cobol85PreprocessorParser.FULL:
	        case Cobol85PreprocessorParser.GDS:
	        case Cobol85PreprocessorParser.GRAPHIC:
	        case Cobol85PreprocessorParser.HOOK:
	        case Cobol85PreprocessorParser.IN:
	        case Cobol85PreprocessorParser.INTDATE:
	        case Cobol85PreprocessorParser.JA:
	        case Cobol85PreprocessorParser.JP:
	        case Cobol85PreprocessorParser.KA:
	        case Cobol85PreprocessorParser.LANG:
	        case Cobol85PreprocessorParser.LANGUAGE:
	        case Cobol85PreprocessorParser.LC:
	        case Cobol85PreprocessorParser.LENGTH:
	        case Cobol85PreprocessorParser.LIB:
	        case Cobol85PreprocessorParser.LILIAN:
	        case Cobol85PreprocessorParser.LIN:
	        case Cobol85PreprocessorParser.LINECOUNT:
	        case Cobol85PreprocessorParser.LINKAGE:
	        case Cobol85PreprocessorParser.LIST:
	        case Cobol85PreprocessorParser.LM:
	        case Cobol85PreprocessorParser.LONGMIXED:
	        case Cobol85PreprocessorParser.LONGUPPER:
	        case Cobol85PreprocessorParser.LU:
	        case Cobol85PreprocessorParser.MAP:
	        case Cobol85PreprocessorParser.MARGINS:
	        case Cobol85PreprocessorParser.MAX:
	        case Cobol85PreprocessorParser.MD:
	        case Cobol85PreprocessorParser.MDECK:
	        case Cobol85PreprocessorParser.MIG:
	        case Cobol85PreprocessorParser.MIXED:
	        case Cobol85PreprocessorParser.NAME:
	        case Cobol85PreprocessorParser.NAT:
	        case Cobol85PreprocessorParser.NATIONAL:
	        case Cobol85PreprocessorParser.NATLANG:
	        case Cobol85PreprocessorParser.NN:
	        case Cobol85PreprocessorParser.NO:
	        case Cobol85PreprocessorParser.NOADATA:
	        case Cobol85PreprocessorParser.NOADV:
	        case Cobol85PreprocessorParser.NOALIAS:
	        case Cobol85PreprocessorParser.NOAWO:
	        case Cobol85PreprocessorParser.NOBLOCK0:
	        case Cobol85PreprocessorParser.NOC:
	        case Cobol85PreprocessorParser.NOCBLCARD:
	        case Cobol85PreprocessorParser.NOCICS:
	        case Cobol85PreprocessorParser.NOCMPR2:
	        case Cobol85PreprocessorParser.NOCOMPILE:
	        case Cobol85PreprocessorParser.NOCPSM:
	        case Cobol85PreprocessorParser.NOCURR:
	        case Cobol85PreprocessorParser.NOCURRENCY:
	        case Cobol85PreprocessorParser.NOD:
	        case Cobol85PreprocessorParser.NODATEPROC:
	        case Cobol85PreprocessorParser.NODBCS:
	        case Cobol85PreprocessorParser.NODE:
	        case Cobol85PreprocessorParser.NODEBUG:
	        case Cobol85PreprocessorParser.NODECK:
	        case Cobol85PreprocessorParser.NODIAGTRUNC:
	        case Cobol85PreprocessorParser.NODLL:
	        case Cobol85PreprocessorParser.NODU:
	        case Cobol85PreprocessorParser.NODUMP:
	        case Cobol85PreprocessorParser.NODP:
	        case Cobol85PreprocessorParser.NODTR:
	        case Cobol85PreprocessorParser.NODYN:
	        case Cobol85PreprocessorParser.NODYNAM:
	        case Cobol85PreprocessorParser.NOEDF:
	        case Cobol85PreprocessorParser.NOEJPD:
	        case Cobol85PreprocessorParser.NOEPILOG:
	        case Cobol85PreprocessorParser.NOEXIT:
	        case Cobol85PreprocessorParser.NOEXP:
	        case Cobol85PreprocessorParser.NOEXPORTALL:
	        case Cobol85PreprocessorParser.NOF:
	        case Cobol85PreprocessorParser.NOFASTSRT:
	        case Cobol85PreprocessorParser.NOFEPI:
	        case Cobol85PreprocessorParser.NOFLAG:
	        case Cobol85PreprocessorParser.NOFLAGMIG:
	        case Cobol85PreprocessorParser.NOFLAGSTD:
	        case Cobol85PreprocessorParser.NOFSRT:
	        case Cobol85PreprocessorParser.NOGRAPHIC:
	        case Cobol85PreprocessorParser.NOHOOK:
	        case Cobol85PreprocessorParser.NOLENGTH:
	        case Cobol85PreprocessorParser.NOLIB:
	        case Cobol85PreprocessorParser.NOLINKAGE:
	        case Cobol85PreprocessorParser.NOLIST:
	        case Cobol85PreprocessorParser.NOMAP:
	        case Cobol85PreprocessorParser.NOMD:
	        case Cobol85PreprocessorParser.NOMDECK:
	        case Cobol85PreprocessorParser.NONAME:
	        case Cobol85PreprocessorParser.NONUM:
	        case Cobol85PreprocessorParser.NONUMBER:
	        case Cobol85PreprocessorParser.NOOBJ:
	        case Cobol85PreprocessorParser.NOOBJECT:
	        case Cobol85PreprocessorParser.NOOFF:
	        case Cobol85PreprocessorParser.NOOFFSET:
	        case Cobol85PreprocessorParser.NOOPSEQUENCE:
	        case Cobol85PreprocessorParser.NOOPT:
	        case Cobol85PreprocessorParser.NOOPTIMIZE:
	        case Cobol85PreprocessorParser.NOOPTIONS:
	        case Cobol85PreprocessorParser.NOP:
	        case Cobol85PreprocessorParser.NOPFD:
	        case Cobol85PreprocessorParser.NOPROLOG:
	        case Cobol85PreprocessorParser.NORENT:
	        case Cobol85PreprocessorParser.NOS:
	        case Cobol85PreprocessorParser.NOSEP:
	        case Cobol85PreprocessorParser.NOSEPARATE:
	        case Cobol85PreprocessorParser.NOSEQ:
	        case Cobol85PreprocessorParser.NOSOURCE:
	        case Cobol85PreprocessorParser.NOSPIE:
	        case Cobol85PreprocessorParser.NOSQL:
	        case Cobol85PreprocessorParser.NOSQLC:
	        case Cobol85PreprocessorParser.NOSQLCCSID:
	        case Cobol85PreprocessorParser.NOSSR:
	        case Cobol85PreprocessorParser.NOSSRANGE:
	        case Cobol85PreprocessorParser.NOSTDTRUNC:
	        case Cobol85PreprocessorParser.NOSEQUENCE:
	        case Cobol85PreprocessorParser.NOTERM:
	        case Cobol85PreprocessorParser.NOTERMINAL:
	        case Cobol85PreprocessorParser.NOTEST:
	        case Cobol85PreprocessorParser.NOTHREAD:
	        case Cobol85PreprocessorParser.NOTRIG:
	        case Cobol85PreprocessorParser.NOVBREF:
	        case Cobol85PreprocessorParser.NOWORD:
	        case Cobol85PreprocessorParser.NOX:
	        case Cobol85PreprocessorParser.NOXREF:
	        case Cobol85PreprocessorParser.NOZWB:
	        case Cobol85PreprocessorParser.NS:
	        case Cobol85PreprocessorParser.NSEQ:
	        case Cobol85PreprocessorParser.NSYMBOL:
	        case Cobol85PreprocessorParser.NUM:
	        case Cobol85PreprocessorParser.NUMBER:
	        case Cobol85PreprocessorParser.NUMPROC:
	        case Cobol85PreprocessorParser.OBJ:
	        case Cobol85PreprocessorParser.OBJECT:
	        case Cobol85PreprocessorParser.OF:
	        case Cobol85PreprocessorParser.OFF:
	        case Cobol85PreprocessorParser.OFFSET:
	        case Cobol85PreprocessorParser.ON:
	        case Cobol85PreprocessorParser.OP:
	        case Cobol85PreprocessorParser.OPMARGINS:
	        case Cobol85PreprocessorParser.OPSEQUENCE:
	        case Cobol85PreprocessorParser.OPT:
	        case Cobol85PreprocessorParser.OPTFILE:
	        case Cobol85PreprocessorParser.OPTIMIZE:
	        case Cobol85PreprocessorParser.OPTIONS:
	        case Cobol85PreprocessorParser.OUT:
	        case Cobol85PreprocessorParser.OUTDD:
	        case Cobol85PreprocessorParser.PFD:
	        case Cobol85PreprocessorParser.PPTDBG:
	        case Cobol85PreprocessorParser.PGMN:
	        case Cobol85PreprocessorParser.PGMNAME:
	        case Cobol85PreprocessorParser.PROCESS:
	        case Cobol85PreprocessorParser.PROLOG:
	        case Cobol85PreprocessorParser.QUOTE:
	        case Cobol85PreprocessorParser.RENT:
	        case Cobol85PreprocessorParser.REPLACING:
	        case Cobol85PreprocessorParser.RMODE:
	        case Cobol85PreprocessorParser.SEP:
	        case Cobol85PreprocessorParser.SEPARATE:
	        case Cobol85PreprocessorParser.SEQ:
	        case Cobol85PreprocessorParser.SEQUENCE:
	        case Cobol85PreprocessorParser.SHORT:
	        case Cobol85PreprocessorParser.SIZE:
	        case Cobol85PreprocessorParser.SOURCE:
	        case Cobol85PreprocessorParser.SP:
	        case Cobol85PreprocessorParser.SPACE:
	        case Cobol85PreprocessorParser.SPIE:
	        case Cobol85PreprocessorParser.SQL:
	        case Cobol85PreprocessorParser.SQLC:
	        case Cobol85PreprocessorParser.SQLCCSID:
	        case Cobol85PreprocessorParser.SS:
	        case Cobol85PreprocessorParser.SSR:
	        case Cobol85PreprocessorParser.SSRANGE:
	        case Cobol85PreprocessorParser.STD:
	        case Cobol85PreprocessorParser.SYSEIB:
	        case Cobol85PreprocessorParser.SZ:
	        case Cobol85PreprocessorParser.TERM:
	        case Cobol85PreprocessorParser.TERMINAL:
	        case Cobol85PreprocessorParser.TEST:
	        case Cobol85PreprocessorParser.THREAD:
	        case Cobol85PreprocessorParser.TITLE:
	        case Cobol85PreprocessorParser.TRIG:
	        case Cobol85PreprocessorParser.TRUNC:
	        case Cobol85PreprocessorParser.UE:
	        case Cobol85PreprocessorParser.UPPER:
	        case Cobol85PreprocessorParser.VBREF:
	        case Cobol85PreprocessorParser.WD:
	        case Cobol85PreprocessorParser.XMLPARSE:
	        case Cobol85PreprocessorParser.XMLSS:
	        case Cobol85PreprocessorParser.XOPTS:
	        case Cobol85PreprocessorParser.XREF:
	        case Cobol85PreprocessorParser.YEARWINDOW:
	        case Cobol85PreprocessorParser.YW:
	        case Cobol85PreprocessorParser.ZWB:
	        case Cobol85PreprocessorParser.C_CHAR:
	        case Cobol85PreprocessorParser.D_CHAR:
	        case Cobol85PreprocessorParser.E_CHAR:
	        case Cobol85PreprocessorParser.F_CHAR:
	        case Cobol85PreprocessorParser.H_CHAR:
	        case Cobol85PreprocessorParser.I_CHAR:
	        case Cobol85PreprocessorParser.M_CHAR:
	        case Cobol85PreprocessorParser.N_CHAR:
	        case Cobol85PreprocessorParser.Q_CHAR:
	        case Cobol85PreprocessorParser.S_CHAR:
	        case Cobol85PreprocessorParser.U_CHAR:
	        case Cobol85PreprocessorParser.W_CHAR:
	        case Cobol85PreprocessorParser.X_CHAR:
	        case Cobol85PreprocessorParser.COMMACHAR:
	        case Cobol85PreprocessorParser.IDENTIFIER:
	            this.state = 597;
	            this.cobolWord();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	familyPhrase() {
	    let localctx = new FamilyPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, Cobol85PreprocessorParser.RULE_familyPhrase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 600;
	        this.match(Cobol85PreprocessorParser.ON);
	        this.state = 604;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Cobol85PreprocessorParser.NEWLINE) {
	            this.state = 601;
	            this.match(Cobol85PreprocessorParser.NEWLINE);
	            this.state = 606;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 609;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85PreprocessorParser.NONNUMERICLITERAL:
	        case Cobol85PreprocessorParser.NUMERICLITERAL:
	            this.state = 607;
	            this.literal();
	            break;
	        case Cobol85PreprocessorParser.ADATA:
	        case Cobol85PreprocessorParser.ADV:
	        case Cobol85PreprocessorParser.ALIAS:
	        case Cobol85PreprocessorParser.ANSI:
	        case Cobol85PreprocessorParser.ANY:
	        case Cobol85PreprocessorParser.APOST:
	        case Cobol85PreprocessorParser.AR:
	        case Cobol85PreprocessorParser.ARITH:
	        case Cobol85PreprocessorParser.AUTO:
	        case Cobol85PreprocessorParser.AWO:
	        case Cobol85PreprocessorParser.BIN:
	        case Cobol85PreprocessorParser.BLOCK0:
	        case Cobol85PreprocessorParser.BUF:
	        case Cobol85PreprocessorParser.BUFSIZE:
	        case Cobol85PreprocessorParser.BY:
	        case Cobol85PreprocessorParser.CBL:
	        case Cobol85PreprocessorParser.CBLCARD:
	        case Cobol85PreprocessorParser.CO:
	        case Cobol85PreprocessorParser.COBOL2:
	        case Cobol85PreprocessorParser.COBOL3:
	        case Cobol85PreprocessorParser.CODEPAGE:
	        case Cobol85PreprocessorParser.COMPAT:
	        case Cobol85PreprocessorParser.COMPILE:
	        case Cobol85PreprocessorParser.CP:
	        case Cobol85PreprocessorParser.CPP:
	        case Cobol85PreprocessorParser.CPSM:
	        case Cobol85PreprocessorParser.CS:
	        case Cobol85PreprocessorParser.CURR:
	        case Cobol85PreprocessorParser.CURRENCY:
	        case Cobol85PreprocessorParser.DATA:
	        case Cobol85PreprocessorParser.DATEPROC:
	        case Cobol85PreprocessorParser.DBCS:
	        case Cobol85PreprocessorParser.DD:
	        case Cobol85PreprocessorParser.DEBUG:
	        case Cobol85PreprocessorParser.DECK:
	        case Cobol85PreprocessorParser.DIAGTRUNC:
	        case Cobol85PreprocessorParser.DLI:
	        case Cobol85PreprocessorParser.DLL:
	        case Cobol85PreprocessorParser.DP:
	        case Cobol85PreprocessorParser.DTR:
	        case Cobol85PreprocessorParser.DU:
	        case Cobol85PreprocessorParser.DUMP:
	        case Cobol85PreprocessorParser.DYN:
	        case Cobol85PreprocessorParser.DYNAM:
	        case Cobol85PreprocessorParser.EDF:
	        case Cobol85PreprocessorParser.EJECT:
	        case Cobol85PreprocessorParser.EJPD:
	        case Cobol85PreprocessorParser.EN:
	        case Cobol85PreprocessorParser.ENGLISH:
	        case Cobol85PreprocessorParser.EPILOG:
	        case Cobol85PreprocessorParser.EXCI:
	        case Cobol85PreprocessorParser.EXIT:
	        case Cobol85PreprocessorParser.EXP:
	        case Cobol85PreprocessorParser.EXPORTALL:
	        case Cobol85PreprocessorParser.EXTEND:
	        case Cobol85PreprocessorParser.FASTSRT:
	        case Cobol85PreprocessorParser.FLAG:
	        case Cobol85PreprocessorParser.FLAGSTD:
	        case Cobol85PreprocessorParser.FSRT:
	        case Cobol85PreprocessorParser.FULL:
	        case Cobol85PreprocessorParser.GDS:
	        case Cobol85PreprocessorParser.GRAPHIC:
	        case Cobol85PreprocessorParser.HOOK:
	        case Cobol85PreprocessorParser.IN:
	        case Cobol85PreprocessorParser.INTDATE:
	        case Cobol85PreprocessorParser.JA:
	        case Cobol85PreprocessorParser.JP:
	        case Cobol85PreprocessorParser.KA:
	        case Cobol85PreprocessorParser.LANG:
	        case Cobol85PreprocessorParser.LANGUAGE:
	        case Cobol85PreprocessorParser.LC:
	        case Cobol85PreprocessorParser.LENGTH:
	        case Cobol85PreprocessorParser.LIB:
	        case Cobol85PreprocessorParser.LILIAN:
	        case Cobol85PreprocessorParser.LIN:
	        case Cobol85PreprocessorParser.LINECOUNT:
	        case Cobol85PreprocessorParser.LINKAGE:
	        case Cobol85PreprocessorParser.LIST:
	        case Cobol85PreprocessorParser.LM:
	        case Cobol85PreprocessorParser.LONGMIXED:
	        case Cobol85PreprocessorParser.LONGUPPER:
	        case Cobol85PreprocessorParser.LU:
	        case Cobol85PreprocessorParser.MAP:
	        case Cobol85PreprocessorParser.MARGINS:
	        case Cobol85PreprocessorParser.MAX:
	        case Cobol85PreprocessorParser.MD:
	        case Cobol85PreprocessorParser.MDECK:
	        case Cobol85PreprocessorParser.MIG:
	        case Cobol85PreprocessorParser.MIXED:
	        case Cobol85PreprocessorParser.NAME:
	        case Cobol85PreprocessorParser.NAT:
	        case Cobol85PreprocessorParser.NATIONAL:
	        case Cobol85PreprocessorParser.NATLANG:
	        case Cobol85PreprocessorParser.NN:
	        case Cobol85PreprocessorParser.NO:
	        case Cobol85PreprocessorParser.NOADATA:
	        case Cobol85PreprocessorParser.NOADV:
	        case Cobol85PreprocessorParser.NOALIAS:
	        case Cobol85PreprocessorParser.NOAWO:
	        case Cobol85PreprocessorParser.NOBLOCK0:
	        case Cobol85PreprocessorParser.NOC:
	        case Cobol85PreprocessorParser.NOCBLCARD:
	        case Cobol85PreprocessorParser.NOCICS:
	        case Cobol85PreprocessorParser.NOCMPR2:
	        case Cobol85PreprocessorParser.NOCOMPILE:
	        case Cobol85PreprocessorParser.NOCPSM:
	        case Cobol85PreprocessorParser.NOCURR:
	        case Cobol85PreprocessorParser.NOCURRENCY:
	        case Cobol85PreprocessorParser.NOD:
	        case Cobol85PreprocessorParser.NODATEPROC:
	        case Cobol85PreprocessorParser.NODBCS:
	        case Cobol85PreprocessorParser.NODE:
	        case Cobol85PreprocessorParser.NODEBUG:
	        case Cobol85PreprocessorParser.NODECK:
	        case Cobol85PreprocessorParser.NODIAGTRUNC:
	        case Cobol85PreprocessorParser.NODLL:
	        case Cobol85PreprocessorParser.NODU:
	        case Cobol85PreprocessorParser.NODUMP:
	        case Cobol85PreprocessorParser.NODP:
	        case Cobol85PreprocessorParser.NODTR:
	        case Cobol85PreprocessorParser.NODYN:
	        case Cobol85PreprocessorParser.NODYNAM:
	        case Cobol85PreprocessorParser.NOEDF:
	        case Cobol85PreprocessorParser.NOEJPD:
	        case Cobol85PreprocessorParser.NOEPILOG:
	        case Cobol85PreprocessorParser.NOEXIT:
	        case Cobol85PreprocessorParser.NOEXP:
	        case Cobol85PreprocessorParser.NOEXPORTALL:
	        case Cobol85PreprocessorParser.NOF:
	        case Cobol85PreprocessorParser.NOFASTSRT:
	        case Cobol85PreprocessorParser.NOFEPI:
	        case Cobol85PreprocessorParser.NOFLAG:
	        case Cobol85PreprocessorParser.NOFLAGMIG:
	        case Cobol85PreprocessorParser.NOFLAGSTD:
	        case Cobol85PreprocessorParser.NOFSRT:
	        case Cobol85PreprocessorParser.NOGRAPHIC:
	        case Cobol85PreprocessorParser.NOHOOK:
	        case Cobol85PreprocessorParser.NOLENGTH:
	        case Cobol85PreprocessorParser.NOLIB:
	        case Cobol85PreprocessorParser.NOLINKAGE:
	        case Cobol85PreprocessorParser.NOLIST:
	        case Cobol85PreprocessorParser.NOMAP:
	        case Cobol85PreprocessorParser.NOMD:
	        case Cobol85PreprocessorParser.NOMDECK:
	        case Cobol85PreprocessorParser.NONAME:
	        case Cobol85PreprocessorParser.NONUM:
	        case Cobol85PreprocessorParser.NONUMBER:
	        case Cobol85PreprocessorParser.NOOBJ:
	        case Cobol85PreprocessorParser.NOOBJECT:
	        case Cobol85PreprocessorParser.NOOFF:
	        case Cobol85PreprocessorParser.NOOFFSET:
	        case Cobol85PreprocessorParser.NOOPSEQUENCE:
	        case Cobol85PreprocessorParser.NOOPT:
	        case Cobol85PreprocessorParser.NOOPTIMIZE:
	        case Cobol85PreprocessorParser.NOOPTIONS:
	        case Cobol85PreprocessorParser.NOP:
	        case Cobol85PreprocessorParser.NOPFD:
	        case Cobol85PreprocessorParser.NOPROLOG:
	        case Cobol85PreprocessorParser.NORENT:
	        case Cobol85PreprocessorParser.NOS:
	        case Cobol85PreprocessorParser.NOSEP:
	        case Cobol85PreprocessorParser.NOSEPARATE:
	        case Cobol85PreprocessorParser.NOSEQ:
	        case Cobol85PreprocessorParser.NOSOURCE:
	        case Cobol85PreprocessorParser.NOSPIE:
	        case Cobol85PreprocessorParser.NOSQL:
	        case Cobol85PreprocessorParser.NOSQLC:
	        case Cobol85PreprocessorParser.NOSQLCCSID:
	        case Cobol85PreprocessorParser.NOSSR:
	        case Cobol85PreprocessorParser.NOSSRANGE:
	        case Cobol85PreprocessorParser.NOSTDTRUNC:
	        case Cobol85PreprocessorParser.NOSEQUENCE:
	        case Cobol85PreprocessorParser.NOTERM:
	        case Cobol85PreprocessorParser.NOTERMINAL:
	        case Cobol85PreprocessorParser.NOTEST:
	        case Cobol85PreprocessorParser.NOTHREAD:
	        case Cobol85PreprocessorParser.NOTRIG:
	        case Cobol85PreprocessorParser.NOVBREF:
	        case Cobol85PreprocessorParser.NOWORD:
	        case Cobol85PreprocessorParser.NOX:
	        case Cobol85PreprocessorParser.NOXREF:
	        case Cobol85PreprocessorParser.NOZWB:
	        case Cobol85PreprocessorParser.NS:
	        case Cobol85PreprocessorParser.NSEQ:
	        case Cobol85PreprocessorParser.NSYMBOL:
	        case Cobol85PreprocessorParser.NUM:
	        case Cobol85PreprocessorParser.NUMBER:
	        case Cobol85PreprocessorParser.NUMPROC:
	        case Cobol85PreprocessorParser.OBJ:
	        case Cobol85PreprocessorParser.OBJECT:
	        case Cobol85PreprocessorParser.OF:
	        case Cobol85PreprocessorParser.OFF:
	        case Cobol85PreprocessorParser.OFFSET:
	        case Cobol85PreprocessorParser.ON:
	        case Cobol85PreprocessorParser.OP:
	        case Cobol85PreprocessorParser.OPMARGINS:
	        case Cobol85PreprocessorParser.OPSEQUENCE:
	        case Cobol85PreprocessorParser.OPT:
	        case Cobol85PreprocessorParser.OPTFILE:
	        case Cobol85PreprocessorParser.OPTIMIZE:
	        case Cobol85PreprocessorParser.OPTIONS:
	        case Cobol85PreprocessorParser.OUT:
	        case Cobol85PreprocessorParser.OUTDD:
	        case Cobol85PreprocessorParser.PFD:
	        case Cobol85PreprocessorParser.PPTDBG:
	        case Cobol85PreprocessorParser.PGMN:
	        case Cobol85PreprocessorParser.PGMNAME:
	        case Cobol85PreprocessorParser.PROCESS:
	        case Cobol85PreprocessorParser.PROLOG:
	        case Cobol85PreprocessorParser.QUOTE:
	        case Cobol85PreprocessorParser.RENT:
	        case Cobol85PreprocessorParser.REPLACING:
	        case Cobol85PreprocessorParser.RMODE:
	        case Cobol85PreprocessorParser.SEP:
	        case Cobol85PreprocessorParser.SEPARATE:
	        case Cobol85PreprocessorParser.SEQ:
	        case Cobol85PreprocessorParser.SEQUENCE:
	        case Cobol85PreprocessorParser.SHORT:
	        case Cobol85PreprocessorParser.SIZE:
	        case Cobol85PreprocessorParser.SOURCE:
	        case Cobol85PreprocessorParser.SP:
	        case Cobol85PreprocessorParser.SPACE:
	        case Cobol85PreprocessorParser.SPIE:
	        case Cobol85PreprocessorParser.SQL:
	        case Cobol85PreprocessorParser.SQLC:
	        case Cobol85PreprocessorParser.SQLCCSID:
	        case Cobol85PreprocessorParser.SS:
	        case Cobol85PreprocessorParser.SSR:
	        case Cobol85PreprocessorParser.SSRANGE:
	        case Cobol85PreprocessorParser.STD:
	        case Cobol85PreprocessorParser.SYSEIB:
	        case Cobol85PreprocessorParser.SZ:
	        case Cobol85PreprocessorParser.TERM:
	        case Cobol85PreprocessorParser.TERMINAL:
	        case Cobol85PreprocessorParser.TEST:
	        case Cobol85PreprocessorParser.THREAD:
	        case Cobol85PreprocessorParser.TITLE:
	        case Cobol85PreprocessorParser.TRIG:
	        case Cobol85PreprocessorParser.TRUNC:
	        case Cobol85PreprocessorParser.UE:
	        case Cobol85PreprocessorParser.UPPER:
	        case Cobol85PreprocessorParser.VBREF:
	        case Cobol85PreprocessorParser.WD:
	        case Cobol85PreprocessorParser.XMLPARSE:
	        case Cobol85PreprocessorParser.XMLSS:
	        case Cobol85PreprocessorParser.XOPTS:
	        case Cobol85PreprocessorParser.XREF:
	        case Cobol85PreprocessorParser.YEARWINDOW:
	        case Cobol85PreprocessorParser.YW:
	        case Cobol85PreprocessorParser.ZWB:
	        case Cobol85PreprocessorParser.C_CHAR:
	        case Cobol85PreprocessorParser.D_CHAR:
	        case Cobol85PreprocessorParser.E_CHAR:
	        case Cobol85PreprocessorParser.F_CHAR:
	        case Cobol85PreprocessorParser.H_CHAR:
	        case Cobol85PreprocessorParser.I_CHAR:
	        case Cobol85PreprocessorParser.M_CHAR:
	        case Cobol85PreprocessorParser.N_CHAR:
	        case Cobol85PreprocessorParser.Q_CHAR:
	        case Cobol85PreprocessorParser.S_CHAR:
	        case Cobol85PreprocessorParser.U_CHAR:
	        case Cobol85PreprocessorParser.W_CHAR:
	        case Cobol85PreprocessorParser.X_CHAR:
	        case Cobol85PreprocessorParser.COMMACHAR:
	        case Cobol85PreprocessorParser.IDENTIFIER:
	            this.state = 608;
	            this.cobolWord();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replaceable() {
	    let localctx = new ReplaceableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, Cobol85PreprocessorParser.RULE_replaceable);
	    try {
	        this.state = 615;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 611;
	            this.literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 612;
	            this.cobolWord();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 613;
	            this.pseudoText();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 614;
	            this.charDataLine();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replacement() {
	    let localctx = new ReplacementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, Cobol85PreprocessorParser.RULE_replacement);
	    try {
	        this.state = 621;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 617;
	            this.literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 618;
	            this.cobolWord();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 619;
	            this.pseudoText();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 620;
	            this.charDataLine();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ejectStatement() {
	    let localctx = new EjectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, Cobol85PreprocessorParser.RULE_ejectStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 623;
	        this.match(Cobol85PreprocessorParser.EJECT);
	        this.state = 625;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        if(la_===1) {
	            this.state = 624;
	            this.match(Cobol85PreprocessorParser.DOT);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	skipStatement() {
	    let localctx = new SkipStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, Cobol85PreprocessorParser.RULE_skipStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 627;
	        _la = this._input.LA(1);
	        if(!(((((_la - 238)) & ~0x1f) == 0 && ((1 << (_la - 238)) & ((1 << (Cobol85PreprocessorParser.SKIP1 - 238)) | (1 << (Cobol85PreprocessorParser.SKIP2 - 238)) | (1 << (Cobol85PreprocessorParser.SKIP3 - 238)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 629;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	        if(la_===1) {
	            this.state = 628;
	            this.match(Cobol85PreprocessorParser.DOT);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	titleStatement() {
	    let localctx = new TitleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, Cobol85PreprocessorParser.RULE_titleStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 631;
	        this.match(Cobol85PreprocessorParser.TITLE);
	        this.state = 632;
	        this.literal();
	        this.state = 634;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	        if(la_===1) {
	            this.state = 633;
	            this.match(Cobol85PreprocessorParser.DOT);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pseudoText() {
	    let localctx = new PseudoTextContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, Cobol85PreprocessorParser.RULE_pseudoText);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 636;
	        this.match(Cobol85PreprocessorParser.DOUBLEEQUALCHAR);
	        this.state = 638;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85PreprocessorParser.ADATA) | (1 << Cobol85PreprocessorParser.ADV) | (1 << Cobol85PreprocessorParser.ALIAS) | (1 << Cobol85PreprocessorParser.ANSI) | (1 << Cobol85PreprocessorParser.ANY) | (1 << Cobol85PreprocessorParser.APOST) | (1 << Cobol85PreprocessorParser.AR) | (1 << Cobol85PreprocessorParser.ARITH) | (1 << Cobol85PreprocessorParser.AUTO) | (1 << Cobol85PreprocessorParser.AWO) | (1 << Cobol85PreprocessorParser.BIN) | (1 << Cobol85PreprocessorParser.BLOCK0) | (1 << Cobol85PreprocessorParser.BUF) | (1 << Cobol85PreprocessorParser.BUFSIZE) | (1 << Cobol85PreprocessorParser.BY) | (1 << Cobol85PreprocessorParser.CBL) | (1 << Cobol85PreprocessorParser.CBLCARD) | (1 << Cobol85PreprocessorParser.CO) | (1 << Cobol85PreprocessorParser.COBOL2) | (1 << Cobol85PreprocessorParser.COBOL3) | (1 << Cobol85PreprocessorParser.CODEPAGE) | (1 << Cobol85PreprocessorParser.COMPAT) | (1 << Cobol85PreprocessorParser.COMPILE) | (1 << Cobol85PreprocessorParser.CP) | (1 << Cobol85PreprocessorParser.CPP) | (1 << Cobol85PreprocessorParser.CPSM) | (1 << Cobol85PreprocessorParser.CS) | (1 << Cobol85PreprocessorParser.CURR) | (1 << Cobol85PreprocessorParser.CURRENCY))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Cobol85PreprocessorParser.DATA - 32)) | (1 << (Cobol85PreprocessorParser.DATEPROC - 32)) | (1 << (Cobol85PreprocessorParser.DBCS - 32)) | (1 << (Cobol85PreprocessorParser.DD - 32)) | (1 << (Cobol85PreprocessorParser.DEBUG - 32)) | (1 << (Cobol85PreprocessorParser.DECK - 32)) | (1 << (Cobol85PreprocessorParser.DIAGTRUNC - 32)) | (1 << (Cobol85PreprocessorParser.DLI - 32)) | (1 << (Cobol85PreprocessorParser.DLL - 32)) | (1 << (Cobol85PreprocessorParser.DP - 32)) | (1 << (Cobol85PreprocessorParser.DTR - 32)) | (1 << (Cobol85PreprocessorParser.DU - 32)) | (1 << (Cobol85PreprocessorParser.DUMP - 32)) | (1 << (Cobol85PreprocessorParser.DYN - 32)) | (1 << (Cobol85PreprocessorParser.DYNAM - 32)) | (1 << (Cobol85PreprocessorParser.EDF - 32)) | (1 << (Cobol85PreprocessorParser.EJECT - 32)) | (1 << (Cobol85PreprocessorParser.EJPD - 32)) | (1 << (Cobol85PreprocessorParser.EN - 32)) | (1 << (Cobol85PreprocessorParser.ENGLISH - 32)) | (1 << (Cobol85PreprocessorParser.EPILOG - 32)) | (1 << (Cobol85PreprocessorParser.EXCI - 32)) | (1 << (Cobol85PreprocessorParser.EXIT - 32)) | (1 << (Cobol85PreprocessorParser.EXP - 32)) | (1 << (Cobol85PreprocessorParser.EXPORTALL - 32)) | (1 << (Cobol85PreprocessorParser.EXTEND - 32)) | (1 << (Cobol85PreprocessorParser.FASTSRT - 32)) | (1 << (Cobol85PreprocessorParser.FLAG - 32)) | (1 << (Cobol85PreprocessorParser.FLAGSTD - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Cobol85PreprocessorParser.FSRT - 64)) | (1 << (Cobol85PreprocessorParser.FULL - 64)) | (1 << (Cobol85PreprocessorParser.GDS - 64)) | (1 << (Cobol85PreprocessorParser.GRAPHIC - 64)) | (1 << (Cobol85PreprocessorParser.HOOK - 64)) | (1 << (Cobol85PreprocessorParser.IN - 64)) | (1 << (Cobol85PreprocessorParser.INTDATE - 64)) | (1 << (Cobol85PreprocessorParser.JA - 64)) | (1 << (Cobol85PreprocessorParser.JP - 64)) | (1 << (Cobol85PreprocessorParser.KA - 64)) | (1 << (Cobol85PreprocessorParser.LANG - 64)) | (1 << (Cobol85PreprocessorParser.LANGUAGE - 64)) | (1 << (Cobol85PreprocessorParser.LC - 64)) | (1 << (Cobol85PreprocessorParser.LENGTH - 64)) | (1 << (Cobol85PreprocessorParser.LIB - 64)) | (1 << (Cobol85PreprocessorParser.LILIAN - 64)) | (1 << (Cobol85PreprocessorParser.LIN - 64)) | (1 << (Cobol85PreprocessorParser.LINECOUNT - 64)) | (1 << (Cobol85PreprocessorParser.LINKAGE - 64)) | (1 << (Cobol85PreprocessorParser.LIST - 64)) | (1 << (Cobol85PreprocessorParser.LM - 64)) | (1 << (Cobol85PreprocessorParser.LONGMIXED - 64)) | (1 << (Cobol85PreprocessorParser.LONGUPPER - 64)) | (1 << (Cobol85PreprocessorParser.LPARENCHAR - 64)) | (1 << (Cobol85PreprocessorParser.LU - 64)) | (1 << (Cobol85PreprocessorParser.MAP - 64)) | (1 << (Cobol85PreprocessorParser.MARGINS - 64)) | (1 << (Cobol85PreprocessorParser.MAX - 64)) | (1 << (Cobol85PreprocessorParser.MD - 64)) | (1 << (Cobol85PreprocessorParser.MDECK - 64)) | (1 << (Cobol85PreprocessorParser.MIG - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Cobol85PreprocessorParser.MIXED - 96)) | (1 << (Cobol85PreprocessorParser.NAME - 96)) | (1 << (Cobol85PreprocessorParser.NAT - 96)) | (1 << (Cobol85PreprocessorParser.NATIONAL - 96)) | (1 << (Cobol85PreprocessorParser.NATLANG - 96)) | (1 << (Cobol85PreprocessorParser.NN - 96)) | (1 << (Cobol85PreprocessorParser.NO - 96)) | (1 << (Cobol85PreprocessorParser.NOADATA - 96)) | (1 << (Cobol85PreprocessorParser.NOADV - 96)) | (1 << (Cobol85PreprocessorParser.NOALIAS - 96)) | (1 << (Cobol85PreprocessorParser.NOAWO - 96)) | (1 << (Cobol85PreprocessorParser.NOBLOCK0 - 96)) | (1 << (Cobol85PreprocessorParser.NOC - 96)) | (1 << (Cobol85PreprocessorParser.NOCBLCARD - 96)) | (1 << (Cobol85PreprocessorParser.NOCICS - 96)) | (1 << (Cobol85PreprocessorParser.NOCMPR2 - 96)) | (1 << (Cobol85PreprocessorParser.NOCOMPILE - 96)) | (1 << (Cobol85PreprocessorParser.NOCPSM - 96)) | (1 << (Cobol85PreprocessorParser.NOCURR - 96)) | (1 << (Cobol85PreprocessorParser.NOCURRENCY - 96)) | (1 << (Cobol85PreprocessorParser.NOD - 96)) | (1 << (Cobol85PreprocessorParser.NODATEPROC - 96)) | (1 << (Cobol85PreprocessorParser.NODBCS - 96)) | (1 << (Cobol85PreprocessorParser.NODE - 96)) | (1 << (Cobol85PreprocessorParser.NODEBUG - 96)) | (1 << (Cobol85PreprocessorParser.NODECK - 96)) | (1 << (Cobol85PreprocessorParser.NODIAGTRUNC - 96)) | (1 << (Cobol85PreprocessorParser.NODLL - 96)) | (1 << (Cobol85PreprocessorParser.NODU - 96)) | (1 << (Cobol85PreprocessorParser.NODUMP - 96)) | (1 << (Cobol85PreprocessorParser.NODP - 96)) | (1 << (Cobol85PreprocessorParser.NODTR - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (Cobol85PreprocessorParser.NODYN - 128)) | (1 << (Cobol85PreprocessorParser.NODYNAM - 128)) | (1 << (Cobol85PreprocessorParser.NOEDF - 128)) | (1 << (Cobol85PreprocessorParser.NOEJPD - 128)) | (1 << (Cobol85PreprocessorParser.NOEPILOG - 128)) | (1 << (Cobol85PreprocessorParser.NOEXIT - 128)) | (1 << (Cobol85PreprocessorParser.NOEXP - 128)) | (1 << (Cobol85PreprocessorParser.NOEXPORTALL - 128)) | (1 << (Cobol85PreprocessorParser.NOF - 128)) | (1 << (Cobol85PreprocessorParser.NOFASTSRT - 128)) | (1 << (Cobol85PreprocessorParser.NOFEPI - 128)) | (1 << (Cobol85PreprocessorParser.NOFLAG - 128)) | (1 << (Cobol85PreprocessorParser.NOFLAGMIG - 128)) | (1 << (Cobol85PreprocessorParser.NOFLAGSTD - 128)) | (1 << (Cobol85PreprocessorParser.NOFSRT - 128)) | (1 << (Cobol85PreprocessorParser.NOGRAPHIC - 128)) | (1 << (Cobol85PreprocessorParser.NOHOOK - 128)) | (1 << (Cobol85PreprocessorParser.NOLENGTH - 128)) | (1 << (Cobol85PreprocessorParser.NOLIB - 128)) | (1 << (Cobol85PreprocessorParser.NOLINKAGE - 128)) | (1 << (Cobol85PreprocessorParser.NOLIST - 128)) | (1 << (Cobol85PreprocessorParser.NOMAP - 128)) | (1 << (Cobol85PreprocessorParser.NOMD - 128)) | (1 << (Cobol85PreprocessorParser.NOMDECK - 128)) | (1 << (Cobol85PreprocessorParser.NONAME - 128)) | (1 << (Cobol85PreprocessorParser.NONUM - 128)) | (1 << (Cobol85PreprocessorParser.NONUMBER - 128)) | (1 << (Cobol85PreprocessorParser.NOOBJ - 128)) | (1 << (Cobol85PreprocessorParser.NOOBJECT - 128)) | (1 << (Cobol85PreprocessorParser.NOOFF - 128)) | (1 << (Cobol85PreprocessorParser.NOOFFSET - 128)) | (1 << (Cobol85PreprocessorParser.NOOPSEQUENCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (Cobol85PreprocessorParser.NOOPT - 160)) | (1 << (Cobol85PreprocessorParser.NOOPTIMIZE - 160)) | (1 << (Cobol85PreprocessorParser.NOOPTIONS - 160)) | (1 << (Cobol85PreprocessorParser.NOP - 160)) | (1 << (Cobol85PreprocessorParser.NOPFD - 160)) | (1 << (Cobol85PreprocessorParser.NOPROLOG - 160)) | (1 << (Cobol85PreprocessorParser.NORENT - 160)) | (1 << (Cobol85PreprocessorParser.NOS - 160)) | (1 << (Cobol85PreprocessorParser.NOSEP - 160)) | (1 << (Cobol85PreprocessorParser.NOSEPARATE - 160)) | (1 << (Cobol85PreprocessorParser.NOSEQ - 160)) | (1 << (Cobol85PreprocessorParser.NOSOURCE - 160)) | (1 << (Cobol85PreprocessorParser.NOSPIE - 160)) | (1 << (Cobol85PreprocessorParser.NOSQL - 160)) | (1 << (Cobol85PreprocessorParser.NOSQLC - 160)) | (1 << (Cobol85PreprocessorParser.NOSQLCCSID - 160)) | (1 << (Cobol85PreprocessorParser.NOSSR - 160)) | (1 << (Cobol85PreprocessorParser.NOSSRANGE - 160)) | (1 << (Cobol85PreprocessorParser.NOSTDTRUNC - 160)) | (1 << (Cobol85PreprocessorParser.NOSEQUENCE - 160)) | (1 << (Cobol85PreprocessorParser.NOTERM - 160)) | (1 << (Cobol85PreprocessorParser.NOTERMINAL - 160)) | (1 << (Cobol85PreprocessorParser.NOTEST - 160)) | (1 << (Cobol85PreprocessorParser.NOTHREAD - 160)) | (1 << (Cobol85PreprocessorParser.NOTRIG - 160)) | (1 << (Cobol85PreprocessorParser.NOVBREF - 160)) | (1 << (Cobol85PreprocessorParser.NOWORD - 160)) | (1 << (Cobol85PreprocessorParser.NOX - 160)) | (1 << (Cobol85PreprocessorParser.NOXREF - 160)) | (1 << (Cobol85PreprocessorParser.NOZWB - 160)) | (1 << (Cobol85PreprocessorParser.NS - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (Cobol85PreprocessorParser.NSEQ - 192)) | (1 << (Cobol85PreprocessorParser.NSYMBOL - 192)) | (1 << (Cobol85PreprocessorParser.NUM - 192)) | (1 << (Cobol85PreprocessorParser.NUMBER - 192)) | (1 << (Cobol85PreprocessorParser.NUMPROC - 192)) | (1 << (Cobol85PreprocessorParser.OBJ - 192)) | (1 << (Cobol85PreprocessorParser.OBJECT - 192)) | (1 << (Cobol85PreprocessorParser.OF - 192)) | (1 << (Cobol85PreprocessorParser.OFF - 192)) | (1 << (Cobol85PreprocessorParser.OFFSET - 192)) | (1 << (Cobol85PreprocessorParser.ON - 192)) | (1 << (Cobol85PreprocessorParser.OP - 192)) | (1 << (Cobol85PreprocessorParser.OPMARGINS - 192)) | (1 << (Cobol85PreprocessorParser.OPSEQUENCE - 192)) | (1 << (Cobol85PreprocessorParser.OPT - 192)) | (1 << (Cobol85PreprocessorParser.OPTFILE - 192)) | (1 << (Cobol85PreprocessorParser.OPTIMIZE - 192)) | (1 << (Cobol85PreprocessorParser.OPTIONS - 192)) | (1 << (Cobol85PreprocessorParser.OUT - 192)) | (1 << (Cobol85PreprocessorParser.OUTDD - 192)) | (1 << (Cobol85PreprocessorParser.PFD - 192)) | (1 << (Cobol85PreprocessorParser.PPTDBG - 192)) | (1 << (Cobol85PreprocessorParser.PGMN - 192)) | (1 << (Cobol85PreprocessorParser.PGMNAME - 192)) | (1 << (Cobol85PreprocessorParser.PROCESS - 192)) | (1 << (Cobol85PreprocessorParser.PROLOG - 192)) | (1 << (Cobol85PreprocessorParser.QUOTE - 192)) | (1 << (Cobol85PreprocessorParser.RENT - 192)) | (1 << (Cobol85PreprocessorParser.REPLACING - 192)) | (1 << (Cobol85PreprocessorParser.RMODE - 192)) | (1 << (Cobol85PreprocessorParser.RPARENCHAR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (Cobol85PreprocessorParser.SEP - 224)) | (1 << (Cobol85PreprocessorParser.SEPARATE - 224)) | (1 << (Cobol85PreprocessorParser.SEQ - 224)) | (1 << (Cobol85PreprocessorParser.SEQUENCE - 224)) | (1 << (Cobol85PreprocessorParser.SHORT - 224)) | (1 << (Cobol85PreprocessorParser.SIZE - 224)) | (1 << (Cobol85PreprocessorParser.SOURCE - 224)) | (1 << (Cobol85PreprocessorParser.SP - 224)) | (1 << (Cobol85PreprocessorParser.SPACE - 224)) | (1 << (Cobol85PreprocessorParser.SPIE - 224)) | (1 << (Cobol85PreprocessorParser.SQL - 224)) | (1 << (Cobol85PreprocessorParser.SQLC - 224)) | (1 << (Cobol85PreprocessorParser.SQLCCSID - 224)) | (1 << (Cobol85PreprocessorParser.SS - 224)) | (1 << (Cobol85PreprocessorParser.SSR - 224)) | (1 << (Cobol85PreprocessorParser.SSRANGE - 224)) | (1 << (Cobol85PreprocessorParser.STD - 224)) | (1 << (Cobol85PreprocessorParser.SYSEIB - 224)) | (1 << (Cobol85PreprocessorParser.SZ - 224)) | (1 << (Cobol85PreprocessorParser.TERM - 224)) | (1 << (Cobol85PreprocessorParser.TERMINAL - 224)) | (1 << (Cobol85PreprocessorParser.TEST - 224)) | (1 << (Cobol85PreprocessorParser.THREAD - 224)) | (1 << (Cobol85PreprocessorParser.TITLE - 224)) | (1 << (Cobol85PreprocessorParser.TRIG - 224)) | (1 << (Cobol85PreprocessorParser.TRUNC - 224)) | (1 << (Cobol85PreprocessorParser.UE - 224)))) !== 0) || ((((_la - 256)) & ~0x1f) == 0 && ((1 << (_la - 256)) & ((1 << (Cobol85PreprocessorParser.UPPER - 256)) | (1 << (Cobol85PreprocessorParser.VBREF - 256)) | (1 << (Cobol85PreprocessorParser.WD - 256)) | (1 << (Cobol85PreprocessorParser.XMLPARSE - 256)) | (1 << (Cobol85PreprocessorParser.XMLSS - 256)) | (1 << (Cobol85PreprocessorParser.XOPTS - 256)) | (1 << (Cobol85PreprocessorParser.XREF - 256)) | (1 << (Cobol85PreprocessorParser.YEARWINDOW - 256)) | (1 << (Cobol85PreprocessorParser.YW - 256)) | (1 << (Cobol85PreprocessorParser.ZWB - 256)) | (1 << (Cobol85PreprocessorParser.C_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.D_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.E_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.F_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.H_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.I_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.M_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.N_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.Q_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.S_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.U_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.W_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.X_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.COMMACHAR - 256)) | (1 << (Cobol85PreprocessorParser.DOT - 256)) | (1 << (Cobol85PreprocessorParser.NONNUMERICLITERAL - 256)) | (1 << (Cobol85PreprocessorParser.NUMERICLITERAL - 256)) | (1 << (Cobol85PreprocessorParser.IDENTIFIER - 256)))) !== 0) || ((((_la - 288)) & ~0x1f) == 0 && ((1 << (_la - 288)) & ((1 << (Cobol85PreprocessorParser.FILENAME - 288)) | (1 << (Cobol85PreprocessorParser.NEWLINE - 288)) | (1 << (Cobol85PreprocessorParser.TEXT - 288)))) !== 0)) {
	            this.state = 637;
	            this.charData();
	        }

	        this.state = 640;
	        this.match(Cobol85PreprocessorParser.DOUBLEEQUALCHAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charData() {
	    let localctx = new CharDataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, Cobol85PreprocessorParser.RULE_charData);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 644; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 644;
	        		this._errHandler.sync(this);
	        		switch(this._input.LA(1)) {
	        		case Cobol85PreprocessorParser.ADATA:
	        		case Cobol85PreprocessorParser.ADV:
	        		case Cobol85PreprocessorParser.ALIAS:
	        		case Cobol85PreprocessorParser.ANSI:
	        		case Cobol85PreprocessorParser.ANY:
	        		case Cobol85PreprocessorParser.APOST:
	        		case Cobol85PreprocessorParser.AR:
	        		case Cobol85PreprocessorParser.ARITH:
	        		case Cobol85PreprocessorParser.AUTO:
	        		case Cobol85PreprocessorParser.AWO:
	        		case Cobol85PreprocessorParser.BIN:
	        		case Cobol85PreprocessorParser.BLOCK0:
	        		case Cobol85PreprocessorParser.BUF:
	        		case Cobol85PreprocessorParser.BUFSIZE:
	        		case Cobol85PreprocessorParser.BY:
	        		case Cobol85PreprocessorParser.CBL:
	        		case Cobol85PreprocessorParser.CBLCARD:
	        		case Cobol85PreprocessorParser.CO:
	        		case Cobol85PreprocessorParser.COBOL2:
	        		case Cobol85PreprocessorParser.COBOL3:
	        		case Cobol85PreprocessorParser.CODEPAGE:
	        		case Cobol85PreprocessorParser.COMPAT:
	        		case Cobol85PreprocessorParser.COMPILE:
	        		case Cobol85PreprocessorParser.CP:
	        		case Cobol85PreprocessorParser.CPP:
	        		case Cobol85PreprocessorParser.CPSM:
	        		case Cobol85PreprocessorParser.CS:
	        		case Cobol85PreprocessorParser.CURR:
	        		case Cobol85PreprocessorParser.CURRENCY:
	        		case Cobol85PreprocessorParser.DATA:
	        		case Cobol85PreprocessorParser.DATEPROC:
	        		case Cobol85PreprocessorParser.DBCS:
	        		case Cobol85PreprocessorParser.DD:
	        		case Cobol85PreprocessorParser.DEBUG:
	        		case Cobol85PreprocessorParser.DECK:
	        		case Cobol85PreprocessorParser.DIAGTRUNC:
	        		case Cobol85PreprocessorParser.DLI:
	        		case Cobol85PreprocessorParser.DLL:
	        		case Cobol85PreprocessorParser.DP:
	        		case Cobol85PreprocessorParser.DTR:
	        		case Cobol85PreprocessorParser.DU:
	        		case Cobol85PreprocessorParser.DUMP:
	        		case Cobol85PreprocessorParser.DYN:
	        		case Cobol85PreprocessorParser.DYNAM:
	        		case Cobol85PreprocessorParser.EDF:
	        		case Cobol85PreprocessorParser.EJECT:
	        		case Cobol85PreprocessorParser.EJPD:
	        		case Cobol85PreprocessorParser.EN:
	        		case Cobol85PreprocessorParser.ENGLISH:
	        		case Cobol85PreprocessorParser.EPILOG:
	        		case Cobol85PreprocessorParser.EXCI:
	        		case Cobol85PreprocessorParser.EXIT:
	        		case Cobol85PreprocessorParser.EXP:
	        		case Cobol85PreprocessorParser.EXPORTALL:
	        		case Cobol85PreprocessorParser.EXTEND:
	        		case Cobol85PreprocessorParser.FASTSRT:
	        		case Cobol85PreprocessorParser.FLAG:
	        		case Cobol85PreprocessorParser.FLAGSTD:
	        		case Cobol85PreprocessorParser.FSRT:
	        		case Cobol85PreprocessorParser.FULL:
	        		case Cobol85PreprocessorParser.GDS:
	        		case Cobol85PreprocessorParser.GRAPHIC:
	        		case Cobol85PreprocessorParser.HOOK:
	        		case Cobol85PreprocessorParser.IN:
	        		case Cobol85PreprocessorParser.INTDATE:
	        		case Cobol85PreprocessorParser.JA:
	        		case Cobol85PreprocessorParser.JP:
	        		case Cobol85PreprocessorParser.KA:
	        		case Cobol85PreprocessorParser.LANG:
	        		case Cobol85PreprocessorParser.LANGUAGE:
	        		case Cobol85PreprocessorParser.LC:
	        		case Cobol85PreprocessorParser.LENGTH:
	        		case Cobol85PreprocessorParser.LIB:
	        		case Cobol85PreprocessorParser.LILIAN:
	        		case Cobol85PreprocessorParser.LIN:
	        		case Cobol85PreprocessorParser.LINECOUNT:
	        		case Cobol85PreprocessorParser.LINKAGE:
	        		case Cobol85PreprocessorParser.LIST:
	        		case Cobol85PreprocessorParser.LM:
	        		case Cobol85PreprocessorParser.LONGMIXED:
	        		case Cobol85PreprocessorParser.LONGUPPER:
	        		case Cobol85PreprocessorParser.LPARENCHAR:
	        		case Cobol85PreprocessorParser.LU:
	        		case Cobol85PreprocessorParser.MAP:
	        		case Cobol85PreprocessorParser.MARGINS:
	        		case Cobol85PreprocessorParser.MAX:
	        		case Cobol85PreprocessorParser.MD:
	        		case Cobol85PreprocessorParser.MDECK:
	        		case Cobol85PreprocessorParser.MIG:
	        		case Cobol85PreprocessorParser.MIXED:
	        		case Cobol85PreprocessorParser.NAME:
	        		case Cobol85PreprocessorParser.NAT:
	        		case Cobol85PreprocessorParser.NATIONAL:
	        		case Cobol85PreprocessorParser.NATLANG:
	        		case Cobol85PreprocessorParser.NN:
	        		case Cobol85PreprocessorParser.NO:
	        		case Cobol85PreprocessorParser.NOADATA:
	        		case Cobol85PreprocessorParser.NOADV:
	        		case Cobol85PreprocessorParser.NOALIAS:
	        		case Cobol85PreprocessorParser.NOAWO:
	        		case Cobol85PreprocessorParser.NOBLOCK0:
	        		case Cobol85PreprocessorParser.NOC:
	        		case Cobol85PreprocessorParser.NOCBLCARD:
	        		case Cobol85PreprocessorParser.NOCICS:
	        		case Cobol85PreprocessorParser.NOCMPR2:
	        		case Cobol85PreprocessorParser.NOCOMPILE:
	        		case Cobol85PreprocessorParser.NOCPSM:
	        		case Cobol85PreprocessorParser.NOCURR:
	        		case Cobol85PreprocessorParser.NOCURRENCY:
	        		case Cobol85PreprocessorParser.NOD:
	        		case Cobol85PreprocessorParser.NODATEPROC:
	        		case Cobol85PreprocessorParser.NODBCS:
	        		case Cobol85PreprocessorParser.NODE:
	        		case Cobol85PreprocessorParser.NODEBUG:
	        		case Cobol85PreprocessorParser.NODECK:
	        		case Cobol85PreprocessorParser.NODIAGTRUNC:
	        		case Cobol85PreprocessorParser.NODLL:
	        		case Cobol85PreprocessorParser.NODU:
	        		case Cobol85PreprocessorParser.NODUMP:
	        		case Cobol85PreprocessorParser.NODP:
	        		case Cobol85PreprocessorParser.NODTR:
	        		case Cobol85PreprocessorParser.NODYN:
	        		case Cobol85PreprocessorParser.NODYNAM:
	        		case Cobol85PreprocessorParser.NOEDF:
	        		case Cobol85PreprocessorParser.NOEJPD:
	        		case Cobol85PreprocessorParser.NOEPILOG:
	        		case Cobol85PreprocessorParser.NOEXIT:
	        		case Cobol85PreprocessorParser.NOEXP:
	        		case Cobol85PreprocessorParser.NOEXPORTALL:
	        		case Cobol85PreprocessorParser.NOF:
	        		case Cobol85PreprocessorParser.NOFASTSRT:
	        		case Cobol85PreprocessorParser.NOFEPI:
	        		case Cobol85PreprocessorParser.NOFLAG:
	        		case Cobol85PreprocessorParser.NOFLAGMIG:
	        		case Cobol85PreprocessorParser.NOFLAGSTD:
	        		case Cobol85PreprocessorParser.NOFSRT:
	        		case Cobol85PreprocessorParser.NOGRAPHIC:
	        		case Cobol85PreprocessorParser.NOHOOK:
	        		case Cobol85PreprocessorParser.NOLENGTH:
	        		case Cobol85PreprocessorParser.NOLIB:
	        		case Cobol85PreprocessorParser.NOLINKAGE:
	        		case Cobol85PreprocessorParser.NOLIST:
	        		case Cobol85PreprocessorParser.NOMAP:
	        		case Cobol85PreprocessorParser.NOMD:
	        		case Cobol85PreprocessorParser.NOMDECK:
	        		case Cobol85PreprocessorParser.NONAME:
	        		case Cobol85PreprocessorParser.NONUM:
	        		case Cobol85PreprocessorParser.NONUMBER:
	        		case Cobol85PreprocessorParser.NOOBJ:
	        		case Cobol85PreprocessorParser.NOOBJECT:
	        		case Cobol85PreprocessorParser.NOOFF:
	        		case Cobol85PreprocessorParser.NOOFFSET:
	        		case Cobol85PreprocessorParser.NOOPSEQUENCE:
	        		case Cobol85PreprocessorParser.NOOPT:
	        		case Cobol85PreprocessorParser.NOOPTIMIZE:
	        		case Cobol85PreprocessorParser.NOOPTIONS:
	        		case Cobol85PreprocessorParser.NOP:
	        		case Cobol85PreprocessorParser.NOPFD:
	        		case Cobol85PreprocessorParser.NOPROLOG:
	        		case Cobol85PreprocessorParser.NORENT:
	        		case Cobol85PreprocessorParser.NOS:
	        		case Cobol85PreprocessorParser.NOSEP:
	        		case Cobol85PreprocessorParser.NOSEPARATE:
	        		case Cobol85PreprocessorParser.NOSEQ:
	        		case Cobol85PreprocessorParser.NOSOURCE:
	        		case Cobol85PreprocessorParser.NOSPIE:
	        		case Cobol85PreprocessorParser.NOSQL:
	        		case Cobol85PreprocessorParser.NOSQLC:
	        		case Cobol85PreprocessorParser.NOSQLCCSID:
	        		case Cobol85PreprocessorParser.NOSSR:
	        		case Cobol85PreprocessorParser.NOSSRANGE:
	        		case Cobol85PreprocessorParser.NOSTDTRUNC:
	        		case Cobol85PreprocessorParser.NOSEQUENCE:
	        		case Cobol85PreprocessorParser.NOTERM:
	        		case Cobol85PreprocessorParser.NOTERMINAL:
	        		case Cobol85PreprocessorParser.NOTEST:
	        		case Cobol85PreprocessorParser.NOTHREAD:
	        		case Cobol85PreprocessorParser.NOTRIG:
	        		case Cobol85PreprocessorParser.NOVBREF:
	        		case Cobol85PreprocessorParser.NOWORD:
	        		case Cobol85PreprocessorParser.NOX:
	        		case Cobol85PreprocessorParser.NOXREF:
	        		case Cobol85PreprocessorParser.NOZWB:
	        		case Cobol85PreprocessorParser.NS:
	        		case Cobol85PreprocessorParser.NSEQ:
	        		case Cobol85PreprocessorParser.NSYMBOL:
	        		case Cobol85PreprocessorParser.NUM:
	        		case Cobol85PreprocessorParser.NUMBER:
	        		case Cobol85PreprocessorParser.NUMPROC:
	        		case Cobol85PreprocessorParser.OBJ:
	        		case Cobol85PreprocessorParser.OBJECT:
	        		case Cobol85PreprocessorParser.OF:
	        		case Cobol85PreprocessorParser.OFF:
	        		case Cobol85PreprocessorParser.OFFSET:
	        		case Cobol85PreprocessorParser.ON:
	        		case Cobol85PreprocessorParser.OP:
	        		case Cobol85PreprocessorParser.OPMARGINS:
	        		case Cobol85PreprocessorParser.OPSEQUENCE:
	        		case Cobol85PreprocessorParser.OPT:
	        		case Cobol85PreprocessorParser.OPTFILE:
	        		case Cobol85PreprocessorParser.OPTIMIZE:
	        		case Cobol85PreprocessorParser.OPTIONS:
	        		case Cobol85PreprocessorParser.OUT:
	        		case Cobol85PreprocessorParser.OUTDD:
	        		case Cobol85PreprocessorParser.PFD:
	        		case Cobol85PreprocessorParser.PPTDBG:
	        		case Cobol85PreprocessorParser.PGMN:
	        		case Cobol85PreprocessorParser.PGMNAME:
	        		case Cobol85PreprocessorParser.PROCESS:
	        		case Cobol85PreprocessorParser.PROLOG:
	        		case Cobol85PreprocessorParser.QUOTE:
	        		case Cobol85PreprocessorParser.RENT:
	        		case Cobol85PreprocessorParser.REPLACING:
	        		case Cobol85PreprocessorParser.RMODE:
	        		case Cobol85PreprocessorParser.RPARENCHAR:
	        		case Cobol85PreprocessorParser.SEP:
	        		case Cobol85PreprocessorParser.SEPARATE:
	        		case Cobol85PreprocessorParser.SEQ:
	        		case Cobol85PreprocessorParser.SEQUENCE:
	        		case Cobol85PreprocessorParser.SHORT:
	        		case Cobol85PreprocessorParser.SIZE:
	        		case Cobol85PreprocessorParser.SOURCE:
	        		case Cobol85PreprocessorParser.SP:
	        		case Cobol85PreprocessorParser.SPACE:
	        		case Cobol85PreprocessorParser.SPIE:
	        		case Cobol85PreprocessorParser.SQL:
	        		case Cobol85PreprocessorParser.SQLC:
	        		case Cobol85PreprocessorParser.SQLCCSID:
	        		case Cobol85PreprocessorParser.SS:
	        		case Cobol85PreprocessorParser.SSR:
	        		case Cobol85PreprocessorParser.SSRANGE:
	        		case Cobol85PreprocessorParser.STD:
	        		case Cobol85PreprocessorParser.SYSEIB:
	        		case Cobol85PreprocessorParser.SZ:
	        		case Cobol85PreprocessorParser.TERM:
	        		case Cobol85PreprocessorParser.TERMINAL:
	        		case Cobol85PreprocessorParser.TEST:
	        		case Cobol85PreprocessorParser.THREAD:
	        		case Cobol85PreprocessorParser.TITLE:
	        		case Cobol85PreprocessorParser.TRIG:
	        		case Cobol85PreprocessorParser.TRUNC:
	        		case Cobol85PreprocessorParser.UE:
	        		case Cobol85PreprocessorParser.UPPER:
	        		case Cobol85PreprocessorParser.VBREF:
	        		case Cobol85PreprocessorParser.WD:
	        		case Cobol85PreprocessorParser.XMLPARSE:
	        		case Cobol85PreprocessorParser.XMLSS:
	        		case Cobol85PreprocessorParser.XOPTS:
	        		case Cobol85PreprocessorParser.XREF:
	        		case Cobol85PreprocessorParser.YEARWINDOW:
	        		case Cobol85PreprocessorParser.YW:
	        		case Cobol85PreprocessorParser.ZWB:
	        		case Cobol85PreprocessorParser.C_CHAR:
	        		case Cobol85PreprocessorParser.D_CHAR:
	        		case Cobol85PreprocessorParser.E_CHAR:
	        		case Cobol85PreprocessorParser.F_CHAR:
	        		case Cobol85PreprocessorParser.H_CHAR:
	        		case Cobol85PreprocessorParser.I_CHAR:
	        		case Cobol85PreprocessorParser.M_CHAR:
	        		case Cobol85PreprocessorParser.N_CHAR:
	        		case Cobol85PreprocessorParser.Q_CHAR:
	        		case Cobol85PreprocessorParser.S_CHAR:
	        		case Cobol85PreprocessorParser.U_CHAR:
	        		case Cobol85PreprocessorParser.W_CHAR:
	        		case Cobol85PreprocessorParser.X_CHAR:
	        		case Cobol85PreprocessorParser.COMMACHAR:
	        		case Cobol85PreprocessorParser.DOT:
	        		case Cobol85PreprocessorParser.NONNUMERICLITERAL:
	        		case Cobol85PreprocessorParser.NUMERICLITERAL:
	        		case Cobol85PreprocessorParser.IDENTIFIER:
	        		case Cobol85PreprocessorParser.FILENAME:
	        		case Cobol85PreprocessorParser.TEXT:
	        		    this.state = 642;
	        		    this.charDataLine();
	        		    break;
	        		case Cobol85PreprocessorParser.NEWLINE:
	        		    this.state = 643;
	        		    this.match(Cobol85PreprocessorParser.NEWLINE);
	        		    break;
	        		default:
	        		    throw new antlr4.error.NoViableAltException(this);
	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 646; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,68, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charDataSql() {
	    let localctx = new CharDataSqlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, Cobol85PreprocessorParser.RULE_charDataSql);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 652; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 652;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case Cobol85PreprocessorParser.ADATA:
	            case Cobol85PreprocessorParser.ADV:
	            case Cobol85PreprocessorParser.ALIAS:
	            case Cobol85PreprocessorParser.ANSI:
	            case Cobol85PreprocessorParser.ANY:
	            case Cobol85PreprocessorParser.APOST:
	            case Cobol85PreprocessorParser.AR:
	            case Cobol85PreprocessorParser.ARITH:
	            case Cobol85PreprocessorParser.AUTO:
	            case Cobol85PreprocessorParser.AWO:
	            case Cobol85PreprocessorParser.BIN:
	            case Cobol85PreprocessorParser.BLOCK0:
	            case Cobol85PreprocessorParser.BUF:
	            case Cobol85PreprocessorParser.BUFSIZE:
	            case Cobol85PreprocessorParser.BY:
	            case Cobol85PreprocessorParser.CBL:
	            case Cobol85PreprocessorParser.CBLCARD:
	            case Cobol85PreprocessorParser.CO:
	            case Cobol85PreprocessorParser.COBOL2:
	            case Cobol85PreprocessorParser.COBOL3:
	            case Cobol85PreprocessorParser.CODEPAGE:
	            case Cobol85PreprocessorParser.COMPAT:
	            case Cobol85PreprocessorParser.COMPILE:
	            case Cobol85PreprocessorParser.CP:
	            case Cobol85PreprocessorParser.CPP:
	            case Cobol85PreprocessorParser.CPSM:
	            case Cobol85PreprocessorParser.CS:
	            case Cobol85PreprocessorParser.CURR:
	            case Cobol85PreprocessorParser.CURRENCY:
	            case Cobol85PreprocessorParser.DATA:
	            case Cobol85PreprocessorParser.DATEPROC:
	            case Cobol85PreprocessorParser.DBCS:
	            case Cobol85PreprocessorParser.DD:
	            case Cobol85PreprocessorParser.DEBUG:
	            case Cobol85PreprocessorParser.DECK:
	            case Cobol85PreprocessorParser.DIAGTRUNC:
	            case Cobol85PreprocessorParser.DLI:
	            case Cobol85PreprocessorParser.DLL:
	            case Cobol85PreprocessorParser.DP:
	            case Cobol85PreprocessorParser.DTR:
	            case Cobol85PreprocessorParser.DU:
	            case Cobol85PreprocessorParser.DUMP:
	            case Cobol85PreprocessorParser.DYN:
	            case Cobol85PreprocessorParser.DYNAM:
	            case Cobol85PreprocessorParser.EDF:
	            case Cobol85PreprocessorParser.EJECT:
	            case Cobol85PreprocessorParser.EJPD:
	            case Cobol85PreprocessorParser.EN:
	            case Cobol85PreprocessorParser.ENGLISH:
	            case Cobol85PreprocessorParser.EPILOG:
	            case Cobol85PreprocessorParser.EXCI:
	            case Cobol85PreprocessorParser.EXIT:
	            case Cobol85PreprocessorParser.EXP:
	            case Cobol85PreprocessorParser.EXPORTALL:
	            case Cobol85PreprocessorParser.EXTEND:
	            case Cobol85PreprocessorParser.FASTSRT:
	            case Cobol85PreprocessorParser.FLAG:
	            case Cobol85PreprocessorParser.FLAGSTD:
	            case Cobol85PreprocessorParser.FSRT:
	            case Cobol85PreprocessorParser.FULL:
	            case Cobol85PreprocessorParser.GDS:
	            case Cobol85PreprocessorParser.GRAPHIC:
	            case Cobol85PreprocessorParser.HOOK:
	            case Cobol85PreprocessorParser.IN:
	            case Cobol85PreprocessorParser.INTDATE:
	            case Cobol85PreprocessorParser.JA:
	            case Cobol85PreprocessorParser.JP:
	            case Cobol85PreprocessorParser.KA:
	            case Cobol85PreprocessorParser.LANG:
	            case Cobol85PreprocessorParser.LANGUAGE:
	            case Cobol85PreprocessorParser.LC:
	            case Cobol85PreprocessorParser.LENGTH:
	            case Cobol85PreprocessorParser.LIB:
	            case Cobol85PreprocessorParser.LILIAN:
	            case Cobol85PreprocessorParser.LIN:
	            case Cobol85PreprocessorParser.LINECOUNT:
	            case Cobol85PreprocessorParser.LINKAGE:
	            case Cobol85PreprocessorParser.LIST:
	            case Cobol85PreprocessorParser.LM:
	            case Cobol85PreprocessorParser.LONGMIXED:
	            case Cobol85PreprocessorParser.LONGUPPER:
	            case Cobol85PreprocessorParser.LPARENCHAR:
	            case Cobol85PreprocessorParser.LU:
	            case Cobol85PreprocessorParser.MAP:
	            case Cobol85PreprocessorParser.MARGINS:
	            case Cobol85PreprocessorParser.MAX:
	            case Cobol85PreprocessorParser.MD:
	            case Cobol85PreprocessorParser.MDECK:
	            case Cobol85PreprocessorParser.MIG:
	            case Cobol85PreprocessorParser.MIXED:
	            case Cobol85PreprocessorParser.NAME:
	            case Cobol85PreprocessorParser.NAT:
	            case Cobol85PreprocessorParser.NATIONAL:
	            case Cobol85PreprocessorParser.NATLANG:
	            case Cobol85PreprocessorParser.NN:
	            case Cobol85PreprocessorParser.NO:
	            case Cobol85PreprocessorParser.NOADATA:
	            case Cobol85PreprocessorParser.NOADV:
	            case Cobol85PreprocessorParser.NOALIAS:
	            case Cobol85PreprocessorParser.NOAWO:
	            case Cobol85PreprocessorParser.NOBLOCK0:
	            case Cobol85PreprocessorParser.NOC:
	            case Cobol85PreprocessorParser.NOCBLCARD:
	            case Cobol85PreprocessorParser.NOCICS:
	            case Cobol85PreprocessorParser.NOCMPR2:
	            case Cobol85PreprocessorParser.NOCOMPILE:
	            case Cobol85PreprocessorParser.NOCPSM:
	            case Cobol85PreprocessorParser.NOCURR:
	            case Cobol85PreprocessorParser.NOCURRENCY:
	            case Cobol85PreprocessorParser.NOD:
	            case Cobol85PreprocessorParser.NODATEPROC:
	            case Cobol85PreprocessorParser.NODBCS:
	            case Cobol85PreprocessorParser.NODE:
	            case Cobol85PreprocessorParser.NODEBUG:
	            case Cobol85PreprocessorParser.NODECK:
	            case Cobol85PreprocessorParser.NODIAGTRUNC:
	            case Cobol85PreprocessorParser.NODLL:
	            case Cobol85PreprocessorParser.NODU:
	            case Cobol85PreprocessorParser.NODUMP:
	            case Cobol85PreprocessorParser.NODP:
	            case Cobol85PreprocessorParser.NODTR:
	            case Cobol85PreprocessorParser.NODYN:
	            case Cobol85PreprocessorParser.NODYNAM:
	            case Cobol85PreprocessorParser.NOEDF:
	            case Cobol85PreprocessorParser.NOEJPD:
	            case Cobol85PreprocessorParser.NOEPILOG:
	            case Cobol85PreprocessorParser.NOEXIT:
	            case Cobol85PreprocessorParser.NOEXP:
	            case Cobol85PreprocessorParser.NOEXPORTALL:
	            case Cobol85PreprocessorParser.NOF:
	            case Cobol85PreprocessorParser.NOFASTSRT:
	            case Cobol85PreprocessorParser.NOFEPI:
	            case Cobol85PreprocessorParser.NOFLAG:
	            case Cobol85PreprocessorParser.NOFLAGMIG:
	            case Cobol85PreprocessorParser.NOFLAGSTD:
	            case Cobol85PreprocessorParser.NOFSRT:
	            case Cobol85PreprocessorParser.NOGRAPHIC:
	            case Cobol85PreprocessorParser.NOHOOK:
	            case Cobol85PreprocessorParser.NOLENGTH:
	            case Cobol85PreprocessorParser.NOLIB:
	            case Cobol85PreprocessorParser.NOLINKAGE:
	            case Cobol85PreprocessorParser.NOLIST:
	            case Cobol85PreprocessorParser.NOMAP:
	            case Cobol85PreprocessorParser.NOMD:
	            case Cobol85PreprocessorParser.NOMDECK:
	            case Cobol85PreprocessorParser.NONAME:
	            case Cobol85PreprocessorParser.NONUM:
	            case Cobol85PreprocessorParser.NONUMBER:
	            case Cobol85PreprocessorParser.NOOBJ:
	            case Cobol85PreprocessorParser.NOOBJECT:
	            case Cobol85PreprocessorParser.NOOFF:
	            case Cobol85PreprocessorParser.NOOFFSET:
	            case Cobol85PreprocessorParser.NOOPSEQUENCE:
	            case Cobol85PreprocessorParser.NOOPT:
	            case Cobol85PreprocessorParser.NOOPTIMIZE:
	            case Cobol85PreprocessorParser.NOOPTIONS:
	            case Cobol85PreprocessorParser.NOP:
	            case Cobol85PreprocessorParser.NOPFD:
	            case Cobol85PreprocessorParser.NOPROLOG:
	            case Cobol85PreprocessorParser.NORENT:
	            case Cobol85PreprocessorParser.NOS:
	            case Cobol85PreprocessorParser.NOSEP:
	            case Cobol85PreprocessorParser.NOSEPARATE:
	            case Cobol85PreprocessorParser.NOSEQ:
	            case Cobol85PreprocessorParser.NOSOURCE:
	            case Cobol85PreprocessorParser.NOSPIE:
	            case Cobol85PreprocessorParser.NOSQL:
	            case Cobol85PreprocessorParser.NOSQLC:
	            case Cobol85PreprocessorParser.NOSQLCCSID:
	            case Cobol85PreprocessorParser.NOSSR:
	            case Cobol85PreprocessorParser.NOSSRANGE:
	            case Cobol85PreprocessorParser.NOSTDTRUNC:
	            case Cobol85PreprocessorParser.NOSEQUENCE:
	            case Cobol85PreprocessorParser.NOTERM:
	            case Cobol85PreprocessorParser.NOTERMINAL:
	            case Cobol85PreprocessorParser.NOTEST:
	            case Cobol85PreprocessorParser.NOTHREAD:
	            case Cobol85PreprocessorParser.NOTRIG:
	            case Cobol85PreprocessorParser.NOVBREF:
	            case Cobol85PreprocessorParser.NOWORD:
	            case Cobol85PreprocessorParser.NOX:
	            case Cobol85PreprocessorParser.NOXREF:
	            case Cobol85PreprocessorParser.NOZWB:
	            case Cobol85PreprocessorParser.NS:
	            case Cobol85PreprocessorParser.NSEQ:
	            case Cobol85PreprocessorParser.NSYMBOL:
	            case Cobol85PreprocessorParser.NUM:
	            case Cobol85PreprocessorParser.NUMBER:
	            case Cobol85PreprocessorParser.NUMPROC:
	            case Cobol85PreprocessorParser.OBJ:
	            case Cobol85PreprocessorParser.OBJECT:
	            case Cobol85PreprocessorParser.OF:
	            case Cobol85PreprocessorParser.OFF:
	            case Cobol85PreprocessorParser.OFFSET:
	            case Cobol85PreprocessorParser.ON:
	            case Cobol85PreprocessorParser.OP:
	            case Cobol85PreprocessorParser.OPMARGINS:
	            case Cobol85PreprocessorParser.OPSEQUENCE:
	            case Cobol85PreprocessorParser.OPT:
	            case Cobol85PreprocessorParser.OPTFILE:
	            case Cobol85PreprocessorParser.OPTIMIZE:
	            case Cobol85PreprocessorParser.OPTIONS:
	            case Cobol85PreprocessorParser.OUT:
	            case Cobol85PreprocessorParser.OUTDD:
	            case Cobol85PreprocessorParser.PFD:
	            case Cobol85PreprocessorParser.PPTDBG:
	            case Cobol85PreprocessorParser.PGMN:
	            case Cobol85PreprocessorParser.PGMNAME:
	            case Cobol85PreprocessorParser.PROCESS:
	            case Cobol85PreprocessorParser.PROLOG:
	            case Cobol85PreprocessorParser.QUOTE:
	            case Cobol85PreprocessorParser.RENT:
	            case Cobol85PreprocessorParser.REPLACING:
	            case Cobol85PreprocessorParser.RMODE:
	            case Cobol85PreprocessorParser.RPARENCHAR:
	            case Cobol85PreprocessorParser.SEP:
	            case Cobol85PreprocessorParser.SEPARATE:
	            case Cobol85PreprocessorParser.SEQ:
	            case Cobol85PreprocessorParser.SEQUENCE:
	            case Cobol85PreprocessorParser.SHORT:
	            case Cobol85PreprocessorParser.SIZE:
	            case Cobol85PreprocessorParser.SOURCE:
	            case Cobol85PreprocessorParser.SP:
	            case Cobol85PreprocessorParser.SPACE:
	            case Cobol85PreprocessorParser.SPIE:
	            case Cobol85PreprocessorParser.SQL:
	            case Cobol85PreprocessorParser.SQLC:
	            case Cobol85PreprocessorParser.SQLCCSID:
	            case Cobol85PreprocessorParser.SS:
	            case Cobol85PreprocessorParser.SSR:
	            case Cobol85PreprocessorParser.SSRANGE:
	            case Cobol85PreprocessorParser.STD:
	            case Cobol85PreprocessorParser.SYSEIB:
	            case Cobol85PreprocessorParser.SZ:
	            case Cobol85PreprocessorParser.TERM:
	            case Cobol85PreprocessorParser.TERMINAL:
	            case Cobol85PreprocessorParser.TEST:
	            case Cobol85PreprocessorParser.THREAD:
	            case Cobol85PreprocessorParser.TITLE:
	            case Cobol85PreprocessorParser.TRIG:
	            case Cobol85PreprocessorParser.TRUNC:
	            case Cobol85PreprocessorParser.UE:
	            case Cobol85PreprocessorParser.UPPER:
	            case Cobol85PreprocessorParser.VBREF:
	            case Cobol85PreprocessorParser.WD:
	            case Cobol85PreprocessorParser.XMLPARSE:
	            case Cobol85PreprocessorParser.XMLSS:
	            case Cobol85PreprocessorParser.XOPTS:
	            case Cobol85PreprocessorParser.XREF:
	            case Cobol85PreprocessorParser.YEARWINDOW:
	            case Cobol85PreprocessorParser.YW:
	            case Cobol85PreprocessorParser.ZWB:
	            case Cobol85PreprocessorParser.C_CHAR:
	            case Cobol85PreprocessorParser.D_CHAR:
	            case Cobol85PreprocessorParser.E_CHAR:
	            case Cobol85PreprocessorParser.F_CHAR:
	            case Cobol85PreprocessorParser.H_CHAR:
	            case Cobol85PreprocessorParser.I_CHAR:
	            case Cobol85PreprocessorParser.M_CHAR:
	            case Cobol85PreprocessorParser.N_CHAR:
	            case Cobol85PreprocessorParser.Q_CHAR:
	            case Cobol85PreprocessorParser.S_CHAR:
	            case Cobol85PreprocessorParser.U_CHAR:
	            case Cobol85PreprocessorParser.W_CHAR:
	            case Cobol85PreprocessorParser.X_CHAR:
	            case Cobol85PreprocessorParser.COMMACHAR:
	            case Cobol85PreprocessorParser.DOT:
	            case Cobol85PreprocessorParser.NONNUMERICLITERAL:
	            case Cobol85PreprocessorParser.NUMERICLITERAL:
	            case Cobol85PreprocessorParser.IDENTIFIER:
	            case Cobol85PreprocessorParser.FILENAME:
	            case Cobol85PreprocessorParser.TEXT:
	                this.state = 648;
	                this.charDataLine();
	                break;
	            case Cobol85PreprocessorParser.COPY:
	                this.state = 649;
	                this.match(Cobol85PreprocessorParser.COPY);
	                break;
	            case Cobol85PreprocessorParser.REPLACE:
	                this.state = 650;
	                this.match(Cobol85PreprocessorParser.REPLACE);
	                break;
	            case Cobol85PreprocessorParser.NEWLINE:
	                this.state = 651;
	                this.match(Cobol85PreprocessorParser.NEWLINE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 654; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85PreprocessorParser.ADATA) | (1 << Cobol85PreprocessorParser.ADV) | (1 << Cobol85PreprocessorParser.ALIAS) | (1 << Cobol85PreprocessorParser.ANSI) | (1 << Cobol85PreprocessorParser.ANY) | (1 << Cobol85PreprocessorParser.APOST) | (1 << Cobol85PreprocessorParser.AR) | (1 << Cobol85PreprocessorParser.ARITH) | (1 << Cobol85PreprocessorParser.AUTO) | (1 << Cobol85PreprocessorParser.AWO) | (1 << Cobol85PreprocessorParser.BIN) | (1 << Cobol85PreprocessorParser.BLOCK0) | (1 << Cobol85PreprocessorParser.BUF) | (1 << Cobol85PreprocessorParser.BUFSIZE) | (1 << Cobol85PreprocessorParser.BY) | (1 << Cobol85PreprocessorParser.CBL) | (1 << Cobol85PreprocessorParser.CBLCARD) | (1 << Cobol85PreprocessorParser.CO) | (1 << Cobol85PreprocessorParser.COBOL2) | (1 << Cobol85PreprocessorParser.COBOL3) | (1 << Cobol85PreprocessorParser.CODEPAGE) | (1 << Cobol85PreprocessorParser.COMPAT) | (1 << Cobol85PreprocessorParser.COMPILE) | (1 << Cobol85PreprocessorParser.COPY) | (1 << Cobol85PreprocessorParser.CP) | (1 << Cobol85PreprocessorParser.CPP) | (1 << Cobol85PreprocessorParser.CPSM) | (1 << Cobol85PreprocessorParser.CS) | (1 << Cobol85PreprocessorParser.CURR) | (1 << Cobol85PreprocessorParser.CURRENCY))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Cobol85PreprocessorParser.DATA - 32)) | (1 << (Cobol85PreprocessorParser.DATEPROC - 32)) | (1 << (Cobol85PreprocessorParser.DBCS - 32)) | (1 << (Cobol85PreprocessorParser.DD - 32)) | (1 << (Cobol85PreprocessorParser.DEBUG - 32)) | (1 << (Cobol85PreprocessorParser.DECK - 32)) | (1 << (Cobol85PreprocessorParser.DIAGTRUNC - 32)) | (1 << (Cobol85PreprocessorParser.DLI - 32)) | (1 << (Cobol85PreprocessorParser.DLL - 32)) | (1 << (Cobol85PreprocessorParser.DP - 32)) | (1 << (Cobol85PreprocessorParser.DTR - 32)) | (1 << (Cobol85PreprocessorParser.DU - 32)) | (1 << (Cobol85PreprocessorParser.DUMP - 32)) | (1 << (Cobol85PreprocessorParser.DYN - 32)) | (1 << (Cobol85PreprocessorParser.DYNAM - 32)) | (1 << (Cobol85PreprocessorParser.EDF - 32)) | (1 << (Cobol85PreprocessorParser.EJECT - 32)) | (1 << (Cobol85PreprocessorParser.EJPD - 32)) | (1 << (Cobol85PreprocessorParser.EN - 32)) | (1 << (Cobol85PreprocessorParser.ENGLISH - 32)) | (1 << (Cobol85PreprocessorParser.EPILOG - 32)) | (1 << (Cobol85PreprocessorParser.EXCI - 32)) | (1 << (Cobol85PreprocessorParser.EXIT - 32)) | (1 << (Cobol85PreprocessorParser.EXP - 32)) | (1 << (Cobol85PreprocessorParser.EXPORTALL - 32)) | (1 << (Cobol85PreprocessorParser.EXTEND - 32)) | (1 << (Cobol85PreprocessorParser.FASTSRT - 32)) | (1 << (Cobol85PreprocessorParser.FLAG - 32)) | (1 << (Cobol85PreprocessorParser.FLAGSTD - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Cobol85PreprocessorParser.FSRT - 64)) | (1 << (Cobol85PreprocessorParser.FULL - 64)) | (1 << (Cobol85PreprocessorParser.GDS - 64)) | (1 << (Cobol85PreprocessorParser.GRAPHIC - 64)) | (1 << (Cobol85PreprocessorParser.HOOK - 64)) | (1 << (Cobol85PreprocessorParser.IN - 64)) | (1 << (Cobol85PreprocessorParser.INTDATE - 64)) | (1 << (Cobol85PreprocessorParser.JA - 64)) | (1 << (Cobol85PreprocessorParser.JP - 64)) | (1 << (Cobol85PreprocessorParser.KA - 64)) | (1 << (Cobol85PreprocessorParser.LANG - 64)) | (1 << (Cobol85PreprocessorParser.LANGUAGE - 64)) | (1 << (Cobol85PreprocessorParser.LC - 64)) | (1 << (Cobol85PreprocessorParser.LENGTH - 64)) | (1 << (Cobol85PreprocessorParser.LIB - 64)) | (1 << (Cobol85PreprocessorParser.LILIAN - 64)) | (1 << (Cobol85PreprocessorParser.LIN - 64)) | (1 << (Cobol85PreprocessorParser.LINECOUNT - 64)) | (1 << (Cobol85PreprocessorParser.LINKAGE - 64)) | (1 << (Cobol85PreprocessorParser.LIST - 64)) | (1 << (Cobol85PreprocessorParser.LM - 64)) | (1 << (Cobol85PreprocessorParser.LONGMIXED - 64)) | (1 << (Cobol85PreprocessorParser.LONGUPPER - 64)) | (1 << (Cobol85PreprocessorParser.LPARENCHAR - 64)) | (1 << (Cobol85PreprocessorParser.LU - 64)) | (1 << (Cobol85PreprocessorParser.MAP - 64)) | (1 << (Cobol85PreprocessorParser.MARGINS - 64)) | (1 << (Cobol85PreprocessorParser.MAX - 64)) | (1 << (Cobol85PreprocessorParser.MD - 64)) | (1 << (Cobol85PreprocessorParser.MDECK - 64)) | (1 << (Cobol85PreprocessorParser.MIG - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Cobol85PreprocessorParser.MIXED - 96)) | (1 << (Cobol85PreprocessorParser.NAME - 96)) | (1 << (Cobol85PreprocessorParser.NAT - 96)) | (1 << (Cobol85PreprocessorParser.NATIONAL - 96)) | (1 << (Cobol85PreprocessorParser.NATLANG - 96)) | (1 << (Cobol85PreprocessorParser.NN - 96)) | (1 << (Cobol85PreprocessorParser.NO - 96)) | (1 << (Cobol85PreprocessorParser.NOADATA - 96)) | (1 << (Cobol85PreprocessorParser.NOADV - 96)) | (1 << (Cobol85PreprocessorParser.NOALIAS - 96)) | (1 << (Cobol85PreprocessorParser.NOAWO - 96)) | (1 << (Cobol85PreprocessorParser.NOBLOCK0 - 96)) | (1 << (Cobol85PreprocessorParser.NOC - 96)) | (1 << (Cobol85PreprocessorParser.NOCBLCARD - 96)) | (1 << (Cobol85PreprocessorParser.NOCICS - 96)) | (1 << (Cobol85PreprocessorParser.NOCMPR2 - 96)) | (1 << (Cobol85PreprocessorParser.NOCOMPILE - 96)) | (1 << (Cobol85PreprocessorParser.NOCPSM - 96)) | (1 << (Cobol85PreprocessorParser.NOCURR - 96)) | (1 << (Cobol85PreprocessorParser.NOCURRENCY - 96)) | (1 << (Cobol85PreprocessorParser.NOD - 96)) | (1 << (Cobol85PreprocessorParser.NODATEPROC - 96)) | (1 << (Cobol85PreprocessorParser.NODBCS - 96)) | (1 << (Cobol85PreprocessorParser.NODE - 96)) | (1 << (Cobol85PreprocessorParser.NODEBUG - 96)) | (1 << (Cobol85PreprocessorParser.NODECK - 96)) | (1 << (Cobol85PreprocessorParser.NODIAGTRUNC - 96)) | (1 << (Cobol85PreprocessorParser.NODLL - 96)) | (1 << (Cobol85PreprocessorParser.NODU - 96)) | (1 << (Cobol85PreprocessorParser.NODUMP - 96)) | (1 << (Cobol85PreprocessorParser.NODP - 96)) | (1 << (Cobol85PreprocessorParser.NODTR - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (Cobol85PreprocessorParser.NODYN - 128)) | (1 << (Cobol85PreprocessorParser.NODYNAM - 128)) | (1 << (Cobol85PreprocessorParser.NOEDF - 128)) | (1 << (Cobol85PreprocessorParser.NOEJPD - 128)) | (1 << (Cobol85PreprocessorParser.NOEPILOG - 128)) | (1 << (Cobol85PreprocessorParser.NOEXIT - 128)) | (1 << (Cobol85PreprocessorParser.NOEXP - 128)) | (1 << (Cobol85PreprocessorParser.NOEXPORTALL - 128)) | (1 << (Cobol85PreprocessorParser.NOF - 128)) | (1 << (Cobol85PreprocessorParser.NOFASTSRT - 128)) | (1 << (Cobol85PreprocessorParser.NOFEPI - 128)) | (1 << (Cobol85PreprocessorParser.NOFLAG - 128)) | (1 << (Cobol85PreprocessorParser.NOFLAGMIG - 128)) | (1 << (Cobol85PreprocessorParser.NOFLAGSTD - 128)) | (1 << (Cobol85PreprocessorParser.NOFSRT - 128)) | (1 << (Cobol85PreprocessorParser.NOGRAPHIC - 128)) | (1 << (Cobol85PreprocessorParser.NOHOOK - 128)) | (1 << (Cobol85PreprocessorParser.NOLENGTH - 128)) | (1 << (Cobol85PreprocessorParser.NOLIB - 128)) | (1 << (Cobol85PreprocessorParser.NOLINKAGE - 128)) | (1 << (Cobol85PreprocessorParser.NOLIST - 128)) | (1 << (Cobol85PreprocessorParser.NOMAP - 128)) | (1 << (Cobol85PreprocessorParser.NOMD - 128)) | (1 << (Cobol85PreprocessorParser.NOMDECK - 128)) | (1 << (Cobol85PreprocessorParser.NONAME - 128)) | (1 << (Cobol85PreprocessorParser.NONUM - 128)) | (1 << (Cobol85PreprocessorParser.NONUMBER - 128)) | (1 << (Cobol85PreprocessorParser.NOOBJ - 128)) | (1 << (Cobol85PreprocessorParser.NOOBJECT - 128)) | (1 << (Cobol85PreprocessorParser.NOOFF - 128)) | (1 << (Cobol85PreprocessorParser.NOOFFSET - 128)) | (1 << (Cobol85PreprocessorParser.NOOPSEQUENCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (Cobol85PreprocessorParser.NOOPT - 160)) | (1 << (Cobol85PreprocessorParser.NOOPTIMIZE - 160)) | (1 << (Cobol85PreprocessorParser.NOOPTIONS - 160)) | (1 << (Cobol85PreprocessorParser.NOP - 160)) | (1 << (Cobol85PreprocessorParser.NOPFD - 160)) | (1 << (Cobol85PreprocessorParser.NOPROLOG - 160)) | (1 << (Cobol85PreprocessorParser.NORENT - 160)) | (1 << (Cobol85PreprocessorParser.NOS - 160)) | (1 << (Cobol85PreprocessorParser.NOSEP - 160)) | (1 << (Cobol85PreprocessorParser.NOSEPARATE - 160)) | (1 << (Cobol85PreprocessorParser.NOSEQ - 160)) | (1 << (Cobol85PreprocessorParser.NOSOURCE - 160)) | (1 << (Cobol85PreprocessorParser.NOSPIE - 160)) | (1 << (Cobol85PreprocessorParser.NOSQL - 160)) | (1 << (Cobol85PreprocessorParser.NOSQLC - 160)) | (1 << (Cobol85PreprocessorParser.NOSQLCCSID - 160)) | (1 << (Cobol85PreprocessorParser.NOSSR - 160)) | (1 << (Cobol85PreprocessorParser.NOSSRANGE - 160)) | (1 << (Cobol85PreprocessorParser.NOSTDTRUNC - 160)) | (1 << (Cobol85PreprocessorParser.NOSEQUENCE - 160)) | (1 << (Cobol85PreprocessorParser.NOTERM - 160)) | (1 << (Cobol85PreprocessorParser.NOTERMINAL - 160)) | (1 << (Cobol85PreprocessorParser.NOTEST - 160)) | (1 << (Cobol85PreprocessorParser.NOTHREAD - 160)) | (1 << (Cobol85PreprocessorParser.NOTRIG - 160)) | (1 << (Cobol85PreprocessorParser.NOVBREF - 160)) | (1 << (Cobol85PreprocessorParser.NOWORD - 160)) | (1 << (Cobol85PreprocessorParser.NOX - 160)) | (1 << (Cobol85PreprocessorParser.NOXREF - 160)) | (1 << (Cobol85PreprocessorParser.NOZWB - 160)) | (1 << (Cobol85PreprocessorParser.NS - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (Cobol85PreprocessorParser.NSEQ - 192)) | (1 << (Cobol85PreprocessorParser.NSYMBOL - 192)) | (1 << (Cobol85PreprocessorParser.NUM - 192)) | (1 << (Cobol85PreprocessorParser.NUMBER - 192)) | (1 << (Cobol85PreprocessorParser.NUMPROC - 192)) | (1 << (Cobol85PreprocessorParser.OBJ - 192)) | (1 << (Cobol85PreprocessorParser.OBJECT - 192)) | (1 << (Cobol85PreprocessorParser.OF - 192)) | (1 << (Cobol85PreprocessorParser.OFF - 192)) | (1 << (Cobol85PreprocessorParser.OFFSET - 192)) | (1 << (Cobol85PreprocessorParser.ON - 192)) | (1 << (Cobol85PreprocessorParser.OP - 192)) | (1 << (Cobol85PreprocessorParser.OPMARGINS - 192)) | (1 << (Cobol85PreprocessorParser.OPSEQUENCE - 192)) | (1 << (Cobol85PreprocessorParser.OPT - 192)) | (1 << (Cobol85PreprocessorParser.OPTFILE - 192)) | (1 << (Cobol85PreprocessorParser.OPTIMIZE - 192)) | (1 << (Cobol85PreprocessorParser.OPTIONS - 192)) | (1 << (Cobol85PreprocessorParser.OUT - 192)) | (1 << (Cobol85PreprocessorParser.OUTDD - 192)) | (1 << (Cobol85PreprocessorParser.PFD - 192)) | (1 << (Cobol85PreprocessorParser.PPTDBG - 192)) | (1 << (Cobol85PreprocessorParser.PGMN - 192)) | (1 << (Cobol85PreprocessorParser.PGMNAME - 192)) | (1 << (Cobol85PreprocessorParser.PROCESS - 192)) | (1 << (Cobol85PreprocessorParser.PROLOG - 192)) | (1 << (Cobol85PreprocessorParser.QUOTE - 192)) | (1 << (Cobol85PreprocessorParser.RENT - 192)) | (1 << (Cobol85PreprocessorParser.REPLACE - 192)) | (1 << (Cobol85PreprocessorParser.REPLACING - 192)) | (1 << (Cobol85PreprocessorParser.RMODE - 192)) | (1 << (Cobol85PreprocessorParser.RPARENCHAR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (Cobol85PreprocessorParser.SEP - 224)) | (1 << (Cobol85PreprocessorParser.SEPARATE - 224)) | (1 << (Cobol85PreprocessorParser.SEQ - 224)) | (1 << (Cobol85PreprocessorParser.SEQUENCE - 224)) | (1 << (Cobol85PreprocessorParser.SHORT - 224)) | (1 << (Cobol85PreprocessorParser.SIZE - 224)) | (1 << (Cobol85PreprocessorParser.SOURCE - 224)) | (1 << (Cobol85PreprocessorParser.SP - 224)) | (1 << (Cobol85PreprocessorParser.SPACE - 224)) | (1 << (Cobol85PreprocessorParser.SPIE - 224)) | (1 << (Cobol85PreprocessorParser.SQL - 224)) | (1 << (Cobol85PreprocessorParser.SQLC - 224)) | (1 << (Cobol85PreprocessorParser.SQLCCSID - 224)) | (1 << (Cobol85PreprocessorParser.SS - 224)) | (1 << (Cobol85PreprocessorParser.SSR - 224)) | (1 << (Cobol85PreprocessorParser.SSRANGE - 224)) | (1 << (Cobol85PreprocessorParser.STD - 224)) | (1 << (Cobol85PreprocessorParser.SYSEIB - 224)) | (1 << (Cobol85PreprocessorParser.SZ - 224)) | (1 << (Cobol85PreprocessorParser.TERM - 224)) | (1 << (Cobol85PreprocessorParser.TERMINAL - 224)) | (1 << (Cobol85PreprocessorParser.TEST - 224)) | (1 << (Cobol85PreprocessorParser.THREAD - 224)) | (1 << (Cobol85PreprocessorParser.TITLE - 224)) | (1 << (Cobol85PreprocessorParser.TRIG - 224)) | (1 << (Cobol85PreprocessorParser.TRUNC - 224)) | (1 << (Cobol85PreprocessorParser.UE - 224)))) !== 0) || ((((_la - 256)) & ~0x1f) == 0 && ((1 << (_la - 256)) & ((1 << (Cobol85PreprocessorParser.UPPER - 256)) | (1 << (Cobol85PreprocessorParser.VBREF - 256)) | (1 << (Cobol85PreprocessorParser.WD - 256)) | (1 << (Cobol85PreprocessorParser.XMLPARSE - 256)) | (1 << (Cobol85PreprocessorParser.XMLSS - 256)) | (1 << (Cobol85PreprocessorParser.XOPTS - 256)) | (1 << (Cobol85PreprocessorParser.XREF - 256)) | (1 << (Cobol85PreprocessorParser.YEARWINDOW - 256)) | (1 << (Cobol85PreprocessorParser.YW - 256)) | (1 << (Cobol85PreprocessorParser.ZWB - 256)) | (1 << (Cobol85PreprocessorParser.C_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.D_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.E_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.F_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.H_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.I_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.M_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.N_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.Q_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.S_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.U_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.W_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.X_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.COMMACHAR - 256)) | (1 << (Cobol85PreprocessorParser.DOT - 256)) | (1 << (Cobol85PreprocessorParser.NONNUMERICLITERAL - 256)) | (1 << (Cobol85PreprocessorParser.NUMERICLITERAL - 256)) | (1 << (Cobol85PreprocessorParser.IDENTIFIER - 256)))) !== 0) || ((((_la - 288)) & ~0x1f) == 0 && ((1 << (_la - 288)) & ((1 << (Cobol85PreprocessorParser.FILENAME - 288)) | (1 << (Cobol85PreprocessorParser.NEWLINE - 288)) | (1 << (Cobol85PreprocessorParser.TEXT - 288)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charDataLine() {
	    let localctx = new CharDataLineContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, Cobol85PreprocessorParser.RULE_charDataLine);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 663; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 663;
	        		this._errHandler.sync(this);
	        		switch(this._input.LA(1)) {
	        		case Cobol85PreprocessorParser.ADATA:
	        		case Cobol85PreprocessorParser.ADV:
	        		case Cobol85PreprocessorParser.ALIAS:
	        		case Cobol85PreprocessorParser.ANSI:
	        		case Cobol85PreprocessorParser.ANY:
	        		case Cobol85PreprocessorParser.APOST:
	        		case Cobol85PreprocessorParser.AR:
	        		case Cobol85PreprocessorParser.ARITH:
	        		case Cobol85PreprocessorParser.AUTO:
	        		case Cobol85PreprocessorParser.AWO:
	        		case Cobol85PreprocessorParser.BIN:
	        		case Cobol85PreprocessorParser.BLOCK0:
	        		case Cobol85PreprocessorParser.BUF:
	        		case Cobol85PreprocessorParser.BUFSIZE:
	        		case Cobol85PreprocessorParser.BY:
	        		case Cobol85PreprocessorParser.CBL:
	        		case Cobol85PreprocessorParser.CBLCARD:
	        		case Cobol85PreprocessorParser.CO:
	        		case Cobol85PreprocessorParser.COBOL2:
	        		case Cobol85PreprocessorParser.COBOL3:
	        		case Cobol85PreprocessorParser.CODEPAGE:
	        		case Cobol85PreprocessorParser.COMPAT:
	        		case Cobol85PreprocessorParser.COMPILE:
	        		case Cobol85PreprocessorParser.CP:
	        		case Cobol85PreprocessorParser.CPP:
	        		case Cobol85PreprocessorParser.CPSM:
	        		case Cobol85PreprocessorParser.CS:
	        		case Cobol85PreprocessorParser.CURR:
	        		case Cobol85PreprocessorParser.CURRENCY:
	        		case Cobol85PreprocessorParser.DATA:
	        		case Cobol85PreprocessorParser.DATEPROC:
	        		case Cobol85PreprocessorParser.DBCS:
	        		case Cobol85PreprocessorParser.DD:
	        		case Cobol85PreprocessorParser.DEBUG:
	        		case Cobol85PreprocessorParser.DECK:
	        		case Cobol85PreprocessorParser.DIAGTRUNC:
	        		case Cobol85PreprocessorParser.DLI:
	        		case Cobol85PreprocessorParser.DLL:
	        		case Cobol85PreprocessorParser.DP:
	        		case Cobol85PreprocessorParser.DTR:
	        		case Cobol85PreprocessorParser.DU:
	        		case Cobol85PreprocessorParser.DUMP:
	        		case Cobol85PreprocessorParser.DYN:
	        		case Cobol85PreprocessorParser.DYNAM:
	        		case Cobol85PreprocessorParser.EDF:
	        		case Cobol85PreprocessorParser.EJECT:
	        		case Cobol85PreprocessorParser.EJPD:
	        		case Cobol85PreprocessorParser.EN:
	        		case Cobol85PreprocessorParser.ENGLISH:
	        		case Cobol85PreprocessorParser.EPILOG:
	        		case Cobol85PreprocessorParser.EXCI:
	        		case Cobol85PreprocessorParser.EXIT:
	        		case Cobol85PreprocessorParser.EXP:
	        		case Cobol85PreprocessorParser.EXPORTALL:
	        		case Cobol85PreprocessorParser.EXTEND:
	        		case Cobol85PreprocessorParser.FASTSRT:
	        		case Cobol85PreprocessorParser.FLAG:
	        		case Cobol85PreprocessorParser.FLAGSTD:
	        		case Cobol85PreprocessorParser.FSRT:
	        		case Cobol85PreprocessorParser.FULL:
	        		case Cobol85PreprocessorParser.GDS:
	        		case Cobol85PreprocessorParser.GRAPHIC:
	        		case Cobol85PreprocessorParser.HOOK:
	        		case Cobol85PreprocessorParser.IN:
	        		case Cobol85PreprocessorParser.INTDATE:
	        		case Cobol85PreprocessorParser.JA:
	        		case Cobol85PreprocessorParser.JP:
	        		case Cobol85PreprocessorParser.KA:
	        		case Cobol85PreprocessorParser.LANG:
	        		case Cobol85PreprocessorParser.LANGUAGE:
	        		case Cobol85PreprocessorParser.LC:
	        		case Cobol85PreprocessorParser.LENGTH:
	        		case Cobol85PreprocessorParser.LIB:
	        		case Cobol85PreprocessorParser.LILIAN:
	        		case Cobol85PreprocessorParser.LIN:
	        		case Cobol85PreprocessorParser.LINECOUNT:
	        		case Cobol85PreprocessorParser.LINKAGE:
	        		case Cobol85PreprocessorParser.LIST:
	        		case Cobol85PreprocessorParser.LM:
	        		case Cobol85PreprocessorParser.LONGMIXED:
	        		case Cobol85PreprocessorParser.LONGUPPER:
	        		case Cobol85PreprocessorParser.LU:
	        		case Cobol85PreprocessorParser.MAP:
	        		case Cobol85PreprocessorParser.MARGINS:
	        		case Cobol85PreprocessorParser.MAX:
	        		case Cobol85PreprocessorParser.MD:
	        		case Cobol85PreprocessorParser.MDECK:
	        		case Cobol85PreprocessorParser.MIG:
	        		case Cobol85PreprocessorParser.MIXED:
	        		case Cobol85PreprocessorParser.NAME:
	        		case Cobol85PreprocessorParser.NAT:
	        		case Cobol85PreprocessorParser.NATIONAL:
	        		case Cobol85PreprocessorParser.NATLANG:
	        		case Cobol85PreprocessorParser.NN:
	        		case Cobol85PreprocessorParser.NO:
	        		case Cobol85PreprocessorParser.NOADATA:
	        		case Cobol85PreprocessorParser.NOADV:
	        		case Cobol85PreprocessorParser.NOALIAS:
	        		case Cobol85PreprocessorParser.NOAWO:
	        		case Cobol85PreprocessorParser.NOBLOCK0:
	        		case Cobol85PreprocessorParser.NOC:
	        		case Cobol85PreprocessorParser.NOCBLCARD:
	        		case Cobol85PreprocessorParser.NOCICS:
	        		case Cobol85PreprocessorParser.NOCMPR2:
	        		case Cobol85PreprocessorParser.NOCOMPILE:
	        		case Cobol85PreprocessorParser.NOCPSM:
	        		case Cobol85PreprocessorParser.NOCURR:
	        		case Cobol85PreprocessorParser.NOCURRENCY:
	        		case Cobol85PreprocessorParser.NOD:
	        		case Cobol85PreprocessorParser.NODATEPROC:
	        		case Cobol85PreprocessorParser.NODBCS:
	        		case Cobol85PreprocessorParser.NODE:
	        		case Cobol85PreprocessorParser.NODEBUG:
	        		case Cobol85PreprocessorParser.NODECK:
	        		case Cobol85PreprocessorParser.NODIAGTRUNC:
	        		case Cobol85PreprocessorParser.NODLL:
	        		case Cobol85PreprocessorParser.NODU:
	        		case Cobol85PreprocessorParser.NODUMP:
	        		case Cobol85PreprocessorParser.NODP:
	        		case Cobol85PreprocessorParser.NODTR:
	        		case Cobol85PreprocessorParser.NODYN:
	        		case Cobol85PreprocessorParser.NODYNAM:
	        		case Cobol85PreprocessorParser.NOEDF:
	        		case Cobol85PreprocessorParser.NOEJPD:
	        		case Cobol85PreprocessorParser.NOEPILOG:
	        		case Cobol85PreprocessorParser.NOEXIT:
	        		case Cobol85PreprocessorParser.NOEXP:
	        		case Cobol85PreprocessorParser.NOEXPORTALL:
	        		case Cobol85PreprocessorParser.NOF:
	        		case Cobol85PreprocessorParser.NOFASTSRT:
	        		case Cobol85PreprocessorParser.NOFEPI:
	        		case Cobol85PreprocessorParser.NOFLAG:
	        		case Cobol85PreprocessorParser.NOFLAGMIG:
	        		case Cobol85PreprocessorParser.NOFLAGSTD:
	        		case Cobol85PreprocessorParser.NOFSRT:
	        		case Cobol85PreprocessorParser.NOGRAPHIC:
	        		case Cobol85PreprocessorParser.NOHOOK:
	        		case Cobol85PreprocessorParser.NOLENGTH:
	        		case Cobol85PreprocessorParser.NOLIB:
	        		case Cobol85PreprocessorParser.NOLINKAGE:
	        		case Cobol85PreprocessorParser.NOLIST:
	        		case Cobol85PreprocessorParser.NOMAP:
	        		case Cobol85PreprocessorParser.NOMD:
	        		case Cobol85PreprocessorParser.NOMDECK:
	        		case Cobol85PreprocessorParser.NONAME:
	        		case Cobol85PreprocessorParser.NONUM:
	        		case Cobol85PreprocessorParser.NONUMBER:
	        		case Cobol85PreprocessorParser.NOOBJ:
	        		case Cobol85PreprocessorParser.NOOBJECT:
	        		case Cobol85PreprocessorParser.NOOFF:
	        		case Cobol85PreprocessorParser.NOOFFSET:
	        		case Cobol85PreprocessorParser.NOOPSEQUENCE:
	        		case Cobol85PreprocessorParser.NOOPT:
	        		case Cobol85PreprocessorParser.NOOPTIMIZE:
	        		case Cobol85PreprocessorParser.NOOPTIONS:
	        		case Cobol85PreprocessorParser.NOP:
	        		case Cobol85PreprocessorParser.NOPFD:
	        		case Cobol85PreprocessorParser.NOPROLOG:
	        		case Cobol85PreprocessorParser.NORENT:
	        		case Cobol85PreprocessorParser.NOS:
	        		case Cobol85PreprocessorParser.NOSEP:
	        		case Cobol85PreprocessorParser.NOSEPARATE:
	        		case Cobol85PreprocessorParser.NOSEQ:
	        		case Cobol85PreprocessorParser.NOSOURCE:
	        		case Cobol85PreprocessorParser.NOSPIE:
	        		case Cobol85PreprocessorParser.NOSQL:
	        		case Cobol85PreprocessorParser.NOSQLC:
	        		case Cobol85PreprocessorParser.NOSQLCCSID:
	        		case Cobol85PreprocessorParser.NOSSR:
	        		case Cobol85PreprocessorParser.NOSSRANGE:
	        		case Cobol85PreprocessorParser.NOSTDTRUNC:
	        		case Cobol85PreprocessorParser.NOSEQUENCE:
	        		case Cobol85PreprocessorParser.NOTERM:
	        		case Cobol85PreprocessorParser.NOTERMINAL:
	        		case Cobol85PreprocessorParser.NOTEST:
	        		case Cobol85PreprocessorParser.NOTHREAD:
	        		case Cobol85PreprocessorParser.NOTRIG:
	        		case Cobol85PreprocessorParser.NOVBREF:
	        		case Cobol85PreprocessorParser.NOWORD:
	        		case Cobol85PreprocessorParser.NOX:
	        		case Cobol85PreprocessorParser.NOXREF:
	        		case Cobol85PreprocessorParser.NOZWB:
	        		case Cobol85PreprocessorParser.NS:
	        		case Cobol85PreprocessorParser.NSEQ:
	        		case Cobol85PreprocessorParser.NSYMBOL:
	        		case Cobol85PreprocessorParser.NUM:
	        		case Cobol85PreprocessorParser.NUMBER:
	        		case Cobol85PreprocessorParser.NUMPROC:
	        		case Cobol85PreprocessorParser.OBJ:
	        		case Cobol85PreprocessorParser.OBJECT:
	        		case Cobol85PreprocessorParser.OF:
	        		case Cobol85PreprocessorParser.OFF:
	        		case Cobol85PreprocessorParser.OFFSET:
	        		case Cobol85PreprocessorParser.ON:
	        		case Cobol85PreprocessorParser.OP:
	        		case Cobol85PreprocessorParser.OPMARGINS:
	        		case Cobol85PreprocessorParser.OPSEQUENCE:
	        		case Cobol85PreprocessorParser.OPT:
	        		case Cobol85PreprocessorParser.OPTFILE:
	        		case Cobol85PreprocessorParser.OPTIMIZE:
	        		case Cobol85PreprocessorParser.OPTIONS:
	        		case Cobol85PreprocessorParser.OUT:
	        		case Cobol85PreprocessorParser.OUTDD:
	        		case Cobol85PreprocessorParser.PFD:
	        		case Cobol85PreprocessorParser.PPTDBG:
	        		case Cobol85PreprocessorParser.PGMN:
	        		case Cobol85PreprocessorParser.PGMNAME:
	        		case Cobol85PreprocessorParser.PROCESS:
	        		case Cobol85PreprocessorParser.PROLOG:
	        		case Cobol85PreprocessorParser.QUOTE:
	        		case Cobol85PreprocessorParser.RENT:
	        		case Cobol85PreprocessorParser.REPLACING:
	        		case Cobol85PreprocessorParser.RMODE:
	        		case Cobol85PreprocessorParser.SEP:
	        		case Cobol85PreprocessorParser.SEPARATE:
	        		case Cobol85PreprocessorParser.SEQ:
	        		case Cobol85PreprocessorParser.SEQUENCE:
	        		case Cobol85PreprocessorParser.SHORT:
	        		case Cobol85PreprocessorParser.SIZE:
	        		case Cobol85PreprocessorParser.SOURCE:
	        		case Cobol85PreprocessorParser.SP:
	        		case Cobol85PreprocessorParser.SPACE:
	        		case Cobol85PreprocessorParser.SPIE:
	        		case Cobol85PreprocessorParser.SQL:
	        		case Cobol85PreprocessorParser.SQLC:
	        		case Cobol85PreprocessorParser.SQLCCSID:
	        		case Cobol85PreprocessorParser.SS:
	        		case Cobol85PreprocessorParser.SSR:
	        		case Cobol85PreprocessorParser.SSRANGE:
	        		case Cobol85PreprocessorParser.STD:
	        		case Cobol85PreprocessorParser.SYSEIB:
	        		case Cobol85PreprocessorParser.SZ:
	        		case Cobol85PreprocessorParser.TERM:
	        		case Cobol85PreprocessorParser.TERMINAL:
	        		case Cobol85PreprocessorParser.TEST:
	        		case Cobol85PreprocessorParser.THREAD:
	        		case Cobol85PreprocessorParser.TITLE:
	        		case Cobol85PreprocessorParser.TRIG:
	        		case Cobol85PreprocessorParser.TRUNC:
	        		case Cobol85PreprocessorParser.UE:
	        		case Cobol85PreprocessorParser.UPPER:
	        		case Cobol85PreprocessorParser.VBREF:
	        		case Cobol85PreprocessorParser.WD:
	        		case Cobol85PreprocessorParser.XMLPARSE:
	        		case Cobol85PreprocessorParser.XMLSS:
	        		case Cobol85PreprocessorParser.XOPTS:
	        		case Cobol85PreprocessorParser.XREF:
	        		case Cobol85PreprocessorParser.YEARWINDOW:
	        		case Cobol85PreprocessorParser.YW:
	        		case Cobol85PreprocessorParser.ZWB:
	        		case Cobol85PreprocessorParser.C_CHAR:
	        		case Cobol85PreprocessorParser.D_CHAR:
	        		case Cobol85PreprocessorParser.E_CHAR:
	        		case Cobol85PreprocessorParser.F_CHAR:
	        		case Cobol85PreprocessorParser.H_CHAR:
	        		case Cobol85PreprocessorParser.I_CHAR:
	        		case Cobol85PreprocessorParser.M_CHAR:
	        		case Cobol85PreprocessorParser.N_CHAR:
	        		case Cobol85PreprocessorParser.Q_CHAR:
	        		case Cobol85PreprocessorParser.S_CHAR:
	        		case Cobol85PreprocessorParser.U_CHAR:
	        		case Cobol85PreprocessorParser.W_CHAR:
	        		case Cobol85PreprocessorParser.X_CHAR:
	        		case Cobol85PreprocessorParser.COMMACHAR:
	        		case Cobol85PreprocessorParser.IDENTIFIER:
	        		    this.state = 656;
	        		    this.cobolWord();
	        		    break;
	        		case Cobol85PreprocessorParser.NONNUMERICLITERAL:
	        		case Cobol85PreprocessorParser.NUMERICLITERAL:
	        		    this.state = 657;
	        		    this.literal();
	        		    break;
	        		case Cobol85PreprocessorParser.FILENAME:
	        		    this.state = 658;
	        		    this.filename();
	        		    break;
	        		case Cobol85PreprocessorParser.TEXT:
	        		    this.state = 659;
	        		    this.match(Cobol85PreprocessorParser.TEXT);
	        		    break;
	        		case Cobol85PreprocessorParser.DOT:
	        		    this.state = 660;
	        		    this.match(Cobol85PreprocessorParser.DOT);
	        		    break;
	        		case Cobol85PreprocessorParser.LPARENCHAR:
	        		    this.state = 661;
	        		    this.match(Cobol85PreprocessorParser.LPARENCHAR);
	        		    break;
	        		case Cobol85PreprocessorParser.RPARENCHAR:
	        		    this.state = 662;
	        		    this.match(Cobol85PreprocessorParser.RPARENCHAR);
	        		    break;
	        		default:
	        		    throw new antlr4.error.NoViableAltException(this);
	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 665; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,72, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cobolWord() {
	    let localctx = new CobolWordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, Cobol85PreprocessorParser.RULE_cobolWord);
	    try {
	        this.state = 669;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Cobol85PreprocessorParser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 667;
	            this.match(Cobol85PreprocessorParser.IDENTIFIER);
	            break;
	        case Cobol85PreprocessorParser.ADATA:
	        case Cobol85PreprocessorParser.ADV:
	        case Cobol85PreprocessorParser.ALIAS:
	        case Cobol85PreprocessorParser.ANSI:
	        case Cobol85PreprocessorParser.ANY:
	        case Cobol85PreprocessorParser.APOST:
	        case Cobol85PreprocessorParser.AR:
	        case Cobol85PreprocessorParser.ARITH:
	        case Cobol85PreprocessorParser.AUTO:
	        case Cobol85PreprocessorParser.AWO:
	        case Cobol85PreprocessorParser.BIN:
	        case Cobol85PreprocessorParser.BLOCK0:
	        case Cobol85PreprocessorParser.BUF:
	        case Cobol85PreprocessorParser.BUFSIZE:
	        case Cobol85PreprocessorParser.BY:
	        case Cobol85PreprocessorParser.CBL:
	        case Cobol85PreprocessorParser.CBLCARD:
	        case Cobol85PreprocessorParser.CO:
	        case Cobol85PreprocessorParser.COBOL2:
	        case Cobol85PreprocessorParser.COBOL3:
	        case Cobol85PreprocessorParser.CODEPAGE:
	        case Cobol85PreprocessorParser.COMPAT:
	        case Cobol85PreprocessorParser.COMPILE:
	        case Cobol85PreprocessorParser.CP:
	        case Cobol85PreprocessorParser.CPP:
	        case Cobol85PreprocessorParser.CPSM:
	        case Cobol85PreprocessorParser.CS:
	        case Cobol85PreprocessorParser.CURR:
	        case Cobol85PreprocessorParser.CURRENCY:
	        case Cobol85PreprocessorParser.DATA:
	        case Cobol85PreprocessorParser.DATEPROC:
	        case Cobol85PreprocessorParser.DBCS:
	        case Cobol85PreprocessorParser.DD:
	        case Cobol85PreprocessorParser.DEBUG:
	        case Cobol85PreprocessorParser.DECK:
	        case Cobol85PreprocessorParser.DIAGTRUNC:
	        case Cobol85PreprocessorParser.DLI:
	        case Cobol85PreprocessorParser.DLL:
	        case Cobol85PreprocessorParser.DP:
	        case Cobol85PreprocessorParser.DTR:
	        case Cobol85PreprocessorParser.DU:
	        case Cobol85PreprocessorParser.DUMP:
	        case Cobol85PreprocessorParser.DYN:
	        case Cobol85PreprocessorParser.DYNAM:
	        case Cobol85PreprocessorParser.EDF:
	        case Cobol85PreprocessorParser.EJECT:
	        case Cobol85PreprocessorParser.EJPD:
	        case Cobol85PreprocessorParser.EN:
	        case Cobol85PreprocessorParser.ENGLISH:
	        case Cobol85PreprocessorParser.EPILOG:
	        case Cobol85PreprocessorParser.EXCI:
	        case Cobol85PreprocessorParser.EXIT:
	        case Cobol85PreprocessorParser.EXP:
	        case Cobol85PreprocessorParser.EXPORTALL:
	        case Cobol85PreprocessorParser.EXTEND:
	        case Cobol85PreprocessorParser.FASTSRT:
	        case Cobol85PreprocessorParser.FLAG:
	        case Cobol85PreprocessorParser.FLAGSTD:
	        case Cobol85PreprocessorParser.FSRT:
	        case Cobol85PreprocessorParser.FULL:
	        case Cobol85PreprocessorParser.GDS:
	        case Cobol85PreprocessorParser.GRAPHIC:
	        case Cobol85PreprocessorParser.HOOK:
	        case Cobol85PreprocessorParser.IN:
	        case Cobol85PreprocessorParser.INTDATE:
	        case Cobol85PreprocessorParser.JA:
	        case Cobol85PreprocessorParser.JP:
	        case Cobol85PreprocessorParser.KA:
	        case Cobol85PreprocessorParser.LANG:
	        case Cobol85PreprocessorParser.LANGUAGE:
	        case Cobol85PreprocessorParser.LC:
	        case Cobol85PreprocessorParser.LENGTH:
	        case Cobol85PreprocessorParser.LIB:
	        case Cobol85PreprocessorParser.LILIAN:
	        case Cobol85PreprocessorParser.LIN:
	        case Cobol85PreprocessorParser.LINECOUNT:
	        case Cobol85PreprocessorParser.LINKAGE:
	        case Cobol85PreprocessorParser.LIST:
	        case Cobol85PreprocessorParser.LM:
	        case Cobol85PreprocessorParser.LONGMIXED:
	        case Cobol85PreprocessorParser.LONGUPPER:
	        case Cobol85PreprocessorParser.LU:
	        case Cobol85PreprocessorParser.MAP:
	        case Cobol85PreprocessorParser.MARGINS:
	        case Cobol85PreprocessorParser.MAX:
	        case Cobol85PreprocessorParser.MD:
	        case Cobol85PreprocessorParser.MDECK:
	        case Cobol85PreprocessorParser.MIG:
	        case Cobol85PreprocessorParser.MIXED:
	        case Cobol85PreprocessorParser.NAME:
	        case Cobol85PreprocessorParser.NAT:
	        case Cobol85PreprocessorParser.NATIONAL:
	        case Cobol85PreprocessorParser.NATLANG:
	        case Cobol85PreprocessorParser.NN:
	        case Cobol85PreprocessorParser.NO:
	        case Cobol85PreprocessorParser.NOADATA:
	        case Cobol85PreprocessorParser.NOADV:
	        case Cobol85PreprocessorParser.NOALIAS:
	        case Cobol85PreprocessorParser.NOAWO:
	        case Cobol85PreprocessorParser.NOBLOCK0:
	        case Cobol85PreprocessorParser.NOC:
	        case Cobol85PreprocessorParser.NOCBLCARD:
	        case Cobol85PreprocessorParser.NOCICS:
	        case Cobol85PreprocessorParser.NOCMPR2:
	        case Cobol85PreprocessorParser.NOCOMPILE:
	        case Cobol85PreprocessorParser.NOCPSM:
	        case Cobol85PreprocessorParser.NOCURR:
	        case Cobol85PreprocessorParser.NOCURRENCY:
	        case Cobol85PreprocessorParser.NOD:
	        case Cobol85PreprocessorParser.NODATEPROC:
	        case Cobol85PreprocessorParser.NODBCS:
	        case Cobol85PreprocessorParser.NODE:
	        case Cobol85PreprocessorParser.NODEBUG:
	        case Cobol85PreprocessorParser.NODECK:
	        case Cobol85PreprocessorParser.NODIAGTRUNC:
	        case Cobol85PreprocessorParser.NODLL:
	        case Cobol85PreprocessorParser.NODU:
	        case Cobol85PreprocessorParser.NODUMP:
	        case Cobol85PreprocessorParser.NODP:
	        case Cobol85PreprocessorParser.NODTR:
	        case Cobol85PreprocessorParser.NODYN:
	        case Cobol85PreprocessorParser.NODYNAM:
	        case Cobol85PreprocessorParser.NOEDF:
	        case Cobol85PreprocessorParser.NOEJPD:
	        case Cobol85PreprocessorParser.NOEPILOG:
	        case Cobol85PreprocessorParser.NOEXIT:
	        case Cobol85PreprocessorParser.NOEXP:
	        case Cobol85PreprocessorParser.NOEXPORTALL:
	        case Cobol85PreprocessorParser.NOF:
	        case Cobol85PreprocessorParser.NOFASTSRT:
	        case Cobol85PreprocessorParser.NOFEPI:
	        case Cobol85PreprocessorParser.NOFLAG:
	        case Cobol85PreprocessorParser.NOFLAGMIG:
	        case Cobol85PreprocessorParser.NOFLAGSTD:
	        case Cobol85PreprocessorParser.NOFSRT:
	        case Cobol85PreprocessorParser.NOGRAPHIC:
	        case Cobol85PreprocessorParser.NOHOOK:
	        case Cobol85PreprocessorParser.NOLENGTH:
	        case Cobol85PreprocessorParser.NOLIB:
	        case Cobol85PreprocessorParser.NOLINKAGE:
	        case Cobol85PreprocessorParser.NOLIST:
	        case Cobol85PreprocessorParser.NOMAP:
	        case Cobol85PreprocessorParser.NOMD:
	        case Cobol85PreprocessorParser.NOMDECK:
	        case Cobol85PreprocessorParser.NONAME:
	        case Cobol85PreprocessorParser.NONUM:
	        case Cobol85PreprocessorParser.NONUMBER:
	        case Cobol85PreprocessorParser.NOOBJ:
	        case Cobol85PreprocessorParser.NOOBJECT:
	        case Cobol85PreprocessorParser.NOOFF:
	        case Cobol85PreprocessorParser.NOOFFSET:
	        case Cobol85PreprocessorParser.NOOPSEQUENCE:
	        case Cobol85PreprocessorParser.NOOPT:
	        case Cobol85PreprocessorParser.NOOPTIMIZE:
	        case Cobol85PreprocessorParser.NOOPTIONS:
	        case Cobol85PreprocessorParser.NOP:
	        case Cobol85PreprocessorParser.NOPFD:
	        case Cobol85PreprocessorParser.NOPROLOG:
	        case Cobol85PreprocessorParser.NORENT:
	        case Cobol85PreprocessorParser.NOS:
	        case Cobol85PreprocessorParser.NOSEP:
	        case Cobol85PreprocessorParser.NOSEPARATE:
	        case Cobol85PreprocessorParser.NOSEQ:
	        case Cobol85PreprocessorParser.NOSOURCE:
	        case Cobol85PreprocessorParser.NOSPIE:
	        case Cobol85PreprocessorParser.NOSQL:
	        case Cobol85PreprocessorParser.NOSQLC:
	        case Cobol85PreprocessorParser.NOSQLCCSID:
	        case Cobol85PreprocessorParser.NOSSR:
	        case Cobol85PreprocessorParser.NOSSRANGE:
	        case Cobol85PreprocessorParser.NOSTDTRUNC:
	        case Cobol85PreprocessorParser.NOSEQUENCE:
	        case Cobol85PreprocessorParser.NOTERM:
	        case Cobol85PreprocessorParser.NOTERMINAL:
	        case Cobol85PreprocessorParser.NOTEST:
	        case Cobol85PreprocessorParser.NOTHREAD:
	        case Cobol85PreprocessorParser.NOTRIG:
	        case Cobol85PreprocessorParser.NOVBREF:
	        case Cobol85PreprocessorParser.NOWORD:
	        case Cobol85PreprocessorParser.NOX:
	        case Cobol85PreprocessorParser.NOXREF:
	        case Cobol85PreprocessorParser.NOZWB:
	        case Cobol85PreprocessorParser.NS:
	        case Cobol85PreprocessorParser.NSEQ:
	        case Cobol85PreprocessorParser.NSYMBOL:
	        case Cobol85PreprocessorParser.NUM:
	        case Cobol85PreprocessorParser.NUMBER:
	        case Cobol85PreprocessorParser.NUMPROC:
	        case Cobol85PreprocessorParser.OBJ:
	        case Cobol85PreprocessorParser.OBJECT:
	        case Cobol85PreprocessorParser.OF:
	        case Cobol85PreprocessorParser.OFF:
	        case Cobol85PreprocessorParser.OFFSET:
	        case Cobol85PreprocessorParser.ON:
	        case Cobol85PreprocessorParser.OP:
	        case Cobol85PreprocessorParser.OPMARGINS:
	        case Cobol85PreprocessorParser.OPSEQUENCE:
	        case Cobol85PreprocessorParser.OPT:
	        case Cobol85PreprocessorParser.OPTFILE:
	        case Cobol85PreprocessorParser.OPTIMIZE:
	        case Cobol85PreprocessorParser.OPTIONS:
	        case Cobol85PreprocessorParser.OUT:
	        case Cobol85PreprocessorParser.OUTDD:
	        case Cobol85PreprocessorParser.PFD:
	        case Cobol85PreprocessorParser.PPTDBG:
	        case Cobol85PreprocessorParser.PGMN:
	        case Cobol85PreprocessorParser.PGMNAME:
	        case Cobol85PreprocessorParser.PROCESS:
	        case Cobol85PreprocessorParser.PROLOG:
	        case Cobol85PreprocessorParser.QUOTE:
	        case Cobol85PreprocessorParser.RENT:
	        case Cobol85PreprocessorParser.REPLACING:
	        case Cobol85PreprocessorParser.RMODE:
	        case Cobol85PreprocessorParser.SEP:
	        case Cobol85PreprocessorParser.SEPARATE:
	        case Cobol85PreprocessorParser.SEQ:
	        case Cobol85PreprocessorParser.SEQUENCE:
	        case Cobol85PreprocessorParser.SHORT:
	        case Cobol85PreprocessorParser.SIZE:
	        case Cobol85PreprocessorParser.SOURCE:
	        case Cobol85PreprocessorParser.SP:
	        case Cobol85PreprocessorParser.SPACE:
	        case Cobol85PreprocessorParser.SPIE:
	        case Cobol85PreprocessorParser.SQL:
	        case Cobol85PreprocessorParser.SQLC:
	        case Cobol85PreprocessorParser.SQLCCSID:
	        case Cobol85PreprocessorParser.SS:
	        case Cobol85PreprocessorParser.SSR:
	        case Cobol85PreprocessorParser.SSRANGE:
	        case Cobol85PreprocessorParser.STD:
	        case Cobol85PreprocessorParser.SYSEIB:
	        case Cobol85PreprocessorParser.SZ:
	        case Cobol85PreprocessorParser.TERM:
	        case Cobol85PreprocessorParser.TERMINAL:
	        case Cobol85PreprocessorParser.TEST:
	        case Cobol85PreprocessorParser.THREAD:
	        case Cobol85PreprocessorParser.TITLE:
	        case Cobol85PreprocessorParser.TRIG:
	        case Cobol85PreprocessorParser.TRUNC:
	        case Cobol85PreprocessorParser.UE:
	        case Cobol85PreprocessorParser.UPPER:
	        case Cobol85PreprocessorParser.VBREF:
	        case Cobol85PreprocessorParser.WD:
	        case Cobol85PreprocessorParser.XMLPARSE:
	        case Cobol85PreprocessorParser.XMLSS:
	        case Cobol85PreprocessorParser.XOPTS:
	        case Cobol85PreprocessorParser.XREF:
	        case Cobol85PreprocessorParser.YEARWINDOW:
	        case Cobol85PreprocessorParser.YW:
	        case Cobol85PreprocessorParser.ZWB:
	        case Cobol85PreprocessorParser.C_CHAR:
	        case Cobol85PreprocessorParser.D_CHAR:
	        case Cobol85PreprocessorParser.E_CHAR:
	        case Cobol85PreprocessorParser.F_CHAR:
	        case Cobol85PreprocessorParser.H_CHAR:
	        case Cobol85PreprocessorParser.I_CHAR:
	        case Cobol85PreprocessorParser.M_CHAR:
	        case Cobol85PreprocessorParser.N_CHAR:
	        case Cobol85PreprocessorParser.Q_CHAR:
	        case Cobol85PreprocessorParser.S_CHAR:
	        case Cobol85PreprocessorParser.U_CHAR:
	        case Cobol85PreprocessorParser.W_CHAR:
	        case Cobol85PreprocessorParser.X_CHAR:
	        case Cobol85PreprocessorParser.COMMACHAR:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 668;
	            this.charDataKeyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, Cobol85PreprocessorParser.RULE_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 671;
	        _la = this._input.LA(1);
	        if(!(_la===Cobol85PreprocessorParser.NONNUMERICLITERAL || _la===Cobol85PreprocessorParser.NUMERICLITERAL)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filename() {
	    let localctx = new FilenameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, Cobol85PreprocessorParser.RULE_filename);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 673;
	        this.match(Cobol85PreprocessorParser.FILENAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charDataKeyword() {
	    let localctx = new CharDataKeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, Cobol85PreprocessorParser.RULE_charDataKeyword);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 675;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Cobol85PreprocessorParser.ADATA) | (1 << Cobol85PreprocessorParser.ADV) | (1 << Cobol85PreprocessorParser.ALIAS) | (1 << Cobol85PreprocessorParser.ANSI) | (1 << Cobol85PreprocessorParser.ANY) | (1 << Cobol85PreprocessorParser.APOST) | (1 << Cobol85PreprocessorParser.AR) | (1 << Cobol85PreprocessorParser.ARITH) | (1 << Cobol85PreprocessorParser.AUTO) | (1 << Cobol85PreprocessorParser.AWO) | (1 << Cobol85PreprocessorParser.BIN) | (1 << Cobol85PreprocessorParser.BLOCK0) | (1 << Cobol85PreprocessorParser.BUF) | (1 << Cobol85PreprocessorParser.BUFSIZE) | (1 << Cobol85PreprocessorParser.BY) | (1 << Cobol85PreprocessorParser.CBL) | (1 << Cobol85PreprocessorParser.CBLCARD) | (1 << Cobol85PreprocessorParser.CO) | (1 << Cobol85PreprocessorParser.COBOL2) | (1 << Cobol85PreprocessorParser.COBOL3) | (1 << Cobol85PreprocessorParser.CODEPAGE) | (1 << Cobol85PreprocessorParser.COMPAT) | (1 << Cobol85PreprocessorParser.COMPILE) | (1 << Cobol85PreprocessorParser.CP) | (1 << Cobol85PreprocessorParser.CPP) | (1 << Cobol85PreprocessorParser.CPSM) | (1 << Cobol85PreprocessorParser.CS) | (1 << Cobol85PreprocessorParser.CURR) | (1 << Cobol85PreprocessorParser.CURRENCY))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Cobol85PreprocessorParser.DATA - 32)) | (1 << (Cobol85PreprocessorParser.DATEPROC - 32)) | (1 << (Cobol85PreprocessorParser.DBCS - 32)) | (1 << (Cobol85PreprocessorParser.DD - 32)) | (1 << (Cobol85PreprocessorParser.DEBUG - 32)) | (1 << (Cobol85PreprocessorParser.DECK - 32)) | (1 << (Cobol85PreprocessorParser.DIAGTRUNC - 32)) | (1 << (Cobol85PreprocessorParser.DLI - 32)) | (1 << (Cobol85PreprocessorParser.DLL - 32)) | (1 << (Cobol85PreprocessorParser.DP - 32)) | (1 << (Cobol85PreprocessorParser.DTR - 32)) | (1 << (Cobol85PreprocessorParser.DU - 32)) | (1 << (Cobol85PreprocessorParser.DUMP - 32)) | (1 << (Cobol85PreprocessorParser.DYN - 32)) | (1 << (Cobol85PreprocessorParser.DYNAM - 32)) | (1 << (Cobol85PreprocessorParser.EDF - 32)) | (1 << (Cobol85PreprocessorParser.EJECT - 32)) | (1 << (Cobol85PreprocessorParser.EJPD - 32)) | (1 << (Cobol85PreprocessorParser.EN - 32)) | (1 << (Cobol85PreprocessorParser.ENGLISH - 32)) | (1 << (Cobol85PreprocessorParser.EPILOG - 32)) | (1 << (Cobol85PreprocessorParser.EXCI - 32)) | (1 << (Cobol85PreprocessorParser.EXIT - 32)) | (1 << (Cobol85PreprocessorParser.EXP - 32)) | (1 << (Cobol85PreprocessorParser.EXPORTALL - 32)) | (1 << (Cobol85PreprocessorParser.EXTEND - 32)) | (1 << (Cobol85PreprocessorParser.FASTSRT - 32)) | (1 << (Cobol85PreprocessorParser.FLAG - 32)) | (1 << (Cobol85PreprocessorParser.FLAGSTD - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Cobol85PreprocessorParser.FSRT - 64)) | (1 << (Cobol85PreprocessorParser.FULL - 64)) | (1 << (Cobol85PreprocessorParser.GDS - 64)) | (1 << (Cobol85PreprocessorParser.GRAPHIC - 64)) | (1 << (Cobol85PreprocessorParser.HOOK - 64)) | (1 << (Cobol85PreprocessorParser.IN - 64)) | (1 << (Cobol85PreprocessorParser.INTDATE - 64)) | (1 << (Cobol85PreprocessorParser.JA - 64)) | (1 << (Cobol85PreprocessorParser.JP - 64)) | (1 << (Cobol85PreprocessorParser.KA - 64)) | (1 << (Cobol85PreprocessorParser.LANG - 64)) | (1 << (Cobol85PreprocessorParser.LANGUAGE - 64)) | (1 << (Cobol85PreprocessorParser.LC - 64)) | (1 << (Cobol85PreprocessorParser.LENGTH - 64)) | (1 << (Cobol85PreprocessorParser.LIB - 64)) | (1 << (Cobol85PreprocessorParser.LILIAN - 64)) | (1 << (Cobol85PreprocessorParser.LIN - 64)) | (1 << (Cobol85PreprocessorParser.LINECOUNT - 64)) | (1 << (Cobol85PreprocessorParser.LINKAGE - 64)) | (1 << (Cobol85PreprocessorParser.LIST - 64)) | (1 << (Cobol85PreprocessorParser.LM - 64)) | (1 << (Cobol85PreprocessorParser.LONGMIXED - 64)) | (1 << (Cobol85PreprocessorParser.LONGUPPER - 64)) | (1 << (Cobol85PreprocessorParser.LU - 64)) | (1 << (Cobol85PreprocessorParser.MAP - 64)) | (1 << (Cobol85PreprocessorParser.MARGINS - 64)) | (1 << (Cobol85PreprocessorParser.MAX - 64)) | (1 << (Cobol85PreprocessorParser.MD - 64)) | (1 << (Cobol85PreprocessorParser.MDECK - 64)) | (1 << (Cobol85PreprocessorParser.MIG - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Cobol85PreprocessorParser.MIXED - 96)) | (1 << (Cobol85PreprocessorParser.NAME - 96)) | (1 << (Cobol85PreprocessorParser.NAT - 96)) | (1 << (Cobol85PreprocessorParser.NATIONAL - 96)) | (1 << (Cobol85PreprocessorParser.NATLANG - 96)) | (1 << (Cobol85PreprocessorParser.NN - 96)) | (1 << (Cobol85PreprocessorParser.NO - 96)) | (1 << (Cobol85PreprocessorParser.NOADATA - 96)) | (1 << (Cobol85PreprocessorParser.NOADV - 96)) | (1 << (Cobol85PreprocessorParser.NOALIAS - 96)) | (1 << (Cobol85PreprocessorParser.NOAWO - 96)) | (1 << (Cobol85PreprocessorParser.NOBLOCK0 - 96)) | (1 << (Cobol85PreprocessorParser.NOC - 96)) | (1 << (Cobol85PreprocessorParser.NOCBLCARD - 96)) | (1 << (Cobol85PreprocessorParser.NOCICS - 96)) | (1 << (Cobol85PreprocessorParser.NOCMPR2 - 96)) | (1 << (Cobol85PreprocessorParser.NOCOMPILE - 96)) | (1 << (Cobol85PreprocessorParser.NOCPSM - 96)) | (1 << (Cobol85PreprocessorParser.NOCURR - 96)) | (1 << (Cobol85PreprocessorParser.NOCURRENCY - 96)) | (1 << (Cobol85PreprocessorParser.NOD - 96)) | (1 << (Cobol85PreprocessorParser.NODATEPROC - 96)) | (1 << (Cobol85PreprocessorParser.NODBCS - 96)) | (1 << (Cobol85PreprocessorParser.NODE - 96)) | (1 << (Cobol85PreprocessorParser.NODEBUG - 96)) | (1 << (Cobol85PreprocessorParser.NODECK - 96)) | (1 << (Cobol85PreprocessorParser.NODIAGTRUNC - 96)) | (1 << (Cobol85PreprocessorParser.NODLL - 96)) | (1 << (Cobol85PreprocessorParser.NODU - 96)) | (1 << (Cobol85PreprocessorParser.NODUMP - 96)) | (1 << (Cobol85PreprocessorParser.NODP - 96)) | (1 << (Cobol85PreprocessorParser.NODTR - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (Cobol85PreprocessorParser.NODYN - 128)) | (1 << (Cobol85PreprocessorParser.NODYNAM - 128)) | (1 << (Cobol85PreprocessorParser.NOEDF - 128)) | (1 << (Cobol85PreprocessorParser.NOEJPD - 128)) | (1 << (Cobol85PreprocessorParser.NOEPILOG - 128)) | (1 << (Cobol85PreprocessorParser.NOEXIT - 128)) | (1 << (Cobol85PreprocessorParser.NOEXP - 128)) | (1 << (Cobol85PreprocessorParser.NOEXPORTALL - 128)) | (1 << (Cobol85PreprocessorParser.NOF - 128)) | (1 << (Cobol85PreprocessorParser.NOFASTSRT - 128)) | (1 << (Cobol85PreprocessorParser.NOFEPI - 128)) | (1 << (Cobol85PreprocessorParser.NOFLAG - 128)) | (1 << (Cobol85PreprocessorParser.NOFLAGMIG - 128)) | (1 << (Cobol85PreprocessorParser.NOFLAGSTD - 128)) | (1 << (Cobol85PreprocessorParser.NOFSRT - 128)) | (1 << (Cobol85PreprocessorParser.NOGRAPHIC - 128)) | (1 << (Cobol85PreprocessorParser.NOHOOK - 128)) | (1 << (Cobol85PreprocessorParser.NOLENGTH - 128)) | (1 << (Cobol85PreprocessorParser.NOLIB - 128)) | (1 << (Cobol85PreprocessorParser.NOLINKAGE - 128)) | (1 << (Cobol85PreprocessorParser.NOLIST - 128)) | (1 << (Cobol85PreprocessorParser.NOMAP - 128)) | (1 << (Cobol85PreprocessorParser.NOMD - 128)) | (1 << (Cobol85PreprocessorParser.NOMDECK - 128)) | (1 << (Cobol85PreprocessorParser.NONAME - 128)) | (1 << (Cobol85PreprocessorParser.NONUM - 128)) | (1 << (Cobol85PreprocessorParser.NONUMBER - 128)) | (1 << (Cobol85PreprocessorParser.NOOBJ - 128)) | (1 << (Cobol85PreprocessorParser.NOOBJECT - 128)) | (1 << (Cobol85PreprocessorParser.NOOFF - 128)) | (1 << (Cobol85PreprocessorParser.NOOFFSET - 128)) | (1 << (Cobol85PreprocessorParser.NOOPSEQUENCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (Cobol85PreprocessorParser.NOOPT - 160)) | (1 << (Cobol85PreprocessorParser.NOOPTIMIZE - 160)) | (1 << (Cobol85PreprocessorParser.NOOPTIONS - 160)) | (1 << (Cobol85PreprocessorParser.NOP - 160)) | (1 << (Cobol85PreprocessorParser.NOPFD - 160)) | (1 << (Cobol85PreprocessorParser.NOPROLOG - 160)) | (1 << (Cobol85PreprocessorParser.NORENT - 160)) | (1 << (Cobol85PreprocessorParser.NOS - 160)) | (1 << (Cobol85PreprocessorParser.NOSEP - 160)) | (1 << (Cobol85PreprocessorParser.NOSEPARATE - 160)) | (1 << (Cobol85PreprocessorParser.NOSEQ - 160)) | (1 << (Cobol85PreprocessorParser.NOSOURCE - 160)) | (1 << (Cobol85PreprocessorParser.NOSPIE - 160)) | (1 << (Cobol85PreprocessorParser.NOSQL - 160)) | (1 << (Cobol85PreprocessorParser.NOSQLC - 160)) | (1 << (Cobol85PreprocessorParser.NOSQLCCSID - 160)) | (1 << (Cobol85PreprocessorParser.NOSSR - 160)) | (1 << (Cobol85PreprocessorParser.NOSSRANGE - 160)) | (1 << (Cobol85PreprocessorParser.NOSTDTRUNC - 160)) | (1 << (Cobol85PreprocessorParser.NOSEQUENCE - 160)) | (1 << (Cobol85PreprocessorParser.NOTERM - 160)) | (1 << (Cobol85PreprocessorParser.NOTERMINAL - 160)) | (1 << (Cobol85PreprocessorParser.NOTEST - 160)) | (1 << (Cobol85PreprocessorParser.NOTHREAD - 160)) | (1 << (Cobol85PreprocessorParser.NOTRIG - 160)) | (1 << (Cobol85PreprocessorParser.NOVBREF - 160)) | (1 << (Cobol85PreprocessorParser.NOWORD - 160)) | (1 << (Cobol85PreprocessorParser.NOX - 160)) | (1 << (Cobol85PreprocessorParser.NOXREF - 160)) | (1 << (Cobol85PreprocessorParser.NOZWB - 160)) | (1 << (Cobol85PreprocessorParser.NS - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (Cobol85PreprocessorParser.NSEQ - 192)) | (1 << (Cobol85PreprocessorParser.NSYMBOL - 192)) | (1 << (Cobol85PreprocessorParser.NUM - 192)) | (1 << (Cobol85PreprocessorParser.NUMBER - 192)) | (1 << (Cobol85PreprocessorParser.NUMPROC - 192)) | (1 << (Cobol85PreprocessorParser.OBJ - 192)) | (1 << (Cobol85PreprocessorParser.OBJECT - 192)) | (1 << (Cobol85PreprocessorParser.OF - 192)) | (1 << (Cobol85PreprocessorParser.OFF - 192)) | (1 << (Cobol85PreprocessorParser.OFFSET - 192)) | (1 << (Cobol85PreprocessorParser.ON - 192)) | (1 << (Cobol85PreprocessorParser.OP - 192)) | (1 << (Cobol85PreprocessorParser.OPMARGINS - 192)) | (1 << (Cobol85PreprocessorParser.OPSEQUENCE - 192)) | (1 << (Cobol85PreprocessorParser.OPT - 192)) | (1 << (Cobol85PreprocessorParser.OPTFILE - 192)) | (1 << (Cobol85PreprocessorParser.OPTIMIZE - 192)) | (1 << (Cobol85PreprocessorParser.OPTIONS - 192)) | (1 << (Cobol85PreprocessorParser.OUT - 192)) | (1 << (Cobol85PreprocessorParser.OUTDD - 192)) | (1 << (Cobol85PreprocessorParser.PFD - 192)) | (1 << (Cobol85PreprocessorParser.PPTDBG - 192)) | (1 << (Cobol85PreprocessorParser.PGMN - 192)) | (1 << (Cobol85PreprocessorParser.PGMNAME - 192)) | (1 << (Cobol85PreprocessorParser.PROCESS - 192)) | (1 << (Cobol85PreprocessorParser.PROLOG - 192)) | (1 << (Cobol85PreprocessorParser.QUOTE - 192)) | (1 << (Cobol85PreprocessorParser.RENT - 192)) | (1 << (Cobol85PreprocessorParser.REPLACING - 192)) | (1 << (Cobol85PreprocessorParser.RMODE - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (Cobol85PreprocessorParser.SEP - 224)) | (1 << (Cobol85PreprocessorParser.SEPARATE - 224)) | (1 << (Cobol85PreprocessorParser.SEQ - 224)) | (1 << (Cobol85PreprocessorParser.SEQUENCE - 224)) | (1 << (Cobol85PreprocessorParser.SHORT - 224)) | (1 << (Cobol85PreprocessorParser.SIZE - 224)) | (1 << (Cobol85PreprocessorParser.SOURCE - 224)) | (1 << (Cobol85PreprocessorParser.SP - 224)) | (1 << (Cobol85PreprocessorParser.SPACE - 224)) | (1 << (Cobol85PreprocessorParser.SPIE - 224)) | (1 << (Cobol85PreprocessorParser.SQL - 224)) | (1 << (Cobol85PreprocessorParser.SQLC - 224)) | (1 << (Cobol85PreprocessorParser.SQLCCSID - 224)) | (1 << (Cobol85PreprocessorParser.SS - 224)) | (1 << (Cobol85PreprocessorParser.SSR - 224)) | (1 << (Cobol85PreprocessorParser.SSRANGE - 224)) | (1 << (Cobol85PreprocessorParser.STD - 224)) | (1 << (Cobol85PreprocessorParser.SYSEIB - 224)) | (1 << (Cobol85PreprocessorParser.SZ - 224)) | (1 << (Cobol85PreprocessorParser.TERM - 224)) | (1 << (Cobol85PreprocessorParser.TERMINAL - 224)) | (1 << (Cobol85PreprocessorParser.TEST - 224)) | (1 << (Cobol85PreprocessorParser.THREAD - 224)) | (1 << (Cobol85PreprocessorParser.TITLE - 224)) | (1 << (Cobol85PreprocessorParser.TRIG - 224)) | (1 << (Cobol85PreprocessorParser.TRUNC - 224)) | (1 << (Cobol85PreprocessorParser.UE - 224)))) !== 0) || ((((_la - 256)) & ~0x1f) == 0 && ((1 << (_la - 256)) & ((1 << (Cobol85PreprocessorParser.UPPER - 256)) | (1 << (Cobol85PreprocessorParser.VBREF - 256)) | (1 << (Cobol85PreprocessorParser.WD - 256)) | (1 << (Cobol85PreprocessorParser.XMLPARSE - 256)) | (1 << (Cobol85PreprocessorParser.XMLSS - 256)) | (1 << (Cobol85PreprocessorParser.XOPTS - 256)) | (1 << (Cobol85PreprocessorParser.XREF - 256)) | (1 << (Cobol85PreprocessorParser.YEARWINDOW - 256)) | (1 << (Cobol85PreprocessorParser.YW - 256)) | (1 << (Cobol85PreprocessorParser.ZWB - 256)) | (1 << (Cobol85PreprocessorParser.C_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.D_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.E_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.F_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.H_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.I_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.M_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.N_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.Q_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.S_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.U_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.W_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.X_CHAR - 256)) | (1 << (Cobol85PreprocessorParser.COMMACHAR - 256)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

Cobol85PreprocessorParser.EOF = antlr4.Token.EOF;
Cobol85PreprocessorParser.ADATA = 1;
Cobol85PreprocessorParser.ADV = 2;
Cobol85PreprocessorParser.ALIAS = 3;
Cobol85PreprocessorParser.ANSI = 4;
Cobol85PreprocessorParser.ANY = 5;
Cobol85PreprocessorParser.APOST = 6;
Cobol85PreprocessorParser.AR = 7;
Cobol85PreprocessorParser.ARITH = 8;
Cobol85PreprocessorParser.AUTO = 9;
Cobol85PreprocessorParser.AWO = 10;
Cobol85PreprocessorParser.BIN = 11;
Cobol85PreprocessorParser.BLOCK0 = 12;
Cobol85PreprocessorParser.BUF = 13;
Cobol85PreprocessorParser.BUFSIZE = 14;
Cobol85PreprocessorParser.BY = 15;
Cobol85PreprocessorParser.CBL = 16;
Cobol85PreprocessorParser.CBLCARD = 17;
Cobol85PreprocessorParser.CICS = 18;
Cobol85PreprocessorParser.CO = 19;
Cobol85PreprocessorParser.COBOL2 = 20;
Cobol85PreprocessorParser.COBOL3 = 21;
Cobol85PreprocessorParser.CODEPAGE = 22;
Cobol85PreprocessorParser.COMPAT = 23;
Cobol85PreprocessorParser.COMPILE = 24;
Cobol85PreprocessorParser.COPY = 25;
Cobol85PreprocessorParser.CP = 26;
Cobol85PreprocessorParser.CPP = 27;
Cobol85PreprocessorParser.CPSM = 28;
Cobol85PreprocessorParser.CS = 29;
Cobol85PreprocessorParser.CURR = 30;
Cobol85PreprocessorParser.CURRENCY = 31;
Cobol85PreprocessorParser.DATA = 32;
Cobol85PreprocessorParser.DATEPROC = 33;
Cobol85PreprocessorParser.DBCS = 34;
Cobol85PreprocessorParser.DD = 35;
Cobol85PreprocessorParser.DEBUG = 36;
Cobol85PreprocessorParser.DECK = 37;
Cobol85PreprocessorParser.DIAGTRUNC = 38;
Cobol85PreprocessorParser.DLI = 39;
Cobol85PreprocessorParser.DLL = 40;
Cobol85PreprocessorParser.DP = 41;
Cobol85PreprocessorParser.DTR = 42;
Cobol85PreprocessorParser.DU = 43;
Cobol85PreprocessorParser.DUMP = 44;
Cobol85PreprocessorParser.DYN = 45;
Cobol85PreprocessorParser.DYNAM = 46;
Cobol85PreprocessorParser.EDF = 47;
Cobol85PreprocessorParser.EJECT = 48;
Cobol85PreprocessorParser.EJPD = 49;
Cobol85PreprocessorParser.EN = 50;
Cobol85PreprocessorParser.ENGLISH = 51;
Cobol85PreprocessorParser.END_EXEC = 52;
Cobol85PreprocessorParser.EPILOG = 53;
Cobol85PreprocessorParser.EXCI = 54;
Cobol85PreprocessorParser.EXEC = 55;
Cobol85PreprocessorParser.EXIT = 56;
Cobol85PreprocessorParser.EXP = 57;
Cobol85PreprocessorParser.EXPORTALL = 58;
Cobol85PreprocessorParser.EXTEND = 59;
Cobol85PreprocessorParser.FASTSRT = 60;
Cobol85PreprocessorParser.FEPI = 61;
Cobol85PreprocessorParser.FLAG = 62;
Cobol85PreprocessorParser.FLAGSTD = 63;
Cobol85PreprocessorParser.FSRT = 64;
Cobol85PreprocessorParser.FULL = 65;
Cobol85PreprocessorParser.GDS = 66;
Cobol85PreprocessorParser.GRAPHIC = 67;
Cobol85PreprocessorParser.HOOK = 68;
Cobol85PreprocessorParser.IN = 69;
Cobol85PreprocessorParser.INTDATE = 70;
Cobol85PreprocessorParser.JA = 71;
Cobol85PreprocessorParser.JP = 72;
Cobol85PreprocessorParser.KA = 73;
Cobol85PreprocessorParser.LANG = 74;
Cobol85PreprocessorParser.LANGUAGE = 75;
Cobol85PreprocessorParser.LC = 76;
Cobol85PreprocessorParser.LEASM = 77;
Cobol85PreprocessorParser.LENGTH = 78;
Cobol85PreprocessorParser.LIB = 79;
Cobol85PreprocessorParser.LILIAN = 80;
Cobol85PreprocessorParser.LIN = 81;
Cobol85PreprocessorParser.LINECOUNT = 82;
Cobol85PreprocessorParser.LINKAGE = 83;
Cobol85PreprocessorParser.LIST = 84;
Cobol85PreprocessorParser.LM = 85;
Cobol85PreprocessorParser.LONGMIXED = 86;
Cobol85PreprocessorParser.LONGUPPER = 87;
Cobol85PreprocessorParser.LPARENCHAR = 88;
Cobol85PreprocessorParser.LU = 89;
Cobol85PreprocessorParser.MAP = 90;
Cobol85PreprocessorParser.MARGINS = 91;
Cobol85PreprocessorParser.MAX = 92;
Cobol85PreprocessorParser.MD = 93;
Cobol85PreprocessorParser.MDECK = 94;
Cobol85PreprocessorParser.MIG = 95;
Cobol85PreprocessorParser.MIXED = 96;
Cobol85PreprocessorParser.NAME = 97;
Cobol85PreprocessorParser.NAT = 98;
Cobol85PreprocessorParser.NATIONAL = 99;
Cobol85PreprocessorParser.NATLANG = 100;
Cobol85PreprocessorParser.NN = 101;
Cobol85PreprocessorParser.NO = 102;
Cobol85PreprocessorParser.NOADATA = 103;
Cobol85PreprocessorParser.NOADV = 104;
Cobol85PreprocessorParser.NOALIAS = 105;
Cobol85PreprocessorParser.NOAWO = 106;
Cobol85PreprocessorParser.NOBLOCK0 = 107;
Cobol85PreprocessorParser.NOC = 108;
Cobol85PreprocessorParser.NOCBLCARD = 109;
Cobol85PreprocessorParser.NOCICS = 110;
Cobol85PreprocessorParser.NOCMPR2 = 111;
Cobol85PreprocessorParser.NOCOMPILE = 112;
Cobol85PreprocessorParser.NOCPSM = 113;
Cobol85PreprocessorParser.NOCURR = 114;
Cobol85PreprocessorParser.NOCURRENCY = 115;
Cobol85PreprocessorParser.NOD = 116;
Cobol85PreprocessorParser.NODATEPROC = 117;
Cobol85PreprocessorParser.NODBCS = 118;
Cobol85PreprocessorParser.NODE = 119;
Cobol85PreprocessorParser.NODEBUG = 120;
Cobol85PreprocessorParser.NODECK = 121;
Cobol85PreprocessorParser.NODIAGTRUNC = 122;
Cobol85PreprocessorParser.NODLL = 123;
Cobol85PreprocessorParser.NODU = 124;
Cobol85PreprocessorParser.NODUMP = 125;
Cobol85PreprocessorParser.NODP = 126;
Cobol85PreprocessorParser.NODTR = 127;
Cobol85PreprocessorParser.NODYN = 128;
Cobol85PreprocessorParser.NODYNAM = 129;
Cobol85PreprocessorParser.NOEDF = 130;
Cobol85PreprocessorParser.NOEJPD = 131;
Cobol85PreprocessorParser.NOEPILOG = 132;
Cobol85PreprocessorParser.NOEXIT = 133;
Cobol85PreprocessorParser.NOEXP = 134;
Cobol85PreprocessorParser.NOEXPORTALL = 135;
Cobol85PreprocessorParser.NOF = 136;
Cobol85PreprocessorParser.NOFASTSRT = 137;
Cobol85PreprocessorParser.NOFEPI = 138;
Cobol85PreprocessorParser.NOFLAG = 139;
Cobol85PreprocessorParser.NOFLAGMIG = 140;
Cobol85PreprocessorParser.NOFLAGSTD = 141;
Cobol85PreprocessorParser.NOFSRT = 142;
Cobol85PreprocessorParser.NOGRAPHIC = 143;
Cobol85PreprocessorParser.NOHOOK = 144;
Cobol85PreprocessorParser.NOLENGTH = 145;
Cobol85PreprocessorParser.NOLIB = 146;
Cobol85PreprocessorParser.NOLINKAGE = 147;
Cobol85PreprocessorParser.NOLIST = 148;
Cobol85PreprocessorParser.NOMAP = 149;
Cobol85PreprocessorParser.NOMD = 150;
Cobol85PreprocessorParser.NOMDECK = 151;
Cobol85PreprocessorParser.NONAME = 152;
Cobol85PreprocessorParser.NONUM = 153;
Cobol85PreprocessorParser.NONUMBER = 154;
Cobol85PreprocessorParser.NOOBJ = 155;
Cobol85PreprocessorParser.NOOBJECT = 156;
Cobol85PreprocessorParser.NOOFF = 157;
Cobol85PreprocessorParser.NOOFFSET = 158;
Cobol85PreprocessorParser.NOOPSEQUENCE = 159;
Cobol85PreprocessorParser.NOOPT = 160;
Cobol85PreprocessorParser.NOOPTIMIZE = 161;
Cobol85PreprocessorParser.NOOPTIONS = 162;
Cobol85PreprocessorParser.NOP = 163;
Cobol85PreprocessorParser.NOPFD = 164;
Cobol85PreprocessorParser.NOPROLOG = 165;
Cobol85PreprocessorParser.NORENT = 166;
Cobol85PreprocessorParser.NOS = 167;
Cobol85PreprocessorParser.NOSEP = 168;
Cobol85PreprocessorParser.NOSEPARATE = 169;
Cobol85PreprocessorParser.NOSEQ = 170;
Cobol85PreprocessorParser.NOSOURCE = 171;
Cobol85PreprocessorParser.NOSPIE = 172;
Cobol85PreprocessorParser.NOSQL = 173;
Cobol85PreprocessorParser.NOSQLC = 174;
Cobol85PreprocessorParser.NOSQLCCSID = 175;
Cobol85PreprocessorParser.NOSSR = 176;
Cobol85PreprocessorParser.NOSSRANGE = 177;
Cobol85PreprocessorParser.NOSTDTRUNC = 178;
Cobol85PreprocessorParser.NOSEQUENCE = 179;
Cobol85PreprocessorParser.NOTERM = 180;
Cobol85PreprocessorParser.NOTERMINAL = 181;
Cobol85PreprocessorParser.NOTEST = 182;
Cobol85PreprocessorParser.NOTHREAD = 183;
Cobol85PreprocessorParser.NOTRIG = 184;
Cobol85PreprocessorParser.NOVBREF = 185;
Cobol85PreprocessorParser.NOWD = 186;
Cobol85PreprocessorParser.NOWORD = 187;
Cobol85PreprocessorParser.NOX = 188;
Cobol85PreprocessorParser.NOXREF = 189;
Cobol85PreprocessorParser.NOZWB = 190;
Cobol85PreprocessorParser.NS = 191;
Cobol85PreprocessorParser.NSEQ = 192;
Cobol85PreprocessorParser.NSYMBOL = 193;
Cobol85PreprocessorParser.NUM = 194;
Cobol85PreprocessorParser.NUMBER = 195;
Cobol85PreprocessorParser.NUMPROC = 196;
Cobol85PreprocessorParser.OBJ = 197;
Cobol85PreprocessorParser.OBJECT = 198;
Cobol85PreprocessorParser.OF = 199;
Cobol85PreprocessorParser.OFF = 200;
Cobol85PreprocessorParser.OFFSET = 201;
Cobol85PreprocessorParser.ON = 202;
Cobol85PreprocessorParser.OP = 203;
Cobol85PreprocessorParser.OPMARGINS = 204;
Cobol85PreprocessorParser.OPSEQUENCE = 205;
Cobol85PreprocessorParser.OPT = 206;
Cobol85PreprocessorParser.OPTFILE = 207;
Cobol85PreprocessorParser.OPTIMIZE = 208;
Cobol85PreprocessorParser.OPTIONS = 209;
Cobol85PreprocessorParser.OUT = 210;
Cobol85PreprocessorParser.OUTDD = 211;
Cobol85PreprocessorParser.PFD = 212;
Cobol85PreprocessorParser.PPTDBG = 213;
Cobol85PreprocessorParser.PGMN = 214;
Cobol85PreprocessorParser.PGMNAME = 215;
Cobol85PreprocessorParser.PROCESS = 216;
Cobol85PreprocessorParser.PROLOG = 217;
Cobol85PreprocessorParser.QUOTE = 218;
Cobol85PreprocessorParser.RENT = 219;
Cobol85PreprocessorParser.REPLACE = 220;
Cobol85PreprocessorParser.REPLACING = 221;
Cobol85PreprocessorParser.RMODE = 222;
Cobol85PreprocessorParser.RPARENCHAR = 223;
Cobol85PreprocessorParser.SEP = 224;
Cobol85PreprocessorParser.SEPARATE = 225;
Cobol85PreprocessorParser.SEQ = 226;
Cobol85PreprocessorParser.SEQUENCE = 227;
Cobol85PreprocessorParser.SHORT = 228;
Cobol85PreprocessorParser.SIZE = 229;
Cobol85PreprocessorParser.SOURCE = 230;
Cobol85PreprocessorParser.SP = 231;
Cobol85PreprocessorParser.SPACE = 232;
Cobol85PreprocessorParser.SPIE = 233;
Cobol85PreprocessorParser.SQL = 234;
Cobol85PreprocessorParser.SQLC = 235;
Cobol85PreprocessorParser.SQLCCSID = 236;
Cobol85PreprocessorParser.SQLIMS = 237;
Cobol85PreprocessorParser.SKIP1 = 238;
Cobol85PreprocessorParser.SKIP2 = 239;
Cobol85PreprocessorParser.SKIP3 = 240;
Cobol85PreprocessorParser.SS = 241;
Cobol85PreprocessorParser.SSR = 242;
Cobol85PreprocessorParser.SSRANGE = 243;
Cobol85PreprocessorParser.STD = 244;
Cobol85PreprocessorParser.SUPPRESS = 245;
Cobol85PreprocessorParser.SYSEIB = 246;
Cobol85PreprocessorParser.SZ = 247;
Cobol85PreprocessorParser.TERM = 248;
Cobol85PreprocessorParser.TERMINAL = 249;
Cobol85PreprocessorParser.TEST = 250;
Cobol85PreprocessorParser.THREAD = 251;
Cobol85PreprocessorParser.TITLE = 252;
Cobol85PreprocessorParser.TRIG = 253;
Cobol85PreprocessorParser.TRUNC = 254;
Cobol85PreprocessorParser.UE = 255;
Cobol85PreprocessorParser.UPPER = 256;
Cobol85PreprocessorParser.VBREF = 257;
Cobol85PreprocessorParser.WD = 258;
Cobol85PreprocessorParser.WORD = 259;
Cobol85PreprocessorParser.XMLPARSE = 260;
Cobol85PreprocessorParser.XMLSS = 261;
Cobol85PreprocessorParser.XOPTS = 262;
Cobol85PreprocessorParser.XP = 263;
Cobol85PreprocessorParser.XREF = 264;
Cobol85PreprocessorParser.YEARWINDOW = 265;
Cobol85PreprocessorParser.YW = 266;
Cobol85PreprocessorParser.ZWB = 267;
Cobol85PreprocessorParser.C_CHAR = 268;
Cobol85PreprocessorParser.D_CHAR = 269;
Cobol85PreprocessorParser.E_CHAR = 270;
Cobol85PreprocessorParser.F_CHAR = 271;
Cobol85PreprocessorParser.H_CHAR = 272;
Cobol85PreprocessorParser.I_CHAR = 273;
Cobol85PreprocessorParser.M_CHAR = 274;
Cobol85PreprocessorParser.N_CHAR = 275;
Cobol85PreprocessorParser.Q_CHAR = 276;
Cobol85PreprocessorParser.S_CHAR = 277;
Cobol85PreprocessorParser.U_CHAR = 278;
Cobol85PreprocessorParser.W_CHAR = 279;
Cobol85PreprocessorParser.X_CHAR = 280;
Cobol85PreprocessorParser.COMMENTTAG = 281;
Cobol85PreprocessorParser.COMMACHAR = 282;
Cobol85PreprocessorParser.DOT = 283;
Cobol85PreprocessorParser.DOUBLEEQUALCHAR = 284;
Cobol85PreprocessorParser.NONNUMERICLITERAL = 285;
Cobol85PreprocessorParser.NUMERICLITERAL = 286;
Cobol85PreprocessorParser.IDENTIFIER = 287;
Cobol85PreprocessorParser.FILENAME = 288;
Cobol85PreprocessorParser.NEWLINE = 289;
Cobol85PreprocessorParser.COMMENTLINE = 290;
Cobol85PreprocessorParser.WS = 291;
Cobol85PreprocessorParser.TEXT = 292;

Cobol85PreprocessorParser.RULE_startRule = 0;
Cobol85PreprocessorParser.RULE_compilerOptions = 1;
Cobol85PreprocessorParser.RULE_compilerXOpts = 2;
Cobol85PreprocessorParser.RULE_compilerOption = 3;
Cobol85PreprocessorParser.RULE_execCicsStatement = 4;
Cobol85PreprocessorParser.RULE_execSqlStatement = 5;
Cobol85PreprocessorParser.RULE_execSqlImsStatement = 6;
Cobol85PreprocessorParser.RULE_copyStatement = 7;
Cobol85PreprocessorParser.RULE_copySource = 8;
Cobol85PreprocessorParser.RULE_copyLibrary = 9;
Cobol85PreprocessorParser.RULE_replacingPhrase = 10;
Cobol85PreprocessorParser.RULE_replaceArea = 11;
Cobol85PreprocessorParser.RULE_replaceByStatement = 12;
Cobol85PreprocessorParser.RULE_replaceOffStatement = 13;
Cobol85PreprocessorParser.RULE_replaceClause = 14;
Cobol85PreprocessorParser.RULE_directoryPhrase = 15;
Cobol85PreprocessorParser.RULE_familyPhrase = 16;
Cobol85PreprocessorParser.RULE_replaceable = 17;
Cobol85PreprocessorParser.RULE_replacement = 18;
Cobol85PreprocessorParser.RULE_ejectStatement = 19;
Cobol85PreprocessorParser.RULE_skipStatement = 20;
Cobol85PreprocessorParser.RULE_titleStatement = 21;
Cobol85PreprocessorParser.RULE_pseudoText = 22;
Cobol85PreprocessorParser.RULE_charData = 23;
Cobol85PreprocessorParser.RULE_charDataSql = 24;
Cobol85PreprocessorParser.RULE_charDataLine = 25;
Cobol85PreprocessorParser.RULE_cobolWord = 26;
Cobol85PreprocessorParser.RULE_literal = 27;
Cobol85PreprocessorParser.RULE_filename = 28;
Cobol85PreprocessorParser.RULE_charDataKeyword = 29;

class StartRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_startRule;
    }

	EOF() {
	    return this.getToken(Cobol85PreprocessorParser.EOF, 0);
	};

	compilerOptions = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CompilerOptionsContext);
	    } else {
	        return this.getTypedRuleContext(CompilerOptionsContext,i);
	    }
	};

	copyStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CopyStatementContext);
	    } else {
	        return this.getTypedRuleContext(CopyStatementContext,i);
	    }
	};

	execCicsStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExecCicsStatementContext);
	    } else {
	        return this.getTypedRuleContext(ExecCicsStatementContext,i);
	    }
	};

	execSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExecSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ExecSqlStatementContext,i);
	    }
	};

	execSqlImsStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExecSqlImsStatementContext);
	    } else {
	        return this.getTypedRuleContext(ExecSqlImsStatementContext,i);
	    }
	};

	replaceOffStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReplaceOffStatementContext);
	    } else {
	        return this.getTypedRuleContext(ReplaceOffStatementContext,i);
	    }
	};

	replaceArea = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReplaceAreaContext);
	    } else {
	        return this.getTypedRuleContext(ReplaceAreaContext,i);
	    }
	};

	ejectStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EjectStatementContext);
	    } else {
	        return this.getTypedRuleContext(EjectStatementContext,i);
	    }
	};

	skipStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SkipStatementContext);
	    } else {
	        return this.getTypedRuleContext(SkipStatementContext,i);
	    }
	};

	titleStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TitleStatementContext);
	    } else {
	        return this.getTypedRuleContext(TitleStatementContext,i);
	    }
	};

	charDataLine = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CharDataLineContext);
	    } else {
	        return this.getTypedRuleContext(CharDataLineContext,i);
	    }
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.NEWLINE);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.NEWLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterStartRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitStartRule(this);
		}
	}


}



class CompilerOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_compilerOptions;
    }

	PROCESS() {
	    return this.getToken(Cobol85PreprocessorParser.PROCESS, 0);
	};

	CBL() {
	    return this.getToken(Cobol85PreprocessorParser.CBL, 0);
	};

	compilerOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CompilerOptionContext);
	    } else {
	        return this.getTypedRuleContext(CompilerOptionContext,i);
	    }
	};

	compilerXOpts = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CompilerXOptsContext);
	    } else {
	        return this.getTypedRuleContext(CompilerXOptsContext,i);
	    }
	};

	COMMACHAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.COMMACHAR);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.COMMACHAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterCompilerOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitCompilerOptions(this);
		}
	}


}



class CompilerXOptsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_compilerXOpts;
    }

	XOPTS() {
	    return this.getToken(Cobol85PreprocessorParser.XOPTS, 0);
	};

	LPARENCHAR() {
	    return this.getToken(Cobol85PreprocessorParser.LPARENCHAR, 0);
	};

	compilerOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CompilerOptionContext);
	    } else {
	        return this.getTypedRuleContext(CompilerOptionContext,i);
	    }
	};

	RPARENCHAR() {
	    return this.getToken(Cobol85PreprocessorParser.RPARENCHAR, 0);
	};

	COMMACHAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.COMMACHAR);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.COMMACHAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterCompilerXOpts(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitCompilerXOpts(this);
		}
	}


}



class CompilerOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_compilerOption;
    }

	ADATA() {
	    return this.getToken(Cobol85PreprocessorParser.ADATA, 0);
	};

	ADV() {
	    return this.getToken(Cobol85PreprocessorParser.ADV, 0);
	};

	APOST() {
	    return this.getToken(Cobol85PreprocessorParser.APOST, 0);
	};

	LPARENCHAR() {
	    return this.getToken(Cobol85PreprocessorParser.LPARENCHAR, 0);
	};

	RPARENCHAR() {
	    return this.getToken(Cobol85PreprocessorParser.RPARENCHAR, 0);
	};

	ARITH() {
	    return this.getToken(Cobol85PreprocessorParser.ARITH, 0);
	};

	AR() {
	    return this.getToken(Cobol85PreprocessorParser.AR, 0);
	};

	EXTEND() {
	    return this.getToken(Cobol85PreprocessorParser.EXTEND, 0);
	};

	E_CHAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.E_CHAR);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.E_CHAR, i);
	    }
	};


	COMPAT() {
	    return this.getToken(Cobol85PreprocessorParser.COMPAT, 0);
	};

	C_CHAR() {
	    return this.getToken(Cobol85PreprocessorParser.C_CHAR, 0);
	};

	AWO() {
	    return this.getToken(Cobol85PreprocessorParser.AWO, 0);
	};

	BLOCK0() {
	    return this.getToken(Cobol85PreprocessorParser.BLOCK0, 0);
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	BUFSIZE() {
	    return this.getToken(Cobol85PreprocessorParser.BUFSIZE, 0);
	};

	BUF() {
	    return this.getToken(Cobol85PreprocessorParser.BUF, 0);
	};

	CBLCARD() {
	    return this.getToken(Cobol85PreprocessorParser.CBLCARD, 0);
	};

	CICS() {
	    return this.getToken(Cobol85PreprocessorParser.CICS, 0);
	};

	COBOL2() {
	    return this.getToken(Cobol85PreprocessorParser.COBOL2, 0);
	};

	COBOL3() {
	    return this.getToken(Cobol85PreprocessorParser.COBOL3, 0);
	};

	CODEPAGE() {
	    return this.getToken(Cobol85PreprocessorParser.CODEPAGE, 0);
	};

	CP() {
	    return this.getToken(Cobol85PreprocessorParser.CP, 0);
	};

	COMPILE() {
	    return this.getToken(Cobol85PreprocessorParser.COMPILE, 0);
	};

	CPP() {
	    return this.getToken(Cobol85PreprocessorParser.CPP, 0);
	};

	CPSM() {
	    return this.getToken(Cobol85PreprocessorParser.CPSM, 0);
	};

	CURRENCY() {
	    return this.getToken(Cobol85PreprocessorParser.CURRENCY, 0);
	};

	CURR() {
	    return this.getToken(Cobol85PreprocessorParser.CURR, 0);
	};

	DATA() {
	    return this.getToken(Cobol85PreprocessorParser.DATA, 0);
	};

	DATEPROC() {
	    return this.getToken(Cobol85PreprocessorParser.DATEPROC, 0);
	};

	DP() {
	    return this.getToken(Cobol85PreprocessorParser.DP, 0);
	};

	COMMACHAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.COMMACHAR);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.COMMACHAR, i);
	    }
	};


	FLAG() {
	    return this.getToken(Cobol85PreprocessorParser.FLAG, 0);
	};

	NOFLAG() {
	    return this.getToken(Cobol85PreprocessorParser.NOFLAG, 0);
	};

	TRIG() {
	    return this.getToken(Cobol85PreprocessorParser.TRIG, 0);
	};

	NOTRIG() {
	    return this.getToken(Cobol85PreprocessorParser.NOTRIG, 0);
	};

	DBCS() {
	    return this.getToken(Cobol85PreprocessorParser.DBCS, 0);
	};

	DECK() {
	    return this.getToken(Cobol85PreprocessorParser.DECK, 0);
	};

	D_CHAR() {
	    return this.getToken(Cobol85PreprocessorParser.D_CHAR, 0);
	};

	DEBUG() {
	    return this.getToken(Cobol85PreprocessorParser.DEBUG, 0);
	};

	DIAGTRUNC() {
	    return this.getToken(Cobol85PreprocessorParser.DIAGTRUNC, 0);
	};

	DTR() {
	    return this.getToken(Cobol85PreprocessorParser.DTR, 0);
	};

	DLL() {
	    return this.getToken(Cobol85PreprocessorParser.DLL, 0);
	};

	DUMP() {
	    return this.getToken(Cobol85PreprocessorParser.DUMP, 0);
	};

	DU() {
	    return this.getToken(Cobol85PreprocessorParser.DU, 0);
	};

	DYNAM() {
	    return this.getToken(Cobol85PreprocessorParser.DYNAM, 0);
	};

	DYN() {
	    return this.getToken(Cobol85PreprocessorParser.DYN, 0);
	};

	EDF() {
	    return this.getToken(Cobol85PreprocessorParser.EDF, 0);
	};

	EPILOG() {
	    return this.getToken(Cobol85PreprocessorParser.EPILOG, 0);
	};

	EXIT() {
	    return this.getToken(Cobol85PreprocessorParser.EXIT, 0);
	};

	EXPORTALL() {
	    return this.getToken(Cobol85PreprocessorParser.EXPORTALL, 0);
	};

	EXP() {
	    return this.getToken(Cobol85PreprocessorParser.EXP, 0);
	};

	FASTSRT() {
	    return this.getToken(Cobol85PreprocessorParser.FASTSRT, 0);
	};

	FSRT() {
	    return this.getToken(Cobol85PreprocessorParser.FSRT, 0);
	};

	FEPI() {
	    return this.getToken(Cobol85PreprocessorParser.FEPI, 0);
	};

	F_CHAR() {
	    return this.getToken(Cobol85PreprocessorParser.F_CHAR, 0);
	};

	I_CHAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.I_CHAR);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.I_CHAR, i);
	    }
	};


	S_CHAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.S_CHAR);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.S_CHAR, i);
	    }
	};


	U_CHAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.U_CHAR);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.U_CHAR, i);
	    }
	};


	W_CHAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.W_CHAR);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.W_CHAR, i);
	    }
	};


	FLAGSTD() {
	    return this.getToken(Cobol85PreprocessorParser.FLAGSTD, 0);
	};

	M_CHAR() {
	    return this.getToken(Cobol85PreprocessorParser.M_CHAR, 0);
	};

	H_CHAR() {
	    return this.getToken(Cobol85PreprocessorParser.H_CHAR, 0);
	};

	DD() {
	    return this.getToken(Cobol85PreprocessorParser.DD, 0);
	};

	N_CHAR() {
	    return this.getToken(Cobol85PreprocessorParser.N_CHAR, 0);
	};

	NN() {
	    return this.getToken(Cobol85PreprocessorParser.NN, 0);
	};

	SS() {
	    return this.getToken(Cobol85PreprocessorParser.SS, 0);
	};

	GDS() {
	    return this.getToken(Cobol85PreprocessorParser.GDS, 0);
	};

	GRAPHIC() {
	    return this.getToken(Cobol85PreprocessorParser.GRAPHIC, 0);
	};

	INTDATE() {
	    return this.getToken(Cobol85PreprocessorParser.INTDATE, 0);
	};

	ANSI() {
	    return this.getToken(Cobol85PreprocessorParser.ANSI, 0);
	};

	LILIAN() {
	    return this.getToken(Cobol85PreprocessorParser.LILIAN, 0);
	};

	LANGUAGE() {
	    return this.getToken(Cobol85PreprocessorParser.LANGUAGE, 0);
	};

	LANG() {
	    return this.getToken(Cobol85PreprocessorParser.LANG, 0);
	};

	ENGLISH() {
	    return this.getToken(Cobol85PreprocessorParser.ENGLISH, 0);
	};

	CS() {
	    return this.getToken(Cobol85PreprocessorParser.CS, 0);
	};

	EN() {
	    return this.getToken(Cobol85PreprocessorParser.EN, 0);
	};

	JA() {
	    return this.getToken(Cobol85PreprocessorParser.JA, 0);
	};

	JP() {
	    return this.getToken(Cobol85PreprocessorParser.JP, 0);
	};

	KA() {
	    return this.getToken(Cobol85PreprocessorParser.KA, 0);
	};

	UE() {
	    return this.getToken(Cobol85PreprocessorParser.UE, 0);
	};

	LEASM() {
	    return this.getToken(Cobol85PreprocessorParser.LEASM, 0);
	};

	LENGTH() {
	    return this.getToken(Cobol85PreprocessorParser.LENGTH, 0);
	};

	LIB() {
	    return this.getToken(Cobol85PreprocessorParser.LIB, 0);
	};

	LIN() {
	    return this.getToken(Cobol85PreprocessorParser.LIN, 0);
	};

	LINECOUNT() {
	    return this.getToken(Cobol85PreprocessorParser.LINECOUNT, 0);
	};

	LC() {
	    return this.getToken(Cobol85PreprocessorParser.LC, 0);
	};

	LINKAGE() {
	    return this.getToken(Cobol85PreprocessorParser.LINKAGE, 0);
	};

	LIST() {
	    return this.getToken(Cobol85PreprocessorParser.LIST, 0);
	};

	MAP() {
	    return this.getToken(Cobol85PreprocessorParser.MAP, 0);
	};

	MARGINS() {
	    return this.getToken(Cobol85PreprocessorParser.MARGINS, 0);
	};

	MDECK() {
	    return this.getToken(Cobol85PreprocessorParser.MDECK, 0);
	};

	MD() {
	    return this.getToken(Cobol85PreprocessorParser.MD, 0);
	};

	NOC() {
	    return this.getToken(Cobol85PreprocessorParser.NOC, 0);
	};

	NOCOMPILE() {
	    return this.getToken(Cobol85PreprocessorParser.NOCOMPILE, 0);
	};

	NAME() {
	    return this.getToken(Cobol85PreprocessorParser.NAME, 0);
	};

	ALIAS() {
	    return this.getToken(Cobol85PreprocessorParser.ALIAS, 0);
	};

	NOALIAS() {
	    return this.getToken(Cobol85PreprocessorParser.NOALIAS, 0);
	};

	NATLANG() {
	    return this.getToken(Cobol85PreprocessorParser.NATLANG, 0);
	};

	NOADATA() {
	    return this.getToken(Cobol85PreprocessorParser.NOADATA, 0);
	};

	NOADV() {
	    return this.getToken(Cobol85PreprocessorParser.NOADV, 0);
	};

	NOAWO() {
	    return this.getToken(Cobol85PreprocessorParser.NOAWO, 0);
	};

	NOBLOCK0() {
	    return this.getToken(Cobol85PreprocessorParser.NOBLOCK0, 0);
	};

	NOCBLCARD() {
	    return this.getToken(Cobol85PreprocessorParser.NOCBLCARD, 0);
	};

	NOCICS() {
	    return this.getToken(Cobol85PreprocessorParser.NOCICS, 0);
	};

	NOCMPR2() {
	    return this.getToken(Cobol85PreprocessorParser.NOCMPR2, 0);
	};

	NOCPSM() {
	    return this.getToken(Cobol85PreprocessorParser.NOCPSM, 0);
	};

	NOCURRENCY() {
	    return this.getToken(Cobol85PreprocessorParser.NOCURRENCY, 0);
	};

	NOCURR() {
	    return this.getToken(Cobol85PreprocessorParser.NOCURR, 0);
	};

	NODATEPROC() {
	    return this.getToken(Cobol85PreprocessorParser.NODATEPROC, 0);
	};

	NODP() {
	    return this.getToken(Cobol85PreprocessorParser.NODP, 0);
	};

	NODBCS() {
	    return this.getToken(Cobol85PreprocessorParser.NODBCS, 0);
	};

	NODEBUG() {
	    return this.getToken(Cobol85PreprocessorParser.NODEBUG, 0);
	};

	NODECK() {
	    return this.getToken(Cobol85PreprocessorParser.NODECK, 0);
	};

	NOD() {
	    return this.getToken(Cobol85PreprocessorParser.NOD, 0);
	};

	NODLL() {
	    return this.getToken(Cobol85PreprocessorParser.NODLL, 0);
	};

	NODE() {
	    return this.getToken(Cobol85PreprocessorParser.NODE, 0);
	};

	NODUMP() {
	    return this.getToken(Cobol85PreprocessorParser.NODUMP, 0);
	};

	NODU() {
	    return this.getToken(Cobol85PreprocessorParser.NODU, 0);
	};

	NODIAGTRUNC() {
	    return this.getToken(Cobol85PreprocessorParser.NODIAGTRUNC, 0);
	};

	NODTR() {
	    return this.getToken(Cobol85PreprocessorParser.NODTR, 0);
	};

	NODYNAM() {
	    return this.getToken(Cobol85PreprocessorParser.NODYNAM, 0);
	};

	NODYN() {
	    return this.getToken(Cobol85PreprocessorParser.NODYN, 0);
	};

	NOEDF() {
	    return this.getToken(Cobol85PreprocessorParser.NOEDF, 0);
	};

	NOEPILOG() {
	    return this.getToken(Cobol85PreprocessorParser.NOEPILOG, 0);
	};

	NOEXIT() {
	    return this.getToken(Cobol85PreprocessorParser.NOEXIT, 0);
	};

	NOEXPORTALL() {
	    return this.getToken(Cobol85PreprocessorParser.NOEXPORTALL, 0);
	};

	NOEXP() {
	    return this.getToken(Cobol85PreprocessorParser.NOEXP, 0);
	};

	NOFASTSRT() {
	    return this.getToken(Cobol85PreprocessorParser.NOFASTSRT, 0);
	};

	NOFSRT() {
	    return this.getToken(Cobol85PreprocessorParser.NOFSRT, 0);
	};

	NOFEPI() {
	    return this.getToken(Cobol85PreprocessorParser.NOFEPI, 0);
	};

	NOF() {
	    return this.getToken(Cobol85PreprocessorParser.NOF, 0);
	};

	NOFLAGMIG() {
	    return this.getToken(Cobol85PreprocessorParser.NOFLAGMIG, 0);
	};

	NOFLAGSTD() {
	    return this.getToken(Cobol85PreprocessorParser.NOFLAGSTD, 0);
	};

	NOGRAPHIC() {
	    return this.getToken(Cobol85PreprocessorParser.NOGRAPHIC, 0);
	};

	NOLENGTH() {
	    return this.getToken(Cobol85PreprocessorParser.NOLENGTH, 0);
	};

	NOLIB() {
	    return this.getToken(Cobol85PreprocessorParser.NOLIB, 0);
	};

	NOLINKAGE() {
	    return this.getToken(Cobol85PreprocessorParser.NOLINKAGE, 0);
	};

	NOLIST() {
	    return this.getToken(Cobol85PreprocessorParser.NOLIST, 0);
	};

	NOMAP() {
	    return this.getToken(Cobol85PreprocessorParser.NOMAP, 0);
	};

	NOMDECK() {
	    return this.getToken(Cobol85PreprocessorParser.NOMDECK, 0);
	};

	NOMD() {
	    return this.getToken(Cobol85PreprocessorParser.NOMD, 0);
	};

	NONAME() {
	    return this.getToken(Cobol85PreprocessorParser.NONAME, 0);
	};

	NONUMBER() {
	    return this.getToken(Cobol85PreprocessorParser.NONUMBER, 0);
	};

	NONUM() {
	    return this.getToken(Cobol85PreprocessorParser.NONUM, 0);
	};

	NOOBJECT() {
	    return this.getToken(Cobol85PreprocessorParser.NOOBJECT, 0);
	};

	NOOBJ() {
	    return this.getToken(Cobol85PreprocessorParser.NOOBJ, 0);
	};

	NOOFFSET() {
	    return this.getToken(Cobol85PreprocessorParser.NOOFFSET, 0);
	};

	NOOFF() {
	    return this.getToken(Cobol85PreprocessorParser.NOOFF, 0);
	};

	NOOPSEQUENCE() {
	    return this.getToken(Cobol85PreprocessorParser.NOOPSEQUENCE, 0);
	};

	NOOPTIMIZE() {
	    return this.getToken(Cobol85PreprocessorParser.NOOPTIMIZE, 0);
	};

	NOOPT() {
	    return this.getToken(Cobol85PreprocessorParser.NOOPT, 0);
	};

	NOOPTIONS() {
	    return this.getToken(Cobol85PreprocessorParser.NOOPTIONS, 0);
	};

	NOP() {
	    return this.getToken(Cobol85PreprocessorParser.NOP, 0);
	};

	NOPROLOG() {
	    return this.getToken(Cobol85PreprocessorParser.NOPROLOG, 0);
	};

	NORENT() {
	    return this.getToken(Cobol85PreprocessorParser.NORENT, 0);
	};

	NOSEQUENCE() {
	    return this.getToken(Cobol85PreprocessorParser.NOSEQUENCE, 0);
	};

	NOSEQ() {
	    return this.getToken(Cobol85PreprocessorParser.NOSEQ, 0);
	};

	NOSOURCE() {
	    return this.getToken(Cobol85PreprocessorParser.NOSOURCE, 0);
	};

	NOS() {
	    return this.getToken(Cobol85PreprocessorParser.NOS, 0);
	};

	NOSPIE() {
	    return this.getToken(Cobol85PreprocessorParser.NOSPIE, 0);
	};

	NOSQL() {
	    return this.getToken(Cobol85PreprocessorParser.NOSQL, 0);
	};

	NOSQLCCSID() {
	    return this.getToken(Cobol85PreprocessorParser.NOSQLCCSID, 0);
	};

	NOSQLC() {
	    return this.getToken(Cobol85PreprocessorParser.NOSQLC, 0);
	};

	NOSSRANGE() {
	    return this.getToken(Cobol85PreprocessorParser.NOSSRANGE, 0);
	};

	NOSSR() {
	    return this.getToken(Cobol85PreprocessorParser.NOSSR, 0);
	};

	NOSTDTRUNC() {
	    return this.getToken(Cobol85PreprocessorParser.NOSTDTRUNC, 0);
	};

	NOTERMINAL() {
	    return this.getToken(Cobol85PreprocessorParser.NOTERMINAL, 0);
	};

	NOTERM() {
	    return this.getToken(Cobol85PreprocessorParser.NOTERM, 0);
	};

	NOTEST() {
	    return this.getToken(Cobol85PreprocessorParser.NOTEST, 0);
	};

	NOTHREAD() {
	    return this.getToken(Cobol85PreprocessorParser.NOTHREAD, 0);
	};

	NOVBREF() {
	    return this.getToken(Cobol85PreprocessorParser.NOVBREF, 0);
	};

	NOWORD() {
	    return this.getToken(Cobol85PreprocessorParser.NOWORD, 0);
	};

	NOWD() {
	    return this.getToken(Cobol85PreprocessorParser.NOWD, 0);
	};

	NSEQ() {
	    return this.getToken(Cobol85PreprocessorParser.NSEQ, 0);
	};

	NSYMBOL() {
	    return this.getToken(Cobol85PreprocessorParser.NSYMBOL, 0);
	};

	NS() {
	    return this.getToken(Cobol85PreprocessorParser.NS, 0);
	};

	NATIONAL() {
	    return this.getToken(Cobol85PreprocessorParser.NATIONAL, 0);
	};

	NAT() {
	    return this.getToken(Cobol85PreprocessorParser.NAT, 0);
	};

	NOXREF() {
	    return this.getToken(Cobol85PreprocessorParser.NOXREF, 0);
	};

	NOX() {
	    return this.getToken(Cobol85PreprocessorParser.NOX, 0);
	};

	NOZWB() {
	    return this.getToken(Cobol85PreprocessorParser.NOZWB, 0);
	};

	NUMBER() {
	    return this.getToken(Cobol85PreprocessorParser.NUMBER, 0);
	};

	NUM() {
	    return this.getToken(Cobol85PreprocessorParser.NUM, 0);
	};

	NUMPROC() {
	    return this.getToken(Cobol85PreprocessorParser.NUMPROC, 0);
	};

	MIG() {
	    return this.getToken(Cobol85PreprocessorParser.MIG, 0);
	};

	NOPFD() {
	    return this.getToken(Cobol85PreprocessorParser.NOPFD, 0);
	};

	PFD() {
	    return this.getToken(Cobol85PreprocessorParser.PFD, 0);
	};

	OBJECT() {
	    return this.getToken(Cobol85PreprocessorParser.OBJECT, 0);
	};

	OBJ() {
	    return this.getToken(Cobol85PreprocessorParser.OBJ, 0);
	};

	OFFSET() {
	    return this.getToken(Cobol85PreprocessorParser.OFFSET, 0);
	};

	OFF() {
	    return this.getToken(Cobol85PreprocessorParser.OFF, 0);
	};

	OPMARGINS() {
	    return this.getToken(Cobol85PreprocessorParser.OPMARGINS, 0);
	};

	OPSEQUENCE() {
	    return this.getToken(Cobol85PreprocessorParser.OPSEQUENCE, 0);
	};

	OPTIMIZE() {
	    return this.getToken(Cobol85PreprocessorParser.OPTIMIZE, 0);
	};

	OPT() {
	    return this.getToken(Cobol85PreprocessorParser.OPT, 0);
	};

	FULL() {
	    return this.getToken(Cobol85PreprocessorParser.FULL, 0);
	};

	STD() {
	    return this.getToken(Cobol85PreprocessorParser.STD, 0);
	};

	OPTFILE() {
	    return this.getToken(Cobol85PreprocessorParser.OPTFILE, 0);
	};

	OPTIONS() {
	    return this.getToken(Cobol85PreprocessorParser.OPTIONS, 0);
	};

	OP() {
	    return this.getToken(Cobol85PreprocessorParser.OP, 0);
	};

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	OUTDD() {
	    return this.getToken(Cobol85PreprocessorParser.OUTDD, 0);
	};

	OUT() {
	    return this.getToken(Cobol85PreprocessorParser.OUT, 0);
	};

	PGMNAME() {
	    return this.getToken(Cobol85PreprocessorParser.PGMNAME, 0);
	};

	PGMN() {
	    return this.getToken(Cobol85PreprocessorParser.PGMN, 0);
	};

	CO() {
	    return this.getToken(Cobol85PreprocessorParser.CO, 0);
	};

	LM() {
	    return this.getToken(Cobol85PreprocessorParser.LM, 0);
	};

	LONGMIXED() {
	    return this.getToken(Cobol85PreprocessorParser.LONGMIXED, 0);
	};

	LONGUPPER() {
	    return this.getToken(Cobol85PreprocessorParser.LONGUPPER, 0);
	};

	LU() {
	    return this.getToken(Cobol85PreprocessorParser.LU, 0);
	};

	MIXED() {
	    return this.getToken(Cobol85PreprocessorParser.MIXED, 0);
	};

	UPPER() {
	    return this.getToken(Cobol85PreprocessorParser.UPPER, 0);
	};

	PROLOG() {
	    return this.getToken(Cobol85PreprocessorParser.PROLOG, 0);
	};

	QUOTE() {
	    return this.getToken(Cobol85PreprocessorParser.QUOTE, 0);
	};

	Q_CHAR() {
	    return this.getToken(Cobol85PreprocessorParser.Q_CHAR, 0);
	};

	RENT() {
	    return this.getToken(Cobol85PreprocessorParser.RENT, 0);
	};

	RMODE() {
	    return this.getToken(Cobol85PreprocessorParser.RMODE, 0);
	};

	ANY() {
	    return this.getToken(Cobol85PreprocessorParser.ANY, 0);
	};

	AUTO() {
	    return this.getToken(Cobol85PreprocessorParser.AUTO, 0);
	};

	SEQUENCE() {
	    return this.getToken(Cobol85PreprocessorParser.SEQUENCE, 0);
	};

	SEQ() {
	    return this.getToken(Cobol85PreprocessorParser.SEQ, 0);
	};

	SIZE() {
	    return this.getToken(Cobol85PreprocessorParser.SIZE, 0);
	};

	SZ() {
	    return this.getToken(Cobol85PreprocessorParser.SZ, 0);
	};

	MAX() {
	    return this.getToken(Cobol85PreprocessorParser.MAX, 0);
	};

	SOURCE() {
	    return this.getToken(Cobol85PreprocessorParser.SOURCE, 0);
	};

	SP() {
	    return this.getToken(Cobol85PreprocessorParser.SP, 0);
	};

	SPACE() {
	    return this.getToken(Cobol85PreprocessorParser.SPACE, 0);
	};

	SPIE() {
	    return this.getToken(Cobol85PreprocessorParser.SPIE, 0);
	};

	SQL() {
	    return this.getToken(Cobol85PreprocessorParser.SQL, 0);
	};

	SQLCCSID() {
	    return this.getToken(Cobol85PreprocessorParser.SQLCCSID, 0);
	};

	SQLC() {
	    return this.getToken(Cobol85PreprocessorParser.SQLC, 0);
	};

	SSRANGE() {
	    return this.getToken(Cobol85PreprocessorParser.SSRANGE, 0);
	};

	SSR() {
	    return this.getToken(Cobol85PreprocessorParser.SSR, 0);
	};

	SYSEIB() {
	    return this.getToken(Cobol85PreprocessorParser.SYSEIB, 0);
	};

	TERMINAL() {
	    return this.getToken(Cobol85PreprocessorParser.TERMINAL, 0);
	};

	TERM() {
	    return this.getToken(Cobol85PreprocessorParser.TERM, 0);
	};

	TEST() {
	    return this.getToken(Cobol85PreprocessorParser.TEST, 0);
	};

	HOOK() {
	    return this.getToken(Cobol85PreprocessorParser.HOOK, 0);
	};

	NOHOOK() {
	    return this.getToken(Cobol85PreprocessorParser.NOHOOK, 0);
	};

	SEP() {
	    return this.getToken(Cobol85PreprocessorParser.SEP, 0);
	};

	SEPARATE() {
	    return this.getToken(Cobol85PreprocessorParser.SEPARATE, 0);
	};

	NOSEP() {
	    return this.getToken(Cobol85PreprocessorParser.NOSEP, 0);
	};

	NOSEPARATE() {
	    return this.getToken(Cobol85PreprocessorParser.NOSEPARATE, 0);
	};

	EJPD() {
	    return this.getToken(Cobol85PreprocessorParser.EJPD, 0);
	};

	NOEJPD() {
	    return this.getToken(Cobol85PreprocessorParser.NOEJPD, 0);
	};

	THREAD() {
	    return this.getToken(Cobol85PreprocessorParser.THREAD, 0);
	};

	TRUNC() {
	    return this.getToken(Cobol85PreprocessorParser.TRUNC, 0);
	};

	BIN() {
	    return this.getToken(Cobol85PreprocessorParser.BIN, 0);
	};

	VBREF() {
	    return this.getToken(Cobol85PreprocessorParser.VBREF, 0);
	};

	WORD() {
	    return this.getToken(Cobol85PreprocessorParser.WORD, 0);
	};

	WD() {
	    return this.getToken(Cobol85PreprocessorParser.WD, 0);
	};

	XMLPARSE() {
	    return this.getToken(Cobol85PreprocessorParser.XMLPARSE, 0);
	};

	XP() {
	    return this.getToken(Cobol85PreprocessorParser.XP, 0);
	};

	XMLSS() {
	    return this.getToken(Cobol85PreprocessorParser.XMLSS, 0);
	};

	X_CHAR() {
	    return this.getToken(Cobol85PreprocessorParser.X_CHAR, 0);
	};

	XREF() {
	    return this.getToken(Cobol85PreprocessorParser.XREF, 0);
	};

	SHORT() {
	    return this.getToken(Cobol85PreprocessorParser.SHORT, 0);
	};

	YEARWINDOW() {
	    return this.getToken(Cobol85PreprocessorParser.YEARWINDOW, 0);
	};

	YW() {
	    return this.getToken(Cobol85PreprocessorParser.YW, 0);
	};

	ZWB() {
	    return this.getToken(Cobol85PreprocessorParser.ZWB, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterCompilerOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitCompilerOption(this);
		}
	}


}



class ExecCicsStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_execCicsStatement;
    }

	EXEC() {
	    return this.getToken(Cobol85PreprocessorParser.EXEC, 0);
	};

	CICS() {
	    return this.getToken(Cobol85PreprocessorParser.CICS, 0);
	};

	charData() {
	    return this.getTypedRuleContext(CharDataContext,0);
	};

	END_EXEC() {
	    return this.getToken(Cobol85PreprocessorParser.END_EXEC, 0);
	};

	DOT() {
	    return this.getToken(Cobol85PreprocessorParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterExecCicsStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitExecCicsStatement(this);
		}
	}


}



class ExecSqlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_execSqlStatement;
    }

	EXEC() {
	    return this.getToken(Cobol85PreprocessorParser.EXEC, 0);
	};

	SQL() {
	    return this.getToken(Cobol85PreprocessorParser.SQL, 0);
	};

	charDataSql() {
	    return this.getTypedRuleContext(CharDataSqlContext,0);
	};

	END_EXEC() {
	    return this.getToken(Cobol85PreprocessorParser.END_EXEC, 0);
	};

	DOT() {
	    return this.getToken(Cobol85PreprocessorParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterExecSqlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitExecSqlStatement(this);
		}
	}


}



class ExecSqlImsStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_execSqlImsStatement;
    }

	EXEC() {
	    return this.getToken(Cobol85PreprocessorParser.EXEC, 0);
	};

	SQLIMS() {
	    return this.getToken(Cobol85PreprocessorParser.SQLIMS, 0);
	};

	charData() {
	    return this.getTypedRuleContext(CharDataContext,0);
	};

	END_EXEC() {
	    return this.getToken(Cobol85PreprocessorParser.END_EXEC, 0);
	};

	DOT() {
	    return this.getToken(Cobol85PreprocessorParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterExecSqlImsStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitExecSqlImsStatement(this);
		}
	}


}



class CopyStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_copyStatement;
    }

	COPY() {
	    return this.getToken(Cobol85PreprocessorParser.COPY, 0);
	};

	copySource() {
	    return this.getTypedRuleContext(CopySourceContext,0);
	};

	DOT() {
	    return this.getToken(Cobol85PreprocessorParser.DOT, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.NEWLINE);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.NEWLINE, i);
	    }
	};


	directoryPhrase = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DirectoryPhraseContext);
	    } else {
	        return this.getTypedRuleContext(DirectoryPhraseContext,i);
	    }
	};

	familyPhrase = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FamilyPhraseContext);
	    } else {
	        return this.getTypedRuleContext(FamilyPhraseContext,i);
	    }
	};

	replacingPhrase = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReplacingPhraseContext);
	    } else {
	        return this.getTypedRuleContext(ReplacingPhraseContext,i);
	    }
	};

	SUPPRESS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.SUPPRESS);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.SUPPRESS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterCopyStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitCopyStatement(this);
		}
	}


}



class CopySourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_copySource;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	filename() {
	    return this.getTypedRuleContext(FilenameContext,0);
	};

	copyLibrary() {
	    return this.getTypedRuleContext(CopyLibraryContext,0);
	};

	OF() {
	    return this.getToken(Cobol85PreprocessorParser.OF, 0);
	};

	IN() {
	    return this.getToken(Cobol85PreprocessorParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterCopySource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitCopySource(this);
		}
	}


}



class CopyLibraryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_copyLibrary;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterCopyLibrary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitCopyLibrary(this);
		}
	}


}



class ReplacingPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_replacingPhrase;
    }

	REPLACING() {
	    return this.getToken(Cobol85PreprocessorParser.REPLACING, 0);
	};

	replaceClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReplaceClauseContext);
	    } else {
	        return this.getTypedRuleContext(ReplaceClauseContext,i);
	    }
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.NEWLINE);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.NEWLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterReplacingPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitReplacingPhrase(this);
		}
	}


}



class ReplaceAreaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_replaceArea;
    }

	replaceByStatement() {
	    return this.getTypedRuleContext(ReplaceByStatementContext,0);
	};

	copyStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CopyStatementContext);
	    } else {
	        return this.getTypedRuleContext(CopyStatementContext,i);
	    }
	};

	charData = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CharDataContext);
	    } else {
	        return this.getTypedRuleContext(CharDataContext,i);
	    }
	};

	replaceOffStatement() {
	    return this.getTypedRuleContext(ReplaceOffStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterReplaceArea(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitReplaceArea(this);
		}
	}


}



class ReplaceByStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_replaceByStatement;
    }

	REPLACE() {
	    return this.getToken(Cobol85PreprocessorParser.REPLACE, 0);
	};

	DOT() {
	    return this.getToken(Cobol85PreprocessorParser.DOT, 0);
	};

	replaceClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReplaceClauseContext);
	    } else {
	        return this.getTypedRuleContext(ReplaceClauseContext,i);
	    }
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.NEWLINE);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.NEWLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterReplaceByStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitReplaceByStatement(this);
		}
	}


}



class ReplaceOffStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_replaceOffStatement;
    }

	REPLACE() {
	    return this.getToken(Cobol85PreprocessorParser.REPLACE, 0);
	};

	OFF() {
	    return this.getToken(Cobol85PreprocessorParser.OFF, 0);
	};

	DOT() {
	    return this.getToken(Cobol85PreprocessorParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterReplaceOffStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitReplaceOffStatement(this);
		}
	}


}



class ReplaceClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_replaceClause;
    }

	replaceable() {
	    return this.getTypedRuleContext(ReplaceableContext,0);
	};

	BY() {
	    return this.getToken(Cobol85PreprocessorParser.BY, 0);
	};

	replacement() {
	    return this.getTypedRuleContext(ReplacementContext,0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.NEWLINE);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.NEWLINE, i);
	    }
	};


	directoryPhrase() {
	    return this.getTypedRuleContext(DirectoryPhraseContext,0);
	};

	familyPhrase() {
	    return this.getTypedRuleContext(FamilyPhraseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterReplaceClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitReplaceClause(this);
		}
	}


}



class DirectoryPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_directoryPhrase;
    }

	OF() {
	    return this.getToken(Cobol85PreprocessorParser.OF, 0);
	};

	IN() {
	    return this.getToken(Cobol85PreprocessorParser.IN, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.NEWLINE);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.NEWLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterDirectoryPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitDirectoryPhrase(this);
		}
	}


}



class FamilyPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_familyPhrase;
    }

	ON() {
	    return this.getToken(Cobol85PreprocessorParser.ON, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.NEWLINE);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.NEWLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterFamilyPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitFamilyPhrase(this);
		}
	}


}



class ReplaceableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_replaceable;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	pseudoText() {
	    return this.getTypedRuleContext(PseudoTextContext,0);
	};

	charDataLine() {
	    return this.getTypedRuleContext(CharDataLineContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterReplaceable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitReplaceable(this);
		}
	}


}



class ReplacementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_replacement;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	cobolWord() {
	    return this.getTypedRuleContext(CobolWordContext,0);
	};

	pseudoText() {
	    return this.getTypedRuleContext(PseudoTextContext,0);
	};

	charDataLine() {
	    return this.getTypedRuleContext(CharDataLineContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterReplacement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitReplacement(this);
		}
	}


}



class EjectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_ejectStatement;
    }

	EJECT() {
	    return this.getToken(Cobol85PreprocessorParser.EJECT, 0);
	};

	DOT() {
	    return this.getToken(Cobol85PreprocessorParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterEjectStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitEjectStatement(this);
		}
	}


}



class SkipStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_skipStatement;
    }

	SKIP1() {
	    return this.getToken(Cobol85PreprocessorParser.SKIP1, 0);
	};

	SKIP2() {
	    return this.getToken(Cobol85PreprocessorParser.SKIP2, 0);
	};

	SKIP3() {
	    return this.getToken(Cobol85PreprocessorParser.SKIP3, 0);
	};

	DOT() {
	    return this.getToken(Cobol85PreprocessorParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterSkipStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitSkipStatement(this);
		}
	}


}



class TitleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_titleStatement;
    }

	TITLE() {
	    return this.getToken(Cobol85PreprocessorParser.TITLE, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	DOT() {
	    return this.getToken(Cobol85PreprocessorParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterTitleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitTitleStatement(this);
		}
	}


}



class PseudoTextContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_pseudoText;
    }

	DOUBLEEQUALCHAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.DOUBLEEQUALCHAR);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.DOUBLEEQUALCHAR, i);
	    }
	};


	charData() {
	    return this.getTypedRuleContext(CharDataContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterPseudoText(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitPseudoText(this);
		}
	}


}



class CharDataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_charData;
    }

	charDataLine = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CharDataLineContext);
	    } else {
	        return this.getTypedRuleContext(CharDataLineContext,i);
	    }
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.NEWLINE);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.NEWLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterCharData(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitCharData(this);
		}
	}


}



class CharDataSqlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_charDataSql;
    }

	charDataLine = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CharDataLineContext);
	    } else {
	        return this.getTypedRuleContext(CharDataLineContext,i);
	    }
	};

	COPY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.COPY);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.COPY, i);
	    }
	};


	REPLACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.REPLACE);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.REPLACE, i);
	    }
	};


	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.NEWLINE);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.NEWLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterCharDataSql(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitCharDataSql(this);
		}
	}


}



class CharDataLineContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_charDataLine;
    }

	cobolWord = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CobolWordContext);
	    } else {
	        return this.getTypedRuleContext(CobolWordContext,i);
	    }
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	filename = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FilenameContext);
	    } else {
	        return this.getTypedRuleContext(FilenameContext,i);
	    }
	};

	TEXT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.TEXT);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.TEXT, i);
	    }
	};


	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.DOT);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.DOT, i);
	    }
	};


	LPARENCHAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.LPARENCHAR);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.LPARENCHAR, i);
	    }
	};


	RPARENCHAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Cobol85PreprocessorParser.RPARENCHAR);
	    } else {
	        return this.getToken(Cobol85PreprocessorParser.RPARENCHAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterCharDataLine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitCharDataLine(this);
		}
	}


}



class CobolWordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_cobolWord;
    }

	IDENTIFIER() {
	    return this.getToken(Cobol85PreprocessorParser.IDENTIFIER, 0);
	};

	charDataKeyword() {
	    return this.getTypedRuleContext(CharDataKeywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterCobolWord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitCobolWord(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_literal;
    }

	NONNUMERICLITERAL() {
	    return this.getToken(Cobol85PreprocessorParser.NONNUMERICLITERAL, 0);
	};

	NUMERICLITERAL() {
	    return this.getToken(Cobol85PreprocessorParser.NUMERICLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class FilenameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_filename;
    }

	FILENAME() {
	    return this.getToken(Cobol85PreprocessorParser.FILENAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterFilename(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitFilename(this);
		}
	}


}



class CharDataKeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Cobol85PreprocessorParser.RULE_charDataKeyword;
    }

	ADATA() {
	    return this.getToken(Cobol85PreprocessorParser.ADATA, 0);
	};

	ADV() {
	    return this.getToken(Cobol85PreprocessorParser.ADV, 0);
	};

	ALIAS() {
	    return this.getToken(Cobol85PreprocessorParser.ALIAS, 0);
	};

	ANSI() {
	    return this.getToken(Cobol85PreprocessorParser.ANSI, 0);
	};

	ANY() {
	    return this.getToken(Cobol85PreprocessorParser.ANY, 0);
	};

	APOST() {
	    return this.getToken(Cobol85PreprocessorParser.APOST, 0);
	};

	AR() {
	    return this.getToken(Cobol85PreprocessorParser.AR, 0);
	};

	ARITH() {
	    return this.getToken(Cobol85PreprocessorParser.ARITH, 0);
	};

	AUTO() {
	    return this.getToken(Cobol85PreprocessorParser.AUTO, 0);
	};

	AWO() {
	    return this.getToken(Cobol85PreprocessorParser.AWO, 0);
	};

	BIN() {
	    return this.getToken(Cobol85PreprocessorParser.BIN, 0);
	};

	BLOCK0() {
	    return this.getToken(Cobol85PreprocessorParser.BLOCK0, 0);
	};

	BUF() {
	    return this.getToken(Cobol85PreprocessorParser.BUF, 0);
	};

	BUFSIZE() {
	    return this.getToken(Cobol85PreprocessorParser.BUFSIZE, 0);
	};

	BY() {
	    return this.getToken(Cobol85PreprocessorParser.BY, 0);
	};

	CBL() {
	    return this.getToken(Cobol85PreprocessorParser.CBL, 0);
	};

	CBLCARD() {
	    return this.getToken(Cobol85PreprocessorParser.CBLCARD, 0);
	};

	CO() {
	    return this.getToken(Cobol85PreprocessorParser.CO, 0);
	};

	COBOL2() {
	    return this.getToken(Cobol85PreprocessorParser.COBOL2, 0);
	};

	COBOL3() {
	    return this.getToken(Cobol85PreprocessorParser.COBOL3, 0);
	};

	CODEPAGE() {
	    return this.getToken(Cobol85PreprocessorParser.CODEPAGE, 0);
	};

	COMMACHAR() {
	    return this.getToken(Cobol85PreprocessorParser.COMMACHAR, 0);
	};

	COMPAT() {
	    return this.getToken(Cobol85PreprocessorParser.COMPAT, 0);
	};

	COMPILE() {
	    return this.getToken(Cobol85PreprocessorParser.COMPILE, 0);
	};

	CP() {
	    return this.getToken(Cobol85PreprocessorParser.CP, 0);
	};

	CPP() {
	    return this.getToken(Cobol85PreprocessorParser.CPP, 0);
	};

	CPSM() {
	    return this.getToken(Cobol85PreprocessorParser.CPSM, 0);
	};

	CS() {
	    return this.getToken(Cobol85PreprocessorParser.CS, 0);
	};

	CURR() {
	    return this.getToken(Cobol85PreprocessorParser.CURR, 0);
	};

	CURRENCY() {
	    return this.getToken(Cobol85PreprocessorParser.CURRENCY, 0);
	};

	DATA() {
	    return this.getToken(Cobol85PreprocessorParser.DATA, 0);
	};

	DATEPROC() {
	    return this.getToken(Cobol85PreprocessorParser.DATEPROC, 0);
	};

	DBCS() {
	    return this.getToken(Cobol85PreprocessorParser.DBCS, 0);
	};

	DD() {
	    return this.getToken(Cobol85PreprocessorParser.DD, 0);
	};

	DEBUG() {
	    return this.getToken(Cobol85PreprocessorParser.DEBUG, 0);
	};

	DECK() {
	    return this.getToken(Cobol85PreprocessorParser.DECK, 0);
	};

	DIAGTRUNC() {
	    return this.getToken(Cobol85PreprocessorParser.DIAGTRUNC, 0);
	};

	DLI() {
	    return this.getToken(Cobol85PreprocessorParser.DLI, 0);
	};

	DLL() {
	    return this.getToken(Cobol85PreprocessorParser.DLL, 0);
	};

	DP() {
	    return this.getToken(Cobol85PreprocessorParser.DP, 0);
	};

	DTR() {
	    return this.getToken(Cobol85PreprocessorParser.DTR, 0);
	};

	DU() {
	    return this.getToken(Cobol85PreprocessorParser.DU, 0);
	};

	DUMP() {
	    return this.getToken(Cobol85PreprocessorParser.DUMP, 0);
	};

	DYN() {
	    return this.getToken(Cobol85PreprocessorParser.DYN, 0);
	};

	DYNAM() {
	    return this.getToken(Cobol85PreprocessorParser.DYNAM, 0);
	};

	EDF() {
	    return this.getToken(Cobol85PreprocessorParser.EDF, 0);
	};

	EJECT() {
	    return this.getToken(Cobol85PreprocessorParser.EJECT, 0);
	};

	EJPD() {
	    return this.getToken(Cobol85PreprocessorParser.EJPD, 0);
	};

	EN() {
	    return this.getToken(Cobol85PreprocessorParser.EN, 0);
	};

	ENGLISH() {
	    return this.getToken(Cobol85PreprocessorParser.ENGLISH, 0);
	};

	EPILOG() {
	    return this.getToken(Cobol85PreprocessorParser.EPILOG, 0);
	};

	EXCI() {
	    return this.getToken(Cobol85PreprocessorParser.EXCI, 0);
	};

	EXIT() {
	    return this.getToken(Cobol85PreprocessorParser.EXIT, 0);
	};

	EXP() {
	    return this.getToken(Cobol85PreprocessorParser.EXP, 0);
	};

	EXPORTALL() {
	    return this.getToken(Cobol85PreprocessorParser.EXPORTALL, 0);
	};

	EXTEND() {
	    return this.getToken(Cobol85PreprocessorParser.EXTEND, 0);
	};

	FASTSRT() {
	    return this.getToken(Cobol85PreprocessorParser.FASTSRT, 0);
	};

	FLAG() {
	    return this.getToken(Cobol85PreprocessorParser.FLAG, 0);
	};

	FLAGSTD() {
	    return this.getToken(Cobol85PreprocessorParser.FLAGSTD, 0);
	};

	FULL() {
	    return this.getToken(Cobol85PreprocessorParser.FULL, 0);
	};

	FSRT() {
	    return this.getToken(Cobol85PreprocessorParser.FSRT, 0);
	};

	GDS() {
	    return this.getToken(Cobol85PreprocessorParser.GDS, 0);
	};

	GRAPHIC() {
	    return this.getToken(Cobol85PreprocessorParser.GRAPHIC, 0);
	};

	HOOK() {
	    return this.getToken(Cobol85PreprocessorParser.HOOK, 0);
	};

	IN() {
	    return this.getToken(Cobol85PreprocessorParser.IN, 0);
	};

	INTDATE() {
	    return this.getToken(Cobol85PreprocessorParser.INTDATE, 0);
	};

	JA() {
	    return this.getToken(Cobol85PreprocessorParser.JA, 0);
	};

	JP() {
	    return this.getToken(Cobol85PreprocessorParser.JP, 0);
	};

	KA() {
	    return this.getToken(Cobol85PreprocessorParser.KA, 0);
	};

	LANG() {
	    return this.getToken(Cobol85PreprocessorParser.LANG, 0);
	};

	LANGUAGE() {
	    return this.getToken(Cobol85PreprocessorParser.LANGUAGE, 0);
	};

	LC() {
	    return this.getToken(Cobol85PreprocessorParser.LC, 0);
	};

	LENGTH() {
	    return this.getToken(Cobol85PreprocessorParser.LENGTH, 0);
	};

	LIB() {
	    return this.getToken(Cobol85PreprocessorParser.LIB, 0);
	};

	LILIAN() {
	    return this.getToken(Cobol85PreprocessorParser.LILIAN, 0);
	};

	LIN() {
	    return this.getToken(Cobol85PreprocessorParser.LIN, 0);
	};

	LINECOUNT() {
	    return this.getToken(Cobol85PreprocessorParser.LINECOUNT, 0);
	};

	LINKAGE() {
	    return this.getToken(Cobol85PreprocessorParser.LINKAGE, 0);
	};

	LIST() {
	    return this.getToken(Cobol85PreprocessorParser.LIST, 0);
	};

	LM() {
	    return this.getToken(Cobol85PreprocessorParser.LM, 0);
	};

	LONGMIXED() {
	    return this.getToken(Cobol85PreprocessorParser.LONGMIXED, 0);
	};

	LONGUPPER() {
	    return this.getToken(Cobol85PreprocessorParser.LONGUPPER, 0);
	};

	LU() {
	    return this.getToken(Cobol85PreprocessorParser.LU, 0);
	};

	MAP() {
	    return this.getToken(Cobol85PreprocessorParser.MAP, 0);
	};

	MARGINS() {
	    return this.getToken(Cobol85PreprocessorParser.MARGINS, 0);
	};

	MAX() {
	    return this.getToken(Cobol85PreprocessorParser.MAX, 0);
	};

	MD() {
	    return this.getToken(Cobol85PreprocessorParser.MD, 0);
	};

	MDECK() {
	    return this.getToken(Cobol85PreprocessorParser.MDECK, 0);
	};

	MIG() {
	    return this.getToken(Cobol85PreprocessorParser.MIG, 0);
	};

	MIXED() {
	    return this.getToken(Cobol85PreprocessorParser.MIXED, 0);
	};

	NAME() {
	    return this.getToken(Cobol85PreprocessorParser.NAME, 0);
	};

	NAT() {
	    return this.getToken(Cobol85PreprocessorParser.NAT, 0);
	};

	NATIONAL() {
	    return this.getToken(Cobol85PreprocessorParser.NATIONAL, 0);
	};

	NATLANG() {
	    return this.getToken(Cobol85PreprocessorParser.NATLANG, 0);
	};

	NN() {
	    return this.getToken(Cobol85PreprocessorParser.NN, 0);
	};

	NO() {
	    return this.getToken(Cobol85PreprocessorParser.NO, 0);
	};

	NOADATA() {
	    return this.getToken(Cobol85PreprocessorParser.NOADATA, 0);
	};

	NOADV() {
	    return this.getToken(Cobol85PreprocessorParser.NOADV, 0);
	};

	NOALIAS() {
	    return this.getToken(Cobol85PreprocessorParser.NOALIAS, 0);
	};

	NOAWO() {
	    return this.getToken(Cobol85PreprocessorParser.NOAWO, 0);
	};

	NOBLOCK0() {
	    return this.getToken(Cobol85PreprocessorParser.NOBLOCK0, 0);
	};

	NOC() {
	    return this.getToken(Cobol85PreprocessorParser.NOC, 0);
	};

	NOCBLCARD() {
	    return this.getToken(Cobol85PreprocessorParser.NOCBLCARD, 0);
	};

	NOCICS() {
	    return this.getToken(Cobol85PreprocessorParser.NOCICS, 0);
	};

	NOCMPR2() {
	    return this.getToken(Cobol85PreprocessorParser.NOCMPR2, 0);
	};

	NOCOMPILE() {
	    return this.getToken(Cobol85PreprocessorParser.NOCOMPILE, 0);
	};

	NOCPSM() {
	    return this.getToken(Cobol85PreprocessorParser.NOCPSM, 0);
	};

	NOCURR() {
	    return this.getToken(Cobol85PreprocessorParser.NOCURR, 0);
	};

	NOCURRENCY() {
	    return this.getToken(Cobol85PreprocessorParser.NOCURRENCY, 0);
	};

	NOD() {
	    return this.getToken(Cobol85PreprocessorParser.NOD, 0);
	};

	NODATEPROC() {
	    return this.getToken(Cobol85PreprocessorParser.NODATEPROC, 0);
	};

	NODBCS() {
	    return this.getToken(Cobol85PreprocessorParser.NODBCS, 0);
	};

	NODE() {
	    return this.getToken(Cobol85PreprocessorParser.NODE, 0);
	};

	NODEBUG() {
	    return this.getToken(Cobol85PreprocessorParser.NODEBUG, 0);
	};

	NODECK() {
	    return this.getToken(Cobol85PreprocessorParser.NODECK, 0);
	};

	NODIAGTRUNC() {
	    return this.getToken(Cobol85PreprocessorParser.NODIAGTRUNC, 0);
	};

	NODLL() {
	    return this.getToken(Cobol85PreprocessorParser.NODLL, 0);
	};

	NODU() {
	    return this.getToken(Cobol85PreprocessorParser.NODU, 0);
	};

	NODUMP() {
	    return this.getToken(Cobol85PreprocessorParser.NODUMP, 0);
	};

	NODP() {
	    return this.getToken(Cobol85PreprocessorParser.NODP, 0);
	};

	NODTR() {
	    return this.getToken(Cobol85PreprocessorParser.NODTR, 0);
	};

	NODYN() {
	    return this.getToken(Cobol85PreprocessorParser.NODYN, 0);
	};

	NODYNAM() {
	    return this.getToken(Cobol85PreprocessorParser.NODYNAM, 0);
	};

	NOEDF() {
	    return this.getToken(Cobol85PreprocessorParser.NOEDF, 0);
	};

	NOEJPD() {
	    return this.getToken(Cobol85PreprocessorParser.NOEJPD, 0);
	};

	NOEPILOG() {
	    return this.getToken(Cobol85PreprocessorParser.NOEPILOG, 0);
	};

	NOEXIT() {
	    return this.getToken(Cobol85PreprocessorParser.NOEXIT, 0);
	};

	NOEXP() {
	    return this.getToken(Cobol85PreprocessorParser.NOEXP, 0);
	};

	NOEXPORTALL() {
	    return this.getToken(Cobol85PreprocessorParser.NOEXPORTALL, 0);
	};

	NOF() {
	    return this.getToken(Cobol85PreprocessorParser.NOF, 0);
	};

	NOFASTSRT() {
	    return this.getToken(Cobol85PreprocessorParser.NOFASTSRT, 0);
	};

	NOFEPI() {
	    return this.getToken(Cobol85PreprocessorParser.NOFEPI, 0);
	};

	NOFLAG() {
	    return this.getToken(Cobol85PreprocessorParser.NOFLAG, 0);
	};

	NOFLAGMIG() {
	    return this.getToken(Cobol85PreprocessorParser.NOFLAGMIG, 0);
	};

	NOFLAGSTD() {
	    return this.getToken(Cobol85PreprocessorParser.NOFLAGSTD, 0);
	};

	NOFSRT() {
	    return this.getToken(Cobol85PreprocessorParser.NOFSRT, 0);
	};

	NOGRAPHIC() {
	    return this.getToken(Cobol85PreprocessorParser.NOGRAPHIC, 0);
	};

	NOHOOK() {
	    return this.getToken(Cobol85PreprocessorParser.NOHOOK, 0);
	};

	NOLENGTH() {
	    return this.getToken(Cobol85PreprocessorParser.NOLENGTH, 0);
	};

	NOLIB() {
	    return this.getToken(Cobol85PreprocessorParser.NOLIB, 0);
	};

	NOLINKAGE() {
	    return this.getToken(Cobol85PreprocessorParser.NOLINKAGE, 0);
	};

	NOLIST() {
	    return this.getToken(Cobol85PreprocessorParser.NOLIST, 0);
	};

	NOMAP() {
	    return this.getToken(Cobol85PreprocessorParser.NOMAP, 0);
	};

	NOMD() {
	    return this.getToken(Cobol85PreprocessorParser.NOMD, 0);
	};

	NOMDECK() {
	    return this.getToken(Cobol85PreprocessorParser.NOMDECK, 0);
	};

	NONAME() {
	    return this.getToken(Cobol85PreprocessorParser.NONAME, 0);
	};

	NONUM() {
	    return this.getToken(Cobol85PreprocessorParser.NONUM, 0);
	};

	NONUMBER() {
	    return this.getToken(Cobol85PreprocessorParser.NONUMBER, 0);
	};

	NOOBJ() {
	    return this.getToken(Cobol85PreprocessorParser.NOOBJ, 0);
	};

	NOOBJECT() {
	    return this.getToken(Cobol85PreprocessorParser.NOOBJECT, 0);
	};

	NOOFF() {
	    return this.getToken(Cobol85PreprocessorParser.NOOFF, 0);
	};

	NOOFFSET() {
	    return this.getToken(Cobol85PreprocessorParser.NOOFFSET, 0);
	};

	NOOPSEQUENCE() {
	    return this.getToken(Cobol85PreprocessorParser.NOOPSEQUENCE, 0);
	};

	NOOPT() {
	    return this.getToken(Cobol85PreprocessorParser.NOOPT, 0);
	};

	NOOPTIMIZE() {
	    return this.getToken(Cobol85PreprocessorParser.NOOPTIMIZE, 0);
	};

	NOOPTIONS() {
	    return this.getToken(Cobol85PreprocessorParser.NOOPTIONS, 0);
	};

	NOP() {
	    return this.getToken(Cobol85PreprocessorParser.NOP, 0);
	};

	NOPFD() {
	    return this.getToken(Cobol85PreprocessorParser.NOPFD, 0);
	};

	NOPROLOG() {
	    return this.getToken(Cobol85PreprocessorParser.NOPROLOG, 0);
	};

	NORENT() {
	    return this.getToken(Cobol85PreprocessorParser.NORENT, 0);
	};

	NOS() {
	    return this.getToken(Cobol85PreprocessorParser.NOS, 0);
	};

	NOSEP() {
	    return this.getToken(Cobol85PreprocessorParser.NOSEP, 0);
	};

	NOSEPARATE() {
	    return this.getToken(Cobol85PreprocessorParser.NOSEPARATE, 0);
	};

	NOSEQ() {
	    return this.getToken(Cobol85PreprocessorParser.NOSEQ, 0);
	};

	NOSEQUENCE() {
	    return this.getToken(Cobol85PreprocessorParser.NOSEQUENCE, 0);
	};

	NOSOURCE() {
	    return this.getToken(Cobol85PreprocessorParser.NOSOURCE, 0);
	};

	NOSPIE() {
	    return this.getToken(Cobol85PreprocessorParser.NOSPIE, 0);
	};

	NOSQL() {
	    return this.getToken(Cobol85PreprocessorParser.NOSQL, 0);
	};

	NOSQLC() {
	    return this.getToken(Cobol85PreprocessorParser.NOSQLC, 0);
	};

	NOSQLCCSID() {
	    return this.getToken(Cobol85PreprocessorParser.NOSQLCCSID, 0);
	};

	NOSSR() {
	    return this.getToken(Cobol85PreprocessorParser.NOSSR, 0);
	};

	NOSSRANGE() {
	    return this.getToken(Cobol85PreprocessorParser.NOSSRANGE, 0);
	};

	NOSTDTRUNC() {
	    return this.getToken(Cobol85PreprocessorParser.NOSTDTRUNC, 0);
	};

	NOTERM() {
	    return this.getToken(Cobol85PreprocessorParser.NOTERM, 0);
	};

	NOTERMINAL() {
	    return this.getToken(Cobol85PreprocessorParser.NOTERMINAL, 0);
	};

	NOTEST() {
	    return this.getToken(Cobol85PreprocessorParser.NOTEST, 0);
	};

	NOTHREAD() {
	    return this.getToken(Cobol85PreprocessorParser.NOTHREAD, 0);
	};

	NOTRIG() {
	    return this.getToken(Cobol85PreprocessorParser.NOTRIG, 0);
	};

	NOVBREF() {
	    return this.getToken(Cobol85PreprocessorParser.NOVBREF, 0);
	};

	NOWORD() {
	    return this.getToken(Cobol85PreprocessorParser.NOWORD, 0);
	};

	NOX() {
	    return this.getToken(Cobol85PreprocessorParser.NOX, 0);
	};

	NOXREF() {
	    return this.getToken(Cobol85PreprocessorParser.NOXREF, 0);
	};

	NOZWB() {
	    return this.getToken(Cobol85PreprocessorParser.NOZWB, 0);
	};

	NSEQ() {
	    return this.getToken(Cobol85PreprocessorParser.NSEQ, 0);
	};

	NSYMBOL() {
	    return this.getToken(Cobol85PreprocessorParser.NSYMBOL, 0);
	};

	NS() {
	    return this.getToken(Cobol85PreprocessorParser.NS, 0);
	};

	NUM() {
	    return this.getToken(Cobol85PreprocessorParser.NUM, 0);
	};

	NUMBER() {
	    return this.getToken(Cobol85PreprocessorParser.NUMBER, 0);
	};

	NUMPROC() {
	    return this.getToken(Cobol85PreprocessorParser.NUMPROC, 0);
	};

	OBJ() {
	    return this.getToken(Cobol85PreprocessorParser.OBJ, 0);
	};

	OBJECT() {
	    return this.getToken(Cobol85PreprocessorParser.OBJECT, 0);
	};

	ON() {
	    return this.getToken(Cobol85PreprocessorParser.ON, 0);
	};

	OF() {
	    return this.getToken(Cobol85PreprocessorParser.OF, 0);
	};

	OFF() {
	    return this.getToken(Cobol85PreprocessorParser.OFF, 0);
	};

	OFFSET() {
	    return this.getToken(Cobol85PreprocessorParser.OFFSET, 0);
	};

	OPMARGINS() {
	    return this.getToken(Cobol85PreprocessorParser.OPMARGINS, 0);
	};

	OPSEQUENCE() {
	    return this.getToken(Cobol85PreprocessorParser.OPSEQUENCE, 0);
	};

	OPTIMIZE() {
	    return this.getToken(Cobol85PreprocessorParser.OPTIMIZE, 0);
	};

	OP() {
	    return this.getToken(Cobol85PreprocessorParser.OP, 0);
	};

	OPT() {
	    return this.getToken(Cobol85PreprocessorParser.OPT, 0);
	};

	OPTFILE() {
	    return this.getToken(Cobol85PreprocessorParser.OPTFILE, 0);
	};

	OPTIONS() {
	    return this.getToken(Cobol85PreprocessorParser.OPTIONS, 0);
	};

	OUT() {
	    return this.getToken(Cobol85PreprocessorParser.OUT, 0);
	};

	OUTDD() {
	    return this.getToken(Cobol85PreprocessorParser.OUTDD, 0);
	};

	PFD() {
	    return this.getToken(Cobol85PreprocessorParser.PFD, 0);
	};

	PGMN() {
	    return this.getToken(Cobol85PreprocessorParser.PGMN, 0);
	};

	PGMNAME() {
	    return this.getToken(Cobol85PreprocessorParser.PGMNAME, 0);
	};

	PPTDBG() {
	    return this.getToken(Cobol85PreprocessorParser.PPTDBG, 0);
	};

	PROCESS() {
	    return this.getToken(Cobol85PreprocessorParser.PROCESS, 0);
	};

	PROLOG() {
	    return this.getToken(Cobol85PreprocessorParser.PROLOG, 0);
	};

	QUOTE() {
	    return this.getToken(Cobol85PreprocessorParser.QUOTE, 0);
	};

	RENT() {
	    return this.getToken(Cobol85PreprocessorParser.RENT, 0);
	};

	REPLACING() {
	    return this.getToken(Cobol85PreprocessorParser.REPLACING, 0);
	};

	RMODE() {
	    return this.getToken(Cobol85PreprocessorParser.RMODE, 0);
	};

	SEQ() {
	    return this.getToken(Cobol85PreprocessorParser.SEQ, 0);
	};

	SEQUENCE() {
	    return this.getToken(Cobol85PreprocessorParser.SEQUENCE, 0);
	};

	SEP() {
	    return this.getToken(Cobol85PreprocessorParser.SEP, 0);
	};

	SEPARATE() {
	    return this.getToken(Cobol85PreprocessorParser.SEPARATE, 0);
	};

	SHORT() {
	    return this.getToken(Cobol85PreprocessorParser.SHORT, 0);
	};

	SIZE() {
	    return this.getToken(Cobol85PreprocessorParser.SIZE, 0);
	};

	SOURCE() {
	    return this.getToken(Cobol85PreprocessorParser.SOURCE, 0);
	};

	SP() {
	    return this.getToken(Cobol85PreprocessorParser.SP, 0);
	};

	SPACE() {
	    return this.getToken(Cobol85PreprocessorParser.SPACE, 0);
	};

	SPIE() {
	    return this.getToken(Cobol85PreprocessorParser.SPIE, 0);
	};

	SQL() {
	    return this.getToken(Cobol85PreprocessorParser.SQL, 0);
	};

	SQLC() {
	    return this.getToken(Cobol85PreprocessorParser.SQLC, 0);
	};

	SQLCCSID() {
	    return this.getToken(Cobol85PreprocessorParser.SQLCCSID, 0);
	};

	SS() {
	    return this.getToken(Cobol85PreprocessorParser.SS, 0);
	};

	SSR() {
	    return this.getToken(Cobol85PreprocessorParser.SSR, 0);
	};

	SSRANGE() {
	    return this.getToken(Cobol85PreprocessorParser.SSRANGE, 0);
	};

	STD() {
	    return this.getToken(Cobol85PreprocessorParser.STD, 0);
	};

	SYSEIB() {
	    return this.getToken(Cobol85PreprocessorParser.SYSEIB, 0);
	};

	SZ() {
	    return this.getToken(Cobol85PreprocessorParser.SZ, 0);
	};

	TERM() {
	    return this.getToken(Cobol85PreprocessorParser.TERM, 0);
	};

	TERMINAL() {
	    return this.getToken(Cobol85PreprocessorParser.TERMINAL, 0);
	};

	TEST() {
	    return this.getToken(Cobol85PreprocessorParser.TEST, 0);
	};

	THREAD() {
	    return this.getToken(Cobol85PreprocessorParser.THREAD, 0);
	};

	TITLE() {
	    return this.getToken(Cobol85PreprocessorParser.TITLE, 0);
	};

	TRIG() {
	    return this.getToken(Cobol85PreprocessorParser.TRIG, 0);
	};

	TRUNC() {
	    return this.getToken(Cobol85PreprocessorParser.TRUNC, 0);
	};

	UE() {
	    return this.getToken(Cobol85PreprocessorParser.UE, 0);
	};

	UPPER() {
	    return this.getToken(Cobol85PreprocessorParser.UPPER, 0);
	};

	VBREF() {
	    return this.getToken(Cobol85PreprocessorParser.VBREF, 0);
	};

	WD() {
	    return this.getToken(Cobol85PreprocessorParser.WD, 0);
	};

	XMLPARSE() {
	    return this.getToken(Cobol85PreprocessorParser.XMLPARSE, 0);
	};

	XMLSS() {
	    return this.getToken(Cobol85PreprocessorParser.XMLSS, 0);
	};

	XOPTS() {
	    return this.getToken(Cobol85PreprocessorParser.XOPTS, 0);
	};

	XREF() {
	    return this.getToken(Cobol85PreprocessorParser.XREF, 0);
	};

	YEARWINDOW() {
	    return this.getToken(Cobol85PreprocessorParser.YEARWINDOW, 0);
	};

	YW() {
	    return this.getToken(Cobol85PreprocessorParser.YW, 0);
	};

	ZWB() {
	    return this.getToken(Cobol85PreprocessorParser.ZWB, 0);
	};

	C_CHAR() {
	    return this.getToken(Cobol85PreprocessorParser.C_CHAR, 0);
	};

	D_CHAR() {
	    return this.getToken(Cobol85PreprocessorParser.D_CHAR, 0);
	};

	E_CHAR() {
	    return this.getToken(Cobol85PreprocessorParser.E_CHAR, 0);
	};

	F_CHAR() {
	    return this.getToken(Cobol85PreprocessorParser.F_CHAR, 0);
	};

	H_CHAR() {
	    return this.getToken(Cobol85PreprocessorParser.H_CHAR, 0);
	};

	I_CHAR() {
	    return this.getToken(Cobol85PreprocessorParser.I_CHAR, 0);
	};

	M_CHAR() {
	    return this.getToken(Cobol85PreprocessorParser.M_CHAR, 0);
	};

	N_CHAR() {
	    return this.getToken(Cobol85PreprocessorParser.N_CHAR, 0);
	};

	Q_CHAR() {
	    return this.getToken(Cobol85PreprocessorParser.Q_CHAR, 0);
	};

	S_CHAR() {
	    return this.getToken(Cobol85PreprocessorParser.S_CHAR, 0);
	};

	U_CHAR() {
	    return this.getToken(Cobol85PreprocessorParser.U_CHAR, 0);
	};

	W_CHAR() {
	    return this.getToken(Cobol85PreprocessorParser.W_CHAR, 0);
	};

	X_CHAR() {
	    return this.getToken(Cobol85PreprocessorParser.X_CHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.enterCharDataKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Cobol85PreprocessorListener ) {
	        listener.exitCharDataKeyword(this);
		}
	}


}




Cobol85PreprocessorParser.StartRuleContext = StartRuleContext; 
Cobol85PreprocessorParser.CompilerOptionsContext = CompilerOptionsContext; 
Cobol85PreprocessorParser.CompilerXOptsContext = CompilerXOptsContext; 
Cobol85PreprocessorParser.CompilerOptionContext = CompilerOptionContext; 
Cobol85PreprocessorParser.ExecCicsStatementContext = ExecCicsStatementContext; 
Cobol85PreprocessorParser.ExecSqlStatementContext = ExecSqlStatementContext; 
Cobol85PreprocessorParser.ExecSqlImsStatementContext = ExecSqlImsStatementContext; 
Cobol85PreprocessorParser.CopyStatementContext = CopyStatementContext; 
Cobol85PreprocessorParser.CopySourceContext = CopySourceContext; 
Cobol85PreprocessorParser.CopyLibraryContext = CopyLibraryContext; 
Cobol85PreprocessorParser.ReplacingPhraseContext = ReplacingPhraseContext; 
Cobol85PreprocessorParser.ReplaceAreaContext = ReplaceAreaContext; 
Cobol85PreprocessorParser.ReplaceByStatementContext = ReplaceByStatementContext; 
Cobol85PreprocessorParser.ReplaceOffStatementContext = ReplaceOffStatementContext; 
Cobol85PreprocessorParser.ReplaceClauseContext = ReplaceClauseContext; 
Cobol85PreprocessorParser.DirectoryPhraseContext = DirectoryPhraseContext; 
Cobol85PreprocessorParser.FamilyPhraseContext = FamilyPhraseContext; 
Cobol85PreprocessorParser.ReplaceableContext = ReplaceableContext; 
Cobol85PreprocessorParser.ReplacementContext = ReplacementContext; 
Cobol85PreprocessorParser.EjectStatementContext = EjectStatementContext; 
Cobol85PreprocessorParser.SkipStatementContext = SkipStatementContext; 
Cobol85PreprocessorParser.TitleStatementContext = TitleStatementContext; 
Cobol85PreprocessorParser.PseudoTextContext = PseudoTextContext; 
Cobol85PreprocessorParser.CharDataContext = CharDataContext; 
Cobol85PreprocessorParser.CharDataSqlContext = CharDataSqlContext; 
Cobol85PreprocessorParser.CharDataLineContext = CharDataLineContext; 
Cobol85PreprocessorParser.CobolWordContext = CobolWordContext; 
Cobol85PreprocessorParser.LiteralContext = LiteralContext; 
Cobol85PreprocessorParser.FilenameContext = FilenameContext; 
Cobol85PreprocessorParser.CharDataKeywordContext = CharDataKeywordContext; 
