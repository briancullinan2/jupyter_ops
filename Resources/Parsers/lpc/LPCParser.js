// Generated from Resources/Parsers/lpc/LPC.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import LPCListener from './LPCListener.js';
const serializedATN = [4,1,81,936,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,1,0,1,0,1,0,1,1,1,1,1,
1,1,1,1,1,5,1,161,8,1,10,1,12,1,164,9,1,1,2,1,2,3,2,168,8,2,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,3,3,178,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,
1,5,1,6,1,6,1,6,3,6,194,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,
1,8,1,8,5,8,209,8,8,10,8,12,8,212,9,8,1,9,1,9,1,9,1,9,1,9,3,9,219,8,9,1,
10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,3,11,229,8,11,1,12,1,12,1,12,1,12,
1,12,1,12,1,12,1,12,3,12,239,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,271,8,13,1,13,1,13,1,13,1,13,
1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,318,8,13,
10,13,12,13,321,9,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,3,15,331,8,
15,1,16,1,16,1,16,1,16,1,16,1,16,5,16,339,8,16,10,16,12,16,342,9,16,1,17,
1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,
18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,3,19,367,8,19,1,20,1,20,1,20,1,20,
1,20,1,21,1,21,1,22,1,22,1,22,3,22,379,8,22,1,23,1,23,1,23,1,23,1,23,1,23,
1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
1,23,1,23,1,23,3,23,419,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,482,8,23,10,23,12,23,485,
9,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,3,25,495,8,25,1,26,1,26,1,26,
1,26,1,26,3,26,502,8,26,1,27,1,27,1,27,1,27,1,27,1,27,5,27,510,8,27,10,27,
12,27,513,9,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,5,29,525,
8,29,10,29,12,29,528,9,29,1,30,1,30,1,30,1,30,3,30,534,8,30,1,31,1,31,1,
32,1,32,1,32,1,32,1,32,5,32,543,8,32,10,32,12,32,546,9,32,1,33,1,33,1,33,
1,33,1,33,1,33,3,33,554,8,33,1,33,1,33,1,33,5,33,559,8,33,10,33,12,33,562,
9,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
1,34,1,34,1,34,1,34,3,34,596,8,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,
1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,619,
8,37,1,38,1,38,1,38,1,38,5,38,625,8,38,10,38,12,38,628,9,38,1,39,1,39,1,
39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,3,40,640,8,40,1,41,1,41,3,41,644,8,
41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,657,8,43,
1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,3,45,668,8,45,1,46,1,46,1,46,
1,46,1,46,1,46,1,46,1,46,3,46,678,8,46,1,47,1,47,1,48,1,48,1,48,1,48,1,48,
1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,698,8,48,1,49,
1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,
51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,
5,52,730,8,52,10,52,12,52,733,9,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,
53,1,53,1,53,1,53,1,53,3,53,747,8,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
3,54,756,8,54,1,55,1,55,1,55,3,55,761,8,55,1,56,1,56,1,56,1,56,1,56,1,56,
1,56,1,56,1,56,1,56,1,56,1,56,3,56,775,8,56,1,56,1,56,1,56,1,56,1,56,1,56,
1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
1,56,1,56,1,56,1,56,1,56,1,56,1,56,5,56,819,8,56,10,56,12,56,822,9,56,1,
57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,3,58,837,
8,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,3,
60,852,8,60,1,61,1,61,3,61,856,8,61,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,
63,1,64,1,64,3,64,868,8,64,1,65,1,65,1,65,1,65,1,65,1,65,3,65,876,8,65,1,
66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,3,67,888,8,67,1,68,1,68,
1,68,1,68,1,68,3,68,895,8,68,1,69,1,69,1,69,1,69,1,69,1,69,5,69,903,8,69,
10,69,12,69,906,9,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,916,8,
70,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,73,1,73,3,73,928,8,73,1,74,
1,74,3,74,932,8,74,1,75,1,75,1,75,0,13,2,16,26,32,46,54,58,64,66,76,104,
112,138,76,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,
92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,
130,132,134,136,138,140,142,144,146,148,150,0,3,1,0,8,10,1,0,11,12,2,0,43,
43,73,73,1000,0,152,1,0,0,0,2,155,1,0,0,0,4,167,1,0,0,0,6,177,1,0,0,0,8,
179,1,0,0,0,10,187,1,0,0,0,12,193,1,0,0,0,14,195,1,0,0,0,16,202,1,0,0,0,
18,218,1,0,0,0,20,220,1,0,0,0,22,228,1,0,0,0,24,238,1,0,0,0,26,270,1,0,0,
0,28,322,1,0,0,0,30,330,1,0,0,0,32,332,1,0,0,0,34,343,1,0,0,0,36,353,1,0,
0,0,38,366,1,0,0,0,40,368,1,0,0,0,42,373,1,0,0,0,44,378,1,0,0,0,46,418,1,
0,0,0,48,486,1,0,0,0,50,494,1,0,0,0,52,501,1,0,0,0,54,503,1,0,0,0,56,514,
1,0,0,0,58,518,1,0,0,0,60,533,1,0,0,0,62,535,1,0,0,0,64,537,1,0,0,0,66,553,
1,0,0,0,68,595,1,0,0,0,70,597,1,0,0,0,72,602,1,0,0,0,74,618,1,0,0,0,76,620,
1,0,0,0,78,629,1,0,0,0,80,639,1,0,0,0,82,643,1,0,0,0,84,645,1,0,0,0,86,656,
1,0,0,0,88,658,1,0,0,0,90,667,1,0,0,0,92,677,1,0,0,0,94,679,1,0,0,0,96,697,
1,0,0,0,98,699,1,0,0,0,100,705,1,0,0,0,102,713,1,0,0,0,104,723,1,0,0,0,106,
746,1,0,0,0,108,755,1,0,0,0,110,760,1,0,0,0,112,774,1,0,0,0,114,823,1,0,
0,0,116,836,1,0,0,0,118,838,1,0,0,0,120,851,1,0,0,0,122,855,1,0,0,0,124,
857,1,0,0,0,126,861,1,0,0,0,128,867,1,0,0,0,130,875,1,0,0,0,132,877,1,0,
0,0,134,887,1,0,0,0,136,894,1,0,0,0,138,896,1,0,0,0,140,915,1,0,0,0,142,
917,1,0,0,0,144,922,1,0,0,0,146,927,1,0,0,0,148,931,1,0,0,0,150,933,1,0,
0,0,152,153,3,2,1,0,153,154,5,0,0,1,154,1,1,0,0,0,155,162,6,1,-1,0,156,157,
10,2,0,0,157,158,3,6,3,0,158,159,3,4,2,0,159,161,1,0,0,0,160,156,1,0,0,0,
161,164,1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,3,1,0,0,0,164,162,1,
0,0,0,165,168,1,0,0,0,166,168,5,1,0,0,167,165,1,0,0,0,167,166,1,0,0,0,168,
5,1,0,0,0,169,178,3,8,4,0,170,171,3,144,72,0,171,172,3,22,11,0,172,173,5,
1,0,0,173,178,1,0,0,0,174,178,3,142,71,0,175,178,3,14,7,0,176,178,3,10,5,
0,177,169,1,0,0,0,177,170,1,0,0,0,177,174,1,0,0,0,177,175,1,0,0,0,177,176,
1,0,0,0,178,7,1,0,0,0,179,180,3,144,72,0,180,181,3,148,74,0,181,182,3,150,
75,0,182,183,5,2,0,0,183,184,3,136,68,0,184,185,5,3,0,0,185,186,3,82,41,
0,186,9,1,0,0,0,187,188,3,12,6,0,188,189,5,40,0,0,189,11,1,0,0,0,190,194,
1,0,0,0,191,192,5,17,0,0,192,194,3,12,6,0,193,190,1,0,0,0,193,191,1,0,0,
0,194,13,1,0,0,0,195,196,3,12,6,0,196,197,5,39,0,0,197,198,3,150,75,0,198,
199,5,4,0,0,199,200,3,16,8,0,200,201,5,5,0,0,201,15,1,0,0,0,202,210,6,8,
-1,0,203,204,10,1,0,0,204,205,3,144,72,0,205,206,3,18,9,0,206,207,5,1,0,
0,207,209,1,0,0,0,208,203,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,
1,0,0,0,211,17,1,0,0,0,212,210,1,0,0,0,213,219,3,20,10,0,214,215,3,20,10,
0,215,216,5,6,0,0,216,217,3,18,9,0,217,219,1,0,0,0,218,213,1,0,0,0,218,214,
1,0,0,0,219,19,1,0,0,0,220,221,3,148,74,0,221,222,3,150,75,0,222,21,1,0,
0,0,223,229,3,24,12,0,224,225,3,24,12,0,225,226,5,6,0,0,226,227,3,22,11,
0,227,229,1,0,0,0,228,223,1,0,0,0,228,224,1,0,0,0,229,23,1,0,0,0,230,231,
3,148,74,0,231,232,3,150,75,0,232,239,1,0,0,0,233,234,3,148,74,0,234,235,
3,150,75,0,235,236,5,18,0,0,236,237,3,26,13,0,237,239,1,0,0,0,238,230,1,
0,0,0,238,233,1,0,0,0,239,25,1,0,0,0,240,241,6,13,-1,0,241,242,3,46,23,0,
242,243,5,18,0,0,243,244,3,26,13,29,244,271,1,0,0,0,245,246,3,40,20,0,246,
247,3,26,13,14,247,271,1,0,0,0,248,249,5,19,0,0,249,271,3,46,23,0,250,251,
5,20,0,0,251,271,3,46,23,0,252,253,5,29,0,0,253,271,3,26,13,11,254,255,5,
13,0,0,255,271,3,26,13,10,256,257,5,12,0,0,257,271,3,26,13,9,258,259,3,46,
23,0,259,260,5,19,0,0,260,271,1,0,0,0,261,262,3,46,23,0,262,263,5,20,0,0,
263,271,1,0,0,0,264,271,3,46,23,0,265,271,3,36,18,0,266,271,3,34,17,0,267,
271,3,28,14,0,268,271,5,66,0,0,269,271,5,71,0,0,270,240,1,0,0,0,270,245,
1,0,0,0,270,248,1,0,0,0,270,250,1,0,0,0,270,252,1,0,0,0,270,254,1,0,0,0,
270,256,1,0,0,0,270,258,1,0,0,0,270,261,1,0,0,0,270,264,1,0,0,0,270,265,
1,0,0,0,270,266,1,0,0,0,270,267,1,0,0,0,270,268,1,0,0,0,270,269,1,0,0,0,
271,319,1,0,0,0,272,273,10,28,0,0,273,274,5,60,0,0,274,275,3,26,13,0,275,
276,5,40,0,0,276,277,3,26,13,29,277,318,1,0,0,0,278,279,10,27,0,0,279,280,
5,25,0,0,280,318,3,26,13,28,281,282,10,26,0,0,282,283,5,22,0,0,283,318,3,
26,13,27,284,285,10,25,0,0,285,286,5,24,0,0,286,318,3,26,13,26,287,288,10,
24,0,0,288,289,5,23,0,0,289,318,3,26,13,25,290,291,10,23,0,0,291,292,5,21,
0,0,292,318,3,26,13,24,293,294,10,22,0,0,294,295,5,26,0,0,295,318,3,26,13,
23,296,297,10,21,0,0,297,298,5,30,0,0,298,318,3,26,13,22,299,300,10,20,0,
0,300,301,5,31,0,0,301,318,3,26,13,21,302,303,10,19,0,0,303,304,5,7,0,0,
304,318,3,26,13,20,305,306,10,18,0,0,306,307,5,27,0,0,307,318,3,26,13,19,
308,309,10,17,0,0,309,310,5,28,0,0,310,318,3,26,13,18,311,312,10,16,0,0,
312,313,7,0,0,0,313,318,3,26,13,17,314,315,10,15,0,0,315,316,7,1,0,0,316,
318,3,26,13,16,317,272,1,0,0,0,317,278,1,0,0,0,317,281,1,0,0,0,317,284,1,
0,0,0,317,287,1,0,0,0,317,290,1,0,0,0,317,293,1,0,0,0,317,296,1,0,0,0,317,
299,1,0,0,0,317,302,1,0,0,0,317,305,1,0,0,0,317,308,1,0,0,0,317,311,1,0,
0,0,317,314,1,0,0,0,318,321,1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,
27,1,0,0,0,321,319,1,0,0,0,322,323,5,77,0,0,323,324,3,30,15,0,324,29,1,0,
0,0,325,331,3,84,42,0,326,327,5,2,0,0,327,328,3,32,16,0,328,329,5,3,0,0,
329,331,1,0,0,0,330,325,1,0,0,0,330,326,1,0,0,0,331,31,1,0,0,0,332,333,6,
16,-1,0,333,334,3,26,13,0,334,340,1,0,0,0,335,336,10,1,0,0,336,337,5,6,0,
0,337,339,3,26,13,0,338,335,1,0,0,0,339,342,1,0,0,0,340,338,1,0,0,0,340,
341,1,0,0,0,341,33,1,0,0,0,342,340,1,0,0,0,343,344,5,59,0,0,344,345,5,2,
0,0,345,346,3,26,13,0,346,347,5,6,0,0,347,348,3,26,13,0,348,349,5,6,0,0,
349,350,3,26,13,0,350,351,3,38,19,0,351,352,5,3,0,0,352,35,1,0,0,0,353,354,
5,62,0,0,354,355,5,2,0,0,355,356,3,26,13,0,356,357,5,6,0,0,357,358,3,26,
13,0,358,359,3,38,19,0,359,360,5,3,0,0,360,37,1,0,0,0,361,367,1,0,0,0,362,
363,5,6,0,0,363,364,3,46,23,0,364,365,3,38,19,0,365,367,1,0,0,0,366,361,
1,0,0,0,366,362,1,0,0,0,367,39,1,0,0,0,368,369,5,2,0,0,369,370,3,42,21,0,
370,371,3,148,74,0,371,372,5,3,0,0,372,41,1,0,0,0,373,374,3,44,22,0,374,
43,1,0,0,0,375,379,5,36,0,0,376,377,5,39,0,0,377,379,5,43,0,0,378,375,1,
0,0,0,378,376,1,0,0,0,379,45,1,0,0,0,380,381,6,23,-1,0,381,419,3,68,34,0,
382,419,5,43,0,0,383,419,5,73,0,0,384,419,5,67,0,0,385,386,5,14,0,0,386,
387,5,2,0,0,387,388,3,32,16,0,388,389,5,3,0,0,389,419,1,0,0,0,390,419,3,
62,31,0,391,419,5,76,0,0,392,393,5,2,0,0,393,394,3,32,16,0,394,395,5,3,0,
0,395,419,1,0,0,0,396,419,3,48,24,0,397,398,5,36,0,0,398,399,5,2,0,0,399,
400,3,136,68,0,400,401,5,3,0,0,401,402,3,84,42,0,402,419,1,0,0,0,403,404,
5,65,0,0,404,405,3,32,16,0,405,406,5,40,0,0,406,407,5,3,0,0,407,419,1,0,
0,0,408,409,5,63,0,0,409,410,3,52,26,0,410,411,5,16,0,0,411,412,5,3,0,0,
412,419,1,0,0,0,413,414,5,64,0,0,414,415,3,50,25,0,415,416,5,5,0,0,416,417,
5,3,0,0,417,419,1,0,0,0,418,380,1,0,0,0,418,382,1,0,0,0,418,383,1,0,0,0,
418,384,1,0,0,0,418,385,1,0,0,0,418,390,1,0,0,0,418,391,1,0,0,0,418,392,
1,0,0,0,418,396,1,0,0,0,418,397,1,0,0,0,418,403,1,0,0,0,418,408,1,0,0,0,
418,413,1,0,0,0,419,483,1,0,0,0,420,421,10,22,0,0,421,482,3,72,36,0,422,
423,10,17,0,0,423,424,5,35,0,0,424,482,3,150,75,0,425,426,10,16,0,0,426,
427,5,15,0,0,427,428,3,32,16,0,428,429,5,61,0,0,429,430,5,7,0,0,430,431,
3,32,16,0,431,432,5,16,0,0,432,482,1,0,0,0,433,434,10,15,0,0,434,435,5,15,
0,0,435,436,3,32,16,0,436,437,5,61,0,0,437,438,3,32,16,0,438,439,5,16,0,
0,439,482,1,0,0,0,440,441,10,14,0,0,441,442,5,15,0,0,442,443,5,7,0,0,443,
444,3,32,16,0,444,445,5,61,0,0,445,446,3,32,16,0,446,447,5,16,0,0,447,482,
1,0,0,0,448,449,10,13,0,0,449,450,5,15,0,0,450,451,5,7,0,0,451,452,3,32,
16,0,452,453,5,61,0,0,453,454,5,7,0,0,454,455,3,32,16,0,455,456,5,16,0,0,
456,482,1,0,0,0,457,458,10,12,0,0,458,459,5,15,0,0,459,460,3,32,16,0,460,
461,5,61,0,0,461,462,5,16,0,0,462,482,1,0,0,0,463,464,10,11,0,0,464,465,
5,15,0,0,465,466,5,7,0,0,466,467,3,32,16,0,467,468,5,61,0,0,468,469,5,16,
0,0,469,482,1,0,0,0,470,471,10,10,0,0,471,472,5,15,0,0,472,473,5,7,0,0,473,
474,3,32,16,0,474,475,5,16,0,0,475,482,1,0,0,0,476,477,10,9,0,0,477,478,
5,15,0,0,478,479,3,32,16,0,479,480,5,16,0,0,480,482,1,0,0,0,481,420,1,0,
0,0,481,422,1,0,0,0,481,425,1,0,0,0,481,433,1,0,0,0,481,440,1,0,0,0,481,
448,1,0,0,0,481,457,1,0,0,0,481,463,1,0,0,0,481,470,1,0,0,0,481,476,1,0,
0,0,482,485,1,0,0,0,483,481,1,0,0,0,483,484,1,0,0,0,484,47,1,0,0,0,485,483,
1,0,0,0,486,487,5,38,0,0,487,488,3,30,15,0,488,49,1,0,0,0,489,495,1,0,0,
0,490,495,3,58,29,0,491,492,3,58,29,0,492,493,5,6,0,0,493,495,1,0,0,0,494,
489,1,0,0,0,494,490,1,0,0,0,494,491,1,0,0,0,495,51,1,0,0,0,496,502,1,0,0,
0,497,502,3,54,27,0,498,499,3,54,27,0,499,500,5,6,0,0,500,502,1,0,0,0,501,
496,1,0,0,0,501,497,1,0,0,0,501,498,1,0,0,0,502,53,1,0,0,0,503,504,6,27,
-1,0,504,505,3,56,28,0,505,511,1,0,0,0,506,507,10,1,0,0,507,508,5,6,0,0,
508,510,3,56,28,0,509,506,1,0,0,0,510,513,1,0,0,0,511,509,1,0,0,0,511,512,
1,0,0,0,512,55,1,0,0,0,513,511,1,0,0,0,514,515,3,26,13,0,515,516,5,40,0,
0,516,517,3,26,13,0,517,57,1,0,0,0,518,519,6,29,-1,0,519,520,3,60,30,0,520,
526,1,0,0,0,521,522,10,1,0,0,522,523,5,6,0,0,523,525,3,60,30,0,524,521,1,
0,0,0,525,528,1,0,0,0,526,524,1,0,0,0,526,527,1,0,0,0,527,59,1,0,0,0,528,
526,1,0,0,0,529,534,3,26,13,0,530,531,3,26,13,0,531,532,5,45,0,0,532,534,
1,0,0,0,533,529,1,0,0,0,533,530,1,0,0,0,534,61,1,0,0,0,535,536,3,64,32,0,
536,63,1,0,0,0,537,538,6,32,-1,0,538,539,5,74,0,0,539,544,1,0,0,0,540,541,
10,1,0,0,541,543,5,74,0,0,542,540,1,0,0,0,543,546,1,0,0,0,544,542,1,0,0,
0,544,545,1,0,0,0,545,65,1,0,0,0,546,544,1,0,0,0,547,548,6,33,-1,0,548,554,
3,64,32,0,549,550,5,2,0,0,550,551,3,66,33,0,551,552,5,3,0,0,552,554,1,0,
0,0,553,547,1,0,0,0,553,549,1,0,0,0,554,560,1,0,0,0,555,556,10,1,0,0,556,
557,5,11,0,0,557,559,3,66,33,2,558,555,1,0,0,0,559,562,1,0,0,0,560,558,1,
0,0,0,560,561,1,0,0,0,561,67,1,0,0,0,562,560,1,0,0,0,563,564,3,80,40,0,564,
565,5,2,0,0,565,566,3,50,25,0,566,567,5,3,0,0,567,596,1,0,0,0,568,569,5,
58,0,0,569,570,5,2,0,0,570,571,3,50,25,0,571,572,5,3,0,0,572,596,1,0,0,0,
573,574,5,58,0,0,574,575,5,2,0,0,575,576,5,39,0,0,576,577,5,43,0,0,577,578,
3,76,38,0,578,579,5,3,0,0,579,596,1,0,0,0,580,581,5,43,0,0,581,582,5,2,0,
0,582,583,3,50,25,0,583,584,5,3,0,0,584,596,1,0,0,0,585,596,3,70,35,0,586,
596,3,72,36,0,587,588,5,2,0,0,588,589,5,8,0,0,589,590,3,32,16,0,590,591,
5,3,0,0,591,592,5,2,0,0,592,593,3,50,25,0,593,594,5,3,0,0,594,596,1,0,0,
0,595,563,1,0,0,0,595,568,1,0,0,0,595,573,1,0,0,0,595,580,1,0,0,0,595,585,
1,0,0,0,595,586,1,0,0,0,595,587,1,0,0,0,596,69,1,0,0,0,597,598,3,74,37,0,
598,599,5,2,0,0,599,600,3,50,25,0,600,601,5,3,0,0,601,71,1,0,0,0,602,603,
5,35,0,0,603,604,3,150,75,0,604,605,5,2,0,0,605,606,3,50,25,0,606,607,5,
3,0,0,607,73,1,0,0,0,608,619,5,73,0,0,609,610,5,41,0,0,610,619,3,150,75,
0,611,612,5,36,0,0,612,613,5,41,0,0,613,619,3,150,75,0,614,615,3,150,75,
0,615,616,5,41,0,0,616,617,3,150,75,0,617,619,1,0,0,0,618,608,1,0,0,0,618,
609,1,0,0,0,618,611,1,0,0,0,618,614,1,0,0,0,619,75,1,0,0,0,620,626,6,38,
-1,0,621,622,10,1,0,0,622,623,5,6,0,0,623,625,3,78,39,0,624,621,1,0,0,0,
625,628,1,0,0,0,626,624,1,0,0,0,626,627,1,0,0,0,627,77,1,0,0,0,628,626,1,
0,0,0,629,630,3,150,75,0,630,631,5,40,0,0,631,632,3,26,13,0,632,79,1,0,0,
0,633,634,5,44,0,0,634,635,5,41,0,0,635,640,3,150,75,0,636,637,5,44,0,0,
637,638,5,41,0,0,638,640,5,58,0,0,639,633,1,0,0,0,639,636,1,0,0,0,640,81,
1,0,0,0,641,644,3,84,42,0,642,644,5,1,0,0,643,641,1,0,0,0,643,642,1,0,0,
0,644,83,1,0,0,0,645,646,5,4,0,0,646,647,3,86,43,0,647,648,5,5,0,0,648,85,
1,0,0,0,649,657,1,0,0,0,650,651,3,96,48,0,651,652,3,86,43,0,652,657,1,0,
0,0,653,654,3,88,44,0,654,655,3,86,43,0,655,657,1,0,0,0,656,649,1,0,0,0,
656,650,1,0,0,0,656,653,1,0,0,0,657,87,1,0,0,0,658,659,3,42,21,0,659,660,
3,90,45,0,660,661,5,1,0,0,661,89,1,0,0,0,662,668,3,92,46,0,663,664,3,92,
46,0,664,665,5,6,0,0,665,666,3,90,45,0,666,668,1,0,0,0,667,662,1,0,0,0,667,
663,1,0,0,0,668,91,1,0,0,0,669,670,3,148,74,0,670,671,3,94,47,0,671,678,
1,0,0,0,672,673,3,148,74,0,673,674,3,94,47,0,674,675,5,18,0,0,675,676,3,
26,13,0,676,678,1,0,0,0,677,669,1,0,0,0,677,672,1,0,0,0,678,93,1,0,0,0,679,
680,7,2,0,0,680,95,1,0,0,0,681,682,3,32,16,0,682,683,5,1,0,0,683,698,1,0,
0,0,684,698,3,132,66,0,685,698,3,98,49,0,686,698,3,100,50,0,687,698,3,102,
51,0,688,698,3,130,65,0,689,698,3,84,42,0,690,698,3,118,59,0,691,698,3,114,
57,0,692,698,5,1,0,0,693,694,5,37,0,0,694,698,5,1,0,0,695,696,5,42,0,0,696,
698,5,1,0,0,697,681,1,0,0,0,697,684,1,0,0,0,697,685,1,0,0,0,697,686,1,0,
0,0,697,687,1,0,0,0,697,688,1,0,0,0,697,689,1,0,0,0,697,690,1,0,0,0,697,
691,1,0,0,0,697,692,1,0,0,0,697,693,1,0,0,0,697,695,1,0,0,0,698,97,1,0,0,
0,699,700,5,55,0,0,700,701,5,2,0,0,701,702,3,32,16,0,702,703,5,3,0,0,703,
704,3,96,48,0,704,99,1,0,0,0,705,706,5,56,0,0,706,707,3,96,48,0,707,708,
5,55,0,0,708,709,5,2,0,0,709,710,3,32,16,0,710,711,5,3,0,0,711,712,5,1,0,
0,712,101,1,0,0,0,713,714,5,53,0,0,714,715,5,2,0,0,715,716,3,32,16,0,716,
717,5,3,0,0,717,718,5,4,0,0,718,719,3,104,52,0,719,720,3,106,53,0,720,721,
3,108,54,0,721,722,5,5,0,0,722,103,1,0,0,0,723,731,6,52,-1,0,724,725,10,
1,0,0,725,726,3,42,21,0,726,727,3,90,45,0,727,728,5,1,0,0,728,730,1,0,0,
0,729,724,1,0,0,0,730,733,1,0,0,0,731,729,1,0,0,0,731,732,1,0,0,0,732,105,
1,0,0,0,733,731,1,0,0,0,734,735,5,54,0,0,735,736,3,110,55,0,736,737,5,40,
0,0,737,747,1,0,0,0,738,739,5,54,0,0,739,740,3,110,55,0,740,741,5,61,0,0,
741,742,3,110,55,0,742,743,5,40,0,0,743,747,1,0,0,0,744,745,5,57,0,0,745,
747,5,40,0,0,746,734,1,0,0,0,746,738,1,0,0,0,746,744,1,0,0,0,747,107,1,0,
0,0,748,749,3,106,53,0,749,750,3,108,54,0,750,756,1,0,0,0,751,752,3,96,48,
0,752,753,3,108,54,0,753,756,1,0,0,0,754,756,1,0,0,0,755,748,1,0,0,0,755,
751,1,0,0,0,755,754,1,0,0,0,756,109,1,0,0,0,757,761,3,112,56,0,758,761,5,
76,0,0,759,761,3,66,33,0,760,757,1,0,0,0,760,758,1,0,0,0,760,759,1,0,0,0,
761,111,1,0,0,0,762,763,6,56,-1,0,763,764,5,2,0,0,764,765,3,112,56,0,765,
766,5,3,0,0,766,775,1,0,0,0,767,775,5,66,0,0,768,769,5,12,0,0,769,775,5,
66,0,0,770,771,5,29,0,0,771,775,5,66,0,0,772,773,5,13,0,0,773,775,5,66,0,
0,774,762,1,0,0,0,774,767,1,0,0,0,774,768,1,0,0,0,774,770,1,0,0,0,774,772,
1,0,0,0,775,820,1,0,0,0,776,777,10,19,0,0,777,778,5,24,0,0,778,819,3,112,
56,20,779,780,10,18,0,0,780,781,5,23,0,0,781,819,3,112,56,19,782,783,10,
17,0,0,783,784,5,21,0,0,784,819,3,112,56,18,785,786,10,16,0,0,786,787,5,
26,0,0,787,819,3,112,56,17,788,789,10,15,0,0,789,790,5,30,0,0,790,819,3,
112,56,16,791,792,10,14,0,0,792,793,5,31,0,0,793,819,3,112,56,15,794,795,
10,13,0,0,795,796,5,7,0,0,796,819,3,112,56,14,797,798,10,12,0,0,798,799,
5,27,0,0,799,819,3,112,56,13,800,801,10,11,0,0,801,802,5,28,0,0,802,819,
3,112,56,12,803,804,10,9,0,0,804,805,5,8,0,0,805,819,3,112,56,10,806,807,
10,8,0,0,807,808,5,9,0,0,808,819,3,112,56,9,809,810,10,7,0,0,810,811,5,10,
0,0,811,819,3,112,56,8,812,813,10,6,0,0,813,814,5,12,0,0,814,819,3,112,56,
7,815,816,10,5,0,0,816,817,5,11,0,0,817,819,3,112,56,6,818,776,1,0,0,0,818,
779,1,0,0,0,818,782,1,0,0,0,818,785,1,0,0,0,818,788,1,0,0,0,818,791,1,0,
0,0,818,794,1,0,0,0,818,797,1,0,0,0,818,800,1,0,0,0,818,803,1,0,0,0,818,
806,1,0,0,0,818,809,1,0,0,0,818,812,1,0,0,0,818,815,1,0,0,0,819,822,1,0,
0,0,820,818,1,0,0,0,820,821,1,0,0,0,821,113,1,0,0,0,822,820,1,0,0,0,823,
824,5,51,0,0,824,825,5,2,0,0,825,826,3,116,58,0,826,827,5,52,0,0,827,828,
3,26,13,0,828,829,5,3,0,0,829,830,3,96,48,0,830,115,1,0,0,0,831,837,3,120,
60,0,832,833,3,120,60,0,833,834,5,6,0,0,834,835,3,120,60,0,835,837,1,0,0,
0,836,831,1,0,0,0,836,832,1,0,0,0,837,117,1,0,0,0,838,839,5,50,0,0,839,840,
5,2,0,0,840,841,3,122,61,0,841,842,5,1,0,0,842,843,3,128,64,0,843,844,5,
1,0,0,844,845,3,128,64,0,845,846,5,3,0,0,846,847,3,96,48,0,847,119,1,0,0,
0,848,852,5,43,0,0,849,852,3,126,63,0,850,852,5,73,0,0,851,848,1,0,0,0,851,
849,1,0,0,0,851,850,1,0,0,0,852,121,1,0,0,0,853,856,3,128,64,0,854,856,3,
124,62,0,855,853,1,0,0,0,855,854,1,0,0,0,856,123,1,0,0,0,857,858,3,126,63,
0,858,859,5,18,0,0,859,860,3,26,13,0,860,125,1,0,0,0,861,862,3,42,21,0,862,
863,3,148,74,0,863,864,3,94,47,0,864,127,1,0,0,0,865,868,1,0,0,0,866,868,
3,32,16,0,867,865,1,0,0,0,867,866,1,0,0,0,868,129,1,0,0,0,869,870,5,49,0,
0,870,876,5,1,0,0,871,872,5,49,0,0,872,873,3,32,16,0,873,874,5,1,0,0,874,
876,1,0,0,0,875,869,1,0,0,0,875,871,1,0,0,0,876,131,1,0,0,0,877,878,5,47,
0,0,878,879,5,2,0,0,879,880,3,32,16,0,880,881,5,3,0,0,881,882,3,96,48,0,
882,883,3,134,67,0,883,133,1,0,0,0,884,888,1,0,0,0,885,886,5,46,0,0,886,
888,3,96,48,0,887,884,1,0,0,0,887,885,1,0,0,0,888,135,1,0,0,0,889,895,1,
0,0,0,890,895,3,138,69,0,891,892,3,138,69,0,892,893,5,45,0,0,893,895,1,0,
0,0,894,889,1,0,0,0,894,890,1,0,0,0,894,891,1,0,0,0,895,137,1,0,0,0,896,
897,6,69,-1,0,897,898,3,140,70,0,898,904,1,0,0,0,899,900,10,1,0,0,900,901,
5,6,0,0,901,903,3,140,70,0,902,899,1,0,0,0,903,906,1,0,0,0,904,902,1,0,0,
0,904,905,1,0,0,0,905,139,1,0,0,0,906,904,1,0,0,0,907,908,3,42,21,0,908,
909,3,148,74,0,909,916,1,0,0,0,910,911,3,42,21,0,911,912,3,148,74,0,912,
913,3,94,47,0,913,916,1,0,0,0,914,916,3,94,47,0,915,907,1,0,0,0,915,910,
1,0,0,0,915,914,1,0,0,0,916,141,1,0,0,0,917,918,3,12,6,0,918,919,5,48,0,
0,919,920,3,66,33,0,920,921,5,1,0,0,921,143,1,0,0,0,922,923,3,12,6,0,923,
924,3,146,73,0,924,145,1,0,0,0,925,928,3,42,21,0,926,928,1,0,0,0,927,925,
1,0,0,0,927,926,1,0,0,0,928,147,1,0,0,0,929,932,1,0,0,0,930,932,5,8,0,0,
931,929,1,0,0,0,931,930,1,0,0,0,932,149,1,0,0,0,933,934,7,2,0,0,934,151,
1,0,0,0,53,162,167,177,193,210,218,228,238,270,317,319,330,340,366,378,418,
481,483,494,501,511,526,533,544,553,560,595,618,626,639,643,656,667,677,
697,731,746,755,760,774,818,820,836,851,855,867,875,887,894,904,915,927,
931];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class LPCParser extends antlr4.Parser {

    static grammarFileName = "LPC.g4";
    static literalNames = [ null, "';'", "'('", "')'", "'{'", "'}'", "','", 
                            "'<'", "'*'", "'%'", "'/'", "'+'", "'-'", "'~'", 
                            "'$'", "'['", "']'", null, null, "'++'", "'--'", 
                            "'&'", "'&&'", "'^'", "'|'", "'||'", "'=='", 
                            "'<<'", "'>>'", "'!'", "'!='", null, "'<='", 
                            "'>'", "'>='", "'->'", null, "'break'", "'catch'", 
                            "'class'", "':'", "'::'", "'continue'", "'foo'", 
                            "'efun'", "'...'", "'else'", "'if'", "'inherit'", 
                            "'return'", "'for'", "'foreach'", "'in'", "'switch'", 
                            "'case'", "'while'", "'do'", "'default'", "'new'", 
                            "'parse_command'", "'?'", "'..'", "'sscanf'", 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, "'@'", null, "'time_expression'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, "TypeModifier", "Assign", "PlusPlus", 
                             "MinusMinus", "And", "AndAnd", "Caret", "Or", 
                             "OrOr", "Equal", "LeftShift", "RightShift", 
                             "Not", "NotEqual", "Compare", "LessEqual", 
                             "Great", "GreatEqual", "Arrow", "BasicType", 
                             "Break", "Catch", "Class", "Colon", "ColonColon", 
                             "Continue", "DefinedName", "Efun", "Ellipsis", 
                             "Else", "If", "Inherit", "Return", "For", "Foreach", 
                             "In", "Switch", "Case", "While", "Do", "Default", 
                             "New", "ParseCommand", "Question", "Range", 
                             "SScanf", "MappingOpen", "ArrayOpen", "FunctionOpen", 
                             "Number", "Parameter", "ComplexDefine", "ComplexInclude", 
                             "ComplexPreprocessor", "Real", "DigitSequence", 
                             "Identifier", "String", "StringPrefix", "CharacterConstant", 
                             "TimeExpression", "BlockComment", "LineComment", 
                             "Whitespace", "Newline" ];
    static ruleNames = [ "lpc_program", "program", "possible_semi_colon", 
                         "defination", "function_defination", "modifier_change", 
                         "type_modifier_list", "type_decl", "member_list", 
                         "member_name_list", "member_name", "name_list", 
                         "new_name", "expr0", "time_expression", "expr_or_block", 
                         "comma_expr", "parse_command", "sscanf", "lvalue_list", 
                         "cast", "basic_type", "atomic_type", "expr4", "catch_statement", 
                         "expr_list", "expr_list3", "expr_list4", "assoc_pair", 
                         "expr_list2", "expr_list_node", "string", "string_con2", 
                         "string_con1", "function_call", "function_name_call", 
                         "function_arrow_call", "function_name", "opt_class_init", 
                         "class_init", "efun_override", "block_or_semi", 
                         "block", "statements", "local_declare_statement", 
                         "local_name_list", "new_local_def", "new_local_name", 
                         "statement", "while_statement", "do_statement", 
                         "switch_statement", "local_declarations", "case_statement", 
                         "switch_block", "case_label", "constant", "foreach_loop", 
                         "foreach_vars", "for_loop", "foreach_var", "first_for_expr", 
                         "single_new_local_def_with_init", "single_new_local_def", 
                         "for_expr", "returnStatement", "cond", "optional_else_part", 
                         "argument", "argument_list", "new_arg", "inheritance", 
                         "data_type", "opt_basic_type", "optional_star", 
                         "identifier" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = LPCParser.ruleNames;
        this.literalNames = LPCParser.literalNames;
        this.symbolicNames = LPCParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 1:
    	    		return this.program_sempred(localctx, predIndex);
    	case 8:
    	    		return this.member_list_sempred(localctx, predIndex);
    	case 13:
    	    		return this.expr0_sempred(localctx, predIndex);
    	case 16:
    	    		return this.comma_expr_sempred(localctx, predIndex);
    	case 23:
    	    		return this.expr4_sempred(localctx, predIndex);
    	case 27:
    	    		return this.expr_list4_sempred(localctx, predIndex);
    	case 29:
    	    		return this.expr_list2_sempred(localctx, predIndex);
    	case 32:
    	    		return this.string_con2_sempred(localctx, predIndex);
    	case 33:
    	    		return this.string_con1_sempred(localctx, predIndex);
    	case 38:
    	    		return this.opt_class_init_sempred(localctx, predIndex);
    	case 52:
    	    		return this.local_declarations_sempred(localctx, predIndex);
    	case 56:
    	    		return this.constant_sempred(localctx, predIndex);
    	case 69:
    	    		return this.argument_list_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    program_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    member_list_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expr0_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 28);
    		case 3:
    			return this.precpred(this._ctx, 27);
    		case 4:
    			return this.precpred(this._ctx, 26);
    		case 5:
    			return this.precpred(this._ctx, 25);
    		case 6:
    			return this.precpred(this._ctx, 24);
    		case 7:
    			return this.precpred(this._ctx, 23);
    		case 8:
    			return this.precpred(this._ctx, 22);
    		case 9:
    			return this.precpred(this._ctx, 21);
    		case 10:
    			return this.precpred(this._ctx, 20);
    		case 11:
    			return this.precpred(this._ctx, 19);
    		case 12:
    			return this.precpred(this._ctx, 18);
    		case 13:
    			return this.precpred(this._ctx, 17);
    		case 14:
    			return this.precpred(this._ctx, 16);
    		case 15:
    			return this.precpred(this._ctx, 15);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    comma_expr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 16:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expr4_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 17:
    			return this.precpred(this._ctx, 22);
    		case 18:
    			return this.precpred(this._ctx, 17);
    		case 19:
    			return this.precpred(this._ctx, 16);
    		case 20:
    			return this.precpred(this._ctx, 15);
    		case 21:
    			return this.precpred(this._ctx, 14);
    		case 22:
    			return this.precpred(this._ctx, 13);
    		case 23:
    			return this.precpred(this._ctx, 12);
    		case 24:
    			return this.precpred(this._ctx, 11);
    		case 25:
    			return this.precpred(this._ctx, 10);
    		case 26:
    			return this.precpred(this._ctx, 9);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expr_list4_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 27:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expr_list2_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 28:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    string_con2_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 29:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    string_con1_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 30:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    opt_class_init_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 31:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    local_declarations_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 32:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    constant_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 33:
    			return this.precpred(this._ctx, 19);
    		case 34:
    			return this.precpred(this._ctx, 18);
    		case 35:
    			return this.precpred(this._ctx, 17);
    		case 36:
    			return this.precpred(this._ctx, 16);
    		case 37:
    			return this.precpred(this._ctx, 15);
    		case 38:
    			return this.precpred(this._ctx, 14);
    		case 39:
    			return this.precpred(this._ctx, 13);
    		case 40:
    			return this.precpred(this._ctx, 12);
    		case 41:
    			return this.precpred(this._ctx, 11);
    		case 42:
    			return this.precpred(this._ctx, 9);
    		case 43:
    			return this.precpred(this._ctx, 8);
    		case 44:
    			return this.precpred(this._ctx, 7);
    		case 45:
    			return this.precpred(this._ctx, 6);
    		case 46:
    			return this.precpred(this._ctx, 5);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    argument_list_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 47:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	lpc_program() {
	    let localctx = new Lpc_programContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, LPCParser.RULE_lpc_program);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 152;
	        this.program(0);
	        this.state = 153;
	        this.match(LPCParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	program(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ProgramContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 2;
	    this.enterRecursionRule(localctx, 2, LPCParser.RULE_program, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 162;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ProgramContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_program);
	                this.state = 156;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 157;
	                this.defination();
	                this.state = 158;
	                this.possible_semi_colon(); 
	            }
	            this.state = 164;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	possible_semi_colon() {
	    let localctx = new Possible_semi_colonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, LPCParser.RULE_possible_semi_colon);
	    try {
	        this.state = 167;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 166;
	            this.match(LPCParser.T__0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defination() {
	    let localctx = new DefinationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, LPCParser.RULE_defination);
	    try {
	        this.state = 177;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 169;
	            this.function_defination();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 170;
	            this.data_type();
	            this.state = 171;
	            this.name_list();
	            this.state = 172;
	            this.match(LPCParser.T__0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 174;
	            this.inheritance();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 175;
	            this.type_decl();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 176;
	            this.modifier_change();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_defination() {
	    let localctx = new Function_definationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, LPCParser.RULE_function_defination);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 179;
	        this.data_type();
	        this.state = 180;
	        this.optional_star();
	        this.state = 181;
	        this.identifier();
	        this.state = 182;
	        this.match(LPCParser.T__1);
	        this.state = 183;
	        this.argument();
	        this.state = 184;
	        this.match(LPCParser.T__2);
	        this.state = 185;
	        this.block_or_semi();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifier_change() {
	    let localctx = new Modifier_changeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, LPCParser.RULE_modifier_change);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 187;
	        this.type_modifier_list();
	        this.state = 188;
	        this.match(LPCParser.Colon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_modifier_list() {
	    let localctx = new Type_modifier_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, LPCParser.RULE_type_modifier_list);
	    try {
	        this.state = 193;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case LPCParser.T__7:
	        case LPCParser.BasicType:
	        case LPCParser.Class:
	        case LPCParser.Colon:
	        case LPCParser.DefinedName:
	        case LPCParser.Inherit:
	        case LPCParser.Identifier:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case LPCParser.TypeModifier:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 191;
	            this.match(LPCParser.TypeModifier);
	            this.state = 192;
	            this.type_modifier_list();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_decl() {
	    let localctx = new Type_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, LPCParser.RULE_type_decl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 195;
	        this.type_modifier_list();
	        this.state = 196;
	        this.match(LPCParser.Class);
	        this.state = 197;
	        this.identifier();
	        this.state = 198;
	        this.match(LPCParser.T__3);
	        this.state = 199;
	        this.member_list(0);
	        this.state = 200;
	        this.match(LPCParser.T__4);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	member_list(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Member_listContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 16;
	    this.enterRecursionRule(localctx, 16, LPCParser.RULE_member_list, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 210;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Member_listContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_member_list);
	                this.state = 203;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 204;
	                this.data_type();
	                this.state = 205;
	                this.member_name_list();
	                this.state = 206;
	                this.match(LPCParser.T__0); 
	            }
	            this.state = 212;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	member_name_list() {
	    let localctx = new Member_name_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, LPCParser.RULE_member_name_list);
	    try {
	        this.state = 218;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 213;
	            this.member_name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 214;
	            this.member_name();
	            this.state = 215;
	            this.match(LPCParser.T__5);
	            this.state = 216;
	            this.member_name_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	member_name() {
	    let localctx = new Member_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, LPCParser.RULE_member_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 220;
	        this.optional_star();
	        this.state = 221;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name_list() {
	    let localctx = new Name_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, LPCParser.RULE_name_list);
	    try {
	        this.state = 228;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 223;
	            this.new_name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 224;
	            this.new_name();
	            this.state = 225;
	            this.match(LPCParser.T__5);
	            this.state = 226;
	            this.name_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	new_name() {
	    let localctx = new New_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, LPCParser.RULE_new_name);
	    try {
	        this.state = 238;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 230;
	            this.optional_star();
	            this.state = 231;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 233;
	            this.optional_star();
	            this.state = 234;
	            this.identifier();
	            this.state = 235;
	            this.match(LPCParser.Assign);
	            this.state = 236;
	            this.expr0(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expr0(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Expr0Context(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 26;
	    this.enterRecursionRule(localctx, 26, LPCParser.RULE_expr0, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 270;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 241;
	            this.expr4(0);
	            this.state = 242;
	            this.match(LPCParser.Assign);
	            this.state = 243;
	            this.expr0(29);
	            break;

	        case 2:
	            this.state = 245;
	            this.cast();
	            this.state = 246;
	            this.expr0(14);
	            break;

	        case 3:
	            this.state = 248;
	            this.match(LPCParser.PlusPlus);
	            this.state = 249;
	            this.expr4(0);
	            break;

	        case 4:
	            this.state = 250;
	            this.match(LPCParser.MinusMinus);
	            this.state = 251;
	            this.expr4(0);
	            break;

	        case 5:
	            this.state = 252;
	            this.match(LPCParser.Not);
	            this.state = 253;
	            this.expr0(11);
	            break;

	        case 6:
	            this.state = 254;
	            this.match(LPCParser.T__12);
	            this.state = 255;
	            this.expr0(10);
	            break;

	        case 7:
	            this.state = 256;
	            this.match(LPCParser.T__11);
	            this.state = 257;
	            this.expr0(9);
	            break;

	        case 8:
	            this.state = 258;
	            this.expr4(0);
	            this.state = 259;
	            this.match(LPCParser.PlusPlus);
	            break;

	        case 9:
	            this.state = 261;
	            this.expr4(0);
	            this.state = 262;
	            this.match(LPCParser.MinusMinus);
	            break;

	        case 10:
	            this.state = 264;
	            this.expr4(0);
	            break;

	        case 11:
	            this.state = 265;
	            this.sscanf();
	            break;

	        case 12:
	            this.state = 266;
	            this.parse_command();
	            break;

	        case 13:
	            this.state = 267;
	            this.time_expression();
	            break;

	        case 14:
	            this.state = 268;
	            this.match(LPCParser.Number);
	            break;

	        case 15:
	            this.state = 269;
	            this.match(LPCParser.Real);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 319;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,10,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 317;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new Expr0Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr0);
	                    this.state = 272;
	                    if (!( this.precpred(this._ctx, 28))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 28)");
	                    }
	                    this.state = 273;
	                    this.match(LPCParser.Question);
	                    this.state = 274;
	                    this.expr0(0);
	                    this.state = 275;
	                    this.match(LPCParser.Colon);
	                    this.state = 276;
	                    this.expr0(29);
	                    break;

	                case 2:
	                    localctx = new Expr0Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr0);
	                    this.state = 278;
	                    if (!( this.precpred(this._ctx, 27))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
	                    }
	                    this.state = 279;
	                    this.match(LPCParser.OrOr);
	                    this.state = 280;
	                    this.expr0(28);
	                    break;

	                case 3:
	                    localctx = new Expr0Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr0);
	                    this.state = 281;
	                    if (!( this.precpred(this._ctx, 26))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
	                    }
	                    this.state = 282;
	                    this.match(LPCParser.AndAnd);
	                    this.state = 283;
	                    this.expr0(27);
	                    break;

	                case 4:
	                    localctx = new Expr0Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr0);
	                    this.state = 284;
	                    if (!( this.precpred(this._ctx, 25))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
	                    }
	                    this.state = 285;
	                    this.match(LPCParser.Or);
	                    this.state = 286;
	                    this.expr0(26);
	                    break;

	                case 5:
	                    localctx = new Expr0Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr0);
	                    this.state = 287;
	                    if (!( this.precpred(this._ctx, 24))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
	                    }
	                    this.state = 288;
	                    this.match(LPCParser.Caret);
	                    this.state = 289;
	                    this.expr0(25);
	                    break;

	                case 6:
	                    localctx = new Expr0Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr0);
	                    this.state = 290;
	                    if (!( this.precpred(this._ctx, 23))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
	                    }
	                    this.state = 291;
	                    this.match(LPCParser.And);
	                    this.state = 292;
	                    this.expr0(24);
	                    break;

	                case 7:
	                    localctx = new Expr0Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr0);
	                    this.state = 293;
	                    if (!( this.precpred(this._ctx, 22))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
	                    }
	                    this.state = 294;
	                    this.match(LPCParser.Equal);
	                    this.state = 295;
	                    this.expr0(23);
	                    break;

	                case 8:
	                    localctx = new Expr0Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr0);
	                    this.state = 296;
	                    if (!( this.precpred(this._ctx, 21))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
	                    }
	                    this.state = 297;
	                    this.match(LPCParser.NotEqual);
	                    this.state = 298;
	                    this.expr0(22);
	                    break;

	                case 9:
	                    localctx = new Expr0Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr0);
	                    this.state = 299;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 300;
	                    this.match(LPCParser.Compare);
	                    this.state = 301;
	                    this.expr0(21);
	                    break;

	                case 10:
	                    localctx = new Expr0Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr0);
	                    this.state = 302;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 303;
	                    this.match(LPCParser.T__6);
	                    this.state = 304;
	                    this.expr0(20);
	                    break;

	                case 11:
	                    localctx = new Expr0Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr0);
	                    this.state = 305;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 306;
	                    this.match(LPCParser.LeftShift);
	                    this.state = 307;
	                    this.expr0(19);
	                    break;

	                case 12:
	                    localctx = new Expr0Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr0);
	                    this.state = 308;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 309;
	                    this.match(LPCParser.RightShift);
	                    this.state = 310;
	                    this.expr0(18);
	                    break;

	                case 13:
	                    localctx = new Expr0Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr0);
	                    this.state = 311;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 312;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LPCParser.T__7) | (1 << LPCParser.T__8) | (1 << LPCParser.T__9))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 313;
	                    this.expr0(17);
	                    break;

	                case 14:
	                    localctx = new Expr0Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr0);
	                    this.state = 314;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 315;
	                    _la = this._input.LA(1);
	                    if(!(_la===LPCParser.T__10 || _la===LPCParser.T__11)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 316;
	                    this.expr0(16);
	                    break;

	                } 
	            }
	            this.state = 321;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,10,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	time_expression() {
	    let localctx = new Time_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, LPCParser.RULE_time_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 322;
	        this.match(LPCParser.TimeExpression);
	        this.state = 323;
	        this.expr_or_block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_or_block() {
	    let localctx = new Expr_or_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, LPCParser.RULE_expr_or_block);
	    try {
	        this.state = 330;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case LPCParser.T__3:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 325;
	            this.block();
	            break;
	        case LPCParser.T__1:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 326;
	            this.match(LPCParser.T__1);
	            this.state = 327;
	            this.comma_expr(0);
	            this.state = 328;
	            this.match(LPCParser.T__2);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	comma_expr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Comma_exprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 32;
	    this.enterRecursionRule(localctx, 32, LPCParser.RULE_comma_expr, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 333;
	        this.expr0(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 340;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Comma_exprContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_comma_expr);
	                this.state = 335;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 336;
	                this.match(LPCParser.T__5);
	                this.state = 337;
	                this.expr0(0); 
	            }
	            this.state = 342;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	parse_command() {
	    let localctx = new Parse_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, LPCParser.RULE_parse_command);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 343;
	        this.match(LPCParser.ParseCommand);
	        this.state = 344;
	        this.match(LPCParser.T__1);
	        this.state = 345;
	        this.expr0(0);
	        this.state = 346;
	        this.match(LPCParser.T__5);
	        this.state = 347;
	        this.expr0(0);
	        this.state = 348;
	        this.match(LPCParser.T__5);
	        this.state = 349;
	        this.expr0(0);
	        this.state = 350;
	        this.lvalue_list();
	        this.state = 351;
	        this.match(LPCParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sscanf() {
	    let localctx = new SscanfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, LPCParser.RULE_sscanf);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 353;
	        this.match(LPCParser.SScanf);
	        this.state = 354;
	        this.match(LPCParser.T__1);
	        this.state = 355;
	        this.expr0(0);
	        this.state = 356;
	        this.match(LPCParser.T__5);
	        this.state = 357;
	        this.expr0(0);
	        this.state = 358;
	        this.lvalue_list();
	        this.state = 359;
	        this.match(LPCParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lvalue_list() {
	    let localctx = new Lvalue_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, LPCParser.RULE_lvalue_list);
	    try {
	        this.state = 366;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case LPCParser.T__2:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case LPCParser.T__5:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 362;
	            this.match(LPCParser.T__5);
	            this.state = 363;
	            this.expr4(0);
	            this.state = 364;
	            this.lvalue_list();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cast() {
	    let localctx = new CastContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, LPCParser.RULE_cast);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 368;
	        this.match(LPCParser.T__1);
	        this.state = 369;
	        this.basic_type();
	        this.state = 370;
	        this.optional_star();
	        this.state = 371;
	        this.match(LPCParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	basic_type() {
	    let localctx = new Basic_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, LPCParser.RULE_basic_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 373;
	        this.atomic_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomic_type() {
	    let localctx = new Atomic_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, LPCParser.RULE_atomic_type);
	    try {
	        this.state = 378;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case LPCParser.BasicType:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 375;
	            this.match(LPCParser.BasicType);
	            break;
	        case LPCParser.Class:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 376;
	            this.match(LPCParser.Class);
	            this.state = 377;
	            this.match(LPCParser.DefinedName);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expr4(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Expr4Context(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 46;
	    this.enterRecursionRule(localctx, 46, LPCParser.RULE_expr4, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 418;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 381;
	            this.function_call();
	            break;

	        case 2:
	            this.state = 382;
	            this.match(LPCParser.DefinedName);
	            break;

	        case 3:
	            this.state = 383;
	            this.match(LPCParser.Identifier);
	            break;

	        case 4:
	            this.state = 384;
	            this.match(LPCParser.Parameter);
	            break;

	        case 5:
	            this.state = 385;
	            this.match(LPCParser.T__13);
	            this.state = 386;
	            this.match(LPCParser.T__1);
	            this.state = 387;
	            this.comma_expr(0);
	            this.state = 388;
	            this.match(LPCParser.T__2);
	            break;

	        case 6:
	            this.state = 390;
	            this.string();
	            break;

	        case 7:
	            this.state = 391;
	            this.match(LPCParser.CharacterConstant);
	            break;

	        case 8:
	            this.state = 392;
	            this.match(LPCParser.T__1);
	            this.state = 393;
	            this.comma_expr(0);
	            this.state = 394;
	            this.match(LPCParser.T__2);
	            break;

	        case 9:
	            this.state = 396;
	            this.catch_statement();
	            break;

	        case 10:
	            this.state = 397;
	            this.match(LPCParser.BasicType);
	            this.state = 398;
	            this.match(LPCParser.T__1);
	            this.state = 399;
	            this.argument();
	            this.state = 400;
	            this.match(LPCParser.T__2);
	            this.state = 401;
	            this.block();
	            break;

	        case 11:
	            this.state = 403;
	            this.match(LPCParser.FunctionOpen);
	            this.state = 404;
	            this.comma_expr(0);
	            this.state = 405;
	            this.match(LPCParser.Colon);
	            this.state = 406;
	            this.match(LPCParser.T__2);
	            break;

	        case 12:
	            this.state = 408;
	            this.match(LPCParser.MappingOpen);
	            this.state = 409;
	            this.expr_list3();
	            this.state = 410;
	            this.match(LPCParser.T__15);
	            this.state = 411;
	            this.match(LPCParser.T__2);
	            break;

	        case 13:
	            this.state = 413;
	            this.match(LPCParser.ArrayOpen);
	            this.state = 414;
	            this.expr_list();
	            this.state = 415;
	            this.match(LPCParser.T__4);
	            this.state = 416;
	            this.match(LPCParser.T__2);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 483;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,17,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 481;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new Expr4Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr4);
	                    this.state = 420;
	                    if (!( this.precpred(this._ctx, 22))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
	                    }
	                    this.state = 421;
	                    this.function_arrow_call();
	                    break;

	                case 2:
	                    localctx = new Expr4Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr4);
	                    this.state = 422;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 423;
	                    this.match(LPCParser.Arrow);
	                    this.state = 424;
	                    this.identifier();
	                    break;

	                case 3:
	                    localctx = new Expr4Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr4);
	                    this.state = 425;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 426;
	                    this.match(LPCParser.T__14);
	                    this.state = 427;
	                    this.comma_expr(0);
	                    this.state = 428;
	                    this.match(LPCParser.Range);
	                    this.state = 429;
	                    this.match(LPCParser.T__6);
	                    this.state = 430;
	                    this.comma_expr(0);
	                    this.state = 431;
	                    this.match(LPCParser.T__15);
	                    break;

	                case 4:
	                    localctx = new Expr4Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr4);
	                    this.state = 433;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 434;
	                    this.match(LPCParser.T__14);
	                    this.state = 435;
	                    this.comma_expr(0);
	                    this.state = 436;
	                    this.match(LPCParser.Range);
	                    this.state = 437;
	                    this.comma_expr(0);
	                    this.state = 438;
	                    this.match(LPCParser.T__15);
	                    break;

	                case 5:
	                    localctx = new Expr4Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr4);
	                    this.state = 440;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 441;
	                    this.match(LPCParser.T__14);
	                    this.state = 442;
	                    this.match(LPCParser.T__6);
	                    this.state = 443;
	                    this.comma_expr(0);
	                    this.state = 444;
	                    this.match(LPCParser.Range);
	                    this.state = 445;
	                    this.comma_expr(0);
	                    this.state = 446;
	                    this.match(LPCParser.T__15);
	                    break;

	                case 6:
	                    localctx = new Expr4Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr4);
	                    this.state = 448;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 449;
	                    this.match(LPCParser.T__14);
	                    this.state = 450;
	                    this.match(LPCParser.T__6);
	                    this.state = 451;
	                    this.comma_expr(0);
	                    this.state = 452;
	                    this.match(LPCParser.Range);
	                    this.state = 453;
	                    this.match(LPCParser.T__6);
	                    this.state = 454;
	                    this.comma_expr(0);
	                    this.state = 455;
	                    this.match(LPCParser.T__15);
	                    break;

	                case 7:
	                    localctx = new Expr4Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr4);
	                    this.state = 457;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 458;
	                    this.match(LPCParser.T__14);
	                    this.state = 459;
	                    this.comma_expr(0);
	                    this.state = 460;
	                    this.match(LPCParser.Range);
	                    this.state = 461;
	                    this.match(LPCParser.T__15);
	                    break;

	                case 8:
	                    localctx = new Expr4Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr4);
	                    this.state = 463;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 464;
	                    this.match(LPCParser.T__14);
	                    this.state = 465;
	                    this.match(LPCParser.T__6);
	                    this.state = 466;
	                    this.comma_expr(0);
	                    this.state = 467;
	                    this.match(LPCParser.Range);
	                    this.state = 468;
	                    this.match(LPCParser.T__15);
	                    break;

	                case 9:
	                    localctx = new Expr4Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr4);
	                    this.state = 470;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 471;
	                    this.match(LPCParser.T__14);
	                    this.state = 472;
	                    this.match(LPCParser.T__6);
	                    this.state = 473;
	                    this.comma_expr(0);
	                    this.state = 474;
	                    this.match(LPCParser.T__15);
	                    break;

	                case 10:
	                    localctx = new Expr4Context(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr4);
	                    this.state = 476;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 477;
	                    this.match(LPCParser.T__14);
	                    this.state = 478;
	                    this.comma_expr(0);
	                    this.state = 479;
	                    this.match(LPCParser.T__15);
	                    break;

	                } 
	            }
	            this.state = 485;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,17,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	catch_statement() {
	    let localctx = new Catch_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, LPCParser.RULE_catch_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 486;
	        this.match(LPCParser.Catch);
	        this.state = 487;
	        this.expr_or_block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_list() {
	    let localctx = new Expr_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, LPCParser.RULE_expr_list);
	    try {
	        this.state = 494;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 490;
	            this.expr_list2(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 491;
	            this.expr_list2(0);
	            this.state = 492;
	            this.match(LPCParser.T__5);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_list3() {
	    let localctx = new Expr_list3Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, LPCParser.RULE_expr_list3);
	    try {
	        this.state = 501;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 497;
	            this.expr_list4(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 498;
	            this.expr_list4(0);
	            this.state = 499;
	            this.match(LPCParser.T__5);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expr_list4(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Expr_list4Context(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 54;
	    this.enterRecursionRule(localctx, 54, LPCParser.RULE_expr_list4, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 504;
	        this.assoc_pair();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 511;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,20,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Expr_list4Context(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr_list4);
	                this.state = 506;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 507;
	                this.match(LPCParser.T__5);
	                this.state = 508;
	                this.assoc_pair(); 
	            }
	            this.state = 513;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,20,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	assoc_pair() {
	    let localctx = new Assoc_pairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, LPCParser.RULE_assoc_pair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 514;
	        this.expr0(0);
	        this.state = 515;
	        this.match(LPCParser.Colon);
	        this.state = 516;
	        this.expr0(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expr_list2(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Expr_list2Context(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 58;
	    this.enterRecursionRule(localctx, 58, LPCParser.RULE_expr_list2, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 519;
	        this.expr_list_node();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 526;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Expr_list2Context(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expr_list2);
	                this.state = 521;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 522;
	                this.match(LPCParser.T__5);
	                this.state = 523;
	                this.expr_list_node(); 
	            }
	            this.state = 528;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	expr_list_node() {
	    let localctx = new Expr_list_nodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, LPCParser.RULE_expr_list_node);
	    try {
	        this.state = 533;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 529;
	            this.expr0(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 530;
	            this.expr0(0);
	            this.state = 531;
	            this.match(LPCParser.Ellipsis);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string() {
	    let localctx = new StringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, LPCParser.RULE_string);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 535;
	        this.string_con2(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	string_con2(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new String_con2Context(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 64;
	    this.enterRecursionRule(localctx, 64, LPCParser.RULE_string_con2, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 538;
	        this.match(LPCParser.String);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 544;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,23,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new String_con2Context(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_string_con2);
	                this.state = 540;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 541;
	                this.match(LPCParser.String); 
	            }
	            this.state = 546;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,23,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	string_con1(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new String_con1Context(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 66;
	    this.enterRecursionRule(localctx, 66, LPCParser.RULE_string_con1, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 553;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case LPCParser.String:
	            this.state = 548;
	            this.string_con2(0);
	            break;
	        case LPCParser.T__1:
	            this.state = 549;
	            this.match(LPCParser.T__1);
	            this.state = 550;
	            this.string_con1(0);
	            this.state = 551;
	            this.match(LPCParser.T__2);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 560;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,25,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new String_con1Context(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_string_con1);
	                this.state = 555;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 556;
	                this.match(LPCParser.T__10);
	                this.state = 557;
	                this.string_con1(2); 
	            }
	            this.state = 562;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,25,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	function_call() {
	    let localctx = new Function_callContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, LPCParser.RULE_function_call);
	    try {
	        this.state = 595;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 563;
	            this.efun_override();
	            this.state = 564;
	            this.match(LPCParser.T__1);
	            this.state = 565;
	            this.expr_list();
	            this.state = 566;
	            this.match(LPCParser.T__2);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 568;
	            this.match(LPCParser.New);
	            this.state = 569;
	            this.match(LPCParser.T__1);
	            this.state = 570;
	            this.expr_list();
	            this.state = 571;
	            this.match(LPCParser.T__2);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 573;
	            this.match(LPCParser.New);
	            this.state = 574;
	            this.match(LPCParser.T__1);
	            this.state = 575;
	            this.match(LPCParser.Class);
	            this.state = 576;
	            this.match(LPCParser.DefinedName);
	            this.state = 577;
	            this.opt_class_init(0);
	            this.state = 578;
	            this.match(LPCParser.T__2);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 580;
	            this.match(LPCParser.DefinedName);
	            this.state = 581;
	            this.match(LPCParser.T__1);
	            this.state = 582;
	            this.expr_list();
	            this.state = 583;
	            this.match(LPCParser.T__2);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 585;
	            this.function_name_call();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 586;
	            this.function_arrow_call();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 587;
	            this.match(LPCParser.T__1);
	            this.state = 588;
	            this.match(LPCParser.T__7);
	            this.state = 589;
	            this.comma_expr(0);
	            this.state = 590;
	            this.match(LPCParser.T__2);
	            this.state = 591;
	            this.match(LPCParser.T__1);
	            this.state = 592;
	            this.expr_list();
	            this.state = 593;
	            this.match(LPCParser.T__2);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_name_call() {
	    let localctx = new Function_name_callContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, LPCParser.RULE_function_name_call);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 597;
	        this.function_name();
	        this.state = 598;
	        this.match(LPCParser.T__1);
	        this.state = 599;
	        this.expr_list();
	        this.state = 600;
	        this.match(LPCParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_arrow_call() {
	    let localctx = new Function_arrow_callContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, LPCParser.RULE_function_arrow_call);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 602;
	        this.match(LPCParser.Arrow);
	        this.state = 603;
	        this.identifier();
	        this.state = 604;
	        this.match(LPCParser.T__1);
	        this.state = 605;
	        this.expr_list();
	        this.state = 606;
	        this.match(LPCParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_name() {
	    let localctx = new Function_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, LPCParser.RULE_function_name);
	    try {
	        this.state = 618;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 608;
	            this.match(LPCParser.Identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 609;
	            this.match(LPCParser.ColonColon);
	            this.state = 610;
	            this.identifier();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 611;
	            this.match(LPCParser.BasicType);
	            this.state = 612;
	            this.match(LPCParser.ColonColon);
	            this.state = 613;
	            this.identifier();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 614;
	            this.identifier();
	            this.state = 615;
	            this.match(LPCParser.ColonColon);
	            this.state = 616;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	opt_class_init(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Opt_class_initContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 76;
	    this.enterRecursionRule(localctx, 76, LPCParser.RULE_opt_class_init, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 626;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,28,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Opt_class_initContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_opt_class_init);
	                this.state = 621;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 622;
	                this.match(LPCParser.T__5);
	                this.state = 623;
	                this.class_init(); 
	            }
	            this.state = 628;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,28,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	class_init() {
	    let localctx = new Class_initContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, LPCParser.RULE_class_init);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 629;
	        this.identifier();
	        this.state = 630;
	        this.match(LPCParser.Colon);
	        this.state = 631;
	        this.expr0(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	efun_override() {
	    let localctx = new Efun_overrideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, LPCParser.RULE_efun_override);
	    try {
	        this.state = 639;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 633;
	            this.match(LPCParser.Efun);
	            this.state = 634;
	            this.match(LPCParser.ColonColon);
	            this.state = 635;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 636;
	            this.match(LPCParser.Efun);
	            this.state = 637;
	            this.match(LPCParser.ColonColon);
	            this.state = 638;
	            this.match(LPCParser.New);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block_or_semi() {
	    let localctx = new Block_or_semiContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, LPCParser.RULE_block_or_semi);
	    try {
	        this.state = 643;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case LPCParser.T__3:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 641;
	            this.block();
	            break;
	        case LPCParser.T__0:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 642;
	            this.match(LPCParser.T__0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, LPCParser.RULE_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 645;
	        this.match(LPCParser.T__3);
	        this.state = 646;
	        this.statements();
	        this.state = 647;
	        this.match(LPCParser.T__4);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statements() {
	    let localctx = new StatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, LPCParser.RULE_statements);
	    try {
	        this.state = 656;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 650;
	            this.statement();
	            this.state = 651;
	            this.statements();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 653;
	            this.local_declare_statement();
	            this.state = 654;
	            this.statements();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	local_declare_statement() {
	    let localctx = new Local_declare_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, LPCParser.RULE_local_declare_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 658;
	        this.basic_type();
	        this.state = 659;
	        this.local_name_list();
	        this.state = 660;
	        this.match(LPCParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	local_name_list() {
	    let localctx = new Local_name_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, LPCParser.RULE_local_name_list);
	    try {
	        this.state = 667;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 662;
	            this.new_local_def();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 663;
	            this.new_local_def();
	            this.state = 664;
	            this.match(LPCParser.T__5);
	            this.state = 665;
	            this.local_name_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	new_local_def() {
	    let localctx = new New_local_defContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, LPCParser.RULE_new_local_def);
	    try {
	        this.state = 677;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 669;
	            this.optional_star();
	            this.state = 670;
	            this.new_local_name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 672;
	            this.optional_star();
	            this.state = 673;
	            this.new_local_name();
	            this.state = 674;
	            this.match(LPCParser.Assign);
	            this.state = 675;
	            this.expr0(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	new_local_name() {
	    let localctx = new New_local_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, LPCParser.RULE_new_local_name);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 679;
	        _la = this._input.LA(1);
	        if(!(_la===LPCParser.DefinedName || _la===LPCParser.Identifier)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, LPCParser.RULE_statement);
	    try {
	        this.state = 697;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case LPCParser.T__1:
	        case LPCParser.T__11:
	        case LPCParser.T__12:
	        case LPCParser.T__13:
	        case LPCParser.PlusPlus:
	        case LPCParser.MinusMinus:
	        case LPCParser.Not:
	        case LPCParser.Arrow:
	        case LPCParser.BasicType:
	        case LPCParser.Catch:
	        case LPCParser.ColonColon:
	        case LPCParser.DefinedName:
	        case LPCParser.Efun:
	        case LPCParser.New:
	        case LPCParser.ParseCommand:
	        case LPCParser.SScanf:
	        case LPCParser.MappingOpen:
	        case LPCParser.ArrayOpen:
	        case LPCParser.FunctionOpen:
	        case LPCParser.Number:
	        case LPCParser.Parameter:
	        case LPCParser.Real:
	        case LPCParser.Identifier:
	        case LPCParser.String:
	        case LPCParser.CharacterConstant:
	        case LPCParser.TimeExpression:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 681;
	            this.comma_expr(0);
	            this.state = 682;
	            this.match(LPCParser.T__0);
	            break;
	        case LPCParser.If:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 684;
	            this.cond();
	            break;
	        case LPCParser.While:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 685;
	            this.while_statement();
	            break;
	        case LPCParser.Do:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 686;
	            this.do_statement();
	            break;
	        case LPCParser.Switch:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 687;
	            this.switch_statement();
	            break;
	        case LPCParser.Return:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 688;
	            this.returnStatement();
	            break;
	        case LPCParser.T__3:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 689;
	            this.block();
	            break;
	        case LPCParser.For:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 690;
	            this.for_loop();
	            break;
	        case LPCParser.Foreach:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 691;
	            this.foreach_loop();
	            break;
	        case LPCParser.T__0:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 692;
	            this.match(LPCParser.T__0);
	            break;
	        case LPCParser.Break:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 693;
	            this.match(LPCParser.Break);
	            this.state = 694;
	            this.match(LPCParser.T__0);
	            break;
	        case LPCParser.Continue:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 695;
	            this.match(LPCParser.Continue);
	            this.state = 696;
	            this.match(LPCParser.T__0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	while_statement() {
	    let localctx = new While_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, LPCParser.RULE_while_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 699;
	        this.match(LPCParser.While);
	        this.state = 700;
	        this.match(LPCParser.T__1);
	        this.state = 701;
	        this.comma_expr(0);
	        this.state = 702;
	        this.match(LPCParser.T__2);
	        this.state = 703;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	do_statement() {
	    let localctx = new Do_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, LPCParser.RULE_do_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 705;
	        this.match(LPCParser.Do);
	        this.state = 706;
	        this.statement();
	        this.state = 707;
	        this.match(LPCParser.While);
	        this.state = 708;
	        this.match(LPCParser.T__1);
	        this.state = 709;
	        this.comma_expr(0);
	        this.state = 710;
	        this.match(LPCParser.T__2);
	        this.state = 711;
	        this.match(LPCParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_statement() {
	    let localctx = new Switch_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, LPCParser.RULE_switch_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 713;
	        this.match(LPCParser.Switch);
	        this.state = 714;
	        this.match(LPCParser.T__1);
	        this.state = 715;
	        this.comma_expr(0);
	        this.state = 716;
	        this.match(LPCParser.T__2);
	        this.state = 717;
	        this.match(LPCParser.T__3);
	        this.state = 718;
	        this.local_declarations(0);
	        this.state = 719;
	        this.case_statement();
	        this.state = 720;
	        this.switch_block();
	        this.state = 721;
	        this.match(LPCParser.T__4);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	local_declarations(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Local_declarationsContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 104;
	    this.enterRecursionRule(localctx, 104, LPCParser.RULE_local_declarations, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 731;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Local_declarationsContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_local_declarations);
	                this.state = 724;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 725;
	                this.basic_type();
	                this.state = 726;
	                this.local_name_list();
	                this.state = 727;
	                this.match(LPCParser.T__0); 
	            }
	            this.state = 733;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	case_statement() {
	    let localctx = new Case_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, LPCParser.RULE_case_statement);
	    try {
	        this.state = 746;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 734;
	            this.match(LPCParser.Case);
	            this.state = 735;
	            this.case_label();
	            this.state = 736;
	            this.match(LPCParser.Colon);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 738;
	            this.match(LPCParser.Case);
	            this.state = 739;
	            this.case_label();
	            this.state = 740;
	            this.match(LPCParser.Range);
	            this.state = 741;
	            this.case_label();
	            this.state = 742;
	            this.match(LPCParser.Colon);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 744;
	            this.match(LPCParser.Default);
	            this.state = 745;
	            this.match(LPCParser.Colon);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_block() {
	    let localctx = new Switch_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, LPCParser.RULE_switch_block);
	    try {
	        this.state = 755;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case LPCParser.Case:
	        case LPCParser.Default:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 748;
	            this.case_statement();
	            this.state = 749;
	            this.switch_block();
	            break;
	        case LPCParser.T__0:
	        case LPCParser.T__1:
	        case LPCParser.T__3:
	        case LPCParser.T__11:
	        case LPCParser.T__12:
	        case LPCParser.T__13:
	        case LPCParser.PlusPlus:
	        case LPCParser.MinusMinus:
	        case LPCParser.Not:
	        case LPCParser.Arrow:
	        case LPCParser.BasicType:
	        case LPCParser.Break:
	        case LPCParser.Catch:
	        case LPCParser.ColonColon:
	        case LPCParser.Continue:
	        case LPCParser.DefinedName:
	        case LPCParser.Efun:
	        case LPCParser.If:
	        case LPCParser.Return:
	        case LPCParser.For:
	        case LPCParser.Foreach:
	        case LPCParser.Switch:
	        case LPCParser.While:
	        case LPCParser.Do:
	        case LPCParser.New:
	        case LPCParser.ParseCommand:
	        case LPCParser.SScanf:
	        case LPCParser.MappingOpen:
	        case LPCParser.ArrayOpen:
	        case LPCParser.FunctionOpen:
	        case LPCParser.Number:
	        case LPCParser.Parameter:
	        case LPCParser.Real:
	        case LPCParser.Identifier:
	        case LPCParser.String:
	        case LPCParser.CharacterConstant:
	        case LPCParser.TimeExpression:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 751;
	            this.statement();
	            this.state = 752;
	            this.switch_block();
	            break;
	        case LPCParser.T__4:
	            this.enterOuterAlt(localctx, 3);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	case_label() {
	    let localctx = new Case_labelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, LPCParser.RULE_case_label);
	    try {
	        this.state = 760;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 757;
	            this.constant(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 758;
	            this.match(LPCParser.CharacterConstant);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 759;
	            this.string_con1(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	constant(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ConstantContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 112;
	    this.enterRecursionRule(localctx, 112, LPCParser.RULE_constant, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 774;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case LPCParser.T__1:
	            this.state = 763;
	            this.match(LPCParser.T__1);
	            this.state = 764;
	            this.constant(0);
	            this.state = 765;
	            this.match(LPCParser.T__2);
	            break;
	        case LPCParser.Number:
	            this.state = 767;
	            this.match(LPCParser.Number);
	            break;
	        case LPCParser.T__11:
	            this.state = 768;
	            this.match(LPCParser.T__11);
	            this.state = 769;
	            this.match(LPCParser.Number);
	            break;
	        case LPCParser.Not:
	            this.state = 770;
	            this.match(LPCParser.Not);
	            this.state = 771;
	            this.match(LPCParser.Number);
	            break;
	        case LPCParser.T__12:
	            this.state = 772;
	            this.match(LPCParser.T__12);
	            this.state = 773;
	            this.match(LPCParser.Number);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 820;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 818;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ConstantContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_constant);
	                    this.state = 776;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 777;
	                    this.match(LPCParser.Or);
	                    this.state = 778;
	                    this.constant(20);
	                    break;

	                case 2:
	                    localctx = new ConstantContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_constant);
	                    this.state = 779;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 780;
	                    this.match(LPCParser.Caret);
	                    this.state = 781;
	                    this.constant(19);
	                    break;

	                case 3:
	                    localctx = new ConstantContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_constant);
	                    this.state = 782;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 783;
	                    this.match(LPCParser.And);
	                    this.state = 784;
	                    this.constant(18);
	                    break;

	                case 4:
	                    localctx = new ConstantContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_constant);
	                    this.state = 785;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 786;
	                    this.match(LPCParser.Equal);
	                    this.state = 787;
	                    this.constant(17);
	                    break;

	                case 5:
	                    localctx = new ConstantContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_constant);
	                    this.state = 788;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 789;
	                    this.match(LPCParser.NotEqual);
	                    this.state = 790;
	                    this.constant(16);
	                    break;

	                case 6:
	                    localctx = new ConstantContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_constant);
	                    this.state = 791;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 792;
	                    this.match(LPCParser.Compare);
	                    this.state = 793;
	                    this.constant(15);
	                    break;

	                case 7:
	                    localctx = new ConstantContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_constant);
	                    this.state = 794;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 795;
	                    this.match(LPCParser.T__6);
	                    this.state = 796;
	                    this.constant(14);
	                    break;

	                case 8:
	                    localctx = new ConstantContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_constant);
	                    this.state = 797;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 798;
	                    this.match(LPCParser.LeftShift);
	                    this.state = 799;
	                    this.constant(13);
	                    break;

	                case 9:
	                    localctx = new ConstantContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_constant);
	                    this.state = 800;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 801;
	                    this.match(LPCParser.RightShift);
	                    this.state = 802;
	                    this.constant(12);
	                    break;

	                case 10:
	                    localctx = new ConstantContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_constant);
	                    this.state = 803;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 804;
	                    this.match(LPCParser.T__7);
	                    this.state = 805;
	                    this.constant(10);
	                    break;

	                case 11:
	                    localctx = new ConstantContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_constant);
	                    this.state = 806;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 807;
	                    this.match(LPCParser.T__8);
	                    this.state = 808;
	                    this.constant(9);
	                    break;

	                case 12:
	                    localctx = new ConstantContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_constant);
	                    this.state = 809;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 810;
	                    this.match(LPCParser.T__9);
	                    this.state = 811;
	                    this.constant(8);
	                    break;

	                case 13:
	                    localctx = new ConstantContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_constant);
	                    this.state = 812;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 813;
	                    this.match(LPCParser.T__11);
	                    this.state = 814;
	                    this.constant(7);
	                    break;

	                case 14:
	                    localctx = new ConstantContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_constant);
	                    this.state = 815;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 816;
	                    this.match(LPCParser.T__10);
	                    this.state = 817;
	                    this.constant(6);
	                    break;

	                } 
	            }
	            this.state = 822;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	foreach_loop() {
	    let localctx = new Foreach_loopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, LPCParser.RULE_foreach_loop);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 823;
	        this.match(LPCParser.Foreach);
	        this.state = 824;
	        this.match(LPCParser.T__1);
	        this.state = 825;
	        this.foreach_vars();
	        this.state = 826;
	        this.match(LPCParser.In);
	        this.state = 827;
	        this.expr0(0);
	        this.state = 828;
	        this.match(LPCParser.T__2);
	        this.state = 829;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	foreach_vars() {
	    let localctx = new Foreach_varsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, LPCParser.RULE_foreach_vars);
	    try {
	        this.state = 836;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 831;
	            this.foreach_var();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 832;
	            this.foreach_var();
	            this.state = 833;
	            this.match(LPCParser.T__5);
	            this.state = 834;
	            this.foreach_var();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_loop() {
	    let localctx = new For_loopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, LPCParser.RULE_for_loop);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 838;
	        this.match(LPCParser.For);
	        this.state = 839;
	        this.match(LPCParser.T__1);
	        this.state = 840;
	        this.first_for_expr();
	        this.state = 841;
	        this.match(LPCParser.T__0);
	        this.state = 842;
	        this.for_expr();
	        this.state = 843;
	        this.match(LPCParser.T__0);
	        this.state = 844;
	        this.for_expr();
	        this.state = 845;
	        this.match(LPCParser.T__2);
	        this.state = 846;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	foreach_var() {
	    let localctx = new Foreach_varContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, LPCParser.RULE_foreach_var);
	    try {
	        this.state = 851;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case LPCParser.DefinedName:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 848;
	            this.match(LPCParser.DefinedName);
	            break;
	        case LPCParser.BasicType:
	        case LPCParser.Class:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 849;
	            this.single_new_local_def();
	            break;
	        case LPCParser.Identifier:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 850;
	            this.match(LPCParser.Identifier);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	first_for_expr() {
	    let localctx = new First_for_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, LPCParser.RULE_first_for_expr);
	    try {
	        this.state = 855;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 853;
	            this.for_expr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 854;
	            this.single_new_local_def_with_init();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	single_new_local_def_with_init() {
	    let localctx = new Single_new_local_def_with_initContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, LPCParser.RULE_single_new_local_def_with_init);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 857;
	        this.single_new_local_def();
	        this.state = 858;
	        this.match(LPCParser.Assign);
	        this.state = 859;
	        this.expr0(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	single_new_local_def() {
	    let localctx = new Single_new_local_defContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, LPCParser.RULE_single_new_local_def);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 861;
	        this.basic_type();
	        this.state = 862;
	        this.optional_star();
	        this.state = 863;
	        this.new_local_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_expr() {
	    let localctx = new For_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, LPCParser.RULE_for_expr);
	    try {
	        this.state = 867;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case LPCParser.T__0:
	        case LPCParser.T__2:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case LPCParser.T__1:
	        case LPCParser.T__11:
	        case LPCParser.T__12:
	        case LPCParser.T__13:
	        case LPCParser.PlusPlus:
	        case LPCParser.MinusMinus:
	        case LPCParser.Not:
	        case LPCParser.Arrow:
	        case LPCParser.BasicType:
	        case LPCParser.Catch:
	        case LPCParser.ColonColon:
	        case LPCParser.DefinedName:
	        case LPCParser.Efun:
	        case LPCParser.New:
	        case LPCParser.ParseCommand:
	        case LPCParser.SScanf:
	        case LPCParser.MappingOpen:
	        case LPCParser.ArrayOpen:
	        case LPCParser.FunctionOpen:
	        case LPCParser.Number:
	        case LPCParser.Parameter:
	        case LPCParser.Real:
	        case LPCParser.Identifier:
	        case LPCParser.String:
	        case LPCParser.CharacterConstant:
	        case LPCParser.TimeExpression:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 866;
	            this.comma_expr(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, LPCParser.RULE_returnStatement);
	    try {
	        this.state = 875;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 869;
	            this.match(LPCParser.Return);
	            this.state = 870;
	            this.match(LPCParser.T__0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 871;
	            this.match(LPCParser.Return);
	            this.state = 872;
	            this.comma_expr(0);
	            this.state = 873;
	            this.match(LPCParser.T__0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cond() {
	    let localctx = new CondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, LPCParser.RULE_cond);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 877;
	        this.match(LPCParser.If);
	        this.state = 878;
	        this.match(LPCParser.T__1);
	        this.state = 879;
	        this.comma_expr(0);
	        this.state = 880;
	        this.match(LPCParser.T__2);
	        this.state = 881;
	        this.statement();
	        this.state = 882;
	        this.optional_else_part();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optional_else_part() {
	    let localctx = new Optional_else_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, LPCParser.RULE_optional_else_part);
	    try {
	        this.state = 887;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 885;
	            this.match(LPCParser.Else);
	            this.state = 886;
	            this.statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument() {
	    let localctx = new ArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, LPCParser.RULE_argument);
	    try {
	        this.state = 894;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 890;
	            this.argument_list(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 891;
	            this.argument_list(0);
	            this.state = 892;
	            this.match(LPCParser.Ellipsis);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	argument_list(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Argument_listContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 138;
	    this.enterRecursionRule(localctx, 138, LPCParser.RULE_argument_list, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 897;
	        this.new_arg();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 904;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,49,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Argument_listContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_argument_list);
	                this.state = 899;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 900;
	                this.match(LPCParser.T__5);
	                this.state = 901;
	                this.new_arg(); 
	            }
	            this.state = 906;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,49,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	new_arg() {
	    let localctx = new New_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, LPCParser.RULE_new_arg);
	    try {
	        this.state = 915;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 907;
	            this.basic_type();
	            this.state = 908;
	            this.optional_star();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 910;
	            this.basic_type();
	            this.state = 911;
	            this.optional_star();
	            this.state = 912;
	            this.new_local_name();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 914;
	            this.new_local_name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inheritance() {
	    let localctx = new InheritanceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, LPCParser.RULE_inheritance);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 917;
	        this.type_modifier_list();
	        this.state = 918;
	        this.match(LPCParser.Inherit);
	        this.state = 919;
	        this.string_con1(0);
	        this.state = 920;
	        this.match(LPCParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	data_type() {
	    let localctx = new Data_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, LPCParser.RULE_data_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 922;
	        this.type_modifier_list();
	        this.state = 923;
	        this.opt_basic_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_basic_type() {
	    let localctx = new Opt_basic_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, LPCParser.RULE_opt_basic_type);
	    try {
	        this.state = 927;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case LPCParser.BasicType:
	        case LPCParser.Class:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 925;
	            this.basic_type();
	            break;
	        case LPCParser.T__7:
	        case LPCParser.DefinedName:
	        case LPCParser.Identifier:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optional_star() {
	    let localctx = new Optional_starContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, LPCParser.RULE_optional_star);
	    try {
	        this.state = 931;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 930;
	            this.match(LPCParser.T__7);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, LPCParser.RULE_identifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 933;
	        _la = this._input.LA(1);
	        if(!(_la===LPCParser.DefinedName || _la===LPCParser.Identifier)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

LPCParser.EOF = antlr4.Token.EOF;
LPCParser.T__0 = 1;
LPCParser.T__1 = 2;
LPCParser.T__2 = 3;
LPCParser.T__3 = 4;
LPCParser.T__4 = 5;
LPCParser.T__5 = 6;
LPCParser.T__6 = 7;
LPCParser.T__7 = 8;
LPCParser.T__8 = 9;
LPCParser.T__9 = 10;
LPCParser.T__10 = 11;
LPCParser.T__11 = 12;
LPCParser.T__12 = 13;
LPCParser.T__13 = 14;
LPCParser.T__14 = 15;
LPCParser.T__15 = 16;
LPCParser.TypeModifier = 17;
LPCParser.Assign = 18;
LPCParser.PlusPlus = 19;
LPCParser.MinusMinus = 20;
LPCParser.And = 21;
LPCParser.AndAnd = 22;
LPCParser.Caret = 23;
LPCParser.Or = 24;
LPCParser.OrOr = 25;
LPCParser.Equal = 26;
LPCParser.LeftShift = 27;
LPCParser.RightShift = 28;
LPCParser.Not = 29;
LPCParser.NotEqual = 30;
LPCParser.Compare = 31;
LPCParser.LessEqual = 32;
LPCParser.Great = 33;
LPCParser.GreatEqual = 34;
LPCParser.Arrow = 35;
LPCParser.BasicType = 36;
LPCParser.Break = 37;
LPCParser.Catch = 38;
LPCParser.Class = 39;
LPCParser.Colon = 40;
LPCParser.ColonColon = 41;
LPCParser.Continue = 42;
LPCParser.DefinedName = 43;
LPCParser.Efun = 44;
LPCParser.Ellipsis = 45;
LPCParser.Else = 46;
LPCParser.If = 47;
LPCParser.Inherit = 48;
LPCParser.Return = 49;
LPCParser.For = 50;
LPCParser.Foreach = 51;
LPCParser.In = 52;
LPCParser.Switch = 53;
LPCParser.Case = 54;
LPCParser.While = 55;
LPCParser.Do = 56;
LPCParser.Default = 57;
LPCParser.New = 58;
LPCParser.ParseCommand = 59;
LPCParser.Question = 60;
LPCParser.Range = 61;
LPCParser.SScanf = 62;
LPCParser.MappingOpen = 63;
LPCParser.ArrayOpen = 64;
LPCParser.FunctionOpen = 65;
LPCParser.Number = 66;
LPCParser.Parameter = 67;
LPCParser.ComplexDefine = 68;
LPCParser.ComplexInclude = 69;
LPCParser.ComplexPreprocessor = 70;
LPCParser.Real = 71;
LPCParser.DigitSequence = 72;
LPCParser.Identifier = 73;
LPCParser.String = 74;
LPCParser.StringPrefix = 75;
LPCParser.CharacterConstant = 76;
LPCParser.TimeExpression = 77;
LPCParser.BlockComment = 78;
LPCParser.LineComment = 79;
LPCParser.Whitespace = 80;
LPCParser.Newline = 81;

LPCParser.RULE_lpc_program = 0;
LPCParser.RULE_program = 1;
LPCParser.RULE_possible_semi_colon = 2;
LPCParser.RULE_defination = 3;
LPCParser.RULE_function_defination = 4;
LPCParser.RULE_modifier_change = 5;
LPCParser.RULE_type_modifier_list = 6;
LPCParser.RULE_type_decl = 7;
LPCParser.RULE_member_list = 8;
LPCParser.RULE_member_name_list = 9;
LPCParser.RULE_member_name = 10;
LPCParser.RULE_name_list = 11;
LPCParser.RULE_new_name = 12;
LPCParser.RULE_expr0 = 13;
LPCParser.RULE_time_expression = 14;
LPCParser.RULE_expr_or_block = 15;
LPCParser.RULE_comma_expr = 16;
LPCParser.RULE_parse_command = 17;
LPCParser.RULE_sscanf = 18;
LPCParser.RULE_lvalue_list = 19;
LPCParser.RULE_cast = 20;
LPCParser.RULE_basic_type = 21;
LPCParser.RULE_atomic_type = 22;
LPCParser.RULE_expr4 = 23;
LPCParser.RULE_catch_statement = 24;
LPCParser.RULE_expr_list = 25;
LPCParser.RULE_expr_list3 = 26;
LPCParser.RULE_expr_list4 = 27;
LPCParser.RULE_assoc_pair = 28;
LPCParser.RULE_expr_list2 = 29;
LPCParser.RULE_expr_list_node = 30;
LPCParser.RULE_string = 31;
LPCParser.RULE_string_con2 = 32;
LPCParser.RULE_string_con1 = 33;
LPCParser.RULE_function_call = 34;
LPCParser.RULE_function_name_call = 35;
LPCParser.RULE_function_arrow_call = 36;
LPCParser.RULE_function_name = 37;
LPCParser.RULE_opt_class_init = 38;
LPCParser.RULE_class_init = 39;
LPCParser.RULE_efun_override = 40;
LPCParser.RULE_block_or_semi = 41;
LPCParser.RULE_block = 42;
LPCParser.RULE_statements = 43;
LPCParser.RULE_local_declare_statement = 44;
LPCParser.RULE_local_name_list = 45;
LPCParser.RULE_new_local_def = 46;
LPCParser.RULE_new_local_name = 47;
LPCParser.RULE_statement = 48;
LPCParser.RULE_while_statement = 49;
LPCParser.RULE_do_statement = 50;
LPCParser.RULE_switch_statement = 51;
LPCParser.RULE_local_declarations = 52;
LPCParser.RULE_case_statement = 53;
LPCParser.RULE_switch_block = 54;
LPCParser.RULE_case_label = 55;
LPCParser.RULE_constant = 56;
LPCParser.RULE_foreach_loop = 57;
LPCParser.RULE_foreach_vars = 58;
LPCParser.RULE_for_loop = 59;
LPCParser.RULE_foreach_var = 60;
LPCParser.RULE_first_for_expr = 61;
LPCParser.RULE_single_new_local_def_with_init = 62;
LPCParser.RULE_single_new_local_def = 63;
LPCParser.RULE_for_expr = 64;
LPCParser.RULE_returnStatement = 65;
LPCParser.RULE_cond = 66;
LPCParser.RULE_optional_else_part = 67;
LPCParser.RULE_argument = 68;
LPCParser.RULE_argument_list = 69;
LPCParser.RULE_new_arg = 70;
LPCParser.RULE_inheritance = 71;
LPCParser.RULE_data_type = 72;
LPCParser.RULE_opt_basic_type = 73;
LPCParser.RULE_optional_star = 74;
LPCParser.RULE_identifier = 75;

class Lpc_programContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_lpc_program;
    }

	program() {
	    return this.getTypedRuleContext(ProgramContext,0);
	};

	EOF() {
	    return this.getToken(LPCParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterLpc_program(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitLpc_program(this);
		}
	}


}



class ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_program;
    }

	program() {
	    return this.getTypedRuleContext(ProgramContext,0);
	};

	defination() {
	    return this.getTypedRuleContext(DefinationContext,0);
	};

	possible_semi_colon() {
	    return this.getTypedRuleContext(Possible_semi_colonContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitProgram(this);
		}
	}


}



class Possible_semi_colonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_possible_semi_colon;
    }


	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterPossible_semi_colon(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitPossible_semi_colon(this);
		}
	}


}



class DefinationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_defination;
    }

	function_defination() {
	    return this.getTypedRuleContext(Function_definationContext,0);
	};

	data_type() {
	    return this.getTypedRuleContext(Data_typeContext,0);
	};

	name_list() {
	    return this.getTypedRuleContext(Name_listContext,0);
	};

	inheritance() {
	    return this.getTypedRuleContext(InheritanceContext,0);
	};

	type_decl() {
	    return this.getTypedRuleContext(Type_declContext,0);
	};

	modifier_change() {
	    return this.getTypedRuleContext(Modifier_changeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterDefination(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitDefination(this);
		}
	}


}



class Function_definationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_function_defination;
    }

	data_type() {
	    return this.getTypedRuleContext(Data_typeContext,0);
	};

	optional_star() {
	    return this.getTypedRuleContext(Optional_starContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	argument() {
	    return this.getTypedRuleContext(ArgumentContext,0);
	};

	block_or_semi() {
	    return this.getTypedRuleContext(Block_or_semiContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterFunction_defination(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitFunction_defination(this);
		}
	}


}



class Modifier_changeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_modifier_change;
    }

	type_modifier_list() {
	    return this.getTypedRuleContext(Type_modifier_listContext,0);
	};

	Colon() {
	    return this.getToken(LPCParser.Colon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterModifier_change(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitModifier_change(this);
		}
	}


}



class Type_modifier_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_type_modifier_list;
    }

	TypeModifier() {
	    return this.getToken(LPCParser.TypeModifier, 0);
	};

	type_modifier_list() {
	    return this.getTypedRuleContext(Type_modifier_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterType_modifier_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitType_modifier_list(this);
		}
	}


}



class Type_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_type_decl;
    }

	type_modifier_list() {
	    return this.getTypedRuleContext(Type_modifier_listContext,0);
	};

	Class() {
	    return this.getToken(LPCParser.Class, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	member_list() {
	    return this.getTypedRuleContext(Member_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterType_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitType_decl(this);
		}
	}


}



class Member_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_member_list;
    }

	member_list() {
	    return this.getTypedRuleContext(Member_listContext,0);
	};

	data_type() {
	    return this.getTypedRuleContext(Data_typeContext,0);
	};

	member_name_list() {
	    return this.getTypedRuleContext(Member_name_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterMember_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitMember_list(this);
		}
	}


}



class Member_name_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_member_name_list;
    }

	member_name() {
	    return this.getTypedRuleContext(Member_nameContext,0);
	};

	member_name_list() {
	    return this.getTypedRuleContext(Member_name_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterMember_name_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitMember_name_list(this);
		}
	}


}



class Member_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_member_name;
    }

	optional_star() {
	    return this.getTypedRuleContext(Optional_starContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterMember_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitMember_name(this);
		}
	}


}



class Name_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_name_list;
    }

	new_name() {
	    return this.getTypedRuleContext(New_nameContext,0);
	};

	name_list() {
	    return this.getTypedRuleContext(Name_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterName_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitName_list(this);
		}
	}


}



class New_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_new_name;
    }

	optional_star() {
	    return this.getTypedRuleContext(Optional_starContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Assign() {
	    return this.getToken(LPCParser.Assign, 0);
	};

	expr0() {
	    return this.getTypedRuleContext(Expr0Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterNew_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitNew_name(this);
		}
	}


}



class Expr0Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_expr0;
    }

	expr4() {
	    return this.getTypedRuleContext(Expr4Context,0);
	};

	Assign() {
	    return this.getToken(LPCParser.Assign, 0);
	};

	expr0 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expr0Context);
	    } else {
	        return this.getTypedRuleContext(Expr0Context,i);
	    }
	};

	cast() {
	    return this.getTypedRuleContext(CastContext,0);
	};

	PlusPlus() {
	    return this.getToken(LPCParser.PlusPlus, 0);
	};

	MinusMinus() {
	    return this.getToken(LPCParser.MinusMinus, 0);
	};

	Not() {
	    return this.getToken(LPCParser.Not, 0);
	};

	sscanf() {
	    return this.getTypedRuleContext(SscanfContext,0);
	};

	parse_command() {
	    return this.getTypedRuleContext(Parse_commandContext,0);
	};

	time_expression() {
	    return this.getTypedRuleContext(Time_expressionContext,0);
	};

	Number() {
	    return this.getToken(LPCParser.Number, 0);
	};

	Real() {
	    return this.getToken(LPCParser.Real, 0);
	};

	Question() {
	    return this.getToken(LPCParser.Question, 0);
	};

	Colon() {
	    return this.getToken(LPCParser.Colon, 0);
	};

	OrOr() {
	    return this.getToken(LPCParser.OrOr, 0);
	};

	AndAnd() {
	    return this.getToken(LPCParser.AndAnd, 0);
	};

	Or() {
	    return this.getToken(LPCParser.Or, 0);
	};

	Caret() {
	    return this.getToken(LPCParser.Caret, 0);
	};

	And() {
	    return this.getToken(LPCParser.And, 0);
	};

	Equal() {
	    return this.getToken(LPCParser.Equal, 0);
	};

	NotEqual() {
	    return this.getToken(LPCParser.NotEqual, 0);
	};

	Compare() {
	    return this.getToken(LPCParser.Compare, 0);
	};

	LeftShift() {
	    return this.getToken(LPCParser.LeftShift, 0);
	};

	RightShift() {
	    return this.getToken(LPCParser.RightShift, 0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterExpr0(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitExpr0(this);
		}
	}


}



class Time_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_time_expression;
    }

	TimeExpression() {
	    return this.getToken(LPCParser.TimeExpression, 0);
	};

	expr_or_block() {
	    return this.getTypedRuleContext(Expr_or_blockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterTime_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitTime_expression(this);
		}
	}


}



class Expr_or_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_expr_or_block;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	comma_expr() {
	    return this.getTypedRuleContext(Comma_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterExpr_or_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitExpr_or_block(this);
		}
	}


}



class Comma_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_comma_expr;
    }

	expr0() {
	    return this.getTypedRuleContext(Expr0Context,0);
	};

	comma_expr() {
	    return this.getTypedRuleContext(Comma_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterComma_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitComma_expr(this);
		}
	}


}



class Parse_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_parse_command;
    }

	ParseCommand() {
	    return this.getToken(LPCParser.ParseCommand, 0);
	};

	expr0 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expr0Context);
	    } else {
	        return this.getTypedRuleContext(Expr0Context,i);
	    }
	};

	lvalue_list() {
	    return this.getTypedRuleContext(Lvalue_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterParse_command(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitParse_command(this);
		}
	}


}



class SscanfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_sscanf;
    }

	SScanf() {
	    return this.getToken(LPCParser.SScanf, 0);
	};

	expr0 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expr0Context);
	    } else {
	        return this.getTypedRuleContext(Expr0Context,i);
	    }
	};

	lvalue_list() {
	    return this.getTypedRuleContext(Lvalue_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterSscanf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitSscanf(this);
		}
	}


}



class Lvalue_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_lvalue_list;
    }

	expr4() {
	    return this.getTypedRuleContext(Expr4Context,0);
	};

	lvalue_list() {
	    return this.getTypedRuleContext(Lvalue_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterLvalue_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitLvalue_list(this);
		}
	}


}



class CastContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_cast;
    }

	basic_type() {
	    return this.getTypedRuleContext(Basic_typeContext,0);
	};

	optional_star() {
	    return this.getTypedRuleContext(Optional_starContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterCast(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitCast(this);
		}
	}


}



class Basic_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_basic_type;
    }

	atomic_type() {
	    return this.getTypedRuleContext(Atomic_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterBasic_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitBasic_type(this);
		}
	}


}



class Atomic_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_atomic_type;
    }

	BasicType() {
	    return this.getToken(LPCParser.BasicType, 0);
	};

	Class() {
	    return this.getToken(LPCParser.Class, 0);
	};

	DefinedName() {
	    return this.getToken(LPCParser.DefinedName, 0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterAtomic_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitAtomic_type(this);
		}
	}


}



class Expr4Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_expr4;
    }

	function_call() {
	    return this.getTypedRuleContext(Function_callContext,0);
	};

	DefinedName() {
	    return this.getToken(LPCParser.DefinedName, 0);
	};

	Identifier() {
	    return this.getToken(LPCParser.Identifier, 0);
	};

	Parameter() {
	    return this.getToken(LPCParser.Parameter, 0);
	};

	comma_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Comma_exprContext);
	    } else {
	        return this.getTypedRuleContext(Comma_exprContext,i);
	    }
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	CharacterConstant() {
	    return this.getToken(LPCParser.CharacterConstant, 0);
	};

	catch_statement() {
	    return this.getTypedRuleContext(Catch_statementContext,0);
	};

	BasicType() {
	    return this.getToken(LPCParser.BasicType, 0);
	};

	argument() {
	    return this.getTypedRuleContext(ArgumentContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	FunctionOpen() {
	    return this.getToken(LPCParser.FunctionOpen, 0);
	};

	Colon() {
	    return this.getToken(LPCParser.Colon, 0);
	};

	MappingOpen() {
	    return this.getToken(LPCParser.MappingOpen, 0);
	};

	expr_list3() {
	    return this.getTypedRuleContext(Expr_list3Context,0);
	};

	ArrayOpen() {
	    return this.getToken(LPCParser.ArrayOpen, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	expr4() {
	    return this.getTypedRuleContext(Expr4Context,0);
	};

	function_arrow_call() {
	    return this.getTypedRuleContext(Function_arrow_callContext,0);
	};

	Arrow() {
	    return this.getToken(LPCParser.Arrow, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Range() {
	    return this.getToken(LPCParser.Range, 0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterExpr4(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitExpr4(this);
		}
	}


}



class Catch_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_catch_statement;
    }

	Catch() {
	    return this.getToken(LPCParser.Catch, 0);
	};

	expr_or_block() {
	    return this.getTypedRuleContext(Expr_or_blockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterCatch_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitCatch_statement(this);
		}
	}


}



class Expr_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_expr_list;
    }

	expr_list2() {
	    return this.getTypedRuleContext(Expr_list2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterExpr_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitExpr_list(this);
		}
	}


}



class Expr_list3Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_expr_list3;
    }

	expr_list4() {
	    return this.getTypedRuleContext(Expr_list4Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterExpr_list3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitExpr_list3(this);
		}
	}


}



class Expr_list4Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_expr_list4;
    }

	assoc_pair() {
	    return this.getTypedRuleContext(Assoc_pairContext,0);
	};

	expr_list4() {
	    return this.getTypedRuleContext(Expr_list4Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterExpr_list4(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitExpr_list4(this);
		}
	}


}



class Assoc_pairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_assoc_pair;
    }

	expr0 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expr0Context);
	    } else {
	        return this.getTypedRuleContext(Expr0Context,i);
	    }
	};

	Colon() {
	    return this.getToken(LPCParser.Colon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterAssoc_pair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitAssoc_pair(this);
		}
	}


}



class Expr_list2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_expr_list2;
    }

	expr_list_node() {
	    return this.getTypedRuleContext(Expr_list_nodeContext,0);
	};

	expr_list2() {
	    return this.getTypedRuleContext(Expr_list2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterExpr_list2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitExpr_list2(this);
		}
	}


}



class Expr_list_nodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_expr_list_node;
    }

	expr0() {
	    return this.getTypedRuleContext(Expr0Context,0);
	};

	Ellipsis() {
	    return this.getToken(LPCParser.Ellipsis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterExpr_list_node(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitExpr_list_node(this);
		}
	}


}



class StringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_string;
    }

	string_con2() {
	    return this.getTypedRuleContext(String_con2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitString(this);
		}
	}


}



class String_con2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_string_con2;
    }

	String() {
	    return this.getToken(LPCParser.String, 0);
	};

	string_con2() {
	    return this.getTypedRuleContext(String_con2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterString_con2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitString_con2(this);
		}
	}


}



class String_con1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_string_con1;
    }

	string_con2() {
	    return this.getTypedRuleContext(String_con2Context,0);
	};

	string_con1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(String_con1Context);
	    } else {
	        return this.getTypedRuleContext(String_con1Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterString_con1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitString_con1(this);
		}
	}


}



class Function_callContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_function_call;
    }

	efun_override() {
	    return this.getTypedRuleContext(Efun_overrideContext,0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	New() {
	    return this.getToken(LPCParser.New, 0);
	};

	Class() {
	    return this.getToken(LPCParser.Class, 0);
	};

	DefinedName() {
	    return this.getToken(LPCParser.DefinedName, 0);
	};

	opt_class_init() {
	    return this.getTypedRuleContext(Opt_class_initContext,0);
	};

	function_name_call() {
	    return this.getTypedRuleContext(Function_name_callContext,0);
	};

	function_arrow_call() {
	    return this.getTypedRuleContext(Function_arrow_callContext,0);
	};

	comma_expr() {
	    return this.getTypedRuleContext(Comma_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterFunction_call(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitFunction_call(this);
		}
	}


}



class Function_name_callContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_function_name_call;
    }

	function_name() {
	    return this.getTypedRuleContext(Function_nameContext,0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterFunction_name_call(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitFunction_name_call(this);
		}
	}


}



class Function_arrow_callContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_function_arrow_call;
    }

	Arrow() {
	    return this.getToken(LPCParser.Arrow, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterFunction_arrow_call(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitFunction_arrow_call(this);
		}
	}


}



class Function_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_function_name;
    }

	Identifier() {
	    return this.getToken(LPCParser.Identifier, 0);
	};

	ColonColon() {
	    return this.getToken(LPCParser.ColonColon, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	BasicType() {
	    return this.getToken(LPCParser.BasicType, 0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterFunction_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitFunction_name(this);
		}
	}


}



class Opt_class_initContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_opt_class_init;
    }

	opt_class_init() {
	    return this.getTypedRuleContext(Opt_class_initContext,0);
	};

	class_init() {
	    return this.getTypedRuleContext(Class_initContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterOpt_class_init(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitOpt_class_init(this);
		}
	}


}



class Class_initContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_class_init;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Colon() {
	    return this.getToken(LPCParser.Colon, 0);
	};

	expr0() {
	    return this.getTypedRuleContext(Expr0Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterClass_init(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitClass_init(this);
		}
	}


}



class Efun_overrideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_efun_override;
    }

	Efun() {
	    return this.getToken(LPCParser.Efun, 0);
	};

	ColonColon() {
	    return this.getToken(LPCParser.ColonColon, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	New() {
	    return this.getToken(LPCParser.New, 0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterEfun_override(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitEfun_override(this);
		}
	}


}



class Block_or_semiContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_block_or_semi;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterBlock_or_semi(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitBlock_or_semi(this);
		}
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_block;
    }

	statements() {
	    return this.getTypedRuleContext(StatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitBlock(this);
		}
	}


}



class StatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_statements;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	statements() {
	    return this.getTypedRuleContext(StatementsContext,0);
	};

	local_declare_statement() {
	    return this.getTypedRuleContext(Local_declare_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitStatements(this);
		}
	}


}



class Local_declare_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_local_declare_statement;
    }

	basic_type() {
	    return this.getTypedRuleContext(Basic_typeContext,0);
	};

	local_name_list() {
	    return this.getTypedRuleContext(Local_name_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterLocal_declare_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitLocal_declare_statement(this);
		}
	}


}



class Local_name_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_local_name_list;
    }

	new_local_def() {
	    return this.getTypedRuleContext(New_local_defContext,0);
	};

	local_name_list() {
	    return this.getTypedRuleContext(Local_name_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterLocal_name_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitLocal_name_list(this);
		}
	}


}



class New_local_defContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_new_local_def;
    }

	optional_star() {
	    return this.getTypedRuleContext(Optional_starContext,0);
	};

	new_local_name() {
	    return this.getTypedRuleContext(New_local_nameContext,0);
	};

	Assign() {
	    return this.getToken(LPCParser.Assign, 0);
	};

	expr0() {
	    return this.getTypedRuleContext(Expr0Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterNew_local_def(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitNew_local_def(this);
		}
	}


}



class New_local_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_new_local_name;
    }

	Identifier() {
	    return this.getToken(LPCParser.Identifier, 0);
	};

	DefinedName() {
	    return this.getToken(LPCParser.DefinedName, 0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterNew_local_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitNew_local_name(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_statement;
    }

	comma_expr() {
	    return this.getTypedRuleContext(Comma_exprContext,0);
	};

	cond() {
	    return this.getTypedRuleContext(CondContext,0);
	};

	while_statement() {
	    return this.getTypedRuleContext(While_statementContext,0);
	};

	do_statement() {
	    return this.getTypedRuleContext(Do_statementContext,0);
	};

	switch_statement() {
	    return this.getTypedRuleContext(Switch_statementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	for_loop() {
	    return this.getTypedRuleContext(For_loopContext,0);
	};

	foreach_loop() {
	    return this.getTypedRuleContext(Foreach_loopContext,0);
	};

	Break() {
	    return this.getToken(LPCParser.Break, 0);
	};

	Continue() {
	    return this.getToken(LPCParser.Continue, 0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitStatement(this);
		}
	}


}



class While_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_while_statement;
    }

	While() {
	    return this.getToken(LPCParser.While, 0);
	};

	comma_expr() {
	    return this.getTypedRuleContext(Comma_exprContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterWhile_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitWhile_statement(this);
		}
	}


}



class Do_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_do_statement;
    }

	Do() {
	    return this.getToken(LPCParser.Do, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	While() {
	    return this.getToken(LPCParser.While, 0);
	};

	comma_expr() {
	    return this.getTypedRuleContext(Comma_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterDo_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitDo_statement(this);
		}
	}


}



class Switch_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_switch_statement;
    }

	Switch() {
	    return this.getToken(LPCParser.Switch, 0);
	};

	comma_expr() {
	    return this.getTypedRuleContext(Comma_exprContext,0);
	};

	local_declarations() {
	    return this.getTypedRuleContext(Local_declarationsContext,0);
	};

	case_statement() {
	    return this.getTypedRuleContext(Case_statementContext,0);
	};

	switch_block() {
	    return this.getTypedRuleContext(Switch_blockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterSwitch_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitSwitch_statement(this);
		}
	}


}



class Local_declarationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_local_declarations;
    }

	local_declarations() {
	    return this.getTypedRuleContext(Local_declarationsContext,0);
	};

	basic_type() {
	    return this.getTypedRuleContext(Basic_typeContext,0);
	};

	local_name_list() {
	    return this.getTypedRuleContext(Local_name_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterLocal_declarations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitLocal_declarations(this);
		}
	}


}



class Case_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_case_statement;
    }

	Case() {
	    return this.getToken(LPCParser.Case, 0);
	};

	case_label = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Case_labelContext);
	    } else {
	        return this.getTypedRuleContext(Case_labelContext,i);
	    }
	};

	Colon() {
	    return this.getToken(LPCParser.Colon, 0);
	};

	Range() {
	    return this.getToken(LPCParser.Range, 0);
	};

	Default() {
	    return this.getToken(LPCParser.Default, 0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterCase_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitCase_statement(this);
		}
	}


}



class Switch_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_switch_block;
    }

	case_statement() {
	    return this.getTypedRuleContext(Case_statementContext,0);
	};

	switch_block() {
	    return this.getTypedRuleContext(Switch_blockContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterSwitch_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitSwitch_block(this);
		}
	}


}



class Case_labelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_case_label;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	CharacterConstant() {
	    return this.getToken(LPCParser.CharacterConstant, 0);
	};

	string_con1() {
	    return this.getTypedRuleContext(String_con1Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterCase_label(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitCase_label(this);
		}
	}


}



class ConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_constant;
    }

	constant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantContext);
	    } else {
	        return this.getTypedRuleContext(ConstantContext,i);
	    }
	};

	Number() {
	    return this.getToken(LPCParser.Number, 0);
	};

	Not() {
	    return this.getToken(LPCParser.Not, 0);
	};

	Or() {
	    return this.getToken(LPCParser.Or, 0);
	};

	Caret() {
	    return this.getToken(LPCParser.Caret, 0);
	};

	And() {
	    return this.getToken(LPCParser.And, 0);
	};

	Equal() {
	    return this.getToken(LPCParser.Equal, 0);
	};

	NotEqual() {
	    return this.getToken(LPCParser.NotEqual, 0);
	};

	Compare() {
	    return this.getToken(LPCParser.Compare, 0);
	};

	LeftShift() {
	    return this.getToken(LPCParser.LeftShift, 0);
	};

	RightShift() {
	    return this.getToken(LPCParser.RightShift, 0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitConstant(this);
		}
	}


}



class Foreach_loopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_foreach_loop;
    }

	Foreach() {
	    return this.getToken(LPCParser.Foreach, 0);
	};

	foreach_vars() {
	    return this.getTypedRuleContext(Foreach_varsContext,0);
	};

	In() {
	    return this.getToken(LPCParser.In, 0);
	};

	expr0() {
	    return this.getTypedRuleContext(Expr0Context,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterForeach_loop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitForeach_loop(this);
		}
	}


}



class Foreach_varsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_foreach_vars;
    }

	foreach_var = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Foreach_varContext);
	    } else {
	        return this.getTypedRuleContext(Foreach_varContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterForeach_vars(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitForeach_vars(this);
		}
	}


}



class For_loopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_for_loop;
    }

	For() {
	    return this.getToken(LPCParser.For, 0);
	};

	first_for_expr() {
	    return this.getTypedRuleContext(First_for_exprContext,0);
	};

	for_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(For_exprContext);
	    } else {
	        return this.getTypedRuleContext(For_exprContext,i);
	    }
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterFor_loop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitFor_loop(this);
		}
	}


}



class Foreach_varContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_foreach_var;
    }

	DefinedName() {
	    return this.getToken(LPCParser.DefinedName, 0);
	};

	single_new_local_def() {
	    return this.getTypedRuleContext(Single_new_local_defContext,0);
	};

	Identifier() {
	    return this.getToken(LPCParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterForeach_var(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitForeach_var(this);
		}
	}


}



class First_for_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_first_for_expr;
    }

	for_expr() {
	    return this.getTypedRuleContext(For_exprContext,0);
	};

	single_new_local_def_with_init() {
	    return this.getTypedRuleContext(Single_new_local_def_with_initContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterFirst_for_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitFirst_for_expr(this);
		}
	}


}



class Single_new_local_def_with_initContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_single_new_local_def_with_init;
    }

	single_new_local_def() {
	    return this.getTypedRuleContext(Single_new_local_defContext,0);
	};

	Assign() {
	    return this.getToken(LPCParser.Assign, 0);
	};

	expr0() {
	    return this.getTypedRuleContext(Expr0Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterSingle_new_local_def_with_init(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitSingle_new_local_def_with_init(this);
		}
	}


}



class Single_new_local_defContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_single_new_local_def;
    }

	basic_type() {
	    return this.getTypedRuleContext(Basic_typeContext,0);
	};

	optional_star() {
	    return this.getTypedRuleContext(Optional_starContext,0);
	};

	new_local_name() {
	    return this.getTypedRuleContext(New_local_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterSingle_new_local_def(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitSingle_new_local_def(this);
		}
	}


}



class For_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_for_expr;
    }

	comma_expr() {
	    return this.getTypedRuleContext(Comma_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterFor_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitFor_expr(this);
		}
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_returnStatement;
    }

	Return() {
	    return this.getToken(LPCParser.Return, 0);
	};

	comma_expr() {
	    return this.getTypedRuleContext(Comma_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitReturnStatement(this);
		}
	}


}



class CondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_cond;
    }

	If() {
	    return this.getToken(LPCParser.If, 0);
	};

	comma_expr() {
	    return this.getTypedRuleContext(Comma_exprContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	optional_else_part() {
	    return this.getTypedRuleContext(Optional_else_partContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterCond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitCond(this);
		}
	}


}



class Optional_else_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_optional_else_part;
    }

	Else() {
	    return this.getToken(LPCParser.Else, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterOptional_else_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitOptional_else_part(this);
		}
	}


}



class ArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_argument;
    }

	argument_list() {
	    return this.getTypedRuleContext(Argument_listContext,0);
	};

	Ellipsis() {
	    return this.getToken(LPCParser.Ellipsis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitArgument(this);
		}
	}


}



class Argument_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_argument_list;
    }

	new_arg() {
	    return this.getTypedRuleContext(New_argContext,0);
	};

	argument_list() {
	    return this.getTypedRuleContext(Argument_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterArgument_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitArgument_list(this);
		}
	}


}



class New_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_new_arg;
    }

	basic_type() {
	    return this.getTypedRuleContext(Basic_typeContext,0);
	};

	optional_star() {
	    return this.getTypedRuleContext(Optional_starContext,0);
	};

	new_local_name() {
	    return this.getTypedRuleContext(New_local_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterNew_arg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitNew_arg(this);
		}
	}


}



class InheritanceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_inheritance;
    }

	type_modifier_list() {
	    return this.getTypedRuleContext(Type_modifier_listContext,0);
	};

	Inherit() {
	    return this.getToken(LPCParser.Inherit, 0);
	};

	string_con1() {
	    return this.getTypedRuleContext(String_con1Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterInheritance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitInheritance(this);
		}
	}


}



class Data_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_data_type;
    }

	type_modifier_list() {
	    return this.getTypedRuleContext(Type_modifier_listContext,0);
	};

	opt_basic_type() {
	    return this.getTypedRuleContext(Opt_basic_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterData_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitData_type(this);
		}
	}


}



class Opt_basic_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_opt_basic_type;
    }

	basic_type() {
	    return this.getTypedRuleContext(Basic_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterOpt_basic_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitOpt_basic_type(this);
		}
	}


}



class Optional_starContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_optional_star;
    }


	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterOptional_star(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitOptional_star(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LPCParser.RULE_identifier;
    }

	DefinedName() {
	    return this.getToken(LPCParser.DefinedName, 0);
	};

	Identifier() {
	    return this.getToken(LPCParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof LPCListener ) {
	        listener.exitIdentifier(this);
		}
	}


}




LPCParser.Lpc_programContext = Lpc_programContext; 
LPCParser.ProgramContext = ProgramContext; 
LPCParser.Possible_semi_colonContext = Possible_semi_colonContext; 
LPCParser.DefinationContext = DefinationContext; 
LPCParser.Function_definationContext = Function_definationContext; 
LPCParser.Modifier_changeContext = Modifier_changeContext; 
LPCParser.Type_modifier_listContext = Type_modifier_listContext; 
LPCParser.Type_declContext = Type_declContext; 
LPCParser.Member_listContext = Member_listContext; 
LPCParser.Member_name_listContext = Member_name_listContext; 
LPCParser.Member_nameContext = Member_nameContext; 
LPCParser.Name_listContext = Name_listContext; 
LPCParser.New_nameContext = New_nameContext; 
LPCParser.Expr0Context = Expr0Context; 
LPCParser.Time_expressionContext = Time_expressionContext; 
LPCParser.Expr_or_blockContext = Expr_or_blockContext; 
LPCParser.Comma_exprContext = Comma_exprContext; 
LPCParser.Parse_commandContext = Parse_commandContext; 
LPCParser.SscanfContext = SscanfContext; 
LPCParser.Lvalue_listContext = Lvalue_listContext; 
LPCParser.CastContext = CastContext; 
LPCParser.Basic_typeContext = Basic_typeContext; 
LPCParser.Atomic_typeContext = Atomic_typeContext; 
LPCParser.Expr4Context = Expr4Context; 
LPCParser.Catch_statementContext = Catch_statementContext; 
LPCParser.Expr_listContext = Expr_listContext; 
LPCParser.Expr_list3Context = Expr_list3Context; 
LPCParser.Expr_list4Context = Expr_list4Context; 
LPCParser.Assoc_pairContext = Assoc_pairContext; 
LPCParser.Expr_list2Context = Expr_list2Context; 
LPCParser.Expr_list_nodeContext = Expr_list_nodeContext; 
LPCParser.StringContext = StringContext; 
LPCParser.String_con2Context = String_con2Context; 
LPCParser.String_con1Context = String_con1Context; 
LPCParser.Function_callContext = Function_callContext; 
LPCParser.Function_name_callContext = Function_name_callContext; 
LPCParser.Function_arrow_callContext = Function_arrow_callContext; 
LPCParser.Function_nameContext = Function_nameContext; 
LPCParser.Opt_class_initContext = Opt_class_initContext; 
LPCParser.Class_initContext = Class_initContext; 
LPCParser.Efun_overrideContext = Efun_overrideContext; 
LPCParser.Block_or_semiContext = Block_or_semiContext; 
LPCParser.BlockContext = BlockContext; 
LPCParser.StatementsContext = StatementsContext; 
LPCParser.Local_declare_statementContext = Local_declare_statementContext; 
LPCParser.Local_name_listContext = Local_name_listContext; 
LPCParser.New_local_defContext = New_local_defContext; 
LPCParser.New_local_nameContext = New_local_nameContext; 
LPCParser.StatementContext = StatementContext; 
LPCParser.While_statementContext = While_statementContext; 
LPCParser.Do_statementContext = Do_statementContext; 
LPCParser.Switch_statementContext = Switch_statementContext; 
LPCParser.Local_declarationsContext = Local_declarationsContext; 
LPCParser.Case_statementContext = Case_statementContext; 
LPCParser.Switch_blockContext = Switch_blockContext; 
LPCParser.Case_labelContext = Case_labelContext; 
LPCParser.ConstantContext = ConstantContext; 
LPCParser.Foreach_loopContext = Foreach_loopContext; 
LPCParser.Foreach_varsContext = Foreach_varsContext; 
LPCParser.For_loopContext = For_loopContext; 
LPCParser.Foreach_varContext = Foreach_varContext; 
LPCParser.First_for_exprContext = First_for_exprContext; 
LPCParser.Single_new_local_def_with_initContext = Single_new_local_def_with_initContext; 
LPCParser.Single_new_local_defContext = Single_new_local_defContext; 
LPCParser.For_exprContext = For_exprContext; 
LPCParser.ReturnStatementContext = ReturnStatementContext; 
LPCParser.CondContext = CondContext; 
LPCParser.Optional_else_partContext = Optional_else_partContext; 
LPCParser.ArgumentContext = ArgumentContext; 
LPCParser.Argument_listContext = Argument_listContext; 
LPCParser.New_argContext = New_argContext; 
LPCParser.InheritanceContext = InheritanceContext; 
LPCParser.Data_typeContext = Data_typeContext; 
LPCParser.Opt_basic_typeContext = Opt_basic_typeContext; 
LPCParser.Optional_starContext = Optional_starContext; 
LPCParser.IdentifierContext = IdentifierContext; 
