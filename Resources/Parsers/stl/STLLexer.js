// Generated from Resources/Parsers/stl/STL.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,12,145,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,
1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,
1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,3,9,95,8,9,1,9,4,
9,98,8,9,11,9,12,9,99,1,9,3,9,103,8,9,1,10,5,10,106,8,10,10,10,12,10,109,
9,10,1,10,1,10,4,10,113,8,10,11,10,12,10,114,1,10,4,10,118,8,10,11,10,12,
10,119,1,10,3,10,123,8,10,1,11,1,11,3,11,127,8,11,1,11,4,11,130,8,11,11,
11,12,11,131,1,12,4,12,135,8,12,11,12,12,12,136,1,13,4,13,140,8,13,11,13,
12,13,141,1,13,1,13,0,0,14,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
21,0,23,0,25,11,27,12,1,0,5,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,
3,0,48,57,65,90,97,122,3,0,9,10,13,13,32,32,153,0,1,1,0,0,0,0,3,1,0,0,0,
0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
0,0,17,1,0,0,0,0,19,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,1,29,1,0,0,0,3,35,
1,0,0,0,5,42,1,0,0,0,7,48,1,0,0,0,9,53,1,0,0,0,11,61,1,0,0,0,13,70,1,0,0,
0,15,77,1,0,0,0,17,83,1,0,0,0,19,102,1,0,0,0,21,122,1,0,0,0,23,124,1,0,0,
0,25,134,1,0,0,0,27,139,1,0,0,0,29,30,5,102,0,0,30,31,5,97,0,0,31,32,5,99,
0,0,32,33,5,101,0,0,33,34,5,116,0,0,34,2,1,0,0,0,35,36,5,110,0,0,36,37,5,
111,0,0,37,38,5,114,0,0,38,39,5,109,0,0,39,40,5,97,0,0,40,41,5,108,0,0,41,
4,1,0,0,0,42,43,5,111,0,0,43,44,5,117,0,0,44,45,5,116,0,0,45,46,5,101,0,
0,46,47,5,114,0,0,47,6,1,0,0,0,48,49,5,108,0,0,49,50,5,111,0,0,50,51,5,111,
0,0,51,52,5,112,0,0,52,8,1,0,0,0,53,54,5,101,0,0,54,55,5,110,0,0,55,56,5,
100,0,0,56,57,5,108,0,0,57,58,5,111,0,0,58,59,5,111,0,0,59,60,5,112,0,0,
60,10,1,0,0,0,61,62,5,101,0,0,62,63,5,110,0,0,63,64,5,100,0,0,64,65,5,102,
0,0,65,66,5,97,0,0,66,67,5,99,0,0,67,68,5,101,0,0,68,69,5,116,0,0,69,12,
1,0,0,0,70,71,5,118,0,0,71,72,5,101,0,0,72,73,5,114,0,0,73,74,5,116,0,0,
74,75,5,101,0,0,75,76,5,120,0,0,76,14,1,0,0,0,77,78,5,115,0,0,78,79,5,111,
0,0,79,80,5,108,0,0,80,81,5,105,0,0,81,82,5,100,0,0,82,16,1,0,0,0,83,84,
5,101,0,0,84,85,5,110,0,0,85,86,5,100,0,0,86,87,5,115,0,0,87,88,5,111,0,
0,88,89,5,108,0,0,89,90,5,105,0,0,90,91,5,100,0,0,91,18,1,0,0,0,92,94,3,
21,10,0,93,95,3,23,11,0,94,93,1,0,0,0,94,95,1,0,0,0,95,103,1,0,0,0,96,98,
7,0,0,0,97,96,1,0,0,0,98,99,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,101,
1,0,0,0,101,103,3,23,11,0,102,92,1,0,0,0,102,97,1,0,0,0,103,20,1,0,0,0,104,
106,7,0,0,0,105,104,1,0,0,0,106,109,1,0,0,0,107,105,1,0,0,0,107,108,1,0,
0,0,108,110,1,0,0,0,109,107,1,0,0,0,110,112,5,46,0,0,111,113,7,0,0,0,112,
111,1,0,0,0,113,114,1,0,0,0,114,112,1,0,0,0,114,115,1,0,0,0,115,123,1,0,
0,0,116,118,7,0,0,0,117,116,1,0,0,0,118,119,1,0,0,0,119,117,1,0,0,0,119,
120,1,0,0,0,120,121,1,0,0,0,121,123,5,46,0,0,122,107,1,0,0,0,122,117,1,0,
0,0,123,22,1,0,0,0,124,126,7,1,0,0,125,127,7,2,0,0,126,125,1,0,0,0,126,127,
1,0,0,0,127,129,1,0,0,0,128,130,7,0,0,0,129,128,1,0,0,0,130,131,1,0,0,0,
131,129,1,0,0,0,131,132,1,0,0,0,132,24,1,0,0,0,133,135,7,3,0,0,134,133,1,
0,0,0,135,136,1,0,0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,26,1,0,0,0,138,
140,7,4,0,0,139,138,1,0,0,0,140,141,1,0,0,0,141,139,1,0,0,0,141,142,1,0,
0,0,142,143,1,0,0,0,143,144,6,13,0,0,144,28,1,0,0,0,12,0,94,99,102,107,114,
119,122,126,131,136,141,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class STLLexer extends antlr4.Lexer {

    static grammarFileName = "STL.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'facet'", "'normal'", "'outer'", "'loop'", 
                         "'endloop'", "'endfacet'", "'vertex'", "'solid'", 
                         "'endsolid'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, "FLOAT", "IDENTIFIER", "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "FLOAT", "FractionalConstant", "ExponentPart", 
                      "IDENTIFIER", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

STLLexer.EOF = antlr4.Token.EOF;
STLLexer.T__0 = 1;
STLLexer.T__1 = 2;
STLLexer.T__2 = 3;
STLLexer.T__3 = 4;
STLLexer.T__4 = 5;
STLLexer.T__5 = 6;
STLLexer.T__6 = 7;
STLLexer.T__7 = 8;
STLLexer.T__8 = 9;
STLLexer.FLOAT = 10;
STLLexer.IDENTIFIER = 11;
STLLexer.WS = 12;



