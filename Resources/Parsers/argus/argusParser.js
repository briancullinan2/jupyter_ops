// Generated from Resources/Parsers/argus/argus.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import argusListener from './argusListener.js';
const serializedATN = [4,1,129,1540,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,1,0,5,0,120,8,0,10,0,12,0,123,9,0,1,0,1,0,5,0,127,
8,0,10,0,12,0,130,9,0,1,0,1,0,5,0,134,8,0,10,0,12,0,137,9,0,1,0,1,0,5,0,
141,8,0,10,0,12,0,144,9,0,1,0,1,0,5,0,148,8,0,10,0,12,0,151,9,0,1,0,3,0,
154,8,0,1,1,1,1,1,1,1,1,1,1,3,1,161,8,1,3,1,163,8,1,1,1,5,1,166,8,1,10,1,
12,1,169,9,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,3,2,178,8,2,1,2,1,2,1,2,1,2,5,2,
184,8,2,10,2,12,2,187,9,2,1,2,1,2,1,2,1,2,5,2,193,8,2,10,2,12,2,196,9,2,
3,2,198,8,2,1,2,3,2,201,8,2,1,2,5,2,204,8,2,10,2,12,2,207,9,2,1,2,5,2,210,
8,2,10,2,12,2,213,9,2,1,2,1,2,1,2,1,2,3,2,219,8,2,1,2,1,2,1,2,1,2,3,2,225,
8,2,1,2,5,2,228,8,2,10,2,12,2,231,9,2,1,2,1,2,5,2,235,8,2,10,2,12,2,238,
9,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,3,3,247,8,3,1,3,1,3,1,3,1,3,5,3,253,8,3,
10,3,12,3,256,9,3,1,3,3,3,259,8,3,1,3,5,3,262,8,3,10,3,12,3,265,9,3,1,3,
1,3,1,3,1,3,5,3,271,8,3,10,3,12,3,274,9,3,1,3,5,3,277,8,3,10,3,12,3,280,
9,3,1,3,1,3,5,3,284,8,3,10,3,12,3,287,9,3,1,3,1,3,1,3,1,4,1,4,1,4,3,4,295,
8,4,1,5,1,5,3,5,299,8,5,1,6,1,6,1,6,1,6,3,6,305,8,6,1,6,1,6,3,6,309,8,6,
1,6,3,6,312,8,6,1,6,3,6,315,8,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,3,7,325,
8,7,1,7,1,7,3,7,329,8,7,1,7,3,7,332,8,7,1,7,3,7,335,8,7,1,7,1,7,1,7,1,7,
1,8,1,8,1,8,1,8,1,8,3,8,346,8,8,1,8,3,8,349,8,8,1,8,1,8,1,8,1,8,1,9,1,9,
1,9,1,9,1,9,3,9,360,8,9,1,9,3,9,363,8,9,1,9,1,9,1,9,1,9,1,10,5,10,370,8,
10,10,10,12,10,373,9,10,1,10,5,10,376,8,10,10,10,12,10,379,9,10,1,10,5,10,
382,8,10,10,10,12,10,385,9,10,1,11,1,11,1,11,5,11,390,8,11,10,11,12,11,393,
9,11,1,12,1,12,1,12,5,12,398,8,12,10,12,12,12,401,9,12,1,12,1,12,1,12,1,
12,1,12,1,12,5,12,409,8,12,10,12,12,12,412,9,12,1,12,1,12,1,12,3,12,417,
8,12,1,13,1,13,1,13,1,13,5,13,423,8,13,10,13,12,13,426,9,13,5,13,428,8,13,
10,13,12,13,431,9,13,1,13,1,13,1,14,1,14,1,14,5,14,438,8,14,10,14,12,14,
441,9,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,5,15,451,8,15,10,15,12,
15,454,9,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,5,16,463,8,16,10,16,12,16,
466,9,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,5,17,475,8,17,10,17,12,17,478,
9,17,1,17,1,17,1,18,1,18,1,18,1,18,5,18,486,8,18,10,18,12,18,489,9,18,3,
18,491,8,18,1,19,1,19,3,19,495,8,19,1,20,1,20,1,20,1,20,5,20,501,8,20,10,
20,12,20,504,9,20,1,21,1,21,1,21,1,21,1,21,5,21,511,8,21,10,21,12,21,514,
9,21,1,21,1,21,1,21,1,21,3,21,520,8,21,1,22,1,22,1,22,1,22,1,22,1,22,5,22,
528,8,22,10,22,12,22,531,9,22,1,22,5,22,534,8,22,10,22,12,22,537,9,22,5,
22,539,8,22,10,22,12,22,542,9,22,1,22,1,22,1,22,1,22,1,22,3,22,549,8,22,
1,23,1,23,1,23,5,23,554,8,23,10,23,12,23,557,9,23,1,23,1,23,1,23,1,23,3,
23,563,8,23,1,24,1,24,3,24,567,8,24,1,25,3,25,570,8,25,1,25,1,25,3,25,574,
8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,583,8,25,1,25,1,25,1,25,5,25,
588,8,25,10,25,12,25,591,9,25,1,25,1,25,1,25,3,25,596,8,25,1,26,1,26,1,26,
1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,610,8,26,1,27,1,27,1,27,
1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,5,27,625,8,27,10,27,12,
27,628,9,27,1,27,1,27,1,27,1,27,3,27,634,8,27,3,27,636,8,27,1,28,1,28,1,
28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,5,28,649,8,28,10,28,12,28,652,
9,28,1,28,1,28,1,28,1,28,3,28,658,8,28,1,28,1,28,1,28,5,28,663,8,28,10,28,
12,28,666,9,28,1,28,1,28,1,28,1,28,3,28,672,8,28,1,28,1,28,1,28,5,28,677,
8,28,10,28,12,28,680,9,28,1,28,1,28,1,28,1,28,5,28,686,8,28,10,28,12,28,
689,9,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,699,8,28,1,28,1,28,
1,28,1,28,1,28,1,28,3,28,707,8,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
1,28,1,28,1,28,1,28,1,28,1,28,5,28,723,8,28,10,28,12,28,726,9,28,1,28,1,
28,1,28,3,28,731,8,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
1,28,1,28,1,28,3,28,746,8,28,1,28,1,28,1,28,1,28,5,28,752,8,28,10,28,12,
28,755,9,28,3,28,757,8,28,1,28,1,28,1,28,1,28,5,28,763,8,28,10,28,12,28,
766,9,28,3,28,768,8,28,1,28,3,28,771,8,28,1,28,1,28,1,28,1,28,1,28,5,28,
778,8,28,10,28,12,28,781,9,28,3,28,783,8,28,1,28,3,28,786,8,28,1,28,1,28,
1,28,1,28,1,28,5,28,793,8,28,10,28,12,28,796,9,28,3,28,798,8,28,1,28,3,28,
801,8,28,1,28,1,28,3,28,805,8,28,1,28,1,28,1,28,1,28,1,28,3,28,812,8,28,
1,28,1,28,3,28,816,8,28,1,28,1,28,1,28,1,28,5,28,822,8,28,10,28,12,28,825,
9,28,1,28,1,28,1,28,5,28,830,8,28,10,28,12,28,833,9,28,1,28,3,28,836,8,28,
1,28,5,28,839,8,28,10,28,12,28,842,9,28,1,29,1,29,1,29,1,29,1,29,1,29,1,
29,1,29,1,29,1,29,3,29,854,8,29,1,30,1,30,1,30,1,30,1,30,5,30,861,8,30,10,
30,12,30,864,9,30,1,30,1,30,1,30,5,30,869,8,30,10,30,12,30,872,9,30,1,30,
1,30,1,31,1,31,1,32,1,32,1,32,1,32,5,32,882,8,32,10,32,12,32,885,9,32,1,
32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,897,8,32,10,32,12,32,
900,9,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,908,8,32,1,33,1,33,1,33,1,33,
1,33,1,33,1,33,1,33,1,33,5,33,919,8,33,10,33,12,33,922,9,33,1,33,1,33,3,
33,926,8,33,1,33,1,33,1,34,1,34,1,34,1,34,5,34,934,8,34,10,34,12,34,937,
9,34,1,34,1,34,1,34,3,34,942,8,34,1,34,1,34,1,35,1,35,1,35,1,35,5,35,950,
8,35,10,35,12,35,953,9,35,1,35,1,35,1,35,3,35,958,8,35,1,35,1,35,1,36,1,
36,1,36,1,36,5,36,966,8,36,10,36,12,36,969,9,36,1,36,1,36,1,37,1,37,1,37,
1,37,5,37,977,8,37,10,37,12,37,980,9,37,1,37,1,37,1,37,1,37,3,37,986,8,37,
1,37,1,37,1,37,1,38,1,38,1,38,1,38,5,38,995,8,38,10,38,12,38,998,9,38,1,
38,1,38,1,38,1,38,5,38,1004,8,38,10,38,12,38,1007,9,38,1,38,1,38,1,38,1,
39,1,39,1,40,1,40,1,40,1,40,5,40,1018,8,40,10,40,12,40,1021,9,40,1,40,1,
40,1,40,5,40,1026,8,40,10,40,12,40,1029,9,40,5,40,1031,8,40,10,40,12,40,
1034,9,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,5,40,1043,8,40,10,40,12,40,
1046,9,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,1054,8,40,1,41,1,41,1,41,1,
41,1,41,5,41,1061,8,41,10,41,12,41,1064,9,41,1,41,1,41,1,41,1,42,5,42,1070,
8,42,10,42,12,42,1073,9,42,1,42,5,42,1076,8,42,10,42,12,42,1079,9,42,1,43,
1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,
43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
1,43,5,43,1112,8,43,10,43,12,43,1115,9,43,1,43,1,43,1,43,1,43,1,43,1,43,
1,43,5,43,1124,8,43,10,43,12,43,1127,9,43,1,43,1,43,1,43,1,43,1,43,1,43,
1,43,5,43,1136,8,43,10,43,12,43,1139,9,43,1,43,1,43,1,43,1,43,1,43,1,43,
1,43,5,43,1148,8,43,10,43,12,43,1151,9,43,1,43,1,43,1,43,1,43,1,43,1,43,
1,43,5,43,1160,8,43,10,43,12,43,1163,9,43,1,43,1,43,1,43,1,43,1,43,1,43,
1,43,5,43,1172,8,43,10,43,12,43,1175,9,43,1,43,1,43,1,43,1,43,1,43,1,43,
5,43,1183,8,43,10,43,12,43,1186,9,43,3,43,1188,8,43,1,43,3,43,1191,8,43,
1,43,3,43,1194,8,43,1,43,1,43,1,43,1,43,5,43,1200,8,43,10,43,12,43,1203,
9,43,3,43,1205,8,43,1,43,3,43,1208,8,43,1,43,3,43,1211,8,43,1,43,1,43,1,
43,1,43,5,43,1217,8,43,10,43,12,43,1220,9,43,3,43,1222,8,43,1,43,3,43,1225,
8,43,1,43,3,43,1228,8,43,1,43,1,43,1,43,1,43,5,43,1234,8,43,10,43,12,43,
1237,9,43,3,43,1239,8,43,1,43,3,43,1242,8,43,1,43,3,43,1245,8,43,1,43,1,
43,1,43,1,43,1,43,1,43,3,43,1253,8,43,1,44,1,44,1,44,5,44,1258,8,44,10,44,
12,44,1261,9,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,5,45,1272,8,
45,10,45,12,45,1275,9,45,3,45,1277,8,45,3,45,1279,8,45,1,45,1,45,1,45,5,
45,1284,8,45,10,45,12,45,1287,9,45,1,46,1,46,3,46,1291,8,46,1,47,1,47,1,
47,1,47,1,47,5,47,1298,8,47,10,47,12,47,1301,9,47,3,47,1303,8,47,3,47,1305,
8,47,1,48,1,48,1,48,5,48,1310,8,48,10,48,12,48,1313,9,48,1,48,1,48,1,48,
1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,
49,1332,8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,5,49,1397,8,49,10,49,12,49,1400,9,
49,1,50,1,50,1,50,1,50,1,50,1,50,5,50,1408,8,50,10,50,12,50,1411,9,50,5,
50,1413,8,50,10,50,12,50,1416,9,50,1,51,1,51,1,52,1,52,1,52,1,52,1,52,5,
52,1425,8,52,10,52,12,52,1428,9,52,3,52,1430,8,52,1,52,1,52,1,53,1,53,1,
53,1,53,5,53,1438,8,53,10,53,12,53,1441,9,53,1,54,1,54,1,54,1,54,1,54,1,
54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,5,54,1457,8,54,10,54,12,54,1460,
9,54,3,54,1462,8,54,1,54,1,54,1,54,1,54,1,54,5,54,1469,8,54,10,54,12,54,
1472,9,54,5,54,1474,8,54,10,54,12,54,1477,9,54,1,54,1,54,1,54,1,54,1,54,
3,54,1484,8,54,1,54,1,54,1,54,5,54,1489,8,54,10,54,12,54,1492,9,54,3,54,
1494,8,54,1,54,1,54,1,54,1,54,1,54,1,54,5,54,1502,8,54,10,54,12,54,1505,
9,54,3,54,1507,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,
54,1519,8,54,1,55,1,55,1,55,5,55,1524,8,55,10,55,12,55,1527,9,55,1,55,1,
55,1,55,1,56,1,56,3,56,1534,8,56,1,57,1,57,1,58,1,58,1,58,1,254,3,56,90,
98,59,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
96,98,100,102,104,106,108,110,112,114,116,0,2,2,0,52,53,55,55,1,0,65,66,
1760,0,153,1,0,0,0,2,155,1,0,0,0,4,173,1,0,0,0,6,242,1,0,0,0,8,294,1,0,0,
0,10,298,1,0,0,0,12,300,1,0,0,0,14,320,1,0,0,0,16,340,1,0,0,0,18,354,1,0,
0,0,20,371,1,0,0,0,22,386,1,0,0,0,24,416,1,0,0,0,26,418,1,0,0,0,28,434,1,
0,0,0,30,445,1,0,0,0,32,457,1,0,0,0,34,469,1,0,0,0,36,481,1,0,0,0,38,494,
1,0,0,0,40,496,1,0,0,0,42,519,1,0,0,0,44,548,1,0,0,0,46,562,1,0,0,0,48,566,
1,0,0,0,50,595,1,0,0,0,52,609,1,0,0,0,54,635,1,0,0,0,56,811,1,0,0,0,58,853,
1,0,0,0,60,855,1,0,0,0,62,875,1,0,0,0,64,907,1,0,0,0,66,909,1,0,0,0,68,929,
1,0,0,0,70,945,1,0,0,0,72,961,1,0,0,0,74,972,1,0,0,0,76,990,1,0,0,0,78,1011,
1,0,0,0,80,1053,1,0,0,0,82,1055,1,0,0,0,84,1071,1,0,0,0,86,1252,1,0,0,0,
88,1254,1,0,0,0,90,1278,1,0,0,0,92,1290,1,0,0,0,94,1292,1,0,0,0,96,1306,
1,0,0,0,98,1331,1,0,0,0,100,1401,1,0,0,0,102,1417,1,0,0,0,104,1419,1,0,0,
0,106,1433,1,0,0,0,108,1518,1,0,0,0,110,1520,1,0,0,0,112,1533,1,0,0,0,114,
1535,1,0,0,0,116,1537,1,0,0,0,118,120,3,52,26,0,119,118,1,0,0,0,120,123,
1,0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,124,1,0,0,0,123,121,1,0,0,0,
124,154,3,2,1,0,125,127,3,52,26,0,126,125,1,0,0,0,127,130,1,0,0,0,128,126,
1,0,0,0,128,129,1,0,0,0,129,131,1,0,0,0,130,128,1,0,0,0,131,154,3,4,2,0,
132,134,3,52,26,0,133,132,1,0,0,0,134,137,1,0,0,0,135,133,1,0,0,0,135,136,
1,0,0,0,136,138,1,0,0,0,137,135,1,0,0,0,138,154,3,12,6,0,139,141,3,52,26,
0,140,139,1,0,0,0,141,144,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,145,
1,0,0,0,144,142,1,0,0,0,145,154,3,14,7,0,146,148,3,52,26,0,147,146,1,0,0,
0,148,151,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,152,1,0,0,0,151,149,
1,0,0,0,152,154,3,6,3,0,153,121,1,0,0,0,153,128,1,0,0,0,153,135,1,0,0,0,
153,142,1,0,0,0,153,149,1,0,0,0,154,1,1,0,0,0,155,156,3,116,58,0,156,157,
5,1,0,0,157,162,5,2,0,0,158,160,3,22,11,0,159,161,3,40,20,0,160,159,1,0,
0,0,160,161,1,0,0,0,161,163,1,0,0,0,162,158,1,0,0,0,162,163,1,0,0,0,163,
167,1,0,0,0,164,166,3,52,26,0,165,164,1,0,0,0,166,169,1,0,0,0,167,165,1,
0,0,0,167,168,1,0,0,0,168,170,1,0,0,0,169,167,1,0,0,0,170,171,5,3,0,0,171,
172,3,116,58,0,172,3,1,0,0,0,173,174,3,116,58,0,174,175,5,1,0,0,175,177,
5,4,0,0,176,178,3,22,11,0,177,176,1,0,0,0,177,178,1,0,0,0,178,179,1,0,0,
0,179,180,5,5,0,0,180,185,3,116,58,0,181,182,5,6,0,0,182,184,3,116,58,0,
183,181,1,0,0,0,184,187,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,197,
1,0,0,0,187,185,1,0,0,0,188,189,5,7,0,0,189,194,3,116,58,0,190,191,5,6,0,
0,191,193,3,116,58,0,192,190,1,0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,194,
195,1,0,0,0,195,198,1,0,0,0,196,194,1,0,0,0,197,188,1,0,0,0,197,198,1,0,
0,0,198,200,1,0,0,0,199,201,3,40,20,0,200,199,1,0,0,0,200,201,1,0,0,0,201,
205,1,0,0,0,202,204,3,52,26,0,203,202,1,0,0,0,204,207,1,0,0,0,205,203,1,
0,0,0,205,206,1,0,0,0,206,211,1,0,0,0,207,205,1,0,0,0,208,210,3,50,25,0,
209,208,1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,218,
1,0,0,0,213,211,1,0,0,0,214,215,5,8,0,0,215,216,3,84,42,0,216,217,5,3,0,
0,217,219,1,0,0,0,218,214,1,0,0,0,218,219,1,0,0,0,219,224,1,0,0,0,220,221,
5,9,0,0,221,222,3,84,42,0,222,223,5,3,0,0,223,225,1,0,0,0,224,220,1,0,0,
0,224,225,1,0,0,0,225,229,1,0,0,0,226,228,3,8,4,0,227,226,1,0,0,0,228,231,
1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,232,1,0,0,0,231,229,1,0,0,0,
232,236,3,16,8,0,233,235,3,8,4,0,234,233,1,0,0,0,235,238,1,0,0,0,236,234,
1,0,0,0,236,237,1,0,0,0,237,239,1,0,0,0,238,236,1,0,0,0,239,240,5,3,0,0,
240,241,3,116,58,0,241,5,1,0,0,0,242,243,3,116,58,0,243,244,5,1,0,0,244,
246,5,10,0,0,245,247,3,22,11,0,246,245,1,0,0,0,246,247,1,0,0,0,247,248,1,
0,0,0,248,249,5,5,0,0,249,254,3,38,19,0,250,251,5,6,0,0,251,253,3,38,19,
0,252,250,1,0,0,0,253,256,1,0,0,0,254,255,1,0,0,0,254,252,1,0,0,0,255,258,
1,0,0,0,256,254,1,0,0,0,257,259,3,40,20,0,258,257,1,0,0,0,258,259,1,0,0,
0,259,263,1,0,0,0,260,262,3,52,26,0,261,260,1,0,0,0,262,265,1,0,0,0,263,
261,1,0,0,0,263,264,1,0,0,0,264,266,1,0,0,0,265,263,1,0,0,0,266,267,5,11,
0,0,267,268,5,1,0,0,268,272,3,86,43,0,269,271,3,52,26,0,270,269,1,0,0,0,
271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,278,1,0,0,0,274,272,
1,0,0,0,275,277,3,54,27,0,276,275,1,0,0,0,277,280,1,0,0,0,278,276,1,0,0,
0,278,279,1,0,0,0,279,281,1,0,0,0,280,278,1,0,0,0,281,285,3,10,5,0,282,284,
3,10,5,0,283,282,1,0,0,0,284,287,1,0,0,0,285,283,1,0,0,0,285,286,1,0,0,0,
286,288,1,0,0,0,287,285,1,0,0,0,288,289,5,3,0,0,289,290,3,116,58,0,290,7,
1,0,0,0,291,295,3,16,8,0,292,295,3,18,9,0,293,295,3,10,5,0,294,291,1,0,0,
0,294,292,1,0,0,0,294,293,1,0,0,0,295,9,1,0,0,0,296,299,3,12,6,0,297,299,
3,14,7,0,298,296,1,0,0,0,298,297,1,0,0,0,299,11,1,0,0,0,300,301,3,116,58,
0,301,302,5,1,0,0,302,304,5,12,0,0,303,305,3,22,11,0,304,303,1,0,0,0,304,
305,1,0,0,0,305,306,1,0,0,0,306,308,3,26,13,0,307,309,3,30,15,0,308,307,
1,0,0,0,308,309,1,0,0,0,309,311,1,0,0,0,310,312,3,34,17,0,311,310,1,0,0,
0,311,312,1,0,0,0,312,314,1,0,0,0,313,315,3,40,20,0,314,313,1,0,0,0,314,
315,1,0,0,0,315,316,1,0,0,0,316,317,3,20,10,0,317,318,5,3,0,0,318,319,3,
116,58,0,319,13,1,0,0,0,320,321,3,116,58,0,321,322,5,1,0,0,322,324,5,13,
0,0,323,325,3,22,11,0,324,323,1,0,0,0,324,325,1,0,0,0,325,326,1,0,0,0,326,
328,3,26,13,0,327,329,3,32,16,0,328,327,1,0,0,0,328,329,1,0,0,0,329,331,
1,0,0,0,330,332,3,34,17,0,331,330,1,0,0,0,331,332,1,0,0,0,332,334,1,0,0,
0,333,335,3,40,20,0,334,333,1,0,0,0,334,335,1,0,0,0,335,336,1,0,0,0,336,
337,3,20,10,0,337,338,5,3,0,0,338,339,3,116,58,0,339,15,1,0,0,0,340,341,
3,116,58,0,341,342,5,1,0,0,342,343,5,14,0,0,343,345,3,26,13,0,344,346,3,
30,15,0,345,344,1,0,0,0,345,346,1,0,0,0,346,348,1,0,0,0,347,349,3,34,17,
0,348,347,1,0,0,0,348,349,1,0,0,0,349,350,1,0,0,0,350,351,3,20,10,0,351,
352,5,3,0,0,352,353,3,116,58,0,353,17,1,0,0,0,354,355,3,116,58,0,355,356,
5,1,0,0,356,357,5,15,0,0,357,359,3,26,13,0,358,360,3,30,15,0,359,358,1,0,
0,0,359,360,1,0,0,0,360,362,1,0,0,0,361,363,3,34,17,0,362,361,1,0,0,0,362,
363,1,0,0,0,363,364,1,0,0,0,364,365,3,20,10,0,365,366,5,3,0,0,366,367,3,
116,58,0,367,19,1,0,0,0,368,370,3,52,26,0,369,368,1,0,0,0,370,373,1,0,0,
0,371,369,1,0,0,0,371,372,1,0,0,0,372,377,1,0,0,0,373,371,1,0,0,0,374,376,
3,54,27,0,375,374,1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,
0,378,383,1,0,0,0,379,377,1,0,0,0,380,382,3,56,28,0,381,380,1,0,0,0,382,
385,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,384,21,1,0,0,0,385,383,1,0,0,
0,386,391,3,24,12,0,387,388,5,6,0,0,388,390,3,24,12,0,389,387,1,0,0,0,390,
393,1,0,0,0,391,389,1,0,0,0,391,392,1,0,0,0,392,23,1,0,0,0,393,391,1,0,0,
0,394,399,3,116,58,0,395,396,5,6,0,0,396,398,3,116,58,0,397,395,1,0,0,0,
398,401,1,0,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,402,1,0,0,0,401,399,
1,0,0,0,402,403,5,16,0,0,403,404,5,17,0,0,404,417,1,0,0,0,405,410,3,116,
58,0,406,407,5,6,0,0,407,409,3,116,58,0,408,406,1,0,0,0,409,412,1,0,0,0,
410,408,1,0,0,0,410,411,1,0,0,0,411,413,1,0,0,0,412,410,1,0,0,0,413,414,
5,16,0,0,414,415,3,86,43,0,415,417,1,0,0,0,416,394,1,0,0,0,416,405,1,0,0,
0,417,25,1,0,0,0,418,429,5,18,0,0,419,424,3,28,14,0,420,421,5,6,0,0,421,
423,3,28,14,0,422,420,1,0,0,0,423,426,1,0,0,0,424,422,1,0,0,0,424,425,1,
0,0,0,425,428,1,0,0,0,426,424,1,0,0,0,427,419,1,0,0,0,428,431,1,0,0,0,429,
427,1,0,0,0,429,430,1,0,0,0,430,432,1,0,0,0,431,429,1,0,0,0,432,433,5,19,
0,0,433,27,1,0,0,0,434,439,3,116,58,0,435,436,5,6,0,0,436,438,3,116,58,0,
437,435,1,0,0,0,438,441,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,442,
1,0,0,0,441,439,1,0,0,0,442,443,5,16,0,0,443,444,3,86,43,0,444,29,1,0,0,
0,445,446,5,20,0,0,446,447,5,18,0,0,447,452,3,86,43,0,448,449,5,6,0,0,449,
451,3,86,43,0,450,448,1,0,0,0,451,454,1,0,0,0,452,450,1,0,0,0,452,453,1,
0,0,0,453,455,1,0,0,0,454,452,1,0,0,0,455,456,5,19,0,0,456,31,1,0,0,0,457,
458,5,21,0,0,458,459,5,18,0,0,459,464,3,86,43,0,460,461,5,6,0,0,461,463,
3,86,43,0,462,460,1,0,0,0,463,466,1,0,0,0,464,462,1,0,0,0,464,465,1,0,0,
0,465,467,1,0,0,0,466,464,1,0,0,0,467,468,5,19,0,0,468,33,1,0,0,0,469,470,
5,22,0,0,470,471,5,18,0,0,471,476,3,36,18,0,472,473,5,6,0,0,473,475,3,36,
18,0,474,472,1,0,0,0,475,478,1,0,0,0,476,474,1,0,0,0,476,477,1,0,0,0,477,
479,1,0,0,0,478,476,1,0,0,0,479,480,5,19,0,0,480,35,1,0,0,0,481,490,3,114,
57,0,482,487,3,86,43,0,483,484,5,6,0,0,484,486,3,86,43,0,485,483,1,0,0,0,
486,489,1,0,0,0,487,485,1,0,0,0,487,488,1,0,0,0,488,491,1,0,0,0,489,487,
1,0,0,0,490,482,1,0,0,0,490,491,1,0,0,0,491,37,1,0,0,0,492,495,3,116,58,
0,493,495,5,23,0,0,494,492,1,0,0,0,494,493,1,0,0,0,495,39,1,0,0,0,496,497,
5,24,0,0,497,502,3,42,21,0,498,499,5,6,0,0,499,501,3,42,21,0,500,498,1,0,
0,0,501,504,1,0,0,0,502,500,1,0,0,0,502,503,1,0,0,0,503,41,1,0,0,0,504,502,
1,0,0,0,505,506,3,116,58,0,506,507,5,25,0,0,507,512,3,46,23,0,508,509,5,
6,0,0,509,511,3,46,23,0,510,508,1,0,0,0,511,514,1,0,0,0,512,510,1,0,0,0,
512,513,1,0,0,0,513,520,1,0,0,0,514,512,1,0,0,0,515,516,3,116,58,0,516,517,
5,26,0,0,517,518,3,44,22,0,518,520,1,0,0,0,519,505,1,0,0,0,519,515,1,0,0,
0,520,43,1,0,0,0,521,539,3,116,58,0,522,523,3,116,58,0,523,524,5,25,0,0,
524,529,3,46,23,0,525,526,5,6,0,0,526,528,3,46,23,0,527,525,1,0,0,0,528,
531,1,0,0,0,529,527,1,0,0,0,529,530,1,0,0,0,530,535,1,0,0,0,531,529,1,0,
0,0,532,534,3,52,26,0,533,532,1,0,0,0,534,537,1,0,0,0,535,533,1,0,0,0,535,
536,1,0,0,0,536,539,1,0,0,0,537,535,1,0,0,0,538,521,1,0,0,0,538,522,1,0,
0,0,539,542,1,0,0,0,540,538,1,0,0,0,540,541,1,0,0,0,541,549,1,0,0,0,542,
540,1,0,0,0,543,549,3,116,58,0,544,545,3,90,45,0,545,546,5,27,0,0,546,547,
3,114,57,0,547,549,1,0,0,0,548,540,1,0,0,0,548,543,1,0,0,0,548,544,1,0,0,
0,549,45,1,0,0,0,550,555,3,114,57,0,551,552,5,6,0,0,552,554,3,114,57,0,553,
551,1,0,0,0,554,557,1,0,0,0,555,553,1,0,0,0,555,556,1,0,0,0,556,558,1,0,
0,0,557,555,1,0,0,0,558,559,5,16,0,0,559,560,3,86,43,0,560,563,1,0,0,0,561,
563,5,23,0,0,562,550,1,0,0,0,562,561,1,0,0,0,563,47,1,0,0,0,564,567,3,98,
49,0,565,567,3,86,43,0,566,564,1,0,0,0,566,565,1,0,0,0,567,49,1,0,0,0,568,
570,5,28,0,0,569,568,1,0,0,0,569,570,1,0,0,0,570,571,1,0,0,0,571,596,3,28,
14,0,572,574,5,28,0,0,573,572,1,0,0,0,573,574,1,0,0,0,574,575,1,0,0,0,575,
576,3,116,58,0,576,577,5,16,0,0,577,578,3,86,43,0,578,579,5,29,0,0,579,580,
3,98,49,0,580,596,1,0,0,0,581,583,5,28,0,0,582,581,1,0,0,0,582,583,1,0,0,
0,583,584,1,0,0,0,584,589,3,28,14,0,585,586,5,6,0,0,586,588,3,28,14,0,587,
585,1,0,0,0,588,591,1,0,0,0,589,587,1,0,0,0,589,590,1,0,0,0,590,592,1,0,
0,0,591,589,1,0,0,0,592,593,5,29,0,0,593,594,3,104,52,0,594,596,1,0,0,0,
595,569,1,0,0,0,595,573,1,0,0,0,595,582,1,0,0,0,596,51,1,0,0,0,597,598,3,
116,58,0,598,599,5,1,0,0,599,600,3,48,24,0,600,610,1,0,0,0,601,602,3,116,
58,0,602,603,5,1,0,0,603,604,3,44,22,0,604,610,1,0,0,0,605,606,3,116,58,
0,606,607,5,1,0,0,607,608,3,90,45,0,608,610,1,0,0,0,609,597,1,0,0,0,609,
601,1,0,0,0,609,605,1,0,0,0,610,53,1,0,0,0,611,612,5,30,0,0,612,636,3,28,
14,0,613,614,5,30,0,0,614,615,3,116,58,0,615,616,5,16,0,0,616,617,3,86,43,
0,617,618,5,29,0,0,618,619,3,98,49,0,619,636,1,0,0,0,620,621,5,30,0,0,621,
626,3,28,14,0,622,623,5,6,0,0,623,625,3,28,14,0,624,622,1,0,0,0,625,628,
1,0,0,0,626,624,1,0,0,0,626,627,1,0,0,0,627,629,1,0,0,0,628,626,1,0,0,0,
629,630,5,29,0,0,630,633,3,104,52,0,631,632,5,31,0,0,632,634,3,100,50,0,
633,631,1,0,0,0,633,634,1,0,0,0,634,636,1,0,0,0,635,611,1,0,0,0,635,613,
1,0,0,0,635,620,1,0,0,0,636,55,1,0,0,0,637,638,6,28,-1,0,638,812,3,28,14,
0,639,640,3,116,58,0,640,641,5,16,0,0,641,642,3,86,43,0,642,643,5,29,0,0,
643,644,3,98,49,0,644,812,1,0,0,0,645,650,3,28,14,0,646,647,5,6,0,0,647,
649,3,28,14,0,648,646,1,0,0,0,649,652,1,0,0,0,650,648,1,0,0,0,650,651,1,
0,0,0,651,653,1,0,0,0,652,650,1,0,0,0,653,654,5,29,0,0,654,657,3,104,52,
0,655,656,5,31,0,0,656,658,3,100,50,0,657,655,1,0,0,0,657,658,1,0,0,0,658,
812,1,0,0,0,659,664,3,116,58,0,660,661,5,6,0,0,661,663,3,116,58,0,662,660,
1,0,0,0,663,666,1,0,0,0,664,662,1,0,0,0,664,665,1,0,0,0,665,667,1,0,0,0,
666,664,1,0,0,0,667,668,5,29,0,0,668,671,3,104,52,0,669,670,5,31,0,0,670,
672,3,100,50,0,671,669,1,0,0,0,671,672,1,0,0,0,672,812,1,0,0,0,673,678,3,
116,58,0,674,675,5,6,0,0,675,677,3,116,58,0,676,674,1,0,0,0,677,680,1,0,
0,0,678,676,1,0,0,0,678,679,1,0,0,0,679,681,1,0,0,0,680,678,1,0,0,0,681,
682,5,29,0,0,682,687,3,98,49,0,683,684,5,6,0,0,684,686,3,98,49,0,685,683,
1,0,0,0,686,689,1,0,0,0,687,685,1,0,0,0,687,688,1,0,0,0,688,812,1,0,0,0,
689,687,1,0,0,0,690,691,3,100,50,0,691,692,5,32,0,0,692,693,3,114,57,0,693,
694,5,29,0,0,694,695,3,98,49,0,695,812,1,0,0,0,696,698,3,100,50,0,697,699,
3,98,49,0,698,697,1,0,0,0,698,699,1,0,0,0,699,700,1,0,0,0,700,701,5,29,0,
0,701,702,3,98,49,0,702,812,1,0,0,0,703,706,3,104,52,0,704,705,5,31,0,0,
705,707,3,100,50,0,706,704,1,0,0,0,706,707,1,0,0,0,707,812,1,0,0,0,708,709,
5,33,0,0,709,812,3,104,52,0,710,711,5,34,0,0,711,712,3,98,49,0,712,713,5,
35,0,0,713,714,3,84,42,0,714,715,5,3,0,0,715,812,1,0,0,0,716,812,5,36,0,
0,717,812,5,37,0,0,718,812,3,58,29,0,719,720,5,38,0,0,720,724,3,60,30,0,
721,723,3,60,30,0,722,721,1,0,0,0,723,726,1,0,0,0,724,722,1,0,0,0,724,725,
1,0,0,0,725,727,1,0,0,0,726,724,1,0,0,0,727,728,5,3,0,0,728,812,1,0,0,0,
729,731,5,39,0,0,730,729,1,0,0,0,730,731,1,0,0,0,731,732,1,0,0,0,732,812,
5,40,0,0,733,734,5,41,0,0,734,735,3,98,49,0,735,736,5,35,0,0,736,737,3,84,
42,0,737,738,5,3,0,0,738,812,1,0,0,0,739,812,3,64,32,0,740,812,3,66,33,0,
741,812,3,68,34,0,742,812,3,70,35,0,743,812,3,72,36,0,744,746,5,39,0,0,745,
744,1,0,0,0,745,746,1,0,0,0,746,747,1,0,0,0,747,756,5,42,0,0,748,753,3,98,
49,0,749,750,5,6,0,0,750,752,3,98,49,0,751,749,1,0,0,0,752,755,1,0,0,0,753,
751,1,0,0,0,753,754,1,0,0,0,754,757,1,0,0,0,755,753,1,0,0,0,756,748,1,0,
0,0,756,757,1,0,0,0,757,812,1,0,0,0,758,767,5,43,0,0,759,764,3,98,49,0,760,
761,5,6,0,0,761,763,3,98,49,0,762,760,1,0,0,0,763,766,1,0,0,0,764,762,1,
0,0,0,764,765,1,0,0,0,765,768,1,0,0,0,766,764,1,0,0,0,767,759,1,0,0,0,767,
768,1,0,0,0,768,812,1,0,0,0,769,771,5,39,0,0,770,769,1,0,0,0,770,771,1,0,
0,0,771,772,1,0,0,0,772,773,5,44,0,0,773,782,3,114,57,0,774,779,3,98,49,
0,775,776,5,6,0,0,776,778,3,98,49,0,777,775,1,0,0,0,778,781,1,0,0,0,779,
777,1,0,0,0,779,780,1,0,0,0,780,783,1,0,0,0,781,779,1,0,0,0,782,774,1,0,
0,0,782,783,1,0,0,0,783,812,1,0,0,0,784,786,5,39,0,0,785,784,1,0,0,0,785,
786,1,0,0,0,786,787,1,0,0,0,787,788,5,45,0,0,788,797,3,114,57,0,789,794,
3,98,49,0,790,791,5,6,0,0,791,793,3,98,49,0,792,790,1,0,0,0,793,796,1,0,
0,0,794,792,1,0,0,0,794,795,1,0,0,0,795,798,1,0,0,0,796,794,1,0,0,0,797,
789,1,0,0,0,797,798,1,0,0,0,798,812,1,0,0,0,799,801,5,39,0,0,800,799,1,0,
0,0,800,801,1,0,0,0,801,802,1,0,0,0,802,812,5,46,0,0,803,805,5,39,0,0,804,
803,1,0,0,0,804,805,1,0,0,0,805,806,1,0,0,0,806,812,5,47,0,0,807,808,5,48,
0,0,808,809,3,84,42,0,809,810,5,3,0,0,810,812,1,0,0,0,811,637,1,0,0,0,811,
639,1,0,0,0,811,645,1,0,0,0,811,659,1,0,0,0,811,673,1,0,0,0,811,690,1,0,
0,0,811,696,1,0,0,0,811,703,1,0,0,0,811,708,1,0,0,0,811,710,1,0,0,0,811,
716,1,0,0,0,811,717,1,0,0,0,811,718,1,0,0,0,811,719,1,0,0,0,811,730,1,0,
0,0,811,733,1,0,0,0,811,739,1,0,0,0,811,740,1,0,0,0,811,741,1,0,0,0,811,
742,1,0,0,0,811,743,1,0,0,0,811,745,1,0,0,0,811,758,1,0,0,0,811,770,1,0,
0,0,811,785,1,0,0,0,811,800,1,0,0,0,811,804,1,0,0,0,811,807,1,0,0,0,812,
840,1,0,0,0,813,815,10,2,0,0,814,816,5,39,0,0,815,814,1,0,0,0,815,816,1,
0,0,0,816,817,1,0,0,0,817,818,5,49,0,0,818,823,3,114,57,0,819,820,5,6,0,
0,820,822,3,114,57,0,821,819,1,0,0,0,822,825,1,0,0,0,823,821,1,0,0,0,823,
824,1,0,0,0,824,839,1,0,0,0,825,823,1,0,0,0,826,827,10,1,0,0,827,831,5,50,
0,0,828,830,3,80,40,0,829,828,1,0,0,0,830,833,1,0,0,0,831,829,1,0,0,0,831,
832,1,0,0,0,832,835,1,0,0,0,833,831,1,0,0,0,834,836,3,82,41,0,835,834,1,
0,0,0,835,836,1,0,0,0,836,837,1,0,0,0,837,839,5,3,0,0,838,813,1,0,0,0,838,
826,1,0,0,0,839,842,1,0,0,0,840,838,1,0,0,0,840,841,1,0,0,0,841,57,1,0,0,
0,842,840,1,0,0,0,843,844,5,51,0,0,844,845,5,52,0,0,845,846,3,84,42,0,846,
847,5,3,0,0,847,854,1,0,0,0,848,849,5,51,0,0,849,850,5,53,0,0,850,851,3,
84,42,0,851,852,5,3,0,0,852,854,1,0,0,0,853,843,1,0,0,0,853,848,1,0,0,0,
854,59,1,0,0,0,855,870,3,62,31,0,856,857,5,54,0,0,857,862,3,28,14,0,858,
859,5,6,0,0,859,861,3,28,14,0,860,858,1,0,0,0,861,864,1,0,0,0,862,860,1,
0,0,0,862,863,1,0,0,0,863,865,1,0,0,0,864,862,1,0,0,0,865,866,5,26,0,0,866,
867,3,104,52,0,867,869,1,0,0,0,868,856,1,0,0,0,869,872,1,0,0,0,870,868,1,
0,0,0,870,871,1,0,0,0,871,873,1,0,0,0,872,870,1,0,0,0,873,874,3,84,42,0,
874,61,1,0,0,0,875,876,7,0,0,0,876,63,1,0,0,0,877,878,5,56,0,0,878,883,3,
28,14,0,879,880,5,6,0,0,880,882,3,28,14,0,881,879,1,0,0,0,882,885,1,0,0,
0,883,881,1,0,0,0,883,884,1,0,0,0,884,886,1,0,0,0,885,883,1,0,0,0,886,887,
5,26,0,0,887,888,3,104,52,0,888,889,5,35,0,0,889,890,3,84,42,0,890,891,5,
3,0,0,891,908,1,0,0,0,892,893,5,56,0,0,893,898,3,116,58,0,894,895,5,6,0,
0,895,897,3,116,58,0,896,894,1,0,0,0,897,900,1,0,0,0,898,896,1,0,0,0,898,
899,1,0,0,0,899,901,1,0,0,0,900,898,1,0,0,0,901,902,5,26,0,0,902,903,3,104,
52,0,903,904,5,35,0,0,904,905,3,84,42,0,905,906,5,3,0,0,906,908,1,0,0,0,
907,877,1,0,0,0,907,892,1,0,0,0,908,65,1,0,0,0,909,910,5,57,0,0,910,911,
3,98,49,0,911,912,5,58,0,0,912,920,3,84,42,0,913,914,5,59,0,0,914,915,3,
98,49,0,915,916,5,58,0,0,916,917,3,84,42,0,917,919,1,0,0,0,918,913,1,0,0,
0,919,922,1,0,0,0,920,918,1,0,0,0,920,921,1,0,0,0,921,925,1,0,0,0,922,920,
1,0,0,0,923,924,5,60,0,0,924,926,3,84,42,0,925,923,1,0,0,0,925,926,1,0,0,
0,926,927,1,0,0,0,927,928,5,3,0,0,928,67,1,0,0,0,929,930,5,61,0,0,930,931,
3,98,49,0,931,935,3,74,37,0,932,934,3,74,37,0,933,932,1,0,0,0,934,937,1,
0,0,0,935,933,1,0,0,0,935,936,1,0,0,0,936,941,1,0,0,0,937,935,1,0,0,0,938,
939,5,62,0,0,939,940,5,16,0,0,940,942,3,84,42,0,941,938,1,0,0,0,941,942,
1,0,0,0,942,943,1,0,0,0,943,944,5,3,0,0,944,69,1,0,0,0,945,946,5,63,0,0,
946,947,3,98,49,0,947,951,3,76,38,0,948,950,3,76,38,0,949,948,1,0,0,0,950,
953,1,0,0,0,951,949,1,0,0,0,951,952,1,0,0,0,952,957,1,0,0,0,953,951,1,0,
0,0,954,955,5,62,0,0,955,956,5,16,0,0,956,958,3,84,42,0,957,954,1,0,0,0,
957,958,1,0,0,0,958,959,1,0,0,0,959,960,5,3,0,0,960,71,1,0,0,0,961,962,5,
64,0,0,962,963,3,98,49,0,963,967,3,76,38,0,964,966,3,76,38,0,965,964,1,0,
0,0,966,969,1,0,0,0,967,965,1,0,0,0,967,968,1,0,0,0,968,970,1,0,0,0,969,
967,1,0,0,0,970,971,5,3,0,0,971,73,1,0,0,0,972,973,5,65,0,0,973,978,3,114,
57,0,974,975,5,6,0,0,975,977,3,114,57,0,976,974,1,0,0,0,977,980,1,0,0,0,
978,976,1,0,0,0,978,979,1,0,0,0,979,985,1,0,0,0,980,978,1,0,0,0,981,982,
3,116,58,0,982,983,5,16,0,0,983,984,3,86,43,0,984,986,1,0,0,0,985,981,1,
0,0,0,985,986,1,0,0,0,986,987,1,0,0,0,987,988,5,16,0,0,988,989,3,84,42,0,
989,75,1,0,0,0,990,991,3,78,39,0,991,996,3,114,57,0,992,993,5,6,0,0,993,
995,3,114,57,0,994,992,1,0,0,0,995,998,1,0,0,0,996,994,1,0,0,0,996,997,1,
0,0,0,997,1005,1,0,0,0,998,996,1,0,0,0,999,1000,3,116,58,0,1000,1001,5,16,
0,0,1001,1002,3,86,43,0,1002,1004,1,0,0,0,1003,999,1,0,0,0,1004,1007,1,0,
0,0,1005,1003,1,0,0,0,1005,1006,1,0,0,0,1006,1008,1,0,0,0,1007,1005,1,0,
0,0,1008,1009,5,16,0,0,1009,1010,3,84,42,0,1010,77,1,0,0,0,1011,1012,7,1,
0,0,1012,79,1,0,0,0,1013,1014,5,67,0,0,1014,1019,3,114,57,0,1015,1016,5,
6,0,0,1016,1018,3,114,57,0,1017,1015,1,0,0,0,1018,1021,1,0,0,0,1019,1017,
1,0,0,0,1019,1020,1,0,0,0,1020,1032,1,0,0,0,1021,1019,1,0,0,0,1022,1027,
3,28,14,0,1023,1024,5,6,0,0,1024,1026,3,28,14,0,1025,1023,1,0,0,0,1026,1029,
1,0,0,0,1027,1025,1,0,0,0,1027,1028,1,0,0,0,1028,1031,1,0,0,0,1029,1027,
1,0,0,0,1030,1022,1,0,0,0,1031,1034,1,0,0,0,1032,1030,1,0,0,0,1032,1033,
1,0,0,0,1033,1035,1,0,0,0,1034,1032,1,0,0,0,1035,1036,5,16,0,0,1036,1037,
3,84,42,0,1037,1054,1,0,0,0,1038,1039,5,67,0,0,1039,1044,3,114,57,0,1040,
1041,5,6,0,0,1041,1043,3,114,57,0,1042,1040,1,0,0,0,1043,1046,1,0,0,0,1044,
1042,1,0,0,0,1044,1045,1,0,0,0,1045,1047,1,0,0,0,1046,1044,1,0,0,0,1047,
1048,5,18,0,0,1048,1049,5,68,0,0,1049,1050,5,19,0,0,1050,1051,5,16,0,0,1051,
1052,3,84,42,0,1052,1054,1,0,0,0,1053,1013,1,0,0,0,1053,1038,1,0,0,0,1054,
81,1,0,0,0,1055,1062,5,62,0,0,1056,1057,3,116,58,0,1057,1058,5,16,0,0,1058,
1059,3,86,43,0,1059,1061,1,0,0,0,1060,1056,1,0,0,0,1061,1064,1,0,0,0,1062,
1060,1,0,0,0,1062,1063,1,0,0,0,1063,1065,1,0,0,0,1064,1062,1,0,0,0,1065,
1066,5,16,0,0,1066,1067,3,84,42,0,1067,83,1,0,0,0,1068,1070,3,52,26,0,1069,
1068,1,0,0,0,1070,1073,1,0,0,0,1071,1069,1,0,0,0,1071,1072,1,0,0,0,1072,
1077,1,0,0,0,1073,1071,1,0,0,0,1074,1076,3,56,28,0,1075,1074,1,0,0,0,1076,
1079,1,0,0,0,1077,1075,1,0,0,0,1077,1078,1,0,0,0,1078,85,1,0,0,0,1079,1077,
1,0,0,0,1080,1253,5,69,0,0,1081,1253,5,70,0,0,1082,1253,5,71,0,0,1083,1253,
5,72,0,0,1084,1253,5,73,0,0,1085,1253,5,74,0,0,1086,1253,5,75,0,0,1087,1253,
5,76,0,0,1088,1253,5,77,0,0,1089,1253,5,11,0,0,1090,1253,5,78,0,0,1091,1092,
5,79,0,0,1092,1093,5,80,0,0,1093,1094,3,94,47,0,1094,1095,5,81,0,0,1095,
1253,1,0,0,0,1096,1097,5,82,0,0,1097,1098,5,80,0,0,1098,1099,3,94,47,0,1099,
1100,5,81,0,0,1100,1253,1,0,0,0,1101,1102,5,83,0,0,1102,1103,5,80,0,0,1103,
1104,3,94,47,0,1104,1105,5,81,0,0,1105,1253,1,0,0,0,1106,1107,5,84,0,0,1107,
1108,5,80,0,0,1108,1113,3,88,44,0,1109,1110,5,6,0,0,1110,1112,3,88,44,0,
1111,1109,1,0,0,0,1112,1115,1,0,0,0,1113,1111,1,0,0,0,1113,1114,1,0,0,0,
1114,1116,1,0,0,0,1115,1113,1,0,0,0,1116,1117,5,81,0,0,1117,1253,1,0,0,0,
1118,1119,5,85,0,0,1119,1120,5,80,0,0,1120,1125,3,88,44,0,1121,1122,5,6,
0,0,1122,1124,3,88,44,0,1123,1121,1,0,0,0,1124,1127,1,0,0,0,1125,1123,1,
0,0,0,1125,1126,1,0,0,0,1126,1128,1,0,0,0,1127,1125,1,0,0,0,1128,1129,5,
81,0,0,1129,1253,1,0,0,0,1130,1131,5,86,0,0,1131,1132,5,80,0,0,1132,1137,
3,88,44,0,1133,1134,5,6,0,0,1134,1136,3,88,44,0,1135,1133,1,0,0,0,1136,1139,
1,0,0,0,1137,1135,1,0,0,0,1137,1138,1,0,0,0,1138,1140,1,0,0,0,1139,1137,
1,0,0,0,1140,1141,5,81,0,0,1141,1253,1,0,0,0,1142,1143,5,87,0,0,1143,1144,
5,80,0,0,1144,1149,3,88,44,0,1145,1146,5,6,0,0,1146,1148,3,88,44,0,1147,
1145,1,0,0,0,1148,1151,1,0,0,0,1149,1147,1,0,0,0,1149,1150,1,0,0,0,1150,
1152,1,0,0,0,1151,1149,1,0,0,0,1152,1153,5,81,0,0,1153,1253,1,0,0,0,1154,
1155,5,88,0,0,1155,1156,5,80,0,0,1156,1161,3,88,44,0,1157,1158,5,6,0,0,1158,
1160,3,88,44,0,1159,1157,1,0,0,0,1160,1163,1,0,0,0,1161,1159,1,0,0,0,1161,
1162,1,0,0,0,1162,1164,1,0,0,0,1163,1161,1,0,0,0,1164,1165,5,81,0,0,1165,
1253,1,0,0,0,1166,1167,5,89,0,0,1167,1168,5,80,0,0,1168,1173,3,88,44,0,1169,
1170,5,6,0,0,1170,1172,3,88,44,0,1171,1169,1,0,0,0,1172,1175,1,0,0,0,1173,
1171,1,0,0,0,1173,1174,1,0,0,0,1174,1176,1,0,0,0,1175,1173,1,0,0,0,1176,
1177,5,81,0,0,1177,1253,1,0,0,0,1178,1187,5,90,0,0,1179,1184,3,86,43,0,1180,
1181,5,6,0,0,1181,1183,3,86,43,0,1182,1180,1,0,0,0,1183,1186,1,0,0,0,1184,
1182,1,0,0,0,1184,1185,1,0,0,0,1185,1188,1,0,0,0,1186,1184,1,0,0,0,1187,
1179,1,0,0,0,1187,1188,1,0,0,0,1188,1190,1,0,0,0,1189,1191,3,30,15,0,1190,
1189,1,0,0,0,1190,1191,1,0,0,0,1191,1193,1,0,0,0,1192,1194,3,34,17,0,1193,
1192,1,0,0,0,1193,1194,1,0,0,0,1194,1253,1,0,0,0,1195,1204,5,91,0,0,1196,
1201,3,86,43,0,1197,1198,5,6,0,0,1198,1200,3,86,43,0,1199,1197,1,0,0,0,1200,
1203,1,0,0,0,1201,1199,1,0,0,0,1201,1202,1,0,0,0,1202,1205,1,0,0,0,1203,
1201,1,0,0,0,1204,1196,1,0,0,0,1204,1205,1,0,0,0,1205,1207,1,0,0,0,1206,
1208,3,32,16,0,1207,1206,1,0,0,0,1207,1208,1,0,0,0,1208,1210,1,0,0,0,1209,
1211,3,34,17,0,1210,1209,1,0,0,0,1210,1211,1,0,0,0,1211,1253,1,0,0,0,1212,
1221,5,92,0,0,1213,1218,3,86,43,0,1214,1215,5,6,0,0,1215,1217,3,86,43,0,
1216,1214,1,0,0,0,1217,1220,1,0,0,0,1218,1216,1,0,0,0,1218,1219,1,0,0,0,
1219,1222,1,0,0,0,1220,1218,1,0,0,0,1221,1213,1,0,0,0,1221,1222,1,0,0,0,
1222,1224,1,0,0,0,1223,1225,3,30,15,0,1224,1223,1,0,0,0,1224,1225,1,0,0,
0,1225,1227,1,0,0,0,1226,1228,3,34,17,0,1227,1226,1,0,0,0,1227,1228,1,0,
0,0,1228,1253,1,0,0,0,1229,1238,5,93,0,0,1230,1235,3,86,43,0,1231,1232,5,
6,0,0,1232,1234,3,86,43,0,1233,1231,1,0,0,0,1234,1237,1,0,0,0,1235,1233,
1,0,0,0,1235,1236,1,0,0,0,1236,1239,1,0,0,0,1237,1235,1,0,0,0,1238,1230,
1,0,0,0,1238,1239,1,0,0,0,1239,1241,1,0,0,0,1240,1242,3,30,15,0,1241,1240,
1,0,0,0,1241,1242,1,0,0,0,1242,1244,1,0,0,0,1243,1245,3,34,17,0,1244,1243,
1,0,0,0,1244,1245,1,0,0,0,1245,1253,1,0,0,0,1246,1247,5,94,0,0,1247,1248,
5,80,0,0,1248,1249,3,94,47,0,1249,1250,5,81,0,0,1250,1253,1,0,0,0,1251,1253,
3,90,45,0,1252,1080,1,0,0,0,1252,1081,1,0,0,0,1252,1082,1,0,0,0,1252,1083,
1,0,0,0,1252,1084,1,0,0,0,1252,1085,1,0,0,0,1252,1086,1,0,0,0,1252,1087,
1,0,0,0,1252,1088,1,0,0,0,1252,1089,1,0,0,0,1252,1090,1,0,0,0,1252,1091,
1,0,0,0,1252,1096,1,0,0,0,1252,1101,1,0,0,0,1252,1106,1,0,0,0,1252,1118,
1,0,0,0,1252,1130,1,0,0,0,1252,1142,1,0,0,0,1252,1154,1,0,0,0,1252,1166,
1,0,0,0,1252,1178,1,0,0,0,1252,1195,1,0,0,0,1252,1212,1,0,0,0,1252,1229,
1,0,0,0,1252,1246,1,0,0,0,1252,1251,1,0,0,0,1253,87,1,0,0,0,1254,1259,3,
114,57,0,1255,1256,5,6,0,0,1256,1258,3,114,57,0,1257,1255,1,0,0,0,1258,1261,
1,0,0,0,1259,1257,1,0,0,0,1259,1260,1,0,0,0,1260,1262,1,0,0,0,1261,1259,
1,0,0,0,1262,1263,5,16,0,0,1263,1264,3,94,47,0,1264,89,1,0,0,0,1265,1266,
6,45,-1,0,1266,1279,3,116,58,0,1267,1276,3,116,58,0,1268,1273,3,92,46,0,
1269,1270,5,6,0,0,1270,1272,3,92,46,0,1271,1269,1,0,0,0,1272,1275,1,0,0,
0,1273,1271,1,0,0,0,1273,1274,1,0,0,0,1274,1277,1,0,0,0,1275,1273,1,0,0,
0,1276,1268,1,0,0,0,1276,1277,1,0,0,0,1277,1279,1,0,0,0,1278,1265,1,0,0,
0,1278,1267,1,0,0,0,1279,1285,1,0,0,0,1280,1281,10,1,0,0,1281,1282,5,27,
0,0,1282,1284,3,114,57,0,1283,1280,1,0,0,0,1284,1287,1,0,0,0,1285,1283,1,
0,0,0,1285,1286,1,0,0,0,1286,91,1,0,0,0,1287,1285,1,0,0,0,1288,1291,3,48,
24,0,1289,1291,3,94,47,0,1290,1288,1,0,0,0,1290,1289,1,0,0,0,1291,93,1,0,
0,0,1292,1304,3,86,43,0,1293,1302,5,95,0,0,1294,1299,3,96,48,0,1295,1296,
5,6,0,0,1296,1298,3,96,48,0,1297,1295,1,0,0,0,1298,1301,1,0,0,0,1299,1297,
1,0,0,0,1299,1300,1,0,0,0,1300,1303,1,0,0,0,1301,1299,1,0,0,0,1302,1294,
1,0,0,0,1302,1303,1,0,0,0,1303,1305,1,0,0,0,1304,1293,1,0,0,0,1304,1305,
1,0,0,0,1305,95,1,0,0,0,1306,1311,3,114,57,0,1307,1308,5,6,0,0,1308,1310,
3,114,57,0,1309,1307,1,0,0,0,1310,1313,1,0,0,0,1311,1309,1,0,0,0,1311,1312,
1,0,0,0,1312,1314,1,0,0,0,1313,1311,1,0,0,0,1314,1315,5,16,0,0,1315,1316,
3,100,50,0,1316,97,1,0,0,0,1317,1318,6,49,-1,0,1318,1332,3,100,50,0,1319,
1320,3,104,52,0,1320,1321,5,31,0,0,1321,1322,3,100,50,0,1322,1332,1,0,0,
0,1323,1324,5,18,0,0,1324,1325,3,98,49,0,1325,1326,5,19,0,0,1326,1332,1,
0,0,0,1327,1328,5,96,0,0,1328,1332,3,98,49,23,1329,1330,5,97,0,0,1330,1332,
3,98,49,22,1331,1317,1,0,0,0,1331,1319,1,0,0,0,1331,1323,1,0,0,0,1331,1327,
1,0,0,0,1331,1329,1,0,0,0,1332,1398,1,0,0,0,1333,1334,10,21,0,0,1334,1335,
5,98,0,0,1335,1397,3,98,49,22,1336,1337,10,20,0,0,1337,1338,5,99,0,0,1338,
1397,3,98,49,21,1339,1340,10,19,0,0,1340,1341,5,100,0,0,1341,1397,3,98,49,
20,1342,1343,10,18,0,0,1343,1344,5,68,0,0,1344,1397,3,98,49,19,1345,1346,
10,17,0,0,1346,1347,5,101,0,0,1347,1397,3,98,49,18,1348,1349,10,16,0,0,1349,
1350,5,102,0,0,1350,1397,3,98,49,17,1351,1352,10,15,0,0,1352,1353,5,97,0,
0,1353,1397,3,98,49,16,1354,1355,10,14,0,0,1355,1356,5,103,0,0,1356,1397,
3,98,49,15,1357,1358,10,13,0,0,1358,1359,5,104,0,0,1359,1397,3,98,49,14,
1360,1361,10,12,0,0,1361,1362,5,1,0,0,1362,1397,3,98,49,13,1363,1364,10,
11,0,0,1364,1365,5,105,0,0,1365,1397,3,98,49,12,1366,1367,10,10,0,0,1367,
1368,5,106,0,0,1368,1397,3,98,49,11,1369,1370,10,9,0,0,1370,1371,5,107,0,
0,1371,1397,3,98,49,10,1372,1373,10,8,0,0,1373,1374,5,108,0,0,1374,1397,
3,98,49,9,1375,1376,10,7,0,0,1376,1377,5,109,0,0,1377,1397,3,98,49,8,1378,
1379,10,6,0,0,1379,1380,5,110,0,0,1380,1397,3,98,49,7,1381,1382,10,5,0,0,
1382,1383,5,111,0,0,1383,1397,3,98,49,6,1384,1385,10,4,0,0,1385,1386,5,112,
0,0,1386,1397,3,98,49,5,1387,1388,10,3,0,0,1388,1389,5,113,0,0,1389,1397,
3,98,49,4,1390,1391,10,2,0,0,1391,1392,5,114,0,0,1392,1397,3,98,49,3,1393,
1394,10,1,0,0,1394,1395,5,115,0,0,1395,1397,3,98,49,2,1396,1333,1,0,0,0,
1396,1336,1,0,0,0,1396,1339,1,0,0,0,1396,1342,1,0,0,0,1396,1345,1,0,0,0,
1396,1348,1,0,0,0,1396,1351,1,0,0,0,1396,1354,1,0,0,0,1396,1357,1,0,0,0,
1396,1360,1,0,0,0,1396,1363,1,0,0,0,1396,1366,1,0,0,0,1396,1369,1,0,0,0,
1396,1372,1,0,0,0,1396,1375,1,0,0,0,1396,1378,1,0,0,0,1396,1381,1,0,0,0,
1396,1384,1,0,0,0,1396,1387,1,0,0,0,1396,1390,1,0,0,0,1396,1393,1,0,0,0,
1397,1400,1,0,0,0,1398,1396,1,0,0,0,1398,1399,1,0,0,0,1399,99,1,0,0,0,1400,
1398,1,0,0,0,1401,1414,3,102,51,0,1402,1403,5,32,0,0,1403,1413,3,114,57,
0,1404,1409,3,98,49,0,1405,1406,5,6,0,0,1406,1408,3,98,49,0,1407,1405,1,
0,0,0,1408,1411,1,0,0,0,1409,1407,1,0,0,0,1409,1410,1,0,0,0,1410,1413,1,
0,0,0,1411,1409,1,0,0,0,1412,1402,1,0,0,0,1412,1404,1,0,0,0,1413,1416,1,
0,0,0,1414,1412,1,0,0,0,1414,1415,1,0,0,0,1415,101,1,0,0,0,1416,1414,1,0,
0,0,1417,1418,3,106,53,0,1418,103,1,0,0,0,1419,1420,3,100,50,0,1420,1429,
5,18,0,0,1421,1426,3,98,49,0,1422,1423,5,6,0,0,1423,1425,3,98,49,0,1424,
1422,1,0,0,0,1425,1428,1,0,0,0,1426,1424,1,0,0,0,1426,1427,1,0,0,0,1427,
1430,1,0,0,0,1428,1426,1,0,0,0,1429,1421,1,0,0,0,1429,1430,1,0,0,0,1430,
1431,1,0,0,0,1431,1432,5,19,0,0,1432,105,1,0,0,0,1433,1439,3,108,54,0,1434,
1435,5,32,0,0,1435,1438,3,114,57,0,1436,1438,3,98,49,0,1437,1434,1,0,0,0,
1437,1436,1,0,0,0,1438,1441,1,0,0,0,1439,1437,1,0,0,0,1439,1440,1,0,0,0,
1440,107,1,0,0,0,1441,1439,1,0,0,0,1442,1519,5,116,0,0,1443,1519,5,117,0,
0,1444,1519,5,118,0,0,1445,1519,5,123,0,0,1446,1519,5,124,0,0,1447,1519,
5,125,0,0,1448,1519,5,126,0,0,1449,1519,5,119,0,0,1450,1519,3,90,45,0,1451,
1452,5,120,0,0,1452,1461,3,106,53,0,1453,1458,3,112,56,0,1454,1455,5,6,0,
0,1455,1457,3,112,56,0,1456,1454,1,0,0,0,1457,1460,1,0,0,0,1458,1456,1,0,
0,0,1458,1459,1,0,0,0,1459,1462,1,0,0,0,1460,1458,1,0,0,0,1461,1453,1,0,
0,0,1461,1462,1,0,0,0,1462,1519,1,0,0,0,1463,1464,3,86,43,0,1464,1475,5,
27,0,0,1465,1470,3,110,55,0,1466,1467,5,6,0,0,1467,1469,3,110,55,0,1468,
1466,1,0,0,0,1469,1472,1,0,0,0,1470,1468,1,0,0,0,1470,1471,1,0,0,0,1471,
1474,1,0,0,0,1472,1470,1,0,0,0,1473,1465,1,0,0,0,1474,1477,1,0,0,0,1475,
1473,1,0,0,0,1475,1476,1,0,0,0,1476,1519,1,0,0,0,1477,1475,1,0,0,0,1478,
1479,3,86,43,0,1479,1483,5,27,0,0,1480,1481,3,98,49,0,1481,1482,5,16,0,0,
1482,1484,1,0,0,0,1483,1480,1,0,0,0,1483,1484,1,0,0,0,1484,1493,1,0,0,0,
1485,1490,3,98,49,0,1486,1487,5,6,0,0,1487,1489,3,98,49,0,1488,1486,1,0,
0,0,1489,1492,1,0,0,0,1490,1488,1,0,0,0,1490,1491,1,0,0,0,1491,1494,1,0,
0,0,1492,1490,1,0,0,0,1493,1485,1,0,0,0,1493,1494,1,0,0,0,1494,1519,1,0,
0,0,1495,1496,3,86,43,0,1496,1497,5,27,0,0,1497,1506,3,114,57,0,1498,1503,
3,92,46,0,1499,1500,5,6,0,0,1500,1502,3,92,46,0,1501,1499,1,0,0,0,1502,1505,
1,0,0,0,1503,1501,1,0,0,0,1503,1504,1,0,0,0,1504,1507,1,0,0,0,1505,1503,
1,0,0,0,1506,1498,1,0,0,0,1506,1507,1,0,0,0,1507,1519,1,0,0,0,1508,1509,
5,121,0,0,1509,1510,5,18,0,0,1510,1511,3,98,49,0,1511,1512,5,19,0,0,1512,
1519,1,0,0,0,1513,1514,5,122,0,0,1514,1515,5,18,0,0,1515,1516,3,98,49,0,
1516,1517,5,19,0,0,1517,1519,1,0,0,0,1518,1442,1,0,0,0,1518,1443,1,0,0,0,
1518,1444,1,0,0,0,1518,1445,1,0,0,0,1518,1446,1,0,0,0,1518,1447,1,0,0,0,
1518,1448,1,0,0,0,1518,1449,1,0,0,0,1518,1450,1,0,0,0,1518,1451,1,0,0,0,
1518,1463,1,0,0,0,1518,1478,1,0,0,0,1518,1495,1,0,0,0,1518,1508,1,0,0,0,
1518,1513,1,0,0,0,1519,109,1,0,0,0,1520,1525,3,114,57,0,1521,1522,5,6,0,
0,1522,1524,3,114,57,0,1523,1521,1,0,0,0,1524,1527,1,0,0,0,1525,1523,1,0,
0,0,1525,1526,1,0,0,0,1526,1528,1,0,0,0,1527,1525,1,0,0,0,1528,1529,5,16,
0,0,1529,1530,3,98,49,0,1530,111,1,0,0,0,1531,1534,5,68,0,0,1532,1534,3,
98,49,0,1533,1531,1,0,0,0,1533,1532,1,0,0,0,1534,113,1,0,0,0,1535,1536,5,
127,0,0,1536,115,1,0,0,0,1537,1538,5,127,0,0,1538,117,1,0,0,0,187,121,128,
135,142,149,153,160,162,167,177,185,194,197,200,205,211,218,224,229,236,
246,254,258,263,272,278,285,294,298,304,308,311,314,324,328,331,334,345,
348,359,362,371,377,383,391,399,410,416,424,429,439,452,464,476,487,490,
494,502,512,519,529,535,538,540,548,555,562,566,569,573,582,589,595,609,
626,633,635,650,657,664,671,678,687,698,706,724,730,745,753,756,764,767,
770,779,782,785,794,797,800,804,811,815,823,831,835,838,840,853,862,870,
883,898,907,920,925,935,941,951,957,967,978,985,996,1005,1019,1027,1032,
1044,1053,1062,1071,1077,1113,1125,1137,1149,1161,1173,1184,1187,1190,1193,
1201,1204,1207,1210,1218,1221,1224,1227,1235,1238,1241,1244,1252,1259,1273,
1276,1278,1285,1290,1299,1302,1304,1311,1331,1396,1398,1409,1412,1414,1426,
1429,1437,1439,1458,1461,1470,1475,1483,1490,1493,1503,1506,1518,1525,1533];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class argusParser extends antlr4.Parser {

    static grammarFileName = "argus.g4";
    static literalNames = [ null, "'='", "'equates'", "'end'", "'guardian'", 
                            "'is'", "','", "'handles'", "'recover'", "'background'", 
                            "'cluster'", "'rep'", "'proc'", "'iter'", "'creator'", 
                            "'handler'", "':'", "'type'", "'('", "')'", 
                            "'returns'", "'yields'", "'signals'", "'transmit'", 
                            "'where'", "'has'", "'in'", "'$'", "'stable'", 
                            "':='", "'own'", "'@'", "'.'", "'fork'", "'seize'", 
                            "'do'", "'pause'", "'terminate'", "'coenter'", 
                            "'abort'", "'leave'", "'while'", "'return'", 
                            "'yield'", "'signal'", "'exit'", "'break'", 
                            "'continue'", "'begin'", "'resignal'", "'except'", 
                            "'enter'", "'topaction'", "'action'", "'foreach'", 
                            "'process'", "'for'", "'if'", "'then'", "'elseif'", 
                            "'else'", "'tagcase'", "'others'", "'tagtest'", 
                            "'tagwait'", "'tag'", "'wtag'", "'when'", "'*'", 
                            "'null'", "'node'", "'bool'", "'int'", "'real'", 
                            "'char'", "'string'", "'any'", "'image'", "'cvt'", 
                            "'sequence'", "'['", "']'", "'array'", "'atomic_array'", 
                            "'struct'", "'record'", "'atomic_record'", "'oneof'", 
                            "'variant'", "'atomic_variant'", "'proctype'", 
                            "'itertype'", "'creatortype'", "'handlertype'", 
                            "'mutex'", "'with'", "'~'", "'\\u2212'", "'**'", 
                            "'//'", "'/'", "'||'", "'+'", "'<'", "'<='", 
                            "'>='", "'>'", "'~<'", "'~<='", "'~='", "'~>='", 
                            "'~>'", "'&'", "'cand'", "'|'", "'cor'", "'nil'", 
                            "'true'", "'false'", "'self'", "'bind'", "'up'", 
                            "'down'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, "INT_LITERAL", "REAL_LITERAL", 
                             "CHAR_LITERAL", "STRING_LITERAL", "IDENTIFIER", 
                             "COMMENT", "WS" ];
    static ruleNames = [ "module", "equates_", "guardian", "cluster", "operation", 
                         "routine", "procedure", "iterator", "creator", 
                         "handler", "routine_body", "parms", "parm", "args", 
                         "decl", "returnz", "yields", "signals", "exception_", 
                         "opidn", "where", "restriction", "type_set", "oper_decl", 
                         "constant", "state_decl", "equate", "own_var", 
                         "statement", "enter_stmt", "coarm", "armtag", "for_stmt", 
                         "if_stmt", "tagcase_stmt", "tagtest_stmt", "tagwait_stmt", 
                         "tag_arm", "atag_arm", "tag_kind", "when_handler", 
                         "others_handler", "body", "type_spec", "field_spec", 
                         "reference", "actual_parm", "type_actual", "opbinding", 
                         "expression", "primaries", "primary", "call", "entities", 
                         "entity", "field", "bind_arg", "name", "idn" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = argusParser.ruleNames;
        this.literalNames = argusParser.literalNames;
        this.symbolicNames = argusParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 28:
    	    		return this.statement_sempred(localctx, predIndex);
    	case 45:
    	    		return this.reference_sempred(localctx, predIndex);
    	case 49:
    	    		return this.expression_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    statement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 2);
    		case 1:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    reference_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.precpred(this._ctx, 21);
    		case 4:
    			return this.precpred(this._ctx, 20);
    		case 5:
    			return this.precpred(this._ctx, 19);
    		case 6:
    			return this.precpred(this._ctx, 18);
    		case 7:
    			return this.precpred(this._ctx, 17);
    		case 8:
    			return this.precpred(this._ctx, 16);
    		case 9:
    			return this.precpred(this._ctx, 15);
    		case 10:
    			return this.precpred(this._ctx, 14);
    		case 11:
    			return this.precpred(this._ctx, 13);
    		case 12:
    			return this.precpred(this._ctx, 12);
    		case 13:
    			return this.precpred(this._ctx, 11);
    		case 14:
    			return this.precpred(this._ctx, 10);
    		case 15:
    			return this.precpred(this._ctx, 9);
    		case 16:
    			return this.precpred(this._ctx, 8);
    		case 17:
    			return this.precpred(this._ctx, 7);
    		case 18:
    			return this.precpred(this._ctx, 6);
    		case 19:
    			return this.precpred(this._ctx, 5);
    		case 20:
    			return this.precpred(this._ctx, 4);
    		case 21:
    			return this.precpred(this._ctx, 3);
    		case 22:
    			return this.precpred(this._ctx, 2);
    		case 23:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	module() {
	    let localctx = new ModuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, argusParser.RULE_module);
	    try {
	        this.state = 153;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 121;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 118;
	                    this.equate(); 
	                }
	                this.state = 123;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
	            }

	            this.state = 124;
	            this.equates_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 128;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,1,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 125;
	                    this.equate(); 
	                }
	                this.state = 130;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,1,this._ctx);
	            }

	            this.state = 131;
	            this.guardian();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 135;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,2,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 132;
	                    this.equate(); 
	                }
	                this.state = 137;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,2,this._ctx);
	            }

	            this.state = 138;
	            this.procedure();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 142;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 139;
	                    this.equate(); 
	                }
	                this.state = 144;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,3,this._ctx);
	            }

	            this.state = 145;
	            this.iterator();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 149;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 146;
	                    this.equate(); 
	                }
	                this.state = 151;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
	            }

	            this.state = 152;
	            this.cluster();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equates_() {
	    let localctx = new Equates_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, argusParser.RULE_equates_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 155;
	        this.idn();
	        this.state = 156;
	        this.match(argusParser.T__0);
	        this.state = 157;
	        this.match(argusParser.T__1);
	        this.state = 162;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        if(la_===1) {
	            this.state = 158;
	            this.parms();
	            this.state = 160;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===argusParser.T__23) {
	                this.state = 159;
	                this.where();
	            }


	        }
	        this.state = 167;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.IDENTIFIER) {
	            this.state = 164;
	            this.equate();
	            this.state = 169;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 170;
	        this.match(argusParser.T__2);
	        this.state = 171;
	        this.idn();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	guardian() {
	    let localctx = new GuardianContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, argusParser.RULE_guardian);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 173;
	        this.idn();
	        this.state = 174;
	        this.match(argusParser.T__0);
	        this.state = 175;
	        this.match(argusParser.T__3);
	        this.state = 177;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.IDENTIFIER) {
	            this.state = 176;
	            this.parms();
	        }

	        this.state = 179;
	        this.match(argusParser.T__4);
	        this.state = 180;
	        this.idn();
	        this.state = 185;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.T__5) {
	            this.state = 181;
	            this.match(argusParser.T__5);
	            this.state = 182;
	            this.idn();
	            this.state = 187;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 197;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.T__6) {
	            this.state = 188;
	            this.match(argusParser.T__6);
	            this.state = 189;
	            this.idn();
	            this.state = 194;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===argusParser.T__5) {
	                this.state = 190;
	                this.match(argusParser.T__5);
	                this.state = 191;
	                this.idn();
	                this.state = 196;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 200;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.T__23) {
	            this.state = 199;
	            this.where();
	        }

	        this.state = 205;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,14,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 202;
	                this.equate(); 
	            }
	            this.state = 207;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,14,this._ctx);
	        }

	        this.state = 211;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 208;
	                this.state_decl(); 
	            }
	            this.state = 213;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
	        }

	        this.state = 218;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.T__7) {
	            this.state = 214;
	            this.match(argusParser.T__7);
	            this.state = 215;
	            this.body();
	            this.state = 216;
	            this.match(argusParser.T__2);
	        }

	        this.state = 224;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.T__8) {
	            this.state = 220;
	            this.match(argusParser.T__8);
	            this.state = 221;
	            this.body();
	            this.state = 222;
	            this.match(argusParser.T__2);
	        }

	        this.state = 229;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,18,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 226;
	                this.operation(); 
	            }
	            this.state = 231;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,18,this._ctx);
	        }

	        this.state = 232;
	        this.creator();
	        this.state = 236;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.IDENTIFIER) {
	            this.state = 233;
	            this.operation();
	            this.state = 238;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 239;
	        this.match(argusParser.T__2);
	        this.state = 240;
	        this.idn();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cluster() {
	    let localctx = new ClusterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, argusParser.RULE_cluster);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 242;
	        this.idn();
	        this.state = 243;
	        this.match(argusParser.T__0);
	        this.state = 244;
	        this.match(argusParser.T__9);
	        this.state = 246;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.IDENTIFIER) {
	            this.state = 245;
	            this.parms();
	        }

	        this.state = 248;
	        this.match(argusParser.T__4);
	        this.state = 249;
	        this.opidn();
	        this.state = 254;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
	        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1+1) {
	                this.state = 250;
	                this.match(argusParser.T__5);
	                this.state = 251;
	                this.opidn(); 
	            }
	            this.state = 256;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
	        }

	        this.state = 258;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.T__23) {
	            this.state = 257;
	            this.where();
	        }

	        this.state = 263;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.IDENTIFIER) {
	            this.state = 260;
	            this.equate();
	            this.state = 265;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 266;
	        this.match(argusParser.T__10);
	        this.state = 267;
	        this.match(argusParser.T__0);
	        this.state = 268;
	        this.type_spec();
	        this.state = 272;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 269;
	                this.equate(); 
	            }
	            this.state = 274;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
	        }

	        this.state = 278;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.T__29) {
	            this.state = 275;
	            this.own_var();
	            this.state = 280;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 281;
	        this.routine();
	        this.state = 285;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.IDENTIFIER) {
	            this.state = 282;
	            this.routine();
	            this.state = 287;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 288;
	        this.match(argusParser.T__2);
	        this.state = 289;
	        this.idn();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operation() {
	    let localctx = new OperationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, argusParser.RULE_operation);
	    try {
	        this.state = 294;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 291;
	            this.creator();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 292;
	            this.handler();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 293;
	            this.routine();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	routine() {
	    let localctx = new RoutineContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, argusParser.RULE_routine);
	    try {
	        this.state = 298;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 296;
	            this.procedure();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 297;
	            this.iterator();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedure() {
	    let localctx = new ProcedureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, argusParser.RULE_procedure);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 300;
	        this.idn();
	        this.state = 301;
	        this.match(argusParser.T__0);
	        this.state = 302;
	        this.match(argusParser.T__11);
	        this.state = 304;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.IDENTIFIER) {
	            this.state = 303;
	            this.parms();
	        }

	        this.state = 306;
	        this.args();
	        this.state = 308;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.T__19) {
	            this.state = 307;
	            this.returnz();
	        }

	        this.state = 311;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.T__21) {
	            this.state = 310;
	            this.signals();
	        }

	        this.state = 314;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.T__23) {
	            this.state = 313;
	            this.where();
	        }

	        this.state = 316;
	        this.routine_body();
	        this.state = 317;
	        this.match(argusParser.T__2);
	        this.state = 318;
	        this.idn();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iterator() {
	    let localctx = new IteratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, argusParser.RULE_iterator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 320;
	        this.idn();
	        this.state = 321;
	        this.match(argusParser.T__0);
	        this.state = 322;
	        this.match(argusParser.T__12);
	        this.state = 324;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.IDENTIFIER) {
	            this.state = 323;
	            this.parms();
	        }

	        this.state = 326;
	        this.args();
	        this.state = 328;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.T__20) {
	            this.state = 327;
	            this.yields();
	        }

	        this.state = 331;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.T__21) {
	            this.state = 330;
	            this.signals();
	        }

	        this.state = 334;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.T__23) {
	            this.state = 333;
	            this.where();
	        }

	        this.state = 336;
	        this.routine_body();
	        this.state = 337;
	        this.match(argusParser.T__2);
	        this.state = 338;
	        this.idn();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	creator() {
	    let localctx = new CreatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, argusParser.RULE_creator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 340;
	        this.idn();
	        this.state = 341;
	        this.match(argusParser.T__0);
	        this.state = 342;
	        this.match(argusParser.T__13);
	        this.state = 343;
	        this.args();
	        this.state = 345;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.T__19) {
	            this.state = 344;
	            this.returnz();
	        }

	        this.state = 348;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.T__21) {
	            this.state = 347;
	            this.signals();
	        }

	        this.state = 350;
	        this.routine_body();
	        this.state = 351;
	        this.match(argusParser.T__2);
	        this.state = 352;
	        this.idn();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handler() {
	    let localctx = new HandlerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, argusParser.RULE_handler);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 354;
	        this.idn();
	        this.state = 355;
	        this.match(argusParser.T__0);
	        this.state = 356;
	        this.match(argusParser.T__14);
	        this.state = 357;
	        this.args();
	        this.state = 359;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.T__19) {
	            this.state = 358;
	            this.returnz();
	        }

	        this.state = 362;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.T__21) {
	            this.state = 361;
	            this.signals();
	        }

	        this.state = 364;
	        this.routine_body();
	        this.state = 365;
	        this.match(argusParser.T__2);
	        this.state = 366;
	        this.idn();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	routine_body() {
	    let localctx = new Routine_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, argusParser.RULE_routine_body);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 371;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 368;
	                this.equate(); 
	            }
	            this.state = 373;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
	        }

	        this.state = 377;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.T__29) {
	            this.state = 374;
	            this.own_var();
	            this.state = 379;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 383;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.T__10 || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (argusParser.T__32 - 33)) | (1 << (argusParser.T__33 - 33)) | (1 << (argusParser.T__35 - 33)) | (1 << (argusParser.T__36 - 33)) | (1 << (argusParser.T__37 - 33)) | (1 << (argusParser.T__38 - 33)) | (1 << (argusParser.T__39 - 33)) | (1 << (argusParser.T__40 - 33)) | (1 << (argusParser.T__41 - 33)) | (1 << (argusParser.T__42 - 33)) | (1 << (argusParser.T__43 - 33)) | (1 << (argusParser.T__44 - 33)) | (1 << (argusParser.T__45 - 33)) | (1 << (argusParser.T__46 - 33)) | (1 << (argusParser.T__47 - 33)) | (1 << (argusParser.T__50 - 33)) | (1 << (argusParser.T__55 - 33)) | (1 << (argusParser.T__56 - 33)) | (1 << (argusParser.T__60 - 33)) | (1 << (argusParser.T__62 - 33)) | (1 << (argusParser.T__63 - 33)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (argusParser.T__68 - 69)) | (1 << (argusParser.T__69 - 69)) | (1 << (argusParser.T__70 - 69)) | (1 << (argusParser.T__71 - 69)) | (1 << (argusParser.T__72 - 69)) | (1 << (argusParser.T__73 - 69)) | (1 << (argusParser.T__74 - 69)) | (1 << (argusParser.T__75 - 69)) | (1 << (argusParser.T__76 - 69)) | (1 << (argusParser.T__77 - 69)) | (1 << (argusParser.T__78 - 69)) | (1 << (argusParser.T__81 - 69)) | (1 << (argusParser.T__82 - 69)) | (1 << (argusParser.T__83 - 69)) | (1 << (argusParser.T__84 - 69)) | (1 << (argusParser.T__85 - 69)) | (1 << (argusParser.T__86 - 69)) | (1 << (argusParser.T__87 - 69)) | (1 << (argusParser.T__88 - 69)) | (1 << (argusParser.T__89 - 69)) | (1 << (argusParser.T__90 - 69)) | (1 << (argusParser.T__91 - 69)) | (1 << (argusParser.T__92 - 69)) | (1 << (argusParser.T__93 - 69)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (argusParser.T__115 - 116)) | (1 << (argusParser.T__116 - 116)) | (1 << (argusParser.T__117 - 116)) | (1 << (argusParser.T__118 - 116)) | (1 << (argusParser.T__119 - 116)) | (1 << (argusParser.T__120 - 116)) | (1 << (argusParser.T__121 - 116)) | (1 << (argusParser.INT_LITERAL - 116)) | (1 << (argusParser.REAL_LITERAL - 116)) | (1 << (argusParser.CHAR_LITERAL - 116)) | (1 << (argusParser.STRING_LITERAL - 116)) | (1 << (argusParser.IDENTIFIER - 116)))) !== 0)) {
	            this.state = 380;
	            this.statement(0);
	            this.state = 385;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parms() {
	    let localctx = new ParmsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, argusParser.RULE_parms);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 386;
	        this.parm();
	        this.state = 391;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.T__5) {
	            this.state = 387;
	            this.match(argusParser.T__5);
	            this.state = 388;
	            this.parm();
	            this.state = 393;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parm() {
	    let localctx = new ParmContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, argusParser.RULE_parm);
	    var _la = 0; // Token type
	    try {
	        this.state = 416;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 394;
	            this.idn();
	            this.state = 399;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===argusParser.T__5) {
	                this.state = 395;
	                this.match(argusParser.T__5);
	                this.state = 396;
	                this.idn();
	                this.state = 401;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 402;
	            this.match(argusParser.T__15);
	            this.state = 403;
	            this.match(argusParser.T__16);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 405;
	            this.idn();
	            this.state = 410;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===argusParser.T__5) {
	                this.state = 406;
	                this.match(argusParser.T__5);
	                this.state = 407;
	                this.idn();
	                this.state = 412;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 413;
	            this.match(argusParser.T__15);
	            this.state = 414;
	            this.type_spec();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	args() {
	    let localctx = new ArgsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, argusParser.RULE_args);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 418;
	        this.match(argusParser.T__17);
	        this.state = 429;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.IDENTIFIER) {
	            this.state = 419;
	            this.decl();
	            this.state = 424;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===argusParser.T__5) {
	                this.state = 420;
	                this.match(argusParser.T__5);
	                this.state = 421;
	                this.decl();
	                this.state = 426;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 431;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 432;
	        this.match(argusParser.T__18);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decl() {
	    let localctx = new DeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, argusParser.RULE_decl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 434;
	        this.idn();
	        this.state = 439;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.T__5) {
	            this.state = 435;
	            this.match(argusParser.T__5);
	            this.state = 436;
	            this.idn();
	            this.state = 441;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 442;
	        this.match(argusParser.T__15);
	        this.state = 443;
	        this.type_spec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnz() {
	    let localctx = new ReturnzContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, argusParser.RULE_returnz);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 445;
	        this.match(argusParser.T__19);
	        this.state = 446;
	        this.match(argusParser.T__17);
	        this.state = 447;
	        this.type_spec();
	        this.state = 452;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.T__5) {
	            this.state = 448;
	            this.match(argusParser.T__5);
	            this.state = 449;
	            this.type_spec();
	            this.state = 454;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 455;
	        this.match(argusParser.T__18);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yields() {
	    let localctx = new YieldsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, argusParser.RULE_yields);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 457;
	        this.match(argusParser.T__20);
	        this.state = 458;
	        this.match(argusParser.T__17);
	        this.state = 459;
	        this.type_spec();
	        this.state = 464;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.T__5) {
	            this.state = 460;
	            this.match(argusParser.T__5);
	            this.state = 461;
	            this.type_spec();
	            this.state = 466;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 467;
	        this.match(argusParser.T__18);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signals() {
	    let localctx = new SignalsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, argusParser.RULE_signals);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 469;
	        this.match(argusParser.T__21);
	        this.state = 470;
	        this.match(argusParser.T__17);
	        this.state = 471;
	        this.exception_();
	        this.state = 476;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.T__5) {
	            this.state = 472;
	            this.match(argusParser.T__5);
	            this.state = 473;
	            this.exception_();
	            this.state = 478;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 479;
	        this.match(argusParser.T__18);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exception_() {
	    let localctx = new Exception_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, argusParser.RULE_exception_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 481;
	        this.name();
	        this.state = 490;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.T__10 || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (argusParser.T__68 - 69)) | (1 << (argusParser.T__69 - 69)) | (1 << (argusParser.T__70 - 69)) | (1 << (argusParser.T__71 - 69)) | (1 << (argusParser.T__72 - 69)) | (1 << (argusParser.T__73 - 69)) | (1 << (argusParser.T__74 - 69)) | (1 << (argusParser.T__75 - 69)) | (1 << (argusParser.T__76 - 69)) | (1 << (argusParser.T__77 - 69)) | (1 << (argusParser.T__78 - 69)) | (1 << (argusParser.T__81 - 69)) | (1 << (argusParser.T__82 - 69)) | (1 << (argusParser.T__83 - 69)) | (1 << (argusParser.T__84 - 69)) | (1 << (argusParser.T__85 - 69)) | (1 << (argusParser.T__86 - 69)) | (1 << (argusParser.T__87 - 69)) | (1 << (argusParser.T__88 - 69)) | (1 << (argusParser.T__89 - 69)) | (1 << (argusParser.T__90 - 69)) | (1 << (argusParser.T__91 - 69)) | (1 << (argusParser.T__92 - 69)) | (1 << (argusParser.T__93 - 69)))) !== 0) || _la===argusParser.IDENTIFIER) {
	            this.state = 482;
	            this.type_spec();
	            this.state = 487;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,54,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 483;
	                    this.match(argusParser.T__5);
	                    this.state = 484;
	                    this.type_spec(); 
	                }
	                this.state = 489;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,54,this._ctx);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opidn() {
	    let localctx = new OpidnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, argusParser.RULE_opidn);
	    try {
	        this.state = 494;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case argusParser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 492;
	            this.idn();
	            break;
	        case argusParser.T__22:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 493;
	            this.match(argusParser.T__22);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	where() {
	    let localctx = new WhereContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, argusParser.RULE_where);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 496;
	        this.match(argusParser.T__23);
	        this.state = 497;
	        this.restriction();
	        this.state = 502;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.T__5) {
	            this.state = 498;
	            this.match(argusParser.T__5);
	            this.state = 499;
	            this.restriction();
	            this.state = 504;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	restriction() {
	    let localctx = new RestrictionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, argusParser.RULE_restriction);
	    try {
	        this.state = 519;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 505;
	            this.idn();
	            this.state = 506;
	            this.match(argusParser.T__24);
	            this.state = 507;
	            this.oper_decl();
	            this.state = 512;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,58,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 508;
	                    this.match(argusParser.T__5);
	                    this.state = 509;
	                    this.oper_decl(); 
	                }
	                this.state = 514;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,58,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 515;
	            this.idn();
	            this.state = 516;
	            this.match(argusParser.T__25);
	            this.state = 517;
	            this.type_set();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_set() {
	    let localctx = new Type_setContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, argusParser.RULE_type_set);
	    try {
	        this.state = 548;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 540;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,63,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 538;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 521;
	                        this.idn();
	                        break;

	                    case 2:
	                        this.state = 522;
	                        this.idn();
	                        this.state = 523;
	                        this.match(argusParser.T__24);
	                        this.state = 524;
	                        this.oper_decl();
	                        this.state = 529;
	                        this._errHandler.sync(this);
	                        var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
	                        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                            if(_alt===1) {
	                                this.state = 525;
	                                this.match(argusParser.T__5);
	                                this.state = 526;
	                                this.oper_decl(); 
	                            }
	                            this.state = 531;
	                            this._errHandler.sync(this);
	                            _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
	                        }

	                        this.state = 535;
	                        this._errHandler.sync(this);
	                        var _alt = this._interp.adaptivePredict(this._input,61,this._ctx)
	                        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                            if(_alt===1) {
	                                this.state = 532;
	                                this.equate(); 
	                            }
	                            this.state = 537;
	                            this._errHandler.sync(this);
	                            _alt = this._interp.adaptivePredict(this._input,61,this._ctx);
	                        }

	                        break;

	                    } 
	                }
	                this.state = 542;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,63,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 543;
	            this.idn();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 544;
	            this.reference(0);
	            this.state = 545;
	            this.match(argusParser.T__26);
	            this.state = 546;
	            this.name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oper_decl() {
	    let localctx = new Oper_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, argusParser.RULE_oper_decl);
	    var _la = 0; // Token type
	    try {
	        this.state = 562;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case argusParser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 550;
	            this.name();
	            this.state = 555;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===argusParser.T__5) {
	                this.state = 551;
	                this.match(argusParser.T__5);
	                this.state = 552;
	                this.name();
	                this.state = 557;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 558;
	            this.match(argusParser.T__15);
	            this.state = 559;
	            this.type_spec();
	            break;
	        case argusParser.T__22:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 561;
	            this.match(argusParser.T__22);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant() {
	    let localctx = new ConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, argusParser.RULE_constant);
	    try {
	        this.state = 566;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 564;
	            this.expression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 565;
	            this.type_spec();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	state_decl() {
	    let localctx = new State_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, argusParser.RULE_state_decl);
	    var _la = 0; // Token type
	    try {
	        this.state = 595;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 569;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===argusParser.T__27) {
	                this.state = 568;
	                this.match(argusParser.T__27);
	            }

	            this.state = 571;
	            this.decl();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 573;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===argusParser.T__27) {
	                this.state = 572;
	                this.match(argusParser.T__27);
	            }

	            this.state = 575;
	            this.idn();
	            this.state = 576;
	            this.match(argusParser.T__15);
	            this.state = 577;
	            this.type_spec();
	            this.state = 578;
	            this.match(argusParser.T__28);
	            this.state = 579;
	            this.expression(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 582;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===argusParser.T__27) {
	                this.state = 581;
	                this.match(argusParser.T__27);
	            }

	            this.state = 584;
	            this.decl();
	            this.state = 589;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===argusParser.T__5) {
	                this.state = 585;
	                this.match(argusParser.T__5);
	                this.state = 586;
	                this.decl();
	                this.state = 591;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 592;
	            this.match(argusParser.T__28);
	            this.state = 593;
	            this.call();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equate() {
	    let localctx = new EquateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, argusParser.RULE_equate);
	    try {
	        this.state = 609;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 597;
	            this.idn();
	            this.state = 598;
	            this.match(argusParser.T__0);
	            this.state = 599;
	            this.constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 601;
	            this.idn();
	            this.state = 602;
	            this.match(argusParser.T__0);
	            this.state = 603;
	            this.type_set();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 605;
	            this.idn();
	            this.state = 606;
	            this.match(argusParser.T__0);
	            this.state = 607;
	            this.reference(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	own_var() {
	    let localctx = new Own_varContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, argusParser.RULE_own_var);
	    var _la = 0; // Token type
	    try {
	        this.state = 635;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 611;
	            this.match(argusParser.T__29);
	            this.state = 612;
	            this.decl();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 613;
	            this.match(argusParser.T__29);
	            this.state = 614;
	            this.idn();
	            this.state = 615;
	            this.match(argusParser.T__15);
	            this.state = 616;
	            this.type_spec();
	            this.state = 617;
	            this.match(argusParser.T__28);
	            this.state = 618;
	            this.expression(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 620;
	            this.match(argusParser.T__29);
	            this.state = 621;
	            this.decl();
	            this.state = 626;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===argusParser.T__5) {
	                this.state = 622;
	                this.match(argusParser.T__5);
	                this.state = 623;
	                this.decl();
	                this.state = 628;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 629;
	            this.match(argusParser.T__28);
	            this.state = 630;
	            this.call();
	            this.state = 633;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===argusParser.T__30) {
	                this.state = 631;
	                this.match(argusParser.T__30);
	                this.state = 632;
	                this.primaries();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	statement(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new StatementContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 56;
	    this.enterRecursionRule(localctx, 56, argusParser.RULE_statement, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 811;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 638;
	            this.decl();
	            break;

	        case 2:
	            this.state = 639;
	            this.idn();
	            this.state = 640;
	            this.match(argusParser.T__15);
	            this.state = 641;
	            this.type_spec();
	            this.state = 642;
	            this.match(argusParser.T__28);
	            this.state = 643;
	            this.expression(0);
	            break;

	        case 3:
	            this.state = 645;
	            this.decl();
	            this.state = 650;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===argusParser.T__5) {
	                this.state = 646;
	                this.match(argusParser.T__5);
	                this.state = 647;
	                this.decl();
	                this.state = 652;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 653;
	            this.match(argusParser.T__28);
	            this.state = 654;
	            this.call();
	            this.state = 657;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	            if(la_===1) {
	                this.state = 655;
	                this.match(argusParser.T__30);
	                this.state = 656;
	                this.primaries();

	            }
	            break;

	        case 4:
	            this.state = 659;
	            this.idn();
	            this.state = 664;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===argusParser.T__5) {
	                this.state = 660;
	                this.match(argusParser.T__5);
	                this.state = 661;
	                this.idn();
	                this.state = 666;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 667;
	            this.match(argusParser.T__28);
	            this.state = 668;
	            this.call();
	            this.state = 671;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	            if(la_===1) {
	                this.state = 669;
	                this.match(argusParser.T__30);
	                this.state = 670;
	                this.primaries();

	            }
	            break;

	        case 5:
	            this.state = 673;
	            this.idn();
	            this.state = 678;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===argusParser.T__5) {
	                this.state = 674;
	                this.match(argusParser.T__5);
	                this.state = 675;
	                this.idn();
	                this.state = 680;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 681;
	            this.match(argusParser.T__28);
	            this.state = 682;
	            this.expression(0);
	            this.state = 687;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,82,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 683;
	                    this.match(argusParser.T__5);
	                    this.state = 684;
	                    this.expression(0); 
	                }
	                this.state = 689;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,82,this._ctx);
	            }

	            break;

	        case 6:
	            this.state = 690;
	            this.primaries();
	            this.state = 691;
	            this.match(argusParser.T__31);
	            this.state = 692;
	            this.name();
	            this.state = 693;
	            this.match(argusParser.T__28);
	            this.state = 694;
	            this.expression(0);
	            break;

	        case 7:
	            this.state = 696;
	            this.primaries();
	            this.state = 698;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===argusParser.T__10 || _la===argusParser.T__17 || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (argusParser.T__68 - 69)) | (1 << (argusParser.T__69 - 69)) | (1 << (argusParser.T__70 - 69)) | (1 << (argusParser.T__71 - 69)) | (1 << (argusParser.T__72 - 69)) | (1 << (argusParser.T__73 - 69)) | (1 << (argusParser.T__74 - 69)) | (1 << (argusParser.T__75 - 69)) | (1 << (argusParser.T__76 - 69)) | (1 << (argusParser.T__77 - 69)) | (1 << (argusParser.T__78 - 69)) | (1 << (argusParser.T__81 - 69)) | (1 << (argusParser.T__82 - 69)) | (1 << (argusParser.T__83 - 69)) | (1 << (argusParser.T__84 - 69)) | (1 << (argusParser.T__85 - 69)) | (1 << (argusParser.T__86 - 69)) | (1 << (argusParser.T__87 - 69)) | (1 << (argusParser.T__88 - 69)) | (1 << (argusParser.T__89 - 69)) | (1 << (argusParser.T__90 - 69)) | (1 << (argusParser.T__91 - 69)) | (1 << (argusParser.T__92 - 69)) | (1 << (argusParser.T__93 - 69)) | (1 << (argusParser.T__95 - 69)) | (1 << (argusParser.T__96 - 69)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (argusParser.T__115 - 116)) | (1 << (argusParser.T__116 - 116)) | (1 << (argusParser.T__117 - 116)) | (1 << (argusParser.T__118 - 116)) | (1 << (argusParser.T__119 - 116)) | (1 << (argusParser.T__120 - 116)) | (1 << (argusParser.T__121 - 116)) | (1 << (argusParser.INT_LITERAL - 116)) | (1 << (argusParser.REAL_LITERAL - 116)) | (1 << (argusParser.CHAR_LITERAL - 116)) | (1 << (argusParser.STRING_LITERAL - 116)) | (1 << (argusParser.IDENTIFIER - 116)))) !== 0)) {
	                this.state = 697;
	                this.expression(0);
	            }

	            this.state = 700;
	            this.match(argusParser.T__28);
	            this.state = 701;
	            this.expression(0);
	            break;

	        case 8:
	            this.state = 703;
	            this.call();
	            this.state = 706;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
	            if(la_===1) {
	                this.state = 704;
	                this.match(argusParser.T__30);
	                this.state = 705;
	                this.primaries();

	            }
	            break;

	        case 9:
	            this.state = 708;
	            this.match(argusParser.T__32);
	            this.state = 709;
	            this.call();
	            break;

	        case 10:
	            this.state = 710;
	            this.match(argusParser.T__33);
	            this.state = 711;
	            this.expression(0);
	            this.state = 712;
	            this.match(argusParser.T__34);
	            this.state = 713;
	            this.body();
	            this.state = 714;
	            this.match(argusParser.T__2);
	            break;

	        case 11:
	            this.state = 716;
	            this.match(argusParser.T__35);
	            break;

	        case 12:
	            this.state = 717;
	            this.match(argusParser.T__36);
	            break;

	        case 13:
	            this.state = 718;
	            this.enter_stmt();
	            break;

	        case 14:
	            this.state = 719;
	            this.match(argusParser.T__37);
	            this.state = 720;
	            this.coarm();
	            this.state = 724;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (argusParser.T__51 - 52)) | (1 << (argusParser.T__52 - 52)) | (1 << (argusParser.T__54 - 52)))) !== 0)) {
	                this.state = 721;
	                this.coarm();
	                this.state = 726;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 727;
	            this.match(argusParser.T__2);
	            break;

	        case 15:
	            this.state = 730;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===argusParser.T__38) {
	                this.state = 729;
	                this.match(argusParser.T__38);
	            }

	            this.state = 732;
	            this.match(argusParser.T__39);
	            break;

	        case 16:
	            this.state = 733;
	            this.match(argusParser.T__40);
	            this.state = 734;
	            this.expression(0);
	            this.state = 735;
	            this.match(argusParser.T__34);
	            this.state = 736;
	            this.body();
	            this.state = 737;
	            this.match(argusParser.T__2);
	            break;

	        case 17:
	            this.state = 739;
	            this.for_stmt();
	            break;

	        case 18:
	            this.state = 740;
	            this.if_stmt();
	            break;

	        case 19:
	            this.state = 741;
	            this.tagcase_stmt();
	            break;

	        case 20:
	            this.state = 742;
	            this.tagtest_stmt();
	            break;

	        case 21:
	            this.state = 743;
	            this.tagwait_stmt();
	            break;

	        case 22:
	            this.state = 745;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===argusParser.T__38) {
	                this.state = 744;
	                this.match(argusParser.T__38);
	            }

	            this.state = 747;
	            this.match(argusParser.T__41);
	            this.state = 756;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	            if(la_===1) {
	                this.state = 748;
	                this.expression(0);
	                this.state = 753;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,88,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 749;
	                        this.match(argusParser.T__5);
	                        this.state = 750;
	                        this.expression(0); 
	                    }
	                    this.state = 755;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,88,this._ctx);
	                }


	            }
	            break;

	        case 23:
	            this.state = 758;
	            this.match(argusParser.T__42);
	            this.state = 767;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	            if(la_===1) {
	                this.state = 759;
	                this.expression(0);
	                this.state = 764;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 760;
	                        this.match(argusParser.T__5);
	                        this.state = 761;
	                        this.expression(0); 
	                    }
	                    this.state = 766;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
	                }


	            }
	            break;

	        case 24:
	            this.state = 770;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===argusParser.T__38) {
	                this.state = 769;
	                this.match(argusParser.T__38);
	            }

	            this.state = 772;
	            this.match(argusParser.T__43);
	            this.state = 773;
	            this.name();
	            this.state = 782;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	            if(la_===1) {
	                this.state = 774;
	                this.expression(0);
	                this.state = 779;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,93,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 775;
	                        this.match(argusParser.T__5);
	                        this.state = 776;
	                        this.expression(0); 
	                    }
	                    this.state = 781;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,93,this._ctx);
	                }


	            }
	            break;

	        case 25:
	            this.state = 785;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===argusParser.T__38) {
	                this.state = 784;
	                this.match(argusParser.T__38);
	            }

	            this.state = 787;
	            this.match(argusParser.T__44);
	            this.state = 788;
	            this.name();
	            this.state = 797;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
	            if(la_===1) {
	                this.state = 789;
	                this.expression(0);
	                this.state = 794;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,96,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 790;
	                        this.match(argusParser.T__5);
	                        this.state = 791;
	                        this.expression(0); 
	                    }
	                    this.state = 796;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,96,this._ctx);
	                }


	            }
	            break;

	        case 26:
	            this.state = 800;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===argusParser.T__38) {
	                this.state = 799;
	                this.match(argusParser.T__38);
	            }

	            this.state = 802;
	            this.match(argusParser.T__45);
	            break;

	        case 27:
	            this.state = 804;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===argusParser.T__38) {
	                this.state = 803;
	                this.match(argusParser.T__38);
	            }

	            this.state = 806;
	            this.match(argusParser.T__46);
	            break;

	        case 28:
	            this.state = 807;
	            this.match(argusParser.T__47);
	            this.state = 808;
	            this.body();
	            this.state = 809;
	            this.match(argusParser.T__2);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 840;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,106,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 838;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new StatementContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, argusParser.RULE_statement);
	                    this.state = 813;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 815;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===argusParser.T__38) {
	                        this.state = 814;
	                        this.match(argusParser.T__38);
	                    }

	                    this.state = 817;
	                    this.match(argusParser.T__48);
	                    this.state = 818;
	                    this.name();
	                    this.state = 823;
	                    this._errHandler.sync(this);
	                    var _alt = this._interp.adaptivePredict(this._input,102,this._ctx)
	                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                        if(_alt===1) {
	                            this.state = 819;
	                            this.match(argusParser.T__5);
	                            this.state = 820;
	                            this.name(); 
	                        }
	                        this.state = 825;
	                        this._errHandler.sync(this);
	                        _alt = this._interp.adaptivePredict(this._input,102,this._ctx);
	                    }

	                    break;

	                case 2:
	                    localctx = new StatementContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, argusParser.RULE_statement);
	                    this.state = 826;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 827;
	                    this.match(argusParser.T__49);
	                    this.state = 831;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===argusParser.T__66) {
	                        this.state = 828;
	                        this.when_handler();
	                        this.state = 833;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 835;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===argusParser.T__61) {
	                        this.state = 834;
	                        this.others_handler();
	                    }

	                    this.state = 837;
	                    this.match(argusParser.T__2);
	                    break;

	                } 
	            }
	            this.state = 842;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,106,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	enter_stmt() {
	    let localctx = new Enter_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, argusParser.RULE_enter_stmt);
	    try {
	        this.state = 853;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 843;
	            this.match(argusParser.T__50);
	            this.state = 844;
	            this.match(argusParser.T__51);
	            this.state = 845;
	            this.body();
	            this.state = 846;
	            this.match(argusParser.T__2);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 848;
	            this.match(argusParser.T__50);
	            this.state = 849;
	            this.match(argusParser.T__52);
	            this.state = 850;
	            this.body();
	            this.state = 851;
	            this.match(argusParser.T__2);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	coarm() {
	    let localctx = new CoarmContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, argusParser.RULE_coarm);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 855;
	        this.armtag();
	        this.state = 870;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.T__53) {
	            this.state = 856;
	            this.match(argusParser.T__53);
	            this.state = 857;
	            this.decl();
	            this.state = 862;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===argusParser.T__5) {
	                this.state = 858;
	                this.match(argusParser.T__5);
	                this.state = 859;
	                this.decl();
	                this.state = 864;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 865;
	            this.match(argusParser.T__25);
	            this.state = 866;
	            this.call();
	            this.state = 872;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 873;
	        this.body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	armtag() {
	    let localctx = new ArmtagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, argusParser.RULE_armtag);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 875;
	        _la = this._input.LA(1);
	        if(!(((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (argusParser.T__51 - 52)) | (1 << (argusParser.T__52 - 52)) | (1 << (argusParser.T__54 - 52)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_stmt() {
	    let localctx = new For_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, argusParser.RULE_for_stmt);
	    var _la = 0; // Token type
	    try {
	        this.state = 907;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 877;
	            this.match(argusParser.T__55);
	            this.state = 878;
	            this.decl();
	            this.state = 883;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===argusParser.T__5) {
	                this.state = 879;
	                this.match(argusParser.T__5);
	                this.state = 880;
	                this.decl();
	                this.state = 885;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 886;
	            this.match(argusParser.T__25);
	            this.state = 887;
	            this.call();
	            this.state = 888;
	            this.match(argusParser.T__34);
	            this.state = 889;
	            this.body();
	            this.state = 890;
	            this.match(argusParser.T__2);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 892;
	            this.match(argusParser.T__55);
	            this.state = 893;
	            this.idn();
	            this.state = 898;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===argusParser.T__5) {
	                this.state = 894;
	                this.match(argusParser.T__5);
	                this.state = 895;
	                this.idn();
	                this.state = 900;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 901;
	            this.match(argusParser.T__25);
	            this.state = 902;
	            this.call();
	            this.state = 903;
	            this.match(argusParser.T__34);
	            this.state = 904;
	            this.body();
	            this.state = 905;
	            this.match(argusParser.T__2);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_stmt() {
	    let localctx = new If_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, argusParser.RULE_if_stmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 909;
	        this.match(argusParser.T__56);
	        this.state = 910;
	        this.expression(0);
	        this.state = 911;
	        this.match(argusParser.T__57);
	        this.state = 912;
	        this.body();
	        this.state = 920;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.T__58) {
	            this.state = 913;
	            this.match(argusParser.T__58);
	            this.state = 914;
	            this.expression(0);
	            this.state = 915;
	            this.match(argusParser.T__57);
	            this.state = 916;
	            this.body();
	            this.state = 922;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 925;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.T__59) {
	            this.state = 923;
	            this.match(argusParser.T__59);
	            this.state = 924;
	            this.body();
	        }

	        this.state = 927;
	        this.match(argusParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tagcase_stmt() {
	    let localctx = new Tagcase_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, argusParser.RULE_tagcase_stmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 929;
	        this.match(argusParser.T__60);
	        this.state = 930;
	        this.expression(0);
	        this.state = 931;
	        this.tag_arm();
	        this.state = 935;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.T__64) {
	            this.state = 932;
	            this.tag_arm();
	            this.state = 937;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 941;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.T__61) {
	            this.state = 938;
	            this.match(argusParser.T__61);
	            this.state = 939;
	            this.match(argusParser.T__15);
	            this.state = 940;
	            this.body();
	        }

	        this.state = 943;
	        this.match(argusParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tagtest_stmt() {
	    let localctx = new Tagtest_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, argusParser.RULE_tagtest_stmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 945;
	        this.match(argusParser.T__62);
	        this.state = 946;
	        this.expression(0);
	        this.state = 947;
	        this.atag_arm();
	        this.state = 951;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.T__64 || _la===argusParser.T__65) {
	            this.state = 948;
	            this.atag_arm();
	            this.state = 953;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 957;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.T__61) {
	            this.state = 954;
	            this.match(argusParser.T__61);
	            this.state = 955;
	            this.match(argusParser.T__15);
	            this.state = 956;
	            this.body();
	        }

	        this.state = 959;
	        this.match(argusParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tagwait_stmt() {
	    let localctx = new Tagwait_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, argusParser.RULE_tagwait_stmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 961;
	        this.match(argusParser.T__63);
	        this.state = 962;
	        this.expression(0);
	        this.state = 963;
	        this.atag_arm();
	        this.state = 967;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.T__64 || _la===argusParser.T__65) {
	            this.state = 964;
	            this.atag_arm();
	            this.state = 969;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 970;
	        this.match(argusParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tag_arm() {
	    let localctx = new Tag_armContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, argusParser.RULE_tag_arm);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 972;
	        this.match(argusParser.T__64);
	        this.state = 973;
	        this.name();
	        this.state = 978;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.T__5) {
	            this.state = 974;
	            this.match(argusParser.T__5);
	            this.state = 975;
	            this.name();
	            this.state = 980;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 985;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.IDENTIFIER) {
	            this.state = 981;
	            this.idn();
	            this.state = 982;
	            this.match(argusParser.T__15);
	            this.state = 983;
	            this.type_spec();
	        }

	        this.state = 987;
	        this.match(argusParser.T__15);
	        this.state = 988;
	        this.body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atag_arm() {
	    let localctx = new Atag_armContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, argusParser.RULE_atag_arm);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 990;
	        this.tag_kind();
	        this.state = 991;
	        this.name();
	        this.state = 996;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.T__5) {
	            this.state = 992;
	            this.match(argusParser.T__5);
	            this.state = 993;
	            this.name();
	            this.state = 998;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1005;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.IDENTIFIER) {
	            this.state = 999;
	            this.idn();
	            this.state = 1000;
	            this.match(argusParser.T__15);
	            this.state = 1001;
	            this.type_spec();
	            this.state = 1007;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1008;
	        this.match(argusParser.T__15);
	        this.state = 1009;
	        this.body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tag_kind() {
	    let localctx = new Tag_kindContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, argusParser.RULE_tag_kind);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1011;
	        _la = this._input.LA(1);
	        if(!(_la===argusParser.T__64 || _la===argusParser.T__65)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	when_handler() {
	    let localctx = new When_handlerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, argusParser.RULE_when_handler);
	    var _la = 0; // Token type
	    try {
	        this.state = 1053;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1013;
	            this.match(argusParser.T__66);
	            this.state = 1014;
	            this.name();
	            this.state = 1019;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===argusParser.T__5) {
	                this.state = 1015;
	                this.match(argusParser.T__5);
	                this.state = 1016;
	                this.name();
	                this.state = 1021;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1032;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===argusParser.IDENTIFIER) {
	                this.state = 1022;
	                this.decl();
	                this.state = 1027;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===argusParser.T__5) {
	                    this.state = 1023;
	                    this.match(argusParser.T__5);
	                    this.state = 1024;
	                    this.decl();
	                    this.state = 1029;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1034;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1035;
	            this.match(argusParser.T__15);
	            this.state = 1036;
	            this.body();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1038;
	            this.match(argusParser.T__66);
	            this.state = 1039;
	            this.name();
	            this.state = 1044;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===argusParser.T__5) {
	                this.state = 1040;
	                this.match(argusParser.T__5);
	                this.state = 1041;
	                this.name();
	                this.state = 1046;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1047;
	            this.match(argusParser.T__17);
	            this.state = 1048;
	            this.match(argusParser.T__67);
	            this.state = 1049;
	            this.match(argusParser.T__18);
	            this.state = 1050;
	            this.match(argusParser.T__15);
	            this.state = 1051;
	            this.body();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	others_handler() {
	    let localctx = new Others_handlerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, argusParser.RULE_others_handler);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1055;
	        this.match(argusParser.T__61);
	        this.state = 1062;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.IDENTIFIER) {
	            this.state = 1056;
	            this.idn();
	            this.state = 1057;
	            this.match(argusParser.T__15);
	            this.state = 1058;
	            this.type_spec();
	            this.state = 1064;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1065;
	        this.match(argusParser.T__15);
	        this.state = 1066;
	        this.body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	body() {
	    let localctx = new BodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, argusParser.RULE_body);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1071;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,130,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1068;
	                this.equate(); 
	            }
	            this.state = 1073;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,130,this._ctx);
	        }

	        this.state = 1077;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.T__10 || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (argusParser.T__32 - 33)) | (1 << (argusParser.T__33 - 33)) | (1 << (argusParser.T__35 - 33)) | (1 << (argusParser.T__36 - 33)) | (1 << (argusParser.T__37 - 33)) | (1 << (argusParser.T__38 - 33)) | (1 << (argusParser.T__39 - 33)) | (1 << (argusParser.T__40 - 33)) | (1 << (argusParser.T__41 - 33)) | (1 << (argusParser.T__42 - 33)) | (1 << (argusParser.T__43 - 33)) | (1 << (argusParser.T__44 - 33)) | (1 << (argusParser.T__45 - 33)) | (1 << (argusParser.T__46 - 33)) | (1 << (argusParser.T__47 - 33)) | (1 << (argusParser.T__50 - 33)) | (1 << (argusParser.T__55 - 33)) | (1 << (argusParser.T__56 - 33)) | (1 << (argusParser.T__60 - 33)) | (1 << (argusParser.T__62 - 33)) | (1 << (argusParser.T__63 - 33)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (argusParser.T__68 - 69)) | (1 << (argusParser.T__69 - 69)) | (1 << (argusParser.T__70 - 69)) | (1 << (argusParser.T__71 - 69)) | (1 << (argusParser.T__72 - 69)) | (1 << (argusParser.T__73 - 69)) | (1 << (argusParser.T__74 - 69)) | (1 << (argusParser.T__75 - 69)) | (1 << (argusParser.T__76 - 69)) | (1 << (argusParser.T__77 - 69)) | (1 << (argusParser.T__78 - 69)) | (1 << (argusParser.T__81 - 69)) | (1 << (argusParser.T__82 - 69)) | (1 << (argusParser.T__83 - 69)) | (1 << (argusParser.T__84 - 69)) | (1 << (argusParser.T__85 - 69)) | (1 << (argusParser.T__86 - 69)) | (1 << (argusParser.T__87 - 69)) | (1 << (argusParser.T__88 - 69)) | (1 << (argusParser.T__89 - 69)) | (1 << (argusParser.T__90 - 69)) | (1 << (argusParser.T__91 - 69)) | (1 << (argusParser.T__92 - 69)) | (1 << (argusParser.T__93 - 69)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (argusParser.T__115 - 116)) | (1 << (argusParser.T__116 - 116)) | (1 << (argusParser.T__117 - 116)) | (1 << (argusParser.T__118 - 116)) | (1 << (argusParser.T__119 - 116)) | (1 << (argusParser.T__120 - 116)) | (1 << (argusParser.T__121 - 116)) | (1 << (argusParser.INT_LITERAL - 116)) | (1 << (argusParser.REAL_LITERAL - 116)) | (1 << (argusParser.CHAR_LITERAL - 116)) | (1 << (argusParser.STRING_LITERAL - 116)) | (1 << (argusParser.IDENTIFIER - 116)))) !== 0)) {
	            this.state = 1074;
	            this.statement(0);
	            this.state = 1079;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_spec() {
	    let localctx = new Type_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, argusParser.RULE_type_spec);
	    var _la = 0; // Token type
	    try {
	        this.state = 1252;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case argusParser.T__68:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1080;
	            this.match(argusParser.T__68);
	            break;
	        case argusParser.T__69:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1081;
	            this.match(argusParser.T__69);
	            break;
	        case argusParser.T__70:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1082;
	            this.match(argusParser.T__70);
	            break;
	        case argusParser.T__71:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1083;
	            this.match(argusParser.T__71);
	            break;
	        case argusParser.T__72:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1084;
	            this.match(argusParser.T__72);
	            break;
	        case argusParser.T__73:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1085;
	            this.match(argusParser.T__73);
	            break;
	        case argusParser.T__74:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1086;
	            this.match(argusParser.T__74);
	            break;
	        case argusParser.T__75:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1087;
	            this.match(argusParser.T__75);
	            break;
	        case argusParser.T__76:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1088;
	            this.match(argusParser.T__76);
	            break;
	        case argusParser.T__10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1089;
	            this.match(argusParser.T__10);
	            break;
	        case argusParser.T__77:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1090;
	            this.match(argusParser.T__77);
	            break;
	        case argusParser.T__78:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1091;
	            this.match(argusParser.T__78);
	            this.state = 1092;
	            this.match(argusParser.T__79);
	            this.state = 1093;
	            this.type_actual();
	            this.state = 1094;
	            this.match(argusParser.T__80);
	            break;
	        case argusParser.T__81:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1096;
	            this.match(argusParser.T__81);
	            this.state = 1097;
	            this.match(argusParser.T__79);
	            this.state = 1098;
	            this.type_actual();
	            this.state = 1099;
	            this.match(argusParser.T__80);
	            break;
	        case argusParser.T__82:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1101;
	            this.match(argusParser.T__82);
	            this.state = 1102;
	            this.match(argusParser.T__79);
	            this.state = 1103;
	            this.type_actual();
	            this.state = 1104;
	            this.match(argusParser.T__80);
	            break;
	        case argusParser.T__83:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1106;
	            this.match(argusParser.T__83);
	            this.state = 1107;
	            this.match(argusParser.T__79);
	            this.state = 1108;
	            this.field_spec();
	            this.state = 1113;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===argusParser.T__5) {
	                this.state = 1109;
	                this.match(argusParser.T__5);
	                this.state = 1110;
	                this.field_spec();
	                this.state = 1115;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1116;
	            this.match(argusParser.T__80);
	            break;
	        case argusParser.T__84:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1118;
	            this.match(argusParser.T__84);
	            this.state = 1119;
	            this.match(argusParser.T__79);
	            this.state = 1120;
	            this.field_spec();
	            this.state = 1125;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===argusParser.T__5) {
	                this.state = 1121;
	                this.match(argusParser.T__5);
	                this.state = 1122;
	                this.field_spec();
	                this.state = 1127;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1128;
	            this.match(argusParser.T__80);
	            break;
	        case argusParser.T__85:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1130;
	            this.match(argusParser.T__85);
	            this.state = 1131;
	            this.match(argusParser.T__79);
	            this.state = 1132;
	            this.field_spec();
	            this.state = 1137;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===argusParser.T__5) {
	                this.state = 1133;
	                this.match(argusParser.T__5);
	                this.state = 1134;
	                this.field_spec();
	                this.state = 1139;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1140;
	            this.match(argusParser.T__80);
	            break;
	        case argusParser.T__86:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1142;
	            this.match(argusParser.T__86);
	            this.state = 1143;
	            this.match(argusParser.T__79);
	            this.state = 1144;
	            this.field_spec();
	            this.state = 1149;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===argusParser.T__5) {
	                this.state = 1145;
	                this.match(argusParser.T__5);
	                this.state = 1146;
	                this.field_spec();
	                this.state = 1151;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1152;
	            this.match(argusParser.T__80);
	            break;
	        case argusParser.T__87:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1154;
	            this.match(argusParser.T__87);
	            this.state = 1155;
	            this.match(argusParser.T__79);
	            this.state = 1156;
	            this.field_spec();
	            this.state = 1161;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===argusParser.T__5) {
	                this.state = 1157;
	                this.match(argusParser.T__5);
	                this.state = 1158;
	                this.field_spec();
	                this.state = 1163;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1164;
	            this.match(argusParser.T__80);
	            break;
	        case argusParser.T__88:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1166;
	            this.match(argusParser.T__88);
	            this.state = 1167;
	            this.match(argusParser.T__79);
	            this.state = 1168;
	            this.field_spec();
	            this.state = 1173;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===argusParser.T__5) {
	                this.state = 1169;
	                this.match(argusParser.T__5);
	                this.state = 1170;
	                this.field_spec();
	                this.state = 1175;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1176;
	            this.match(argusParser.T__80);
	            break;
	        case argusParser.T__89:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1178;
	            this.match(argusParser.T__89);

	            this.state = 1187;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
	            if(la_===1) {
	                this.state = 1179;
	                this.type_spec();
	                this.state = 1184;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,138,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1180;
	                        this.match(argusParser.T__5);
	                        this.state = 1181;
	                        this.type_spec(); 
	                    }
	                    this.state = 1186;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,138,this._ctx);
	                }


	            }
	            this.state = 1190;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
	            if(la_===1) {
	                this.state = 1189;
	                this.returnz();

	            }
	            this.state = 1193;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
	            if(la_===1) {
	                this.state = 1192;
	                this.signals();

	            }
	            break;
	        case argusParser.T__90:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1195;
	            this.match(argusParser.T__90);

	            this.state = 1204;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
	            if(la_===1) {
	                this.state = 1196;
	                this.type_spec();
	                this.state = 1201;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,142,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1197;
	                        this.match(argusParser.T__5);
	                        this.state = 1198;
	                        this.type_spec(); 
	                    }
	                    this.state = 1203;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,142,this._ctx);
	                }


	            }
	            this.state = 1207;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
	            if(la_===1) {
	                this.state = 1206;
	                this.yields();

	            }
	            this.state = 1210;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
	            if(la_===1) {
	                this.state = 1209;
	                this.signals();

	            }
	            break;
	        case argusParser.T__91:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 1212;
	            this.match(argusParser.T__91);

	            this.state = 1221;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
	            if(la_===1) {
	                this.state = 1213;
	                this.type_spec();
	                this.state = 1218;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,146,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1214;
	                        this.match(argusParser.T__5);
	                        this.state = 1215;
	                        this.type_spec(); 
	                    }
	                    this.state = 1220;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,146,this._ctx);
	                }


	            }
	            this.state = 1224;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
	            if(la_===1) {
	                this.state = 1223;
	                this.returnz();

	            }
	            this.state = 1227;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
	            if(la_===1) {
	                this.state = 1226;
	                this.signals();

	            }
	            break;
	        case argusParser.T__92:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 1229;
	            this.match(argusParser.T__92);

	            this.state = 1238;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
	            if(la_===1) {
	                this.state = 1230;
	                this.type_spec();
	                this.state = 1235;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,150,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1231;
	                        this.match(argusParser.T__5);
	                        this.state = 1232;
	                        this.type_spec(); 
	                    }
	                    this.state = 1237;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,150,this._ctx);
	                }


	            }
	            this.state = 1241;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
	            if(la_===1) {
	                this.state = 1240;
	                this.returnz();

	            }
	            this.state = 1244;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
	            if(la_===1) {
	                this.state = 1243;
	                this.signals();

	            }
	            break;
	        case argusParser.T__93:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 1246;
	            this.match(argusParser.T__93);
	            this.state = 1247;
	            this.match(argusParser.T__79);
	            this.state = 1248;
	            this.type_actual();
	            this.state = 1249;
	            this.match(argusParser.T__80);
	            break;
	        case argusParser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 1251;
	            this.reference(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	field_spec() {
	    let localctx = new Field_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, argusParser.RULE_field_spec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1254;
	        this.name();
	        this.state = 1259;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.T__5) {
	            this.state = 1255;
	            this.match(argusParser.T__5);
	            this.state = 1256;
	            this.name();
	            this.state = 1261;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1262;
	        this.match(argusParser.T__15);
	        this.state = 1263;
	        this.type_actual();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	reference(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ReferenceContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 90;
	    this.enterRecursionRule(localctx, 90, argusParser.RULE_reference, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1278;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1266;
	            this.idn();
	            break;

	        case 2:
	            this.state = 1267;
	            this.idn();
	            this.state = 1276;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
	            if(la_===1) {
	                this.state = 1268;
	                this.actual_parm();
	                this.state = 1273;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,156,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1269;
	                        this.match(argusParser.T__5);
	                        this.state = 1270;
	                        this.actual_parm(); 
	                    }
	                    this.state = 1275;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,156,this._ctx);
	                }


	            }
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1285;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,159,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ReferenceContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, argusParser.RULE_reference);
	                this.state = 1280;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1281;
	                this.match(argusParser.T__26);
	                this.state = 1282;
	                this.name(); 
	            }
	            this.state = 1287;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,159,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	actual_parm() {
	    let localctx = new Actual_parmContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, argusParser.RULE_actual_parm);
	    try {
	        this.state = 1290;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1288;
	            this.constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1289;
	            this.type_actual();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_actual() {
	    let localctx = new Type_actualContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, argusParser.RULE_type_actual);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1292;
	        this.type_spec();
	        this.state = 1304;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
	        if(la_===1) {
	            this.state = 1293;
	            this.match(argusParser.T__94);
	            this.state = 1302;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
	            if(la_===1) {
	                this.state = 1294;
	                this.opbinding();
	                this.state = 1299;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,161,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1295;
	                        this.match(argusParser.T__5);
	                        this.state = 1296;
	                        this.opbinding(); 
	                    }
	                    this.state = 1301;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,161,this._ctx);
	                }


	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opbinding() {
	    let localctx = new OpbindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, argusParser.RULE_opbinding);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1306;
	        this.name();
	        this.state = 1311;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.T__5) {
	            this.state = 1307;
	            this.match(argusParser.T__5);
	            this.state = 1308;
	            this.name();
	            this.state = 1313;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1314;
	        this.match(argusParser.T__15);
	        this.state = 1315;
	        this.primaries();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 98;
	    this.enterRecursionRule(localctx, 98, argusParser.RULE_expression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1331;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1318;
	            this.primaries();
	            break;

	        case 2:
	            this.state = 1319;
	            this.call();
	            this.state = 1320;
	            this.match(argusParser.T__30);
	            this.state = 1321;
	            this.primaries();
	            break;

	        case 3:
	            this.state = 1323;
	            this.match(argusParser.T__17);
	            this.state = 1324;
	            this.expression(0);
	            this.state = 1325;
	            this.match(argusParser.T__18);
	            break;

	        case 4:
	            this.state = 1327;
	            this.match(argusParser.T__95);
	            this.state = 1328;
	            this.expression(23);
	            break;

	        case 5:
	            this.state = 1329;
	            this.match(argusParser.T__96);
	            this.state = 1330;
	            this.expression(22);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1398;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,167,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1396;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, argusParser.RULE_expression);
	                    this.state = 1333;
	                    if (!( this.precpred(this._ctx, 21))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
	                    }
	                    this.state = 1334;
	                    this.match(argusParser.T__97);
	                    this.state = 1335;
	                    this.expression(22);
	                    break;

	                case 2:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, argusParser.RULE_expression);
	                    this.state = 1336;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 1337;
	                    this.match(argusParser.T__98);
	                    this.state = 1338;
	                    this.expression(21);
	                    break;

	                case 3:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, argusParser.RULE_expression);
	                    this.state = 1339;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 1340;
	                    this.match(argusParser.T__99);
	                    this.state = 1341;
	                    this.expression(20);
	                    break;

	                case 4:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, argusParser.RULE_expression);
	                    this.state = 1342;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 1343;
	                    this.match(argusParser.T__67);
	                    this.state = 1344;
	                    this.expression(19);
	                    break;

	                case 5:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, argusParser.RULE_expression);
	                    this.state = 1345;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 1346;
	                    this.match(argusParser.T__100);
	                    this.state = 1347;
	                    this.expression(18);
	                    break;

	                case 6:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, argusParser.RULE_expression);
	                    this.state = 1348;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 1349;
	                    this.match(argusParser.T__101);
	                    this.state = 1350;
	                    this.expression(17);
	                    break;

	                case 7:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, argusParser.RULE_expression);
	                    this.state = 1351;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 1352;
	                    this.match(argusParser.T__96);
	                    this.state = 1353;
	                    this.expression(16);
	                    break;

	                case 8:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, argusParser.RULE_expression);
	                    this.state = 1354;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 1355;
	                    this.match(argusParser.T__102);
	                    this.state = 1356;
	                    this.expression(15);
	                    break;

	                case 9:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, argusParser.RULE_expression);
	                    this.state = 1357;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 1358;
	                    this.match(argusParser.T__103);
	                    this.state = 1359;
	                    this.expression(14);
	                    break;

	                case 10:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, argusParser.RULE_expression);
	                    this.state = 1360;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 1361;
	                    this.match(argusParser.T__0);
	                    this.state = 1362;
	                    this.expression(13);
	                    break;

	                case 11:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, argusParser.RULE_expression);
	                    this.state = 1363;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 1364;
	                    this.match(argusParser.T__104);
	                    this.state = 1365;
	                    this.expression(12);
	                    break;

	                case 12:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, argusParser.RULE_expression);
	                    this.state = 1366;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 1367;
	                    this.match(argusParser.T__105);
	                    this.state = 1368;
	                    this.expression(11);
	                    break;

	                case 13:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, argusParser.RULE_expression);
	                    this.state = 1369;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 1370;
	                    this.match(argusParser.T__106);
	                    this.state = 1371;
	                    this.expression(10);
	                    break;

	                case 14:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, argusParser.RULE_expression);
	                    this.state = 1372;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 1373;
	                    this.match(argusParser.T__107);
	                    this.state = 1374;
	                    this.expression(9);
	                    break;

	                case 15:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, argusParser.RULE_expression);
	                    this.state = 1375;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 1376;
	                    this.match(argusParser.T__108);
	                    this.state = 1377;
	                    this.expression(8);
	                    break;

	                case 16:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, argusParser.RULE_expression);
	                    this.state = 1378;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 1379;
	                    this.match(argusParser.T__109);
	                    this.state = 1380;
	                    this.expression(7);
	                    break;

	                case 17:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, argusParser.RULE_expression);
	                    this.state = 1381;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 1382;
	                    this.match(argusParser.T__110);
	                    this.state = 1383;
	                    this.expression(6);
	                    break;

	                case 18:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, argusParser.RULE_expression);
	                    this.state = 1384;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 1385;
	                    this.match(argusParser.T__111);
	                    this.state = 1386;
	                    this.expression(5);
	                    break;

	                case 19:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, argusParser.RULE_expression);
	                    this.state = 1387;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 1388;
	                    this.match(argusParser.T__112);
	                    this.state = 1389;
	                    this.expression(4);
	                    break;

	                case 20:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, argusParser.RULE_expression);
	                    this.state = 1390;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 1391;
	                    this.match(argusParser.T__113);
	                    this.state = 1392;
	                    this.expression(3);
	                    break;

	                case 21:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, argusParser.RULE_expression);
	                    this.state = 1393;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 1394;
	                    this.match(argusParser.T__114);
	                    this.state = 1395;
	                    this.expression(2);
	                    break;

	                } 
	            }
	            this.state = 1400;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,167,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	primaries() {
	    let localctx = new PrimariesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, argusParser.RULE_primaries);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1401;
	        this.primary();
	        this.state = 1414;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,170,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1412;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case argusParser.T__31:
	                    this.state = 1402;
	                    this.match(argusParser.T__31);
	                    this.state = 1403;
	                    this.name();
	                    break;
	                case argusParser.T__10:
	                case argusParser.T__17:
	                case argusParser.T__68:
	                case argusParser.T__69:
	                case argusParser.T__70:
	                case argusParser.T__71:
	                case argusParser.T__72:
	                case argusParser.T__73:
	                case argusParser.T__74:
	                case argusParser.T__75:
	                case argusParser.T__76:
	                case argusParser.T__77:
	                case argusParser.T__78:
	                case argusParser.T__81:
	                case argusParser.T__82:
	                case argusParser.T__83:
	                case argusParser.T__84:
	                case argusParser.T__85:
	                case argusParser.T__86:
	                case argusParser.T__87:
	                case argusParser.T__88:
	                case argusParser.T__89:
	                case argusParser.T__90:
	                case argusParser.T__91:
	                case argusParser.T__92:
	                case argusParser.T__93:
	                case argusParser.T__95:
	                case argusParser.T__96:
	                case argusParser.T__115:
	                case argusParser.T__116:
	                case argusParser.T__117:
	                case argusParser.T__118:
	                case argusParser.T__119:
	                case argusParser.T__120:
	                case argusParser.T__121:
	                case argusParser.INT_LITERAL:
	                case argusParser.REAL_LITERAL:
	                case argusParser.CHAR_LITERAL:
	                case argusParser.STRING_LITERAL:
	                case argusParser.IDENTIFIER:
	                    this.state = 1404;
	                    this.expression(0);
	                    this.state = 1409;
	                    this._errHandler.sync(this);
	                    var _alt = this._interp.adaptivePredict(this._input,168,this._ctx)
	                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                        if(_alt===1) {
	                            this.state = 1405;
	                            this.match(argusParser.T__5);
	                            this.state = 1406;
	                            this.expression(0); 
	                        }
	                        this.state = 1411;
	                        this._errHandler.sync(this);
	                        _alt = this._interp.adaptivePredict(this._input,168,this._ctx);
	                    }

	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 1416;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,170,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary() {
	    let localctx = new PrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, argusParser.RULE_primary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1417;
	        this.entities();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	call() {
	    let localctx = new CallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, argusParser.RULE_call);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1419;
	        this.primaries();
	        this.state = 1420;
	        this.match(argusParser.T__17);
	        this.state = 1429;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===argusParser.T__10 || _la===argusParser.T__17 || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (argusParser.T__68 - 69)) | (1 << (argusParser.T__69 - 69)) | (1 << (argusParser.T__70 - 69)) | (1 << (argusParser.T__71 - 69)) | (1 << (argusParser.T__72 - 69)) | (1 << (argusParser.T__73 - 69)) | (1 << (argusParser.T__74 - 69)) | (1 << (argusParser.T__75 - 69)) | (1 << (argusParser.T__76 - 69)) | (1 << (argusParser.T__77 - 69)) | (1 << (argusParser.T__78 - 69)) | (1 << (argusParser.T__81 - 69)) | (1 << (argusParser.T__82 - 69)) | (1 << (argusParser.T__83 - 69)) | (1 << (argusParser.T__84 - 69)) | (1 << (argusParser.T__85 - 69)) | (1 << (argusParser.T__86 - 69)) | (1 << (argusParser.T__87 - 69)) | (1 << (argusParser.T__88 - 69)) | (1 << (argusParser.T__89 - 69)) | (1 << (argusParser.T__90 - 69)) | (1 << (argusParser.T__91 - 69)) | (1 << (argusParser.T__92 - 69)) | (1 << (argusParser.T__93 - 69)) | (1 << (argusParser.T__95 - 69)) | (1 << (argusParser.T__96 - 69)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (argusParser.T__115 - 116)) | (1 << (argusParser.T__116 - 116)) | (1 << (argusParser.T__117 - 116)) | (1 << (argusParser.T__118 - 116)) | (1 << (argusParser.T__119 - 116)) | (1 << (argusParser.T__120 - 116)) | (1 << (argusParser.T__121 - 116)) | (1 << (argusParser.INT_LITERAL - 116)) | (1 << (argusParser.REAL_LITERAL - 116)) | (1 << (argusParser.CHAR_LITERAL - 116)) | (1 << (argusParser.STRING_LITERAL - 116)) | (1 << (argusParser.IDENTIFIER - 116)))) !== 0)) {
	            this.state = 1421;
	            this.expression(0);
	            this.state = 1426;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===argusParser.T__5) {
	                this.state = 1422;
	                this.match(argusParser.T__5);
	                this.state = 1423;
	                this.expression(0);
	                this.state = 1428;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1431;
	        this.match(argusParser.T__18);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entities() {
	    let localctx = new EntitiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, argusParser.RULE_entities);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1433;
	        this.entity();
	        this.state = 1439;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,174,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1437;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case argusParser.T__31:
	                    this.state = 1434;
	                    this.match(argusParser.T__31);
	                    this.state = 1435;
	                    this.name();
	                    break;
	                case argusParser.T__10:
	                case argusParser.T__17:
	                case argusParser.T__68:
	                case argusParser.T__69:
	                case argusParser.T__70:
	                case argusParser.T__71:
	                case argusParser.T__72:
	                case argusParser.T__73:
	                case argusParser.T__74:
	                case argusParser.T__75:
	                case argusParser.T__76:
	                case argusParser.T__77:
	                case argusParser.T__78:
	                case argusParser.T__81:
	                case argusParser.T__82:
	                case argusParser.T__83:
	                case argusParser.T__84:
	                case argusParser.T__85:
	                case argusParser.T__86:
	                case argusParser.T__87:
	                case argusParser.T__88:
	                case argusParser.T__89:
	                case argusParser.T__90:
	                case argusParser.T__91:
	                case argusParser.T__92:
	                case argusParser.T__93:
	                case argusParser.T__95:
	                case argusParser.T__96:
	                case argusParser.T__115:
	                case argusParser.T__116:
	                case argusParser.T__117:
	                case argusParser.T__118:
	                case argusParser.T__119:
	                case argusParser.T__120:
	                case argusParser.T__121:
	                case argusParser.INT_LITERAL:
	                case argusParser.REAL_LITERAL:
	                case argusParser.CHAR_LITERAL:
	                case argusParser.STRING_LITERAL:
	                case argusParser.IDENTIFIER:
	                    this.state = 1436;
	                    this.expression(0);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 1441;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,174,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entity() {
	    let localctx = new EntityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, argusParser.RULE_entity);
	    try {
	        this.state = 1518;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,184,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1442;
	            this.match(argusParser.T__115);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1443;
	            this.match(argusParser.T__116);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1444;
	            this.match(argusParser.T__117);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1445;
	            this.match(argusParser.INT_LITERAL);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1446;
	            this.match(argusParser.REAL_LITERAL);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1447;
	            this.match(argusParser.CHAR_LITERAL);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1448;
	            this.match(argusParser.STRING_LITERAL);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1449;
	            this.match(argusParser.T__118);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1450;
	            this.reference(0);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1451;
	            this.match(argusParser.T__119);
	            this.state = 1452;
	            this.entities();

	            this.state = 1461;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
	            if(la_===1) {
	                this.state = 1453;
	                this.bind_arg();
	                this.state = 1458;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,175,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1454;
	                        this.match(argusParser.T__5);
	                        this.state = 1455;
	                        this.bind_arg(); 
	                    }
	                    this.state = 1460;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,175,this._ctx);
	                }


	            }
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1463;
	            this.type_spec();
	            this.state = 1464;
	            this.match(argusParser.T__26);
	            this.state = 1475;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,178,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1465;
	                    this.field();
	                    this.state = 1470;
	                    this._errHandler.sync(this);
	                    var _alt = this._interp.adaptivePredict(this._input,177,this._ctx)
	                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                        if(_alt===1) {
	                            this.state = 1466;
	                            this.match(argusParser.T__5);
	                            this.state = 1467;
	                            this.field(); 
	                        }
	                        this.state = 1472;
	                        this._errHandler.sync(this);
	                        _alt = this._interp.adaptivePredict(this._input,177,this._ctx);
	                    }
	             
	                }
	                this.state = 1477;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,178,this._ctx);
	            }

	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1478;
	            this.type_spec();
	            this.state = 1479;
	            this.match(argusParser.T__26);

	            this.state = 1483;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
	            if(la_===1) {
	                this.state = 1480;
	                this.expression(0);
	                this.state = 1481;
	                this.match(argusParser.T__15);

	            }
	            this.state = 1493;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
	            if(la_===1) {
	                this.state = 1485;
	                this.expression(0);
	                this.state = 1490;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,180,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1486;
	                        this.match(argusParser.T__5);
	                        this.state = 1487;
	                        this.expression(0); 
	                    }
	                    this.state = 1492;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,180,this._ctx);
	                }


	            }
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1495;
	            this.type_spec();
	            this.state = 1496;
	            this.match(argusParser.T__26);
	            this.state = 1497;
	            this.name();

	            this.state = 1506;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,183,this._ctx);
	            if(la_===1) {
	                this.state = 1498;
	                this.actual_parm();
	                this.state = 1503;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,182,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1499;
	                        this.match(argusParser.T__5);
	                        this.state = 1500;
	                        this.actual_parm(); 
	                    }
	                    this.state = 1505;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,182,this._ctx);
	                }


	            }
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1508;
	            this.match(argusParser.T__120);
	            this.state = 1509;
	            this.match(argusParser.T__17);
	            this.state = 1510;
	            this.expression(0);
	            this.state = 1511;
	            this.match(argusParser.T__18);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1513;
	            this.match(argusParser.T__121);
	            this.state = 1514;
	            this.match(argusParser.T__17);
	            this.state = 1515;
	            this.expression(0);
	            this.state = 1516;
	            this.match(argusParser.T__18);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	field() {
	    let localctx = new FieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, argusParser.RULE_field);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1520;
	        this.name();
	        this.state = 1525;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===argusParser.T__5) {
	            this.state = 1521;
	            this.match(argusParser.T__5);
	            this.state = 1522;
	            this.name();
	            this.state = 1527;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1528;
	        this.match(argusParser.T__15);
	        this.state = 1529;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bind_arg() {
	    let localctx = new Bind_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, argusParser.RULE_bind_arg);
	    try {
	        this.state = 1533;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case argusParser.T__67:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1531;
	            this.match(argusParser.T__67);
	            break;
	        case argusParser.T__10:
	        case argusParser.T__17:
	        case argusParser.T__68:
	        case argusParser.T__69:
	        case argusParser.T__70:
	        case argusParser.T__71:
	        case argusParser.T__72:
	        case argusParser.T__73:
	        case argusParser.T__74:
	        case argusParser.T__75:
	        case argusParser.T__76:
	        case argusParser.T__77:
	        case argusParser.T__78:
	        case argusParser.T__81:
	        case argusParser.T__82:
	        case argusParser.T__83:
	        case argusParser.T__84:
	        case argusParser.T__85:
	        case argusParser.T__86:
	        case argusParser.T__87:
	        case argusParser.T__88:
	        case argusParser.T__89:
	        case argusParser.T__90:
	        case argusParser.T__91:
	        case argusParser.T__92:
	        case argusParser.T__93:
	        case argusParser.T__95:
	        case argusParser.T__96:
	        case argusParser.T__115:
	        case argusParser.T__116:
	        case argusParser.T__117:
	        case argusParser.T__118:
	        case argusParser.T__119:
	        case argusParser.T__120:
	        case argusParser.T__121:
	        case argusParser.INT_LITERAL:
	        case argusParser.REAL_LITERAL:
	        case argusParser.CHAR_LITERAL:
	        case argusParser.STRING_LITERAL:
	        case argusParser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1532;
	            this.expression(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name() {
	    let localctx = new NameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, argusParser.RULE_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1535;
	        this.match(argusParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	idn() {
	    let localctx = new IdnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, argusParser.RULE_idn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1537;
	        this.match(argusParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

argusParser.EOF = antlr4.Token.EOF;
argusParser.T__0 = 1;
argusParser.T__1 = 2;
argusParser.T__2 = 3;
argusParser.T__3 = 4;
argusParser.T__4 = 5;
argusParser.T__5 = 6;
argusParser.T__6 = 7;
argusParser.T__7 = 8;
argusParser.T__8 = 9;
argusParser.T__9 = 10;
argusParser.T__10 = 11;
argusParser.T__11 = 12;
argusParser.T__12 = 13;
argusParser.T__13 = 14;
argusParser.T__14 = 15;
argusParser.T__15 = 16;
argusParser.T__16 = 17;
argusParser.T__17 = 18;
argusParser.T__18 = 19;
argusParser.T__19 = 20;
argusParser.T__20 = 21;
argusParser.T__21 = 22;
argusParser.T__22 = 23;
argusParser.T__23 = 24;
argusParser.T__24 = 25;
argusParser.T__25 = 26;
argusParser.T__26 = 27;
argusParser.T__27 = 28;
argusParser.T__28 = 29;
argusParser.T__29 = 30;
argusParser.T__30 = 31;
argusParser.T__31 = 32;
argusParser.T__32 = 33;
argusParser.T__33 = 34;
argusParser.T__34 = 35;
argusParser.T__35 = 36;
argusParser.T__36 = 37;
argusParser.T__37 = 38;
argusParser.T__38 = 39;
argusParser.T__39 = 40;
argusParser.T__40 = 41;
argusParser.T__41 = 42;
argusParser.T__42 = 43;
argusParser.T__43 = 44;
argusParser.T__44 = 45;
argusParser.T__45 = 46;
argusParser.T__46 = 47;
argusParser.T__47 = 48;
argusParser.T__48 = 49;
argusParser.T__49 = 50;
argusParser.T__50 = 51;
argusParser.T__51 = 52;
argusParser.T__52 = 53;
argusParser.T__53 = 54;
argusParser.T__54 = 55;
argusParser.T__55 = 56;
argusParser.T__56 = 57;
argusParser.T__57 = 58;
argusParser.T__58 = 59;
argusParser.T__59 = 60;
argusParser.T__60 = 61;
argusParser.T__61 = 62;
argusParser.T__62 = 63;
argusParser.T__63 = 64;
argusParser.T__64 = 65;
argusParser.T__65 = 66;
argusParser.T__66 = 67;
argusParser.T__67 = 68;
argusParser.T__68 = 69;
argusParser.T__69 = 70;
argusParser.T__70 = 71;
argusParser.T__71 = 72;
argusParser.T__72 = 73;
argusParser.T__73 = 74;
argusParser.T__74 = 75;
argusParser.T__75 = 76;
argusParser.T__76 = 77;
argusParser.T__77 = 78;
argusParser.T__78 = 79;
argusParser.T__79 = 80;
argusParser.T__80 = 81;
argusParser.T__81 = 82;
argusParser.T__82 = 83;
argusParser.T__83 = 84;
argusParser.T__84 = 85;
argusParser.T__85 = 86;
argusParser.T__86 = 87;
argusParser.T__87 = 88;
argusParser.T__88 = 89;
argusParser.T__89 = 90;
argusParser.T__90 = 91;
argusParser.T__91 = 92;
argusParser.T__92 = 93;
argusParser.T__93 = 94;
argusParser.T__94 = 95;
argusParser.T__95 = 96;
argusParser.T__96 = 97;
argusParser.T__97 = 98;
argusParser.T__98 = 99;
argusParser.T__99 = 100;
argusParser.T__100 = 101;
argusParser.T__101 = 102;
argusParser.T__102 = 103;
argusParser.T__103 = 104;
argusParser.T__104 = 105;
argusParser.T__105 = 106;
argusParser.T__106 = 107;
argusParser.T__107 = 108;
argusParser.T__108 = 109;
argusParser.T__109 = 110;
argusParser.T__110 = 111;
argusParser.T__111 = 112;
argusParser.T__112 = 113;
argusParser.T__113 = 114;
argusParser.T__114 = 115;
argusParser.T__115 = 116;
argusParser.T__116 = 117;
argusParser.T__117 = 118;
argusParser.T__118 = 119;
argusParser.T__119 = 120;
argusParser.T__120 = 121;
argusParser.T__121 = 122;
argusParser.INT_LITERAL = 123;
argusParser.REAL_LITERAL = 124;
argusParser.CHAR_LITERAL = 125;
argusParser.STRING_LITERAL = 126;
argusParser.IDENTIFIER = 127;
argusParser.COMMENT = 128;
argusParser.WS = 129;

argusParser.RULE_module = 0;
argusParser.RULE_equates_ = 1;
argusParser.RULE_guardian = 2;
argusParser.RULE_cluster = 3;
argusParser.RULE_operation = 4;
argusParser.RULE_routine = 5;
argusParser.RULE_procedure = 6;
argusParser.RULE_iterator = 7;
argusParser.RULE_creator = 8;
argusParser.RULE_handler = 9;
argusParser.RULE_routine_body = 10;
argusParser.RULE_parms = 11;
argusParser.RULE_parm = 12;
argusParser.RULE_args = 13;
argusParser.RULE_decl = 14;
argusParser.RULE_returnz = 15;
argusParser.RULE_yields = 16;
argusParser.RULE_signals = 17;
argusParser.RULE_exception_ = 18;
argusParser.RULE_opidn = 19;
argusParser.RULE_where = 20;
argusParser.RULE_restriction = 21;
argusParser.RULE_type_set = 22;
argusParser.RULE_oper_decl = 23;
argusParser.RULE_constant = 24;
argusParser.RULE_state_decl = 25;
argusParser.RULE_equate = 26;
argusParser.RULE_own_var = 27;
argusParser.RULE_statement = 28;
argusParser.RULE_enter_stmt = 29;
argusParser.RULE_coarm = 30;
argusParser.RULE_armtag = 31;
argusParser.RULE_for_stmt = 32;
argusParser.RULE_if_stmt = 33;
argusParser.RULE_tagcase_stmt = 34;
argusParser.RULE_tagtest_stmt = 35;
argusParser.RULE_tagwait_stmt = 36;
argusParser.RULE_tag_arm = 37;
argusParser.RULE_atag_arm = 38;
argusParser.RULE_tag_kind = 39;
argusParser.RULE_when_handler = 40;
argusParser.RULE_others_handler = 41;
argusParser.RULE_body = 42;
argusParser.RULE_type_spec = 43;
argusParser.RULE_field_spec = 44;
argusParser.RULE_reference = 45;
argusParser.RULE_actual_parm = 46;
argusParser.RULE_type_actual = 47;
argusParser.RULE_opbinding = 48;
argusParser.RULE_expression = 49;
argusParser.RULE_primaries = 50;
argusParser.RULE_primary = 51;
argusParser.RULE_call = 52;
argusParser.RULE_entities = 53;
argusParser.RULE_entity = 54;
argusParser.RULE_field = 55;
argusParser.RULE_bind_arg = 56;
argusParser.RULE_name = 57;
argusParser.RULE_idn = 58;

class ModuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_module;
    }

	equates_() {
	    return this.getTypedRuleContext(Equates_Context,0);
	};

	equate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EquateContext);
	    } else {
	        return this.getTypedRuleContext(EquateContext,i);
	    }
	};

	guardian() {
	    return this.getTypedRuleContext(GuardianContext,0);
	};

	procedure() {
	    return this.getTypedRuleContext(ProcedureContext,0);
	};

	iterator() {
	    return this.getTypedRuleContext(IteratorContext,0);
	};

	cluster() {
	    return this.getTypedRuleContext(ClusterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterModule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitModule(this);
		}
	}


}



class Equates_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_equates_;
    }

	idn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdnContext);
	    } else {
	        return this.getTypedRuleContext(IdnContext,i);
	    }
	};

	parms() {
	    return this.getTypedRuleContext(ParmsContext,0);
	};

	equate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EquateContext);
	    } else {
	        return this.getTypedRuleContext(EquateContext,i);
	    }
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterEquates_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitEquates_(this);
		}
	}


}



class GuardianContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_guardian;
    }

	idn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdnContext);
	    } else {
	        return this.getTypedRuleContext(IdnContext,i);
	    }
	};

	creator() {
	    return this.getTypedRuleContext(CreatorContext,0);
	};

	parms() {
	    return this.getTypedRuleContext(ParmsContext,0);
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	equate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EquateContext);
	    } else {
	        return this.getTypedRuleContext(EquateContext,i);
	    }
	};

	state_decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(State_declContext);
	    } else {
	        return this.getTypedRuleContext(State_declContext,i);
	    }
	};

	body = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BodyContext);
	    } else {
	        return this.getTypedRuleContext(BodyContext,i);
	    }
	};

	operation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OperationContext);
	    } else {
	        return this.getTypedRuleContext(OperationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterGuardian(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitGuardian(this);
		}
	}


}



class ClusterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_cluster;
    }

	idn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdnContext);
	    } else {
	        return this.getTypedRuleContext(IdnContext,i);
	    }
	};

	opidn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OpidnContext);
	    } else {
	        return this.getTypedRuleContext(OpidnContext,i);
	    }
	};

	type_spec() {
	    return this.getTypedRuleContext(Type_specContext,0);
	};

	routine = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoutineContext);
	    } else {
	        return this.getTypedRuleContext(RoutineContext,i);
	    }
	};

	parms() {
	    return this.getTypedRuleContext(ParmsContext,0);
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	equate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EquateContext);
	    } else {
	        return this.getTypedRuleContext(EquateContext,i);
	    }
	};

	own_var = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Own_varContext);
	    } else {
	        return this.getTypedRuleContext(Own_varContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterCluster(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitCluster(this);
		}
	}


}



class OperationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_operation;
    }

	creator() {
	    return this.getTypedRuleContext(CreatorContext,0);
	};

	handler() {
	    return this.getTypedRuleContext(HandlerContext,0);
	};

	routine() {
	    return this.getTypedRuleContext(RoutineContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterOperation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitOperation(this);
		}
	}


}



class RoutineContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_routine;
    }

	procedure() {
	    return this.getTypedRuleContext(ProcedureContext,0);
	};

	iterator() {
	    return this.getTypedRuleContext(IteratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterRoutine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitRoutine(this);
		}
	}


}



class ProcedureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_procedure;
    }

	idn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdnContext);
	    } else {
	        return this.getTypedRuleContext(IdnContext,i);
	    }
	};

	args() {
	    return this.getTypedRuleContext(ArgsContext,0);
	};

	routine_body() {
	    return this.getTypedRuleContext(Routine_bodyContext,0);
	};

	parms() {
	    return this.getTypedRuleContext(ParmsContext,0);
	};

	returnz() {
	    return this.getTypedRuleContext(ReturnzContext,0);
	};

	signals() {
	    return this.getTypedRuleContext(SignalsContext,0);
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterProcedure(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitProcedure(this);
		}
	}


}



class IteratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_iterator;
    }

	idn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdnContext);
	    } else {
	        return this.getTypedRuleContext(IdnContext,i);
	    }
	};

	args() {
	    return this.getTypedRuleContext(ArgsContext,0);
	};

	routine_body() {
	    return this.getTypedRuleContext(Routine_bodyContext,0);
	};

	parms() {
	    return this.getTypedRuleContext(ParmsContext,0);
	};

	yields() {
	    return this.getTypedRuleContext(YieldsContext,0);
	};

	signals() {
	    return this.getTypedRuleContext(SignalsContext,0);
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterIterator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitIterator(this);
		}
	}


}



class CreatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_creator;
    }

	idn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdnContext);
	    } else {
	        return this.getTypedRuleContext(IdnContext,i);
	    }
	};

	args() {
	    return this.getTypedRuleContext(ArgsContext,0);
	};

	routine_body() {
	    return this.getTypedRuleContext(Routine_bodyContext,0);
	};

	returnz() {
	    return this.getTypedRuleContext(ReturnzContext,0);
	};

	signals() {
	    return this.getTypedRuleContext(SignalsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterCreator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitCreator(this);
		}
	}


}



class HandlerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_handler;
    }

	idn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdnContext);
	    } else {
	        return this.getTypedRuleContext(IdnContext,i);
	    }
	};

	args() {
	    return this.getTypedRuleContext(ArgsContext,0);
	};

	routine_body() {
	    return this.getTypedRuleContext(Routine_bodyContext,0);
	};

	returnz() {
	    return this.getTypedRuleContext(ReturnzContext,0);
	};

	signals() {
	    return this.getTypedRuleContext(SignalsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterHandler(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitHandler(this);
		}
	}


}



class Routine_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_routine_body;
    }

	equate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EquateContext);
	    } else {
	        return this.getTypedRuleContext(EquateContext,i);
	    }
	};

	own_var = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Own_varContext);
	    } else {
	        return this.getTypedRuleContext(Own_varContext,i);
	    }
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterRoutine_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitRoutine_body(this);
		}
	}


}



class ParmsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_parms;
    }

	parm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParmContext);
	    } else {
	        return this.getTypedRuleContext(ParmContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterParms(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitParms(this);
		}
	}


}



class ParmContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_parm;
    }

	idn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdnContext);
	    } else {
	        return this.getTypedRuleContext(IdnContext,i);
	    }
	};

	type_spec() {
	    return this.getTypedRuleContext(Type_specContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterParm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitParm(this);
		}
	}


}



class ArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_args;
    }

	decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclContext);
	    } else {
	        return this.getTypedRuleContext(DeclContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitArgs(this);
		}
	}


}



class DeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_decl;
    }

	idn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdnContext);
	    } else {
	        return this.getTypedRuleContext(IdnContext,i);
	    }
	};

	type_spec() {
	    return this.getTypedRuleContext(Type_specContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitDecl(this);
		}
	}


}



class ReturnzContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_returnz;
    }

	type_spec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_specContext);
	    } else {
	        return this.getTypedRuleContext(Type_specContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterReturnz(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitReturnz(this);
		}
	}


}



class YieldsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_yields;
    }

	type_spec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_specContext);
	    } else {
	        return this.getTypedRuleContext(Type_specContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterYields(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitYields(this);
		}
	}


}



class SignalsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_signals;
    }

	exception_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Exception_Context);
	    } else {
	        return this.getTypedRuleContext(Exception_Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterSignals(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitSignals(this);
		}
	}


}



class Exception_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_exception_;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	type_spec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_specContext);
	    } else {
	        return this.getTypedRuleContext(Type_specContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterException_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitException_(this);
		}
	}


}



class OpidnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_opidn;
    }

	idn() {
	    return this.getTypedRuleContext(IdnContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterOpidn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitOpidn(this);
		}
	}


}



class WhereContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_where;
    }

	restriction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RestrictionContext);
	    } else {
	        return this.getTypedRuleContext(RestrictionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterWhere(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitWhere(this);
		}
	}


}



class RestrictionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_restriction;
    }

	idn() {
	    return this.getTypedRuleContext(IdnContext,0);
	};

	oper_decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Oper_declContext);
	    } else {
	        return this.getTypedRuleContext(Oper_declContext,i);
	    }
	};

	type_set() {
	    return this.getTypedRuleContext(Type_setContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterRestriction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitRestriction(this);
		}
	}


}



class Type_setContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_type_set;
    }

	idn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdnContext);
	    } else {
	        return this.getTypedRuleContext(IdnContext,i);
	    }
	};

	oper_decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Oper_declContext);
	    } else {
	        return this.getTypedRuleContext(Oper_declContext,i);
	    }
	};

	equate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EquateContext);
	    } else {
	        return this.getTypedRuleContext(EquateContext,i);
	    }
	};

	reference() {
	    return this.getTypedRuleContext(ReferenceContext,0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterType_set(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitType_set(this);
		}
	}


}



class Oper_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_oper_decl;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	type_spec() {
	    return this.getTypedRuleContext(Type_specContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterOper_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitOper_decl(this);
		}
	}


}



class ConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_constant;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	type_spec() {
	    return this.getTypedRuleContext(Type_specContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitConstant(this);
		}
	}


}



class State_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_state_decl;
    }

	decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclContext);
	    } else {
	        return this.getTypedRuleContext(DeclContext,i);
	    }
	};

	idn() {
	    return this.getTypedRuleContext(IdnContext,0);
	};

	type_spec() {
	    return this.getTypedRuleContext(Type_specContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	call() {
	    return this.getTypedRuleContext(CallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterState_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitState_decl(this);
		}
	}


}



class EquateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_equate;
    }

	idn() {
	    return this.getTypedRuleContext(IdnContext,0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	type_set() {
	    return this.getTypedRuleContext(Type_setContext,0);
	};

	reference() {
	    return this.getTypedRuleContext(ReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterEquate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitEquate(this);
		}
	}


}



class Own_varContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_own_var;
    }

	decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclContext);
	    } else {
	        return this.getTypedRuleContext(DeclContext,i);
	    }
	};

	idn() {
	    return this.getTypedRuleContext(IdnContext,0);
	};

	type_spec() {
	    return this.getTypedRuleContext(Type_specContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	call() {
	    return this.getTypedRuleContext(CallContext,0);
	};

	primaries() {
	    return this.getTypedRuleContext(PrimariesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterOwn_var(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitOwn_var(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_statement;
    }

	decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclContext);
	    } else {
	        return this.getTypedRuleContext(DeclContext,i);
	    }
	};

	idn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdnContext);
	    } else {
	        return this.getTypedRuleContext(IdnContext,i);
	    }
	};

	type_spec() {
	    return this.getTypedRuleContext(Type_specContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	call() {
	    return this.getTypedRuleContext(CallContext,0);
	};

	primaries() {
	    return this.getTypedRuleContext(PrimariesContext,0);
	};

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	body() {
	    return this.getTypedRuleContext(BodyContext,0);
	};

	enter_stmt() {
	    return this.getTypedRuleContext(Enter_stmtContext,0);
	};

	coarm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CoarmContext);
	    } else {
	        return this.getTypedRuleContext(CoarmContext,i);
	    }
	};

	for_stmt() {
	    return this.getTypedRuleContext(For_stmtContext,0);
	};

	if_stmt() {
	    return this.getTypedRuleContext(If_stmtContext,0);
	};

	tagcase_stmt() {
	    return this.getTypedRuleContext(Tagcase_stmtContext,0);
	};

	tagtest_stmt() {
	    return this.getTypedRuleContext(Tagtest_stmtContext,0);
	};

	tagwait_stmt() {
	    return this.getTypedRuleContext(Tagwait_stmtContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	when_handler = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(When_handlerContext);
	    } else {
	        return this.getTypedRuleContext(When_handlerContext,i);
	    }
	};

	others_handler() {
	    return this.getTypedRuleContext(Others_handlerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitStatement(this);
		}
	}


}



class Enter_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_enter_stmt;
    }

	body() {
	    return this.getTypedRuleContext(BodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterEnter_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitEnter_stmt(this);
		}
	}


}



class CoarmContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_coarm;
    }

	armtag() {
	    return this.getTypedRuleContext(ArmtagContext,0);
	};

	body() {
	    return this.getTypedRuleContext(BodyContext,0);
	};

	decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclContext);
	    } else {
	        return this.getTypedRuleContext(DeclContext,i);
	    }
	};

	call = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallContext);
	    } else {
	        return this.getTypedRuleContext(CallContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterCoarm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitCoarm(this);
		}
	}


}



class ArmtagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_armtag;
    }


	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterArmtag(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitArmtag(this);
		}
	}


}



class For_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_for_stmt;
    }

	decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclContext);
	    } else {
	        return this.getTypedRuleContext(DeclContext,i);
	    }
	};

	call() {
	    return this.getTypedRuleContext(CallContext,0);
	};

	body() {
	    return this.getTypedRuleContext(BodyContext,0);
	};

	idn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdnContext);
	    } else {
	        return this.getTypedRuleContext(IdnContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterFor_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitFor_stmt(this);
		}
	}


}



class If_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_if_stmt;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	body = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BodyContext);
	    } else {
	        return this.getTypedRuleContext(BodyContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterIf_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitIf_stmt(this);
		}
	}


}



class Tagcase_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_tagcase_stmt;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	tag_arm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tag_armContext);
	    } else {
	        return this.getTypedRuleContext(Tag_armContext,i);
	    }
	};

	body() {
	    return this.getTypedRuleContext(BodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterTagcase_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitTagcase_stmt(this);
		}
	}


}



class Tagtest_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_tagtest_stmt;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	atag_arm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Atag_armContext);
	    } else {
	        return this.getTypedRuleContext(Atag_armContext,i);
	    }
	};

	body() {
	    return this.getTypedRuleContext(BodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterTagtest_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitTagtest_stmt(this);
		}
	}


}



class Tagwait_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_tagwait_stmt;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	atag_arm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Atag_armContext);
	    } else {
	        return this.getTypedRuleContext(Atag_armContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterTagwait_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitTagwait_stmt(this);
		}
	}


}



class Tag_armContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_tag_arm;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	body() {
	    return this.getTypedRuleContext(BodyContext,0);
	};

	idn() {
	    return this.getTypedRuleContext(IdnContext,0);
	};

	type_spec() {
	    return this.getTypedRuleContext(Type_specContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterTag_arm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitTag_arm(this);
		}
	}


}



class Atag_armContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_atag_arm;
    }

	tag_kind() {
	    return this.getTypedRuleContext(Tag_kindContext,0);
	};

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	body() {
	    return this.getTypedRuleContext(BodyContext,0);
	};

	idn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdnContext);
	    } else {
	        return this.getTypedRuleContext(IdnContext,i);
	    }
	};

	type_spec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_specContext);
	    } else {
	        return this.getTypedRuleContext(Type_specContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterAtag_arm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitAtag_arm(this);
		}
	}


}



class Tag_kindContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_tag_kind;
    }


	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterTag_kind(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitTag_kind(this);
		}
	}


}



class When_handlerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_when_handler;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	body() {
	    return this.getTypedRuleContext(BodyContext,0);
	};

	decl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclContext);
	    } else {
	        return this.getTypedRuleContext(DeclContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterWhen_handler(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitWhen_handler(this);
		}
	}


}



class Others_handlerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_others_handler;
    }

	body() {
	    return this.getTypedRuleContext(BodyContext,0);
	};

	idn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdnContext);
	    } else {
	        return this.getTypedRuleContext(IdnContext,i);
	    }
	};

	type_spec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_specContext);
	    } else {
	        return this.getTypedRuleContext(Type_specContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterOthers_handler(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitOthers_handler(this);
		}
	}


}



class BodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_body;
    }

	equate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EquateContext);
	    } else {
	        return this.getTypedRuleContext(EquateContext,i);
	    }
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitBody(this);
		}
	}


}



class Type_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_type_spec;
    }

	type_actual() {
	    return this.getTypedRuleContext(Type_actualContext,0);
	};

	field_spec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Field_specContext);
	    } else {
	        return this.getTypedRuleContext(Field_specContext,i);
	    }
	};

	returnz() {
	    return this.getTypedRuleContext(ReturnzContext,0);
	};

	signals() {
	    return this.getTypedRuleContext(SignalsContext,0);
	};

	type_spec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_specContext);
	    } else {
	        return this.getTypedRuleContext(Type_specContext,i);
	    }
	};

	yields() {
	    return this.getTypedRuleContext(YieldsContext,0);
	};

	reference() {
	    return this.getTypedRuleContext(ReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterType_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitType_spec(this);
		}
	}


}



class Field_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_field_spec;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	type_actual() {
	    return this.getTypedRuleContext(Type_actualContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterField_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitField_spec(this);
		}
	}


}



class ReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_reference;
    }

	idn() {
	    return this.getTypedRuleContext(IdnContext,0);
	};

	actual_parm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Actual_parmContext);
	    } else {
	        return this.getTypedRuleContext(Actual_parmContext,i);
	    }
	};

	reference() {
	    return this.getTypedRuleContext(ReferenceContext,0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitReference(this);
		}
	}


}



class Actual_parmContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_actual_parm;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	type_actual() {
	    return this.getTypedRuleContext(Type_actualContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterActual_parm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitActual_parm(this);
		}
	}


}



class Type_actualContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_type_actual;
    }

	type_spec() {
	    return this.getTypedRuleContext(Type_specContext,0);
	};

	opbinding = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OpbindingContext);
	    } else {
	        return this.getTypedRuleContext(OpbindingContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterType_actual(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitType_actual(this);
		}
	}


}



class OpbindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_opbinding;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	primaries() {
	    return this.getTypedRuleContext(PrimariesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterOpbinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitOpbinding(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_expression;
    }

	primaries() {
	    return this.getTypedRuleContext(PrimariesContext,0);
	};

	call() {
	    return this.getTypedRuleContext(CallContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitExpression(this);
		}
	}


}



class PrimariesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_primaries;
    }

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterPrimaries(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitPrimaries(this);
		}
	}


}



class PrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_primary;
    }

	entities() {
	    return this.getTypedRuleContext(EntitiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitPrimary(this);
		}
	}


}



class CallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_call;
    }

	primaries() {
	    return this.getTypedRuleContext(PrimariesContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitCall(this);
		}
	}


}



class EntitiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_entities;
    }

	entity() {
	    return this.getTypedRuleContext(EntityContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterEntities(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitEntities(this);
		}
	}


}



class EntityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_entity;
    }

	INT_LITERAL() {
	    return this.getToken(argusParser.INT_LITERAL, 0);
	};

	REAL_LITERAL() {
	    return this.getToken(argusParser.REAL_LITERAL, 0);
	};

	CHAR_LITERAL() {
	    return this.getToken(argusParser.CHAR_LITERAL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(argusParser.STRING_LITERAL, 0);
	};

	reference() {
	    return this.getTypedRuleContext(ReferenceContext,0);
	};

	entities() {
	    return this.getTypedRuleContext(EntitiesContext,0);
	};

	bind_arg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Bind_argContext);
	    } else {
	        return this.getTypedRuleContext(Bind_argContext,i);
	    }
	};

	type_spec() {
	    return this.getTypedRuleContext(Type_specContext,0);
	};

	field = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldContext);
	    } else {
	        return this.getTypedRuleContext(FieldContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	actual_parm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Actual_parmContext);
	    } else {
	        return this.getTypedRuleContext(Actual_parmContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterEntity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitEntity(this);
		}
	}


}



class FieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_field;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitField(this);
		}
	}


}



class Bind_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_bind_arg;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterBind_arg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitBind_arg(this);
		}
	}


}



class NameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_name;
    }

	IDENTIFIER() {
	    return this.getToken(argusParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitName(this);
		}
	}


}



class IdnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = argusParser.RULE_idn;
    }

	IDENTIFIER() {
	    return this.getToken(argusParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.enterIdn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof argusListener ) {
	        listener.exitIdn(this);
		}
	}


}




argusParser.ModuleContext = ModuleContext; 
argusParser.Equates_Context = Equates_Context; 
argusParser.GuardianContext = GuardianContext; 
argusParser.ClusterContext = ClusterContext; 
argusParser.OperationContext = OperationContext; 
argusParser.RoutineContext = RoutineContext; 
argusParser.ProcedureContext = ProcedureContext; 
argusParser.IteratorContext = IteratorContext; 
argusParser.CreatorContext = CreatorContext; 
argusParser.HandlerContext = HandlerContext; 
argusParser.Routine_bodyContext = Routine_bodyContext; 
argusParser.ParmsContext = ParmsContext; 
argusParser.ParmContext = ParmContext; 
argusParser.ArgsContext = ArgsContext; 
argusParser.DeclContext = DeclContext; 
argusParser.ReturnzContext = ReturnzContext; 
argusParser.YieldsContext = YieldsContext; 
argusParser.SignalsContext = SignalsContext; 
argusParser.Exception_Context = Exception_Context; 
argusParser.OpidnContext = OpidnContext; 
argusParser.WhereContext = WhereContext; 
argusParser.RestrictionContext = RestrictionContext; 
argusParser.Type_setContext = Type_setContext; 
argusParser.Oper_declContext = Oper_declContext; 
argusParser.ConstantContext = ConstantContext; 
argusParser.State_declContext = State_declContext; 
argusParser.EquateContext = EquateContext; 
argusParser.Own_varContext = Own_varContext; 
argusParser.StatementContext = StatementContext; 
argusParser.Enter_stmtContext = Enter_stmtContext; 
argusParser.CoarmContext = CoarmContext; 
argusParser.ArmtagContext = ArmtagContext; 
argusParser.For_stmtContext = For_stmtContext; 
argusParser.If_stmtContext = If_stmtContext; 
argusParser.Tagcase_stmtContext = Tagcase_stmtContext; 
argusParser.Tagtest_stmtContext = Tagtest_stmtContext; 
argusParser.Tagwait_stmtContext = Tagwait_stmtContext; 
argusParser.Tag_armContext = Tag_armContext; 
argusParser.Atag_armContext = Atag_armContext; 
argusParser.Tag_kindContext = Tag_kindContext; 
argusParser.When_handlerContext = When_handlerContext; 
argusParser.Others_handlerContext = Others_handlerContext; 
argusParser.BodyContext = BodyContext; 
argusParser.Type_specContext = Type_specContext; 
argusParser.Field_specContext = Field_specContext; 
argusParser.ReferenceContext = ReferenceContext; 
argusParser.Actual_parmContext = Actual_parmContext; 
argusParser.Type_actualContext = Type_actualContext; 
argusParser.OpbindingContext = OpbindingContext; 
argusParser.ExpressionContext = ExpressionContext; 
argusParser.PrimariesContext = PrimariesContext; 
argusParser.PrimaryContext = PrimaryContext; 
argusParser.CallContext = CallContext; 
argusParser.EntitiesContext = EntitiesContext; 
argusParser.EntityContext = EntityContext; 
argusParser.FieldContext = FieldContext; 
argusParser.Bind_argContext = Bind_argContext; 
argusParser.NameContext = NameContext; 
argusParser.IdnContext = IdnContext; 
