// Generated from Resources/Parsers/rexx/RexxParser.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import RexxParserListener from './RexxParserListener.js';
const serializedATN = [4,1,103,816,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,1,0,1,0,1,0,1,1,3,1,197,8,1,1,1,3,1,200,
8,1,1,2,4,2,203,8,2,11,2,12,2,204,1,3,4,3,208,8,3,11,3,12,3,209,1,3,3,3,
213,8,3,1,3,1,3,3,3,217,8,3,1,4,1,4,1,5,1,5,1,5,5,5,224,8,5,10,5,12,5,227,
9,5,4,5,229,8,5,11,5,12,5,230,1,6,1,6,1,7,1,7,1,8,4,8,238,8,8,11,8,12,8,
239,1,9,1,9,1,9,3,9,245,8,9,3,9,247,8,9,1,10,1,10,1,10,3,10,252,8,10,1,11,
1,11,1,11,3,11,257,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,280,8,12,1,13,
1,13,1,14,1,14,1,14,3,14,287,8,14,1,15,1,15,3,15,291,8,15,1,15,3,15,294,
8,15,1,15,1,15,3,15,298,8,15,1,15,1,15,3,15,302,8,15,1,15,3,15,305,8,15,
1,16,1,16,3,16,309,8,16,1,16,1,16,3,16,313,8,16,1,17,1,17,3,17,317,8,17,
1,17,3,17,320,8,17,1,17,1,17,3,17,324,8,17,1,17,3,17,327,8,17,1,17,1,17,
3,17,331,8,17,1,17,3,17,334,8,17,1,17,1,17,3,17,338,8,17,1,17,3,17,341,8,
17,1,17,1,17,3,17,345,8,17,1,17,3,17,348,8,17,1,17,1,17,3,17,352,8,17,1,
17,3,17,355,8,17,3,17,357,8,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,
20,1,21,1,21,1,21,1,21,3,21,372,8,21,1,22,1,22,1,22,5,22,377,8,22,10,22,
12,22,380,9,22,1,22,1,22,4,22,384,8,22,11,22,12,22,385,1,22,1,22,3,22,390,
8,22,1,23,1,23,3,23,394,8,23,1,23,1,23,1,24,1,24,3,24,400,8,24,1,24,1,24,
1,25,1,25,4,25,406,8,25,11,25,12,25,407,1,25,1,25,1,25,3,25,413,8,25,1,26,
4,26,416,8,26,11,26,12,26,417,1,26,3,26,421,8,26,1,27,1,27,1,27,5,27,426,
8,27,10,27,12,27,429,9,27,1,27,1,27,1,28,1,28,5,28,435,8,28,10,28,12,28,
438,9,28,1,28,3,28,441,8,28,1,29,1,29,1,29,3,29,446,8,29,1,29,3,29,449,8,
29,1,30,1,30,3,30,453,8,30,1,31,1,31,1,31,1,32,1,32,3,32,460,8,32,1,33,1,
33,1,33,1,33,3,33,466,8,33,3,33,468,8,33,1,34,1,34,1,34,1,34,3,34,474,8,
34,1,34,1,34,3,34,478,8,34,1,35,1,35,1,36,1,36,3,36,484,8,36,1,36,1,36,3,
36,488,8,36,1,37,5,37,491,8,37,10,37,12,37,494,9,37,1,37,1,37,4,37,498,8,
37,11,37,12,37,499,1,37,5,37,503,8,37,10,37,12,37,506,9,37,1,38,1,38,1,38,
1,39,1,39,4,39,513,8,39,11,39,12,39,514,1,40,1,40,1,40,1,40,1,41,1,41,1,
42,1,42,3,42,525,8,42,1,43,1,43,1,43,1,44,1,44,3,44,532,8,44,1,45,1,45,3,
45,536,8,45,1,46,1,46,1,47,1,47,1,47,1,47,3,47,544,8,47,1,48,1,48,3,48,548,
8,48,1,49,1,49,1,49,1,49,1,49,3,49,555,8,49,1,50,1,50,3,50,559,8,50,1,51,
1,51,1,51,1,52,1,52,3,52,566,8,52,1,52,1,52,3,52,570,8,52,1,53,1,53,1,53,
3,53,575,8,53,1,54,1,54,1,55,1,55,3,55,581,8,55,1,55,1,55,1,56,1,56,1,56,
1,57,1,57,1,57,3,57,591,8,57,1,58,1,58,3,58,595,8,58,1,59,1,59,3,59,599,
8,59,1,60,1,60,3,60,603,8,60,1,61,1,61,3,61,607,8,61,1,62,1,62,3,62,611,
8,62,1,63,1,63,1,63,1,63,3,63,617,8,63,1,64,1,64,1,64,1,64,3,64,623,8,64,
1,64,1,64,3,64,627,8,64,1,65,1,65,1,65,3,65,632,8,65,1,66,1,66,1,66,1,66,
1,66,1,66,1,66,3,66,641,8,66,1,67,1,67,4,67,645,8,67,11,67,12,67,646,1,68,
5,68,650,8,68,10,68,12,68,653,9,68,1,68,1,68,4,68,657,8,68,11,68,12,68,658,
1,68,5,68,662,8,68,10,68,12,68,665,9,68,1,69,1,69,4,69,669,8,69,11,69,12,
69,670,1,70,1,70,1,71,1,71,3,71,677,8,71,1,72,1,72,3,72,681,8,72,1,73,1,
73,3,73,685,8,73,1,74,1,74,1,74,3,74,690,8,74,1,75,1,75,3,75,694,8,75,1,
76,1,76,1,76,1,77,1,77,1,77,3,77,702,8,77,1,78,1,78,1,78,1,78,5,78,708,8,
78,10,78,12,78,711,9,78,1,79,1,79,1,80,1,80,1,80,5,80,718,8,80,10,80,12,
80,721,9,80,1,81,1,81,1,81,1,81,5,81,727,8,81,10,81,12,81,730,9,81,1,82,
1,82,3,82,734,8,82,1,83,1,83,1,84,1,84,1,85,1,85,3,85,742,8,85,1,85,5,85,
745,8,85,10,85,12,85,748,9,85,1,86,1,86,1,86,1,86,5,86,754,8,86,10,86,12,
86,757,9,86,1,87,1,87,1,88,1,88,1,88,1,88,5,88,765,8,88,10,88,12,88,768,
9,88,1,89,1,89,1,90,1,90,1,90,5,90,775,8,90,10,90,12,90,778,9,90,1,91,5,
91,781,8,91,10,91,12,91,784,9,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,1,92,
1,92,3,92,795,8,92,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
3,94,808,8,94,1,95,1,95,3,95,812,8,95,1,95,1,95,1,95,0,0,96,0,2,4,6,8,10,
12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
178,180,182,184,186,188,190,0,13,1,0,101,102,1,0,64,66,2,0,63,63,65,66,3,
0,16,16,20,20,25,25,2,0,63,63,66,66,6,0,7,7,19,19,33,33,40,40,48,48,57,57,
3,0,63,63,66,66,98,98,1,0,70,71,1,0,78,79,2,0,69,69,89,97,1,0,81,88,1,0,
72,75,2,0,70,71,77,77,877,0,192,1,0,0,0,2,196,1,0,0,0,4,202,1,0,0,0,6,216,
1,0,0,0,8,218,1,0,0,0,10,228,1,0,0,0,12,232,1,0,0,0,14,234,1,0,0,0,16,237,
1,0,0,0,18,246,1,0,0,0,20,251,1,0,0,0,22,253,1,0,0,0,24,279,1,0,0,0,26,281,
1,0,0,0,28,286,1,0,0,0,30,288,1,0,0,0,32,312,1,0,0,0,34,356,1,0,0,0,36,358,
1,0,0,0,38,361,1,0,0,0,40,364,1,0,0,0,42,371,1,0,0,0,44,373,1,0,0,0,46,391,
1,0,0,0,48,397,1,0,0,0,50,403,1,0,0,0,52,415,1,0,0,0,54,422,1,0,0,0,56,432,
1,0,0,0,58,442,1,0,0,0,60,452,1,0,0,0,62,454,1,0,0,0,64,457,1,0,0,0,66,461,
1,0,0,0,68,477,1,0,0,0,70,479,1,0,0,0,72,487,1,0,0,0,74,492,1,0,0,0,76,507,
1,0,0,0,78,512,1,0,0,0,80,516,1,0,0,0,82,520,1,0,0,0,84,522,1,0,0,0,86,526,
1,0,0,0,88,529,1,0,0,0,90,533,1,0,0,0,92,537,1,0,0,0,94,539,1,0,0,0,96,545,
1,0,0,0,98,549,1,0,0,0,100,556,1,0,0,0,102,560,1,0,0,0,104,563,1,0,0,0,106,
574,1,0,0,0,108,576,1,0,0,0,110,578,1,0,0,0,112,584,1,0,0,0,114,587,1,0,
0,0,116,592,1,0,0,0,118,596,1,0,0,0,120,600,1,0,0,0,122,604,1,0,0,0,124,
608,1,0,0,0,126,612,1,0,0,0,128,626,1,0,0,0,130,631,1,0,0,0,132,633,1,0,
0,0,134,642,1,0,0,0,136,651,1,0,0,0,138,668,1,0,0,0,140,672,1,0,0,0,142,
676,1,0,0,0,144,680,1,0,0,0,146,684,1,0,0,0,148,689,1,0,0,0,150,693,1,0,
0,0,152,695,1,0,0,0,154,701,1,0,0,0,156,703,1,0,0,0,158,712,1,0,0,0,160,
714,1,0,0,0,162,722,1,0,0,0,164,733,1,0,0,0,166,735,1,0,0,0,168,737,1,0,
0,0,170,739,1,0,0,0,172,749,1,0,0,0,174,758,1,0,0,0,176,760,1,0,0,0,178,
769,1,0,0,0,180,771,1,0,0,0,182,782,1,0,0,0,184,794,1,0,0,0,186,796,1,0,
0,0,188,807,1,0,0,0,190,809,1,0,0,0,192,193,3,2,1,0,193,194,5,0,0,1,194,
1,1,0,0,0,195,197,3,4,2,0,196,195,1,0,0,0,196,197,1,0,0,0,197,199,1,0,0,
0,198,200,3,16,8,0,199,198,1,0,0,0,199,200,1,0,0,0,200,3,1,0,0,0,201,203,
3,6,3,0,202,201,1,0,0,0,203,204,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,
205,5,1,0,0,0,206,208,3,8,4,0,207,206,1,0,0,0,208,209,1,0,0,0,209,207,1,
0,0,0,209,210,1,0,0,0,210,212,1,0,0,0,211,213,3,10,5,0,212,211,1,0,0,0,212,
213,1,0,0,0,213,217,1,0,0,0,214,217,3,10,5,0,215,217,3,14,7,0,216,207,1,
0,0,0,216,214,1,0,0,0,216,215,1,0,0,0,217,7,1,0,0,0,218,219,7,0,0,0,219,
9,1,0,0,0,220,221,3,12,6,0,221,225,5,100,0,0,222,224,3,8,4,0,223,222,1,0,
0,0,224,227,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,229,1,0,0,0,227,
225,1,0,0,0,228,220,1,0,0,0,229,230,1,0,0,0,230,228,1,0,0,0,230,231,1,0,
0,0,231,11,1,0,0,0,232,233,7,1,0,0,233,13,1,0,0,0,234,235,5,1,0,0,235,15,
1,0,0,0,236,238,3,18,9,0,237,236,1,0,0,0,238,239,1,0,0,0,239,237,1,0,0,0,
239,240,1,0,0,0,240,17,1,0,0,0,241,247,3,28,14,0,242,244,3,20,10,0,243,245,
3,4,2,0,244,243,1,0,0,0,244,245,1,0,0,0,245,247,1,0,0,0,246,241,1,0,0,0,
246,242,1,0,0,0,247,19,1,0,0,0,248,252,3,22,11,0,249,252,3,24,12,0,250,252,
3,26,13,0,251,248,1,0,0,0,251,249,1,0,0,0,251,250,1,0,0,0,252,21,1,0,0,0,
253,254,7,2,0,0,254,256,5,69,0,0,255,257,3,156,78,0,256,255,1,0,0,0,256,
257,1,0,0,0,257,23,1,0,0,0,258,280,3,58,29,0,259,280,3,64,32,0,260,280,3,
66,33,0,261,280,3,76,38,0,262,280,3,84,42,0,263,280,3,86,43,0,264,280,3,
88,44,0,265,280,3,90,45,0,266,280,3,92,46,0,267,280,3,94,47,0,268,280,3,
102,51,0,269,280,3,104,52,0,270,280,3,114,57,0,271,280,3,116,58,0,272,280,
3,118,59,0,273,280,3,120,60,0,274,280,3,122,61,0,275,280,3,124,62,0,276,
280,3,126,63,0,277,280,3,132,66,0,278,280,3,134,67,0,279,258,1,0,0,0,279,
259,1,0,0,0,279,260,1,0,0,0,279,261,1,0,0,0,279,262,1,0,0,0,279,263,1,0,
0,0,279,264,1,0,0,0,279,265,1,0,0,0,279,266,1,0,0,0,279,267,1,0,0,0,279,
268,1,0,0,0,279,269,1,0,0,0,279,270,1,0,0,0,279,271,1,0,0,0,279,272,1,0,
0,0,279,273,1,0,0,0,279,274,1,0,0,0,279,275,1,0,0,0,279,276,1,0,0,0,279,
277,1,0,0,0,279,278,1,0,0,0,280,25,1,0,0,0,281,282,3,156,78,0,282,27,1,0,
0,0,283,287,3,30,15,0,284,287,3,44,22,0,285,287,3,50,25,0,286,283,1,0,0,
0,286,284,1,0,0,0,286,285,1,0,0,0,287,29,1,0,0,0,288,290,5,11,0,0,289,291,
3,32,16,0,290,289,1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,294,3,42,21,
0,293,292,1,0,0,0,293,294,1,0,0,0,294,295,1,0,0,0,295,297,3,4,2,0,296,298,
3,16,8,0,297,296,1,0,0,0,297,298,1,0,0,0,298,299,1,0,0,0,299,301,5,14,0,
0,300,302,3,82,41,0,301,300,1,0,0,0,301,302,1,0,0,0,302,304,1,0,0,0,303,
305,3,4,2,0,304,303,1,0,0,0,304,305,1,0,0,0,305,31,1,0,0,0,306,308,3,22,
11,0,307,309,3,34,17,0,308,307,1,0,0,0,308,309,1,0,0,0,309,313,1,0,0,0,310,
313,5,22,0,0,311,313,3,156,78,0,312,306,1,0,0,0,312,310,1,0,0,0,312,311,
1,0,0,0,313,33,1,0,0,0,314,316,3,36,18,0,315,317,3,38,19,0,316,315,1,0,0,
0,316,317,1,0,0,0,317,319,1,0,0,0,318,320,3,40,20,0,319,318,1,0,0,0,319,
320,1,0,0,0,320,357,1,0,0,0,321,323,3,36,18,0,322,324,3,40,20,0,323,322,
1,0,0,0,323,324,1,0,0,0,324,326,1,0,0,0,325,327,3,38,19,0,326,325,1,0,0,
0,326,327,1,0,0,0,327,357,1,0,0,0,328,330,3,38,19,0,329,331,3,36,18,0,330,
329,1,0,0,0,330,331,1,0,0,0,331,333,1,0,0,0,332,334,3,40,20,0,333,332,1,
0,0,0,333,334,1,0,0,0,334,357,1,0,0,0,335,337,3,38,19,0,336,338,3,40,20,
0,337,336,1,0,0,0,337,338,1,0,0,0,338,340,1,0,0,0,339,341,3,36,18,0,340,
339,1,0,0,0,340,341,1,0,0,0,341,357,1,0,0,0,342,344,3,40,20,0,343,345,3,
36,18,0,344,343,1,0,0,0,344,345,1,0,0,0,345,347,1,0,0,0,346,348,3,38,19,
0,347,346,1,0,0,0,347,348,1,0,0,0,348,357,1,0,0,0,349,351,3,40,20,0,350,
352,3,38,19,0,351,350,1,0,0,0,351,352,1,0,0,0,352,354,1,0,0,0,353,355,3,
36,18,0,354,353,1,0,0,0,354,355,1,0,0,0,355,357,1,0,0,0,356,314,1,0,0,0,
356,321,1,0,0,0,356,328,1,0,0,0,356,335,1,0,0,0,356,342,1,0,0,0,356,349,
1,0,0,0,357,35,1,0,0,0,358,359,5,51,0,0,359,360,3,156,78,0,360,37,1,0,0,
0,361,362,5,8,0,0,362,363,3,156,78,0,363,39,1,0,0,0,364,365,5,21,0,0,365,
366,3,156,78,0,366,41,1,0,0,0,367,368,5,59,0,0,368,372,3,156,78,0,369,370,
5,53,0,0,370,372,3,156,78,0,371,367,1,0,0,0,371,369,1,0,0,0,372,43,1,0,0,
0,373,374,5,26,0,0,374,378,3,156,78,0,375,377,3,8,4,0,376,375,1,0,0,0,377,
380,1,0,0,0,378,376,1,0,0,0,378,379,1,0,0,0,379,381,1,0,0,0,380,378,1,0,
0,0,381,389,3,46,23,0,382,384,3,8,4,0,383,382,1,0,0,0,384,385,1,0,0,0,385,
383,1,0,0,0,385,386,1,0,0,0,386,387,1,0,0,0,387,388,3,48,24,0,388,390,1,
0,0,0,389,383,1,0,0,0,389,390,1,0,0,0,390,45,1,0,0,0,391,393,5,50,0,0,392,
394,3,4,2,0,393,392,1,0,0,0,393,394,1,0,0,0,394,395,1,0,0,0,395,396,3,18,
9,0,396,47,1,0,0,0,397,399,5,13,0,0,398,400,3,4,2,0,399,398,1,0,0,0,399,
400,1,0,0,0,400,401,1,0,0,0,401,402,3,18,9,0,402,49,1,0,0,0,403,405,5,46,
0,0,404,406,3,8,4,0,405,404,1,0,0,0,406,407,1,0,0,0,407,405,1,0,0,0,407,
408,1,0,0,0,408,409,1,0,0,0,409,410,3,52,26,0,410,412,5,14,0,0,411,413,3,
4,2,0,412,411,1,0,0,0,412,413,1,0,0,0,413,51,1,0,0,0,414,416,3,54,27,0,415,
414,1,0,0,0,416,417,1,0,0,0,417,415,1,0,0,0,417,418,1,0,0,0,418,420,1,0,
0,0,419,421,3,56,28,0,420,419,1,0,0,0,420,421,1,0,0,0,421,53,1,0,0,0,422,
423,5,58,0,0,423,427,3,156,78,0,424,426,3,8,4,0,425,424,1,0,0,0,426,429,
1,0,0,0,427,425,1,0,0,0,427,428,1,0,0,0,428,430,1,0,0,0,429,427,1,0,0,0,
430,431,3,46,23,0,431,55,1,0,0,0,432,436,5,37,0,0,433,435,3,8,4,0,434,433,
1,0,0,0,435,438,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,440,1,0,0,0,
438,436,1,0,0,0,439,441,3,16,8,0,440,439,1,0,0,0,440,441,1,0,0,0,441,57,
1,0,0,0,442,448,5,6,0,0,443,445,3,60,30,0,444,446,3,156,78,0,445,444,1,0,
0,0,445,446,1,0,0,0,446,449,1,0,0,0,447,449,3,62,31,0,448,443,1,0,0,0,448,
447,1,0,0,0,448,449,1,0,0,0,449,59,1,0,0,0,450,453,3,154,77,0,451,453,5,
67,0,0,452,450,1,0,0,0,452,451,1,0,0,0,453,61,1,0,0,0,454,455,5,55,0,0,455,
456,3,156,78,0,456,63,1,0,0,0,457,459,5,7,0,0,458,460,3,136,68,0,459,458,
1,0,0,0,459,460,1,0,0,0,460,65,1,0,0,0,461,467,5,9,0,0,462,468,3,68,34,0,
463,465,3,188,94,0,464,466,3,72,36,0,465,464,1,0,0,0,465,466,1,0,0,0,466,
468,1,0,0,0,467,462,1,0,0,0,467,463,1,0,0,0,468,67,1,0,0,0,469,470,5,35,
0,0,470,473,3,70,35,0,471,472,5,30,0,0,472,474,3,188,94,0,473,471,1,0,0,
0,473,474,1,0,0,0,474,478,1,0,0,0,475,476,5,34,0,0,476,478,3,70,35,0,477,
469,1,0,0,0,477,475,1,0,0,0,478,69,1,0,0,0,479,480,7,3,0,0,480,71,1,0,0,
0,481,483,5,61,0,0,482,484,3,74,37,0,483,482,1,0,0,0,483,484,1,0,0,0,484,
485,1,0,0,0,485,488,5,62,0,0,486,488,3,74,37,0,487,481,1,0,0,0,487,486,1,
0,0,0,488,73,1,0,0,0,489,491,5,99,0,0,490,489,1,0,0,0,491,494,1,0,0,0,492,
490,1,0,0,0,492,493,1,0,0,0,493,495,1,0,0,0,494,492,1,0,0,0,495,504,3,156,
78,0,496,498,5,99,0,0,497,496,1,0,0,0,498,499,1,0,0,0,499,497,1,0,0,0,499,
500,1,0,0,0,500,501,1,0,0,0,501,503,3,156,78,0,502,497,1,0,0,0,503,506,1,
0,0,0,504,502,1,0,0,0,504,505,1,0,0,0,505,75,1,0,0,0,506,504,1,0,0,0,507,
508,5,12,0,0,508,509,3,78,39,0,509,77,1,0,0,0,510,513,3,80,40,0,511,513,
3,82,41,0,512,510,1,0,0,0,512,511,1,0,0,0,513,514,1,0,0,0,514,512,1,0,0,
0,514,515,1,0,0,0,515,79,1,0,0,0,516,517,5,61,0,0,517,518,3,82,41,0,518,
519,5,62,0,0,519,81,1,0,0,0,520,521,7,4,0,0,521,83,1,0,0,0,522,524,5,17,
0,0,523,525,3,156,78,0,524,523,1,0,0,0,524,525,1,0,0,0,525,85,1,0,0,0,526,
527,5,27,0,0,527,528,3,156,78,0,528,87,1,0,0,0,529,531,5,28,0,0,530,532,
3,82,41,0,531,530,1,0,0,0,531,532,1,0,0,0,532,89,1,0,0,0,533,535,5,29,0,
0,534,536,3,82,41,0,535,534,1,0,0,0,535,536,1,0,0,0,536,91,1,0,0,0,537,538,
5,31,0,0,538,93,1,0,0,0,539,543,5,33,0,0,540,544,3,96,48,0,541,544,3,98,
49,0,542,544,3,100,50,0,543,540,1,0,0,0,543,541,1,0,0,0,543,542,1,0,0,0,
544,95,1,0,0,0,545,547,5,10,0,0,546,548,3,156,78,0,547,546,1,0,0,0,547,548,
1,0,0,0,548,97,1,0,0,0,549,554,5,23,0,0,550,555,5,15,0,0,551,555,5,45,0,
0,552,555,3,62,31,0,553,555,3,156,78,0,554,550,1,0,0,0,554,551,1,0,0,0,554,
552,1,0,0,0,554,553,1,0,0,0,554,555,1,0,0,0,555,99,1,0,0,0,556,558,5,24,
0,0,557,559,3,156,78,0,558,557,1,0,0,0,558,559,1,0,0,0,559,101,1,0,0,0,560,
561,5,36,0,0,561,562,3,156,78,0,562,103,1,0,0,0,563,565,5,38,0,0,564,566,
5,54,0,0,565,564,1,0,0,0,565,566,1,0,0,0,566,567,1,0,0,0,567,569,3,106,53,
0,568,570,3,136,68,0,569,568,1,0,0,0,569,570,1,0,0,0,570,105,1,0,0,0,571,
575,3,108,54,0,572,575,3,110,55,0,573,575,3,112,56,0,574,571,1,0,0,0,574,
572,1,0,0,0,574,573,1,0,0,0,575,107,1,0,0,0,576,577,7,5,0,0,577,109,1,0,
0,0,578,580,5,55,0,0,579,581,3,156,78,0,580,579,1,0,0,0,580,581,1,0,0,0,
581,582,1,0,0,0,582,583,5,60,0,0,583,111,1,0,0,0,584,585,5,56,0,0,585,586,
3,82,41,0,586,113,1,0,0,0,587,590,5,39,0,0,588,589,5,18,0,0,589,591,3,78,
39,0,590,588,1,0,0,0,590,591,1,0,0,0,591,115,1,0,0,0,592,594,5,40,0,0,593,
595,3,136,68,0,594,593,1,0,0,0,594,595,1,0,0,0,595,117,1,0,0,0,596,598,5,
41,0,0,597,599,3,156,78,0,598,597,1,0,0,0,598,599,1,0,0,0,599,119,1,0,0,
0,600,602,5,42,0,0,601,603,3,156,78,0,602,601,1,0,0,0,602,603,1,0,0,0,603,
121,1,0,0,0,604,606,5,43,0,0,605,607,3,156,78,0,606,605,1,0,0,0,606,607,
1,0,0,0,607,123,1,0,0,0,608,610,5,44,0,0,609,611,3,156,78,0,610,609,1,0,
0,0,610,611,1,0,0,0,611,125,1,0,0,0,612,616,5,47,0,0,613,617,3,128,64,0,
614,617,3,62,31,0,615,617,3,60,30,0,616,613,1,0,0,0,616,614,1,0,0,0,616,
615,1,0,0,0,617,127,1,0,0,0,618,619,5,35,0,0,619,622,3,130,65,0,620,621,
5,30,0,0,621,623,3,188,94,0,622,620,1,0,0,0,622,623,1,0,0,0,623,627,1,0,
0,0,624,625,5,34,0,0,625,627,3,130,65,0,626,618,1,0,0,0,626,624,1,0,0,0,
627,129,1,0,0,0,628,632,3,70,35,0,629,632,5,32,0,0,630,632,5,49,0,0,631,
628,1,0,0,0,631,629,1,0,0,0,631,630,1,0,0,0,632,131,1,0,0,0,633,640,5,52,
0,0,634,641,3,60,30,0,635,641,3,62,31,0,636,641,3,156,78,0,637,641,5,16,
0,0,638,641,5,20,0,0,639,641,5,34,0,0,640,634,1,0,0,0,640,635,1,0,0,0,640,
636,1,0,0,0,640,637,1,0,0,0,640,638,1,0,0,0,640,639,1,0,0,0,641,133,1,0,
0,0,642,644,5,54,0,0,643,645,3,82,41,0,644,643,1,0,0,0,645,646,1,0,0,0,646,
644,1,0,0,0,646,647,1,0,0,0,647,135,1,0,0,0,648,650,5,99,0,0,649,648,1,0,
0,0,650,653,1,0,0,0,651,649,1,0,0,0,651,652,1,0,0,0,652,654,1,0,0,0,653,
651,1,0,0,0,654,663,3,138,69,0,655,657,5,99,0,0,656,655,1,0,0,0,657,658,
1,0,0,0,658,656,1,0,0,0,658,659,1,0,0,0,659,660,1,0,0,0,660,662,3,138,69,
0,661,656,1,0,0,0,662,665,1,0,0,0,663,661,1,0,0,0,663,664,1,0,0,0,664,137,
1,0,0,0,665,663,1,0,0,0,666,669,3,142,71,0,667,669,3,140,70,0,668,666,1,
0,0,0,668,667,1,0,0,0,669,670,1,0,0,0,670,668,1,0,0,0,670,671,1,0,0,0,671,
139,1,0,0,0,672,673,7,6,0,0,673,141,1,0,0,0,674,677,3,144,72,0,675,677,3,
146,73,0,676,674,1,0,0,0,676,675,1,0,0,0,677,143,1,0,0,0,678,681,5,67,0,
0,679,681,3,80,40,0,680,678,1,0,0,0,680,679,1,0,0,0,681,145,1,0,0,0,682,
685,3,148,74,0,683,685,3,152,76,0,684,682,1,0,0,0,684,683,1,0,0,0,685,147,
1,0,0,0,686,690,5,64,0,0,687,688,5,69,0,0,688,690,3,150,75,0,689,686,1,0,
0,0,689,687,1,0,0,0,690,149,1,0,0,0,691,694,5,64,0,0,692,694,3,80,40,0,693,
691,1,0,0,0,693,692,1,0,0,0,694,151,1,0,0,0,695,696,7,7,0,0,696,697,3,150,
75,0,697,153,1,0,0,0,698,702,3,82,41,0,699,702,5,65,0,0,700,702,5,64,0,0,
701,698,1,0,0,0,701,699,1,0,0,0,701,700,1,0,0,0,702,155,1,0,0,0,703,709,
3,160,80,0,704,705,3,158,79,0,705,706,3,160,80,0,706,708,1,0,0,0,707,704,
1,0,0,0,708,711,1,0,0,0,709,707,1,0,0,0,709,710,1,0,0,0,710,157,1,0,0,0,
711,709,1,0,0,0,712,713,7,8,0,0,713,159,1,0,0,0,714,719,3,162,81,0,715,716,
5,80,0,0,716,718,3,162,81,0,717,715,1,0,0,0,718,721,1,0,0,0,719,717,1,0,
0,0,719,720,1,0,0,0,720,161,1,0,0,0,721,719,1,0,0,0,722,728,3,170,85,0,723,
724,3,164,82,0,724,725,3,170,85,0,725,727,1,0,0,0,726,723,1,0,0,0,727,730,
1,0,0,0,728,726,1,0,0,0,728,729,1,0,0,0,729,163,1,0,0,0,730,728,1,0,0,0,
731,734,3,166,83,0,732,734,3,168,84,0,733,731,1,0,0,0,733,732,1,0,0,0,734,
165,1,0,0,0,735,736,7,9,0,0,736,167,1,0,0,0,737,738,7,10,0,0,738,169,1,0,
0,0,739,746,3,172,86,0,740,742,5,68,0,0,741,740,1,0,0,0,741,742,1,0,0,0,
742,743,1,0,0,0,743,745,3,172,86,0,744,741,1,0,0,0,745,748,1,0,0,0,746,744,
1,0,0,0,746,747,1,0,0,0,747,171,1,0,0,0,748,746,1,0,0,0,749,755,3,176,88,
0,750,751,3,174,87,0,751,752,3,176,88,0,752,754,1,0,0,0,753,750,1,0,0,0,
754,757,1,0,0,0,755,753,1,0,0,0,755,756,1,0,0,0,756,173,1,0,0,0,757,755,
1,0,0,0,758,759,7,7,0,0,759,175,1,0,0,0,760,766,3,180,90,0,761,762,3,178,
89,0,762,763,3,180,90,0,763,765,1,0,0,0,764,761,1,0,0,0,765,768,1,0,0,0,
766,764,1,0,0,0,766,767,1,0,0,0,767,177,1,0,0,0,768,766,1,0,0,0,769,770,
7,11,0,0,770,179,1,0,0,0,771,776,3,182,91,0,772,773,5,76,0,0,773,775,3,182,
91,0,774,772,1,0,0,0,775,778,1,0,0,0,776,774,1,0,0,0,776,777,1,0,0,0,777,
181,1,0,0,0,778,776,1,0,0,0,779,781,7,12,0,0,780,779,1,0,0,0,781,784,1,0,
0,0,782,780,1,0,0,0,782,783,1,0,0,0,783,785,1,0,0,0,784,782,1,0,0,0,785,
786,3,184,92,0,786,183,1,0,0,0,787,795,3,186,93,0,788,789,5,61,0,0,789,790,
3,156,78,0,790,791,5,62,0,0,791,795,1,0,0,0,792,795,3,154,77,0,793,795,5,
67,0,0,794,787,1,0,0,0,794,788,1,0,0,0,794,792,1,0,0,0,794,793,1,0,0,0,795,
185,1,0,0,0,796,797,3,188,94,0,797,798,3,190,95,0,798,187,1,0,0,0,799,808,
5,6,0,0,800,808,5,7,0,0,801,808,5,10,0,0,802,808,5,23,0,0,803,808,5,24,0,
0,804,808,5,52,0,0,805,808,5,55,0,0,806,808,3,60,30,0,807,799,1,0,0,0,807,
800,1,0,0,0,807,801,1,0,0,0,807,802,1,0,0,0,807,803,1,0,0,0,807,804,1,0,
0,0,807,805,1,0,0,0,807,806,1,0,0,0,808,189,1,0,0,0,809,811,5,61,0,0,810,
812,3,74,37,0,811,810,1,0,0,0,811,812,1,0,0,0,812,813,1,0,0,0,813,814,5,
62,0,0,814,191,1,0,0,0,110,196,199,204,209,212,216,225,230,239,244,246,251,
256,279,286,290,293,297,301,304,308,312,316,319,323,326,330,333,337,340,
344,347,351,354,356,371,378,385,389,393,399,407,412,417,420,427,436,440,
445,448,452,459,465,467,473,477,483,487,492,499,504,512,514,524,531,535,
543,547,554,558,565,569,574,580,590,594,598,602,606,610,616,622,626,631,
640,646,651,658,663,668,670,676,680,684,689,693,701,709,719,728,733,741,
746,755,766,776,782,794,807,811];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class RexxParser extends antlr4.Parser {

    static grammarFileName = "RexxParser.g4";
    static literalNames = [  ];
    static symbolicNames = [ null, "STMT_INCLUDE", "LINE_COMMENT", "BLOCK_COMMENT", 
                             "WHISPACES", "CONTINUATION", "KWD_ADDRESS", 
                             "KWD_ARG", "KWD_BY", "KWD_CALL", "KWD_DIGITS", 
                             "KWD_DO", "KWD_DROP", "KWD_ELSE", "KWD_END", 
                             "KWD_ENGINEERING", "KWD_ERROR", "KWD_EXIT", 
                             "KWD_EXPOSE", "KWD_EXTERNAL", "KWD_FAILURE", 
                             "KWD_FOR", "KWD_FOREVER", "KWD_FORM", "KWD_FUZZ", 
                             "KWD_HALT", "KWD_IF", "KWD_INTERPRET", "KWD_ITERATE", 
                             "KWD_LEAVE", "KWD_NAME", "KWD_NOP", "KWD_NOVALUE", 
                             "KWD_NUMERIC", "KWD_OFF", "KWD_ON", "KWD_OPTIONS", 
                             "KWD_OTHERWISE", "KWD_PARSE", "KWD_PROCEDURE", 
                             "KWD_PULL", "KWD_PUSH", "KWD_QUEUE", "KWD_RETURN", 
                             "KWD_SAY", "KWD_SCIENTIFIC", "KWD_SELECT", 
                             "KWD_SIGNAL", "KWD_SOURCE", "KWD_SYNTAX", "KWD_THEN", 
                             "KWD_TO", "KWD_TRACE", "KWD_UNTIL", "KWD_UPPER", 
                             "KWD_VALUE", "KWD_VAR", "KWD_VERSION", "KWD_WHEN", 
                             "KWD_WHILE", "KWD_WITH", "BR_O", "BR_C", "SPECIAL_VAR", 
                             "NUMBER", "CONST_SYMBOL", "VAR_SYMBOL", "STRING", 
                             "CONCAT", "EQ", "PLUS", "MINUS", "MUL", "DIV", 
                             "QUOTINENT", "REMAINDER", "POW", "NOT", "OR", 
                             "XOR", "AND", "CMPS_Eq", "CMPS_Neq", "CMPS_M", 
                             "CMPS_L", "CMPS_MEq", "CMPS_LEq", "CMPS_NM", 
                             "CMPS_NL", "CMP_NEq", "CMP_LM", "CMP_ML", "CMP_M", 
                             "CMP_L", "CMP_MEq", "CMP_LEq", "CMP_NM", "CMP_NL", 
                             "STOP", "COMMA", "COLON", "EOL", "SEMICOL", 
                             "UNSUPPORTED_CHARACTER" ];
    static ruleNames = [ "file_", "program_", "ncl", "null_clause", "delim", 
                         "label_list", "label", "include_statement", "instruction_list", 
                         "instruction", "single_instruction", "assignment", 
                         "keyword_instruction", "command_", "group_", "do_", 
                         "do_rep", "do_cnt", "dot", "dob", "dof", "do_cond", 
                         "if_", "then_", "else_", "select_", "select_body", 
                         "when_", "otherwise_", "address_", "taken_constant", 
                         "valueexp", "arg_", "call_", "callon_spec", "callable_condition", 
                         "call_parms", "expression_list", "drop_", "variable_list", 
                         "vref", "var_symbol", "exit_", "interpret_", "iterate_", 
                         "leave_", "nop_", "numeric_", "numeric_digits", 
                         "numeric_form", "numeric_fuzz", "options_", "parse_", 
                         "parse_type", "parse_key", "parse_value", "parse_var", 
                         "procedure_", "pull_", "push_", "queue_", "return_", 
                         "say_", "signal_", "signal_spec", "condition", 
                         "trace_", "upper_", "template_list", "template_", 
                         "target_", "trigger_", "pattern_", "positional_", 
                         "absolute_positional", "position_", "relative_positional", 
                         "symbol", "expression", "or_operator", "and_expression", 
                         "comparison", "comparison_operator", "normal_compare", 
                         "strict_compare", "concatenation", "addition", 
                         "additive_operator", "multiplication", "multiplicative_operator", 
                         "power_expression", "prefix_expression", "term", 
                         "function_", "function_name", "function_parameters" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = RexxParser.ruleNames;
        this.literalNames = RexxParser.literalNames;
        this.symbolicNames = RexxParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	file_() {
	    let localctx = new File_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, RexxParser.RULE_file_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 192;
	        this.program_();
	        this.state = 193;
	        this.match(RexxParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	program_() {
	    let localctx = new Program_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, RexxParser.RULE_program_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 196;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        if(la_===1) {
	            this.state = 195;
	            this.ncl();

	        }
	        this.state = 199;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << RexxParser.KWD_ADDRESS) | (1 << RexxParser.KWD_ARG) | (1 << RexxParser.KWD_CALL) | (1 << RexxParser.KWD_DIGITS) | (1 << RexxParser.KWD_DO) | (1 << RexxParser.KWD_DROP) | (1 << RexxParser.KWD_EXIT) | (1 << RexxParser.KWD_FORM) | (1 << RexxParser.KWD_FUZZ) | (1 << RexxParser.KWD_IF) | (1 << RexxParser.KWD_INTERPRET) | (1 << RexxParser.KWD_ITERATE) | (1 << RexxParser.KWD_LEAVE) | (1 << RexxParser.KWD_NOP))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (RexxParser.KWD_NUMERIC - 33)) | (1 << (RexxParser.KWD_OPTIONS - 33)) | (1 << (RexxParser.KWD_PARSE - 33)) | (1 << (RexxParser.KWD_PROCEDURE - 33)) | (1 << (RexxParser.KWD_PULL - 33)) | (1 << (RexxParser.KWD_PUSH - 33)) | (1 << (RexxParser.KWD_QUEUE - 33)) | (1 << (RexxParser.KWD_RETURN - 33)) | (1 << (RexxParser.KWD_SAY - 33)) | (1 << (RexxParser.KWD_SELECT - 33)) | (1 << (RexxParser.KWD_SIGNAL - 33)) | (1 << (RexxParser.KWD_TRACE - 33)) | (1 << (RexxParser.KWD_UPPER - 33)) | (1 << (RexxParser.KWD_VALUE - 33)) | (1 << (RexxParser.BR_O - 33)) | (1 << (RexxParser.SPECIAL_VAR - 33)) | (1 << (RexxParser.NUMBER - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (RexxParser.CONST_SYMBOL - 65)) | (1 << (RexxParser.VAR_SYMBOL - 65)) | (1 << (RexxParser.STRING - 65)) | (1 << (RexxParser.PLUS - 65)) | (1 << (RexxParser.MINUS - 65)) | (1 << (RexxParser.NOT - 65)))) !== 0)) {
	            this.state = 198;
	            this.instruction_list();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ncl() {
	    let localctx = new NclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, RexxParser.RULE_ncl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 202; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 201;
	        		this.null_clause();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 204; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,2, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	null_clause() {
	    let localctx = new Null_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, RexxParser.RULE_null_clause);
	    try {
	        this.state = 216;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case RexxParser.EOL:
	        case RexxParser.SEMICOL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 207; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 206;
	            		this.delim();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 209; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,3, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 212;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	            if(la_===1) {
	                this.state = 211;
	                this.label_list();

	            }
	            break;
	        case RexxParser.NUMBER:
	        case RexxParser.CONST_SYMBOL:
	        case RexxParser.VAR_SYMBOL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 214;
	            this.label_list();
	            break;
	        case RexxParser.STMT_INCLUDE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 215;
	            this.include_statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delim() {
	    let localctx = new DelimContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, RexxParser.RULE_delim);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 218;
	        _la = this._input.LA(1);
	        if(!(_la===RexxParser.EOL || _la===RexxParser.SEMICOL)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	label_list() {
	    let localctx = new Label_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, RexxParser.RULE_label_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 228; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 220;
	        		this.label();
	        		this.state = 221;
	        		this.match(RexxParser.COLON);
	        		this.state = 225;
	        		this._errHandler.sync(this);
	        		var _alt = this._interp.adaptivePredict(this._input,6,this._ctx)
	        		while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	        		    if(_alt===1) {
	        		        this.state = 222;
	        		        this.delim(); 
	        		    }
	        		    this.state = 227;
	        		    this._errHandler.sync(this);
	        		    _alt = this._interp.adaptivePredict(this._input,6,this._ctx);
	        		}

	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 230; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,7, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	label() {
	    let localctx = new LabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, RexxParser.RULE_label);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 232;
	        _la = this._input.LA(1);
	        if(!(((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (RexxParser.NUMBER - 64)) | (1 << (RexxParser.CONST_SYMBOL - 64)) | (1 << (RexxParser.VAR_SYMBOL - 64)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	include_statement() {
	    let localctx = new Include_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, RexxParser.RULE_include_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 234;
	        this.match(RexxParser.STMT_INCLUDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	instruction_list() {
	    let localctx = new Instruction_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, RexxParser.RULE_instruction_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 237; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 236;
	            this.instruction();
	            this.state = 239; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << RexxParser.KWD_ADDRESS) | (1 << RexxParser.KWD_ARG) | (1 << RexxParser.KWD_CALL) | (1 << RexxParser.KWD_DIGITS) | (1 << RexxParser.KWD_DO) | (1 << RexxParser.KWD_DROP) | (1 << RexxParser.KWD_EXIT) | (1 << RexxParser.KWD_FORM) | (1 << RexxParser.KWD_FUZZ) | (1 << RexxParser.KWD_IF) | (1 << RexxParser.KWD_INTERPRET) | (1 << RexxParser.KWD_ITERATE) | (1 << RexxParser.KWD_LEAVE) | (1 << RexxParser.KWD_NOP))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (RexxParser.KWD_NUMERIC - 33)) | (1 << (RexxParser.KWD_OPTIONS - 33)) | (1 << (RexxParser.KWD_PARSE - 33)) | (1 << (RexxParser.KWD_PROCEDURE - 33)) | (1 << (RexxParser.KWD_PULL - 33)) | (1 << (RexxParser.KWD_PUSH - 33)) | (1 << (RexxParser.KWD_QUEUE - 33)) | (1 << (RexxParser.KWD_RETURN - 33)) | (1 << (RexxParser.KWD_SAY - 33)) | (1 << (RexxParser.KWD_SELECT - 33)) | (1 << (RexxParser.KWD_SIGNAL - 33)) | (1 << (RexxParser.KWD_TRACE - 33)) | (1 << (RexxParser.KWD_UPPER - 33)) | (1 << (RexxParser.KWD_VALUE - 33)) | (1 << (RexxParser.BR_O - 33)) | (1 << (RexxParser.SPECIAL_VAR - 33)) | (1 << (RexxParser.NUMBER - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (RexxParser.CONST_SYMBOL - 65)) | (1 << (RexxParser.VAR_SYMBOL - 65)) | (1 << (RexxParser.STRING - 65)) | (1 << (RexxParser.PLUS - 65)) | (1 << (RexxParser.MINUS - 65)) | (1 << (RexxParser.NOT - 65)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	instruction() {
	    let localctx = new InstructionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, RexxParser.RULE_instruction);
	    try {
	        this.state = 246;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case RexxParser.KWD_DO:
	        case RexxParser.KWD_IF:
	        case RexxParser.KWD_SELECT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 241;
	            this.group_();
	            break;
	        case RexxParser.KWD_ADDRESS:
	        case RexxParser.KWD_ARG:
	        case RexxParser.KWD_CALL:
	        case RexxParser.KWD_DIGITS:
	        case RexxParser.KWD_DROP:
	        case RexxParser.KWD_EXIT:
	        case RexxParser.KWD_FORM:
	        case RexxParser.KWD_FUZZ:
	        case RexxParser.KWD_INTERPRET:
	        case RexxParser.KWD_ITERATE:
	        case RexxParser.KWD_LEAVE:
	        case RexxParser.KWD_NOP:
	        case RexxParser.KWD_NUMERIC:
	        case RexxParser.KWD_OPTIONS:
	        case RexxParser.KWD_PARSE:
	        case RexxParser.KWD_PROCEDURE:
	        case RexxParser.KWD_PULL:
	        case RexxParser.KWD_PUSH:
	        case RexxParser.KWD_QUEUE:
	        case RexxParser.KWD_RETURN:
	        case RexxParser.KWD_SAY:
	        case RexxParser.KWD_SIGNAL:
	        case RexxParser.KWD_TRACE:
	        case RexxParser.KWD_UPPER:
	        case RexxParser.KWD_VALUE:
	        case RexxParser.BR_O:
	        case RexxParser.SPECIAL_VAR:
	        case RexxParser.NUMBER:
	        case RexxParser.CONST_SYMBOL:
	        case RexxParser.VAR_SYMBOL:
	        case RexxParser.STRING:
	        case RexxParser.PLUS:
	        case RexxParser.MINUS:
	        case RexxParser.NOT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 242;
	            this.single_instruction();
	            this.state = 244;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	            if(la_===1) {
	                this.state = 243;
	                this.ncl();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	single_instruction() {
	    let localctx = new Single_instructionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, RexxParser.RULE_single_instruction);
	    try {
	        this.state = 251;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 248;
	            this.assignment();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 249;
	            this.keyword_instruction();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 250;
	            this.command_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignment() {
	    let localctx = new AssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, RexxParser.RULE_assignment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 253;
	        _la = this._input.LA(1);
	        if(!(((((_la - 63)) & ~0x1f) == 0 && ((1 << (_la - 63)) & ((1 << (RexxParser.SPECIAL_VAR - 63)) | (1 << (RexxParser.CONST_SYMBOL - 63)) | (1 << (RexxParser.VAR_SYMBOL - 63)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 254;
	        this.match(RexxParser.EQ);
	        this.state = 256;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        if(la_===1) {
	            this.state = 255;
	            this.expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword_instruction() {
	    let localctx = new Keyword_instructionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, RexxParser.RULE_keyword_instruction);
	    try {
	        this.state = 279;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case RexxParser.KWD_ADDRESS:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 258;
	            this.address_();
	            break;
	        case RexxParser.KWD_ARG:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 259;
	            this.arg_();
	            break;
	        case RexxParser.KWD_CALL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 260;
	            this.call_();
	            break;
	        case RexxParser.KWD_DROP:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 261;
	            this.drop_();
	            break;
	        case RexxParser.KWD_EXIT:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 262;
	            this.exit_();
	            break;
	        case RexxParser.KWD_INTERPRET:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 263;
	            this.interpret_();
	            break;
	        case RexxParser.KWD_ITERATE:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 264;
	            this.iterate_();
	            break;
	        case RexxParser.KWD_LEAVE:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 265;
	            this.leave_();
	            break;
	        case RexxParser.KWD_NOP:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 266;
	            this.nop_();
	            break;
	        case RexxParser.KWD_NUMERIC:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 267;
	            this.numeric_();
	            break;
	        case RexxParser.KWD_OPTIONS:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 268;
	            this.options_();
	            break;
	        case RexxParser.KWD_PARSE:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 269;
	            this.parse_();
	            break;
	        case RexxParser.KWD_PROCEDURE:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 270;
	            this.procedure_();
	            break;
	        case RexxParser.KWD_PULL:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 271;
	            this.pull_();
	            break;
	        case RexxParser.KWD_PUSH:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 272;
	            this.push_();
	            break;
	        case RexxParser.KWD_QUEUE:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 273;
	            this.queue_();
	            break;
	        case RexxParser.KWD_RETURN:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 274;
	            this.return_();
	            break;
	        case RexxParser.KWD_SAY:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 275;
	            this.say_();
	            break;
	        case RexxParser.KWD_SIGNAL:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 276;
	            this.signal_();
	            break;
	        case RexxParser.KWD_TRACE:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 277;
	            this.trace_();
	            break;
	        case RexxParser.KWD_UPPER:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 278;
	            this.upper_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	command_() {
	    let localctx = new Command_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, RexxParser.RULE_command_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 281;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	group_() {
	    let localctx = new Group_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, RexxParser.RULE_group_);
	    try {
	        this.state = 286;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case RexxParser.KWD_DO:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 283;
	            this.do_();
	            break;
	        case RexxParser.KWD_IF:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 284;
	            this.if_();
	            break;
	        case RexxParser.KWD_SELECT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 285;
	            this.select_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	do_() {
	    let localctx = new Do_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, RexxParser.RULE_do_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 288;
	        this.match(RexxParser.KWD_DO);
	        this.state = 290;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        if(la_===1) {
	            this.state = 289;
	            this.do_rep();

	        }
	        this.state = 293;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===RexxParser.KWD_UNTIL || _la===RexxParser.KWD_WHILE) {
	            this.state = 292;
	            this.do_cond();
	        }

	        this.state = 295;
	        this.ncl();
	        this.state = 297;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << RexxParser.KWD_ADDRESS) | (1 << RexxParser.KWD_ARG) | (1 << RexxParser.KWD_CALL) | (1 << RexxParser.KWD_DIGITS) | (1 << RexxParser.KWD_DO) | (1 << RexxParser.KWD_DROP) | (1 << RexxParser.KWD_EXIT) | (1 << RexxParser.KWD_FORM) | (1 << RexxParser.KWD_FUZZ) | (1 << RexxParser.KWD_IF) | (1 << RexxParser.KWD_INTERPRET) | (1 << RexxParser.KWD_ITERATE) | (1 << RexxParser.KWD_LEAVE) | (1 << RexxParser.KWD_NOP))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (RexxParser.KWD_NUMERIC - 33)) | (1 << (RexxParser.KWD_OPTIONS - 33)) | (1 << (RexxParser.KWD_PARSE - 33)) | (1 << (RexxParser.KWD_PROCEDURE - 33)) | (1 << (RexxParser.KWD_PULL - 33)) | (1 << (RexxParser.KWD_PUSH - 33)) | (1 << (RexxParser.KWD_QUEUE - 33)) | (1 << (RexxParser.KWD_RETURN - 33)) | (1 << (RexxParser.KWD_SAY - 33)) | (1 << (RexxParser.KWD_SELECT - 33)) | (1 << (RexxParser.KWD_SIGNAL - 33)) | (1 << (RexxParser.KWD_TRACE - 33)) | (1 << (RexxParser.KWD_UPPER - 33)) | (1 << (RexxParser.KWD_VALUE - 33)) | (1 << (RexxParser.BR_O - 33)) | (1 << (RexxParser.SPECIAL_VAR - 33)) | (1 << (RexxParser.NUMBER - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (RexxParser.CONST_SYMBOL - 65)) | (1 << (RexxParser.VAR_SYMBOL - 65)) | (1 << (RexxParser.STRING - 65)) | (1 << (RexxParser.PLUS - 65)) | (1 << (RexxParser.MINUS - 65)) | (1 << (RexxParser.NOT - 65)))) !== 0)) {
	            this.state = 296;
	            this.instruction_list();
	        }

	        this.state = 299;
	        this.match(RexxParser.KWD_END);
	        this.state = 301;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        if(la_===1) {
	            this.state = 300;
	            this.var_symbol();

	        }
	        this.state = 304;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        if(la_===1) {
	            this.state = 303;
	            this.ncl();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	do_rep() {
	    let localctx = new Do_repContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, RexxParser.RULE_do_rep);
	    var _la = 0; // Token type
	    try {
	        this.state = 312;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 306;
	            this.assignment();
	            this.state = 308;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===RexxParser.KWD_BY || _la===RexxParser.KWD_FOR || _la===RexxParser.KWD_TO) {
	                this.state = 307;
	                this.do_cnt();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 310;
	            this.match(RexxParser.KWD_FOREVER);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 311;
	            this.expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	do_cnt() {
	    let localctx = new Do_cntContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, RexxParser.RULE_do_cnt);
	    var _la = 0; // Token type
	    try {
	        this.state = 356;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 314;
	            this.dot();
	            this.state = 316;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===RexxParser.KWD_BY) {
	                this.state = 315;
	                this.dob();
	            }

	            this.state = 319;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===RexxParser.KWD_FOR) {
	                this.state = 318;
	                this.dof();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 321;
	            this.dot();
	            this.state = 323;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===RexxParser.KWD_FOR) {
	                this.state = 322;
	                this.dof();
	            }

	            this.state = 326;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===RexxParser.KWD_BY) {
	                this.state = 325;
	                this.dob();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 328;
	            this.dob();
	            this.state = 330;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===RexxParser.KWD_TO) {
	                this.state = 329;
	                this.dot();
	            }

	            this.state = 333;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===RexxParser.KWD_FOR) {
	                this.state = 332;
	                this.dof();
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 335;
	            this.dob();
	            this.state = 337;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===RexxParser.KWD_FOR) {
	                this.state = 336;
	                this.dof();
	            }

	            this.state = 340;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===RexxParser.KWD_TO) {
	                this.state = 339;
	                this.dot();
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 342;
	            this.dof();
	            this.state = 344;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===RexxParser.KWD_TO) {
	                this.state = 343;
	                this.dot();
	            }

	            this.state = 347;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===RexxParser.KWD_BY) {
	                this.state = 346;
	                this.dob();
	            }

	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 349;
	            this.dof();
	            this.state = 351;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===RexxParser.KWD_BY) {
	                this.state = 350;
	                this.dob();
	            }

	            this.state = 354;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===RexxParser.KWD_TO) {
	                this.state = 353;
	                this.dot();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dot() {
	    let localctx = new DotContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, RexxParser.RULE_dot);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 358;
	        this.match(RexxParser.KWD_TO);
	        this.state = 359;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dob() {
	    let localctx = new DobContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, RexxParser.RULE_dob);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 361;
	        this.match(RexxParser.KWD_BY);
	        this.state = 362;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dof() {
	    let localctx = new DofContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, RexxParser.RULE_dof);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 364;
	        this.match(RexxParser.KWD_FOR);
	        this.state = 365;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	do_cond() {
	    let localctx = new Do_condContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, RexxParser.RULE_do_cond);
	    try {
	        this.state = 371;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case RexxParser.KWD_WHILE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 367;
	            this.match(RexxParser.KWD_WHILE);
	            this.state = 368;
	            this.expression();
	            break;
	        case RexxParser.KWD_UNTIL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 369;
	            this.match(RexxParser.KWD_UNTIL);
	            this.state = 370;
	            this.expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_() {
	    let localctx = new If_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, RexxParser.RULE_if_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 373;
	        this.match(RexxParser.KWD_IF);
	        this.state = 374;
	        this.expression();
	        this.state = 378;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===RexxParser.EOL || _la===RexxParser.SEMICOL) {
	            this.state = 375;
	            this.delim();
	            this.state = 380;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 381;
	        this.then_();
	        this.state = 389;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        if(la_===1) {
	            this.state = 383; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 382;
	                this.delim();
	                this.state = 385; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===RexxParser.EOL || _la===RexxParser.SEMICOL);
	            this.state = 387;
	            this.else_();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	then_() {
	    let localctx = new Then_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, RexxParser.RULE_then_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 391;
	        this.match(RexxParser.KWD_THEN);
	        this.state = 393;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        if(la_===1) {
	            this.state = 392;
	            this.ncl();

	        }
	        this.state = 395;
	        this.instruction();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	else_() {
	    let localctx = new Else_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, RexxParser.RULE_else_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 397;
	        this.match(RexxParser.KWD_ELSE);
	        this.state = 399;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        if(la_===1) {
	            this.state = 398;
	            this.ncl();

	        }
	        this.state = 401;
	        this.instruction();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_() {
	    let localctx = new Select_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, RexxParser.RULE_select_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 403;
	        this.match(RexxParser.KWD_SELECT);
	        this.state = 405; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 404;
	            this.delim();
	            this.state = 407; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===RexxParser.EOL || _la===RexxParser.SEMICOL);
	        this.state = 409;
	        this.select_body();
	        this.state = 410;
	        this.match(RexxParser.KWD_END);
	        this.state = 412;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        if(la_===1) {
	            this.state = 411;
	            this.ncl();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_body() {
	    let localctx = new Select_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, RexxParser.RULE_select_body);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 415; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 414;
	            this.when_();
	            this.state = 417; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===RexxParser.KWD_WHEN);
	        this.state = 420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===RexxParser.KWD_OTHERWISE) {
	            this.state = 419;
	            this.otherwise_();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	when_() {
	    let localctx = new When_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, RexxParser.RULE_when_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 422;
	        this.match(RexxParser.KWD_WHEN);
	        this.state = 423;
	        this.expression();
	        this.state = 427;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===RexxParser.EOL || _la===RexxParser.SEMICOL) {
	            this.state = 424;
	            this.delim();
	            this.state = 429;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 430;
	        this.then_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	otherwise_() {
	    let localctx = new Otherwise_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, RexxParser.RULE_otherwise_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 432;
	        this.match(RexxParser.KWD_OTHERWISE);
	        this.state = 436;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===RexxParser.EOL || _la===RexxParser.SEMICOL) {
	            this.state = 433;
	            this.delim();
	            this.state = 438;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 440;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << RexxParser.KWD_ADDRESS) | (1 << RexxParser.KWD_ARG) | (1 << RexxParser.KWD_CALL) | (1 << RexxParser.KWD_DIGITS) | (1 << RexxParser.KWD_DO) | (1 << RexxParser.KWD_DROP) | (1 << RexxParser.KWD_EXIT) | (1 << RexxParser.KWD_FORM) | (1 << RexxParser.KWD_FUZZ) | (1 << RexxParser.KWD_IF) | (1 << RexxParser.KWD_INTERPRET) | (1 << RexxParser.KWD_ITERATE) | (1 << RexxParser.KWD_LEAVE) | (1 << RexxParser.KWD_NOP))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (RexxParser.KWD_NUMERIC - 33)) | (1 << (RexxParser.KWD_OPTIONS - 33)) | (1 << (RexxParser.KWD_PARSE - 33)) | (1 << (RexxParser.KWD_PROCEDURE - 33)) | (1 << (RexxParser.KWD_PULL - 33)) | (1 << (RexxParser.KWD_PUSH - 33)) | (1 << (RexxParser.KWD_QUEUE - 33)) | (1 << (RexxParser.KWD_RETURN - 33)) | (1 << (RexxParser.KWD_SAY - 33)) | (1 << (RexxParser.KWD_SELECT - 33)) | (1 << (RexxParser.KWD_SIGNAL - 33)) | (1 << (RexxParser.KWD_TRACE - 33)) | (1 << (RexxParser.KWD_UPPER - 33)) | (1 << (RexxParser.KWD_VALUE - 33)) | (1 << (RexxParser.BR_O - 33)) | (1 << (RexxParser.SPECIAL_VAR - 33)) | (1 << (RexxParser.NUMBER - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (RexxParser.CONST_SYMBOL - 65)) | (1 << (RexxParser.VAR_SYMBOL - 65)) | (1 << (RexxParser.STRING - 65)) | (1 << (RexxParser.PLUS - 65)) | (1 << (RexxParser.MINUS - 65)) | (1 << (RexxParser.NOT - 65)))) !== 0)) {
	            this.state = 439;
	            this.instruction_list();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	address_() {
	    let localctx = new Address_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, RexxParser.RULE_address_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 442;
	        this.match(RexxParser.KWD_ADDRESS);
	        this.state = 448;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        if(la_===1) {
	            this.state = 443;
	            this.taken_constant();
	            this.state = 445;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	            if(la_===1) {
	                this.state = 444;
	                this.expression();

	            }

	        } else if(la_===2) {
	            this.state = 447;
	            this.valueexp();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	taken_constant() {
	    let localctx = new Taken_constantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, RexxParser.RULE_taken_constant);
	    try {
	        this.state = 452;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case RexxParser.SPECIAL_VAR:
	        case RexxParser.NUMBER:
	        case RexxParser.CONST_SYMBOL:
	        case RexxParser.VAR_SYMBOL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 450;
	            this.symbol();
	            break;
	        case RexxParser.STRING:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 451;
	            this.match(RexxParser.STRING);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueexp() {
	    let localctx = new ValueexpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, RexxParser.RULE_valueexp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 454;
	        this.match(RexxParser.KWD_VALUE);
	        this.state = 455;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arg_() {
	    let localctx = new Arg_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, RexxParser.RULE_arg_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 457;
	        this.match(RexxParser.KWD_ARG);
	        this.state = 459;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	        if(la_===1) {
	            this.state = 458;
	            this.template_list();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	call_() {
	    let localctx = new Call_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, RexxParser.RULE_call_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 461;
	        this.match(RexxParser.KWD_CALL);
	        this.state = 467;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case RexxParser.KWD_OFF:
	        case RexxParser.KWD_ON:
	            this.state = 462;
	            this.callon_spec();
	            break;
	        case RexxParser.KWD_ADDRESS:
	        case RexxParser.KWD_ARG:
	        case RexxParser.KWD_DIGITS:
	        case RexxParser.KWD_FORM:
	        case RexxParser.KWD_FUZZ:
	        case RexxParser.KWD_TRACE:
	        case RexxParser.KWD_VALUE:
	        case RexxParser.SPECIAL_VAR:
	        case RexxParser.NUMBER:
	        case RexxParser.CONST_SYMBOL:
	        case RexxParser.VAR_SYMBOL:
	        case RexxParser.STRING:
	            this.state = 463;
	            this.function_name();
	            this.state = 465;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
	            if(la_===1) {
	                this.state = 464;
	                this.call_parms();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callon_spec() {
	    let localctx = new Callon_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, RexxParser.RULE_callon_spec);
	    var _la = 0; // Token type
	    try {
	        this.state = 477;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case RexxParser.KWD_ON:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 469;
	            this.match(RexxParser.KWD_ON);
	            this.state = 470;
	            this.callable_condition();
	            this.state = 473;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===RexxParser.KWD_NAME) {
	                this.state = 471;
	                this.match(RexxParser.KWD_NAME);
	                this.state = 472;
	                this.function_name();
	            }

	            break;
	        case RexxParser.KWD_OFF:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 475;
	            this.match(RexxParser.KWD_OFF);
	            this.state = 476;
	            this.callable_condition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callable_condition() {
	    let localctx = new Callable_conditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, RexxParser.RULE_callable_condition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 479;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << RexxParser.KWD_ERROR) | (1 << RexxParser.KWD_FAILURE) | (1 << RexxParser.KWD_HALT))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	call_parms() {
	    let localctx = new Call_parmsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, RexxParser.RULE_call_parms);
	    var _la = 0; // Token type
	    try {
	        this.state = 487;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 481;
	            this.match(RexxParser.BR_O);
	            this.state = 483;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << RexxParser.KWD_ADDRESS) | (1 << RexxParser.KWD_ARG) | (1 << RexxParser.KWD_DIGITS) | (1 << RexxParser.KWD_FORM) | (1 << RexxParser.KWD_FUZZ))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (RexxParser.KWD_TRACE - 52)) | (1 << (RexxParser.KWD_VALUE - 52)) | (1 << (RexxParser.BR_O - 52)) | (1 << (RexxParser.SPECIAL_VAR - 52)) | (1 << (RexxParser.NUMBER - 52)) | (1 << (RexxParser.CONST_SYMBOL - 52)) | (1 << (RexxParser.VAR_SYMBOL - 52)) | (1 << (RexxParser.STRING - 52)) | (1 << (RexxParser.PLUS - 52)) | (1 << (RexxParser.MINUS - 52)) | (1 << (RexxParser.NOT - 52)))) !== 0) || _la===RexxParser.COMMA) {
	                this.state = 482;
	                this.expression_list();
	            }

	            this.state = 485;
	            this.match(RexxParser.BR_C);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 486;
	            this.expression_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression_list() {
	    let localctx = new Expression_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, RexxParser.RULE_expression_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 492;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===RexxParser.COMMA) {
	            this.state = 489;
	            this.match(RexxParser.COMMA);
	            this.state = 494;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 495;
	        this.expression();
	        this.state = 504;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===RexxParser.COMMA) {
	            this.state = 497; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 496;
	                this.match(RexxParser.COMMA);
	                this.state = 499; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===RexxParser.COMMA);
	            this.state = 501;
	            this.expression();
	            this.state = 506;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_() {
	    let localctx = new Drop_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, RexxParser.RULE_drop_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 507;
	        this.match(RexxParser.KWD_DROP);
	        this.state = 508;
	        this.variable_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable_list() {
	    let localctx = new Variable_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, RexxParser.RULE_variable_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 512; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 512;
	        		this._errHandler.sync(this);
	        		switch(this._input.LA(1)) {
	        		case RexxParser.BR_O:
	        		    this.state = 510;
	        		    this.vref();
	        		    break;
	        		case RexxParser.SPECIAL_VAR:
	        		case RexxParser.VAR_SYMBOL:
	        		    this.state = 511;
	        		    this.var_symbol();
	        		    break;
	        		default:
	        		    throw new antlr4.error.NoViableAltException(this);
	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 514; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,62, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vref() {
	    let localctx = new VrefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, RexxParser.RULE_vref);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 516;
	        this.match(RexxParser.BR_O);
	        this.state = 517;
	        this.var_symbol();
	        this.state = 518;
	        this.match(RexxParser.BR_C);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	var_symbol() {
	    let localctx = new Var_symbolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, RexxParser.RULE_var_symbol);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 520;
	        _la = this._input.LA(1);
	        if(!(_la===RexxParser.SPECIAL_VAR || _la===RexxParser.VAR_SYMBOL)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exit_() {
	    let localctx = new Exit_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, RexxParser.RULE_exit_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 522;
	        this.match(RexxParser.KWD_EXIT);
	        this.state = 524;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        if(la_===1) {
	            this.state = 523;
	            this.expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interpret_() {
	    let localctx = new Interpret_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, RexxParser.RULE_interpret_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 526;
	        this.match(RexxParser.KWD_INTERPRET);
	        this.state = 527;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iterate_() {
	    let localctx = new Iterate_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, RexxParser.RULE_iterate_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 529;
	        this.match(RexxParser.KWD_ITERATE);
	        this.state = 531;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	        if(la_===1) {
	            this.state = 530;
	            this.var_symbol();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	leave_() {
	    let localctx = new Leave_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, RexxParser.RULE_leave_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 533;
	        this.match(RexxParser.KWD_LEAVE);
	        this.state = 535;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	        if(la_===1) {
	            this.state = 534;
	            this.var_symbol();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nop_() {
	    let localctx = new Nop_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, RexxParser.RULE_nop_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 537;
	        this.match(RexxParser.KWD_NOP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numeric_() {
	    let localctx = new Numeric_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, RexxParser.RULE_numeric_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 539;
	        this.match(RexxParser.KWD_NUMERIC);
	        this.state = 543;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case RexxParser.KWD_DIGITS:
	            this.state = 540;
	            this.numeric_digits();
	            break;
	        case RexxParser.KWD_FORM:
	            this.state = 541;
	            this.numeric_form();
	            break;
	        case RexxParser.KWD_FUZZ:
	            this.state = 542;
	            this.numeric_fuzz();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numeric_digits() {
	    let localctx = new Numeric_digitsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, RexxParser.RULE_numeric_digits);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 545;
	        this.match(RexxParser.KWD_DIGITS);
	        this.state = 547;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	        if(la_===1) {
	            this.state = 546;
	            this.expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numeric_form() {
	    let localctx = new Numeric_formContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, RexxParser.RULE_numeric_form);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 549;
	        this.match(RexxParser.KWD_FORM);
	        this.state = 554;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	        if(la_===1) {
	            this.state = 550;
	            this.match(RexxParser.KWD_ENGINEERING);

	        } else if(la_===2) {
	            this.state = 551;
	            this.match(RexxParser.KWD_SCIENTIFIC);

	        } else if(la_===3) {
	            this.state = 552;
	            this.valueexp();

	        } else if(la_===4) {
	            this.state = 553;
	            this.expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numeric_fuzz() {
	    let localctx = new Numeric_fuzzContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, RexxParser.RULE_numeric_fuzz);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 556;
	        this.match(RexxParser.KWD_FUZZ);
	        this.state = 558;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        if(la_===1) {
	            this.state = 557;
	            this.expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	options_() {
	    let localctx = new Options_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, RexxParser.RULE_options_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 560;
	        this.match(RexxParser.KWD_OPTIONS);
	        this.state = 561;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parse_() {
	    let localctx = new Parse_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, RexxParser.RULE_parse_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 563;
	        this.match(RexxParser.KWD_PARSE);
	        this.state = 565;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===RexxParser.KWD_UPPER) {
	            this.state = 564;
	            this.match(RexxParser.KWD_UPPER);
	        }

	        this.state = 567;
	        this.parse_type();
	        this.state = 569;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        if(la_===1) {
	            this.state = 568;
	            this.template_list();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parse_type() {
	    let localctx = new Parse_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, RexxParser.RULE_parse_type);
	    try {
	        this.state = 574;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case RexxParser.KWD_ARG:
	        case RexxParser.KWD_EXTERNAL:
	        case RexxParser.KWD_NUMERIC:
	        case RexxParser.KWD_PULL:
	        case RexxParser.KWD_SOURCE:
	        case RexxParser.KWD_VERSION:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 571;
	            this.parse_key();
	            break;
	        case RexxParser.KWD_VALUE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 572;
	            this.parse_value();
	            break;
	        case RexxParser.KWD_VAR:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 573;
	            this.parse_var();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parse_key() {
	    let localctx = new Parse_keyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, RexxParser.RULE_parse_key);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 576;
	        _la = this._input.LA(1);
	        if(!(_la===RexxParser.KWD_ARG || _la===RexxParser.KWD_EXTERNAL || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (RexxParser.KWD_NUMERIC - 33)) | (1 << (RexxParser.KWD_PULL - 33)) | (1 << (RexxParser.KWD_SOURCE - 33)) | (1 << (RexxParser.KWD_VERSION - 33)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parse_value() {
	    let localctx = new Parse_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, RexxParser.RULE_parse_value);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 578;
	        this.match(RexxParser.KWD_VALUE);
	        this.state = 580;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << RexxParser.KWD_ADDRESS) | (1 << RexxParser.KWD_ARG) | (1 << RexxParser.KWD_DIGITS) | (1 << RexxParser.KWD_FORM) | (1 << RexxParser.KWD_FUZZ))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (RexxParser.KWD_TRACE - 52)) | (1 << (RexxParser.KWD_VALUE - 52)) | (1 << (RexxParser.BR_O - 52)) | (1 << (RexxParser.SPECIAL_VAR - 52)) | (1 << (RexxParser.NUMBER - 52)) | (1 << (RexxParser.CONST_SYMBOL - 52)) | (1 << (RexxParser.VAR_SYMBOL - 52)) | (1 << (RexxParser.STRING - 52)) | (1 << (RexxParser.PLUS - 52)) | (1 << (RexxParser.MINUS - 52)) | (1 << (RexxParser.NOT - 52)))) !== 0)) {
	            this.state = 579;
	            this.expression();
	        }

	        this.state = 582;
	        this.match(RexxParser.KWD_WITH);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parse_var() {
	    let localctx = new Parse_varContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, RexxParser.RULE_parse_var);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 584;
	        this.match(RexxParser.KWD_VAR);
	        this.state = 585;
	        this.var_symbol();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedure_() {
	    let localctx = new Procedure_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, RexxParser.RULE_procedure_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 587;
	        this.match(RexxParser.KWD_PROCEDURE);
	        this.state = 590;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===RexxParser.KWD_EXPOSE) {
	            this.state = 588;
	            this.match(RexxParser.KWD_EXPOSE);
	            this.state = 589;
	            this.variable_list();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pull_() {
	    let localctx = new Pull_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, RexxParser.RULE_pull_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 592;
	        this.match(RexxParser.KWD_PULL);
	        this.state = 594;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        if(la_===1) {
	            this.state = 593;
	            this.template_list();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	push_() {
	    let localctx = new Push_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, RexxParser.RULE_push_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 596;
	        this.match(RexxParser.KWD_PUSH);
	        this.state = 598;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
	        if(la_===1) {
	            this.state = 597;
	            this.expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queue_() {
	    let localctx = new Queue_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, RexxParser.RULE_queue_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 600;
	        this.match(RexxParser.KWD_QUEUE);
	        this.state = 602;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        if(la_===1) {
	            this.state = 601;
	            this.expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	return_() {
	    let localctx = new Return_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, RexxParser.RULE_return_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 604;
	        this.match(RexxParser.KWD_RETURN);
	        this.state = 606;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	        if(la_===1) {
	            this.state = 605;
	            this.expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	say_() {
	    let localctx = new Say_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, RexxParser.RULE_say_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 608;
	        this.match(RexxParser.KWD_SAY);
	        this.state = 610;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        if(la_===1) {
	            this.state = 609;
	            this.expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signal_() {
	    let localctx = new Signal_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, RexxParser.RULE_signal_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 612;
	        this.match(RexxParser.KWD_SIGNAL);
	        this.state = 616;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case RexxParser.KWD_OFF:
	        case RexxParser.KWD_ON:
	            this.state = 613;
	            this.signal_spec();
	            break;
	        case RexxParser.KWD_VALUE:
	            this.state = 614;
	            this.valueexp();
	            break;
	        case RexxParser.SPECIAL_VAR:
	        case RexxParser.NUMBER:
	        case RexxParser.CONST_SYMBOL:
	        case RexxParser.VAR_SYMBOL:
	        case RexxParser.STRING:
	            this.state = 615;
	            this.taken_constant();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signal_spec() {
	    let localctx = new Signal_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, RexxParser.RULE_signal_spec);
	    var _la = 0; // Token type
	    try {
	        this.state = 626;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case RexxParser.KWD_ON:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 618;
	            this.match(RexxParser.KWD_ON);
	            this.state = 619;
	            this.condition();
	            this.state = 622;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===RexxParser.KWD_NAME) {
	                this.state = 620;
	                this.match(RexxParser.KWD_NAME);
	                this.state = 621;
	                this.function_name();
	            }

	            break;
	        case RexxParser.KWD_OFF:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 624;
	            this.match(RexxParser.KWD_OFF);
	            this.state = 625;
	            this.condition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	condition() {
	    let localctx = new ConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, RexxParser.RULE_condition);
	    try {
	        this.state = 631;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case RexxParser.KWD_ERROR:
	        case RexxParser.KWD_FAILURE:
	        case RexxParser.KWD_HALT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 628;
	            this.callable_condition();
	            break;
	        case RexxParser.KWD_NOVALUE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 629;
	            this.match(RexxParser.KWD_NOVALUE);
	            break;
	        case RexxParser.KWD_SYNTAX:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 630;
	            this.match(RexxParser.KWD_SYNTAX);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trace_() {
	    let localctx = new Trace_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, RexxParser.RULE_trace_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 633;
	        this.match(RexxParser.KWD_TRACE);
	        this.state = 640;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 634;
	            this.taken_constant();
	            break;

	        case 2:
	            this.state = 635;
	            this.valueexp();
	            break;

	        case 3:
	            this.state = 636;
	            this.expression();
	            break;

	        case 4:
	            this.state = 637;
	            this.match(RexxParser.KWD_ERROR);
	            break;

	        case 5:
	            this.state = 638;
	            this.match(RexxParser.KWD_FAILURE);
	            break;

	        case 6:
	            this.state = 639;
	            this.match(RexxParser.KWD_OFF);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	upper_() {
	    let localctx = new Upper_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, RexxParser.RULE_upper_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 642;
	        this.match(RexxParser.KWD_UPPER);
	        this.state = 644; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 643;
	        		this.var_symbol();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 646; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,85, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	template_list() {
	    let localctx = new Template_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, RexxParser.RULE_template_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 651;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===RexxParser.COMMA) {
	            this.state = 648;
	            this.match(RexxParser.COMMA);
	            this.state = 653;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 654;
	        this.template_();
	        this.state = 663;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===RexxParser.COMMA) {
	            this.state = 656; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 655;
	                this.match(RexxParser.COMMA);
	                this.state = 658; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===RexxParser.COMMA);
	            this.state = 660;
	            this.template_();
	            this.state = 665;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	template_() {
	    let localctx = new Template_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, RexxParser.RULE_template_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 668; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 668;
	        		this._errHandler.sync(this);
	        		switch(this._input.LA(1)) {
	        		case RexxParser.BR_O:
	        		case RexxParser.NUMBER:
	        		case RexxParser.STRING:
	        		case RexxParser.EQ:
	        		case RexxParser.PLUS:
	        		case RexxParser.MINUS:
	        		    this.state = 666;
	        		    this.trigger_();
	        		    break;
	        		case RexxParser.SPECIAL_VAR:
	        		case RexxParser.VAR_SYMBOL:
	        		case RexxParser.STOP:
	        		    this.state = 667;
	        		    this.target_();
	        		    break;
	        		default:
	        		    throw new antlr4.error.NoViableAltException(this);
	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 670; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,90, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	target_() {
	    let localctx = new Target_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, RexxParser.RULE_target_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 672;
	        _la = this._input.LA(1);
	        if(!(_la===RexxParser.SPECIAL_VAR || _la===RexxParser.VAR_SYMBOL || _la===RexxParser.STOP)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trigger_() {
	    let localctx = new Trigger_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, RexxParser.RULE_trigger_);
	    try {
	        this.state = 676;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case RexxParser.BR_O:
	        case RexxParser.STRING:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 674;
	            this.pattern_();
	            break;
	        case RexxParser.NUMBER:
	        case RexxParser.EQ:
	        case RexxParser.PLUS:
	        case RexxParser.MINUS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 675;
	            this.positional_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pattern_() {
	    let localctx = new Pattern_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, RexxParser.RULE_pattern_);
	    try {
	        this.state = 680;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case RexxParser.STRING:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 678;
	            this.match(RexxParser.STRING);
	            break;
	        case RexxParser.BR_O:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 679;
	            this.vref();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	positional_() {
	    let localctx = new Positional_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, RexxParser.RULE_positional_);
	    try {
	        this.state = 684;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case RexxParser.NUMBER:
	        case RexxParser.EQ:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 682;
	            this.absolute_positional();
	            break;
	        case RexxParser.PLUS:
	        case RexxParser.MINUS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 683;
	            this.relative_positional();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	absolute_positional() {
	    let localctx = new Absolute_positionalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, RexxParser.RULE_absolute_positional);
	    try {
	        this.state = 689;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case RexxParser.NUMBER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 686;
	            this.match(RexxParser.NUMBER);
	            break;
	        case RexxParser.EQ:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 687;
	            this.match(RexxParser.EQ);
	            this.state = 688;
	            this.position_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	position_() {
	    let localctx = new Position_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, RexxParser.RULE_position_);
	    try {
	        this.state = 693;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case RexxParser.NUMBER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 691;
	            this.match(RexxParser.NUMBER);
	            break;
	        case RexxParser.BR_O:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 692;
	            this.vref();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relative_positional() {
	    let localctx = new Relative_positionalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, RexxParser.RULE_relative_positional);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 695;
	        _la = this._input.LA(1);
	        if(!(_la===RexxParser.PLUS || _la===RexxParser.MINUS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 696;
	        this.position_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	symbol() {
	    let localctx = new SymbolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, RexxParser.RULE_symbol);
	    try {
	        this.state = 701;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case RexxParser.SPECIAL_VAR:
	        case RexxParser.VAR_SYMBOL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 698;
	            this.var_symbol();
	            break;
	        case RexxParser.CONST_SYMBOL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 699;
	            this.match(RexxParser.CONST_SYMBOL);
	            break;
	        case RexxParser.NUMBER:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 700;
	            this.match(RexxParser.NUMBER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, RexxParser.RULE_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 703;
	        this.and_expression();
	        this.state = 709;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===RexxParser.OR || _la===RexxParser.XOR) {
	            this.state = 704;
	            this.or_operator();
	            this.state = 705;
	            this.and_expression();
	            this.state = 711;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	or_operator() {
	    let localctx = new Or_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, RexxParser.RULE_or_operator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 712;
	        _la = this._input.LA(1);
	        if(!(_la===RexxParser.OR || _la===RexxParser.XOR)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	and_expression() {
	    let localctx = new And_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, RexxParser.RULE_and_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 714;
	        this.comparison();
	        this.state = 719;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===RexxParser.AND) {
	            this.state = 715;
	            this.match(RexxParser.AND);
	            this.state = 716;
	            this.comparison();
	            this.state = 721;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparison() {
	    let localctx = new ComparisonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, RexxParser.RULE_comparison);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 722;
	        this.concatenation();
	        this.state = 728;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (RexxParser.EQ - 69)) | (1 << (RexxParser.CMPS_Eq - 69)) | (1 << (RexxParser.CMPS_Neq - 69)) | (1 << (RexxParser.CMPS_M - 69)) | (1 << (RexxParser.CMPS_L - 69)) | (1 << (RexxParser.CMPS_MEq - 69)) | (1 << (RexxParser.CMPS_LEq - 69)) | (1 << (RexxParser.CMPS_NM - 69)) | (1 << (RexxParser.CMPS_NL - 69)) | (1 << (RexxParser.CMP_NEq - 69)) | (1 << (RexxParser.CMP_LM - 69)) | (1 << (RexxParser.CMP_ML - 69)) | (1 << (RexxParser.CMP_M - 69)) | (1 << (RexxParser.CMP_L - 69)) | (1 << (RexxParser.CMP_MEq - 69)) | (1 << (RexxParser.CMP_LEq - 69)) | (1 << (RexxParser.CMP_NM - 69)) | (1 << (RexxParser.CMP_NL - 69)))) !== 0)) {
	            this.state = 723;
	            this.comparison_operator();
	            this.state = 724;
	            this.concatenation();
	            this.state = 730;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparison_operator() {
	    let localctx = new Comparison_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, RexxParser.RULE_comparison_operator);
	    try {
	        this.state = 733;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case RexxParser.EQ:
	        case RexxParser.CMP_NEq:
	        case RexxParser.CMP_LM:
	        case RexxParser.CMP_ML:
	        case RexxParser.CMP_M:
	        case RexxParser.CMP_L:
	        case RexxParser.CMP_MEq:
	        case RexxParser.CMP_LEq:
	        case RexxParser.CMP_NM:
	        case RexxParser.CMP_NL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 731;
	            this.normal_compare();
	            break;
	        case RexxParser.CMPS_Eq:
	        case RexxParser.CMPS_Neq:
	        case RexxParser.CMPS_M:
	        case RexxParser.CMPS_L:
	        case RexxParser.CMPS_MEq:
	        case RexxParser.CMPS_LEq:
	        case RexxParser.CMPS_NM:
	        case RexxParser.CMPS_NL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 732;
	            this.strict_compare();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normal_compare() {
	    let localctx = new Normal_compareContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, RexxParser.RULE_normal_compare);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 735;
	        _la = this._input.LA(1);
	        if(!(((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (RexxParser.EQ - 69)) | (1 << (RexxParser.CMP_NEq - 69)) | (1 << (RexxParser.CMP_LM - 69)) | (1 << (RexxParser.CMP_ML - 69)) | (1 << (RexxParser.CMP_M - 69)) | (1 << (RexxParser.CMP_L - 69)) | (1 << (RexxParser.CMP_MEq - 69)) | (1 << (RexxParser.CMP_LEq - 69)) | (1 << (RexxParser.CMP_NM - 69)) | (1 << (RexxParser.CMP_NL - 69)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	strict_compare() {
	    let localctx = new Strict_compareContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, RexxParser.RULE_strict_compare);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 737;
	        _la = this._input.LA(1);
	        if(!(((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (RexxParser.CMPS_Eq - 81)) | (1 << (RexxParser.CMPS_Neq - 81)) | (1 << (RexxParser.CMPS_M - 81)) | (1 << (RexxParser.CMPS_L - 81)) | (1 << (RexxParser.CMPS_MEq - 81)) | (1 << (RexxParser.CMPS_LEq - 81)) | (1 << (RexxParser.CMPS_NM - 81)) | (1 << (RexxParser.CMPS_NL - 81)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	concatenation() {
	    let localctx = new ConcatenationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, RexxParser.RULE_concatenation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 739;
	        this.addition();
	        this.state = 746;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,102,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 741;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===RexxParser.CONCAT) {
	                    this.state = 740;
	                    this.match(RexxParser.CONCAT);
	                }

	                this.state = 743;
	                this.addition(); 
	            }
	            this.state = 748;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,102,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addition() {
	    let localctx = new AdditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, RexxParser.RULE_addition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 749;
	        this.multiplication();
	        this.state = 755;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,103,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 750;
	                this.additive_operator();
	                this.state = 751;
	                this.multiplication(); 
	            }
	            this.state = 757;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,103,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additive_operator() {
	    let localctx = new Additive_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, RexxParser.RULE_additive_operator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 758;
	        _la = this._input.LA(1);
	        if(!(_la===RexxParser.PLUS || _la===RexxParser.MINUS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplication() {
	    let localctx = new MultiplicationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, RexxParser.RULE_multiplication);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 760;
	        this.power_expression();
	        this.state = 766;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (RexxParser.MUL - 72)) | (1 << (RexxParser.DIV - 72)) | (1 << (RexxParser.QUOTINENT - 72)) | (1 << (RexxParser.REMAINDER - 72)))) !== 0)) {
	            this.state = 761;
	            this.multiplicative_operator();
	            this.state = 762;
	            this.power_expression();
	            this.state = 768;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicative_operator() {
	    let localctx = new Multiplicative_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, RexxParser.RULE_multiplicative_operator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 769;
	        _la = this._input.LA(1);
	        if(!(((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (RexxParser.MUL - 72)) | (1 << (RexxParser.DIV - 72)) | (1 << (RexxParser.QUOTINENT - 72)) | (1 << (RexxParser.REMAINDER - 72)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	power_expression() {
	    let localctx = new Power_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, RexxParser.RULE_power_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 771;
	        this.prefix_expression();
	        this.state = 776;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===RexxParser.POW) {
	            this.state = 772;
	            this.match(RexxParser.POW);
	            this.state = 773;
	            this.prefix_expression();
	            this.state = 778;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefix_expression() {
	    let localctx = new Prefix_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, RexxParser.RULE_prefix_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 782;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (RexxParser.PLUS - 70)) | (1 << (RexxParser.MINUS - 70)) | (1 << (RexxParser.NOT - 70)))) !== 0)) {
	            this.state = 779;
	            _la = this._input.LA(1);
	            if(!(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (RexxParser.PLUS - 70)) | (1 << (RexxParser.MINUS - 70)) | (1 << (RexxParser.NOT - 70)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 784;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 785;
	        this.term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	term() {
	    let localctx = new TermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, RexxParser.RULE_term);
	    try {
	        this.state = 794;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 787;
	            this.function_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 788;
	            this.match(RexxParser.BR_O);
	            this.state = 789;
	            this.expression();
	            this.state = 790;
	            this.match(RexxParser.BR_C);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 792;
	            this.symbol();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 793;
	            this.match(RexxParser.STRING);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_() {
	    let localctx = new Function_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, RexxParser.RULE_function_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 796;
	        this.function_name();
	        this.state = 797;
	        this.function_parameters();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_name() {
	    let localctx = new Function_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, RexxParser.RULE_function_name);
	    try {
	        this.state = 807;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case RexxParser.KWD_ADDRESS:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 799;
	            this.match(RexxParser.KWD_ADDRESS);
	            break;
	        case RexxParser.KWD_ARG:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 800;
	            this.match(RexxParser.KWD_ARG);
	            break;
	        case RexxParser.KWD_DIGITS:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 801;
	            this.match(RexxParser.KWD_DIGITS);
	            break;
	        case RexxParser.KWD_FORM:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 802;
	            this.match(RexxParser.KWD_FORM);
	            break;
	        case RexxParser.KWD_FUZZ:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 803;
	            this.match(RexxParser.KWD_FUZZ);
	            break;
	        case RexxParser.KWD_TRACE:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 804;
	            this.match(RexxParser.KWD_TRACE);
	            break;
	        case RexxParser.KWD_VALUE:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 805;
	            this.match(RexxParser.KWD_VALUE);
	            break;
	        case RexxParser.SPECIAL_VAR:
	        case RexxParser.NUMBER:
	        case RexxParser.CONST_SYMBOL:
	        case RexxParser.VAR_SYMBOL:
	        case RexxParser.STRING:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 806;
	            this.taken_constant();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_parameters() {
	    let localctx = new Function_parametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, RexxParser.RULE_function_parameters);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 809;
	        this.match(RexxParser.BR_O);
	        this.state = 811;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << RexxParser.KWD_ADDRESS) | (1 << RexxParser.KWD_ARG) | (1 << RexxParser.KWD_DIGITS) | (1 << RexxParser.KWD_FORM) | (1 << RexxParser.KWD_FUZZ))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (RexxParser.KWD_TRACE - 52)) | (1 << (RexxParser.KWD_VALUE - 52)) | (1 << (RexxParser.BR_O - 52)) | (1 << (RexxParser.SPECIAL_VAR - 52)) | (1 << (RexxParser.NUMBER - 52)) | (1 << (RexxParser.CONST_SYMBOL - 52)) | (1 << (RexxParser.VAR_SYMBOL - 52)) | (1 << (RexxParser.STRING - 52)) | (1 << (RexxParser.PLUS - 52)) | (1 << (RexxParser.MINUS - 52)) | (1 << (RexxParser.NOT - 52)))) !== 0) || _la===RexxParser.COMMA) {
	            this.state = 810;
	            this.expression_list();
	        }

	        this.state = 813;
	        this.match(RexxParser.BR_C);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

RexxParser.EOF = antlr4.Token.EOF;
RexxParser.STMT_INCLUDE = 1;
RexxParser.LINE_COMMENT = 2;
RexxParser.BLOCK_COMMENT = 3;
RexxParser.WHISPACES = 4;
RexxParser.CONTINUATION = 5;
RexxParser.KWD_ADDRESS = 6;
RexxParser.KWD_ARG = 7;
RexxParser.KWD_BY = 8;
RexxParser.KWD_CALL = 9;
RexxParser.KWD_DIGITS = 10;
RexxParser.KWD_DO = 11;
RexxParser.KWD_DROP = 12;
RexxParser.KWD_ELSE = 13;
RexxParser.KWD_END = 14;
RexxParser.KWD_ENGINEERING = 15;
RexxParser.KWD_ERROR = 16;
RexxParser.KWD_EXIT = 17;
RexxParser.KWD_EXPOSE = 18;
RexxParser.KWD_EXTERNAL = 19;
RexxParser.KWD_FAILURE = 20;
RexxParser.KWD_FOR = 21;
RexxParser.KWD_FOREVER = 22;
RexxParser.KWD_FORM = 23;
RexxParser.KWD_FUZZ = 24;
RexxParser.KWD_HALT = 25;
RexxParser.KWD_IF = 26;
RexxParser.KWD_INTERPRET = 27;
RexxParser.KWD_ITERATE = 28;
RexxParser.KWD_LEAVE = 29;
RexxParser.KWD_NAME = 30;
RexxParser.KWD_NOP = 31;
RexxParser.KWD_NOVALUE = 32;
RexxParser.KWD_NUMERIC = 33;
RexxParser.KWD_OFF = 34;
RexxParser.KWD_ON = 35;
RexxParser.KWD_OPTIONS = 36;
RexxParser.KWD_OTHERWISE = 37;
RexxParser.KWD_PARSE = 38;
RexxParser.KWD_PROCEDURE = 39;
RexxParser.KWD_PULL = 40;
RexxParser.KWD_PUSH = 41;
RexxParser.KWD_QUEUE = 42;
RexxParser.KWD_RETURN = 43;
RexxParser.KWD_SAY = 44;
RexxParser.KWD_SCIENTIFIC = 45;
RexxParser.KWD_SELECT = 46;
RexxParser.KWD_SIGNAL = 47;
RexxParser.KWD_SOURCE = 48;
RexxParser.KWD_SYNTAX = 49;
RexxParser.KWD_THEN = 50;
RexxParser.KWD_TO = 51;
RexxParser.KWD_TRACE = 52;
RexxParser.KWD_UNTIL = 53;
RexxParser.KWD_UPPER = 54;
RexxParser.KWD_VALUE = 55;
RexxParser.KWD_VAR = 56;
RexxParser.KWD_VERSION = 57;
RexxParser.KWD_WHEN = 58;
RexxParser.KWD_WHILE = 59;
RexxParser.KWD_WITH = 60;
RexxParser.BR_O = 61;
RexxParser.BR_C = 62;
RexxParser.SPECIAL_VAR = 63;
RexxParser.NUMBER = 64;
RexxParser.CONST_SYMBOL = 65;
RexxParser.VAR_SYMBOL = 66;
RexxParser.STRING = 67;
RexxParser.CONCAT = 68;
RexxParser.EQ = 69;
RexxParser.PLUS = 70;
RexxParser.MINUS = 71;
RexxParser.MUL = 72;
RexxParser.DIV = 73;
RexxParser.QUOTINENT = 74;
RexxParser.REMAINDER = 75;
RexxParser.POW = 76;
RexxParser.NOT = 77;
RexxParser.OR = 78;
RexxParser.XOR = 79;
RexxParser.AND = 80;
RexxParser.CMPS_Eq = 81;
RexxParser.CMPS_Neq = 82;
RexxParser.CMPS_M = 83;
RexxParser.CMPS_L = 84;
RexxParser.CMPS_MEq = 85;
RexxParser.CMPS_LEq = 86;
RexxParser.CMPS_NM = 87;
RexxParser.CMPS_NL = 88;
RexxParser.CMP_NEq = 89;
RexxParser.CMP_LM = 90;
RexxParser.CMP_ML = 91;
RexxParser.CMP_M = 92;
RexxParser.CMP_L = 93;
RexxParser.CMP_MEq = 94;
RexxParser.CMP_LEq = 95;
RexxParser.CMP_NM = 96;
RexxParser.CMP_NL = 97;
RexxParser.STOP = 98;
RexxParser.COMMA = 99;
RexxParser.COLON = 100;
RexxParser.EOL = 101;
RexxParser.SEMICOL = 102;
RexxParser.UNSUPPORTED_CHARACTER = 103;

RexxParser.RULE_file_ = 0;
RexxParser.RULE_program_ = 1;
RexxParser.RULE_ncl = 2;
RexxParser.RULE_null_clause = 3;
RexxParser.RULE_delim = 4;
RexxParser.RULE_label_list = 5;
RexxParser.RULE_label = 6;
RexxParser.RULE_include_statement = 7;
RexxParser.RULE_instruction_list = 8;
RexxParser.RULE_instruction = 9;
RexxParser.RULE_single_instruction = 10;
RexxParser.RULE_assignment = 11;
RexxParser.RULE_keyword_instruction = 12;
RexxParser.RULE_command_ = 13;
RexxParser.RULE_group_ = 14;
RexxParser.RULE_do_ = 15;
RexxParser.RULE_do_rep = 16;
RexxParser.RULE_do_cnt = 17;
RexxParser.RULE_dot = 18;
RexxParser.RULE_dob = 19;
RexxParser.RULE_dof = 20;
RexxParser.RULE_do_cond = 21;
RexxParser.RULE_if_ = 22;
RexxParser.RULE_then_ = 23;
RexxParser.RULE_else_ = 24;
RexxParser.RULE_select_ = 25;
RexxParser.RULE_select_body = 26;
RexxParser.RULE_when_ = 27;
RexxParser.RULE_otherwise_ = 28;
RexxParser.RULE_address_ = 29;
RexxParser.RULE_taken_constant = 30;
RexxParser.RULE_valueexp = 31;
RexxParser.RULE_arg_ = 32;
RexxParser.RULE_call_ = 33;
RexxParser.RULE_callon_spec = 34;
RexxParser.RULE_callable_condition = 35;
RexxParser.RULE_call_parms = 36;
RexxParser.RULE_expression_list = 37;
RexxParser.RULE_drop_ = 38;
RexxParser.RULE_variable_list = 39;
RexxParser.RULE_vref = 40;
RexxParser.RULE_var_symbol = 41;
RexxParser.RULE_exit_ = 42;
RexxParser.RULE_interpret_ = 43;
RexxParser.RULE_iterate_ = 44;
RexxParser.RULE_leave_ = 45;
RexxParser.RULE_nop_ = 46;
RexxParser.RULE_numeric_ = 47;
RexxParser.RULE_numeric_digits = 48;
RexxParser.RULE_numeric_form = 49;
RexxParser.RULE_numeric_fuzz = 50;
RexxParser.RULE_options_ = 51;
RexxParser.RULE_parse_ = 52;
RexxParser.RULE_parse_type = 53;
RexxParser.RULE_parse_key = 54;
RexxParser.RULE_parse_value = 55;
RexxParser.RULE_parse_var = 56;
RexxParser.RULE_procedure_ = 57;
RexxParser.RULE_pull_ = 58;
RexxParser.RULE_push_ = 59;
RexxParser.RULE_queue_ = 60;
RexxParser.RULE_return_ = 61;
RexxParser.RULE_say_ = 62;
RexxParser.RULE_signal_ = 63;
RexxParser.RULE_signal_spec = 64;
RexxParser.RULE_condition = 65;
RexxParser.RULE_trace_ = 66;
RexxParser.RULE_upper_ = 67;
RexxParser.RULE_template_list = 68;
RexxParser.RULE_template_ = 69;
RexxParser.RULE_target_ = 70;
RexxParser.RULE_trigger_ = 71;
RexxParser.RULE_pattern_ = 72;
RexxParser.RULE_positional_ = 73;
RexxParser.RULE_absolute_positional = 74;
RexxParser.RULE_position_ = 75;
RexxParser.RULE_relative_positional = 76;
RexxParser.RULE_symbol = 77;
RexxParser.RULE_expression = 78;
RexxParser.RULE_or_operator = 79;
RexxParser.RULE_and_expression = 80;
RexxParser.RULE_comparison = 81;
RexxParser.RULE_comparison_operator = 82;
RexxParser.RULE_normal_compare = 83;
RexxParser.RULE_strict_compare = 84;
RexxParser.RULE_concatenation = 85;
RexxParser.RULE_addition = 86;
RexxParser.RULE_additive_operator = 87;
RexxParser.RULE_multiplication = 88;
RexxParser.RULE_multiplicative_operator = 89;
RexxParser.RULE_power_expression = 90;
RexxParser.RULE_prefix_expression = 91;
RexxParser.RULE_term = 92;
RexxParser.RULE_function_ = 93;
RexxParser.RULE_function_name = 94;
RexxParser.RULE_function_parameters = 95;

class File_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_file_;
    }

	program_() {
	    return this.getTypedRuleContext(Program_Context,0);
	};

	EOF() {
	    return this.getToken(RexxParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterFile_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitFile_(this);
		}
	}


}



class Program_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_program_;
    }

	ncl() {
	    return this.getTypedRuleContext(NclContext,0);
	};

	instruction_list() {
	    return this.getTypedRuleContext(Instruction_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterProgram_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitProgram_(this);
		}
	}


}



class NclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_ncl;
    }

	null_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Null_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Null_clauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterNcl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitNcl(this);
		}
	}


}



class Null_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_null_clause;
    }

	delim = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DelimContext);
	    } else {
	        return this.getTypedRuleContext(DelimContext,i);
	    }
	};

	label_list() {
	    return this.getTypedRuleContext(Label_listContext,0);
	};

	include_statement() {
	    return this.getTypedRuleContext(Include_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterNull_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitNull_clause(this);
		}
	}


}



class DelimContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_delim;
    }

	SEMICOL() {
	    return this.getToken(RexxParser.SEMICOL, 0);
	};

	EOL() {
	    return this.getToken(RexxParser.EOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterDelim(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitDelim(this);
		}
	}


}



class Label_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_label_list;
    }

	label = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelContext);
	    } else {
	        return this.getTypedRuleContext(LabelContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RexxParser.COLON);
	    } else {
	        return this.getToken(RexxParser.COLON, i);
	    }
	};


	delim = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DelimContext);
	    } else {
	        return this.getTypedRuleContext(DelimContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterLabel_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitLabel_list(this);
		}
	}


}



class LabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_label;
    }

	VAR_SYMBOL() {
	    return this.getToken(RexxParser.VAR_SYMBOL, 0);
	};

	CONST_SYMBOL() {
	    return this.getToken(RexxParser.CONST_SYMBOL, 0);
	};

	NUMBER() {
	    return this.getToken(RexxParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitLabel(this);
		}
	}


}



class Include_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_include_statement;
    }

	STMT_INCLUDE() {
	    return this.getToken(RexxParser.STMT_INCLUDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterInclude_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitInclude_statement(this);
		}
	}


}



class Instruction_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_instruction_list;
    }

	instruction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InstructionContext);
	    } else {
	        return this.getTypedRuleContext(InstructionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterInstruction_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitInstruction_list(this);
		}
	}


}



class InstructionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_instruction;
    }

	group_() {
	    return this.getTypedRuleContext(Group_Context,0);
	};

	single_instruction() {
	    return this.getTypedRuleContext(Single_instructionContext,0);
	};

	ncl() {
	    return this.getTypedRuleContext(NclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterInstruction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitInstruction(this);
		}
	}


}



class Single_instructionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_single_instruction;
    }

	assignment() {
	    return this.getTypedRuleContext(AssignmentContext,0);
	};

	keyword_instruction() {
	    return this.getTypedRuleContext(Keyword_instructionContext,0);
	};

	command_() {
	    return this.getTypedRuleContext(Command_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterSingle_instruction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitSingle_instruction(this);
		}
	}


}



class AssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_assignment;
    }

	EQ() {
	    return this.getToken(RexxParser.EQ, 0);
	};

	VAR_SYMBOL() {
	    return this.getToken(RexxParser.VAR_SYMBOL, 0);
	};

	SPECIAL_VAR() {
	    return this.getToken(RexxParser.SPECIAL_VAR, 0);
	};

	CONST_SYMBOL() {
	    return this.getToken(RexxParser.CONST_SYMBOL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitAssignment(this);
		}
	}


}



class Keyword_instructionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_keyword_instruction;
    }

	address_() {
	    return this.getTypedRuleContext(Address_Context,0);
	};

	arg_() {
	    return this.getTypedRuleContext(Arg_Context,0);
	};

	call_() {
	    return this.getTypedRuleContext(Call_Context,0);
	};

	drop_() {
	    return this.getTypedRuleContext(Drop_Context,0);
	};

	exit_() {
	    return this.getTypedRuleContext(Exit_Context,0);
	};

	interpret_() {
	    return this.getTypedRuleContext(Interpret_Context,0);
	};

	iterate_() {
	    return this.getTypedRuleContext(Iterate_Context,0);
	};

	leave_() {
	    return this.getTypedRuleContext(Leave_Context,0);
	};

	nop_() {
	    return this.getTypedRuleContext(Nop_Context,0);
	};

	numeric_() {
	    return this.getTypedRuleContext(Numeric_Context,0);
	};

	options_() {
	    return this.getTypedRuleContext(Options_Context,0);
	};

	parse_() {
	    return this.getTypedRuleContext(Parse_Context,0);
	};

	procedure_() {
	    return this.getTypedRuleContext(Procedure_Context,0);
	};

	pull_() {
	    return this.getTypedRuleContext(Pull_Context,0);
	};

	push_() {
	    return this.getTypedRuleContext(Push_Context,0);
	};

	queue_() {
	    return this.getTypedRuleContext(Queue_Context,0);
	};

	return_() {
	    return this.getTypedRuleContext(Return_Context,0);
	};

	say_() {
	    return this.getTypedRuleContext(Say_Context,0);
	};

	signal_() {
	    return this.getTypedRuleContext(Signal_Context,0);
	};

	trace_() {
	    return this.getTypedRuleContext(Trace_Context,0);
	};

	upper_() {
	    return this.getTypedRuleContext(Upper_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterKeyword_instruction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitKeyword_instruction(this);
		}
	}


}



class Command_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_command_;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterCommand_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitCommand_(this);
		}
	}


}



class Group_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_group_;
    }

	do_() {
	    return this.getTypedRuleContext(Do_Context,0);
	};

	if_() {
	    return this.getTypedRuleContext(If_Context,0);
	};

	select_() {
	    return this.getTypedRuleContext(Select_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterGroup_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitGroup_(this);
		}
	}


}



class Do_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_do_;
    }

	KWD_DO() {
	    return this.getToken(RexxParser.KWD_DO, 0);
	};

	ncl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NclContext);
	    } else {
	        return this.getTypedRuleContext(NclContext,i);
	    }
	};

	KWD_END() {
	    return this.getToken(RexxParser.KWD_END, 0);
	};

	do_rep() {
	    return this.getTypedRuleContext(Do_repContext,0);
	};

	do_cond() {
	    return this.getTypedRuleContext(Do_condContext,0);
	};

	instruction_list() {
	    return this.getTypedRuleContext(Instruction_listContext,0);
	};

	var_symbol() {
	    return this.getTypedRuleContext(Var_symbolContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterDo_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitDo_(this);
		}
	}


}



class Do_repContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_do_rep;
    }

	assignment() {
	    return this.getTypedRuleContext(AssignmentContext,0);
	};

	do_cnt() {
	    return this.getTypedRuleContext(Do_cntContext,0);
	};

	KWD_FOREVER() {
	    return this.getToken(RexxParser.KWD_FOREVER, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterDo_rep(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitDo_rep(this);
		}
	}


}



class Do_cntContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_do_cnt;
    }

	dot() {
	    return this.getTypedRuleContext(DotContext,0);
	};

	dob() {
	    return this.getTypedRuleContext(DobContext,0);
	};

	dof() {
	    return this.getTypedRuleContext(DofContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterDo_cnt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitDo_cnt(this);
		}
	}


}



class DotContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_dot;
    }

	KWD_TO() {
	    return this.getToken(RexxParser.KWD_TO, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterDot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitDot(this);
		}
	}


}



class DobContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_dob;
    }

	KWD_BY() {
	    return this.getToken(RexxParser.KWD_BY, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterDob(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitDob(this);
		}
	}


}



class DofContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_dof;
    }

	KWD_FOR() {
	    return this.getToken(RexxParser.KWD_FOR, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterDof(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitDof(this);
		}
	}


}



class Do_condContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_do_cond;
    }

	KWD_WHILE() {
	    return this.getToken(RexxParser.KWD_WHILE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	KWD_UNTIL() {
	    return this.getToken(RexxParser.KWD_UNTIL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterDo_cond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitDo_cond(this);
		}
	}


}



class If_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_if_;
    }

	KWD_IF() {
	    return this.getToken(RexxParser.KWD_IF, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	then_() {
	    return this.getTypedRuleContext(Then_Context,0);
	};

	delim = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DelimContext);
	    } else {
	        return this.getTypedRuleContext(DelimContext,i);
	    }
	};

	else_() {
	    return this.getTypedRuleContext(Else_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterIf_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitIf_(this);
		}
	}


}



class Then_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_then_;
    }

	KWD_THEN() {
	    return this.getToken(RexxParser.KWD_THEN, 0);
	};

	instruction() {
	    return this.getTypedRuleContext(InstructionContext,0);
	};

	ncl() {
	    return this.getTypedRuleContext(NclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterThen_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitThen_(this);
		}
	}


}



class Else_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_else_;
    }

	KWD_ELSE() {
	    return this.getToken(RexxParser.KWD_ELSE, 0);
	};

	instruction() {
	    return this.getTypedRuleContext(InstructionContext,0);
	};

	ncl() {
	    return this.getTypedRuleContext(NclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterElse_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitElse_(this);
		}
	}


}



class Select_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_select_;
    }

	KWD_SELECT() {
	    return this.getToken(RexxParser.KWD_SELECT, 0);
	};

	select_body() {
	    return this.getTypedRuleContext(Select_bodyContext,0);
	};

	KWD_END() {
	    return this.getToken(RexxParser.KWD_END, 0);
	};

	delim = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DelimContext);
	    } else {
	        return this.getTypedRuleContext(DelimContext,i);
	    }
	};

	ncl() {
	    return this.getTypedRuleContext(NclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterSelect_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitSelect_(this);
		}
	}


}



class Select_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_select_body;
    }

	when_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(When_Context);
	    } else {
	        return this.getTypedRuleContext(When_Context,i);
	    }
	};

	otherwise_() {
	    return this.getTypedRuleContext(Otherwise_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterSelect_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitSelect_body(this);
		}
	}


}



class When_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_when_;
    }

	KWD_WHEN() {
	    return this.getToken(RexxParser.KWD_WHEN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	then_() {
	    return this.getTypedRuleContext(Then_Context,0);
	};

	delim = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DelimContext);
	    } else {
	        return this.getTypedRuleContext(DelimContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterWhen_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitWhen_(this);
		}
	}


}



class Otherwise_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_otherwise_;
    }

	KWD_OTHERWISE() {
	    return this.getToken(RexxParser.KWD_OTHERWISE, 0);
	};

	delim = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DelimContext);
	    } else {
	        return this.getTypedRuleContext(DelimContext,i);
	    }
	};

	instruction_list() {
	    return this.getTypedRuleContext(Instruction_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterOtherwise_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitOtherwise_(this);
		}
	}


}



class Address_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_address_;
    }

	KWD_ADDRESS() {
	    return this.getToken(RexxParser.KWD_ADDRESS, 0);
	};

	taken_constant() {
	    return this.getTypedRuleContext(Taken_constantContext,0);
	};

	valueexp() {
	    return this.getTypedRuleContext(ValueexpContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterAddress_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitAddress_(this);
		}
	}


}



class Taken_constantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_taken_constant;
    }

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	STRING() {
	    return this.getToken(RexxParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterTaken_constant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitTaken_constant(this);
		}
	}


}



class ValueexpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_valueexp;
    }

	KWD_VALUE() {
	    return this.getToken(RexxParser.KWD_VALUE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterValueexp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitValueexp(this);
		}
	}


}



class Arg_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_arg_;
    }

	KWD_ARG() {
	    return this.getToken(RexxParser.KWD_ARG, 0);
	};

	template_list() {
	    return this.getTypedRuleContext(Template_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterArg_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitArg_(this);
		}
	}


}



class Call_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_call_;
    }

	KWD_CALL() {
	    return this.getToken(RexxParser.KWD_CALL, 0);
	};

	callon_spec() {
	    return this.getTypedRuleContext(Callon_specContext,0);
	};

	function_name() {
	    return this.getTypedRuleContext(Function_nameContext,0);
	};

	call_parms() {
	    return this.getTypedRuleContext(Call_parmsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterCall_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitCall_(this);
		}
	}


}



class Callon_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_callon_spec;
    }

	KWD_ON() {
	    return this.getToken(RexxParser.KWD_ON, 0);
	};

	callable_condition() {
	    return this.getTypedRuleContext(Callable_conditionContext,0);
	};

	KWD_NAME() {
	    return this.getToken(RexxParser.KWD_NAME, 0);
	};

	function_name() {
	    return this.getTypedRuleContext(Function_nameContext,0);
	};

	KWD_OFF() {
	    return this.getToken(RexxParser.KWD_OFF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterCallon_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitCallon_spec(this);
		}
	}


}



class Callable_conditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_callable_condition;
    }

	KWD_ERROR() {
	    return this.getToken(RexxParser.KWD_ERROR, 0);
	};

	KWD_FAILURE() {
	    return this.getToken(RexxParser.KWD_FAILURE, 0);
	};

	KWD_HALT() {
	    return this.getToken(RexxParser.KWD_HALT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterCallable_condition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitCallable_condition(this);
		}
	}


}



class Call_parmsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_call_parms;
    }

	BR_O() {
	    return this.getToken(RexxParser.BR_O, 0);
	};

	BR_C() {
	    return this.getToken(RexxParser.BR_C, 0);
	};

	expression_list() {
	    return this.getTypedRuleContext(Expression_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterCall_parms(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitCall_parms(this);
		}
	}


}



class Expression_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_expression_list;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RexxParser.COMMA);
	    } else {
	        return this.getToken(RexxParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterExpression_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitExpression_list(this);
		}
	}


}



class Drop_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_drop_;
    }

	KWD_DROP() {
	    return this.getToken(RexxParser.KWD_DROP, 0);
	};

	variable_list() {
	    return this.getTypedRuleContext(Variable_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterDrop_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitDrop_(this);
		}
	}


}



class Variable_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_variable_list;
    }

	vref = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VrefContext);
	    } else {
	        return this.getTypedRuleContext(VrefContext,i);
	    }
	};

	var_symbol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Var_symbolContext);
	    } else {
	        return this.getTypedRuleContext(Var_symbolContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterVariable_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitVariable_list(this);
		}
	}


}



class VrefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_vref;
    }

	BR_O() {
	    return this.getToken(RexxParser.BR_O, 0);
	};

	var_symbol() {
	    return this.getTypedRuleContext(Var_symbolContext,0);
	};

	BR_C() {
	    return this.getToken(RexxParser.BR_C, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterVref(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitVref(this);
		}
	}


}



class Var_symbolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_var_symbol;
    }

	VAR_SYMBOL() {
	    return this.getToken(RexxParser.VAR_SYMBOL, 0);
	};

	SPECIAL_VAR() {
	    return this.getToken(RexxParser.SPECIAL_VAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterVar_symbol(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitVar_symbol(this);
		}
	}


}



class Exit_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_exit_;
    }

	KWD_EXIT() {
	    return this.getToken(RexxParser.KWD_EXIT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterExit_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitExit_(this);
		}
	}


}



class Interpret_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_interpret_;
    }

	KWD_INTERPRET() {
	    return this.getToken(RexxParser.KWD_INTERPRET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterInterpret_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitInterpret_(this);
		}
	}


}



class Iterate_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_iterate_;
    }

	KWD_ITERATE() {
	    return this.getToken(RexxParser.KWD_ITERATE, 0);
	};

	var_symbol() {
	    return this.getTypedRuleContext(Var_symbolContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterIterate_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitIterate_(this);
		}
	}


}



class Leave_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_leave_;
    }

	KWD_LEAVE() {
	    return this.getToken(RexxParser.KWD_LEAVE, 0);
	};

	var_symbol() {
	    return this.getTypedRuleContext(Var_symbolContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterLeave_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitLeave_(this);
		}
	}


}



class Nop_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_nop_;
    }

	KWD_NOP() {
	    return this.getToken(RexxParser.KWD_NOP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterNop_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitNop_(this);
		}
	}


}



class Numeric_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_numeric_;
    }

	KWD_NUMERIC() {
	    return this.getToken(RexxParser.KWD_NUMERIC, 0);
	};

	numeric_digits() {
	    return this.getTypedRuleContext(Numeric_digitsContext,0);
	};

	numeric_form() {
	    return this.getTypedRuleContext(Numeric_formContext,0);
	};

	numeric_fuzz() {
	    return this.getTypedRuleContext(Numeric_fuzzContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterNumeric_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitNumeric_(this);
		}
	}


}



class Numeric_digitsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_numeric_digits;
    }

	KWD_DIGITS() {
	    return this.getToken(RexxParser.KWD_DIGITS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterNumeric_digits(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitNumeric_digits(this);
		}
	}


}



class Numeric_formContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_numeric_form;
    }

	KWD_FORM() {
	    return this.getToken(RexxParser.KWD_FORM, 0);
	};

	KWD_ENGINEERING() {
	    return this.getToken(RexxParser.KWD_ENGINEERING, 0);
	};

	KWD_SCIENTIFIC() {
	    return this.getToken(RexxParser.KWD_SCIENTIFIC, 0);
	};

	valueexp() {
	    return this.getTypedRuleContext(ValueexpContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterNumeric_form(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitNumeric_form(this);
		}
	}


}



class Numeric_fuzzContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_numeric_fuzz;
    }

	KWD_FUZZ() {
	    return this.getToken(RexxParser.KWD_FUZZ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterNumeric_fuzz(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitNumeric_fuzz(this);
		}
	}


}



class Options_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_options_;
    }

	KWD_OPTIONS() {
	    return this.getToken(RexxParser.KWD_OPTIONS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterOptions_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitOptions_(this);
		}
	}


}



class Parse_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_parse_;
    }

	KWD_PARSE() {
	    return this.getToken(RexxParser.KWD_PARSE, 0);
	};

	parse_type() {
	    return this.getTypedRuleContext(Parse_typeContext,0);
	};

	KWD_UPPER() {
	    return this.getToken(RexxParser.KWD_UPPER, 0);
	};

	template_list() {
	    return this.getTypedRuleContext(Template_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterParse_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitParse_(this);
		}
	}


}



class Parse_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_parse_type;
    }

	parse_key() {
	    return this.getTypedRuleContext(Parse_keyContext,0);
	};

	parse_value() {
	    return this.getTypedRuleContext(Parse_valueContext,0);
	};

	parse_var() {
	    return this.getTypedRuleContext(Parse_varContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterParse_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitParse_type(this);
		}
	}


}



class Parse_keyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_parse_key;
    }

	KWD_ARG() {
	    return this.getToken(RexxParser.KWD_ARG, 0);
	};

	KWD_EXTERNAL() {
	    return this.getToken(RexxParser.KWD_EXTERNAL, 0);
	};

	KWD_NUMERIC() {
	    return this.getToken(RexxParser.KWD_NUMERIC, 0);
	};

	KWD_PULL() {
	    return this.getToken(RexxParser.KWD_PULL, 0);
	};

	KWD_SOURCE() {
	    return this.getToken(RexxParser.KWD_SOURCE, 0);
	};

	KWD_VERSION() {
	    return this.getToken(RexxParser.KWD_VERSION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterParse_key(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitParse_key(this);
		}
	}


}



class Parse_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_parse_value;
    }

	KWD_VALUE() {
	    return this.getToken(RexxParser.KWD_VALUE, 0);
	};

	KWD_WITH() {
	    return this.getToken(RexxParser.KWD_WITH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterParse_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitParse_value(this);
		}
	}


}



class Parse_varContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_parse_var;
    }

	KWD_VAR() {
	    return this.getToken(RexxParser.KWD_VAR, 0);
	};

	var_symbol() {
	    return this.getTypedRuleContext(Var_symbolContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterParse_var(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitParse_var(this);
		}
	}


}



class Procedure_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_procedure_;
    }

	KWD_PROCEDURE() {
	    return this.getToken(RexxParser.KWD_PROCEDURE, 0);
	};

	KWD_EXPOSE() {
	    return this.getToken(RexxParser.KWD_EXPOSE, 0);
	};

	variable_list() {
	    return this.getTypedRuleContext(Variable_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterProcedure_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitProcedure_(this);
		}
	}


}



class Pull_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_pull_;
    }

	KWD_PULL() {
	    return this.getToken(RexxParser.KWD_PULL, 0);
	};

	template_list() {
	    return this.getTypedRuleContext(Template_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterPull_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitPull_(this);
		}
	}


}



class Push_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_push_;
    }

	KWD_PUSH() {
	    return this.getToken(RexxParser.KWD_PUSH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterPush_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitPush_(this);
		}
	}


}



class Queue_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_queue_;
    }

	KWD_QUEUE() {
	    return this.getToken(RexxParser.KWD_QUEUE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterQueue_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitQueue_(this);
		}
	}


}



class Return_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_return_;
    }

	KWD_RETURN() {
	    return this.getToken(RexxParser.KWD_RETURN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterReturn_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitReturn_(this);
		}
	}


}



class Say_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_say_;
    }

	KWD_SAY() {
	    return this.getToken(RexxParser.KWD_SAY, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterSay_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitSay_(this);
		}
	}


}



class Signal_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_signal_;
    }

	KWD_SIGNAL() {
	    return this.getToken(RexxParser.KWD_SIGNAL, 0);
	};

	signal_spec() {
	    return this.getTypedRuleContext(Signal_specContext,0);
	};

	valueexp() {
	    return this.getTypedRuleContext(ValueexpContext,0);
	};

	taken_constant() {
	    return this.getTypedRuleContext(Taken_constantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterSignal_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitSignal_(this);
		}
	}


}



class Signal_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_signal_spec;
    }

	KWD_ON() {
	    return this.getToken(RexxParser.KWD_ON, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	KWD_NAME() {
	    return this.getToken(RexxParser.KWD_NAME, 0);
	};

	function_name() {
	    return this.getTypedRuleContext(Function_nameContext,0);
	};

	KWD_OFF() {
	    return this.getToken(RexxParser.KWD_OFF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterSignal_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitSignal_spec(this);
		}
	}


}



class ConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_condition;
    }

	callable_condition() {
	    return this.getTypedRuleContext(Callable_conditionContext,0);
	};

	KWD_NOVALUE() {
	    return this.getToken(RexxParser.KWD_NOVALUE, 0);
	};

	KWD_SYNTAX() {
	    return this.getToken(RexxParser.KWD_SYNTAX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitCondition(this);
		}
	}


}



class Trace_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_trace_;
    }

	KWD_TRACE() {
	    return this.getToken(RexxParser.KWD_TRACE, 0);
	};

	taken_constant() {
	    return this.getTypedRuleContext(Taken_constantContext,0);
	};

	valueexp() {
	    return this.getTypedRuleContext(ValueexpContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	KWD_ERROR() {
	    return this.getToken(RexxParser.KWD_ERROR, 0);
	};

	KWD_FAILURE() {
	    return this.getToken(RexxParser.KWD_FAILURE, 0);
	};

	KWD_OFF() {
	    return this.getToken(RexxParser.KWD_OFF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterTrace_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitTrace_(this);
		}
	}


}



class Upper_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_upper_;
    }

	KWD_UPPER() {
	    return this.getToken(RexxParser.KWD_UPPER, 0);
	};

	var_symbol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Var_symbolContext);
	    } else {
	        return this.getTypedRuleContext(Var_symbolContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterUpper_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitUpper_(this);
		}
	}


}



class Template_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_template_list;
    }

	template_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Template_Context);
	    } else {
	        return this.getTypedRuleContext(Template_Context,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RexxParser.COMMA);
	    } else {
	        return this.getToken(RexxParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterTemplate_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitTemplate_list(this);
		}
	}


}



class Template_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_template_;
    }

	trigger_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Trigger_Context);
	    } else {
	        return this.getTypedRuleContext(Trigger_Context,i);
	    }
	};

	target_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Target_Context);
	    } else {
	        return this.getTypedRuleContext(Target_Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterTemplate_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitTemplate_(this);
		}
	}


}



class Target_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_target_;
    }

	VAR_SYMBOL() {
	    return this.getToken(RexxParser.VAR_SYMBOL, 0);
	};

	SPECIAL_VAR() {
	    return this.getToken(RexxParser.SPECIAL_VAR, 0);
	};

	STOP() {
	    return this.getToken(RexxParser.STOP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterTarget_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitTarget_(this);
		}
	}


}



class Trigger_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_trigger_;
    }

	pattern_() {
	    return this.getTypedRuleContext(Pattern_Context,0);
	};

	positional_() {
	    return this.getTypedRuleContext(Positional_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterTrigger_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitTrigger_(this);
		}
	}


}



class Pattern_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_pattern_;
    }

	STRING() {
	    return this.getToken(RexxParser.STRING, 0);
	};

	vref() {
	    return this.getTypedRuleContext(VrefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterPattern_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitPattern_(this);
		}
	}


}



class Positional_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_positional_;
    }

	absolute_positional() {
	    return this.getTypedRuleContext(Absolute_positionalContext,0);
	};

	relative_positional() {
	    return this.getTypedRuleContext(Relative_positionalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterPositional_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitPositional_(this);
		}
	}


}



class Absolute_positionalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_absolute_positional;
    }

	NUMBER() {
	    return this.getToken(RexxParser.NUMBER, 0);
	};

	EQ() {
	    return this.getToken(RexxParser.EQ, 0);
	};

	position_() {
	    return this.getTypedRuleContext(Position_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterAbsolute_positional(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitAbsolute_positional(this);
		}
	}


}



class Position_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_position_;
    }

	NUMBER() {
	    return this.getToken(RexxParser.NUMBER, 0);
	};

	vref() {
	    return this.getTypedRuleContext(VrefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterPosition_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitPosition_(this);
		}
	}


}



class Relative_positionalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_relative_positional;
    }

	position_() {
	    return this.getTypedRuleContext(Position_Context,0);
	};

	PLUS() {
	    return this.getToken(RexxParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(RexxParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterRelative_positional(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitRelative_positional(this);
		}
	}


}



class SymbolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_symbol;
    }

	var_symbol() {
	    return this.getTypedRuleContext(Var_symbolContext,0);
	};

	CONST_SYMBOL() {
	    return this.getToken(RexxParser.CONST_SYMBOL, 0);
	};

	NUMBER() {
	    return this.getToken(RexxParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterSymbol(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitSymbol(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_expression;
    }

	and_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(And_expressionContext);
	    } else {
	        return this.getTypedRuleContext(And_expressionContext,i);
	    }
	};

	or_operator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Or_operatorContext);
	    } else {
	        return this.getTypedRuleContext(Or_operatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitExpression(this);
		}
	}


}



class Or_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_or_operator;
    }

	OR() {
	    return this.getToken(RexxParser.OR, 0);
	};

	XOR() {
	    return this.getToken(RexxParser.XOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterOr_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitOr_operator(this);
		}
	}


}



class And_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_and_expression;
    }

	comparison = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ComparisonContext);
	    } else {
	        return this.getTypedRuleContext(ComparisonContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RexxParser.AND);
	    } else {
	        return this.getToken(RexxParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterAnd_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitAnd_expression(this);
		}
	}


}



class ComparisonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_comparison;
    }

	concatenation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConcatenationContext);
	    } else {
	        return this.getTypedRuleContext(ConcatenationContext,i);
	    }
	};

	comparison_operator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Comparison_operatorContext);
	    } else {
	        return this.getTypedRuleContext(Comparison_operatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterComparison(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitComparison(this);
		}
	}


}



class Comparison_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_comparison_operator;
    }

	normal_compare() {
	    return this.getTypedRuleContext(Normal_compareContext,0);
	};

	strict_compare() {
	    return this.getTypedRuleContext(Strict_compareContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterComparison_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitComparison_operator(this);
		}
	}


}



class Normal_compareContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_normal_compare;
    }

	EQ() {
	    return this.getToken(RexxParser.EQ, 0);
	};

	CMP_NEq() {
	    return this.getToken(RexxParser.CMP_NEq, 0);
	};

	CMP_LM() {
	    return this.getToken(RexxParser.CMP_LM, 0);
	};

	CMP_ML() {
	    return this.getToken(RexxParser.CMP_ML, 0);
	};

	CMP_M() {
	    return this.getToken(RexxParser.CMP_M, 0);
	};

	CMP_L() {
	    return this.getToken(RexxParser.CMP_L, 0);
	};

	CMP_MEq() {
	    return this.getToken(RexxParser.CMP_MEq, 0);
	};

	CMP_LEq() {
	    return this.getToken(RexxParser.CMP_LEq, 0);
	};

	CMP_NM() {
	    return this.getToken(RexxParser.CMP_NM, 0);
	};

	CMP_NL() {
	    return this.getToken(RexxParser.CMP_NL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterNormal_compare(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitNormal_compare(this);
		}
	}


}



class Strict_compareContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_strict_compare;
    }

	CMPS_Eq() {
	    return this.getToken(RexxParser.CMPS_Eq, 0);
	};

	CMPS_Neq() {
	    return this.getToken(RexxParser.CMPS_Neq, 0);
	};

	CMPS_M() {
	    return this.getToken(RexxParser.CMPS_M, 0);
	};

	CMPS_L() {
	    return this.getToken(RexxParser.CMPS_L, 0);
	};

	CMPS_MEq() {
	    return this.getToken(RexxParser.CMPS_MEq, 0);
	};

	CMPS_LEq() {
	    return this.getToken(RexxParser.CMPS_LEq, 0);
	};

	CMPS_NM() {
	    return this.getToken(RexxParser.CMPS_NM, 0);
	};

	CMPS_NL() {
	    return this.getToken(RexxParser.CMPS_NL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterStrict_compare(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitStrict_compare(this);
		}
	}


}



class ConcatenationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_concatenation;
    }

	addition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditionContext);
	    } else {
	        return this.getTypedRuleContext(AdditionContext,i);
	    }
	};

	CONCAT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RexxParser.CONCAT);
	    } else {
	        return this.getToken(RexxParser.CONCAT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterConcatenation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitConcatenation(this);
		}
	}


}



class AdditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_addition;
    }

	multiplication = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplicationContext);
	    } else {
	        return this.getTypedRuleContext(MultiplicationContext,i);
	    }
	};

	additive_operator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Additive_operatorContext);
	    } else {
	        return this.getTypedRuleContext(Additive_operatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterAddition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitAddition(this);
		}
	}


}



class Additive_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_additive_operator;
    }

	PLUS() {
	    return this.getToken(RexxParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(RexxParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterAdditive_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitAdditive_operator(this);
		}
	}


}



class MultiplicationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_multiplication;
    }

	power_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Power_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Power_expressionContext,i);
	    }
	};

	multiplicative_operator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Multiplicative_operatorContext);
	    } else {
	        return this.getTypedRuleContext(Multiplicative_operatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterMultiplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitMultiplication(this);
		}
	}


}



class Multiplicative_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_multiplicative_operator;
    }

	MUL() {
	    return this.getToken(RexxParser.MUL, 0);
	};

	DIV() {
	    return this.getToken(RexxParser.DIV, 0);
	};

	QUOTINENT() {
	    return this.getToken(RexxParser.QUOTINENT, 0);
	};

	REMAINDER() {
	    return this.getToken(RexxParser.REMAINDER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterMultiplicative_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitMultiplicative_operator(this);
		}
	}


}



class Power_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_power_expression;
    }

	prefix_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Prefix_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Prefix_expressionContext,i);
	    }
	};

	POW = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RexxParser.POW);
	    } else {
	        return this.getToken(RexxParser.POW, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterPower_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitPower_expression(this);
		}
	}


}



class Prefix_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_prefix_expression;
    }

	term() {
	    return this.getTypedRuleContext(TermContext,0);
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RexxParser.PLUS);
	    } else {
	        return this.getToken(RexxParser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RexxParser.MINUS);
	    } else {
	        return this.getToken(RexxParser.MINUS, i);
	    }
	};


	NOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RexxParser.NOT);
	    } else {
	        return this.getToken(RexxParser.NOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterPrefix_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitPrefix_expression(this);
		}
	}


}



class TermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_term;
    }

	function_() {
	    return this.getTypedRuleContext(Function_Context,0);
	};

	BR_O() {
	    return this.getToken(RexxParser.BR_O, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	BR_C() {
	    return this.getToken(RexxParser.BR_C, 0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	STRING() {
	    return this.getToken(RexxParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitTerm(this);
		}
	}


}



class Function_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_function_;
    }

	function_name() {
	    return this.getTypedRuleContext(Function_nameContext,0);
	};

	function_parameters() {
	    return this.getTypedRuleContext(Function_parametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterFunction_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitFunction_(this);
		}
	}


}



class Function_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_function_name;
    }

	KWD_ADDRESS() {
	    return this.getToken(RexxParser.KWD_ADDRESS, 0);
	};

	KWD_ARG() {
	    return this.getToken(RexxParser.KWD_ARG, 0);
	};

	KWD_DIGITS() {
	    return this.getToken(RexxParser.KWD_DIGITS, 0);
	};

	KWD_FORM() {
	    return this.getToken(RexxParser.KWD_FORM, 0);
	};

	KWD_FUZZ() {
	    return this.getToken(RexxParser.KWD_FUZZ, 0);
	};

	KWD_TRACE() {
	    return this.getToken(RexxParser.KWD_TRACE, 0);
	};

	KWD_VALUE() {
	    return this.getToken(RexxParser.KWD_VALUE, 0);
	};

	taken_constant() {
	    return this.getTypedRuleContext(Taken_constantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterFunction_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitFunction_name(this);
		}
	}


}



class Function_parametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RexxParser.RULE_function_parameters;
    }

	BR_O() {
	    return this.getToken(RexxParser.BR_O, 0);
	};

	BR_C() {
	    return this.getToken(RexxParser.BR_C, 0);
	};

	expression_list() {
	    return this.getTypedRuleContext(Expression_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.enterFunction_parameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RexxParserListener ) {
	        listener.exitFunction_parameters(this);
		}
	}


}




RexxParser.File_Context = File_Context; 
RexxParser.Program_Context = Program_Context; 
RexxParser.NclContext = NclContext; 
RexxParser.Null_clauseContext = Null_clauseContext; 
RexxParser.DelimContext = DelimContext; 
RexxParser.Label_listContext = Label_listContext; 
RexxParser.LabelContext = LabelContext; 
RexxParser.Include_statementContext = Include_statementContext; 
RexxParser.Instruction_listContext = Instruction_listContext; 
RexxParser.InstructionContext = InstructionContext; 
RexxParser.Single_instructionContext = Single_instructionContext; 
RexxParser.AssignmentContext = AssignmentContext; 
RexxParser.Keyword_instructionContext = Keyword_instructionContext; 
RexxParser.Command_Context = Command_Context; 
RexxParser.Group_Context = Group_Context; 
RexxParser.Do_Context = Do_Context; 
RexxParser.Do_repContext = Do_repContext; 
RexxParser.Do_cntContext = Do_cntContext; 
RexxParser.DotContext = DotContext; 
RexxParser.DobContext = DobContext; 
RexxParser.DofContext = DofContext; 
RexxParser.Do_condContext = Do_condContext; 
RexxParser.If_Context = If_Context; 
RexxParser.Then_Context = Then_Context; 
RexxParser.Else_Context = Else_Context; 
RexxParser.Select_Context = Select_Context; 
RexxParser.Select_bodyContext = Select_bodyContext; 
RexxParser.When_Context = When_Context; 
RexxParser.Otherwise_Context = Otherwise_Context; 
RexxParser.Address_Context = Address_Context; 
RexxParser.Taken_constantContext = Taken_constantContext; 
RexxParser.ValueexpContext = ValueexpContext; 
RexxParser.Arg_Context = Arg_Context; 
RexxParser.Call_Context = Call_Context; 
RexxParser.Callon_specContext = Callon_specContext; 
RexxParser.Callable_conditionContext = Callable_conditionContext; 
RexxParser.Call_parmsContext = Call_parmsContext; 
RexxParser.Expression_listContext = Expression_listContext; 
RexxParser.Drop_Context = Drop_Context; 
RexxParser.Variable_listContext = Variable_listContext; 
RexxParser.VrefContext = VrefContext; 
RexxParser.Var_symbolContext = Var_symbolContext; 
RexxParser.Exit_Context = Exit_Context; 
RexxParser.Interpret_Context = Interpret_Context; 
RexxParser.Iterate_Context = Iterate_Context; 
RexxParser.Leave_Context = Leave_Context; 
RexxParser.Nop_Context = Nop_Context; 
RexxParser.Numeric_Context = Numeric_Context; 
RexxParser.Numeric_digitsContext = Numeric_digitsContext; 
RexxParser.Numeric_formContext = Numeric_formContext; 
RexxParser.Numeric_fuzzContext = Numeric_fuzzContext; 
RexxParser.Options_Context = Options_Context; 
RexxParser.Parse_Context = Parse_Context; 
RexxParser.Parse_typeContext = Parse_typeContext; 
RexxParser.Parse_keyContext = Parse_keyContext; 
RexxParser.Parse_valueContext = Parse_valueContext; 
RexxParser.Parse_varContext = Parse_varContext; 
RexxParser.Procedure_Context = Procedure_Context; 
RexxParser.Pull_Context = Pull_Context; 
RexxParser.Push_Context = Push_Context; 
RexxParser.Queue_Context = Queue_Context; 
RexxParser.Return_Context = Return_Context; 
RexxParser.Say_Context = Say_Context; 
RexxParser.Signal_Context = Signal_Context; 
RexxParser.Signal_specContext = Signal_specContext; 
RexxParser.ConditionContext = ConditionContext; 
RexxParser.Trace_Context = Trace_Context; 
RexxParser.Upper_Context = Upper_Context; 
RexxParser.Template_listContext = Template_listContext; 
RexxParser.Template_Context = Template_Context; 
RexxParser.Target_Context = Target_Context; 
RexxParser.Trigger_Context = Trigger_Context; 
RexxParser.Pattern_Context = Pattern_Context; 
RexxParser.Positional_Context = Positional_Context; 
RexxParser.Absolute_positionalContext = Absolute_positionalContext; 
RexxParser.Position_Context = Position_Context; 
RexxParser.Relative_positionalContext = Relative_positionalContext; 
RexxParser.SymbolContext = SymbolContext; 
RexxParser.ExpressionContext = ExpressionContext; 
RexxParser.Or_operatorContext = Or_operatorContext; 
RexxParser.And_expressionContext = And_expressionContext; 
RexxParser.ComparisonContext = ComparisonContext; 
RexxParser.Comparison_operatorContext = Comparison_operatorContext; 
RexxParser.Normal_compareContext = Normal_compareContext; 
RexxParser.Strict_compareContext = Strict_compareContext; 
RexxParser.ConcatenationContext = ConcatenationContext; 
RexxParser.AdditionContext = AdditionContext; 
RexxParser.Additive_operatorContext = Additive_operatorContext; 
RexxParser.MultiplicationContext = MultiplicationContext; 
RexxParser.Multiplicative_operatorContext = Multiplicative_operatorContext; 
RexxParser.Power_expressionContext = Power_expressionContext; 
RexxParser.Prefix_expressionContext = Prefix_expressionContext; 
RexxParser.TermContext = TermContext; 
RexxParser.Function_Context = Function_Context; 
RexxParser.Function_nameContext = Function_nameContext; 
RexxParser.Function_parametersContext = Function_parametersContext; 
