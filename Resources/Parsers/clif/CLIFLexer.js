// Generated from Resources/Parsers/clif/CLIF.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,28,304,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,
1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,104,8,8,
1,9,1,9,1,10,1,10,1,11,1,11,1,12,4,12,113,8,12,11,12,12,12,114,1,13,1,13,
1,13,1,13,1,13,5,13,122,8,13,10,13,12,13,125,9,13,1,14,1,14,1,14,1,14,1,
14,1,14,1,14,1,14,1,14,5,14,136,8,14,10,14,12,14,139,9,14,1,14,1,14,1,15,
1,15,1,15,1,15,1,15,1,15,1,15,1,15,5,15,151,8,15,10,15,12,15,154,9,15,1,
15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,
22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,
26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,
1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,5,31,270,8,31,
10,31,12,31,273,9,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,5,33,284,
8,33,10,33,12,33,287,9,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,5,
34,298,8,34,10,34,12,34,301,9,34,1,34,1,34,1,285,0,35,1,1,3,2,5,3,7,4,9,
5,11,0,13,0,15,0,17,0,19,0,21,0,23,0,25,6,27,7,29,8,31,9,33,10,35,11,37,
12,39,13,41,14,43,15,45,16,47,17,49,18,51,19,53,20,55,21,57,22,59,23,61,
24,63,25,65,26,67,27,69,28,1,0,5,5,0,33,33,35,38,42,63,65,91,93,126,1,0,
48,57,3,0,48,57,65,70,97,102,3,0,9,11,13,13,32,32,2,0,10,10,13,13,321,0,
1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,25,1,0,0,0,0,
27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,1,71,1,
0,0,0,3,73,1,0,0,0,5,75,1,0,0,0,7,77,1,0,0,0,9,79,1,0,0,0,11,81,1,0,0,0,
13,83,1,0,0,0,15,85,1,0,0,0,17,103,1,0,0,0,19,105,1,0,0,0,21,107,1,0,0,0,
23,109,1,0,0,0,25,112,1,0,0,0,27,116,1,0,0,0,29,126,1,0,0,0,31,142,1,0,0,
0,33,157,1,0,0,0,35,159,1,0,0,0,37,163,1,0,0,0,39,166,1,0,0,0,41,170,1,0,
0,0,43,173,1,0,0,0,45,180,1,0,0,0,47,187,1,0,0,0,49,191,1,0,0,0,51,202,1,
0,0,0,53,210,1,0,0,0,55,221,1,0,0,0,57,233,1,0,0,0,59,243,1,0,0,0,61,254,
1,0,0,0,63,264,1,0,0,0,65,274,1,0,0,0,67,278,1,0,0,0,69,293,1,0,0,0,71,72,
5,40,0,0,72,2,1,0,0,0,73,74,5,41,0,0,74,4,1,0,0,0,75,76,5,39,0,0,76,6,1,
0,0,0,77,78,5,34,0,0,78,8,1,0,0,0,79,80,5,92,0,0,80,10,1,0,0,0,81,82,7,0,
0,0,82,12,1,0,0,0,83,84,7,1,0,0,84,14,1,0,0,0,85,86,7,2,0,0,86,16,1,0,0,
0,87,88,5,92,0,0,88,89,5,117,0,0,89,90,3,15,7,0,90,91,3,15,7,0,91,92,3,15,
7,0,92,93,3,15,7,0,93,104,1,0,0,0,94,95,5,92,0,0,95,96,5,85,0,0,96,97,3,
15,7,0,97,98,3,15,7,0,98,99,3,15,7,0,99,100,3,15,7,0,100,101,3,15,7,0,101,
102,3,15,7,0,102,104,1,0,0,0,103,87,1,0,0,0,103,94,1,0,0,0,104,18,1,0,0,
0,105,106,5,39,0,0,106,20,1,0,0,0,107,108,5,34,0,0,108,22,1,0,0,0,109,110,
5,92,0,0,110,24,1,0,0,0,111,113,3,13,6,0,112,111,1,0,0,0,113,114,1,0,0,0,
114,112,1,0,0,0,114,115,1,0,0,0,115,26,1,0,0,0,116,117,5,46,0,0,117,118,
5,46,0,0,118,119,5,46,0,0,119,123,1,0,0,0,120,122,3,11,5,0,121,120,1,0,0,
0,122,125,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,28,1,0,0,0,125,123,
1,0,0,0,126,137,3,5,2,0,127,136,3,65,32,0,128,136,3,1,0,0,129,136,3,3,1,
0,130,136,3,11,5,0,131,136,3,17,8,0,132,136,3,7,3,0,133,136,3,19,9,0,134,
136,3,23,11,0,135,127,1,0,0,0,135,128,1,0,0,0,135,129,1,0,0,0,135,130,1,
0,0,0,135,131,1,0,0,0,135,132,1,0,0,0,135,133,1,0,0,0,135,134,1,0,0,0,136,
139,1,0,0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,140,1,0,0,0,139,137,1,0,
0,0,140,141,3,5,2,0,141,30,1,0,0,0,142,152,3,7,3,0,143,151,3,65,32,0,144,
151,3,1,0,0,145,151,3,3,1,0,146,151,3,11,5,0,147,151,3,17,8,0,148,151,3,
5,2,0,149,151,3,21,10,0,150,143,1,0,0,0,150,144,1,0,0,0,150,145,1,0,0,0,
150,146,1,0,0,0,150,147,1,0,0,0,150,148,1,0,0,0,150,149,1,0,0,0,151,154,
1,0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,155,1,0,0,0,154,152,1,0,0,0,
155,156,3,7,3,0,156,32,1,0,0,0,157,158,5,61,0,0,158,34,1,0,0,0,159,160,5,
97,0,0,160,161,5,110,0,0,161,162,5,100,0,0,162,36,1,0,0,0,163,164,5,111,
0,0,164,165,5,114,0,0,165,38,1,0,0,0,166,167,5,105,0,0,167,168,5,102,0,0,
168,169,5,102,0,0,169,40,1,0,0,0,170,171,5,105,0,0,171,172,5,102,0,0,172,
42,1,0,0,0,173,174,5,102,0,0,174,175,5,111,0,0,175,176,5,114,0,0,176,177,
5,97,0,0,177,178,5,108,0,0,178,179,5,108,0,0,179,44,1,0,0,0,180,181,5,101,
0,0,181,182,5,120,0,0,182,183,5,105,0,0,183,184,5,115,0,0,184,185,5,116,
0,0,185,186,5,115,0,0,186,46,1,0,0,0,187,188,5,110,0,0,188,189,5,111,0,0,
189,190,5,116,0,0,190,48,1,0,0,0,191,192,5,99,0,0,192,193,5,108,0,0,193,
194,5,45,0,0,194,195,5,114,0,0,195,196,5,111,0,0,196,197,5,108,0,0,197,198,
5,101,0,0,198,199,5,115,0,0,199,200,5,101,0,0,200,201,5,116,0,0,201,50,1,
0,0,0,202,203,5,99,0,0,203,204,5,108,0,0,204,205,5,45,0,0,205,206,5,116,
0,0,206,207,5,101,0,0,207,208,5,120,0,0,208,209,5,116,0,0,209,52,1,0,0,0,
210,211,5,99,0,0,211,212,5,108,0,0,212,213,5,45,0,0,213,214,5,105,0,0,214,
215,5,109,0,0,215,216,5,112,0,0,216,217,5,111,0,0,217,218,5,114,0,0,218,
219,5,116,0,0,219,220,5,115,0,0,220,54,1,0,0,0,221,222,5,99,0,0,222,223,
5,108,0,0,223,224,5,45,0,0,224,225,5,101,0,0,225,226,5,120,0,0,226,227,5,
99,0,0,227,228,5,108,0,0,228,229,5,117,0,0,229,230,5,100,0,0,230,231,5,101,
0,0,231,232,5,115,0,0,232,56,1,0,0,0,233,234,5,99,0,0,234,235,5,108,0,0,
235,236,5,45,0,0,236,237,5,109,0,0,237,238,5,111,0,0,238,239,5,100,0,0,239,
240,5,117,0,0,240,241,5,108,0,0,241,242,5,101,0,0,242,58,1,0,0,0,243,244,
5,99,0,0,244,245,5,108,0,0,245,246,5,45,0,0,246,247,5,99,0,0,247,248,5,111,
0,0,248,249,5,109,0,0,249,250,5,109,0,0,250,251,5,101,0,0,251,252,5,110,
0,0,252,253,5,116,0,0,253,60,1,0,0,0,254,255,5,99,0,0,255,256,5,108,0,0,
256,257,5,45,0,0,257,258,5,112,0,0,258,259,5,114,0,0,259,260,5,101,0,0,260,
261,5,102,0,0,261,262,5,105,0,0,262,263,5,120,0,0,263,62,1,0,0,0,264,271,
3,11,5,0,265,270,3,11,5,0,266,270,3,5,2,0,267,270,3,7,3,0,268,270,3,9,4,
0,269,265,1,0,0,0,269,266,1,0,0,0,269,267,1,0,0,0,269,268,1,0,0,0,270,273,
1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,0,272,64,1,0,0,0,273,271,1,0,0,0,274,
275,7,3,0,0,275,276,1,0,0,0,276,277,6,32,0,0,277,66,1,0,0,0,278,279,5,47,
0,0,279,280,5,42,0,0,280,285,1,0,0,0,281,284,3,67,33,0,282,284,9,0,0,0,283,
281,1,0,0,0,283,282,1,0,0,0,284,287,1,0,0,0,285,286,1,0,0,0,285,283,1,0,
0,0,286,288,1,0,0,0,287,285,1,0,0,0,288,289,5,42,0,0,289,290,5,47,0,0,290,
291,1,0,0,0,291,292,6,33,0,0,292,68,1,0,0,0,293,294,5,47,0,0,294,295,5,47,
0,0,295,299,1,0,0,0,296,298,8,4,0,0,297,296,1,0,0,0,298,301,1,0,0,0,299,
297,1,0,0,0,299,300,1,0,0,0,300,302,1,0,0,0,301,299,1,0,0,0,302,303,6,34,
0,0,303,70,1,0,0,0,13,0,103,114,123,135,137,150,152,269,271,283,285,299,
1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class CLIFLexer extends antlr4.Lexer {

    static grammarFileName = "CLIF.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'('", "')'", "'''", "'\"'", "'\\'", null, 
                         null, null, null, "'='", "'and'", "'or'", "'iff'", 
                         "'if'", "'forall'", "'exists'", "'not'", "'cl-roleset'", 
                         "'cl-text'", "'cl-imports'", "'cl-excludes'", "'cl-module'", 
                         "'cl-comment'", "'cl-prefix'" ];
	static symbolicNames = [ null, "OPEN", "CLOSE", "STRINGQUOTE", "NAMEQUOTE", 
                          "BACKSLASH", "NUMERAL", "SEQMARK", "QUOTEDSTRING", 
                          "ENCLOSEDNAME", "EQUAL", "AND", "OR", "IFF", "IF", 
                          "FORALL", "EXISTS", "NOT", "CL_ROLESET", "CL_TEXT", 
                          "CL_IMPORTS", "CL_EXCLUDES", "CL_MODULE", "CL_COMMENT", 
                          "CL_PREFIX", "NAMECHARSEQUENCE", "WHITE", "BLOCKCOMMENT", 
                          "LineComment" ];
	static ruleNames = [ "OPEN", "CLOSE", "STRINGQUOTE", "NAMEQUOTE", "BACKSLASH", 
                      "CHAR", "DIGIT", "HEXA", "NONASCII", "INNERSTRINGQUOTE", 
                      "INNERNAMEQUOTE", "INNERBACKSLASH", "NUMERAL", "SEQMARK", 
                      "QUOTEDSTRING", "ENCLOSEDNAME", "EQUAL", "AND", "OR", 
                      "IFF", "IF", "FORALL", "EXISTS", "NOT", "CL_ROLESET", 
                      "CL_TEXT", "CL_IMPORTS", "CL_EXCLUDES", "CL_MODULE", 
                      "CL_COMMENT", "CL_PREFIX", "NAMECHARSEQUENCE", "WHITE", 
                      "BLOCKCOMMENT", "LineComment" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

CLIFLexer.EOF = antlr4.Token.EOF;
CLIFLexer.OPEN = 1;
CLIFLexer.CLOSE = 2;
CLIFLexer.STRINGQUOTE = 3;
CLIFLexer.NAMEQUOTE = 4;
CLIFLexer.BACKSLASH = 5;
CLIFLexer.NUMERAL = 6;
CLIFLexer.SEQMARK = 7;
CLIFLexer.QUOTEDSTRING = 8;
CLIFLexer.ENCLOSEDNAME = 9;
CLIFLexer.EQUAL = 10;
CLIFLexer.AND = 11;
CLIFLexer.OR = 12;
CLIFLexer.IFF = 13;
CLIFLexer.IF = 14;
CLIFLexer.FORALL = 15;
CLIFLexer.EXISTS = 16;
CLIFLexer.NOT = 17;
CLIFLexer.CL_ROLESET = 18;
CLIFLexer.CL_TEXT = 19;
CLIFLexer.CL_IMPORTS = 20;
CLIFLexer.CL_EXCLUDES = 21;
CLIFLexer.CL_MODULE = 22;
CLIFLexer.CL_COMMENT = 23;
CLIFLexer.CL_PREFIX = 24;
CLIFLexer.NAMECHARSEQUENCE = 25;
CLIFLexer.WHITE = 26;
CLIFLexer.BLOCKCOMMENT = 27;
CLIFLexer.LineComment = 28;



