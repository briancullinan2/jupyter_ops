// Generated from ./smalltalk/Smalltalk.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,32,188,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,0,1,1,1,1,5,1,70,8,
1,10,1,12,1,73,9,1,1,1,1,1,1,2,1,2,5,2,79,8,2,10,2,12,2,82,9,2,1,2,1,2,1,
3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,4,10,
103,8,10,11,10,12,10,104,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,
14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
1,14,1,14,1,14,3,14,134,8,14,1,15,4,15,137,8,15,11,15,12,15,138,1,15,5,15,
142,8,15,10,15,12,15,145,9,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,
19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,
1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,
31,1,31,1,31,3,31,187,8,31,2,71,80,0,32,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
1,0,7,3,0,9,10,13,13,32,32,7,0,37,37,42,44,47,47,60,62,64,64,92,92,126,126,
3,0,38,38,45,45,63,63,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,1,0,
48,57,3,0,48,57,65,70,97,102,199,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,
41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
1,0,0,0,1,65,1,0,0,0,3,67,1,0,0,0,5,76,1,0,0,0,7,85,1,0,0,0,9,87,1,0,0,0,
11,89,1,0,0,0,13,91,1,0,0,0,15,93,1,0,0,0,17,95,1,0,0,0,19,97,1,0,0,0,21,
102,1,0,0,0,23,106,1,0,0,0,25,108,1,0,0,0,27,110,1,0,0,0,29,133,1,0,0,0,
31,136,1,0,0,0,33,146,1,0,0,0,35,148,1,0,0,0,37,150,1,0,0,0,39,153,1,0,0,
0,41,155,1,0,0,0,43,157,1,0,0,0,45,159,1,0,0,0,47,163,1,0,0,0,49,166,1,0,
0,0,51,169,1,0,0,0,53,171,1,0,0,0,55,173,1,0,0,0,57,175,1,0,0,0,59,177,1,
0,0,0,61,180,1,0,0,0,63,183,1,0,0,0,65,66,7,0,0,0,66,2,1,0,0,0,67,71,5,39,
0,0,68,70,9,0,0,0,69,68,1,0,0,0,70,73,1,0,0,0,71,72,1,0,0,0,71,69,1,0,0,
0,72,74,1,0,0,0,73,71,1,0,0,0,74,75,5,39,0,0,75,4,1,0,0,0,76,80,5,34,0,0,
77,79,9,0,0,0,78,77,1,0,0,0,79,82,1,0,0,0,80,81,1,0,0,0,80,78,1,0,0,0,81,
83,1,0,0,0,82,80,1,0,0,0,83,84,5,34,0,0,84,6,1,0,0,0,85,86,5,91,0,0,86,8,
1,0,0,0,87,88,5,93,0,0,88,10,1,0,0,0,89,90,5,41,0,0,90,12,1,0,0,0,91,92,
5,40,0,0,92,14,1,0,0,0,93,94,5,124,0,0,94,16,1,0,0,0,95,96,5,46,0,0,96,18,
1,0,0,0,97,98,5,59,0,0,98,20,1,0,0,0,99,103,7,1,0,0,100,103,3,15,7,0,101,
103,7,2,0,0,102,99,1,0,0,0,102,100,1,0,0,0,102,101,1,0,0,0,103,104,1,0,0,
0,104,102,1,0,0,0,104,105,1,0,0,0,105,22,1,0,0,0,106,107,5,60,0,0,107,24,
1,0,0,0,108,109,5,62,0,0,109,26,1,0,0,0,110,111,5,45,0,0,111,28,1,0,0,0,
112,113,5,110,0,0,113,114,5,105,0,0,114,134,5,108,0,0,115,116,5,116,0,0,
116,117,5,114,0,0,117,118,5,117,0,0,118,134,5,101,0,0,119,120,5,102,0,0,
120,121,5,97,0,0,121,122,5,108,0,0,122,123,5,115,0,0,123,134,5,101,0,0,124,
125,5,115,0,0,125,126,5,101,0,0,126,127,5,108,0,0,127,134,5,102,0,0,128,
129,5,115,0,0,129,130,5,117,0,0,130,131,5,112,0,0,131,132,5,101,0,0,132,
134,5,114,0,0,133,112,1,0,0,0,133,115,1,0,0,0,133,119,1,0,0,0,133,124,1,
0,0,0,133,128,1,0,0,0,134,30,1,0,0,0,135,137,7,3,0,0,136,135,1,0,0,0,137,
138,1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,143,1,0,0,0,140,142,7,4,
0,0,141,140,1,0,0,0,142,145,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,
32,1,0,0,0,145,143,1,0,0,0,146,147,5,94,0,0,147,34,1,0,0,0,148,149,5,58,
0,0,149,36,1,0,0,0,150,151,5,58,0,0,151,152,5,61,0,0,152,38,1,0,0,0,153,
154,5,35,0,0,154,40,1,0,0,0,155,156,5,36,0,0,156,42,1,0,0,0,157,158,5,101,
0,0,158,44,1,0,0,0,159,160,5,49,0,0,160,161,5,54,0,0,161,162,5,114,0,0,162,
46,1,0,0,0,163,164,5,35,0,0,164,165,5,40,0,0,165,48,1,0,0,0,166,167,5,35,
0,0,167,168,5,123,0,0,168,50,1,0,0,0,169,170,5,125,0,0,170,52,1,0,0,0,171,
172,5,123,0,0,172,54,1,0,0,0,173,174,7,5,0,0,174,56,1,0,0,0,175,176,7,6,
0,0,176,58,1,0,0,0,177,178,3,31,15,0,178,179,3,35,17,0,179,60,1,0,0,0,180,
181,3,35,17,0,181,182,3,31,15,0,182,62,1,0,0,0,183,186,3,41,20,0,184,187,
3,57,28,0,185,187,3,41,20,0,186,184,1,0,0,0,186,185,1,0,0,0,187,64,1,0,0,
0,9,0,71,80,102,104,133,138,143,186,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class SmalltalkLexer extends antlr4.Lexer {

    static grammarFileName = "Smalltalk.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, null, null, null, "'['", "']'", "')'", "'('", 
                         "'|'", "'.'", "';'", null, "'<'", "'>'", "'-'", 
                         null, null, "'^'", "':'", "':='", "'#'", "'$'", 
                         "'e'", "'16r'", "'#('", "'#{'", "'}'", "'{'" ];
	static symbolicNames = [ null, "SEPARATOR", "STRING", "COMMENT", "BLOCK_START", 
                          "BLOCK_END", "CLOSE_PAREN", "OPEN_PAREN", "PIPE", 
                          "PERIOD", "SEMI_COLON", "BINARY_SELECTOR", "LT", 
                          "GT", "MINUS", "RESERVED_WORD", "IDENTIFIER", 
                          "CARROT", "COLON", "ASSIGNMENT", "HASH", "DOLLAR", 
                          "EXP", "HEX", "LITARR_START", "DYNDICT_START", 
                          "DYNARR_END", "DYNARR_START", "DIGIT", "HEXDIGIT", 
                          "KEYWORD", "BLOCK_PARAM", "CHARACTER_CONSTANT" ];
	static ruleNames = [ "SEPARATOR", "STRING", "COMMENT", "BLOCK_START", "BLOCK_END", 
                      "CLOSE_PAREN", "OPEN_PAREN", "PIPE", "PERIOD", "SEMI_COLON", 
                      "BINARY_SELECTOR", "LT", "GT", "MINUS", "RESERVED_WORD", 
                      "IDENTIFIER", "CARROT", "COLON", "ASSIGNMENT", "HASH", 
                      "DOLLAR", "EXP", "HEX", "LITARR_START", "DYNDICT_START", 
                      "DYNARR_END", "DYNARR_START", "DIGIT", "HEXDIGIT", 
                      "KEYWORD", "BLOCK_PARAM", "CHARACTER_CONSTANT" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

SmalltalkLexer.EOF = antlr4.Token.EOF;
SmalltalkLexer.SEPARATOR = 1;
SmalltalkLexer.STRING = 2;
SmalltalkLexer.COMMENT = 3;
SmalltalkLexer.BLOCK_START = 4;
SmalltalkLexer.BLOCK_END = 5;
SmalltalkLexer.CLOSE_PAREN = 6;
SmalltalkLexer.OPEN_PAREN = 7;
SmalltalkLexer.PIPE = 8;
SmalltalkLexer.PERIOD = 9;
SmalltalkLexer.SEMI_COLON = 10;
SmalltalkLexer.BINARY_SELECTOR = 11;
SmalltalkLexer.LT = 12;
SmalltalkLexer.GT = 13;
SmalltalkLexer.MINUS = 14;
SmalltalkLexer.RESERVED_WORD = 15;
SmalltalkLexer.IDENTIFIER = 16;
SmalltalkLexer.CARROT = 17;
SmalltalkLexer.COLON = 18;
SmalltalkLexer.ASSIGNMENT = 19;
SmalltalkLexer.HASH = 20;
SmalltalkLexer.DOLLAR = 21;
SmalltalkLexer.EXP = 22;
SmalltalkLexer.HEX = 23;
SmalltalkLexer.LITARR_START = 24;
SmalltalkLexer.DYNDICT_START = 25;
SmalltalkLexer.DYNARR_END = 26;
SmalltalkLexer.DYNARR_START = 27;
SmalltalkLexer.DIGIT = 28;
SmalltalkLexer.HEXDIGIT = 29;
SmalltalkLexer.KEYWORD = 30;
SmalltalkLexer.BLOCK_PARAM = 31;
SmalltalkLexer.CHARACTER_CONSTANT = 32;



