// Generated from Resources/Parsers/sharc/SHARCParser.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import SHARCParserListener from './SHARCParserListener.js';
const serializedATN = [4,1,426,1632,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,1,0,1,0,1,0,4,0,316,8,0,11,0,12,0,317,1,1,1,1,1,
1,4,1,323,8,1,11,1,12,1,324,1,1,3,1,328,8,1,1,2,1,2,1,2,1,2,1,2,3,2,335,
8,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,3,6,350,8,6,1,6,
1,6,1,6,3,6,355,8,6,1,6,1,6,1,6,3,6,360,8,6,3,6,362,8,6,1,7,1,7,1,7,3,7,
367,8,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,
1,13,1,13,1,13,1,13,1,13,3,13,388,8,13,1,14,1,14,1,14,1,14,1,14,1,14,3,14,
396,8,14,1,15,1,15,1,15,5,15,401,8,15,10,15,12,15,404,9,15,1,16,1,16,1,16,
1,16,5,16,410,8,16,10,16,12,16,413,9,16,1,17,1,17,1,17,1,17,1,17,3,17,420,
8,17,1,18,1,18,1,18,1,18,1,18,1,18,3,18,428,8,18,1,19,1,19,1,19,1,19,1,20,
1,20,1,20,5,20,437,8,20,10,20,12,20,440,9,20,1,20,3,20,443,8,20,1,21,1,21,
1,21,1,21,1,21,3,21,450,8,21,1,22,1,22,3,22,454,8,22,1,23,1,23,1,23,1,23,
1,23,1,23,3,23,462,8,23,1,24,1,24,1,25,1,25,1,25,5,25,469,8,25,10,25,12,
25,472,9,25,1,26,3,26,475,8,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,3,27,484,
8,27,1,28,1,28,1,28,3,28,489,8,28,1,29,1,29,1,29,1,29,1,29,3,29,496,8,29,
1,30,1,30,1,30,1,30,1,31,1,31,3,31,504,8,31,1,32,1,32,1,32,3,32,509,8,32,
1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,522,8,32,1,33,
1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,536,8,34,1,35,
1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,546,8,35,1,36,1,36,3,36,550,8,36,
1,36,1,36,1,36,1,37,1,37,3,37,557,8,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,
3,38,566,8,38,1,39,1,39,1,39,1,39,3,39,572,8,39,1,40,1,40,3,40,576,8,40,
1,40,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,42,3,42,587,8,42,1,43,1,43,1,44,
1,44,1,44,1,44,1,45,1,45,3,45,597,8,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,
3,46,606,8,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
1,47,3,47,621,8,47,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,
1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,
52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,
1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,57,1,57,1,57,1,57,1,
57,3,57,678,8,57,1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,61,1,61,
1,61,1,62,1,62,1,62,1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,65,1,66,1,
66,1,66,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
1,68,3,68,721,8,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,
69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,
69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,
69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,814,8,69,1,69,1,69,1,69,1,69,
3,69,820,8,69,3,69,822,8,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
1,70,1,70,3,70,835,8,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,884,8,71,1,71,1,71,1,71,1,71,
1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,917,
8,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,
72,1,72,1,72,3,72,935,8,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,944,8,
72,3,72,946,8,72,1,73,1,73,1,73,1,73,3,73,952,8,73,1,74,1,74,1,74,1,74,1,
74,1,74,1,74,1,74,3,74,962,8,74,1,74,1,74,1,74,3,74,967,8,74,1,74,3,74,970,
8,74,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,980,8,75,1,75,1,75,1,75,
3,75,985,8,75,3,75,987,8,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,
997,8,76,1,76,1,76,1,76,3,76,1002,8,76,3,76,1004,8,76,1,77,1,77,1,78,1,78,
1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,1022,8,
78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,
79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1075,8,79,1,79,1,79,1,79,1,
79,1,79,1,79,1,79,3,79,1084,8,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
1,79,1,79,1,79,1,79,3,79,1098,8,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1106,
8,79,1,80,1,80,1,80,1,80,3,80,1112,8,80,1,81,1,81,3,81,1116,8,81,1,82,1,
82,1,82,1,82,1,83,1,83,1,84,1,84,3,84,1126,8,84,1,85,1,85,1,85,1,85,1,85,
1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,4,86,1143,8,86,11,86,12,
86,1144,1,86,1,86,1,86,4,86,1150,8,86,11,86,12,86,1151,3,86,1154,8,86,1,
87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1167,8,87,1,88,
1,88,1,88,1,88,1,89,1,89,3,89,1175,8,89,1,90,1,90,1,90,1,90,1,90,1,90,1,
90,1,91,1,91,1,91,1,91,3,91,1188,8,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,
1,92,1,92,3,92,1199,8,92,1,92,1,92,1,93,1,93,3,93,1205,8,93,1,94,1,94,1,
94,1,94,1,94,1,94,1,94,1,94,1,94,1,95,1,95,3,95,1218,8,95,1,96,1,96,1,96,
1,96,1,96,1,97,1,97,1,97,3,97,1228,8,97,1,98,1,98,1,98,3,98,1233,8,98,1,
99,1,99,1,99,3,99,1238,8,99,1,99,1,99,3,99,1242,8,99,1,100,1,100,1,100,3,
100,1247,8,100,1,100,1,100,3,100,1251,8,100,1,101,1,101,3,101,1255,8,101,
1,101,1,101,3,101,1259,8,101,1,102,1,102,3,102,1263,8,102,1,102,1,102,3,
102,1267,8,102,1,103,1,103,3,103,1271,8,103,1,104,1,104,3,104,1275,8,104,
1,105,1,105,1,105,1,105,1,105,1,105,1,106,1,106,1,107,1,107,1,108,1,108,
1,108,1,108,3,108,1291,8,108,1,108,1,108,1,109,1,109,1,109,3,109,1298,8,
109,1,110,1,110,1,110,1,110,1,111,1,111,1,112,1,112,1,112,3,112,1309,8,112,
1,112,1,112,1,113,1,113,1,113,3,113,1316,8,113,1,114,1,114,1,114,1,114,3,
114,1322,8,114,1,115,1,115,3,115,1326,8,115,1,115,1,115,1,115,1,116,1,116,
3,116,1333,8,116,1,116,1,116,1,116,1,117,1,117,1,117,1,117,3,117,1342,8,
117,1,118,1,118,1,118,1,118,3,118,1348,8,118,1,119,1,119,3,119,1352,8,119,
1,119,1,119,1,119,1,120,1,120,1,120,1,120,1,121,1,121,1,121,1,121,1,121,
1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,3,121,1376,8,
121,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,3,122,1386,8,122,1,122,
1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,
1,122,1,122,1,122,1,122,5,122,1405,8,122,10,122,12,122,1408,9,122,1,122,
1,122,1,122,1,122,1,122,1,122,1,122,1,122,3,122,1418,8,122,1,122,3,122,1421,
8,122,1,123,1,123,1,123,1,124,1,124,1,124,1,124,1,124,1,124,1,124,5,124,
1433,8,124,10,124,12,124,1436,9,124,1,124,1,124,1,124,1,124,1,124,1,124,
1,124,1,124,1,124,5,124,1447,8,124,10,124,12,124,1450,9,124,1,124,1,124,
1,124,1,124,5,124,1456,8,124,10,124,12,124,1459,9,124,1,124,1,124,1,124,
1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
1,124,1,124,1,124,1,124,1,124,1,124,3,124,1482,8,124,1,124,1,124,1,124,1,
124,1,124,1,124,1,124,1,124,3,124,1492,8,124,1,125,1,125,1,126,1,126,1,127,
1,127,1,128,1,128,1,129,1,129,1,130,1,130,1,131,1,131,1,132,1,132,1,133,
1,133,1,134,1,134,3,134,1514,8,134,1,135,1,135,3,135,1518,8,135,1,136,1,
136,1,136,1,136,3,136,1524,8,136,1,137,1,137,3,137,1528,8,137,1,138,1,138,
1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,
1,138,1,138,3,138,1546,8,138,1,139,1,139,1,140,1,140,1,140,1,140,1,140,1,
140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,
140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,
140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,
140,1,140,1,140,1,140,1,140,3,140,1596,8,140,1,141,1,141,1,142,1,142,1,142,
1,142,1,143,1,143,1,144,1,144,1,144,1,144,1,145,1,145,1,146,1,146,1,147,
1,147,1,148,1,148,1,149,1,149,1,150,1,150,1,151,1,151,1,152,1,152,1,153,
1,153,1,154,1,154,1,155,1,155,1,155,0,0,156,0,2,4,6,8,10,12,14,16,18,20,
22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,
222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,
258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,
294,296,298,300,302,304,306,308,310,0,32,2,0,277,277,398,398,2,0,101,101,
399,400,1,0,395,397,2,0,377,381,383,384,1,0,377,378,1,0,253,254,2,0,87,87,
206,206,5,0,90,90,326,326,352,352,356,356,376,376,2,0,282,282,292,292,3,
0,219,219,275,275,342,342,1,0,57,72,1,0,190,205,1,0,297,312,1,0,126,141,
6,0,55,55,185,186,188,188,244,245,340,340,368,369,1,0,164,171,1,0,223,230,
1,0,172,179,1,0,231,238,2,0,327,328,359,360,4,0,334,336,343,345,364,366,
370,372,2,0,297,297,299,300,1,0,301,304,1,0,305,308,1,0,309,312,2,0,126,
126,128,129,1,0,130,133,1,0,134,137,1,0,138,141,2,0,3,3,425,425,3,0,248,
248,250,250,252,252,3,0,247,247,249,249,251,251,1791,0,315,1,0,0,0,2,327,
1,0,0,0,4,334,1,0,0,0,6,336,1,0,0,0,8,340,1,0,0,0,10,344,1,0,0,0,12,361,
1,0,0,0,14,363,1,0,0,0,16,368,1,0,0,0,18,371,1,0,0,0,20,374,1,0,0,0,22,376,
1,0,0,0,24,378,1,0,0,0,26,387,1,0,0,0,28,389,1,0,0,0,30,397,1,0,0,0,32,405,
1,0,0,0,34,414,1,0,0,0,36,421,1,0,0,0,38,429,1,0,0,0,40,442,1,0,0,0,42,449,
1,0,0,0,44,453,1,0,0,0,46,461,1,0,0,0,48,463,1,0,0,0,50,465,1,0,0,0,52,474,
1,0,0,0,54,483,1,0,0,0,56,488,1,0,0,0,58,495,1,0,0,0,60,497,1,0,0,0,62,503,
1,0,0,0,64,508,1,0,0,0,66,523,1,0,0,0,68,535,1,0,0,0,70,545,1,0,0,0,72,549,
1,0,0,0,74,556,1,0,0,0,76,561,1,0,0,0,78,567,1,0,0,0,80,575,1,0,0,0,82,580,
1,0,0,0,84,582,1,0,0,0,86,588,1,0,0,0,88,590,1,0,0,0,90,596,1,0,0,0,92,601,
1,0,0,0,94,607,1,0,0,0,96,622,1,0,0,0,98,628,1,0,0,0,100,634,1,0,0,0,102,
640,1,0,0,0,104,646,1,0,0,0,106,652,1,0,0,0,108,658,1,0,0,0,110,664,1,0,
0,0,112,670,1,0,0,0,114,677,1,0,0,0,116,679,1,0,0,0,118,682,1,0,0,0,120,
685,1,0,0,0,122,688,1,0,0,0,124,691,1,0,0,0,126,694,1,0,0,0,128,697,1,0,
0,0,130,700,1,0,0,0,132,703,1,0,0,0,134,706,1,0,0,0,136,720,1,0,0,0,138,
821,1,0,0,0,140,834,1,0,0,0,142,916,1,0,0,0,144,945,1,0,0,0,146,947,1,0,
0,0,148,969,1,0,0,0,150,986,1,0,0,0,152,1003,1,0,0,0,154,1005,1,0,0,0,156,
1021,1,0,0,0,158,1105,1,0,0,0,160,1111,1,0,0,0,162,1115,1,0,0,0,164,1117,
1,0,0,0,166,1121,1,0,0,0,168,1125,1,0,0,0,170,1127,1,0,0,0,172,1153,1,0,
0,0,174,1166,1,0,0,0,176,1168,1,0,0,0,178,1174,1,0,0,0,180,1176,1,0,0,0,
182,1187,1,0,0,0,184,1189,1,0,0,0,186,1204,1,0,0,0,188,1206,1,0,0,0,190,
1217,1,0,0,0,192,1219,1,0,0,0,194,1224,1,0,0,0,196,1229,1,0,0,0,198,1234,
1,0,0,0,200,1243,1,0,0,0,202,1252,1,0,0,0,204,1260,1,0,0,0,206,1270,1,0,
0,0,208,1274,1,0,0,0,210,1276,1,0,0,0,212,1282,1,0,0,0,214,1284,1,0,0,0,
216,1286,1,0,0,0,218,1294,1,0,0,0,220,1299,1,0,0,0,222,1303,1,0,0,0,224,
1305,1,0,0,0,226,1312,1,0,0,0,228,1321,1,0,0,0,230,1325,1,0,0,0,232,1332,
1,0,0,0,234,1337,1,0,0,0,236,1343,1,0,0,0,238,1351,1,0,0,0,240,1356,1,0,
0,0,242,1375,1,0,0,0,244,1420,1,0,0,0,246,1422,1,0,0,0,248,1491,1,0,0,0,
250,1493,1,0,0,0,252,1495,1,0,0,0,254,1497,1,0,0,0,256,1499,1,0,0,0,258,
1501,1,0,0,0,260,1503,1,0,0,0,262,1505,1,0,0,0,264,1507,1,0,0,0,266,1509,
1,0,0,0,268,1513,1,0,0,0,270,1517,1,0,0,0,272,1523,1,0,0,0,274,1527,1,0,
0,0,276,1545,1,0,0,0,278,1547,1,0,0,0,280,1595,1,0,0,0,282,1597,1,0,0,0,
284,1599,1,0,0,0,286,1603,1,0,0,0,288,1605,1,0,0,0,290,1609,1,0,0,0,292,
1611,1,0,0,0,294,1613,1,0,0,0,296,1615,1,0,0,0,298,1617,1,0,0,0,300,1619,
1,0,0,0,302,1621,1,0,0,0,304,1623,1,0,0,0,306,1625,1,0,0,0,308,1627,1,0,
0,0,310,1629,1,0,0,0,312,313,3,2,1,0,313,314,5,387,0,0,314,316,1,0,0,0,315,
312,1,0,0,0,316,317,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,1,1,0,0,
0,319,328,3,4,2,0,320,321,5,425,0,0,321,323,5,386,0,0,322,320,1,0,0,0,323,
324,1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,326,1,0,0,0,326,328,3,4,
2,0,327,319,1,0,0,0,327,322,1,0,0,0,328,3,1,0,0,0,329,335,3,26,13,0,330,
335,3,6,3,0,331,335,3,8,4,0,332,335,3,10,5,0,333,335,3,248,124,0,334,329,
1,0,0,0,334,330,1,0,0,0,334,331,1,0,0,0,334,332,1,0,0,0,334,333,1,0,0,0,
335,5,1,0,0,0,336,337,5,41,0,0,337,338,3,12,6,0,338,339,5,425,0,0,339,7,
1,0,0,0,340,341,5,42,0,0,341,342,3,12,6,0,342,343,5,425,0,0,343,9,1,0,0,
0,344,345,5,43,0,0,345,11,1,0,0,0,346,349,3,14,7,0,347,350,3,16,8,0,348,
350,3,18,9,0,349,347,1,0,0,0,349,348,1,0,0,0,349,350,1,0,0,0,350,362,1,0,
0,0,351,354,3,16,8,0,352,355,3,14,7,0,353,355,3,18,9,0,354,352,1,0,0,0,354,
353,1,0,0,0,354,355,1,0,0,0,355,362,1,0,0,0,356,359,3,18,9,0,357,360,3,14,
7,0,358,360,3,16,8,0,359,357,1,0,0,0,359,358,1,0,0,0,359,360,1,0,0,0,360,
362,1,0,0,0,361,346,1,0,0,0,361,351,1,0,0,0,361,356,1,0,0,0,362,13,1,0,0,
0,363,366,5,380,0,0,364,367,3,20,10,0,365,367,3,22,11,0,366,364,1,0,0,0,
366,365,1,0,0,0,367,15,1,0,0,0,368,369,5,380,0,0,369,370,3,24,12,0,370,17,
1,0,0,0,371,372,5,380,0,0,372,373,5,401,0,0,373,19,1,0,0,0,374,375,7,0,0,
0,375,21,1,0,0,0,376,377,7,1,0,0,377,23,1,0,0,0,378,379,7,2,0,0,379,25,1,
0,0,0,380,388,3,58,29,0,381,388,3,174,87,0,382,388,3,228,114,0,383,388,3,
244,122,0,384,388,3,28,14,0,385,388,3,60,30,0,386,388,3,64,32,0,387,380,
1,0,0,0,387,381,1,0,0,0,387,382,1,0,0,0,387,383,1,0,0,0,387,384,1,0,0,0,
387,385,1,0,0,0,387,386,1,0,0,0,388,27,1,0,0,0,389,395,5,46,0,0,390,396,
3,30,15,0,391,396,3,32,16,0,392,396,3,34,17,0,393,396,3,36,18,0,394,396,
3,38,19,0,395,390,1,0,0,0,395,391,1,0,0,0,395,392,1,0,0,0,395,393,1,0,0,
0,395,394,1,0,0,0,396,29,1,0,0,0,397,402,5,425,0,0,398,399,5,385,0,0,399,
401,5,425,0,0,400,398,1,0,0,0,401,404,1,0,0,0,402,400,1,0,0,0,402,403,1,
0,0,0,403,31,1,0,0,0,404,402,1,0,0,0,405,406,5,382,0,0,406,411,3,44,22,0,
407,408,5,385,0,0,408,410,3,44,22,0,409,407,1,0,0,0,410,413,1,0,0,0,411,
409,1,0,0,0,411,412,1,0,0,0,412,33,1,0,0,0,413,411,1,0,0,0,414,415,5,425,
0,0,415,416,5,390,0,0,416,419,5,391,0,0,417,418,5,382,0,0,418,420,3,42,21,
0,419,417,1,0,0,0,419,420,1,0,0,0,420,35,1,0,0,0,421,422,5,425,0,0,422,423,
5,390,0,0,423,424,3,48,24,0,424,427,5,391,0,0,425,426,5,382,0,0,426,428,
3,42,21,0,427,425,1,0,0,0,427,428,1,0,0,0,428,37,1,0,0,0,429,430,5,425,0,
0,430,431,5,382,0,0,431,432,3,48,24,0,432,39,1,0,0,0,433,438,3,44,22,0,434,
435,5,385,0,0,435,437,3,44,22,0,436,434,1,0,0,0,437,440,1,0,0,0,438,436,
1,0,0,0,438,439,1,0,0,0,439,443,1,0,0,0,440,438,1,0,0,0,441,443,5,1,0,0,
442,433,1,0,0,0,442,441,1,0,0,0,443,41,1,0,0,0,444,445,5,392,0,0,445,446,
3,40,20,0,446,447,5,393,0,0,447,450,1,0,0,0,448,450,3,40,20,0,449,444,1,
0,0,0,449,448,1,0,0,0,450,43,1,0,0,0,451,454,3,48,24,0,452,454,5,2,0,0,453,
451,1,0,0,0,453,452,1,0,0,0,454,45,1,0,0,0,455,456,5,394,0,0,456,462,5,425,
0,0,457,458,5,213,0,0,458,459,5,388,0,0,459,460,5,425,0,0,460,462,5,389,
0,0,461,455,1,0,0,0,461,457,1,0,0,0,462,47,1,0,0,0,463,464,3,50,25,0,464,
49,1,0,0,0,465,470,3,52,26,0,466,467,7,3,0,0,467,469,3,52,26,0,468,466,1,
0,0,0,469,472,1,0,0,0,470,468,1,0,0,0,470,471,1,0,0,0,471,51,1,0,0,0,472,
470,1,0,0,0,473,475,5,378,0,0,474,473,1,0,0,0,474,475,1,0,0,0,475,476,1,
0,0,0,476,477,3,54,27,0,477,53,1,0,0,0,478,484,3,56,28,0,479,480,5,388,0,
0,480,481,3,50,25,0,481,482,5,389,0,0,482,484,1,0,0,0,483,478,1,0,0,0,483,
479,1,0,0,0,484,55,1,0,0,0,485,489,5,3,0,0,486,489,3,46,23,0,487,489,5,425,
0,0,488,485,1,0,0,0,488,486,1,0,0,0,488,487,1,0,0,0,489,57,1,0,0,0,490,496,
3,168,84,0,491,496,3,136,68,0,492,496,3,140,70,0,493,496,3,144,72,0,494,
496,3,156,78,0,495,490,1,0,0,0,495,491,1,0,0,0,495,492,1,0,0,0,495,493,1,
0,0,0,495,494,1,0,0,0,496,59,1,0,0,0,497,498,5,184,0,0,498,499,3,278,139,
0,499,500,3,62,31,0,500,61,1,0,0,0,501,504,3,64,32,0,502,504,3,58,29,0,503,
501,1,0,0,0,503,502,1,0,0,0,504,63,1,0,0,0,505,506,3,58,29,0,506,507,5,385,
0,0,507,509,1,0,0,0,508,505,1,0,0,0,508,509,1,0,0,0,509,521,1,0,0,0,510,
522,3,66,33,0,511,522,3,72,36,0,512,522,3,74,37,0,513,522,3,76,38,0,514,
522,3,78,39,0,515,522,3,80,40,0,516,522,3,82,41,0,517,522,3,84,42,0,518,
522,3,86,43,0,519,522,3,88,44,0,520,522,3,94,47,0,521,510,1,0,0,0,521,511,
1,0,0,0,521,512,1,0,0,0,521,513,1,0,0,0,521,514,1,0,0,0,521,515,1,0,0,0,
521,516,1,0,0,0,521,517,1,0,0,0,521,518,1,0,0,0,521,519,1,0,0,0,521,520,
1,0,0,0,522,65,1,0,0,0,523,524,3,68,34,0,524,525,5,385,0,0,525,526,3,70,
35,0,526,67,1,0,0,0,527,528,3,116,58,0,528,529,5,382,0,0,529,530,3,274,137,
0,530,536,1,0,0,0,531,532,3,274,137,0,532,533,5,382,0,0,533,534,3,116,58,
0,534,536,1,0,0,0,535,527,1,0,0,0,535,531,1,0,0,0,536,69,1,0,0,0,537,538,
3,118,59,0,538,539,5,382,0,0,539,540,3,274,137,0,540,546,1,0,0,0,541,542,
3,274,137,0,542,543,5,382,0,0,543,544,3,118,59,0,544,546,1,0,0,0,545,537,
1,0,0,0,545,541,1,0,0,0,546,71,1,0,0,0,547,550,3,116,58,0,548,550,3,118,
59,0,549,547,1,0,0,0,549,548,1,0,0,0,550,551,1,0,0,0,551,552,5,382,0,0,552,
553,3,276,138,0,553,73,1,0,0,0,554,557,3,120,60,0,555,557,3,122,61,0,556,
554,1,0,0,0,556,555,1,0,0,0,557,558,1,0,0,0,558,559,5,382,0,0,559,560,3,
276,138,0,560,75,1,0,0,0,561,562,3,276,138,0,562,565,5,382,0,0,563,566,3,
116,58,0,564,566,3,118,59,0,565,563,1,0,0,0,565,564,1,0,0,0,566,77,1,0,0,
0,567,568,3,276,138,0,568,571,5,382,0,0,569,572,3,120,60,0,570,572,3,122,
61,0,571,569,1,0,0,0,571,570,1,0,0,0,572,79,1,0,0,0,573,576,3,124,62,0,574,
576,3,126,63,0,575,573,1,0,0,0,575,574,1,0,0,0,576,577,1,0,0,0,577,578,5,
382,0,0,578,579,3,274,137,0,579,81,1,0,0,0,580,581,3,232,116,0,581,83,1,
0,0,0,582,583,3,274,137,0,583,586,5,382,0,0,584,587,3,124,62,0,585,587,3,
126,63,0,586,584,1,0,0,0,586,585,1,0,0,0,587,85,1,0,0,0,588,589,3,236,118,
0,589,87,1,0,0,0,590,591,3,242,121,0,591,592,5,382,0,0,592,593,3,276,138,
0,593,89,1,0,0,0,594,597,3,116,58,0,595,597,3,118,59,0,596,594,1,0,0,0,596,
595,1,0,0,0,597,598,1,0,0,0,598,599,5,382,0,0,599,600,3,274,137,0,600,91,
1,0,0,0,601,602,3,274,137,0,602,605,5,382,0,0,603,606,3,116,58,0,604,606,
3,118,59,0,605,603,1,0,0,0,605,604,1,0,0,0,606,93,1,0,0,0,607,620,5,246,
0,0,608,609,5,388,0,0,609,610,3,260,130,0,610,611,5,385,0,0,611,612,3,262,
131,0,612,613,5,389,0,0,613,621,1,0,0,0,614,615,5,388,0,0,615,616,3,264,
132,0,616,617,5,385,0,0,617,618,3,266,133,0,618,619,5,389,0,0,619,621,1,
0,0,0,620,608,1,0,0,0,620,614,1,0,0,0,621,95,1,0,0,0,622,623,5,388,0,0,623,
624,3,260,130,0,624,625,5,385,0,0,625,626,3,262,131,0,626,627,5,389,0,0,
627,97,1,0,0,0,628,629,5,388,0,0,629,630,3,264,132,0,630,631,5,385,0,0,631,
632,3,266,133,0,632,633,5,389,0,0,633,99,1,0,0,0,634,635,5,388,0,0,635,636,
3,266,133,0,636,637,5,385,0,0,637,638,3,264,132,0,638,639,5,389,0,0,639,
101,1,0,0,0,640,641,5,388,0,0,641,642,3,262,131,0,642,643,5,385,0,0,643,
644,3,260,130,0,644,645,5,389,0,0,645,103,1,0,0,0,646,647,5,388,0,0,647,
648,3,260,130,0,648,649,5,385,0,0,649,650,3,48,24,0,650,651,5,389,0,0,651,
105,1,0,0,0,652,653,5,388,0,0,653,654,3,264,132,0,654,655,5,385,0,0,655,
656,3,48,24,0,656,657,5,389,0,0,657,107,1,0,0,0,658,659,5,388,0,0,659,660,
3,48,24,0,660,661,5,385,0,0,661,662,3,260,130,0,662,663,5,389,0,0,663,109,
1,0,0,0,664,665,5,388,0,0,665,666,3,48,24,0,666,667,5,385,0,0,667,668,3,
264,132,0,668,669,5,389,0,0,669,111,1,0,0,0,670,671,1,0,0,0,671,113,1,0,
0,0,672,678,3,56,28,0,673,674,3,56,28,0,674,675,7,4,0,0,675,676,3,56,28,
0,676,678,1,0,0,0,677,672,1,0,0,0,677,673,1,0,0,0,678,115,1,0,0,0,679,680,
5,101,0,0,680,681,3,96,48,0,681,117,1,0,0,0,682,683,5,277,0,0,683,684,3,
98,49,0,684,119,1,0,0,0,685,686,5,101,0,0,686,687,3,102,51,0,687,121,1,0,
0,0,688,689,5,277,0,0,689,690,3,100,50,0,690,123,1,0,0,0,691,692,5,101,0,
0,692,693,3,104,52,0,693,125,1,0,0,0,694,695,5,277,0,0,695,696,3,106,53,
0,696,127,1,0,0,0,697,698,5,101,0,0,698,699,3,108,54,0,699,129,1,0,0,0,700,
701,5,277,0,0,701,702,3,110,55,0,702,131,1,0,0,0,703,704,5,101,0,0,704,705,
3,112,56,0,705,133,1,0,0,0,706,707,5,277,0,0,707,708,3,112,56,0,708,135,
1,0,0,0,709,710,3,254,127,0,710,711,5,382,0,0,711,712,3,138,69,0,712,721,
1,0,0,0,713,714,5,92,0,0,714,715,5,388,0,0,715,716,3,254,127,0,716,717,5,
385,0,0,717,718,3,254,127,0,718,719,5,389,0,0,719,721,1,0,0,0,720,709,1,
0,0,0,720,713,1,0,0,0,721,137,1,0,0,0,722,723,3,254,127,0,723,724,3,166,
83,0,724,725,3,254,127,0,725,822,1,0,0,0,726,727,3,254,127,0,727,728,5,377,
0,0,728,729,3,254,127,0,729,730,5,377,0,0,730,731,5,87,0,0,731,822,1,0,0,
0,732,733,3,254,127,0,733,734,5,377,0,0,734,735,3,254,127,0,735,736,5,377,
0,0,736,737,5,87,0,0,737,738,5,378,0,0,738,739,5,3,0,0,739,822,1,0,0,0,740,
741,5,388,0,0,741,742,3,254,127,0,742,743,5,377,0,0,743,744,3,254,127,0,
744,745,5,389,0,0,745,746,5,380,0,0,746,747,5,3,0,0,747,822,1,0,0,0,748,
749,3,254,127,0,749,750,5,377,0,0,750,751,5,87,0,0,751,822,1,0,0,0,752,753,
3,254,127,0,753,754,5,377,0,0,754,755,5,87,0,0,755,756,5,378,0,0,756,757,
5,3,0,0,757,822,1,0,0,0,758,759,3,254,127,0,759,760,5,377,0,0,760,761,5,
3,0,0,761,822,1,0,0,0,762,763,3,254,127,0,763,764,5,378,0,0,764,765,5,3,
0,0,765,822,1,0,0,0,766,767,5,378,0,0,767,822,3,254,127,0,768,769,5,48,0,
0,769,822,3,254,127,0,770,771,5,273,0,0,771,822,3,254,127,0,772,773,3,254,
127,0,773,774,5,53,0,0,774,775,3,254,127,0,775,822,1,0,0,0,776,777,3,254,
127,0,777,778,5,267,0,0,778,779,3,254,127,0,779,822,1,0,0,0,780,781,3,254,
127,0,781,782,5,376,0,0,782,783,3,254,127,0,783,822,1,0,0,0,784,785,5,263,
0,0,785,822,3,254,127,0,786,787,5,242,0,0,787,788,5,388,0,0,788,789,3,254,
127,0,789,790,5,385,0,0,790,791,3,254,127,0,791,792,5,389,0,0,792,822,1,
0,0,0,793,794,5,240,0,0,794,795,5,388,0,0,795,796,3,254,127,0,796,797,5,
385,0,0,797,798,3,254,127,0,798,799,5,389,0,0,799,822,1,0,0,0,800,801,5,
91,0,0,801,802,3,254,127,0,802,803,5,82,0,0,803,804,3,254,127,0,804,822,
1,0,0,0,805,806,5,239,0,0,806,822,3,256,128,0,807,808,5,218,0,0,808,822,
3,256,128,0,809,810,5,146,0,0,810,813,3,256,128,0,811,812,5,82,0,0,812,814,
3,254,127,0,813,811,1,0,0,0,813,814,1,0,0,0,814,822,1,0,0,0,815,816,5,355,
0,0,816,819,3,256,128,0,817,818,5,82,0,0,818,820,3,254,127,0,819,817,1,0,
0,0,819,820,1,0,0,0,820,822,1,0,0,0,821,722,1,0,0,0,821,726,1,0,0,0,821,
732,1,0,0,0,821,740,1,0,0,0,821,748,1,0,0,0,821,752,1,0,0,0,821,758,1,0,
0,0,821,762,1,0,0,0,821,766,1,0,0,0,821,768,1,0,0,0,821,770,1,0,0,0,821,
772,1,0,0,0,821,776,1,0,0,0,821,780,1,0,0,0,821,784,1,0,0,0,821,786,1,0,
0,0,821,793,1,0,0,0,821,800,1,0,0,0,821,805,1,0,0,0,821,807,1,0,0,0,821,
809,1,0,0,0,821,815,1,0,0,0,822,139,1,0,0,0,823,824,3,256,128,0,824,825,
5,382,0,0,825,826,3,142,71,0,826,835,1,0,0,0,827,828,5,92,0,0,828,829,5,
388,0,0,829,830,3,256,128,0,830,831,5,385,0,0,831,832,3,256,128,0,832,833,
5,389,0,0,833,835,1,0,0,0,834,823,1,0,0,0,834,827,1,0,0,0,835,141,1,0,0,
0,836,837,3,256,128,0,837,838,5,377,0,0,838,839,3,256,128,0,839,917,1,0,
0,0,840,841,3,256,128,0,841,842,5,378,0,0,842,843,3,256,128,0,843,917,1,
0,0,0,844,845,5,48,0,0,845,846,5,388,0,0,846,847,3,256,128,0,847,848,5,377,
0,0,848,849,3,256,128,0,849,850,5,389,0,0,850,917,1,0,0,0,851,852,5,48,0,
0,852,853,5,388,0,0,853,854,3,256,128,0,854,855,5,378,0,0,855,856,3,256,
128,0,856,857,5,389,0,0,857,917,1,0,0,0,858,859,5,388,0,0,859,860,3,256,
128,0,860,861,5,377,0,0,861,862,3,256,128,0,862,863,5,389,0,0,863,864,5,
380,0,0,864,865,5,3,0,0,865,917,1,0,0,0,866,867,5,378,0,0,867,917,3,256,
128,0,868,869,5,48,0,0,869,917,3,256,128,0,870,871,5,273,0,0,871,917,3,256,
128,0,872,873,5,316,0,0,873,917,3,256,128,0,874,875,5,323,0,0,875,876,3,
256,128,0,876,877,5,82,0,0,877,878,3,254,127,0,878,917,1,0,0,0,879,880,5,
151,0,0,880,883,3,254,127,0,881,882,5,82,0,0,882,884,3,254,127,0,883,881,
1,0,0,0,883,884,1,0,0,0,884,917,1,0,0,0,885,886,5,314,0,0,886,917,3,256,
128,0,887,888,5,319,0,0,888,917,3,256,128,0,889,890,3,256,128,0,890,891,
5,93,0,0,891,892,3,256,128,0,892,917,1,0,0,0,893,894,5,242,0,0,894,895,5,
388,0,0,895,896,3,256,128,0,896,897,5,385,0,0,897,898,3,256,128,0,898,899,
5,389,0,0,899,917,1,0,0,0,900,901,5,240,0,0,901,902,5,388,0,0,902,903,3,
256,128,0,903,904,5,385,0,0,904,905,3,256,128,0,905,906,5,389,0,0,906,917,
1,0,0,0,907,908,5,91,0,0,908,909,3,256,128,0,909,910,5,82,0,0,910,911,3,
256,128,0,911,917,1,0,0,0,912,913,3,256,128,0,913,914,5,379,0,0,914,915,
3,256,128,0,915,917,1,0,0,0,916,836,1,0,0,0,916,840,1,0,0,0,916,844,1,0,
0,0,916,851,1,0,0,0,916,858,1,0,0,0,916,866,1,0,0,0,916,868,1,0,0,0,916,
870,1,0,0,0,916,872,1,0,0,0,916,874,1,0,0,0,916,879,1,0,0,0,916,885,1,0,
0,0,916,887,1,0,0,0,916,889,1,0,0,0,916,893,1,0,0,0,916,900,1,0,0,0,916,
907,1,0,0,0,916,912,1,0,0,0,917,143,1,0,0,0,918,919,3,254,127,0,919,920,
5,382,0,0,920,921,3,148,74,0,921,946,1,0,0,0,922,923,5,254,0,0,923,924,5,
382,0,0,924,946,3,150,75,0,925,926,5,253,0,0,926,927,5,382,0,0,927,946,3,
152,76,0,928,929,3,154,77,0,929,930,5,382,0,0,930,931,5,3,0,0,931,946,1,
0,0,0,932,935,3,308,154,0,933,935,3,310,155,0,934,932,1,0,0,0,934,933,1,
0,0,0,935,936,1,0,0,0,936,937,5,382,0,0,937,938,3,254,127,0,938,946,1,0,
0,0,939,940,3,254,127,0,940,943,5,382,0,0,941,944,3,308,154,0,942,944,3,
310,155,0,943,941,1,0,0,0,943,942,1,0,0,0,944,946,1,0,0,0,945,918,1,0,0,
0,945,922,1,0,0,0,945,925,1,0,0,0,945,928,1,0,0,0,945,934,1,0,0,0,945,939,
1,0,0,0,946,145,1,0,0,0,947,948,3,254,127,0,948,949,5,379,0,0,949,951,3,
254,127,0,950,952,3,286,143,0,951,950,1,0,0,0,951,952,1,0,0,0,952,147,1,
0,0,0,953,970,3,146,73,0,954,955,3,154,77,0,955,956,3,166,83,0,956,957,3,
146,73,0,957,970,1,0,0,0,958,959,5,322,0,0,959,961,3,154,77,0,960,962,3,
282,141,0,961,960,1,0,0,0,961,962,1,0,0,0,962,970,1,0,0,0,963,964,5,316,
0,0,964,966,3,154,77,0,965,967,3,282,141,0,966,965,1,0,0,0,966,967,1,0,0,
0,967,970,1,0,0,0,968,970,3,154,77,0,969,953,1,0,0,0,969,954,1,0,0,0,969,
958,1,0,0,0,969,963,1,0,0,0,969,968,1,0,0,0,970,149,1,0,0,0,971,987,3,146,
73,0,972,973,5,254,0,0,973,974,3,166,83,0,974,975,3,146,73,0,975,987,1,0,
0,0,976,977,5,322,0,0,977,979,5,254,0,0,978,980,3,282,141,0,979,978,1,0,
0,0,979,980,1,0,0,0,980,987,1,0,0,0,981,982,5,316,0,0,982,984,5,254,0,0,
983,985,3,282,141,0,984,983,1,0,0,0,984,985,1,0,0,0,985,987,1,0,0,0,986,
971,1,0,0,0,986,972,1,0,0,0,986,976,1,0,0,0,986,981,1,0,0,0,987,151,1,0,
0,0,988,1004,3,146,73,0,989,990,5,253,0,0,990,991,3,166,83,0,991,992,3,146,
73,0,992,1004,1,0,0,0,993,994,5,322,0,0,994,996,5,253,0,0,995,997,3,282,
141,0,996,995,1,0,0,0,996,997,1,0,0,0,997,1004,1,0,0,0,998,999,5,316,0,0,
999,1001,5,253,0,0,1000,1002,3,282,141,0,1001,1000,1,0,0,0,1001,1002,1,0,
0,0,1002,1004,1,0,0,0,1003,988,1,0,0,0,1003,989,1,0,0,0,1003,993,1,0,0,0,
1003,998,1,0,0,0,1004,153,1,0,0,0,1005,1006,7,5,0,0,1006,155,1,0,0,0,1007,
1008,3,254,127,0,1008,1009,5,382,0,0,1009,1010,3,158,79,0,1010,1022,1,0,
0,0,1011,1012,5,81,0,0,1012,1013,3,254,127,0,1013,1014,5,82,0,0,1014,1015,
3,160,80,0,1015,1022,1,0,0,0,1016,1017,3,256,128,0,1017,1018,5,382,0,0,1018,
1019,5,160,0,0,1019,1020,3,254,127,0,1020,1022,1,0,0,0,1021,1007,1,0,0,0,
1021,1011,1,0,0,0,1021,1016,1,0,0,0,1022,157,1,0,0,0,1023,1024,5,221,0,0,
1024,1025,3,254,127,0,1025,1026,5,82,0,0,1026,1027,3,160,80,0,1027,1106,
1,0,0,0,1028,1029,3,254,127,0,1029,1030,5,267,0,0,1030,1031,5,221,0,0,1031,
1032,3,254,127,0,1032,1033,5,82,0,0,1033,1034,3,160,80,0,1034,1106,1,0,0,
0,1035,1036,5,54,0,0,1036,1037,3,254,127,0,1037,1038,5,82,0,0,1038,1039,
3,160,80,0,1039,1106,1,0,0,0,1040,1041,3,254,127,0,1041,1042,5,267,0,0,1042,
1043,5,54,0,0,1043,1044,3,254,127,0,1044,1045,5,82,0,0,1045,1046,3,160,80,
0,1046,1106,1,0,0,0,1047,1048,5,317,0,0,1048,1049,3,254,127,0,1049,1050,
5,82,0,0,1050,1051,3,160,80,0,1051,1106,1,0,0,0,1052,1053,5,74,0,0,1053,
1054,3,254,127,0,1054,1055,5,82,0,0,1055,1056,3,160,80,0,1056,1106,1,0,0,
0,1057,1058,5,79,0,0,1058,1059,3,254,127,0,1059,1060,5,82,0,0,1060,1061,
3,160,80,0,1061,1106,1,0,0,0,1062,1063,5,80,0,0,1063,1064,3,254,127,0,1064,
1065,5,82,0,0,1065,1066,3,160,80,0,1066,1106,1,0,0,0,1067,1068,5,143,0,0,
1068,1069,3,254,127,0,1069,1070,5,82,0,0,1070,1074,3,162,81,0,1071,1072,
5,388,0,0,1072,1073,5,325,0,0,1073,1075,5,389,0,0,1074,1071,1,0,0,0,1074,
1075,1,0,0,0,1075,1106,1,0,0,0,1076,1077,5,144,0,0,1077,1078,3,254,127,0,
1078,1079,5,82,0,0,1079,1083,3,162,81,0,1080,1081,5,388,0,0,1081,1082,5,
325,0,0,1082,1084,5,389,0,0,1083,1080,1,0,0,0,1083,1084,1,0,0,0,1084,1106,
1,0,0,0,1085,1086,3,254,127,0,1086,1087,5,267,0,0,1087,1088,5,143,0,0,1088,
1089,3,254,127,0,1089,1090,5,82,0,0,1090,1091,3,162,81,0,1091,1106,1,0,0,
0,1092,1093,5,124,0,0,1093,1097,3,254,127,0,1094,1095,5,388,0,0,1095,1096,
5,123,0,0,1096,1098,5,389,0,0,1097,1094,1,0,0,0,1097,1098,1,0,0,0,1098,1106,
1,0,0,0,1099,1100,5,212,0,0,1100,1106,3,254,127,0,1101,1102,5,211,0,0,1102,
1106,3,254,127,0,1103,1104,5,155,0,0,1104,1106,3,256,128,0,1105,1023,1,0,
0,0,1105,1028,1,0,0,0,1105,1035,1,0,0,0,1105,1040,1,0,0,0,1105,1047,1,0,
0,0,1105,1052,1,0,0,0,1105,1057,1,0,0,0,1105,1062,1,0,0,0,1105,1067,1,0,
0,0,1105,1076,1,0,0,0,1105,1085,1,0,0,0,1105,1092,1,0,0,0,1105,1099,1,0,
0,0,1105,1101,1,0,0,0,1105,1103,1,0,0,0,1106,159,1,0,0,0,1107,1112,3,254,
127,0,1108,1112,3,56,28,0,1109,1110,5,378,0,0,1110,1112,3,56,28,0,1111,1107,
1,0,0,0,1111,1108,1,0,0,0,1111,1109,1,0,0,0,1112,161,1,0,0,0,1113,1116,3,
254,127,0,1114,1116,3,164,82,0,1115,1113,1,0,0,0,1115,1114,1,0,0,0,1116,
163,1,0,0,0,1117,1118,5,3,0,0,1118,1119,5,386,0,0,1119,1120,5,3,0,0,1120,
165,1,0,0,0,1121,1122,7,4,0,0,1122,167,1,0,0,0,1123,1126,3,170,85,0,1124,
1126,3,172,86,0,1125,1123,1,0,0,0,1125,1124,1,0,0,0,1126,169,1,0,0,0,1127,
1128,3,254,127,0,1128,1129,5,382,0,0,1129,1130,3,254,127,0,1130,1131,5,377,
0,0,1131,1132,3,254,127,0,1132,1133,5,385,0,0,1133,1134,3,254,127,0,1134,
1135,5,382,0,0,1135,1136,3,254,127,0,1136,1137,5,378,0,0,1137,1138,3,254,
127,0,1138,171,1,0,0,0,1139,1142,3,144,72,0,1140,1141,5,385,0,0,1141,1143,
3,136,68,0,1142,1140,1,0,0,0,1143,1144,1,0,0,0,1144,1142,1,0,0,0,1144,1145,
1,0,0,0,1145,1154,1,0,0,0,1146,1149,3,140,70,0,1147,1148,5,385,0,0,1148,
1150,3,140,70,0,1149,1147,1,0,0,0,1150,1151,1,0,0,0,1151,1149,1,0,0,0,1151,
1152,1,0,0,0,1152,1154,1,0,0,0,1153,1139,1,0,0,0,1153,1146,1,0,0,0,1154,
173,1,0,0,0,1155,1167,3,176,88,0,1156,1167,3,180,90,0,1157,1167,3,184,92,
0,1158,1167,3,194,97,0,1159,1167,3,196,98,0,1160,1167,3,198,99,0,1161,1167,
3,200,100,0,1162,1167,3,202,101,0,1163,1167,3,204,102,0,1164,1167,3,188,
94,0,1165,1167,3,192,96,0,1166,1155,1,0,0,0,1166,1156,1,0,0,0,1166,1157,
1,0,0,0,1166,1158,1,0,0,0,1166,1159,1,0,0,0,1166,1160,1,0,0,0,1166,1161,
1,0,0,0,1166,1162,1,0,0,0,1166,1163,1,0,0,0,1166,1164,1,0,0,0,1166,1165,
1,0,0,0,1167,175,1,0,0,0,1168,1169,5,184,0,0,1169,1170,3,278,139,0,1170,
1171,3,178,89,0,1171,177,1,0,0,0,1172,1175,3,194,97,0,1173,1175,3,196,98,
0,1174,1172,1,0,0,0,1174,1173,1,0,0,0,1175,179,1,0,0,0,1176,1177,5,184,0,
0,1177,1178,3,278,139,0,1178,1179,3,182,91,0,1179,1180,5,385,0,0,1180,1181,
5,116,0,0,1181,1182,3,58,29,0,1182,181,1,0,0,0,1183,1188,3,198,99,0,1184,
1188,3,200,100,0,1185,1188,3,202,101,0,1186,1188,3,204,102,0,1187,1183,1,
0,0,0,1187,1184,1,0,0,0,1187,1185,1,0,0,0,1187,1186,1,0,0,0,1188,183,1,0,
0,0,1189,1190,5,184,0,0,1190,1191,3,278,139,0,1191,1192,5,189,0,0,1192,1193,
3,186,93,0,1193,1194,5,385,0,0,1194,1198,5,116,0,0,1195,1196,3,58,29,0,1196,
1197,5,385,0,0,1197,1199,1,0,0,0,1198,1195,1,0,0,0,1198,1199,1,0,0,0,1199,
1200,1,0,0,0,1200,1201,3,68,34,0,1201,185,1,0,0,0,1202,1205,3,100,50,0,1203,
1205,3,210,105,0,1204,1202,1,0,0,0,1204,1203,1,0,0,0,1205,187,1,0,0,0,1206,
1207,5,209,0,0,1207,1208,5,382,0,0,1208,1209,3,190,95,0,1209,1210,5,385,
0,0,1210,1211,5,111,0,0,1211,1212,3,206,103,0,1212,1213,5,362,0,0,1213,1214,
5,208,0,0,1214,189,1,0,0,0,1215,1218,3,48,24,0,1216,1218,3,276,138,0,1217,
1215,1,0,0,0,1217,1216,1,0,0,0,1218,191,1,0,0,0,1219,1220,5,111,0,0,1220,
1221,3,206,103,0,1221,1222,5,362,0,0,1222,1223,3,278,139,0,1223,193,1,0,
0,0,1224,1225,5,189,0,0,1225,1227,3,212,106,0,1226,1228,3,214,107,0,1227,
1226,1,0,0,0,1227,1228,1,0,0,0,1228,195,1,0,0,0,1229,1230,5,85,0,0,1230,
1232,3,212,106,0,1231,1233,3,220,110,0,1232,1231,1,0,0,0,1232,1233,1,0,0,
0,1233,197,1,0,0,0,1234,1235,5,189,0,0,1235,1237,3,186,93,0,1236,1238,3,
214,107,0,1237,1236,1,0,0,0,1237,1238,1,0,0,0,1238,1241,1,0,0,0,1239,1240,
5,385,0,0,1240,1242,3,58,29,0,1241,1239,1,0,0,0,1241,1242,1,0,0,0,1242,199,
1,0,0,0,1243,1244,5,85,0,0,1244,1246,3,186,93,0,1245,1247,3,220,110,0,1246,
1245,1,0,0,0,1246,1247,1,0,0,0,1247,1250,1,0,0,0,1248,1249,5,385,0,0,1249,
1251,3,58,29,0,1250,1248,1,0,0,0,1250,1251,1,0,0,0,1251,201,1,0,0,0,1252,
1254,5,321,0,0,1253,1255,3,222,111,0,1254,1253,1,0,0,0,1254,1255,1,0,0,0,
1255,1258,1,0,0,0,1256,1257,5,385,0,0,1257,1259,3,58,29,0,1258,1256,1,0,
0,0,1258,1259,1,0,0,0,1259,203,1,0,0,0,1260,1262,5,320,0,0,1261,1263,3,220,
110,0,1262,1261,1,0,0,0,1262,1263,1,0,0,0,1263,1266,1,0,0,0,1264,1265,5,
385,0,0,1265,1267,3,58,29,0,1266,1264,1,0,0,0,1266,1267,1,0,0,0,1267,205,
1,0,0,0,1268,1271,3,212,106,0,1269,1271,3,210,105,0,1270,1268,1,0,0,0,1270,
1269,1,0,0,0,1271,207,1,0,0,0,1272,1275,3,100,50,0,1273,1275,3,210,105,0,
1274,1272,1,0,0,0,1274,1273,1,0,0,0,1275,209,1,0,0,0,1276,1277,5,388,0,0,
1277,1278,5,274,0,0,1278,1279,5,385,0,0,1279,1280,3,48,24,0,1280,1281,5,
389,0,0,1281,211,1,0,0,0,1282,1283,3,48,24,0,1283,213,1,0,0,0,1284,1285,
3,216,108,0,1285,215,1,0,0,0,1286,1290,5,388,0,0,1287,1291,3,218,109,0,1288,
1291,5,206,0,0,1289,1291,5,87,0,0,1290,1287,1,0,0,0,1290,1288,1,0,0,0,1290,
1289,1,0,0,0,1291,1292,1,0,0,0,1292,1293,5,389,0,0,1293,217,1,0,0,0,1294,
1297,5,97,0,0,1295,1296,5,385,0,0,1296,1298,7,6,0,0,1297,1295,1,0,0,0,1297,
1298,1,0,0,0,1298,219,1,0,0,0,1299,1300,5,388,0,0,1300,1301,5,97,0,0,1301,
1302,5,389,0,0,1302,221,1,0,0,0,1303,1304,3,224,112,0,1304,223,1,0,0,0,1305,
1308,5,388,0,0,1306,1309,3,226,113,0,1307,1309,5,220,0,0,1308,1306,1,0,0,
0,1308,1307,1,0,0,0,1309,1310,1,0,0,0,1310,1311,5,389,0,0,1311,225,1,0,0,
0,1312,1315,5,97,0,0,1313,1314,5,385,0,0,1314,1316,5,220,0,0,1315,1313,1,
0,0,0,1315,1316,1,0,0,0,1316,227,1,0,0,0,1317,1322,3,230,115,0,1318,1322,
3,234,117,0,1319,1322,3,238,119,0,1320,1322,3,240,120,0,1321,1317,1,0,0,
0,1321,1318,1,0,0,0,1321,1319,1,0,0,0,1321,1320,1,0,0,0,1322,229,1,0,0,0,
1323,1326,3,132,66,0,1324,1326,3,134,67,0,1325,1323,1,0,0,0,1325,1324,1,
0,0,0,1326,1327,1,0,0,0,1327,1328,5,382,0,0,1328,1329,3,276,138,0,1329,231,
1,0,0,0,1330,1333,3,128,64,0,1331,1333,3,130,65,0,1332,1330,1,0,0,0,1332,
1331,1,0,0,0,1333,1334,1,0,0,0,1334,1335,5,382,0,0,1335,1336,3,276,138,0,
1336,233,1,0,0,0,1337,1338,3,276,138,0,1338,1341,5,382,0,0,1339,1342,3,132,
66,0,1340,1342,3,134,67,0,1341,1339,1,0,0,0,1341,1340,1,0,0,0,1342,235,1,
0,0,0,1343,1344,3,276,138,0,1344,1347,5,382,0,0,1345,1348,3,128,64,0,1346,
1348,3,130,65,0,1347,1345,1,0,0,0,1347,1346,1,0,0,0,1348,237,1,0,0,0,1349,
1352,3,116,58,0,1350,1352,3,118,59,0,1351,1349,1,0,0,0,1351,1350,1,0,0,0,
1352,1353,1,0,0,0,1353,1354,5,382,0,0,1354,1355,3,48,24,0,1355,239,1,0,0,
0,1356,1357,3,242,121,0,1357,1358,5,382,0,0,1358,1359,3,48,24,0,1359,241,
1,0,0,0,1360,1376,3,274,137,0,1361,1376,5,274,0,0,1362,1376,5,275,0,0,1363,
1376,5,276,0,0,1364,1376,5,142,0,0,1365,1376,5,96,0,0,1366,1376,5,207,0,
0,1367,1376,5,95,0,0,1368,1376,3,272,136,0,1369,1376,5,294,0,0,1370,1376,
5,295,0,0,1371,1376,5,293,0,0,1372,1376,5,353,0,0,1373,1376,5,350,0,0,1374,
1376,3,258,129,0,1375,1360,1,0,0,0,1375,1361,1,0,0,0,1375,1362,1,0,0,0,1375,
1363,1,0,0,0,1375,1364,1,0,0,0,1375,1365,1,0,0,0,1375,1366,1,0,0,0,1375,
1367,1,0,0,0,1375,1368,1,0,0,0,1375,1369,1,0,0,0,1375,1370,1,0,0,0,1375,
1371,1,0,0,0,1375,1372,1,0,0,0,1375,1373,1,0,0,0,1375,1374,1,0,0,0,1376,
243,1,0,0,0,1377,1378,5,76,0,0,1378,1379,7,7,0,0,1379,1380,3,258,129,0,1380,
1381,3,48,24,0,1381,1421,1,0,0,0,1382,1385,5,77,0,0,1383,1386,3,104,52,0,
1384,1386,3,106,53,0,1385,1383,1,0,0,0,1385,1384,1,0,0,0,1386,1421,1,0,0,
0,1387,1388,5,246,0,0,1388,1389,5,388,0,0,1389,1390,3,260,130,0,1390,1391,
5,385,0,0,1391,1392,3,48,24,0,1392,1393,5,389,0,0,1393,1421,1,0,0,0,1394,
1395,5,246,0,0,1395,1396,5,388,0,0,1396,1397,3,264,132,0,1397,1398,5,385,
0,0,1398,1399,3,48,24,0,1399,1400,5,389,0,0,1400,1421,1,0,0,0,1401,1406,
3,246,123,0,1402,1403,5,385,0,0,1403,1405,3,246,123,0,1404,1402,1,0,0,0,
1405,1408,1,0,0,0,1406,1404,1,0,0,0,1406,1407,1,0,0,0,1407,1421,1,0,0,0,
1408,1406,1,0,0,0,1409,1410,5,152,0,0,1410,1421,5,84,0,0,1411,1421,5,261,
0,0,1412,1421,5,180,0,0,1413,1421,5,181,0,0,1414,1415,5,88,0,0,1415,1417,
3,206,103,0,1416,1418,3,220,110,0,1417,1416,1,0,0,0,1417,1418,1,0,0,0,1418,
1421,1,0,0,0,1419,1421,5,315,0,0,1420,1377,1,0,0,0,1420,1382,1,0,0,0,1420,
1387,1,0,0,0,1420,1394,1,0,0,0,1420,1401,1,0,0,0,1420,1409,1,0,0,0,1420,
1411,1,0,0,0,1420,1412,1,0,0,0,1420,1413,1,0,0,0,1420,1414,1,0,0,0,1420,
1419,1,0,0,0,1421,245,1,0,0,0,1422,1423,7,8,0,0,1423,1424,7,9,0,0,1424,247,
1,0,0,0,1425,1426,5,8,0,0,1426,1492,5,3,0,0,1427,1492,5,9,0,0,1428,1429,
5,13,0,0,1429,1434,5,425,0,0,1430,1431,5,385,0,0,1431,1433,5,425,0,0,1432,
1430,1,0,0,0,1433,1436,1,0,0,0,1434,1432,1,0,0,0,1434,1435,1,0,0,0,1435,
1492,1,0,0,0,1436,1434,1,0,0,0,1437,1438,5,14,0,0,1438,1492,5,1,0,0,1439,
1440,5,15,0,0,1440,1492,9,0,0,0,1441,1492,5,16,0,0,1442,1443,5,17,0,0,1443,
1448,5,425,0,0,1444,1445,5,385,0,0,1445,1447,5,425,0,0,1446,1444,1,0,0,0,
1447,1450,1,0,0,0,1448,1446,1,0,0,0,1448,1449,1,0,0,0,1449,1492,1,0,0,0,
1450,1448,1,0,0,0,1451,1452,5,19,0,0,1452,1457,5,1,0,0,1453,1454,5,385,0,
0,1454,1456,5,1,0,0,1455,1453,1,0,0,0,1456,1459,1,0,0,0,1457,1455,1,0,0,
0,1457,1458,1,0,0,0,1458,1492,1,0,0,0,1459,1457,1,0,0,0,1460,1461,5,21,0,
0,1461,1492,3,48,24,0,1462,1492,5,22,0,0,1463,1492,5,23,0,0,1464,1492,5,
24,0,0,1465,1466,5,25,0,0,1466,1492,3,48,24,0,1467,1468,5,26,0,0,1468,1492,
3,48,24,0,1469,1492,5,27,0,0,1470,1492,5,28,0,0,1471,1492,5,29,0,0,1472,
1492,5,30,0,0,1473,1492,5,31,0,0,1474,1492,5,32,0,0,1475,1476,5,33,0,0,1476,
1492,3,48,24,0,1477,1478,5,34,0,0,1478,1492,3,48,24,0,1479,1481,5,35,0,0,
1480,1482,5,382,0,0,1481,1480,1,0,0,0,1481,1482,1,0,0,0,1482,1483,1,0,0,
0,1483,1492,5,3,0,0,1484,1492,5,36,0,0,1485,1492,5,37,0,0,1486,1492,5,38,
0,0,1487,1492,5,39,0,0,1488,1492,5,40,0,0,1489,1490,5,47,0,0,1490,1492,5,
425,0,0,1491,1425,1,0,0,0,1491,1427,1,0,0,0,1491,1428,1,0,0,0,1491,1437,
1,0,0,0,1491,1439,1,0,0,0,1491,1441,1,0,0,0,1491,1442,1,0,0,0,1491,1451,
1,0,0,0,1491,1460,1,0,0,0,1491,1462,1,0,0,0,1491,1463,1,0,0,0,1491,1464,
1,0,0,0,1491,1465,1,0,0,0,1491,1467,1,0,0,0,1491,1469,1,0,0,0,1491,1470,
1,0,0,0,1491,1471,1,0,0,0,1491,1472,1,0,0,0,1491,1473,1,0,0,0,1491,1474,
1,0,0,0,1491,1475,1,0,0,0,1491,1477,1,0,0,0,1491,1479,1,0,0,0,1491,1484,
1,0,0,0,1491,1485,1,0,0,0,1491,1486,1,0,0,0,1491,1487,1,0,0,0,1491,1488,
1,0,0,0,1491,1489,1,0,0,0,1492,249,1,0,0,0,1493,1494,7,10,0,0,1494,251,1,
0,0,0,1495,1496,7,11,0,0,1496,253,1,0,0,0,1497,1498,7,12,0,0,1498,255,1,
0,0,0,1499,1500,7,13,0,0,1500,257,1,0,0,0,1501,1502,7,14,0,0,1502,259,1,
0,0,0,1503,1504,7,15,0,0,1504,261,1,0,0,0,1505,1506,7,16,0,0,1506,263,1,
0,0,0,1507,1508,7,17,0,0,1508,265,1,0,0,0,1509,1510,7,18,0,0,1510,267,1,
0,0,0,1511,1514,3,260,130,0,1512,1514,3,264,132,0,1513,1511,1,0,0,0,1513,
1512,1,0,0,0,1514,269,1,0,0,0,1515,1518,3,262,131,0,1516,1518,3,266,133,
0,1517,1515,1,0,0,0,1517,1516,1,0,0,0,1518,271,1,0,0,0,1519,1524,3,268,134,
0,1520,1524,3,270,135,0,1521,1524,3,250,125,0,1522,1524,3,252,126,0,1523,
1519,1,0,0,0,1523,1520,1,0,0,0,1523,1521,1,0,0,0,1523,1522,1,0,0,0,1524,
273,1,0,0,0,1525,1528,3,254,127,0,1526,1528,3,256,128,0,1527,1525,1,0,0,
0,1527,1526,1,0,0,0,1528,275,1,0,0,0,1529,1546,3,274,137,0,1530,1546,5,274,
0,0,1531,1546,5,275,0,0,1532,1546,5,276,0,0,1533,1546,5,142,0,0,1534,1546,
5,96,0,0,1535,1546,5,207,0,0,1536,1546,5,95,0,0,1537,1546,5,209,0,0,1538,
1546,3,272,136,0,1539,1546,5,294,0,0,1540,1546,5,295,0,0,1541,1546,5,293,
0,0,1542,1546,5,353,0,0,1543,1546,5,350,0,0,1544,1546,3,258,129,0,1545,1529,
1,0,0,0,1545,1530,1,0,0,0,1545,1531,1,0,0,0,1545,1532,1,0,0,0,1545,1533,
1,0,0,0,1545,1534,1,0,0,0,1545,1535,1,0,0,0,1545,1536,1,0,0,0,1545,1537,
1,0,0,0,1545,1538,1,0,0,0,1545,1539,1,0,0,0,1545,1540,1,0,0,0,1545,1541,
1,0,0,0,1545,1542,1,0,0,0,1545,1543,1,0,0,0,1545,1544,1,0,0,0,1546,277,1,
0,0,0,1547,1548,3,280,140,0,1548,279,1,0,0,0,1549,1596,5,122,0,0,1550,1596,
5,222,0,0,1551,1596,5,210,0,0,1552,1596,5,49,0,0,1553,1596,5,56,0,0,1554,
1596,5,256,0,0,1555,1596,5,255,0,0,1556,1596,5,346,0,0,1557,1596,5,348,0,
0,1558,1596,5,147,0,0,1559,1596,5,148,0,0,1560,1596,5,149,0,0,1561,1596,
5,150,0,0,1562,1596,5,351,0,0,1563,1596,5,78,0,0,1564,1596,5,208,0,0,1565,
1566,5,263,0,0,1566,1596,5,208,0,0,1567,1596,5,258,0,0,1568,1596,5,162,0,
0,1569,1596,5,163,0,0,1570,1571,5,263,0,0,1571,1596,5,49,0,0,1572,1573,5,
263,0,0,1573,1596,5,56,0,0,1574,1575,5,263,0,0,1575,1596,5,256,0,0,1576,
1577,5,263,0,0,1577,1596,5,255,0,0,1578,1579,5,263,0,0,1579,1596,5,346,0,
0,1580,1581,5,263,0,0,1581,1596,5,348,0,0,1582,1583,5,263,0,0,1583,1596,
5,147,0,0,1584,1585,5,263,0,0,1585,1596,5,148,0,0,1586,1587,5,263,0,0,1587,
1596,5,149,0,0,1588,1589,5,263,0,0,1589,1596,5,150,0,0,1590,1591,5,263,0,
0,1591,1596,5,351,0,0,1592,1596,5,257,0,0,1593,1596,5,154,0,0,1594,1596,
5,354,0,0,1595,1549,1,0,0,0,1595,1550,1,0,0,0,1595,1551,1,0,0,0,1595,1552,
1,0,0,0,1595,1553,1,0,0,0,1595,1554,1,0,0,0,1595,1555,1,0,0,0,1595,1556,
1,0,0,0,1595,1557,1,0,0,0,1595,1558,1,0,0,0,1595,1559,1,0,0,0,1595,1560,
1,0,0,0,1595,1561,1,0,0,0,1595,1562,1,0,0,0,1595,1563,1,0,0,0,1595,1564,
1,0,0,0,1595,1565,1,0,0,0,1595,1567,1,0,0,0,1595,1568,1,0,0,0,1595,1569,
1,0,0,0,1595,1570,1,0,0,0,1595,1572,1,0,0,0,1595,1574,1,0,0,0,1595,1576,
1,0,0,0,1595,1578,1,0,0,0,1595,1580,1,0,0,0,1595,1582,1,0,0,0,1595,1584,
1,0,0,0,1595,1586,1,0,0,0,1595,1588,1,0,0,0,1595,1590,1,0,0,0,1595,1592,
1,0,0,0,1595,1593,1,0,0,0,1595,1594,1,0,0,0,1596,281,1,0,0,0,1597,1598,3,
284,142,0,1598,283,1,0,0,0,1599,1600,5,388,0,0,1600,1601,7,19,0,0,1601,1602,
5,389,0,0,1602,285,1,0,0,0,1603,1604,3,288,144,0,1604,287,1,0,0,0,1605,1606,
5,388,0,0,1606,1607,7,20,0,0,1607,1608,5,389,0,0,1608,289,1,0,0,0,1609,1610,
7,21,0,0,1610,291,1,0,0,0,1611,1612,7,22,0,0,1612,293,1,0,0,0,1613,1614,
7,23,0,0,1614,295,1,0,0,0,1615,1616,7,24,0,0,1616,297,1,0,0,0,1617,1618,
7,25,0,0,1618,299,1,0,0,0,1619,1620,7,26,0,0,1620,301,1,0,0,0,1621,1622,
7,27,0,0,1622,303,1,0,0,0,1623,1624,7,28,0,0,1624,305,1,0,0,0,1625,1626,
7,29,0,0,1626,307,1,0,0,0,1627,1628,7,30,0,0,1628,309,1,0,0,0,1629,1630,
7,31,0,0,1630,311,1,0,0,0,115,317,324,327,334,349,354,359,361,366,387,395,
402,411,419,427,438,442,449,453,461,470,474,483,488,495,503,508,521,535,
545,549,556,565,571,575,586,596,605,620,677,720,813,819,821,834,883,916,
934,943,945,951,961,966,969,979,984,986,996,1001,1003,1021,1074,1083,1097,
1105,1111,1115,1125,1144,1151,1153,1166,1174,1187,1198,1204,1217,1227,1232,
1237,1241,1246,1250,1254,1258,1262,1266,1270,1274,1290,1297,1308,1315,1321,
1325,1332,1341,1347,1351,1375,1385,1406,1417,1420,1434,1448,1457,1481,1491,
1513,1517,1523,1527,1545,1595];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class SHARCParser extends antlr4.Parser {

    static grammarFileName = "SHARCParser.g4";
    static literalNames = [ null, null, null, null, null, "'_ADI_'", "'_DATE_'", 
                            "'_FILE'", "'.align'", "'.compress'", "'.elif'", 
                            "'.else'", "'.endif'", "'.extern'", "'.file'", 
                            "'.file_attr'", "'.forcecompress'", "'.global'", 
                            "'.if'", "'.import'", "'.inc/binary'", "'.leftmargin'", 
                            "'.list'", "'.list_data'", "'.list_datfile'", 
                            "'.list_deftab'", "'.list_loctab'", "'.list_wrapdata'", 
                            "'.newpage'", "'.nocompress'", "'.nolist_data'", 
                            "'.nolist_datfile'", "'.nolist_wrapdata'", "'.pagelength'", 
                            "'.pagewidth'", "'.precision'", "'.round_minus'", 
                            "'.round_nearest'", "'.round_plus'", "'.round_zero'", 
                            "'.previous'", "'.section'", "'.segment'", "'.endseg'", 
                            "'.struct'", "'.type'", "'.var'", "'.weak'", 
                            "'abs'", "'ac'", "'acs'", "'act'", "'address'", 
                            "'and'", "'ashift'", "'astat'", "'av'", "'b0'", 
                            "'b1'", "'b2'", "'b3'", "'b4'", "'b5'", "'b6'", 
                            "'b7'", "'b8'", "'b9'", "'b10'", "'b11'", "'b12'", 
                            "'b13'", "'b14'", "'b15'", "'bb'", "'bclr'", 
                            "'bf'", "'bit'", "'bitrev'", "'bm'", "'bset'", 
                            "'btgl'", "'btst'", "'by'", "'ca'", "'cache'", 
                            "'call'", "'ch'", "'ci'", "'cjump'", "'cl'", 
                            "'clr'", "'clip'", "'comp'", "'copysign'", "'cos'", 
                            "'curlcntr'", "'daddr'", "'db'", "'dec'", "'def'", 
                            "'dim'", "'dm'", "'dm1e'", "'dm1s'", "'dm2e'", 
                            "'dm2s'", "'dmadr'", "'dmabank1'", "'dmabank2'", 
                            "'dmabank3'", "'dmawait'", "'do'", "'dovl'", 
                            "'eb'", "'ece'", "'ef'", "'else'", "'emuclk'", 
                            "'emuclk2'", "'emuidle'", "'emun'", "'eos'", 
                            "'eq'", "'ex'", "'exp'", "'exp2'", "'f0'", "'f1'", 
                            "'f2'", "'f3'", "'f4'", "'f5'", "'f6'", "'f7'", 
                            "'f8'", "'f9'", "'f10'", "'f11'", "'f12'", "'f13'", 
                            "'f14'", "'f15'", "'faddr'", "'fdep'", "'fext'", 
                            "'file'", "'fix'", "'flag0_in'", "'flag1_in'", 
                            "'flag2_in'", "'flag3_in'", "'float'", "'flush'", 
                            "'fmerg'", "'forever'", "'fpack'", "'fractional'", 
                            "'fta'", "'ftb'", "'ftc'", "'funpack'", "'gcc_compiled'", 
                            "'ge'", "'gt'", "'i0'", "'i1'", "'i2'", "'i3'", 
                            "'i4'", "'i5'", "'i6'", "'i7'", "'i8'", "'i9'", 
                            "'i10'", "'i11'", "'i12'", "'i13'", "'i14'", 
                            "'i15'", "'idle'", "'idle16'", "'idlei15'", 
                            "'idlei16'", "'if'", "'imask'", "'imaskp'", 
                            "'inc'", "'irptl'", "'jump'", "'l0'", "'l1'", 
                            "'l2'", "'l3'", "'l4'", "'l5'", "'l6'", "'l7'", 
                            "'l8'", "'l9'", "'l10'", "'l11'", "'l12'", "'l13'", 
                            "'l14'", "'l15'", "'la'", "'laddr'", "'lce'", 
                            "'lcntr'", "'le'", "'lefto'", "'leftz'", "'length'", 
                            "'line'", "'ln'", "'load'", "'log2'", "'logb'", 
                            "'loop'", "'lr'", "'lshift'", "'lt'", "'m0'", 
                            "'m1'", "'m2'", "'m3'", "'m4'", "'m5'", "'m6'", 
                            "'m7'", "'m8'", "'m9'", "'m10'", "'m11'", "'m12'", 
                            "'m13'", "'m14'", "'m15'", "'mant'", "'max'", 
                            "'mbm'", "'min'", "'mod'", "'mode1'", "'mode2'", 
                            "'modify'", "'mr0b'", "'mr0f'", "'mr1b'", "'mr1f'", 
                            "'mr2b'", "'mr2f'", "'mrb'", "'mrf'", "'ms'", 
                            "'mv'", "'nbm'", "'ne'", "'nofo'", "'nofz'", 
                            "'nop'", "'nopspecial'", "'not'", "'nu'", "'nw'", 
                            "'offsetof'", "'or'", "'p20'", "'p32'", "'p40'", 
                            "'pack'", "'page'", "'pass'", "'pc'", "'pcstk'", 
                            "'pcstkp'", "'pm'", "'pmadr'", "'pmbank1'", 
                            "'pmdae'", "'pmdas'", "'pop'", "'povl0'", "'povl1'", 
                            "'psa1e'", "'psa1s'", "'psa2e'", "'psa3e'", 
                            "'psa3s'", "'psa4e'", "'psa4s'", "'push'", "'px'", 
                            "'px1'", "'px2'", "'retain_name'", "'r0'", "'r1'", 
                            "'r2'", "'r3'", "'r4'", "'r5'", "'r6'", "'r7'", 
                            "'r8'", "'r9'", "'r10'", "'r11'", "'r12'", "'r13'", 
                            "'r14'", "'r15'", "'read'", "'recips'", "'rframe'", 
                            "'rnd'", "'rot'", "'rs'", "'rsqrts'", "'rti'", 
                            "'rts'", "'sat'", "'scalb'", "'scl'", "'se'", 
                            "'set'", "'sf'", "'si'", "'sin'", "'size'", 
                            "'sizeof'", "'sqr'", "'sr'", "'ssf'", "'ssfr'", 
                            "'ssi'", "'ssir'", "'st'", "'step'", "'stky'", 
                            "'struct'", "'sts'", "'suf'", "'sufr'", "'sui'", 
                            "'sv'", "'sw'", "'sz'", "'tag'", "'tcount'", 
                            "'tf'", "'tgl'", "'tperiod'", "'true'", "'trunc'", 
                            "'tst'", "'type'", "'trap'", "'uf'", "'ui'", 
                            "'unpack'", "'until'", "'ur'", "'usf'", "'usfr'", 
                            "'usi'", "'usir'", "'ustat1'", "'ustat2'", "'uuf'", 
                            "'uufr'", "'uui'", "'uuir'", "'val'", "'with'", 
                            "'xor'", "'+'", "'-'", "'*'", "'/'", "'%'", 
                            "'='", "'|'", "'^'", "','", "':'", "';'", "'('", 
                            "')'", "'['", "']'", "'{'", "'}'", "'@'", "'no_init'", 
                            "'zero_init'", "'runtime_init'", "'code'", "'data'", 
                            "'data64'", "'dmaonly'", "'SECTION'", "'SECTION_INFO'", 
                            "'STMT'", "'ADDR'", "'BIT_DATA'", "'JUMP_INT'", 
                            "'JUMP_PC'", "'JUMP_MD'", "'MODIFIER'", "'MULTI_MOD'", 
                            "'LABLE'", "'VARDEF'", "'ARRDEF'", "'DM_ACCESS'", 
                            "'PM_ACCESS'", "'CONDITION'", "'IF_STMT'", "'VALUE_EXP'", 
                            "'NULL'", "'CHAR_LITERAL'", "'STR_LITERAL'", 
                            "'DIRECTIVE'", "'NEGATE'" ];
    static symbolicNames = [ null, "StringLiteral", "CharLiteral", "INT", 
                             "WS", "DOT_ADI_", "DOT_DATE_", "DOT_FILE_", 
                             "DOT_ALGIGN", "DOT_COMPRESS", "DOT_ELIF", "DOT_ELSE", 
                             "DOT_ENDIF", "DOT_EXTERN", "DOT_FILE", "DOT_FILE_ATTR", 
                             "DOT_FORCECOMPRESS", "DOT_GLOBAL", "DOT_IF", 
                             "DOT_IMPORT", "DOT_INCBINARY", "DOT_LEFTMARGIN", 
                             "DOT_LIST", "DOT_LIST_DATA", "DOT_LIST_DATFILE", 
                             "DOT_LIST_DEFTAB", "DOT_LIST_LOCTAB", "DOT_LIST_WRAPDATA", 
                             "DOT_NEWPAGE", "DOT_NOCOMPRESS", "DOT_NOLIST_DATA", 
                             "DOT_NOLIST_DATFILE", "DOT_NOLIST_WRAPDATA", 
                             "DOT_PAGELENGTH", "DOT_PAGEWIDTH", "DOT_PRECISION", 
                             "DOT_ROUND_MINUS", "DOT_ROUND_NEAREST", "DOT_ROUND_PLUS", 
                             "DOT_ROUND_ZERO", "DOT_PREVIOUS", "DOT_SECTION", 
                             "DOT_SEGMENT", "DOT_ENDSEG", "DOT_STRUCT", 
                             "DOT_TYPE", "DOT_VAR", "DOT_WEAK", "ABS", "AC", 
                             "ACS", "ACT", "ADDRESS", "AND", "ASHIFT", "ASTAT", 
                             "AV", "B0", "B1", "B2", "B3", "B4", "B5", "B6", 
                             "B7", "B8", "B9", "B10", "B11", "B12", "B13", 
                             "B14", "B15", "BB", "BCLR", "BF", "BIT", "BITREV", 
                             "BM", "BSET", "BTGL", "BTST", "BY", "CA", "CACHE", 
                             "CALL", "CH", "CI", "CJUMP", "CL", "CLR", "CLIP", 
                             "COMP", "COPYSIGN", "COS", "CURLCNTR", "DADDR", 
                             "DB", "DEC", "DEF", "DIM", "DM", "DMA1E", "DMA1s", 
                             "DMA2E", "DMA2s", "DMADR", "DMABANK1", "DMABANK2", 
                             "DMABANK3", "DMAWAIT", "DO", "DOVL", "EB", 
                             "ECE", "EF", "ELSE", "EMUCLK", "EMUCLK2", "EMUIDLE", 
                             "EMUN", "EOS", "EQ", "EX", "EXP", "EXP2", "F0", 
                             "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", 
                             "F9", "F10", "F11", "F12", "F13", "F14", "F15", 
                             "FADDR", "FDEP", "FEXT", "FILE", "FIX", "FLAG0_IN", 
                             "FLAG1_IN", "FLAG2_IN", "FLAG3_IN", "FLOAT", 
                             "FLUSH", "FMERG", "FOREVER", "FPACK", "FRACTIONAL", 
                             "FTA", "FTB", "FTC", "FUNPACK", "GCC_COMPILED", 
                             "GE", "GT", "I0", "I1", "I2", "I3", "I4", "I5", 
                             "I6", "I7", "I8", "I9", "I10", "I11", "I12", 
                             "I13", "I14", "I15", "IDLE", "IDLE16", "IDLEI15", 
                             "IDLEI16", "IF", "IMASK", "IMASKP", "INC", 
                             "IRPTL", "JUMP", "L0", "L1", "L2", "L3", "L4", 
                             "L5", "L6", "L7", "L8", "L9", "L10", "L11", 
                             "L12", "L13", "L14", "L15", "LA", "LADDR", 
                             "LCE", "LCNTR", "LE", "LEFTO", "LEFTZ", "LENGTH", 
                             "LINE", "LN", "LOAD", "LOG2", "LOGB", "LOOP", 
                             "LR", "LSHIFT", "LT", "M0", "M1", "M2", "M3", 
                             "M4", "M5", "M6", "M7", "M8", "M9", "M10", 
                             "M11", "M12", "M13", "M14", "M15", "MANT", 
                             "MAX", "MBM", "MIN", "MOD", "MODE1", "MODE2", 
                             "MODIFY", "MR0B", "MR0F", "MR1B", "MR1F", "MR2B", 
                             "MR2F", "MRB", "MRF", "MS", "MV", "NBM", "NE", 
                             "NOFO", "NOFZ", "NOP", "NOPSPECIAL", "NOT", 
                             "NU", "NW", "OFFSETOF", "OR", "P20", "P32", 
                             "P40", "PACK", "PAGE", "PASS", "PC", "PCSTK", 
                             "PCSTKP", "PM", "PMADR", "PMBANK1", "PMDAE", 
                             "PMDAS", "POP", "POVL0", "POVL1", "PSA1E", 
                             "PSA1S", "PSA2E", "PSA3E", "PSA3S", "PSA4E", 
                             "PSA4S", "PUSH", "PX", "PX1", "PX2", "RETAIN_NAME", 
                             "R0", "R1", "R2", "R3", "R4", "R5", "R6", "R7", 
                             "R8", "R9", "R10", "R11", "R12", "R13", "R14", 
                             "R15", "READ", "RECIPS", "RFRAME", "RND", "ROT", 
                             "RS", "RSQRTS", "RTI", "RTS", "SAT", "SCALB", 
                             "SCL", "SE", "SET", "SF", "SI", "SIN", "SIZE", 
                             "SIZEOF", "SQR", "SR", "SSF", "SSFR", "SSI", 
                             "SSIR", "ST", "STEP", "STKY", "STRUCT", "STS", 
                             "SUF", "SUFR", "SUI", "SV", "SW", "SZ", "TAG", 
                             "TCOUNT", "TF", "TGL", "TPERIOD", "TRUE", "TRUNC", 
                             "TST", "TYPE", "TRAP", "UF", "UI", "UNPACK", 
                             "UNTIL", "UR", "USF", "USFR", "USI", "USIR", 
                             "USTAT1", "USTAT2", "UUF", "UUFR", "UUI", "UUIR", 
                             "VAL", "WITH", "XOR", "PLUS", "MINUS", "MULT", 
                             "DIV", "DIV_MOD", "EQU", "I_OR", "I_XOR", "COMMA", 
                             "COLON", "SEMICOLON", "LPARENTHESE", "RPARENTHESE", 
                             "LBRACKET", "RBRACKET", "LBRACE", "RBRACE", 
                             "AT", "NO_INIT", "ZERO_INIT", "RUNTIME_INIT", 
                             "CODE", "DATA", "DATA64", "DMAONLY", "SECTION", 
                             "SECTION_INFO", "STMT", "ADDR", "BIT_DATA", 
                             "JUMP_INT", "JUMP_PC", "JUMP_MD", "MODIFIER", 
                             "MULTI_MOD", "LABLE", "VARDEF", "ARRDEF", "DM_ACCESS", 
                             "PM_ACCESS", "CONDITION", "IF_STMT", "VALUE_EXP", 
                             "NULL_", "CHAR_LITERAL", "STR_LITERAL", "DIRECTIVE", 
                             "NEGATE", "ID", "COMMENT" ];
    static ruleNames = [ "prog", "statement", "stmt_atom", "sec", "seg", 
                         "end_seg", "seg_qualifier", "seg_qualifier1", "seg_qualifier2", 
                         "seg_qualifier3", "seg_qualifier_1", "seg_qualifier_2", 
                         "seg_qualifier_3", "stmt", "declaration", "declaration_exp1", 
                         "declaration_exp2", "declaration_exp3", "declaration_exp4", 
                         "declaration_exp5", "declaration_exp_f1", "declaration_exp_f2", 
                         "initExpression", "var_addr", "value_exp", "value_exp2", 
                         "term", "factor", "atom", "compute", "if_compute_mov", 
                         "if_compute_mov_exp", "compute_mov_exp", "mov_exp_1", 
                         "mov_exp_1_1", "mov_exp_1_2", "mov_exp_3a", "mov_exp_3b", 
                         "mov_exp_3c", "mov_exp_3d", "mov_exp_4a", "mov_exp_4b", 
                         "mov_exp_4c", "mov_exp_4d", "mov_exp_5", "mov_exp_6a", 
                         "mov_exp_6b", "mov_exp_7", "mem_addr_ia_mb", "mem_addr_ic_md", 
                         "mem_addr_md_ic", "mem_addr_mb_ia", "mem_addr_ia_int", 
                         "mem_addr_ic_int", "mem_addr_int_ia", "mem_addr_int_ic", 
                         "mem_addr_int", "mem_addr_int_", "mem_addr_dm_ia_mb", 
                         "mem_addr_pm_ic_md", "mem_addr_dm_mb_ia", "mem_addr_pm_md_ic", 
                         "mem_addr_dm_ia_int", "mem_addr_pm_ic_int", "mem_addr_dm_int_ia", 
                         "mem_addr_pm_int_ic", "mem_addr_dm_int", "mem_addr_pm_int", 
                         "fixpoint_alu_op", "r_exp", "floating_point_alu_op", 
                         "f_exp", "multi_op", "multi_r", "multi_exp_r", 
                         "multi_exp_mrf", "multi_exp_mrb", "mr", "shifter_op", 
                         "shifter_exp", "sec_op", "sec_op2", "bit_data", 
                         "add_or_sub", "dual_op", "dual_add_r", "parallel_multi", 
                         "flow_control_exp", "flow_contorl_8", "flow_contorl_8_exp", 
                         "flow_control_9_and_11", "flow_control_9_and_11_exp", 
                         "flow_control_10", "flow_control_10_frag", "flow_control_12", 
                         "lcntr_v", "flow_control_13", "flow_control_8a", 
                         "flow_control_8b", "flow_control_9a", "flow_control_9b", 
                         "flow_control_11a", "flow_control_11b", "jump_addr_int_or_pc", 
                         "jump_addr_md_or_pc", "jump_addr_pc", "jump_addr_int", 
                         "jump_modifier", "jump_modifier_", "jump_modifier_1", 
                         "jump_modifier2", "jump_modifier3", "jump_modifier3_", 
                         "jump_modifier3_1", "imm_mov_exp", "imm_mov_14a", 
                         "imm_mov_15a", "imm_mov_14b", "imm_mov_15b", "imm_mov_16", 
                         "imm_mov_17", "u_reg2", "misc_exp", "misc_20", 
                         "directive_exp", "b_reg", "l_reg", "r_reg", "f_reg", 
                         "s_reg", "ia", "mb", "ic", "md", "i_reg", "m_reg", 
                         "dag_reg", "d_reg", "u_reg", "condition", "ccondition", 
                         "multi_mod1", "multi_mod1_", "multi_mod2", "multi_mod2_", 
                         "r3_0", "r7_4", "r11_8", "r15_12", "f3_0", "f7_4", 
                         "f11_8", "f15_12", "addr", "mrf", "mrb" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = SHARCParser.ruleNames;
        this.literalNames = SHARCParser.literalNames;
        this.symbolicNames = SHARCParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	prog() {
	    let localctx = new ProgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, SHARCParser.RULE_prog);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 315; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 312;
	            this.statement();
	            this.state = 313;
	            this.match(SHARCParser.SEMICOLON);
	            this.state = 317; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 8)) & ~0x1f) == 0 && ((1 << (_la - 8)) & ((1 << (SHARCParser.DOT_ALGIGN - 8)) | (1 << (SHARCParser.DOT_COMPRESS - 8)) | (1 << (SHARCParser.DOT_EXTERN - 8)) | (1 << (SHARCParser.DOT_FILE - 8)) | (1 << (SHARCParser.DOT_FILE_ATTR - 8)) | (1 << (SHARCParser.DOT_FORCECOMPRESS - 8)) | (1 << (SHARCParser.DOT_GLOBAL - 8)) | (1 << (SHARCParser.DOT_IMPORT - 8)) | (1 << (SHARCParser.DOT_LEFTMARGIN - 8)) | (1 << (SHARCParser.DOT_LIST - 8)) | (1 << (SHARCParser.DOT_LIST_DATA - 8)) | (1 << (SHARCParser.DOT_LIST_DATFILE - 8)) | (1 << (SHARCParser.DOT_LIST_DEFTAB - 8)) | (1 << (SHARCParser.DOT_LIST_LOCTAB - 8)) | (1 << (SHARCParser.DOT_LIST_WRAPDATA - 8)) | (1 << (SHARCParser.DOT_NEWPAGE - 8)) | (1 << (SHARCParser.DOT_NOCOMPRESS - 8)) | (1 << (SHARCParser.DOT_NOLIST_DATA - 8)) | (1 << (SHARCParser.DOT_NOLIST_DATFILE - 8)) | (1 << (SHARCParser.DOT_NOLIST_WRAPDATA - 8)) | (1 << (SHARCParser.DOT_PAGELENGTH - 8)) | (1 << (SHARCParser.DOT_PAGEWIDTH - 8)) | (1 << (SHARCParser.DOT_PRECISION - 8)) | (1 << (SHARCParser.DOT_ROUND_MINUS - 8)) | (1 << (SHARCParser.DOT_ROUND_NEAREST - 8)) | (1 << (SHARCParser.DOT_ROUND_PLUS - 8)) | (1 << (SHARCParser.DOT_ROUND_ZERO - 8)))) !== 0) || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (SHARCParser.DOT_PREVIOUS - 40)) | (1 << (SHARCParser.DOT_SECTION - 40)) | (1 << (SHARCParser.DOT_SEGMENT - 40)) | (1 << (SHARCParser.DOT_ENDSEG - 40)) | (1 << (SHARCParser.DOT_VAR - 40)) | (1 << (SHARCParser.DOT_WEAK - 40)) | (1 << (SHARCParser.ASTAT - 40)) | (1 << (SHARCParser.B0 - 40)) | (1 << (SHARCParser.B1 - 40)) | (1 << (SHARCParser.B2 - 40)) | (1 << (SHARCParser.B3 - 40)) | (1 << (SHARCParser.B4 - 40)) | (1 << (SHARCParser.B5 - 40)) | (1 << (SHARCParser.B6 - 40)) | (1 << (SHARCParser.B7 - 40)) | (1 << (SHARCParser.B8 - 40)) | (1 << (SHARCParser.B9 - 40)) | (1 << (SHARCParser.B10 - 40)) | (1 << (SHARCParser.B11 - 40)) | (1 << (SHARCParser.B12 - 40)) | (1 << (SHARCParser.B13 - 40)) | (1 << (SHARCParser.B14 - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (SHARCParser.B15 - 72)) | (1 << (SHARCParser.BIT - 72)) | (1 << (SHARCParser.BITREV - 72)) | (1 << (SHARCParser.BTST - 72)) | (1 << (SHARCParser.CALL - 72)) | (1 << (SHARCParser.CJUMP - 72)) | (1 << (SHARCParser.COMP - 72)) | (1 << (SHARCParser.CURLCNTR - 72)) | (1 << (SHARCParser.DADDR - 72)) | (1 << (SHARCParser.DM - 72)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (SHARCParser.DO - 111)) | (1 << (SHARCParser.F0 - 111)) | (1 << (SHARCParser.F1 - 111)) | (1 << (SHARCParser.F2 - 111)) | (1 << (SHARCParser.F3 - 111)) | (1 << (SHARCParser.F4 - 111)) | (1 << (SHARCParser.F5 - 111)) | (1 << (SHARCParser.F6 - 111)) | (1 << (SHARCParser.F7 - 111)) | (1 << (SHARCParser.F8 - 111)) | (1 << (SHARCParser.F9 - 111)) | (1 << (SHARCParser.F10 - 111)) | (1 << (SHARCParser.F11 - 111)) | (1 << (SHARCParser.F12 - 111)) | (1 << (SHARCParser.F13 - 111)) | (1 << (SHARCParser.F14 - 111)) | (1 << (SHARCParser.F15 - 111)) | (1 << (SHARCParser.FADDR - 111)))) !== 0) || ((((_la - 152)) & ~0x1f) == 0 && ((1 << (_la - 152)) & ((1 << (SHARCParser.FLUSH - 152)) | (1 << (SHARCParser.I0 - 152)) | (1 << (SHARCParser.I1 - 152)) | (1 << (SHARCParser.I2 - 152)) | (1 << (SHARCParser.I3 - 152)) | (1 << (SHARCParser.I4 - 152)) | (1 << (SHARCParser.I5 - 152)) | (1 << (SHARCParser.I6 - 152)) | (1 << (SHARCParser.I7 - 152)) | (1 << (SHARCParser.I8 - 152)) | (1 << (SHARCParser.I9 - 152)) | (1 << (SHARCParser.I10 - 152)) | (1 << (SHARCParser.I11 - 152)) | (1 << (SHARCParser.I12 - 152)) | (1 << (SHARCParser.I13 - 152)) | (1 << (SHARCParser.I14 - 152)) | (1 << (SHARCParser.I15 - 152)) | (1 << (SHARCParser.IDLE - 152)) | (1 << (SHARCParser.IDLE16 - 152)))) !== 0) || ((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (SHARCParser.IF - 184)) | (1 << (SHARCParser.IMASK - 184)) | (1 << (SHARCParser.IMASKP - 184)) | (1 << (SHARCParser.IRPTL - 184)) | (1 << (SHARCParser.JUMP - 184)) | (1 << (SHARCParser.L0 - 184)) | (1 << (SHARCParser.L1 - 184)) | (1 << (SHARCParser.L2 - 184)) | (1 << (SHARCParser.L3 - 184)) | (1 << (SHARCParser.L4 - 184)) | (1 << (SHARCParser.L5 - 184)) | (1 << (SHARCParser.L6 - 184)) | (1 << (SHARCParser.L7 - 184)) | (1 << (SHARCParser.L8 - 184)) | (1 << (SHARCParser.L9 - 184)) | (1 << (SHARCParser.L10 - 184)) | (1 << (SHARCParser.L11 - 184)) | (1 << (SHARCParser.L12 - 184)) | (1 << (SHARCParser.L13 - 184)) | (1 << (SHARCParser.L14 - 184)) | (1 << (SHARCParser.L15 - 184)) | (1 << (SHARCParser.LADDR - 184)) | (1 << (SHARCParser.LCNTR - 184)))) !== 0) || ((((_la - 223)) & ~0x1f) == 0 && ((1 << (_la - 223)) & ((1 << (SHARCParser.M0 - 223)) | (1 << (SHARCParser.M1 - 223)) | (1 << (SHARCParser.M2 - 223)) | (1 << (SHARCParser.M3 - 223)) | (1 << (SHARCParser.M4 - 223)) | (1 << (SHARCParser.M5 - 223)) | (1 << (SHARCParser.M6 - 223)) | (1 << (SHARCParser.M7 - 223)) | (1 << (SHARCParser.M8 - 223)) | (1 << (SHARCParser.M9 - 223)) | (1 << (SHARCParser.M10 - 223)) | (1 << (SHARCParser.M11 - 223)) | (1 << (SHARCParser.M12 - 223)) | (1 << (SHARCParser.M13 - 223)) | (1 << (SHARCParser.M14 - 223)) | (1 << (SHARCParser.M15 - 223)) | (1 << (SHARCParser.MODE1 - 223)) | (1 << (SHARCParser.MODE2 - 223)) | (1 << (SHARCParser.MODIFY - 223)) | (1 << (SHARCParser.MR0B - 223)) | (1 << (SHARCParser.MR0F - 223)) | (1 << (SHARCParser.MR1B - 223)) | (1 << (SHARCParser.MR1F - 223)) | (1 << (SHARCParser.MR2B - 223)) | (1 << (SHARCParser.MR2F - 223)) | (1 << (SHARCParser.MRB - 223)) | (1 << (SHARCParser.MRF - 223)))) !== 0) || ((((_la - 261)) & ~0x1f) == 0 && ((1 << (_la - 261)) & ((1 << (SHARCParser.NOP - 261)) | (1 << (SHARCParser.PC - 261)) | (1 << (SHARCParser.PCSTK - 261)) | (1 << (SHARCParser.PCSTKP - 261)) | (1 << (SHARCParser.PM - 261)) | (1 << (SHARCParser.POP - 261)) | (1 << (SHARCParser.PUSH - 261)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (SHARCParser.PX - 293)) | (1 << (SHARCParser.PX1 - 293)) | (1 << (SHARCParser.PX2 - 293)) | (1 << (SHARCParser.R0 - 293)) | (1 << (SHARCParser.R1 - 293)) | (1 << (SHARCParser.R2 - 293)) | (1 << (SHARCParser.R3 - 293)) | (1 << (SHARCParser.R4 - 293)) | (1 << (SHARCParser.R5 - 293)) | (1 << (SHARCParser.R6 - 293)) | (1 << (SHARCParser.R7 - 293)) | (1 << (SHARCParser.R8 - 293)) | (1 << (SHARCParser.R9 - 293)) | (1 << (SHARCParser.R10 - 293)) | (1 << (SHARCParser.R11 - 293)) | (1 << (SHARCParser.R12 - 293)) | (1 << (SHARCParser.R13 - 293)) | (1 << (SHARCParser.R14 - 293)) | (1 << (SHARCParser.R15 - 293)) | (1 << (SHARCParser.RFRAME - 293)) | (1 << (SHARCParser.RTI - 293)) | (1 << (SHARCParser.RTS - 293)))) !== 0) || ((((_la - 340)) & ~0x1f) == 0 && ((1 << (_la - 340)) & ((1 << (SHARCParser.STKY - 340)) | (1 << (SHARCParser.TCOUNT - 340)) | (1 << (SHARCParser.TPERIOD - 340)) | (1 << (SHARCParser.USTAT1 - 340)) | (1 << (SHARCParser.USTAT2 - 340)))) !== 0) || _la===SHARCParser.ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, SHARCParser.RULE_statement);
	    var _la = 0; // Token type
	    try {
	        this.state = 327;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.DOT_ALGIGN:
	        case SHARCParser.DOT_COMPRESS:
	        case SHARCParser.DOT_EXTERN:
	        case SHARCParser.DOT_FILE:
	        case SHARCParser.DOT_FILE_ATTR:
	        case SHARCParser.DOT_FORCECOMPRESS:
	        case SHARCParser.DOT_GLOBAL:
	        case SHARCParser.DOT_IMPORT:
	        case SHARCParser.DOT_LEFTMARGIN:
	        case SHARCParser.DOT_LIST:
	        case SHARCParser.DOT_LIST_DATA:
	        case SHARCParser.DOT_LIST_DATFILE:
	        case SHARCParser.DOT_LIST_DEFTAB:
	        case SHARCParser.DOT_LIST_LOCTAB:
	        case SHARCParser.DOT_LIST_WRAPDATA:
	        case SHARCParser.DOT_NEWPAGE:
	        case SHARCParser.DOT_NOCOMPRESS:
	        case SHARCParser.DOT_NOLIST_DATA:
	        case SHARCParser.DOT_NOLIST_DATFILE:
	        case SHARCParser.DOT_NOLIST_WRAPDATA:
	        case SHARCParser.DOT_PAGELENGTH:
	        case SHARCParser.DOT_PAGEWIDTH:
	        case SHARCParser.DOT_PRECISION:
	        case SHARCParser.DOT_ROUND_MINUS:
	        case SHARCParser.DOT_ROUND_NEAREST:
	        case SHARCParser.DOT_ROUND_PLUS:
	        case SHARCParser.DOT_ROUND_ZERO:
	        case SHARCParser.DOT_PREVIOUS:
	        case SHARCParser.DOT_SECTION:
	        case SHARCParser.DOT_SEGMENT:
	        case SHARCParser.DOT_ENDSEG:
	        case SHARCParser.DOT_VAR:
	        case SHARCParser.DOT_WEAK:
	        case SHARCParser.ASTAT:
	        case SHARCParser.B0:
	        case SHARCParser.B1:
	        case SHARCParser.B2:
	        case SHARCParser.B3:
	        case SHARCParser.B4:
	        case SHARCParser.B5:
	        case SHARCParser.B6:
	        case SHARCParser.B7:
	        case SHARCParser.B8:
	        case SHARCParser.B9:
	        case SHARCParser.B10:
	        case SHARCParser.B11:
	        case SHARCParser.B12:
	        case SHARCParser.B13:
	        case SHARCParser.B14:
	        case SHARCParser.B15:
	        case SHARCParser.BIT:
	        case SHARCParser.BITREV:
	        case SHARCParser.BTST:
	        case SHARCParser.CALL:
	        case SHARCParser.CJUMP:
	        case SHARCParser.COMP:
	        case SHARCParser.CURLCNTR:
	        case SHARCParser.DADDR:
	        case SHARCParser.DM:
	        case SHARCParser.DO:
	        case SHARCParser.F0:
	        case SHARCParser.F1:
	        case SHARCParser.F2:
	        case SHARCParser.F3:
	        case SHARCParser.F4:
	        case SHARCParser.F5:
	        case SHARCParser.F6:
	        case SHARCParser.F7:
	        case SHARCParser.F8:
	        case SHARCParser.F9:
	        case SHARCParser.F10:
	        case SHARCParser.F11:
	        case SHARCParser.F12:
	        case SHARCParser.F13:
	        case SHARCParser.F14:
	        case SHARCParser.F15:
	        case SHARCParser.FADDR:
	        case SHARCParser.FLUSH:
	        case SHARCParser.I0:
	        case SHARCParser.I1:
	        case SHARCParser.I2:
	        case SHARCParser.I3:
	        case SHARCParser.I4:
	        case SHARCParser.I5:
	        case SHARCParser.I6:
	        case SHARCParser.I7:
	        case SHARCParser.I8:
	        case SHARCParser.I9:
	        case SHARCParser.I10:
	        case SHARCParser.I11:
	        case SHARCParser.I12:
	        case SHARCParser.I13:
	        case SHARCParser.I14:
	        case SHARCParser.I15:
	        case SHARCParser.IDLE:
	        case SHARCParser.IDLE16:
	        case SHARCParser.IF:
	        case SHARCParser.IMASK:
	        case SHARCParser.IMASKP:
	        case SHARCParser.IRPTL:
	        case SHARCParser.JUMP:
	        case SHARCParser.L0:
	        case SHARCParser.L1:
	        case SHARCParser.L2:
	        case SHARCParser.L3:
	        case SHARCParser.L4:
	        case SHARCParser.L5:
	        case SHARCParser.L6:
	        case SHARCParser.L7:
	        case SHARCParser.L8:
	        case SHARCParser.L9:
	        case SHARCParser.L10:
	        case SHARCParser.L11:
	        case SHARCParser.L12:
	        case SHARCParser.L13:
	        case SHARCParser.L14:
	        case SHARCParser.L15:
	        case SHARCParser.LADDR:
	        case SHARCParser.LCNTR:
	        case SHARCParser.M0:
	        case SHARCParser.M1:
	        case SHARCParser.M2:
	        case SHARCParser.M3:
	        case SHARCParser.M4:
	        case SHARCParser.M5:
	        case SHARCParser.M6:
	        case SHARCParser.M7:
	        case SHARCParser.M8:
	        case SHARCParser.M9:
	        case SHARCParser.M10:
	        case SHARCParser.M11:
	        case SHARCParser.M12:
	        case SHARCParser.M13:
	        case SHARCParser.M14:
	        case SHARCParser.M15:
	        case SHARCParser.MODE1:
	        case SHARCParser.MODE2:
	        case SHARCParser.MODIFY:
	        case SHARCParser.MR0B:
	        case SHARCParser.MR0F:
	        case SHARCParser.MR1B:
	        case SHARCParser.MR1F:
	        case SHARCParser.MR2B:
	        case SHARCParser.MR2F:
	        case SHARCParser.MRB:
	        case SHARCParser.MRF:
	        case SHARCParser.NOP:
	        case SHARCParser.PC:
	        case SHARCParser.PCSTK:
	        case SHARCParser.PCSTKP:
	        case SHARCParser.PM:
	        case SHARCParser.POP:
	        case SHARCParser.PUSH:
	        case SHARCParser.PX:
	        case SHARCParser.PX1:
	        case SHARCParser.PX2:
	        case SHARCParser.R0:
	        case SHARCParser.R1:
	        case SHARCParser.R2:
	        case SHARCParser.R3:
	        case SHARCParser.R4:
	        case SHARCParser.R5:
	        case SHARCParser.R6:
	        case SHARCParser.R7:
	        case SHARCParser.R8:
	        case SHARCParser.R9:
	        case SHARCParser.R10:
	        case SHARCParser.R11:
	        case SHARCParser.R12:
	        case SHARCParser.R13:
	        case SHARCParser.R14:
	        case SHARCParser.R15:
	        case SHARCParser.RFRAME:
	        case SHARCParser.RTI:
	        case SHARCParser.RTS:
	        case SHARCParser.STKY:
	        case SHARCParser.TCOUNT:
	        case SHARCParser.TPERIOD:
	        case SHARCParser.USTAT1:
	        case SHARCParser.USTAT2:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 319;
	            this.stmt_atom();
	            break;
	        case SHARCParser.ID:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 322; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 320;
	                this.match(SHARCParser.ID);
	                this.state = 321;
	                this.match(SHARCParser.COLON);
	                this.state = 324; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===SHARCParser.ID);
	            this.state = 326;
	            this.stmt_atom();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_atom() {
	    let localctx = new Stmt_atomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, SHARCParser.RULE_stmt_atom);
	    try {
	        this.state = 334;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.DOT_VAR:
	        case SHARCParser.ASTAT:
	        case SHARCParser.B0:
	        case SHARCParser.B1:
	        case SHARCParser.B2:
	        case SHARCParser.B3:
	        case SHARCParser.B4:
	        case SHARCParser.B5:
	        case SHARCParser.B6:
	        case SHARCParser.B7:
	        case SHARCParser.B8:
	        case SHARCParser.B9:
	        case SHARCParser.B10:
	        case SHARCParser.B11:
	        case SHARCParser.B12:
	        case SHARCParser.B13:
	        case SHARCParser.B14:
	        case SHARCParser.B15:
	        case SHARCParser.BIT:
	        case SHARCParser.BITREV:
	        case SHARCParser.BTST:
	        case SHARCParser.CALL:
	        case SHARCParser.CJUMP:
	        case SHARCParser.COMP:
	        case SHARCParser.CURLCNTR:
	        case SHARCParser.DADDR:
	        case SHARCParser.DM:
	        case SHARCParser.DO:
	        case SHARCParser.F0:
	        case SHARCParser.F1:
	        case SHARCParser.F2:
	        case SHARCParser.F3:
	        case SHARCParser.F4:
	        case SHARCParser.F5:
	        case SHARCParser.F6:
	        case SHARCParser.F7:
	        case SHARCParser.F8:
	        case SHARCParser.F9:
	        case SHARCParser.F10:
	        case SHARCParser.F11:
	        case SHARCParser.F12:
	        case SHARCParser.F13:
	        case SHARCParser.F14:
	        case SHARCParser.F15:
	        case SHARCParser.FADDR:
	        case SHARCParser.FLUSH:
	        case SHARCParser.I0:
	        case SHARCParser.I1:
	        case SHARCParser.I2:
	        case SHARCParser.I3:
	        case SHARCParser.I4:
	        case SHARCParser.I5:
	        case SHARCParser.I6:
	        case SHARCParser.I7:
	        case SHARCParser.I8:
	        case SHARCParser.I9:
	        case SHARCParser.I10:
	        case SHARCParser.I11:
	        case SHARCParser.I12:
	        case SHARCParser.I13:
	        case SHARCParser.I14:
	        case SHARCParser.I15:
	        case SHARCParser.IDLE:
	        case SHARCParser.IDLE16:
	        case SHARCParser.IF:
	        case SHARCParser.IMASK:
	        case SHARCParser.IMASKP:
	        case SHARCParser.IRPTL:
	        case SHARCParser.JUMP:
	        case SHARCParser.L0:
	        case SHARCParser.L1:
	        case SHARCParser.L2:
	        case SHARCParser.L3:
	        case SHARCParser.L4:
	        case SHARCParser.L5:
	        case SHARCParser.L6:
	        case SHARCParser.L7:
	        case SHARCParser.L8:
	        case SHARCParser.L9:
	        case SHARCParser.L10:
	        case SHARCParser.L11:
	        case SHARCParser.L12:
	        case SHARCParser.L13:
	        case SHARCParser.L14:
	        case SHARCParser.L15:
	        case SHARCParser.LADDR:
	        case SHARCParser.LCNTR:
	        case SHARCParser.M0:
	        case SHARCParser.M1:
	        case SHARCParser.M2:
	        case SHARCParser.M3:
	        case SHARCParser.M4:
	        case SHARCParser.M5:
	        case SHARCParser.M6:
	        case SHARCParser.M7:
	        case SHARCParser.M8:
	        case SHARCParser.M9:
	        case SHARCParser.M10:
	        case SHARCParser.M11:
	        case SHARCParser.M12:
	        case SHARCParser.M13:
	        case SHARCParser.M14:
	        case SHARCParser.M15:
	        case SHARCParser.MODE1:
	        case SHARCParser.MODE2:
	        case SHARCParser.MODIFY:
	        case SHARCParser.MR0B:
	        case SHARCParser.MR0F:
	        case SHARCParser.MR1B:
	        case SHARCParser.MR1F:
	        case SHARCParser.MR2B:
	        case SHARCParser.MR2F:
	        case SHARCParser.MRB:
	        case SHARCParser.MRF:
	        case SHARCParser.NOP:
	        case SHARCParser.PC:
	        case SHARCParser.PCSTK:
	        case SHARCParser.PCSTKP:
	        case SHARCParser.PM:
	        case SHARCParser.POP:
	        case SHARCParser.PUSH:
	        case SHARCParser.PX:
	        case SHARCParser.PX1:
	        case SHARCParser.PX2:
	        case SHARCParser.R0:
	        case SHARCParser.R1:
	        case SHARCParser.R2:
	        case SHARCParser.R3:
	        case SHARCParser.R4:
	        case SHARCParser.R5:
	        case SHARCParser.R6:
	        case SHARCParser.R7:
	        case SHARCParser.R8:
	        case SHARCParser.R9:
	        case SHARCParser.R10:
	        case SHARCParser.R11:
	        case SHARCParser.R12:
	        case SHARCParser.R13:
	        case SHARCParser.R14:
	        case SHARCParser.R15:
	        case SHARCParser.RFRAME:
	        case SHARCParser.RTI:
	        case SHARCParser.RTS:
	        case SHARCParser.STKY:
	        case SHARCParser.TCOUNT:
	        case SHARCParser.TPERIOD:
	        case SHARCParser.USTAT1:
	        case SHARCParser.USTAT2:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 329;
	            this.stmt();
	            break;
	        case SHARCParser.DOT_SECTION:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 330;
	            this.sec();
	            break;
	        case SHARCParser.DOT_SEGMENT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 331;
	            this.seg();
	            break;
	        case SHARCParser.DOT_ENDSEG:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 332;
	            this.end_seg();
	            break;
	        case SHARCParser.DOT_ALGIGN:
	        case SHARCParser.DOT_COMPRESS:
	        case SHARCParser.DOT_EXTERN:
	        case SHARCParser.DOT_FILE:
	        case SHARCParser.DOT_FILE_ATTR:
	        case SHARCParser.DOT_FORCECOMPRESS:
	        case SHARCParser.DOT_GLOBAL:
	        case SHARCParser.DOT_IMPORT:
	        case SHARCParser.DOT_LEFTMARGIN:
	        case SHARCParser.DOT_LIST:
	        case SHARCParser.DOT_LIST_DATA:
	        case SHARCParser.DOT_LIST_DATFILE:
	        case SHARCParser.DOT_LIST_DEFTAB:
	        case SHARCParser.DOT_LIST_LOCTAB:
	        case SHARCParser.DOT_LIST_WRAPDATA:
	        case SHARCParser.DOT_NEWPAGE:
	        case SHARCParser.DOT_NOCOMPRESS:
	        case SHARCParser.DOT_NOLIST_DATA:
	        case SHARCParser.DOT_NOLIST_DATFILE:
	        case SHARCParser.DOT_NOLIST_WRAPDATA:
	        case SHARCParser.DOT_PAGELENGTH:
	        case SHARCParser.DOT_PAGEWIDTH:
	        case SHARCParser.DOT_PRECISION:
	        case SHARCParser.DOT_ROUND_MINUS:
	        case SHARCParser.DOT_ROUND_NEAREST:
	        case SHARCParser.DOT_ROUND_PLUS:
	        case SHARCParser.DOT_ROUND_ZERO:
	        case SHARCParser.DOT_PREVIOUS:
	        case SHARCParser.DOT_WEAK:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 333;
	            this.directive_exp();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sec() {
	    let localctx = new SecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, SHARCParser.RULE_sec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 336;
	        this.match(SHARCParser.DOT_SECTION);
	        this.state = 337;
	        this.seg_qualifier();
	        this.state = 338;
	        this.match(SHARCParser.ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	seg() {
	    let localctx = new SegContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, SHARCParser.RULE_seg);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 340;
	        this.match(SHARCParser.DOT_SEGMENT);
	        this.state = 341;
	        this.seg_qualifier();
	        this.state = 342;
	        this.match(SHARCParser.ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	end_seg() {
	    let localctx = new End_segContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, SHARCParser.RULE_end_seg);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 344;
	        this.match(SHARCParser.DOT_ENDSEG);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	seg_qualifier() {
	    let localctx = new Seg_qualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, SHARCParser.RULE_seg_qualifier);
	    try {
	        this.state = 361;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 346;
	            this.seg_qualifier1();
	            this.state = 349;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	            if(la_===1) {
	                this.state = 347;
	                this.seg_qualifier2();

	            } else if(la_===2) {
	                this.state = 348;
	                this.seg_qualifier3();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 351;
	            this.seg_qualifier2();
	            this.state = 354;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	            if(la_===1) {
	                this.state = 352;
	                this.seg_qualifier1();

	            } else if(la_===2) {
	                this.state = 353;
	                this.seg_qualifier3();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 356;
	            this.seg_qualifier3();
	            this.state = 359;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	            if(la_===1) {
	                this.state = 357;
	                this.seg_qualifier1();

	            } else if(la_===2) {
	                this.state = 358;
	                this.seg_qualifier2();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	seg_qualifier1() {
	    let localctx = new Seg_qualifier1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, SHARCParser.RULE_seg_qualifier1);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 363;
	        this.match(SHARCParser.DIV);
	        this.state = 366;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.PM:
	        case SHARCParser.CODE:
	            this.state = 364;
	            this.seg_qualifier_1();
	            break;
	        case SHARCParser.DM:
	        case SHARCParser.DATA:
	        case SHARCParser.DATA64:
	            this.state = 365;
	            this.seg_qualifier_2();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	seg_qualifier2() {
	    let localctx = new Seg_qualifier2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, SHARCParser.RULE_seg_qualifier2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 368;
	        this.match(SHARCParser.DIV);
	        this.state = 369;
	        this.seg_qualifier_3();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	seg_qualifier3() {
	    let localctx = new Seg_qualifier3Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, SHARCParser.RULE_seg_qualifier3);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 371;
	        this.match(SHARCParser.DIV);
	        this.state = 372;
	        this.match(SHARCParser.DMAONLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	seg_qualifier_1() {
	    let localctx = new Seg_qualifier_1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, SHARCParser.RULE_seg_qualifier_1);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 374;
	        _la = this._input.LA(1);
	        if(!(_la===SHARCParser.PM || _la===SHARCParser.CODE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	seg_qualifier_2() {
	    let localctx = new Seg_qualifier_2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, SHARCParser.RULE_seg_qualifier_2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 376;
	        _la = this._input.LA(1);
	        if(!(_la===SHARCParser.DM || _la===SHARCParser.DATA || _la===SHARCParser.DATA64)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	seg_qualifier_3() {
	    let localctx = new Seg_qualifier_3Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, SHARCParser.RULE_seg_qualifier_3);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 378;
	        _la = this._input.LA(1);
	        if(!(((((_la - 395)) & ~0x1f) == 0 && ((1 << (_la - 395)) & ((1 << (SHARCParser.NO_INIT - 395)) | (1 << (SHARCParser.ZERO_INIT - 395)) | (1 << (SHARCParser.RUNTIME_INIT - 395)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt() {
	    let localctx = new StmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, SHARCParser.RULE_stmt);
	    try {
	        this.state = 387;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 380;
	            this.compute();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 381;
	            this.flow_control_exp();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 382;
	            this.imm_mov_exp();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 383;
	            this.misc_exp();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 384;
	            this.declaration();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 385;
	            this.if_compute_mov();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 386;
	            this.compute_mov_exp();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration() {
	    let localctx = new DeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, SHARCParser.RULE_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 389;
	        this.match(SHARCParser.DOT_VAR);
	        this.state = 395;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 390;
	            this.declaration_exp1();
	            break;

	        case 2:
	            this.state = 391;
	            this.declaration_exp2();
	            break;

	        case 3:
	            this.state = 392;
	            this.declaration_exp3();
	            break;

	        case 4:
	            this.state = 393;
	            this.declaration_exp4();
	            break;

	        case 5:
	            this.state = 394;
	            this.declaration_exp5();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration_exp1() {
	    let localctx = new Declaration_exp1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, SHARCParser.RULE_declaration_exp1);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 397;
	        this.match(SHARCParser.ID);
	        this.state = 402;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SHARCParser.COMMA) {
	            this.state = 398;
	            this.match(SHARCParser.COMMA);
	            this.state = 399;
	            this.match(SHARCParser.ID);
	            this.state = 404;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration_exp2() {
	    let localctx = new Declaration_exp2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, SHARCParser.RULE_declaration_exp2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 405;
	        this.match(SHARCParser.EQU);
	        this.state = 406;
	        this.initExpression();
	        this.state = 411;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SHARCParser.COMMA) {
	            this.state = 407;
	            this.match(SHARCParser.COMMA);
	            this.state = 408;
	            this.initExpression();
	            this.state = 413;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration_exp3() {
	    let localctx = new Declaration_exp3Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, SHARCParser.RULE_declaration_exp3);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 414;
	        this.match(SHARCParser.ID);
	        this.state = 415;
	        this.match(SHARCParser.LBRACKET);
	        this.state = 416;
	        this.match(SHARCParser.RBRACKET);
	        this.state = 419;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SHARCParser.EQU) {
	            this.state = 417;
	            this.match(SHARCParser.EQU);
	            this.state = 418;
	            this.declaration_exp_f2();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration_exp4() {
	    let localctx = new Declaration_exp4Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, SHARCParser.RULE_declaration_exp4);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 421;
	        this.match(SHARCParser.ID);
	        this.state = 422;
	        this.match(SHARCParser.LBRACKET);
	        this.state = 423;
	        this.value_exp();
	        this.state = 424;
	        this.match(SHARCParser.RBRACKET);
	        this.state = 427;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SHARCParser.EQU) {
	            this.state = 425;
	            this.match(SHARCParser.EQU);
	            this.state = 426;
	            this.declaration_exp_f2();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration_exp5() {
	    let localctx = new Declaration_exp5Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, SHARCParser.RULE_declaration_exp5);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 429;
	        this.match(SHARCParser.ID);
	        this.state = 430;
	        this.match(SHARCParser.EQU);
	        this.state = 431;
	        this.value_exp();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration_exp_f1() {
	    let localctx = new Declaration_exp_f1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, SHARCParser.RULE_declaration_exp_f1);
	    var _la = 0; // Token type
	    try {
	        this.state = 442;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.CharLiteral:
	        case SHARCParser.INT:
	        case SHARCParser.LENGTH:
	        case SHARCParser.MINUS:
	        case SHARCParser.LPARENTHESE:
	        case SHARCParser.AT:
	        case SHARCParser.ID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 433;
	            this.initExpression();
	            this.state = 438;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SHARCParser.COMMA) {
	                this.state = 434;
	                this.match(SHARCParser.COMMA);
	                this.state = 435;
	                this.initExpression();
	                this.state = 440;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case SHARCParser.StringLiteral:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 441;
	            this.match(SHARCParser.StringLiteral);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration_exp_f2() {
	    let localctx = new Declaration_exp_f2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, SHARCParser.RULE_declaration_exp_f2);
	    try {
	        this.state = 449;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.LBRACE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 444;
	            this.match(SHARCParser.LBRACE);
	            this.state = 445;
	            this.declaration_exp_f1();
	            this.state = 446;
	            this.match(SHARCParser.RBRACE);
	            break;
	        case SHARCParser.StringLiteral:
	        case SHARCParser.CharLiteral:
	        case SHARCParser.INT:
	        case SHARCParser.LENGTH:
	        case SHARCParser.MINUS:
	        case SHARCParser.LPARENTHESE:
	        case SHARCParser.AT:
	        case SHARCParser.ID:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 448;
	            this.declaration_exp_f1();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initExpression() {
	    let localctx = new InitExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, SHARCParser.RULE_initExpression);
	    try {
	        this.state = 453;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.INT:
	        case SHARCParser.LENGTH:
	        case SHARCParser.MINUS:
	        case SHARCParser.LPARENTHESE:
	        case SHARCParser.AT:
	        case SHARCParser.ID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 451;
	            this.value_exp();
	            break;
	        case SHARCParser.CharLiteral:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 452;
	            this.match(SHARCParser.CharLiteral);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	var_addr() {
	    let localctx = new Var_addrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, SHARCParser.RULE_var_addr);
	    try {
	        this.state = 461;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.AT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 455;
	            this.match(SHARCParser.AT);
	            this.state = 456;
	            this.match(SHARCParser.ID);
	            break;
	        case SHARCParser.LENGTH:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 457;
	            this.match(SHARCParser.LENGTH);
	            this.state = 458;
	            this.match(SHARCParser.LPARENTHESE);
	            this.state = 459;
	            this.match(SHARCParser.ID);
	            this.state = 460;
	            this.match(SHARCParser.RPARENTHESE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value_exp() {
	    let localctx = new Value_expContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, SHARCParser.RULE_value_exp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 463;
	        this.value_exp2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value_exp2() {
	    let localctx = new Value_exp2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, SHARCParser.RULE_value_exp2);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 465;
	        this.term();
	        this.state = 470;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 377)) & ~0x1f) == 0 && ((1 << (_la - 377)) & ((1 << (SHARCParser.PLUS - 377)) | (1 << (SHARCParser.MINUS - 377)) | (1 << (SHARCParser.MULT - 377)) | (1 << (SHARCParser.DIV - 377)) | (1 << (SHARCParser.DIV_MOD - 377)) | (1 << (SHARCParser.I_OR - 377)) | (1 << (SHARCParser.I_XOR - 377)))) !== 0)) {
	            this.state = 466;
	            _la = this._input.LA(1);
	            if(!(((((_la - 377)) & ~0x1f) == 0 && ((1 << (_la - 377)) & ((1 << (SHARCParser.PLUS - 377)) | (1 << (SHARCParser.MINUS - 377)) | (1 << (SHARCParser.MULT - 377)) | (1 << (SHARCParser.DIV - 377)) | (1 << (SHARCParser.DIV_MOD - 377)) | (1 << (SHARCParser.I_OR - 377)) | (1 << (SHARCParser.I_XOR - 377)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 467;
	            this.term();
	            this.state = 472;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	term() {
	    let localctx = new TermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, SHARCParser.RULE_term);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 474;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SHARCParser.MINUS) {
	            this.state = 473;
	            localctx.op = this.match(SHARCParser.MINUS);
	        }

	        this.state = 476;
	        this.factor();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	factor() {
	    let localctx = new FactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, SHARCParser.RULE_factor);
	    try {
	        this.state = 483;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.INT:
	        case SHARCParser.LENGTH:
	        case SHARCParser.AT:
	        case SHARCParser.ID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 478;
	            this.atom();
	            break;
	        case SHARCParser.LPARENTHESE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 479;
	            this.match(SHARCParser.LPARENTHESE);
	            this.state = 480;
	            this.value_exp2();
	            this.state = 481;
	            this.match(SHARCParser.RPARENTHESE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atom() {
	    let localctx = new AtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, SHARCParser.RULE_atom);
	    try {
	        this.state = 488;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.INT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 485;
	            this.match(SHARCParser.INT);
	            break;
	        case SHARCParser.LENGTH:
	        case SHARCParser.AT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 486;
	            this.var_addr();
	            break;
	        case SHARCParser.ID:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 487;
	            this.match(SHARCParser.ID);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compute() {
	    let localctx = new ComputeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, SHARCParser.RULE_compute);
	    try {
	        this.state = 495;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 490;
	            this.dual_op();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 491;
	            this.fixpoint_alu_op();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 492;
	            this.floating_point_alu_op();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 493;
	            this.multi_op();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 494;
	            this.shifter_op();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_compute_mov() {
	    let localctx = new If_compute_movContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, SHARCParser.RULE_if_compute_mov);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 497;
	        this.match(SHARCParser.IF);
	        this.state = 498;
	        this.condition();
	        this.state = 499;
	        this.if_compute_mov_exp();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_compute_mov_exp() {
	    let localctx = new If_compute_mov_expContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, SHARCParser.RULE_if_compute_mov_exp);
	    try {
	        this.state = 503;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 501;
	            this.compute_mov_exp();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 502;
	            this.compute();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compute_mov_exp() {
	    let localctx = new Compute_mov_expContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, SHARCParser.RULE_compute_mov_exp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 508;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	        if(la_===1) {
	            this.state = 505;
	            this.compute();
	            this.state = 506;
	            this.match(SHARCParser.COMMA);

	        }
	        this.state = 521;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 510;
	            this.mov_exp_1();
	            break;

	        case 2:
	            this.state = 511;
	            this.mov_exp_3a();
	            break;

	        case 3:
	            this.state = 512;
	            this.mov_exp_3b();
	            break;

	        case 4:
	            this.state = 513;
	            this.mov_exp_3c();
	            break;

	        case 5:
	            this.state = 514;
	            this.mov_exp_3d();
	            break;

	        case 6:
	            this.state = 515;
	            this.mov_exp_4a();
	            break;

	        case 7:
	            this.state = 516;
	            this.mov_exp_4b();
	            break;

	        case 8:
	            this.state = 517;
	            this.mov_exp_4c();
	            break;

	        case 9:
	            this.state = 518;
	            this.mov_exp_4d();
	            break;

	        case 10:
	            this.state = 519;
	            this.mov_exp_5();
	            break;

	        case 11:
	            this.state = 520;
	            this.mov_exp_7();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mov_exp_1() {
	    let localctx = new Mov_exp_1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, SHARCParser.RULE_mov_exp_1);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 523;
	        this.mov_exp_1_1();
	        this.state = 524;
	        this.match(SHARCParser.COMMA);
	        this.state = 525;
	        this.mov_exp_1_2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mov_exp_1_1() {
	    let localctx = new Mov_exp_1_1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, SHARCParser.RULE_mov_exp_1_1);
	    try {
	        this.state = 535;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.DM:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 527;
	            this.mem_addr_dm_ia_mb();
	            this.state = 528;
	            this.match(SHARCParser.EQU);
	            this.state = 529;
	            this.d_reg();
	            break;
	        case SHARCParser.F0:
	        case SHARCParser.F1:
	        case SHARCParser.F2:
	        case SHARCParser.F3:
	        case SHARCParser.F4:
	        case SHARCParser.F5:
	        case SHARCParser.F6:
	        case SHARCParser.F7:
	        case SHARCParser.F8:
	        case SHARCParser.F9:
	        case SHARCParser.F10:
	        case SHARCParser.F11:
	        case SHARCParser.F12:
	        case SHARCParser.F13:
	        case SHARCParser.F14:
	        case SHARCParser.F15:
	        case SHARCParser.R0:
	        case SHARCParser.R1:
	        case SHARCParser.R2:
	        case SHARCParser.R3:
	        case SHARCParser.R4:
	        case SHARCParser.R5:
	        case SHARCParser.R6:
	        case SHARCParser.R7:
	        case SHARCParser.R8:
	        case SHARCParser.R9:
	        case SHARCParser.R10:
	        case SHARCParser.R11:
	        case SHARCParser.R12:
	        case SHARCParser.R13:
	        case SHARCParser.R14:
	        case SHARCParser.R15:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 531;
	            this.d_reg();
	            this.state = 532;
	            this.match(SHARCParser.EQU);
	            this.state = 533;
	            this.mem_addr_dm_ia_mb();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mov_exp_1_2() {
	    let localctx = new Mov_exp_1_2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, SHARCParser.RULE_mov_exp_1_2);
	    try {
	        this.state = 545;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.PM:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 537;
	            this.mem_addr_pm_ic_md();
	            this.state = 538;
	            this.match(SHARCParser.EQU);
	            this.state = 539;
	            this.d_reg();
	            break;
	        case SHARCParser.F0:
	        case SHARCParser.F1:
	        case SHARCParser.F2:
	        case SHARCParser.F3:
	        case SHARCParser.F4:
	        case SHARCParser.F5:
	        case SHARCParser.F6:
	        case SHARCParser.F7:
	        case SHARCParser.F8:
	        case SHARCParser.F9:
	        case SHARCParser.F10:
	        case SHARCParser.F11:
	        case SHARCParser.F12:
	        case SHARCParser.F13:
	        case SHARCParser.F14:
	        case SHARCParser.F15:
	        case SHARCParser.R0:
	        case SHARCParser.R1:
	        case SHARCParser.R2:
	        case SHARCParser.R3:
	        case SHARCParser.R4:
	        case SHARCParser.R5:
	        case SHARCParser.R6:
	        case SHARCParser.R7:
	        case SHARCParser.R8:
	        case SHARCParser.R9:
	        case SHARCParser.R10:
	        case SHARCParser.R11:
	        case SHARCParser.R12:
	        case SHARCParser.R13:
	        case SHARCParser.R14:
	        case SHARCParser.R15:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 541;
	            this.d_reg();
	            this.state = 542;
	            this.match(SHARCParser.EQU);
	            this.state = 543;
	            this.mem_addr_pm_ic_md();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mov_exp_3a() {
	    let localctx = new Mov_exp_3aContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, SHARCParser.RULE_mov_exp_3a);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 549;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.DM:
	            this.state = 547;
	            this.mem_addr_dm_ia_mb();
	            break;
	        case SHARCParser.PM:
	            this.state = 548;
	            this.mem_addr_pm_ic_md();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 551;
	        this.match(SHARCParser.EQU);
	        this.state = 552;
	        this.u_reg();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mov_exp_3b() {
	    let localctx = new Mov_exp_3bContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, SHARCParser.RULE_mov_exp_3b);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 556;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.DM:
	            this.state = 554;
	            this.mem_addr_dm_mb_ia();
	            break;
	        case SHARCParser.PM:
	            this.state = 555;
	            this.mem_addr_pm_md_ic();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 558;
	        this.match(SHARCParser.EQU);
	        this.state = 559;
	        this.u_reg();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mov_exp_3c() {
	    let localctx = new Mov_exp_3cContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, SHARCParser.RULE_mov_exp_3c);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 561;
	        this.u_reg();
	        this.state = 562;
	        this.match(SHARCParser.EQU);
	        this.state = 565;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.DM:
	            this.state = 563;
	            this.mem_addr_dm_ia_mb();
	            break;
	        case SHARCParser.PM:
	            this.state = 564;
	            this.mem_addr_pm_ic_md();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mov_exp_3d() {
	    let localctx = new Mov_exp_3dContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, SHARCParser.RULE_mov_exp_3d);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 567;
	        this.u_reg();
	        this.state = 568;
	        this.match(SHARCParser.EQU);
	        this.state = 571;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.DM:
	            this.state = 569;
	            this.mem_addr_dm_mb_ia();
	            break;
	        case SHARCParser.PM:
	            this.state = 570;
	            this.mem_addr_pm_md_ic();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mov_exp_4a() {
	    let localctx = new Mov_exp_4aContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, SHARCParser.RULE_mov_exp_4a);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 575;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.DM:
	            this.state = 573;
	            this.mem_addr_dm_ia_int();
	            break;
	        case SHARCParser.PM:
	            this.state = 574;
	            this.mem_addr_pm_ic_int();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 577;
	        this.match(SHARCParser.EQU);
	        this.state = 578;
	        this.d_reg();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mov_exp_4b() {
	    let localctx = new Mov_exp_4bContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, SHARCParser.RULE_mov_exp_4b);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 580;
	        this.imm_mov_15a();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mov_exp_4c() {
	    let localctx = new Mov_exp_4cContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, SHARCParser.RULE_mov_exp_4c);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 582;
	        this.d_reg();
	        this.state = 583;
	        this.match(SHARCParser.EQU);
	        this.state = 586;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.DM:
	            this.state = 584;
	            this.mem_addr_dm_ia_int();
	            break;
	        case SHARCParser.PM:
	            this.state = 585;
	            this.mem_addr_pm_ic_int();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mov_exp_4d() {
	    let localctx = new Mov_exp_4dContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, SHARCParser.RULE_mov_exp_4d);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 588;
	        this.imm_mov_15b();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mov_exp_5() {
	    let localctx = new Mov_exp_5Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, SHARCParser.RULE_mov_exp_5);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 590;
	        this.u_reg2();
	        this.state = 591;
	        this.match(SHARCParser.EQU);
	        this.state = 592;
	        this.u_reg();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mov_exp_6a() {
	    let localctx = new Mov_exp_6aContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, SHARCParser.RULE_mov_exp_6a);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 596;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.DM:
	            this.state = 594;
	            this.mem_addr_dm_ia_mb();
	            break;
	        case SHARCParser.PM:
	            this.state = 595;
	            this.mem_addr_pm_ic_md();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 598;
	        this.match(SHARCParser.EQU);
	        this.state = 599;
	        this.d_reg();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mov_exp_6b() {
	    let localctx = new Mov_exp_6bContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, SHARCParser.RULE_mov_exp_6b);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 601;
	        this.d_reg();
	        this.state = 602;
	        this.match(SHARCParser.EQU);
	        this.state = 605;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.DM:
	            this.state = 603;
	            this.mem_addr_dm_ia_mb();
	            break;
	        case SHARCParser.PM:
	            this.state = 604;
	            this.mem_addr_pm_ic_md();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mov_exp_7() {
	    let localctx = new Mov_exp_7Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, SHARCParser.RULE_mov_exp_7);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 607;
	        this.match(SHARCParser.MODIFY);
	        this.state = 620;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 608;
	            this.match(SHARCParser.LPARENTHESE);
	            this.state = 609;
	            this.ia();
	            this.state = 610;
	            this.match(SHARCParser.COMMA);
	            this.state = 611;
	            this.mb();
	            this.state = 612;
	            this.match(SHARCParser.RPARENTHESE);
	            break;

	        case 2:
	            this.state = 614;
	            this.match(SHARCParser.LPARENTHESE);
	            this.state = 615;
	            this.ic();
	            this.state = 616;
	            this.match(SHARCParser.COMMA);
	            this.state = 617;
	            this.md();
	            this.state = 618;
	            this.match(SHARCParser.RPARENTHESE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mem_addr_ia_mb() {
	    let localctx = new Mem_addr_ia_mbContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, SHARCParser.RULE_mem_addr_ia_mb);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 622;
	        this.match(SHARCParser.LPARENTHESE);
	        this.state = 623;
	        this.ia();
	        this.state = 624;
	        this.match(SHARCParser.COMMA);
	        this.state = 625;
	        this.mb();
	        this.state = 626;
	        this.match(SHARCParser.RPARENTHESE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mem_addr_ic_md() {
	    let localctx = new Mem_addr_ic_mdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, SHARCParser.RULE_mem_addr_ic_md);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 628;
	        this.match(SHARCParser.LPARENTHESE);
	        this.state = 629;
	        this.ic();
	        this.state = 630;
	        this.match(SHARCParser.COMMA);
	        this.state = 631;
	        this.md();
	        this.state = 632;
	        this.match(SHARCParser.RPARENTHESE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mem_addr_md_ic() {
	    let localctx = new Mem_addr_md_icContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, SHARCParser.RULE_mem_addr_md_ic);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 634;
	        this.match(SHARCParser.LPARENTHESE);
	        this.state = 635;
	        this.md();
	        this.state = 636;
	        this.match(SHARCParser.COMMA);
	        this.state = 637;
	        this.ic();
	        this.state = 638;
	        this.match(SHARCParser.RPARENTHESE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mem_addr_mb_ia() {
	    let localctx = new Mem_addr_mb_iaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, SHARCParser.RULE_mem_addr_mb_ia);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 640;
	        this.match(SHARCParser.LPARENTHESE);
	        this.state = 641;
	        this.mb();
	        this.state = 642;
	        this.match(SHARCParser.COMMA);
	        this.state = 643;
	        this.ia();
	        this.state = 644;
	        this.match(SHARCParser.RPARENTHESE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mem_addr_ia_int() {
	    let localctx = new Mem_addr_ia_intContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, SHARCParser.RULE_mem_addr_ia_int);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 646;
	        this.match(SHARCParser.LPARENTHESE);
	        this.state = 647;
	        this.ia();
	        this.state = 648;
	        this.match(SHARCParser.COMMA);
	        this.state = 649;
	        this.value_exp();
	        this.state = 650;
	        this.match(SHARCParser.RPARENTHESE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mem_addr_ic_int() {
	    let localctx = new Mem_addr_ic_intContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, SHARCParser.RULE_mem_addr_ic_int);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 652;
	        this.match(SHARCParser.LPARENTHESE);
	        this.state = 653;
	        this.ic();
	        this.state = 654;
	        this.match(SHARCParser.COMMA);
	        this.state = 655;
	        this.value_exp();
	        this.state = 656;
	        this.match(SHARCParser.RPARENTHESE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mem_addr_int_ia() {
	    let localctx = new Mem_addr_int_iaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, SHARCParser.RULE_mem_addr_int_ia);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 658;
	        this.match(SHARCParser.LPARENTHESE);
	        this.state = 659;
	        this.value_exp();
	        this.state = 660;
	        this.match(SHARCParser.COMMA);
	        this.state = 661;
	        this.ia();
	        this.state = 662;
	        this.match(SHARCParser.RPARENTHESE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mem_addr_int_ic() {
	    let localctx = new Mem_addr_int_icContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, SHARCParser.RULE_mem_addr_int_ic);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 664;
	        this.match(SHARCParser.LPARENTHESE);
	        this.state = 665;
	        this.value_exp();
	        this.state = 666;
	        this.match(SHARCParser.COMMA);
	        this.state = 667;
	        this.ic();
	        this.state = 668;
	        this.match(SHARCParser.RPARENTHESE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mem_addr_int() {
	    let localctx = new Mem_addr_intContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, SHARCParser.RULE_mem_addr_int);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mem_addr_int_() {
	    let localctx = new Mem_addr_int_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, SHARCParser.RULE_mem_addr_int_);
	    var _la = 0; // Token type
	    try {
	        this.state = 677;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 672;
	            this.atom();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 673;
	            this.atom();
	            this.state = 674;
	            _la = this._input.LA(1);
	            if(!(_la===SHARCParser.PLUS || _la===SHARCParser.MINUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 675;
	            this.atom();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mem_addr_dm_ia_mb() {
	    let localctx = new Mem_addr_dm_ia_mbContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, SHARCParser.RULE_mem_addr_dm_ia_mb);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 679;
	        this.match(SHARCParser.DM);
	        this.state = 680;
	        this.mem_addr_ia_mb();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mem_addr_pm_ic_md() {
	    let localctx = new Mem_addr_pm_ic_mdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, SHARCParser.RULE_mem_addr_pm_ic_md);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 682;
	        this.match(SHARCParser.PM);
	        this.state = 683;
	        this.mem_addr_ic_md();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mem_addr_dm_mb_ia() {
	    let localctx = new Mem_addr_dm_mb_iaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, SHARCParser.RULE_mem_addr_dm_mb_ia);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 685;
	        this.match(SHARCParser.DM);
	        this.state = 686;
	        this.mem_addr_mb_ia();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mem_addr_pm_md_ic() {
	    let localctx = new Mem_addr_pm_md_icContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, SHARCParser.RULE_mem_addr_pm_md_ic);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 688;
	        this.match(SHARCParser.PM);
	        this.state = 689;
	        this.mem_addr_md_ic();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mem_addr_dm_ia_int() {
	    let localctx = new Mem_addr_dm_ia_intContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, SHARCParser.RULE_mem_addr_dm_ia_int);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 691;
	        this.match(SHARCParser.DM);
	        this.state = 692;
	        this.mem_addr_ia_int();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mem_addr_pm_ic_int() {
	    let localctx = new Mem_addr_pm_ic_intContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, SHARCParser.RULE_mem_addr_pm_ic_int);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 694;
	        this.match(SHARCParser.PM);
	        this.state = 695;
	        this.mem_addr_ic_int();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mem_addr_dm_int_ia() {
	    let localctx = new Mem_addr_dm_int_iaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, SHARCParser.RULE_mem_addr_dm_int_ia);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 697;
	        this.match(SHARCParser.DM);
	        this.state = 698;
	        this.mem_addr_int_ia();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mem_addr_pm_int_ic() {
	    let localctx = new Mem_addr_pm_int_icContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, SHARCParser.RULE_mem_addr_pm_int_ic);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 700;
	        this.match(SHARCParser.PM);
	        this.state = 701;
	        this.mem_addr_int_ic();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mem_addr_dm_int() {
	    let localctx = new Mem_addr_dm_intContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, SHARCParser.RULE_mem_addr_dm_int);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 703;
	        this.match(SHARCParser.DM);
	        this.state = 704;
	        this.mem_addr_int();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mem_addr_pm_int() {
	    let localctx = new Mem_addr_pm_intContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, SHARCParser.RULE_mem_addr_pm_int);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 706;
	        this.match(SHARCParser.PM);
	        this.state = 707;
	        this.mem_addr_int();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixpoint_alu_op() {
	    let localctx = new Fixpoint_alu_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, SHARCParser.RULE_fixpoint_alu_op);
	    try {
	        this.state = 720;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.R0:
	        case SHARCParser.R1:
	        case SHARCParser.R2:
	        case SHARCParser.R3:
	        case SHARCParser.R4:
	        case SHARCParser.R5:
	        case SHARCParser.R6:
	        case SHARCParser.R7:
	        case SHARCParser.R8:
	        case SHARCParser.R9:
	        case SHARCParser.R10:
	        case SHARCParser.R11:
	        case SHARCParser.R12:
	        case SHARCParser.R13:
	        case SHARCParser.R14:
	        case SHARCParser.R15:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 709;
	            this.r_reg();
	            this.state = 710;
	            this.match(SHARCParser.EQU);
	            this.state = 711;
	            this.r_exp();
	            break;
	        case SHARCParser.COMP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 713;
	            this.match(SHARCParser.COMP);
	            this.state = 714;
	            this.match(SHARCParser.LPARENTHESE);
	            this.state = 715;
	            this.r_reg();
	            this.state = 716;
	            this.match(SHARCParser.COMMA);
	            this.state = 717;
	            this.r_reg();
	            this.state = 718;
	            this.match(SHARCParser.RPARENTHESE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	r_exp() {
	    let localctx = new R_expContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, SHARCParser.RULE_r_exp);
	    var _la = 0; // Token type
	    try {
	        this.state = 821;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 722;
	            this.r_reg();
	            this.state = 723;
	            this.add_or_sub();
	            this.state = 724;
	            this.r_reg();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 726;
	            this.r_reg();
	            this.state = 727;
	            this.match(SHARCParser.PLUS);
	            this.state = 728;
	            this.r_reg();
	            this.state = 729;
	            this.match(SHARCParser.PLUS);
	            this.state = 730;
	            this.match(SHARCParser.CI);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 732;
	            this.r_reg();
	            this.state = 733;
	            this.match(SHARCParser.PLUS);
	            this.state = 734;
	            this.r_reg();
	            this.state = 735;
	            this.match(SHARCParser.PLUS);
	            this.state = 736;
	            this.match(SHARCParser.CI);
	            this.state = 737;
	            this.match(SHARCParser.MINUS);
	            this.state = 738;
	            this.match(SHARCParser.INT);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 740;
	            this.match(SHARCParser.LPARENTHESE);
	            this.state = 741;
	            this.r_reg();
	            this.state = 742;
	            this.match(SHARCParser.PLUS);
	            this.state = 743;
	            this.r_reg();
	            this.state = 744;
	            this.match(SHARCParser.RPARENTHESE);
	            this.state = 745;
	            this.match(SHARCParser.DIV);
	            this.state = 746;
	            this.match(SHARCParser.INT);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 748;
	            this.r_reg();
	            this.state = 749;
	            this.match(SHARCParser.PLUS);
	            this.state = 750;
	            this.match(SHARCParser.CI);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 752;
	            this.r_reg();
	            this.state = 753;
	            this.match(SHARCParser.PLUS);
	            this.state = 754;
	            this.match(SHARCParser.CI);
	            this.state = 755;
	            this.match(SHARCParser.MINUS);
	            this.state = 756;
	            this.match(SHARCParser.INT);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 758;
	            this.r_reg();
	            this.state = 759;
	            this.match(SHARCParser.PLUS);
	            this.state = 760;
	            this.match(SHARCParser.INT);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 762;
	            this.r_reg();
	            this.state = 763;
	            this.match(SHARCParser.MINUS);
	            this.state = 764;
	            this.match(SHARCParser.INT);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 766;
	            this.match(SHARCParser.MINUS);
	            this.state = 767;
	            this.r_reg();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 768;
	            this.match(SHARCParser.ABS);
	            this.state = 769;
	            this.r_reg();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 770;
	            this.match(SHARCParser.PASS);
	            this.state = 771;
	            this.r_reg();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 772;
	            this.r_reg();
	            this.state = 773;
	            this.match(SHARCParser.AND);
	            this.state = 774;
	            this.r_reg();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 776;
	            this.r_reg();
	            this.state = 777;
	            this.match(SHARCParser.OR);
	            this.state = 778;
	            this.r_reg();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 780;
	            this.r_reg();
	            this.state = 781;
	            this.match(SHARCParser.XOR);
	            this.state = 782;
	            this.r_reg();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 784;
	            this.match(SHARCParser.NOT);
	            this.state = 785;
	            this.r_reg();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 786;
	            this.match(SHARCParser.MIN);
	            this.state = 787;
	            this.match(SHARCParser.LPARENTHESE);
	            this.state = 788;
	            this.r_reg();
	            this.state = 789;
	            this.match(SHARCParser.COMMA);
	            this.state = 790;
	            this.r_reg();
	            this.state = 791;
	            this.match(SHARCParser.RPARENTHESE);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 793;
	            this.match(SHARCParser.MAX);
	            this.state = 794;
	            this.match(SHARCParser.LPARENTHESE);
	            this.state = 795;
	            this.r_reg();
	            this.state = 796;
	            this.match(SHARCParser.COMMA);
	            this.state = 797;
	            this.r_reg();
	            this.state = 798;
	            this.match(SHARCParser.RPARENTHESE);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 800;
	            this.match(SHARCParser.CLIP);
	            this.state = 801;
	            this.r_reg();
	            this.state = 802;
	            this.match(SHARCParser.BY);
	            this.state = 803;
	            this.r_reg();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 805;
	            this.match(SHARCParser.MANT);
	            this.state = 806;
	            this.f_reg();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 807;
	            this.match(SHARCParser.LOGB);
	            this.state = 808;
	            this.f_reg();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 809;
	            this.match(SHARCParser.FIX);
	            this.state = 810;
	            this.f_reg();
	            this.state = 813;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SHARCParser.BY) {
	                this.state = 811;
	                this.match(SHARCParser.BY);
	                this.state = 812;
	                this.r_reg();
	            }

	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 815;
	            this.match(SHARCParser.TRUNC);
	            this.state = 816;
	            this.f_reg();
	            this.state = 819;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SHARCParser.BY) {
	                this.state = 817;
	                this.match(SHARCParser.BY);
	                this.state = 818;
	                this.r_reg();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	floating_point_alu_op() {
	    let localctx = new Floating_point_alu_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, SHARCParser.RULE_floating_point_alu_op);
	    try {
	        this.state = 834;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.F0:
	        case SHARCParser.F1:
	        case SHARCParser.F2:
	        case SHARCParser.F3:
	        case SHARCParser.F4:
	        case SHARCParser.F5:
	        case SHARCParser.F6:
	        case SHARCParser.F7:
	        case SHARCParser.F8:
	        case SHARCParser.F9:
	        case SHARCParser.F10:
	        case SHARCParser.F11:
	        case SHARCParser.F12:
	        case SHARCParser.F13:
	        case SHARCParser.F14:
	        case SHARCParser.F15:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 823;
	            this.f_reg();
	            this.state = 824;
	            this.match(SHARCParser.EQU);
	            this.state = 825;
	            this.f_exp();
	            break;
	        case SHARCParser.COMP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 827;
	            this.match(SHARCParser.COMP);
	            this.state = 828;
	            this.match(SHARCParser.LPARENTHESE);
	            this.state = 829;
	            this.f_reg();
	            this.state = 830;
	            this.match(SHARCParser.COMMA);
	            this.state = 831;
	            this.f_reg();
	            this.state = 832;
	            this.match(SHARCParser.RPARENTHESE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	f_exp() {
	    let localctx = new F_expContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, SHARCParser.RULE_f_exp);
	    var _la = 0; // Token type
	    try {
	        this.state = 916;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 836;
	            this.f_reg();
	            this.state = 837;
	            this.match(SHARCParser.PLUS);
	            this.state = 838;
	            this.f_reg();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 840;
	            this.f_reg();
	            this.state = 841;
	            this.match(SHARCParser.MINUS);
	            this.state = 842;
	            this.f_reg();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 844;
	            this.match(SHARCParser.ABS);
	            this.state = 845;
	            this.match(SHARCParser.LPARENTHESE);
	            this.state = 846;
	            this.f_reg();
	            this.state = 847;
	            this.match(SHARCParser.PLUS);
	            this.state = 848;
	            this.f_reg();
	            this.state = 849;
	            this.match(SHARCParser.RPARENTHESE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 851;
	            this.match(SHARCParser.ABS);
	            this.state = 852;
	            this.match(SHARCParser.LPARENTHESE);
	            this.state = 853;
	            this.f_reg();
	            this.state = 854;
	            this.match(SHARCParser.MINUS);
	            this.state = 855;
	            this.f_reg();
	            this.state = 856;
	            this.match(SHARCParser.RPARENTHESE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 858;
	            this.match(SHARCParser.LPARENTHESE);
	            this.state = 859;
	            this.f_reg();
	            this.state = 860;
	            this.match(SHARCParser.PLUS);
	            this.state = 861;
	            this.f_reg();
	            this.state = 862;
	            this.match(SHARCParser.RPARENTHESE);
	            this.state = 863;
	            this.match(SHARCParser.DIV);
	            this.state = 864;
	            this.match(SHARCParser.INT);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 866;
	            this.match(SHARCParser.MINUS);
	            this.state = 867;
	            this.f_reg();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 868;
	            this.match(SHARCParser.ABS);
	            this.state = 869;
	            this.f_reg();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 870;
	            this.match(SHARCParser.PASS);
	            this.state = 871;
	            this.f_reg();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 872;
	            this.match(SHARCParser.RND);
	            this.state = 873;
	            this.f_reg();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 874;
	            this.match(SHARCParser.SCALB);
	            this.state = 875;
	            this.f_reg();
	            this.state = 876;
	            this.match(SHARCParser.BY);
	            this.state = 877;
	            this.r_reg();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 879;
	            this.match(SHARCParser.FLOAT);
	            this.state = 880;
	            this.r_reg();
	            this.state = 883;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SHARCParser.BY) {
	                this.state = 881;
	                this.match(SHARCParser.BY);
	                this.state = 882;
	                this.r_reg();
	            }

	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 885;
	            this.match(SHARCParser.RECIPS);
	            this.state = 886;
	            this.f_reg();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 887;
	            this.match(SHARCParser.RSQRTS);
	            this.state = 888;
	            this.f_reg();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 889;
	            this.f_reg();
	            this.state = 890;
	            this.match(SHARCParser.COPYSIGN);
	            this.state = 891;
	            this.f_reg();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 893;
	            this.match(SHARCParser.MIN);
	            this.state = 894;
	            this.match(SHARCParser.LPARENTHESE);
	            this.state = 895;
	            this.f_reg();
	            this.state = 896;
	            this.match(SHARCParser.COMMA);
	            this.state = 897;
	            this.f_reg();
	            this.state = 898;
	            this.match(SHARCParser.RPARENTHESE);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 900;
	            this.match(SHARCParser.MAX);
	            this.state = 901;
	            this.match(SHARCParser.LPARENTHESE);
	            this.state = 902;
	            this.f_reg();
	            this.state = 903;
	            this.match(SHARCParser.COMMA);
	            this.state = 904;
	            this.f_reg();
	            this.state = 905;
	            this.match(SHARCParser.RPARENTHESE);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 907;
	            this.match(SHARCParser.CLIP);
	            this.state = 908;
	            this.f_reg();
	            this.state = 909;
	            this.match(SHARCParser.BY);
	            this.state = 910;
	            this.f_reg();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 912;
	            this.f_reg();
	            this.state = 913;
	            this.match(SHARCParser.MULT);
	            this.state = 914;
	            this.f_reg();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multi_op() {
	    let localctx = new Multi_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, SHARCParser.RULE_multi_op);
	    try {
	        this.state = 945;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 918;
	            this.r_reg();
	            this.state = 919;
	            this.match(SHARCParser.EQU);
	            this.state = 920;
	            this.multi_exp_r();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 922;
	            this.match(SHARCParser.MRF);
	            this.state = 923;
	            this.match(SHARCParser.EQU);
	            this.state = 924;
	            this.multi_exp_mrf();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 925;
	            this.match(SHARCParser.MRB);
	            this.state = 926;
	            this.match(SHARCParser.EQU);
	            this.state = 927;
	            this.multi_exp_mrb();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 928;
	            this.mr();
	            this.state = 929;
	            this.match(SHARCParser.EQU);
	            this.state = 930;
	            this.match(SHARCParser.INT);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 934;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case SHARCParser.MR0F:
	            case SHARCParser.MR1F:
	            case SHARCParser.MR2F:
	                this.state = 932;
	                this.mrf();
	                break;
	            case SHARCParser.MR0B:
	            case SHARCParser.MR1B:
	            case SHARCParser.MR2B:
	                this.state = 933;
	                this.mrb();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 936;
	            this.match(SHARCParser.EQU);
	            this.state = 937;
	            this.r_reg();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 939;
	            this.r_reg();
	            this.state = 940;
	            this.match(SHARCParser.EQU);
	            this.state = 943;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case SHARCParser.MR0F:
	            case SHARCParser.MR1F:
	            case SHARCParser.MR2F:
	                this.state = 941;
	                this.mrf();
	                break;
	            case SHARCParser.MR0B:
	            case SHARCParser.MR1B:
	            case SHARCParser.MR2B:
	                this.state = 942;
	                this.mrb();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multi_r() {
	    let localctx = new Multi_rContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, SHARCParser.RULE_multi_r);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 947;
	        this.r_reg();
	        this.state = 948;
	        this.match(SHARCParser.MULT);
	        this.state = 949;
	        this.r_reg();
	        this.state = 951;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SHARCParser.LPARENTHESE) {
	            this.state = 950;
	            this.multi_mod2();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multi_exp_r() {
	    let localctx = new Multi_exp_rContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, SHARCParser.RULE_multi_exp_r);
	    var _la = 0; // Token type
	    try {
	        this.state = 969;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 953;
	            this.multi_r();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 954;
	            this.mr();
	            this.state = 955;
	            this.add_or_sub();
	            this.state = 956;
	            this.multi_r();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 958;
	            this.match(SHARCParser.SAT);
	            this.state = 959;
	            this.mr();
	            this.state = 961;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SHARCParser.LPARENTHESE) {
	                this.state = 960;
	                this.multi_mod1();
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 963;
	            this.match(SHARCParser.RND);
	            this.state = 964;
	            this.mr();
	            this.state = 966;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SHARCParser.LPARENTHESE) {
	                this.state = 965;
	                this.multi_mod1();
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 968;
	            this.mr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multi_exp_mrf() {
	    let localctx = new Multi_exp_mrfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, SHARCParser.RULE_multi_exp_mrf);
	    var _la = 0; // Token type
	    try {
	        this.state = 986;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.R0:
	        case SHARCParser.R1:
	        case SHARCParser.R2:
	        case SHARCParser.R3:
	        case SHARCParser.R4:
	        case SHARCParser.R5:
	        case SHARCParser.R6:
	        case SHARCParser.R7:
	        case SHARCParser.R8:
	        case SHARCParser.R9:
	        case SHARCParser.R10:
	        case SHARCParser.R11:
	        case SHARCParser.R12:
	        case SHARCParser.R13:
	        case SHARCParser.R14:
	        case SHARCParser.R15:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 971;
	            this.multi_r();
	            break;
	        case SHARCParser.MRF:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 972;
	            this.match(SHARCParser.MRF);
	            this.state = 973;
	            this.add_or_sub();
	            this.state = 974;
	            this.multi_r();
	            break;
	        case SHARCParser.SAT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 976;
	            this.match(SHARCParser.SAT);
	            this.state = 977;
	            this.match(SHARCParser.MRF);
	            this.state = 979;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SHARCParser.LPARENTHESE) {
	                this.state = 978;
	                this.multi_mod1();
	            }

	            break;
	        case SHARCParser.RND:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 981;
	            this.match(SHARCParser.RND);
	            this.state = 982;
	            this.match(SHARCParser.MRF);
	            this.state = 984;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SHARCParser.LPARENTHESE) {
	                this.state = 983;
	                this.multi_mod1();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multi_exp_mrb() {
	    let localctx = new Multi_exp_mrbContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, SHARCParser.RULE_multi_exp_mrb);
	    var _la = 0; // Token type
	    try {
	        this.state = 1003;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.R0:
	        case SHARCParser.R1:
	        case SHARCParser.R2:
	        case SHARCParser.R3:
	        case SHARCParser.R4:
	        case SHARCParser.R5:
	        case SHARCParser.R6:
	        case SHARCParser.R7:
	        case SHARCParser.R8:
	        case SHARCParser.R9:
	        case SHARCParser.R10:
	        case SHARCParser.R11:
	        case SHARCParser.R12:
	        case SHARCParser.R13:
	        case SHARCParser.R14:
	        case SHARCParser.R15:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 988;
	            this.multi_r();
	            break;
	        case SHARCParser.MRB:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 989;
	            this.match(SHARCParser.MRB);
	            this.state = 990;
	            this.add_or_sub();
	            this.state = 991;
	            this.multi_r();
	            break;
	        case SHARCParser.SAT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 993;
	            this.match(SHARCParser.SAT);
	            this.state = 994;
	            this.match(SHARCParser.MRB);
	            this.state = 996;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SHARCParser.LPARENTHESE) {
	                this.state = 995;
	                this.multi_mod1();
	            }

	            break;
	        case SHARCParser.RND:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 998;
	            this.match(SHARCParser.RND);
	            this.state = 999;
	            this.match(SHARCParser.MRB);
	            this.state = 1001;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SHARCParser.LPARENTHESE) {
	                this.state = 1000;
	                this.multi_mod1();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mr() {
	    let localctx = new MrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, SHARCParser.RULE_mr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1005;
	        _la = this._input.LA(1);
	        if(!(_la===SHARCParser.MRB || _la===SHARCParser.MRF)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shifter_op() {
	    let localctx = new Shifter_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, SHARCParser.RULE_shifter_op);
	    try {
	        this.state = 1021;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.R0:
	        case SHARCParser.R1:
	        case SHARCParser.R2:
	        case SHARCParser.R3:
	        case SHARCParser.R4:
	        case SHARCParser.R5:
	        case SHARCParser.R6:
	        case SHARCParser.R7:
	        case SHARCParser.R8:
	        case SHARCParser.R9:
	        case SHARCParser.R10:
	        case SHARCParser.R11:
	        case SHARCParser.R12:
	        case SHARCParser.R13:
	        case SHARCParser.R14:
	        case SHARCParser.R15:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1007;
	            this.r_reg();
	            this.state = 1008;
	            this.match(SHARCParser.EQU);
	            this.state = 1009;
	            this.shifter_exp();
	            break;
	        case SHARCParser.BTST:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1011;
	            this.match(SHARCParser.BTST);
	            this.state = 1012;
	            this.r_reg();
	            this.state = 1013;
	            this.match(SHARCParser.BY);
	            this.state = 1014;
	            this.sec_op();
	            break;
	        case SHARCParser.F0:
	        case SHARCParser.F1:
	        case SHARCParser.F2:
	        case SHARCParser.F3:
	        case SHARCParser.F4:
	        case SHARCParser.F5:
	        case SHARCParser.F6:
	        case SHARCParser.F7:
	        case SHARCParser.F8:
	        case SHARCParser.F9:
	        case SHARCParser.F10:
	        case SHARCParser.F11:
	        case SHARCParser.F12:
	        case SHARCParser.F13:
	        case SHARCParser.F14:
	        case SHARCParser.F15:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1016;
	            this.f_reg();
	            this.state = 1017;
	            this.match(SHARCParser.EQU);
	            this.state = 1018;
	            this.match(SHARCParser.FUNPACK);
	            this.state = 1019;
	            this.r_reg();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shifter_exp() {
	    let localctx = new Shifter_expContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, SHARCParser.RULE_shifter_exp);
	    var _la = 0; // Token type
	    try {
	        this.state = 1105;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1023;
	            this.match(SHARCParser.LSHIFT);
	            this.state = 1024;
	            this.r_reg();
	            this.state = 1025;
	            this.match(SHARCParser.BY);
	            this.state = 1026;
	            this.sec_op();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1028;
	            this.r_reg();
	            this.state = 1029;
	            this.match(SHARCParser.OR);
	            this.state = 1030;
	            this.match(SHARCParser.LSHIFT);
	            this.state = 1031;
	            this.r_reg();
	            this.state = 1032;
	            this.match(SHARCParser.BY);
	            this.state = 1033;
	            this.sec_op();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1035;
	            this.match(SHARCParser.ASHIFT);
	            this.state = 1036;
	            this.r_reg();
	            this.state = 1037;
	            this.match(SHARCParser.BY);
	            this.state = 1038;
	            this.sec_op();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1040;
	            this.r_reg();
	            this.state = 1041;
	            this.match(SHARCParser.OR);
	            this.state = 1042;
	            this.match(SHARCParser.ASHIFT);
	            this.state = 1043;
	            this.r_reg();
	            this.state = 1044;
	            this.match(SHARCParser.BY);
	            this.state = 1045;
	            this.sec_op();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1047;
	            this.match(SHARCParser.ROT);
	            this.state = 1048;
	            this.r_reg();
	            this.state = 1049;
	            this.match(SHARCParser.BY);
	            this.state = 1050;
	            this.sec_op();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1052;
	            this.match(SHARCParser.BCLR);
	            this.state = 1053;
	            this.r_reg();
	            this.state = 1054;
	            this.match(SHARCParser.BY);
	            this.state = 1055;
	            this.sec_op();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1057;
	            this.match(SHARCParser.BSET);
	            this.state = 1058;
	            this.r_reg();
	            this.state = 1059;
	            this.match(SHARCParser.BY);
	            this.state = 1060;
	            this.sec_op();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1062;
	            this.match(SHARCParser.BTGL);
	            this.state = 1063;
	            this.r_reg();
	            this.state = 1064;
	            this.match(SHARCParser.BY);
	            this.state = 1065;
	            this.sec_op();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1067;
	            this.match(SHARCParser.FDEP);
	            this.state = 1068;
	            this.r_reg();
	            this.state = 1069;
	            this.match(SHARCParser.BY);
	            this.state = 1070;
	            this.sec_op2();
	            this.state = 1074;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SHARCParser.LPARENTHESE) {
	                this.state = 1071;
	                this.match(SHARCParser.LPARENTHESE);
	                this.state = 1072;
	                this.match(SHARCParser.SE);
	                this.state = 1073;
	                this.match(SHARCParser.RPARENTHESE);
	            }

	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1076;
	            this.match(SHARCParser.FEXT);
	            this.state = 1077;
	            this.r_reg();
	            this.state = 1078;
	            this.match(SHARCParser.BY);
	            this.state = 1079;
	            this.sec_op2();
	            this.state = 1083;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SHARCParser.LPARENTHESE) {
	                this.state = 1080;
	                this.match(SHARCParser.LPARENTHESE);
	                this.state = 1081;
	                this.match(SHARCParser.SE);
	                this.state = 1082;
	                this.match(SHARCParser.RPARENTHESE);
	            }

	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1085;
	            this.r_reg();
	            this.state = 1086;
	            this.match(SHARCParser.OR);
	            this.state = 1087;
	            this.match(SHARCParser.FDEP);
	            this.state = 1088;
	            this.r_reg();
	            this.state = 1089;
	            this.match(SHARCParser.BY);
	            this.state = 1090;
	            this.sec_op2();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1092;
	            this.match(SHARCParser.EXP);
	            this.state = 1093;
	            this.r_reg();
	            this.state = 1097;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SHARCParser.LPARENTHESE) {
	                this.state = 1094;
	                this.match(SHARCParser.LPARENTHESE);
	                this.state = 1095;
	                this.match(SHARCParser.EX);
	                this.state = 1096;
	                this.match(SHARCParser.RPARENTHESE);
	            }

	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1099;
	            this.match(SHARCParser.LEFTZ);
	            this.state = 1100;
	            this.r_reg();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1101;
	            this.match(SHARCParser.LEFTO);
	            this.state = 1102;
	            this.r_reg();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1103;
	            this.match(SHARCParser.FPACK);
	            this.state = 1104;
	            this.f_reg();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sec_op() {
	    let localctx = new Sec_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, SHARCParser.RULE_sec_op);
	    try {
	        this.state = 1111;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.R0:
	        case SHARCParser.R1:
	        case SHARCParser.R2:
	        case SHARCParser.R3:
	        case SHARCParser.R4:
	        case SHARCParser.R5:
	        case SHARCParser.R6:
	        case SHARCParser.R7:
	        case SHARCParser.R8:
	        case SHARCParser.R9:
	        case SHARCParser.R10:
	        case SHARCParser.R11:
	        case SHARCParser.R12:
	        case SHARCParser.R13:
	        case SHARCParser.R14:
	        case SHARCParser.R15:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1107;
	            this.r_reg();
	            break;
	        case SHARCParser.INT:
	        case SHARCParser.LENGTH:
	        case SHARCParser.AT:
	        case SHARCParser.ID:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1108;
	            this.atom();
	            break;
	        case SHARCParser.MINUS:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1109;
	            this.match(SHARCParser.MINUS);
	            this.state = 1110;
	            this.atom();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sec_op2() {
	    let localctx = new Sec_op2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, SHARCParser.RULE_sec_op2);
	    try {
	        this.state = 1115;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.R0:
	        case SHARCParser.R1:
	        case SHARCParser.R2:
	        case SHARCParser.R3:
	        case SHARCParser.R4:
	        case SHARCParser.R5:
	        case SHARCParser.R6:
	        case SHARCParser.R7:
	        case SHARCParser.R8:
	        case SHARCParser.R9:
	        case SHARCParser.R10:
	        case SHARCParser.R11:
	        case SHARCParser.R12:
	        case SHARCParser.R13:
	        case SHARCParser.R14:
	        case SHARCParser.R15:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1113;
	            this.r_reg();
	            break;
	        case SHARCParser.INT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1114;
	            this.bit_data();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bit_data() {
	    let localctx = new Bit_dataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, SHARCParser.RULE_bit_data);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1117;
	        this.match(SHARCParser.INT);
	        this.state = 1118;
	        this.match(SHARCParser.COLON);
	        this.state = 1119;
	        this.match(SHARCParser.INT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	add_or_sub() {
	    let localctx = new Add_or_subContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, SHARCParser.RULE_add_or_sub);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1121;
	        _la = this._input.LA(1);
	        if(!(_la===SHARCParser.PLUS || _la===SHARCParser.MINUS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dual_op() {
	    let localctx = new Dual_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, SHARCParser.RULE_dual_op);
	    try {
	        this.state = 1125;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1123;
	            this.dual_add_r();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1124;
	            this.parallel_multi();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dual_add_r() {
	    let localctx = new Dual_add_rContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, SHARCParser.RULE_dual_add_r);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1127;
	        this.r_reg();
	        this.state = 1128;
	        this.match(SHARCParser.EQU);
	        this.state = 1129;
	        this.r_reg();
	        this.state = 1130;
	        this.match(SHARCParser.PLUS);
	        this.state = 1131;
	        this.r_reg();
	        this.state = 1132;
	        this.match(SHARCParser.COMMA);
	        this.state = 1133;
	        this.r_reg();
	        this.state = 1134;
	        this.match(SHARCParser.EQU);
	        this.state = 1135;
	        this.r_reg();
	        this.state = 1136;
	        this.match(SHARCParser.MINUS);
	        this.state = 1137;
	        this.r_reg();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parallel_multi() {
	    let localctx = new Parallel_multiContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, SHARCParser.RULE_parallel_multi);
	    try {
	        this.state = 1153;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.MR0B:
	        case SHARCParser.MR0F:
	        case SHARCParser.MR1B:
	        case SHARCParser.MR1F:
	        case SHARCParser.MR2B:
	        case SHARCParser.MR2F:
	        case SHARCParser.MRB:
	        case SHARCParser.MRF:
	        case SHARCParser.R0:
	        case SHARCParser.R1:
	        case SHARCParser.R2:
	        case SHARCParser.R3:
	        case SHARCParser.R4:
	        case SHARCParser.R5:
	        case SHARCParser.R6:
	        case SHARCParser.R7:
	        case SHARCParser.R8:
	        case SHARCParser.R9:
	        case SHARCParser.R10:
	        case SHARCParser.R11:
	        case SHARCParser.R12:
	        case SHARCParser.R13:
	        case SHARCParser.R14:
	        case SHARCParser.R15:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1139;
	            this.multi_op();
	            this.state = 1142; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1140;
	            		this.match(SHARCParser.COMMA);
	            		this.state = 1141;
	            		this.fixpoint_alu_op();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1144; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,68, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        case SHARCParser.COMP:
	        case SHARCParser.F0:
	        case SHARCParser.F1:
	        case SHARCParser.F2:
	        case SHARCParser.F3:
	        case SHARCParser.F4:
	        case SHARCParser.F5:
	        case SHARCParser.F6:
	        case SHARCParser.F7:
	        case SHARCParser.F8:
	        case SHARCParser.F9:
	        case SHARCParser.F10:
	        case SHARCParser.F11:
	        case SHARCParser.F12:
	        case SHARCParser.F13:
	        case SHARCParser.F14:
	        case SHARCParser.F15:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1146;
	            this.floating_point_alu_op();
	            this.state = 1149; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1147;
	            		this.match(SHARCParser.COMMA);
	            		this.state = 1148;
	            		this.floating_point_alu_op();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1151; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,69, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flow_control_exp() {
	    let localctx = new Flow_control_expContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, SHARCParser.RULE_flow_control_exp);
	    try {
	        this.state = 1166;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1155;
	            this.flow_contorl_8();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1156;
	            this.flow_control_9_and_11();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1157;
	            this.flow_control_10();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1158;
	            this.flow_control_8a();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1159;
	            this.flow_control_8b();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1160;
	            this.flow_control_9a();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1161;
	            this.flow_control_9b();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1162;
	            this.flow_control_11a();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1163;
	            this.flow_control_11b();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1164;
	            this.flow_control_12();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1165;
	            this.flow_control_13();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flow_contorl_8() {
	    let localctx = new Flow_contorl_8Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, SHARCParser.RULE_flow_contorl_8);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1168;
	        this.match(SHARCParser.IF);
	        this.state = 1169;
	        this.condition();
	        this.state = 1170;
	        this.flow_contorl_8_exp();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flow_contorl_8_exp() {
	    let localctx = new Flow_contorl_8_expContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, SHARCParser.RULE_flow_contorl_8_exp);
	    try {
	        this.state = 1174;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.JUMP:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1172;
	            this.flow_control_8a();
	            break;
	        case SHARCParser.CALL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1173;
	            this.flow_control_8b();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flow_control_9_and_11() {
	    let localctx = new Flow_control_9_and_11Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, SHARCParser.RULE_flow_control_9_and_11);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1176;
	        this.match(SHARCParser.IF);
	        this.state = 1177;
	        this.condition();
	        this.state = 1178;
	        this.flow_control_9_and_11_exp();
	        this.state = 1179;
	        this.match(SHARCParser.COMMA);
	        this.state = 1180;
	        this.match(SHARCParser.ELSE);
	        this.state = 1181;
	        this.compute();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flow_control_9_and_11_exp() {
	    let localctx = new Flow_control_9_and_11_expContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, SHARCParser.RULE_flow_control_9_and_11_exp);
	    try {
	        this.state = 1187;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.JUMP:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1183;
	            this.flow_control_9a();
	            break;
	        case SHARCParser.CALL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1184;
	            this.flow_control_9b();
	            break;
	        case SHARCParser.RTS:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1185;
	            this.flow_control_11a();
	            break;
	        case SHARCParser.RTI:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1186;
	            this.flow_control_11b();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flow_control_10() {
	    let localctx = new Flow_control_10Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, SHARCParser.RULE_flow_control_10);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1189;
	        this.match(SHARCParser.IF);
	        this.state = 1190;
	        this.condition();
	        this.state = 1191;
	        this.match(SHARCParser.JUMP);
	        this.state = 1192;
	        this.flow_control_10_frag();
	        this.state = 1193;
	        this.match(SHARCParser.COMMA);
	        this.state = 1194;
	        this.match(SHARCParser.ELSE);
	        this.state = 1198;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        if(la_===1) {
	            this.state = 1195;
	            this.compute();
	            this.state = 1196;
	            this.match(SHARCParser.COMMA);

	        }
	        this.state = 1200;
	        this.mov_exp_1_1();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flow_control_10_frag() {
	    let localctx = new Flow_control_10_fragContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, SHARCParser.RULE_flow_control_10_frag);
	    try {
	        this.state = 1204;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1202;
	            this.mem_addr_md_ic();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1203;
	            this.jump_addr_pc();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flow_control_12() {
	    let localctx = new Flow_control_12Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, SHARCParser.RULE_flow_control_12);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1206;
	        this.match(SHARCParser.LCNTR);
	        this.state = 1207;
	        this.match(SHARCParser.EQU);
	        this.state = 1208;
	        this.lcntr_v();

	        this.state = 1209;
	        this.match(SHARCParser.COMMA);
	        this.state = 1210;
	        this.match(SHARCParser.DO);
	        this.state = 1211;
	        this.jump_addr_int_or_pc();
	        this.state = 1212;
	        this.match(SHARCParser.UNTIL);
	        this.state = 1213;
	        this.match(SHARCParser.LCE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lcntr_v() {
	    let localctx = new Lcntr_vContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, SHARCParser.RULE_lcntr_v);
	    try {
	        this.state = 1217;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.INT:
	        case SHARCParser.LENGTH:
	        case SHARCParser.MINUS:
	        case SHARCParser.LPARENTHESE:
	        case SHARCParser.AT:
	        case SHARCParser.ID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1215;
	            this.value_exp();
	            break;
	        case SHARCParser.ASTAT:
	        case SHARCParser.B0:
	        case SHARCParser.B1:
	        case SHARCParser.B2:
	        case SHARCParser.B3:
	        case SHARCParser.B4:
	        case SHARCParser.B5:
	        case SHARCParser.B6:
	        case SHARCParser.B7:
	        case SHARCParser.B8:
	        case SHARCParser.B9:
	        case SHARCParser.B10:
	        case SHARCParser.B11:
	        case SHARCParser.B12:
	        case SHARCParser.B13:
	        case SHARCParser.B14:
	        case SHARCParser.B15:
	        case SHARCParser.CURLCNTR:
	        case SHARCParser.DADDR:
	        case SHARCParser.F0:
	        case SHARCParser.F1:
	        case SHARCParser.F2:
	        case SHARCParser.F3:
	        case SHARCParser.F4:
	        case SHARCParser.F5:
	        case SHARCParser.F6:
	        case SHARCParser.F7:
	        case SHARCParser.F8:
	        case SHARCParser.F9:
	        case SHARCParser.F10:
	        case SHARCParser.F11:
	        case SHARCParser.F12:
	        case SHARCParser.F13:
	        case SHARCParser.F14:
	        case SHARCParser.F15:
	        case SHARCParser.FADDR:
	        case SHARCParser.I0:
	        case SHARCParser.I1:
	        case SHARCParser.I2:
	        case SHARCParser.I3:
	        case SHARCParser.I4:
	        case SHARCParser.I5:
	        case SHARCParser.I6:
	        case SHARCParser.I7:
	        case SHARCParser.I8:
	        case SHARCParser.I9:
	        case SHARCParser.I10:
	        case SHARCParser.I11:
	        case SHARCParser.I12:
	        case SHARCParser.I13:
	        case SHARCParser.I14:
	        case SHARCParser.I15:
	        case SHARCParser.IMASK:
	        case SHARCParser.IMASKP:
	        case SHARCParser.IRPTL:
	        case SHARCParser.L0:
	        case SHARCParser.L1:
	        case SHARCParser.L2:
	        case SHARCParser.L3:
	        case SHARCParser.L4:
	        case SHARCParser.L5:
	        case SHARCParser.L6:
	        case SHARCParser.L7:
	        case SHARCParser.L8:
	        case SHARCParser.L9:
	        case SHARCParser.L10:
	        case SHARCParser.L11:
	        case SHARCParser.L12:
	        case SHARCParser.L13:
	        case SHARCParser.L14:
	        case SHARCParser.L15:
	        case SHARCParser.LADDR:
	        case SHARCParser.LCNTR:
	        case SHARCParser.M0:
	        case SHARCParser.M1:
	        case SHARCParser.M2:
	        case SHARCParser.M3:
	        case SHARCParser.M4:
	        case SHARCParser.M5:
	        case SHARCParser.M6:
	        case SHARCParser.M7:
	        case SHARCParser.M8:
	        case SHARCParser.M9:
	        case SHARCParser.M10:
	        case SHARCParser.M11:
	        case SHARCParser.M12:
	        case SHARCParser.M13:
	        case SHARCParser.M14:
	        case SHARCParser.M15:
	        case SHARCParser.MODE1:
	        case SHARCParser.MODE2:
	        case SHARCParser.PC:
	        case SHARCParser.PCSTK:
	        case SHARCParser.PCSTKP:
	        case SHARCParser.PX:
	        case SHARCParser.PX1:
	        case SHARCParser.PX2:
	        case SHARCParser.R0:
	        case SHARCParser.R1:
	        case SHARCParser.R2:
	        case SHARCParser.R3:
	        case SHARCParser.R4:
	        case SHARCParser.R5:
	        case SHARCParser.R6:
	        case SHARCParser.R7:
	        case SHARCParser.R8:
	        case SHARCParser.R9:
	        case SHARCParser.R10:
	        case SHARCParser.R11:
	        case SHARCParser.R12:
	        case SHARCParser.R13:
	        case SHARCParser.R14:
	        case SHARCParser.R15:
	        case SHARCParser.STKY:
	        case SHARCParser.TCOUNT:
	        case SHARCParser.TPERIOD:
	        case SHARCParser.USTAT1:
	        case SHARCParser.USTAT2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1216;
	            this.u_reg();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flow_control_13() {
	    let localctx = new Flow_control_13Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, SHARCParser.RULE_flow_control_13);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1219;
	        this.match(SHARCParser.DO);
	        this.state = 1220;
	        this.jump_addr_int_or_pc();
	        this.state = 1221;
	        this.match(SHARCParser.UNTIL);
	        this.state = 1222;
	        this.condition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flow_control_8a() {
	    let localctx = new Flow_control_8aContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, SHARCParser.RULE_flow_control_8a);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1224;
	        this.match(SHARCParser.JUMP);
	        this.state = 1225;
	        this.jump_addr_int();
	        this.state = 1227;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SHARCParser.LPARENTHESE) {
	            this.state = 1226;
	            this.jump_modifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flow_control_8b() {
	    let localctx = new Flow_control_8bContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, SHARCParser.RULE_flow_control_8b);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1229;
	        this.match(SHARCParser.CALL);
	        this.state = 1230;
	        this.jump_addr_int();
	        this.state = 1232;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SHARCParser.LPARENTHESE) {
	            this.state = 1231;
	            this.jump_modifier2();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flow_control_9a() {
	    let localctx = new Flow_control_9aContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, SHARCParser.RULE_flow_control_9a);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1234;
	        this.match(SHARCParser.JUMP);
	        this.state = 1235;
	        this.flow_control_10_frag();
	        this.state = 1237;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SHARCParser.LPARENTHESE) {
	            this.state = 1236;
	            this.jump_modifier();
	        }

	        this.state = 1241;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	        if(la_===1) {
	            this.state = 1239;
	            this.match(SHARCParser.COMMA);
	            this.state = 1240;
	            this.compute();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flow_control_9b() {
	    let localctx = new Flow_control_9bContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, SHARCParser.RULE_flow_control_9b);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1243;
	        this.match(SHARCParser.CALL);
	        this.state = 1244;
	        this.flow_control_10_frag();
	        this.state = 1246;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SHARCParser.LPARENTHESE) {
	            this.state = 1245;
	            this.jump_modifier2();
	        }

	        this.state = 1250;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        if(la_===1) {
	            this.state = 1248;
	            this.match(SHARCParser.COMMA);
	            this.state = 1249;
	            this.compute();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flow_control_11a() {
	    let localctx = new Flow_control_11aContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, SHARCParser.RULE_flow_control_11a);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1252;
	        this.match(SHARCParser.RTS);
	        this.state = 1254;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SHARCParser.LPARENTHESE) {
	            this.state = 1253;
	            this.jump_modifier3();
	        }

	        this.state = 1258;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
	        if(la_===1) {
	            this.state = 1256;
	            this.match(SHARCParser.COMMA);
	            this.state = 1257;
	            this.compute();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flow_control_11b() {
	    let localctx = new Flow_control_11bContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, SHARCParser.RULE_flow_control_11b);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1260;
	        this.match(SHARCParser.RTI);
	        this.state = 1262;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SHARCParser.LPARENTHESE) {
	            this.state = 1261;
	            this.jump_modifier2();
	        }

	        this.state = 1266;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	        if(la_===1) {
	            this.state = 1264;
	            this.match(SHARCParser.COMMA);
	            this.state = 1265;
	            this.compute();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jump_addr_int_or_pc() {
	    let localctx = new Jump_addr_int_or_pcContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, SHARCParser.RULE_jump_addr_int_or_pc);
	    try {
	        this.state = 1270;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1268;
	            this.jump_addr_int();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1269;
	            this.jump_addr_pc();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jump_addr_md_or_pc() {
	    let localctx = new Jump_addr_md_or_pcContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, SHARCParser.RULE_jump_addr_md_or_pc);
	    try {
	        this.state = 1274;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1272;
	            this.mem_addr_md_ic();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1273;
	            this.jump_addr_pc();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jump_addr_pc() {
	    let localctx = new Jump_addr_pcContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, SHARCParser.RULE_jump_addr_pc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1276;
	        this.match(SHARCParser.LPARENTHESE);
	        this.state = 1277;
	        this.match(SHARCParser.PC);
	        this.state = 1278;
	        this.match(SHARCParser.COMMA);
	        this.state = 1279;
	        this.value_exp();
	        this.state = 1280;
	        this.match(SHARCParser.RPARENTHESE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jump_addr_int() {
	    let localctx = new Jump_addr_intContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, SHARCParser.RULE_jump_addr_int);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1282;
	        this.value_exp();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jump_modifier() {
	    let localctx = new Jump_modifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, SHARCParser.RULE_jump_modifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1284;
	        this.jump_modifier_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jump_modifier_() {
	    let localctx = new Jump_modifier_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, SHARCParser.RULE_jump_modifier_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1286;
	        this.match(SHARCParser.LPARENTHESE);
	        this.state = 1290;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.DB:
	            this.state = 1287;
	            this.jump_modifier_1();
	            break;
	        case SHARCParser.LA:
	            this.state = 1288;
	            this.match(SHARCParser.LA);
	            break;
	        case SHARCParser.CI:
	            this.state = 1289;
	            this.match(SHARCParser.CI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1292;
	        this.match(SHARCParser.RPARENTHESE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jump_modifier_1() {
	    let localctx = new Jump_modifier_1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, SHARCParser.RULE_jump_modifier_1);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1294;
	        this.match(SHARCParser.DB);
	        this.state = 1297;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SHARCParser.COMMA) {
	            this.state = 1295;
	            this.match(SHARCParser.COMMA);
	            this.state = 1296;
	            _la = this._input.LA(1);
	            if(!(_la===SHARCParser.CI || _la===SHARCParser.LA)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jump_modifier2() {
	    let localctx = new Jump_modifier2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, SHARCParser.RULE_jump_modifier2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1299;
	        this.match(SHARCParser.LPARENTHESE);
	        this.state = 1300;
	        this.match(SHARCParser.DB);
	        this.state = 1301;
	        this.match(SHARCParser.RPARENTHESE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jump_modifier3() {
	    let localctx = new Jump_modifier3Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, SHARCParser.RULE_jump_modifier3);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1303;
	        this.jump_modifier3_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jump_modifier3_() {
	    let localctx = new Jump_modifier3_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, SHARCParser.RULE_jump_modifier3_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1305;
	        this.match(SHARCParser.LPARENTHESE);
	        this.state = 1308;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.DB:
	            this.state = 1306;
	            this.jump_modifier3_1();
	            break;
	        case SHARCParser.LR:
	            this.state = 1307;
	            this.match(SHARCParser.LR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1310;
	        this.match(SHARCParser.RPARENTHESE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jump_modifier3_1() {
	    let localctx = new Jump_modifier3_1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, SHARCParser.RULE_jump_modifier3_1);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1312;
	        this.match(SHARCParser.DB);
	        this.state = 1315;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SHARCParser.COMMA) {
	            this.state = 1313;
	            this.match(SHARCParser.COMMA);
	            this.state = 1314;
	            this.match(SHARCParser.LR);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	imm_mov_exp() {
	    let localctx = new Imm_mov_expContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, SHARCParser.RULE_imm_mov_exp);
	    try {
	        this.state = 1321;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1317;
	            this.imm_mov_14a();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1318;
	            this.imm_mov_14b();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1319;
	            this.imm_mov_16();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1320;
	            this.imm_mov_17();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	imm_mov_14a() {
	    let localctx = new Imm_mov_14aContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, SHARCParser.RULE_imm_mov_14a);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1325;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.DM:
	            this.state = 1323;
	            this.mem_addr_dm_int();
	            break;
	        case SHARCParser.PM:
	            this.state = 1324;
	            this.mem_addr_pm_int();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1327;
	        this.match(SHARCParser.EQU);
	        this.state = 1328;
	        this.u_reg();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	imm_mov_15a() {
	    let localctx = new Imm_mov_15aContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, SHARCParser.RULE_imm_mov_15a);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1332;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.DM:
	            this.state = 1330;
	            this.mem_addr_dm_int_ia();
	            break;
	        case SHARCParser.PM:
	            this.state = 1331;
	            this.mem_addr_pm_int_ic();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1334;
	        this.match(SHARCParser.EQU);
	        this.state = 1335;
	        this.u_reg();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	imm_mov_14b() {
	    let localctx = new Imm_mov_14bContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, SHARCParser.RULE_imm_mov_14b);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1337;
	        this.u_reg();
	        this.state = 1338;
	        this.match(SHARCParser.EQU);
	        this.state = 1341;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.DM:
	            this.state = 1339;
	            this.mem_addr_dm_int();
	            break;
	        case SHARCParser.PM:
	            this.state = 1340;
	            this.mem_addr_pm_int();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	imm_mov_15b() {
	    let localctx = new Imm_mov_15bContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, SHARCParser.RULE_imm_mov_15b);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1343;
	        this.u_reg();
	        this.state = 1344;
	        this.match(SHARCParser.EQU);
	        this.state = 1347;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.DM:
	            this.state = 1345;
	            this.mem_addr_dm_int_ia();
	            break;
	        case SHARCParser.PM:
	            this.state = 1346;
	            this.mem_addr_pm_int_ic();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	imm_mov_16() {
	    let localctx = new Imm_mov_16Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, SHARCParser.RULE_imm_mov_16);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1351;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.DM:
	            this.state = 1349;
	            this.mem_addr_dm_ia_mb();
	            break;
	        case SHARCParser.PM:
	            this.state = 1350;
	            this.mem_addr_pm_ic_md();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1353;
	        this.match(SHARCParser.EQU);
	        this.state = 1354;
	        this.value_exp();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	imm_mov_17() {
	    let localctx = new Imm_mov_17Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, SHARCParser.RULE_imm_mov_17);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1356;
	        this.u_reg2();
	        this.state = 1357;
	        this.match(SHARCParser.EQU);
	        this.state = 1358;
	        this.value_exp();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	u_reg2() {
	    let localctx = new U_reg2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, SHARCParser.RULE_u_reg2);
	    try {
	        this.state = 1375;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.F0:
	        case SHARCParser.F1:
	        case SHARCParser.F2:
	        case SHARCParser.F3:
	        case SHARCParser.F4:
	        case SHARCParser.F5:
	        case SHARCParser.F6:
	        case SHARCParser.F7:
	        case SHARCParser.F8:
	        case SHARCParser.F9:
	        case SHARCParser.F10:
	        case SHARCParser.F11:
	        case SHARCParser.F12:
	        case SHARCParser.F13:
	        case SHARCParser.F14:
	        case SHARCParser.F15:
	        case SHARCParser.R0:
	        case SHARCParser.R1:
	        case SHARCParser.R2:
	        case SHARCParser.R3:
	        case SHARCParser.R4:
	        case SHARCParser.R5:
	        case SHARCParser.R6:
	        case SHARCParser.R7:
	        case SHARCParser.R8:
	        case SHARCParser.R9:
	        case SHARCParser.R10:
	        case SHARCParser.R11:
	        case SHARCParser.R12:
	        case SHARCParser.R13:
	        case SHARCParser.R14:
	        case SHARCParser.R15:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1360;
	            this.d_reg();
	            break;
	        case SHARCParser.PC:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1361;
	            this.match(SHARCParser.PC);
	            break;
	        case SHARCParser.PCSTK:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1362;
	            this.match(SHARCParser.PCSTK);
	            break;
	        case SHARCParser.PCSTKP:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1363;
	            this.match(SHARCParser.PCSTKP);
	            break;
	        case SHARCParser.FADDR:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1364;
	            this.match(SHARCParser.FADDR);
	            break;
	        case SHARCParser.DADDR:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1365;
	            this.match(SHARCParser.DADDR);
	            break;
	        case SHARCParser.LADDR:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1366;
	            this.match(SHARCParser.LADDR);
	            break;
	        case SHARCParser.CURLCNTR:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1367;
	            this.match(SHARCParser.CURLCNTR);
	            break;
	        case SHARCParser.B0:
	        case SHARCParser.B1:
	        case SHARCParser.B2:
	        case SHARCParser.B3:
	        case SHARCParser.B4:
	        case SHARCParser.B5:
	        case SHARCParser.B6:
	        case SHARCParser.B7:
	        case SHARCParser.B8:
	        case SHARCParser.B9:
	        case SHARCParser.B10:
	        case SHARCParser.B11:
	        case SHARCParser.B12:
	        case SHARCParser.B13:
	        case SHARCParser.B14:
	        case SHARCParser.B15:
	        case SHARCParser.I0:
	        case SHARCParser.I1:
	        case SHARCParser.I2:
	        case SHARCParser.I3:
	        case SHARCParser.I4:
	        case SHARCParser.I5:
	        case SHARCParser.I6:
	        case SHARCParser.I7:
	        case SHARCParser.I8:
	        case SHARCParser.I9:
	        case SHARCParser.I10:
	        case SHARCParser.I11:
	        case SHARCParser.I12:
	        case SHARCParser.I13:
	        case SHARCParser.I14:
	        case SHARCParser.I15:
	        case SHARCParser.L0:
	        case SHARCParser.L1:
	        case SHARCParser.L2:
	        case SHARCParser.L3:
	        case SHARCParser.L4:
	        case SHARCParser.L5:
	        case SHARCParser.L6:
	        case SHARCParser.L7:
	        case SHARCParser.L8:
	        case SHARCParser.L9:
	        case SHARCParser.L10:
	        case SHARCParser.L11:
	        case SHARCParser.L12:
	        case SHARCParser.L13:
	        case SHARCParser.L14:
	        case SHARCParser.L15:
	        case SHARCParser.M0:
	        case SHARCParser.M1:
	        case SHARCParser.M2:
	        case SHARCParser.M3:
	        case SHARCParser.M4:
	        case SHARCParser.M5:
	        case SHARCParser.M6:
	        case SHARCParser.M7:
	        case SHARCParser.M8:
	        case SHARCParser.M9:
	        case SHARCParser.M10:
	        case SHARCParser.M11:
	        case SHARCParser.M12:
	        case SHARCParser.M13:
	        case SHARCParser.M14:
	        case SHARCParser.M15:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1368;
	            this.dag_reg();
	            break;
	        case SHARCParser.PX1:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1369;
	            this.match(SHARCParser.PX1);
	            break;
	        case SHARCParser.PX2:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1370;
	            this.match(SHARCParser.PX2);
	            break;
	        case SHARCParser.PX:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1371;
	            this.match(SHARCParser.PX);
	            break;
	        case SHARCParser.TPERIOD:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1372;
	            this.match(SHARCParser.TPERIOD);
	            break;
	        case SHARCParser.TCOUNT:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1373;
	            this.match(SHARCParser.TCOUNT);
	            break;
	        case SHARCParser.ASTAT:
	        case SHARCParser.IMASK:
	        case SHARCParser.IMASKP:
	        case SHARCParser.IRPTL:
	        case SHARCParser.MODE1:
	        case SHARCParser.MODE2:
	        case SHARCParser.STKY:
	        case SHARCParser.USTAT1:
	        case SHARCParser.USTAT2:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1374;
	            this.s_reg();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	misc_exp() {
	    let localctx = new Misc_expContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, SHARCParser.RULE_misc_exp);
	    var _la = 0; // Token type
	    try {
	        this.state = 1420;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1377;
	            this.match(SHARCParser.BIT);
	            this.state = 1378;
	            _la = this._input.LA(1);
	            if(!(_la===SHARCParser.CLR || ((((_la - 326)) & ~0x1f) == 0 && ((1 << (_la - 326)) & ((1 << (SHARCParser.SET - 326)) | (1 << (SHARCParser.TGL - 326)) | (1 << (SHARCParser.TST - 326)))) !== 0) || _la===SHARCParser.XOR)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1379;
	            this.s_reg();
	            this.state = 1380;
	            this.value_exp();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1382;
	            this.match(SHARCParser.BITREV);
	            this.state = 1385;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1383;
	                this.mem_addr_ia_int();
	                break;

	            case 2:
	                this.state = 1384;
	                this.mem_addr_ic_int();
	                break;

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1387;
	            this.match(SHARCParser.MODIFY);
	            this.state = 1388;
	            this.match(SHARCParser.LPARENTHESE);
	            this.state = 1389;
	            this.ia();
	            this.state = 1390;
	            this.match(SHARCParser.COMMA);
	            this.state = 1391;
	            this.value_exp();
	            this.state = 1392;
	            this.match(SHARCParser.RPARENTHESE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1394;
	            this.match(SHARCParser.MODIFY);
	            this.state = 1395;
	            this.match(SHARCParser.LPARENTHESE);
	            this.state = 1396;
	            this.ic();
	            this.state = 1397;
	            this.match(SHARCParser.COMMA);
	            this.state = 1398;
	            this.value_exp();
	            this.state = 1399;
	            this.match(SHARCParser.RPARENTHESE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1401;
	            this.misc_20();
	            this.state = 1406;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SHARCParser.COMMA) {
	                this.state = 1402;
	                this.match(SHARCParser.COMMA);
	                this.state = 1403;
	                this.misc_20();
	                this.state = 1408;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1409;
	            this.match(SHARCParser.FLUSH);
	            this.state = 1410;
	            this.match(SHARCParser.CACHE);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1411;
	            this.match(SHARCParser.NOP);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1412;
	            this.match(SHARCParser.IDLE);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1413;
	            this.match(SHARCParser.IDLE16);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1414;
	            this.match(SHARCParser.CJUMP);
	            this.state = 1415;
	            this.jump_addr_int_or_pc();
	            this.state = 1417;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SHARCParser.LPARENTHESE) {
	                this.state = 1416;
	                this.jump_modifier2();
	            }

	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1419;
	            this.match(SHARCParser.RFRAME);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	misc_20() {
	    let localctx = new Misc_20Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, SHARCParser.RULE_misc_20);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1422;
	        _la = this._input.LA(1);
	        if(!(_la===SHARCParser.POP || _la===SHARCParser.PUSH)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1423;
	        _la = this._input.LA(1);
	        if(!(_la===SHARCParser.LOOP || _la===SHARCParser.PCSTK || _la===SHARCParser.STS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	directive_exp() {
	    let localctx = new Directive_expContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, SHARCParser.RULE_directive_exp);
	    var _la = 0; // Token type
	    try {
	        this.state = 1491;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.DOT_ALGIGN:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1425;
	            this.match(SHARCParser.DOT_ALGIGN);
	            this.state = 1426;
	            this.match(SHARCParser.INT);
	            break;
	        case SHARCParser.DOT_COMPRESS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1427;
	            this.match(SHARCParser.DOT_COMPRESS);
	            break;
	        case SHARCParser.DOT_EXTERN:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1428;
	            this.match(SHARCParser.DOT_EXTERN);
	            this.state = 1429;
	            this.match(SHARCParser.ID);
	            this.state = 1434;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SHARCParser.COMMA) {
	                this.state = 1430;
	                this.match(SHARCParser.COMMA);
	                this.state = 1431;
	                this.match(SHARCParser.ID);
	                this.state = 1436;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case SHARCParser.DOT_FILE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1437;
	            this.match(SHARCParser.DOT_FILE);
	            this.state = 1438;
	            this.match(SHARCParser.StringLiteral);
	            break;
	        case SHARCParser.DOT_FILE_ATTR:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1439;
	            this.match(SHARCParser.DOT_FILE_ATTR);
	            this.state = 1440;
	            this.matchWildcard();
	            break;
	        case SHARCParser.DOT_FORCECOMPRESS:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1441;
	            this.match(SHARCParser.DOT_FORCECOMPRESS);
	            break;
	        case SHARCParser.DOT_GLOBAL:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1442;
	            this.match(SHARCParser.DOT_GLOBAL);
	            this.state = 1443;
	            this.match(SHARCParser.ID);
	            this.state = 1448;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SHARCParser.COMMA) {
	                this.state = 1444;
	                this.match(SHARCParser.COMMA);
	                this.state = 1445;
	                this.match(SHARCParser.ID);
	                this.state = 1450;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case SHARCParser.DOT_IMPORT:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1451;
	            this.match(SHARCParser.DOT_IMPORT);
	            this.state = 1452;
	            this.match(SHARCParser.StringLiteral);
	            this.state = 1457;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SHARCParser.COMMA) {
	                this.state = 1453;
	                this.match(SHARCParser.COMMA);
	                this.state = 1454;
	                this.match(SHARCParser.StringLiteral);
	                this.state = 1459;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case SHARCParser.DOT_LEFTMARGIN:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1460;
	            this.match(SHARCParser.DOT_LEFTMARGIN);
	            this.state = 1461;
	            this.value_exp();
	            break;
	        case SHARCParser.DOT_LIST:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1462;
	            this.match(SHARCParser.DOT_LIST);
	            break;
	        case SHARCParser.DOT_LIST_DATA:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1463;
	            this.match(SHARCParser.DOT_LIST_DATA);
	            break;
	        case SHARCParser.DOT_LIST_DATFILE:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1464;
	            this.match(SHARCParser.DOT_LIST_DATFILE);
	            break;
	        case SHARCParser.DOT_LIST_DEFTAB:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1465;
	            this.match(SHARCParser.DOT_LIST_DEFTAB);
	            this.state = 1466;
	            this.value_exp();
	            break;
	        case SHARCParser.DOT_LIST_LOCTAB:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1467;
	            this.match(SHARCParser.DOT_LIST_LOCTAB);
	            this.state = 1468;
	            this.value_exp();
	            break;
	        case SHARCParser.DOT_LIST_WRAPDATA:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1469;
	            this.match(SHARCParser.DOT_LIST_WRAPDATA);
	            break;
	        case SHARCParser.DOT_NEWPAGE:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1470;
	            this.match(SHARCParser.DOT_NEWPAGE);
	            break;
	        case SHARCParser.DOT_NOCOMPRESS:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1471;
	            this.match(SHARCParser.DOT_NOCOMPRESS);
	            break;
	        case SHARCParser.DOT_NOLIST_DATA:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1472;
	            this.match(SHARCParser.DOT_NOLIST_DATA);
	            break;
	        case SHARCParser.DOT_NOLIST_DATFILE:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1473;
	            this.match(SHARCParser.DOT_NOLIST_DATFILE);
	            break;
	        case SHARCParser.DOT_NOLIST_WRAPDATA:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1474;
	            this.match(SHARCParser.DOT_NOLIST_WRAPDATA);
	            break;
	        case SHARCParser.DOT_PAGELENGTH:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1475;
	            this.match(SHARCParser.DOT_PAGELENGTH);
	            this.state = 1476;
	            this.value_exp();
	            break;
	        case SHARCParser.DOT_PAGEWIDTH:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1477;
	            this.match(SHARCParser.DOT_PAGEWIDTH);
	            this.state = 1478;
	            this.value_exp();
	            break;
	        case SHARCParser.DOT_PRECISION:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 1479;
	            this.match(SHARCParser.DOT_PRECISION);

	            this.state = 1481;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SHARCParser.EQU) {
	                this.state = 1480;
	                this.match(SHARCParser.EQU);
	            }

	            this.state = 1483;
	            this.match(SHARCParser.INT);
	            break;
	        case SHARCParser.DOT_ROUND_MINUS:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 1484;
	            this.match(SHARCParser.DOT_ROUND_MINUS);
	            break;
	        case SHARCParser.DOT_ROUND_NEAREST:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 1485;
	            this.match(SHARCParser.DOT_ROUND_NEAREST);
	            break;
	        case SHARCParser.DOT_ROUND_PLUS:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 1486;
	            this.match(SHARCParser.DOT_ROUND_PLUS);
	            break;
	        case SHARCParser.DOT_ROUND_ZERO:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 1487;
	            this.match(SHARCParser.DOT_ROUND_ZERO);
	            break;
	        case SHARCParser.DOT_PREVIOUS:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 1488;
	            this.match(SHARCParser.DOT_PREVIOUS);
	            break;
	        case SHARCParser.DOT_WEAK:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 1489;
	            this.match(SHARCParser.DOT_WEAK);
	            this.state = 1490;
	            this.match(SHARCParser.ID);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	b_reg() {
	    let localctx = new B_regContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, SHARCParser.RULE_b_reg);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1493;
	        _la = this._input.LA(1);
	        if(!(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (SHARCParser.B0 - 57)) | (1 << (SHARCParser.B1 - 57)) | (1 << (SHARCParser.B2 - 57)) | (1 << (SHARCParser.B3 - 57)) | (1 << (SHARCParser.B4 - 57)) | (1 << (SHARCParser.B5 - 57)) | (1 << (SHARCParser.B6 - 57)) | (1 << (SHARCParser.B7 - 57)) | (1 << (SHARCParser.B8 - 57)) | (1 << (SHARCParser.B9 - 57)) | (1 << (SHARCParser.B10 - 57)) | (1 << (SHARCParser.B11 - 57)) | (1 << (SHARCParser.B12 - 57)) | (1 << (SHARCParser.B13 - 57)) | (1 << (SHARCParser.B14 - 57)) | (1 << (SHARCParser.B15 - 57)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	l_reg() {
	    let localctx = new L_regContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, SHARCParser.RULE_l_reg);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1495;
	        _la = this._input.LA(1);
	        if(!(((((_la - 190)) & ~0x1f) == 0 && ((1 << (_la - 190)) & ((1 << (SHARCParser.L0 - 190)) | (1 << (SHARCParser.L1 - 190)) | (1 << (SHARCParser.L2 - 190)) | (1 << (SHARCParser.L3 - 190)) | (1 << (SHARCParser.L4 - 190)) | (1 << (SHARCParser.L5 - 190)) | (1 << (SHARCParser.L6 - 190)) | (1 << (SHARCParser.L7 - 190)) | (1 << (SHARCParser.L8 - 190)) | (1 << (SHARCParser.L9 - 190)) | (1 << (SHARCParser.L10 - 190)) | (1 << (SHARCParser.L11 - 190)) | (1 << (SHARCParser.L12 - 190)) | (1 << (SHARCParser.L13 - 190)) | (1 << (SHARCParser.L14 - 190)) | (1 << (SHARCParser.L15 - 190)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	r_reg() {
	    let localctx = new R_regContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, SHARCParser.RULE_r_reg);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1497;
	        _la = this._input.LA(1);
	        if(!(((((_la - 297)) & ~0x1f) == 0 && ((1 << (_la - 297)) & ((1 << (SHARCParser.R0 - 297)) | (1 << (SHARCParser.R1 - 297)) | (1 << (SHARCParser.R2 - 297)) | (1 << (SHARCParser.R3 - 297)) | (1 << (SHARCParser.R4 - 297)) | (1 << (SHARCParser.R5 - 297)) | (1 << (SHARCParser.R6 - 297)) | (1 << (SHARCParser.R7 - 297)) | (1 << (SHARCParser.R8 - 297)) | (1 << (SHARCParser.R9 - 297)) | (1 << (SHARCParser.R10 - 297)) | (1 << (SHARCParser.R11 - 297)) | (1 << (SHARCParser.R12 - 297)) | (1 << (SHARCParser.R13 - 297)) | (1 << (SHARCParser.R14 - 297)) | (1 << (SHARCParser.R15 - 297)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	f_reg() {
	    let localctx = new F_regContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, SHARCParser.RULE_f_reg);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1499;
	        _la = this._input.LA(1);
	        if(!(((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (SHARCParser.F0 - 126)) | (1 << (SHARCParser.F1 - 126)) | (1 << (SHARCParser.F2 - 126)) | (1 << (SHARCParser.F3 - 126)) | (1 << (SHARCParser.F4 - 126)) | (1 << (SHARCParser.F5 - 126)) | (1 << (SHARCParser.F6 - 126)) | (1 << (SHARCParser.F7 - 126)) | (1 << (SHARCParser.F8 - 126)) | (1 << (SHARCParser.F9 - 126)) | (1 << (SHARCParser.F10 - 126)) | (1 << (SHARCParser.F11 - 126)) | (1 << (SHARCParser.F12 - 126)) | (1 << (SHARCParser.F13 - 126)) | (1 << (SHARCParser.F14 - 126)) | (1 << (SHARCParser.F15 - 126)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	s_reg() {
	    let localctx = new S_regContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, SHARCParser.RULE_s_reg);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1501;
	        _la = this._input.LA(1);
	        if(!(_la===SHARCParser.ASTAT || ((((_la - 185)) & ~0x1f) == 0 && ((1 << (_la - 185)) & ((1 << (SHARCParser.IMASK - 185)) | (1 << (SHARCParser.IMASKP - 185)) | (1 << (SHARCParser.IRPTL - 185)))) !== 0) || _la===SHARCParser.MODE1 || _la===SHARCParser.MODE2 || ((((_la - 340)) & ~0x1f) == 0 && ((1 << (_la - 340)) & ((1 << (SHARCParser.STKY - 340)) | (1 << (SHARCParser.USTAT1 - 340)) | (1 << (SHARCParser.USTAT2 - 340)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ia() {
	    let localctx = new IaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, SHARCParser.RULE_ia);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1503;
	        _la = this._input.LA(1);
	        if(!(((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (SHARCParser.I0 - 164)) | (1 << (SHARCParser.I1 - 164)) | (1 << (SHARCParser.I2 - 164)) | (1 << (SHARCParser.I3 - 164)) | (1 << (SHARCParser.I4 - 164)) | (1 << (SHARCParser.I5 - 164)) | (1 << (SHARCParser.I6 - 164)) | (1 << (SHARCParser.I7 - 164)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mb() {
	    let localctx = new MbContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, SHARCParser.RULE_mb);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1505;
	        _la = this._input.LA(1);
	        if(!(((((_la - 223)) & ~0x1f) == 0 && ((1 << (_la - 223)) & ((1 << (SHARCParser.M0 - 223)) | (1 << (SHARCParser.M1 - 223)) | (1 << (SHARCParser.M2 - 223)) | (1 << (SHARCParser.M3 - 223)) | (1 << (SHARCParser.M4 - 223)) | (1 << (SHARCParser.M5 - 223)) | (1 << (SHARCParser.M6 - 223)) | (1 << (SHARCParser.M7 - 223)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ic() {
	    let localctx = new IcContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, SHARCParser.RULE_ic);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1507;
	        _la = this._input.LA(1);
	        if(!(((((_la - 172)) & ~0x1f) == 0 && ((1 << (_la - 172)) & ((1 << (SHARCParser.I8 - 172)) | (1 << (SHARCParser.I9 - 172)) | (1 << (SHARCParser.I10 - 172)) | (1 << (SHARCParser.I11 - 172)) | (1 << (SHARCParser.I12 - 172)) | (1 << (SHARCParser.I13 - 172)) | (1 << (SHARCParser.I14 - 172)) | (1 << (SHARCParser.I15 - 172)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	md() {
	    let localctx = new MdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, SHARCParser.RULE_md);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1509;
	        _la = this._input.LA(1);
	        if(!(((((_la - 231)) & ~0x1f) == 0 && ((1 << (_la - 231)) & ((1 << (SHARCParser.M8 - 231)) | (1 << (SHARCParser.M9 - 231)) | (1 << (SHARCParser.M10 - 231)) | (1 << (SHARCParser.M11 - 231)) | (1 << (SHARCParser.M12 - 231)) | (1 << (SHARCParser.M13 - 231)) | (1 << (SHARCParser.M14 - 231)) | (1 << (SHARCParser.M15 - 231)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	i_reg() {
	    let localctx = new I_regContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, SHARCParser.RULE_i_reg);
	    try {
	        this.state = 1513;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.I0:
	        case SHARCParser.I1:
	        case SHARCParser.I2:
	        case SHARCParser.I3:
	        case SHARCParser.I4:
	        case SHARCParser.I5:
	        case SHARCParser.I6:
	        case SHARCParser.I7:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1511;
	            this.ia();
	            break;
	        case SHARCParser.I8:
	        case SHARCParser.I9:
	        case SHARCParser.I10:
	        case SHARCParser.I11:
	        case SHARCParser.I12:
	        case SHARCParser.I13:
	        case SHARCParser.I14:
	        case SHARCParser.I15:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1512;
	            this.ic();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	m_reg() {
	    let localctx = new M_regContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, SHARCParser.RULE_m_reg);
	    try {
	        this.state = 1517;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.M0:
	        case SHARCParser.M1:
	        case SHARCParser.M2:
	        case SHARCParser.M3:
	        case SHARCParser.M4:
	        case SHARCParser.M5:
	        case SHARCParser.M6:
	        case SHARCParser.M7:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1515;
	            this.mb();
	            break;
	        case SHARCParser.M8:
	        case SHARCParser.M9:
	        case SHARCParser.M10:
	        case SHARCParser.M11:
	        case SHARCParser.M12:
	        case SHARCParser.M13:
	        case SHARCParser.M14:
	        case SHARCParser.M15:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1516;
	            this.md();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dag_reg() {
	    let localctx = new Dag_regContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, SHARCParser.RULE_dag_reg);
	    try {
	        this.state = 1523;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.I0:
	        case SHARCParser.I1:
	        case SHARCParser.I2:
	        case SHARCParser.I3:
	        case SHARCParser.I4:
	        case SHARCParser.I5:
	        case SHARCParser.I6:
	        case SHARCParser.I7:
	        case SHARCParser.I8:
	        case SHARCParser.I9:
	        case SHARCParser.I10:
	        case SHARCParser.I11:
	        case SHARCParser.I12:
	        case SHARCParser.I13:
	        case SHARCParser.I14:
	        case SHARCParser.I15:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1519;
	            this.i_reg();
	            break;
	        case SHARCParser.M0:
	        case SHARCParser.M1:
	        case SHARCParser.M2:
	        case SHARCParser.M3:
	        case SHARCParser.M4:
	        case SHARCParser.M5:
	        case SHARCParser.M6:
	        case SHARCParser.M7:
	        case SHARCParser.M8:
	        case SHARCParser.M9:
	        case SHARCParser.M10:
	        case SHARCParser.M11:
	        case SHARCParser.M12:
	        case SHARCParser.M13:
	        case SHARCParser.M14:
	        case SHARCParser.M15:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1520;
	            this.m_reg();
	            break;
	        case SHARCParser.B0:
	        case SHARCParser.B1:
	        case SHARCParser.B2:
	        case SHARCParser.B3:
	        case SHARCParser.B4:
	        case SHARCParser.B5:
	        case SHARCParser.B6:
	        case SHARCParser.B7:
	        case SHARCParser.B8:
	        case SHARCParser.B9:
	        case SHARCParser.B10:
	        case SHARCParser.B11:
	        case SHARCParser.B12:
	        case SHARCParser.B13:
	        case SHARCParser.B14:
	        case SHARCParser.B15:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1521;
	            this.b_reg();
	            break;
	        case SHARCParser.L0:
	        case SHARCParser.L1:
	        case SHARCParser.L2:
	        case SHARCParser.L3:
	        case SHARCParser.L4:
	        case SHARCParser.L5:
	        case SHARCParser.L6:
	        case SHARCParser.L7:
	        case SHARCParser.L8:
	        case SHARCParser.L9:
	        case SHARCParser.L10:
	        case SHARCParser.L11:
	        case SHARCParser.L12:
	        case SHARCParser.L13:
	        case SHARCParser.L14:
	        case SHARCParser.L15:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1522;
	            this.l_reg();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	d_reg() {
	    let localctx = new D_regContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, SHARCParser.RULE_d_reg);
	    try {
	        this.state = 1527;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.R0:
	        case SHARCParser.R1:
	        case SHARCParser.R2:
	        case SHARCParser.R3:
	        case SHARCParser.R4:
	        case SHARCParser.R5:
	        case SHARCParser.R6:
	        case SHARCParser.R7:
	        case SHARCParser.R8:
	        case SHARCParser.R9:
	        case SHARCParser.R10:
	        case SHARCParser.R11:
	        case SHARCParser.R12:
	        case SHARCParser.R13:
	        case SHARCParser.R14:
	        case SHARCParser.R15:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1525;
	            this.r_reg();
	            break;
	        case SHARCParser.F0:
	        case SHARCParser.F1:
	        case SHARCParser.F2:
	        case SHARCParser.F3:
	        case SHARCParser.F4:
	        case SHARCParser.F5:
	        case SHARCParser.F6:
	        case SHARCParser.F7:
	        case SHARCParser.F8:
	        case SHARCParser.F9:
	        case SHARCParser.F10:
	        case SHARCParser.F11:
	        case SHARCParser.F12:
	        case SHARCParser.F13:
	        case SHARCParser.F14:
	        case SHARCParser.F15:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1526;
	            this.f_reg();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	u_reg() {
	    let localctx = new U_regContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, SHARCParser.RULE_u_reg);
	    try {
	        this.state = 1545;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SHARCParser.F0:
	        case SHARCParser.F1:
	        case SHARCParser.F2:
	        case SHARCParser.F3:
	        case SHARCParser.F4:
	        case SHARCParser.F5:
	        case SHARCParser.F6:
	        case SHARCParser.F7:
	        case SHARCParser.F8:
	        case SHARCParser.F9:
	        case SHARCParser.F10:
	        case SHARCParser.F11:
	        case SHARCParser.F12:
	        case SHARCParser.F13:
	        case SHARCParser.F14:
	        case SHARCParser.F15:
	        case SHARCParser.R0:
	        case SHARCParser.R1:
	        case SHARCParser.R2:
	        case SHARCParser.R3:
	        case SHARCParser.R4:
	        case SHARCParser.R5:
	        case SHARCParser.R6:
	        case SHARCParser.R7:
	        case SHARCParser.R8:
	        case SHARCParser.R9:
	        case SHARCParser.R10:
	        case SHARCParser.R11:
	        case SHARCParser.R12:
	        case SHARCParser.R13:
	        case SHARCParser.R14:
	        case SHARCParser.R15:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1529;
	            this.d_reg();
	            break;
	        case SHARCParser.PC:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1530;
	            this.match(SHARCParser.PC);
	            break;
	        case SHARCParser.PCSTK:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1531;
	            this.match(SHARCParser.PCSTK);
	            break;
	        case SHARCParser.PCSTKP:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1532;
	            this.match(SHARCParser.PCSTKP);
	            break;
	        case SHARCParser.FADDR:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1533;
	            this.match(SHARCParser.FADDR);
	            break;
	        case SHARCParser.DADDR:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1534;
	            this.match(SHARCParser.DADDR);
	            break;
	        case SHARCParser.LADDR:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1535;
	            this.match(SHARCParser.LADDR);
	            break;
	        case SHARCParser.CURLCNTR:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1536;
	            this.match(SHARCParser.CURLCNTR);
	            break;
	        case SHARCParser.LCNTR:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1537;
	            this.match(SHARCParser.LCNTR);
	            break;
	        case SHARCParser.B0:
	        case SHARCParser.B1:
	        case SHARCParser.B2:
	        case SHARCParser.B3:
	        case SHARCParser.B4:
	        case SHARCParser.B5:
	        case SHARCParser.B6:
	        case SHARCParser.B7:
	        case SHARCParser.B8:
	        case SHARCParser.B9:
	        case SHARCParser.B10:
	        case SHARCParser.B11:
	        case SHARCParser.B12:
	        case SHARCParser.B13:
	        case SHARCParser.B14:
	        case SHARCParser.B15:
	        case SHARCParser.I0:
	        case SHARCParser.I1:
	        case SHARCParser.I2:
	        case SHARCParser.I3:
	        case SHARCParser.I4:
	        case SHARCParser.I5:
	        case SHARCParser.I6:
	        case SHARCParser.I7:
	        case SHARCParser.I8:
	        case SHARCParser.I9:
	        case SHARCParser.I10:
	        case SHARCParser.I11:
	        case SHARCParser.I12:
	        case SHARCParser.I13:
	        case SHARCParser.I14:
	        case SHARCParser.I15:
	        case SHARCParser.L0:
	        case SHARCParser.L1:
	        case SHARCParser.L2:
	        case SHARCParser.L3:
	        case SHARCParser.L4:
	        case SHARCParser.L5:
	        case SHARCParser.L6:
	        case SHARCParser.L7:
	        case SHARCParser.L8:
	        case SHARCParser.L9:
	        case SHARCParser.L10:
	        case SHARCParser.L11:
	        case SHARCParser.L12:
	        case SHARCParser.L13:
	        case SHARCParser.L14:
	        case SHARCParser.L15:
	        case SHARCParser.M0:
	        case SHARCParser.M1:
	        case SHARCParser.M2:
	        case SHARCParser.M3:
	        case SHARCParser.M4:
	        case SHARCParser.M5:
	        case SHARCParser.M6:
	        case SHARCParser.M7:
	        case SHARCParser.M8:
	        case SHARCParser.M9:
	        case SHARCParser.M10:
	        case SHARCParser.M11:
	        case SHARCParser.M12:
	        case SHARCParser.M13:
	        case SHARCParser.M14:
	        case SHARCParser.M15:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1538;
	            this.dag_reg();
	            break;
	        case SHARCParser.PX1:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1539;
	            this.match(SHARCParser.PX1);
	            break;
	        case SHARCParser.PX2:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1540;
	            this.match(SHARCParser.PX2);
	            break;
	        case SHARCParser.PX:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1541;
	            this.match(SHARCParser.PX);
	            break;
	        case SHARCParser.TPERIOD:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1542;
	            this.match(SHARCParser.TPERIOD);
	            break;
	        case SHARCParser.TCOUNT:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1543;
	            this.match(SHARCParser.TCOUNT);
	            break;
	        case SHARCParser.ASTAT:
	        case SHARCParser.IMASK:
	        case SHARCParser.IMASKP:
	        case SHARCParser.IRPTL:
	        case SHARCParser.MODE1:
	        case SHARCParser.MODE2:
	        case SHARCParser.STKY:
	        case SHARCParser.USTAT1:
	        case SHARCParser.USTAT2:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1544;
	            this.s_reg();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	condition() {
	    let localctx = new ConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, SHARCParser.RULE_condition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1547;
	        this.ccondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ccondition() {
	    let localctx = new CconditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, SHARCParser.RULE_ccondition);
	    try {
	        this.state = 1595;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1549;
	            this.match(SHARCParser.EQ);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1550;
	            this.match(SHARCParser.LT);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1551;
	            this.match(SHARCParser.LE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1552;
	            this.match(SHARCParser.AC);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1553;
	            this.match(SHARCParser.AV);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1554;
	            this.match(SHARCParser.MV);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1555;
	            this.match(SHARCParser.MS);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1556;
	            this.match(SHARCParser.SV);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1557;
	            this.match(SHARCParser.SZ);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1558;
	            this.match(SHARCParser.FLAG0_IN);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1559;
	            this.match(SHARCParser.FLAG1_IN);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1560;
	            this.match(SHARCParser.FLAG2_IN);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1561;
	            this.match(SHARCParser.FLAG3_IN);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1562;
	            this.match(SHARCParser.TF);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1563;
	            this.match(SHARCParser.BM);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1564;
	            this.match(SHARCParser.LCE);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1565;
	            this.match(SHARCParser.NOT);
	            this.state = 1566;
	            this.match(SHARCParser.LCE);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1567;
	            this.match(SHARCParser.NE);
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1568;
	            this.match(SHARCParser.GE);
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1569;
	            this.match(SHARCParser.GT);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1570;
	            this.match(SHARCParser.NOT);
	            this.state = 1571;
	            this.match(SHARCParser.AC);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1572;
	            this.match(SHARCParser.NOT);
	            this.state = 1573;
	            this.match(SHARCParser.AV);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 1574;
	            this.match(SHARCParser.NOT);
	            this.state = 1575;
	            this.match(SHARCParser.MV);
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 1576;
	            this.match(SHARCParser.NOT);
	            this.state = 1577;
	            this.match(SHARCParser.MS);
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 1578;
	            this.match(SHARCParser.NOT);
	            this.state = 1579;
	            this.match(SHARCParser.SV);
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 1580;
	            this.match(SHARCParser.NOT);
	            this.state = 1581;
	            this.match(SHARCParser.SZ);
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 1582;
	            this.match(SHARCParser.NOT);
	            this.state = 1583;
	            this.match(SHARCParser.FLAG0_IN);
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 1584;
	            this.match(SHARCParser.NOT);
	            this.state = 1585;
	            this.match(SHARCParser.FLAG1_IN);
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 1586;
	            this.match(SHARCParser.NOT);
	            this.state = 1587;
	            this.match(SHARCParser.FLAG2_IN);
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 1588;
	            this.match(SHARCParser.NOT);
	            this.state = 1589;
	            this.match(SHARCParser.FLAG3_IN);
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 1590;
	            this.match(SHARCParser.NOT);
	            this.state = 1591;
	            this.match(SHARCParser.TF);
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 1592;
	            this.match(SHARCParser.NBM);
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 1593;
	            this.match(SHARCParser.FOREVER);
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 1594;
	            this.match(SHARCParser.TRUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multi_mod1() {
	    let localctx = new Multi_mod1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, SHARCParser.RULE_multi_mod1);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1597;
	        this.multi_mod1_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multi_mod1_() {
	    let localctx = new Multi_mod1_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, SHARCParser.RULE_multi_mod1_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1599;
	        this.match(SHARCParser.LPARENTHESE);
	        this.state = 1600;
	        _la = this._input.LA(1);
	        if(!(_la===SHARCParser.SF || _la===SHARCParser.SI || _la===SHARCParser.UF || _la===SHARCParser.UI)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1601;
	        this.match(SHARCParser.RPARENTHESE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multi_mod2() {
	    let localctx = new Multi_mod2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, SHARCParser.RULE_multi_mod2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1603;
	        this.multi_mod2_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multi_mod2_() {
	    let localctx = new Multi_mod2_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, SHARCParser.RULE_multi_mod2_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1605;
	        this.match(SHARCParser.LPARENTHESE);
	        this.state = 1606;
	        _la = this._input.LA(1);
	        if(!(((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (SHARCParser.SSF - 334)) | (1 << (SHARCParser.SSFR - 334)) | (1 << (SHARCParser.SSI - 334)) | (1 << (SHARCParser.SUF - 334)) | (1 << (SHARCParser.SUFR - 334)) | (1 << (SHARCParser.SUI - 334)) | (1 << (SHARCParser.USF - 334)) | (1 << (SHARCParser.USFR - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (SHARCParser.USI - 366)) | (1 << (SHARCParser.UUF - 366)) | (1 << (SHARCParser.UUFR - 366)) | (1 << (SHARCParser.UUI - 366)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1607;
	        this.match(SHARCParser.RPARENTHESE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	r3_0() {
	    let localctx = new R3_0Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, SHARCParser.RULE_r3_0);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1609;
	        _la = this._input.LA(1);
	        if(!(((((_la - 297)) & ~0x1f) == 0 && ((1 << (_la - 297)) & ((1 << (SHARCParser.R0 - 297)) | (1 << (SHARCParser.R2 - 297)) | (1 << (SHARCParser.R3 - 297)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	r7_4() {
	    let localctx = new R7_4Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, SHARCParser.RULE_r7_4);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1611;
	        _la = this._input.LA(1);
	        if(!(((((_la - 301)) & ~0x1f) == 0 && ((1 << (_la - 301)) & ((1 << (SHARCParser.R4 - 301)) | (1 << (SHARCParser.R5 - 301)) | (1 << (SHARCParser.R6 - 301)) | (1 << (SHARCParser.R7 - 301)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	r11_8() {
	    let localctx = new R11_8Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, SHARCParser.RULE_r11_8);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1613;
	        _la = this._input.LA(1);
	        if(!(((((_la - 305)) & ~0x1f) == 0 && ((1 << (_la - 305)) & ((1 << (SHARCParser.R8 - 305)) | (1 << (SHARCParser.R9 - 305)) | (1 << (SHARCParser.R10 - 305)) | (1 << (SHARCParser.R11 - 305)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	r15_12() {
	    let localctx = new R15_12Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, SHARCParser.RULE_r15_12);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1615;
	        _la = this._input.LA(1);
	        if(!(((((_la - 309)) & ~0x1f) == 0 && ((1 << (_la - 309)) & ((1 << (SHARCParser.R12 - 309)) | (1 << (SHARCParser.R13 - 309)) | (1 << (SHARCParser.R14 - 309)) | (1 << (SHARCParser.R15 - 309)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	f3_0() {
	    let localctx = new F3_0Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, SHARCParser.RULE_f3_0);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1617;
	        _la = this._input.LA(1);
	        if(!(((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (SHARCParser.F0 - 126)) | (1 << (SHARCParser.F2 - 126)) | (1 << (SHARCParser.F3 - 126)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	f7_4() {
	    let localctx = new F7_4Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, SHARCParser.RULE_f7_4);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1619;
	        _la = this._input.LA(1);
	        if(!(((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (SHARCParser.F4 - 130)) | (1 << (SHARCParser.F5 - 130)) | (1 << (SHARCParser.F6 - 130)) | (1 << (SHARCParser.F7 - 130)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	f11_8() {
	    let localctx = new F11_8Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, SHARCParser.RULE_f11_8);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1621;
	        _la = this._input.LA(1);
	        if(!(((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (SHARCParser.F8 - 134)) | (1 << (SHARCParser.F9 - 134)) | (1 << (SHARCParser.F10 - 134)) | (1 << (SHARCParser.F11 - 134)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	f15_12() {
	    let localctx = new F15_12Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, SHARCParser.RULE_f15_12);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1623;
	        _la = this._input.LA(1);
	        if(!(((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (SHARCParser.F12 - 138)) | (1 << (SHARCParser.F13 - 138)) | (1 << (SHARCParser.F14 - 138)) | (1 << (SHARCParser.F15 - 138)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addr() {
	    let localctx = new AddrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, SHARCParser.RULE_addr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1625;
	        _la = this._input.LA(1);
	        if(!(_la===SHARCParser.INT || _la===SHARCParser.ID)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mrf() {
	    let localctx = new MrfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, SHARCParser.RULE_mrf);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1627;
	        _la = this._input.LA(1);
	        if(!(((((_la - 248)) & ~0x1f) == 0 && ((1 << (_la - 248)) & ((1 << (SHARCParser.MR0F - 248)) | (1 << (SHARCParser.MR1F - 248)) | (1 << (SHARCParser.MR2F - 248)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mrb() {
	    let localctx = new MrbContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, SHARCParser.RULE_mrb);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1629;
	        _la = this._input.LA(1);
	        if(!(((((_la - 247)) & ~0x1f) == 0 && ((1 << (_la - 247)) & ((1 << (SHARCParser.MR0B - 247)) | (1 << (SHARCParser.MR1B - 247)) | (1 << (SHARCParser.MR2B - 247)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

SHARCParser.EOF = antlr4.Token.EOF;
SHARCParser.StringLiteral = 1;
SHARCParser.CharLiteral = 2;
SHARCParser.INT = 3;
SHARCParser.WS = 4;
SHARCParser.DOT_ADI_ = 5;
SHARCParser.DOT_DATE_ = 6;
SHARCParser.DOT_FILE_ = 7;
SHARCParser.DOT_ALGIGN = 8;
SHARCParser.DOT_COMPRESS = 9;
SHARCParser.DOT_ELIF = 10;
SHARCParser.DOT_ELSE = 11;
SHARCParser.DOT_ENDIF = 12;
SHARCParser.DOT_EXTERN = 13;
SHARCParser.DOT_FILE = 14;
SHARCParser.DOT_FILE_ATTR = 15;
SHARCParser.DOT_FORCECOMPRESS = 16;
SHARCParser.DOT_GLOBAL = 17;
SHARCParser.DOT_IF = 18;
SHARCParser.DOT_IMPORT = 19;
SHARCParser.DOT_INCBINARY = 20;
SHARCParser.DOT_LEFTMARGIN = 21;
SHARCParser.DOT_LIST = 22;
SHARCParser.DOT_LIST_DATA = 23;
SHARCParser.DOT_LIST_DATFILE = 24;
SHARCParser.DOT_LIST_DEFTAB = 25;
SHARCParser.DOT_LIST_LOCTAB = 26;
SHARCParser.DOT_LIST_WRAPDATA = 27;
SHARCParser.DOT_NEWPAGE = 28;
SHARCParser.DOT_NOCOMPRESS = 29;
SHARCParser.DOT_NOLIST_DATA = 30;
SHARCParser.DOT_NOLIST_DATFILE = 31;
SHARCParser.DOT_NOLIST_WRAPDATA = 32;
SHARCParser.DOT_PAGELENGTH = 33;
SHARCParser.DOT_PAGEWIDTH = 34;
SHARCParser.DOT_PRECISION = 35;
SHARCParser.DOT_ROUND_MINUS = 36;
SHARCParser.DOT_ROUND_NEAREST = 37;
SHARCParser.DOT_ROUND_PLUS = 38;
SHARCParser.DOT_ROUND_ZERO = 39;
SHARCParser.DOT_PREVIOUS = 40;
SHARCParser.DOT_SECTION = 41;
SHARCParser.DOT_SEGMENT = 42;
SHARCParser.DOT_ENDSEG = 43;
SHARCParser.DOT_STRUCT = 44;
SHARCParser.DOT_TYPE = 45;
SHARCParser.DOT_VAR = 46;
SHARCParser.DOT_WEAK = 47;
SHARCParser.ABS = 48;
SHARCParser.AC = 49;
SHARCParser.ACS = 50;
SHARCParser.ACT = 51;
SHARCParser.ADDRESS = 52;
SHARCParser.AND = 53;
SHARCParser.ASHIFT = 54;
SHARCParser.ASTAT = 55;
SHARCParser.AV = 56;
SHARCParser.B0 = 57;
SHARCParser.B1 = 58;
SHARCParser.B2 = 59;
SHARCParser.B3 = 60;
SHARCParser.B4 = 61;
SHARCParser.B5 = 62;
SHARCParser.B6 = 63;
SHARCParser.B7 = 64;
SHARCParser.B8 = 65;
SHARCParser.B9 = 66;
SHARCParser.B10 = 67;
SHARCParser.B11 = 68;
SHARCParser.B12 = 69;
SHARCParser.B13 = 70;
SHARCParser.B14 = 71;
SHARCParser.B15 = 72;
SHARCParser.BB = 73;
SHARCParser.BCLR = 74;
SHARCParser.BF = 75;
SHARCParser.BIT = 76;
SHARCParser.BITREV = 77;
SHARCParser.BM = 78;
SHARCParser.BSET = 79;
SHARCParser.BTGL = 80;
SHARCParser.BTST = 81;
SHARCParser.BY = 82;
SHARCParser.CA = 83;
SHARCParser.CACHE = 84;
SHARCParser.CALL = 85;
SHARCParser.CH = 86;
SHARCParser.CI = 87;
SHARCParser.CJUMP = 88;
SHARCParser.CL = 89;
SHARCParser.CLR = 90;
SHARCParser.CLIP = 91;
SHARCParser.COMP = 92;
SHARCParser.COPYSIGN = 93;
SHARCParser.COS = 94;
SHARCParser.CURLCNTR = 95;
SHARCParser.DADDR = 96;
SHARCParser.DB = 97;
SHARCParser.DEC = 98;
SHARCParser.DEF = 99;
SHARCParser.DIM = 100;
SHARCParser.DM = 101;
SHARCParser.DMA1E = 102;
SHARCParser.DMA1s = 103;
SHARCParser.DMA2E = 104;
SHARCParser.DMA2s = 105;
SHARCParser.DMADR = 106;
SHARCParser.DMABANK1 = 107;
SHARCParser.DMABANK2 = 108;
SHARCParser.DMABANK3 = 109;
SHARCParser.DMAWAIT = 110;
SHARCParser.DO = 111;
SHARCParser.DOVL = 112;
SHARCParser.EB = 113;
SHARCParser.ECE = 114;
SHARCParser.EF = 115;
SHARCParser.ELSE = 116;
SHARCParser.EMUCLK = 117;
SHARCParser.EMUCLK2 = 118;
SHARCParser.EMUIDLE = 119;
SHARCParser.EMUN = 120;
SHARCParser.EOS = 121;
SHARCParser.EQ = 122;
SHARCParser.EX = 123;
SHARCParser.EXP = 124;
SHARCParser.EXP2 = 125;
SHARCParser.F0 = 126;
SHARCParser.F1 = 127;
SHARCParser.F2 = 128;
SHARCParser.F3 = 129;
SHARCParser.F4 = 130;
SHARCParser.F5 = 131;
SHARCParser.F6 = 132;
SHARCParser.F7 = 133;
SHARCParser.F8 = 134;
SHARCParser.F9 = 135;
SHARCParser.F10 = 136;
SHARCParser.F11 = 137;
SHARCParser.F12 = 138;
SHARCParser.F13 = 139;
SHARCParser.F14 = 140;
SHARCParser.F15 = 141;
SHARCParser.FADDR = 142;
SHARCParser.FDEP = 143;
SHARCParser.FEXT = 144;
SHARCParser.FILE = 145;
SHARCParser.FIX = 146;
SHARCParser.FLAG0_IN = 147;
SHARCParser.FLAG1_IN = 148;
SHARCParser.FLAG2_IN = 149;
SHARCParser.FLAG3_IN = 150;
SHARCParser.FLOAT = 151;
SHARCParser.FLUSH = 152;
SHARCParser.FMERG = 153;
SHARCParser.FOREVER = 154;
SHARCParser.FPACK = 155;
SHARCParser.FRACTIONAL = 156;
SHARCParser.FTA = 157;
SHARCParser.FTB = 158;
SHARCParser.FTC = 159;
SHARCParser.FUNPACK = 160;
SHARCParser.GCC_COMPILED = 161;
SHARCParser.GE = 162;
SHARCParser.GT = 163;
SHARCParser.I0 = 164;
SHARCParser.I1 = 165;
SHARCParser.I2 = 166;
SHARCParser.I3 = 167;
SHARCParser.I4 = 168;
SHARCParser.I5 = 169;
SHARCParser.I6 = 170;
SHARCParser.I7 = 171;
SHARCParser.I8 = 172;
SHARCParser.I9 = 173;
SHARCParser.I10 = 174;
SHARCParser.I11 = 175;
SHARCParser.I12 = 176;
SHARCParser.I13 = 177;
SHARCParser.I14 = 178;
SHARCParser.I15 = 179;
SHARCParser.IDLE = 180;
SHARCParser.IDLE16 = 181;
SHARCParser.IDLEI15 = 182;
SHARCParser.IDLEI16 = 183;
SHARCParser.IF = 184;
SHARCParser.IMASK = 185;
SHARCParser.IMASKP = 186;
SHARCParser.INC = 187;
SHARCParser.IRPTL = 188;
SHARCParser.JUMP = 189;
SHARCParser.L0 = 190;
SHARCParser.L1 = 191;
SHARCParser.L2 = 192;
SHARCParser.L3 = 193;
SHARCParser.L4 = 194;
SHARCParser.L5 = 195;
SHARCParser.L6 = 196;
SHARCParser.L7 = 197;
SHARCParser.L8 = 198;
SHARCParser.L9 = 199;
SHARCParser.L10 = 200;
SHARCParser.L11 = 201;
SHARCParser.L12 = 202;
SHARCParser.L13 = 203;
SHARCParser.L14 = 204;
SHARCParser.L15 = 205;
SHARCParser.LA = 206;
SHARCParser.LADDR = 207;
SHARCParser.LCE = 208;
SHARCParser.LCNTR = 209;
SHARCParser.LE = 210;
SHARCParser.LEFTO = 211;
SHARCParser.LEFTZ = 212;
SHARCParser.LENGTH = 213;
SHARCParser.LINE = 214;
SHARCParser.LN = 215;
SHARCParser.LOAD = 216;
SHARCParser.LOG2 = 217;
SHARCParser.LOGB = 218;
SHARCParser.LOOP = 219;
SHARCParser.LR = 220;
SHARCParser.LSHIFT = 221;
SHARCParser.LT = 222;
SHARCParser.M0 = 223;
SHARCParser.M1 = 224;
SHARCParser.M2 = 225;
SHARCParser.M3 = 226;
SHARCParser.M4 = 227;
SHARCParser.M5 = 228;
SHARCParser.M6 = 229;
SHARCParser.M7 = 230;
SHARCParser.M8 = 231;
SHARCParser.M9 = 232;
SHARCParser.M10 = 233;
SHARCParser.M11 = 234;
SHARCParser.M12 = 235;
SHARCParser.M13 = 236;
SHARCParser.M14 = 237;
SHARCParser.M15 = 238;
SHARCParser.MANT = 239;
SHARCParser.MAX = 240;
SHARCParser.MBM = 241;
SHARCParser.MIN = 242;
SHARCParser.MOD = 243;
SHARCParser.MODE1 = 244;
SHARCParser.MODE2 = 245;
SHARCParser.MODIFY = 246;
SHARCParser.MR0B = 247;
SHARCParser.MR0F = 248;
SHARCParser.MR1B = 249;
SHARCParser.MR1F = 250;
SHARCParser.MR2B = 251;
SHARCParser.MR2F = 252;
SHARCParser.MRB = 253;
SHARCParser.MRF = 254;
SHARCParser.MS = 255;
SHARCParser.MV = 256;
SHARCParser.NBM = 257;
SHARCParser.NE = 258;
SHARCParser.NOFO = 259;
SHARCParser.NOFZ = 260;
SHARCParser.NOP = 261;
SHARCParser.NOPSPECIAL = 262;
SHARCParser.NOT = 263;
SHARCParser.NU = 264;
SHARCParser.NW = 265;
SHARCParser.OFFSETOF = 266;
SHARCParser.OR = 267;
SHARCParser.P20 = 268;
SHARCParser.P32 = 269;
SHARCParser.P40 = 270;
SHARCParser.PACK = 271;
SHARCParser.PAGE = 272;
SHARCParser.PASS = 273;
SHARCParser.PC = 274;
SHARCParser.PCSTK = 275;
SHARCParser.PCSTKP = 276;
SHARCParser.PM = 277;
SHARCParser.PMADR = 278;
SHARCParser.PMBANK1 = 279;
SHARCParser.PMDAE = 280;
SHARCParser.PMDAS = 281;
SHARCParser.POP = 282;
SHARCParser.POVL0 = 283;
SHARCParser.POVL1 = 284;
SHARCParser.PSA1E = 285;
SHARCParser.PSA1S = 286;
SHARCParser.PSA2E = 287;
SHARCParser.PSA3E = 288;
SHARCParser.PSA3S = 289;
SHARCParser.PSA4E = 290;
SHARCParser.PSA4S = 291;
SHARCParser.PUSH = 292;
SHARCParser.PX = 293;
SHARCParser.PX1 = 294;
SHARCParser.PX2 = 295;
SHARCParser.RETAIN_NAME = 296;
SHARCParser.R0 = 297;
SHARCParser.R1 = 298;
SHARCParser.R2 = 299;
SHARCParser.R3 = 300;
SHARCParser.R4 = 301;
SHARCParser.R5 = 302;
SHARCParser.R6 = 303;
SHARCParser.R7 = 304;
SHARCParser.R8 = 305;
SHARCParser.R9 = 306;
SHARCParser.R10 = 307;
SHARCParser.R11 = 308;
SHARCParser.R12 = 309;
SHARCParser.R13 = 310;
SHARCParser.R14 = 311;
SHARCParser.R15 = 312;
SHARCParser.READ = 313;
SHARCParser.RECIPS = 314;
SHARCParser.RFRAME = 315;
SHARCParser.RND = 316;
SHARCParser.ROT = 317;
SHARCParser.RS = 318;
SHARCParser.RSQRTS = 319;
SHARCParser.RTI = 320;
SHARCParser.RTS = 321;
SHARCParser.SAT = 322;
SHARCParser.SCALB = 323;
SHARCParser.SCL = 324;
SHARCParser.SE = 325;
SHARCParser.SET = 326;
SHARCParser.SF = 327;
SHARCParser.SI = 328;
SHARCParser.SIN = 329;
SHARCParser.SIZE = 330;
SHARCParser.SIZEOF = 331;
SHARCParser.SQR = 332;
SHARCParser.SR = 333;
SHARCParser.SSF = 334;
SHARCParser.SSFR = 335;
SHARCParser.SSI = 336;
SHARCParser.SSIR = 337;
SHARCParser.ST = 338;
SHARCParser.STEP = 339;
SHARCParser.STKY = 340;
SHARCParser.STRUCT = 341;
SHARCParser.STS = 342;
SHARCParser.SUF = 343;
SHARCParser.SUFR = 344;
SHARCParser.SUI = 345;
SHARCParser.SV = 346;
SHARCParser.SW = 347;
SHARCParser.SZ = 348;
SHARCParser.TAG = 349;
SHARCParser.TCOUNT = 350;
SHARCParser.TF = 351;
SHARCParser.TGL = 352;
SHARCParser.TPERIOD = 353;
SHARCParser.TRUE = 354;
SHARCParser.TRUNC = 355;
SHARCParser.TST = 356;
SHARCParser.TYPE = 357;
SHARCParser.TRAP = 358;
SHARCParser.UF = 359;
SHARCParser.UI = 360;
SHARCParser.UNPACK = 361;
SHARCParser.UNTIL = 362;
SHARCParser.UR = 363;
SHARCParser.USF = 364;
SHARCParser.USFR = 365;
SHARCParser.USI = 366;
SHARCParser.USIR = 367;
SHARCParser.USTAT1 = 368;
SHARCParser.USTAT2 = 369;
SHARCParser.UUF = 370;
SHARCParser.UUFR = 371;
SHARCParser.UUI = 372;
SHARCParser.UUIR = 373;
SHARCParser.VAL = 374;
SHARCParser.WITH = 375;
SHARCParser.XOR = 376;
SHARCParser.PLUS = 377;
SHARCParser.MINUS = 378;
SHARCParser.MULT = 379;
SHARCParser.DIV = 380;
SHARCParser.DIV_MOD = 381;
SHARCParser.EQU = 382;
SHARCParser.I_OR = 383;
SHARCParser.I_XOR = 384;
SHARCParser.COMMA = 385;
SHARCParser.COLON = 386;
SHARCParser.SEMICOLON = 387;
SHARCParser.LPARENTHESE = 388;
SHARCParser.RPARENTHESE = 389;
SHARCParser.LBRACKET = 390;
SHARCParser.RBRACKET = 391;
SHARCParser.LBRACE = 392;
SHARCParser.RBRACE = 393;
SHARCParser.AT = 394;
SHARCParser.NO_INIT = 395;
SHARCParser.ZERO_INIT = 396;
SHARCParser.RUNTIME_INIT = 397;
SHARCParser.CODE = 398;
SHARCParser.DATA = 399;
SHARCParser.DATA64 = 400;
SHARCParser.DMAONLY = 401;
SHARCParser.SECTION = 402;
SHARCParser.SECTION_INFO = 403;
SHARCParser.STMT = 404;
SHARCParser.ADDR = 405;
SHARCParser.BIT_DATA = 406;
SHARCParser.JUMP_INT = 407;
SHARCParser.JUMP_PC = 408;
SHARCParser.JUMP_MD = 409;
SHARCParser.MODIFIER = 410;
SHARCParser.MULTI_MOD = 411;
SHARCParser.LABLE = 412;
SHARCParser.VARDEF = 413;
SHARCParser.ARRDEF = 414;
SHARCParser.DM_ACCESS = 415;
SHARCParser.PM_ACCESS = 416;
SHARCParser.CONDITION = 417;
SHARCParser.IF_STMT = 418;
SHARCParser.VALUE_EXP = 419;
SHARCParser.NULL_ = 420;
SHARCParser.CHAR_LITERAL = 421;
SHARCParser.STR_LITERAL = 422;
SHARCParser.DIRECTIVE = 423;
SHARCParser.NEGATE = 424;
SHARCParser.ID = 425;
SHARCParser.COMMENT = 426;

SHARCParser.RULE_prog = 0;
SHARCParser.RULE_statement = 1;
SHARCParser.RULE_stmt_atom = 2;
SHARCParser.RULE_sec = 3;
SHARCParser.RULE_seg = 4;
SHARCParser.RULE_end_seg = 5;
SHARCParser.RULE_seg_qualifier = 6;
SHARCParser.RULE_seg_qualifier1 = 7;
SHARCParser.RULE_seg_qualifier2 = 8;
SHARCParser.RULE_seg_qualifier3 = 9;
SHARCParser.RULE_seg_qualifier_1 = 10;
SHARCParser.RULE_seg_qualifier_2 = 11;
SHARCParser.RULE_seg_qualifier_3 = 12;
SHARCParser.RULE_stmt = 13;
SHARCParser.RULE_declaration = 14;
SHARCParser.RULE_declaration_exp1 = 15;
SHARCParser.RULE_declaration_exp2 = 16;
SHARCParser.RULE_declaration_exp3 = 17;
SHARCParser.RULE_declaration_exp4 = 18;
SHARCParser.RULE_declaration_exp5 = 19;
SHARCParser.RULE_declaration_exp_f1 = 20;
SHARCParser.RULE_declaration_exp_f2 = 21;
SHARCParser.RULE_initExpression = 22;
SHARCParser.RULE_var_addr = 23;
SHARCParser.RULE_value_exp = 24;
SHARCParser.RULE_value_exp2 = 25;
SHARCParser.RULE_term = 26;
SHARCParser.RULE_factor = 27;
SHARCParser.RULE_atom = 28;
SHARCParser.RULE_compute = 29;
SHARCParser.RULE_if_compute_mov = 30;
SHARCParser.RULE_if_compute_mov_exp = 31;
SHARCParser.RULE_compute_mov_exp = 32;
SHARCParser.RULE_mov_exp_1 = 33;
SHARCParser.RULE_mov_exp_1_1 = 34;
SHARCParser.RULE_mov_exp_1_2 = 35;
SHARCParser.RULE_mov_exp_3a = 36;
SHARCParser.RULE_mov_exp_3b = 37;
SHARCParser.RULE_mov_exp_3c = 38;
SHARCParser.RULE_mov_exp_3d = 39;
SHARCParser.RULE_mov_exp_4a = 40;
SHARCParser.RULE_mov_exp_4b = 41;
SHARCParser.RULE_mov_exp_4c = 42;
SHARCParser.RULE_mov_exp_4d = 43;
SHARCParser.RULE_mov_exp_5 = 44;
SHARCParser.RULE_mov_exp_6a = 45;
SHARCParser.RULE_mov_exp_6b = 46;
SHARCParser.RULE_mov_exp_7 = 47;
SHARCParser.RULE_mem_addr_ia_mb = 48;
SHARCParser.RULE_mem_addr_ic_md = 49;
SHARCParser.RULE_mem_addr_md_ic = 50;
SHARCParser.RULE_mem_addr_mb_ia = 51;
SHARCParser.RULE_mem_addr_ia_int = 52;
SHARCParser.RULE_mem_addr_ic_int = 53;
SHARCParser.RULE_mem_addr_int_ia = 54;
SHARCParser.RULE_mem_addr_int_ic = 55;
SHARCParser.RULE_mem_addr_int = 56;
SHARCParser.RULE_mem_addr_int_ = 57;
SHARCParser.RULE_mem_addr_dm_ia_mb = 58;
SHARCParser.RULE_mem_addr_pm_ic_md = 59;
SHARCParser.RULE_mem_addr_dm_mb_ia = 60;
SHARCParser.RULE_mem_addr_pm_md_ic = 61;
SHARCParser.RULE_mem_addr_dm_ia_int = 62;
SHARCParser.RULE_mem_addr_pm_ic_int = 63;
SHARCParser.RULE_mem_addr_dm_int_ia = 64;
SHARCParser.RULE_mem_addr_pm_int_ic = 65;
SHARCParser.RULE_mem_addr_dm_int = 66;
SHARCParser.RULE_mem_addr_pm_int = 67;
SHARCParser.RULE_fixpoint_alu_op = 68;
SHARCParser.RULE_r_exp = 69;
SHARCParser.RULE_floating_point_alu_op = 70;
SHARCParser.RULE_f_exp = 71;
SHARCParser.RULE_multi_op = 72;
SHARCParser.RULE_multi_r = 73;
SHARCParser.RULE_multi_exp_r = 74;
SHARCParser.RULE_multi_exp_mrf = 75;
SHARCParser.RULE_multi_exp_mrb = 76;
SHARCParser.RULE_mr = 77;
SHARCParser.RULE_shifter_op = 78;
SHARCParser.RULE_shifter_exp = 79;
SHARCParser.RULE_sec_op = 80;
SHARCParser.RULE_sec_op2 = 81;
SHARCParser.RULE_bit_data = 82;
SHARCParser.RULE_add_or_sub = 83;
SHARCParser.RULE_dual_op = 84;
SHARCParser.RULE_dual_add_r = 85;
SHARCParser.RULE_parallel_multi = 86;
SHARCParser.RULE_flow_control_exp = 87;
SHARCParser.RULE_flow_contorl_8 = 88;
SHARCParser.RULE_flow_contorl_8_exp = 89;
SHARCParser.RULE_flow_control_9_and_11 = 90;
SHARCParser.RULE_flow_control_9_and_11_exp = 91;
SHARCParser.RULE_flow_control_10 = 92;
SHARCParser.RULE_flow_control_10_frag = 93;
SHARCParser.RULE_flow_control_12 = 94;
SHARCParser.RULE_lcntr_v = 95;
SHARCParser.RULE_flow_control_13 = 96;
SHARCParser.RULE_flow_control_8a = 97;
SHARCParser.RULE_flow_control_8b = 98;
SHARCParser.RULE_flow_control_9a = 99;
SHARCParser.RULE_flow_control_9b = 100;
SHARCParser.RULE_flow_control_11a = 101;
SHARCParser.RULE_flow_control_11b = 102;
SHARCParser.RULE_jump_addr_int_or_pc = 103;
SHARCParser.RULE_jump_addr_md_or_pc = 104;
SHARCParser.RULE_jump_addr_pc = 105;
SHARCParser.RULE_jump_addr_int = 106;
SHARCParser.RULE_jump_modifier = 107;
SHARCParser.RULE_jump_modifier_ = 108;
SHARCParser.RULE_jump_modifier_1 = 109;
SHARCParser.RULE_jump_modifier2 = 110;
SHARCParser.RULE_jump_modifier3 = 111;
SHARCParser.RULE_jump_modifier3_ = 112;
SHARCParser.RULE_jump_modifier3_1 = 113;
SHARCParser.RULE_imm_mov_exp = 114;
SHARCParser.RULE_imm_mov_14a = 115;
SHARCParser.RULE_imm_mov_15a = 116;
SHARCParser.RULE_imm_mov_14b = 117;
SHARCParser.RULE_imm_mov_15b = 118;
SHARCParser.RULE_imm_mov_16 = 119;
SHARCParser.RULE_imm_mov_17 = 120;
SHARCParser.RULE_u_reg2 = 121;
SHARCParser.RULE_misc_exp = 122;
SHARCParser.RULE_misc_20 = 123;
SHARCParser.RULE_directive_exp = 124;
SHARCParser.RULE_b_reg = 125;
SHARCParser.RULE_l_reg = 126;
SHARCParser.RULE_r_reg = 127;
SHARCParser.RULE_f_reg = 128;
SHARCParser.RULE_s_reg = 129;
SHARCParser.RULE_ia = 130;
SHARCParser.RULE_mb = 131;
SHARCParser.RULE_ic = 132;
SHARCParser.RULE_md = 133;
SHARCParser.RULE_i_reg = 134;
SHARCParser.RULE_m_reg = 135;
SHARCParser.RULE_dag_reg = 136;
SHARCParser.RULE_d_reg = 137;
SHARCParser.RULE_u_reg = 138;
SHARCParser.RULE_condition = 139;
SHARCParser.RULE_ccondition = 140;
SHARCParser.RULE_multi_mod1 = 141;
SHARCParser.RULE_multi_mod1_ = 142;
SHARCParser.RULE_multi_mod2 = 143;
SHARCParser.RULE_multi_mod2_ = 144;
SHARCParser.RULE_r3_0 = 145;
SHARCParser.RULE_r7_4 = 146;
SHARCParser.RULE_r11_8 = 147;
SHARCParser.RULE_r15_12 = 148;
SHARCParser.RULE_f3_0 = 149;
SHARCParser.RULE_f7_4 = 150;
SHARCParser.RULE_f11_8 = 151;
SHARCParser.RULE_f15_12 = 152;
SHARCParser.RULE_addr = 153;
SHARCParser.RULE_mrf = 154;
SHARCParser.RULE_mrb = 155;

class ProgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_prog;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SHARCParser.SEMICOLON);
	    } else {
	        return this.getToken(SHARCParser.SEMICOLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterProg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitProg(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_statement;
    }

	stmt_atom() {
	    return this.getTypedRuleContext(Stmt_atomContext,0);
	};

	ID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SHARCParser.ID);
	    } else {
	        return this.getToken(SHARCParser.ID, i);
	    }
	};


	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SHARCParser.COLON);
	    } else {
	        return this.getToken(SHARCParser.COLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitStatement(this);
		}
	}


}



class Stmt_atomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_stmt_atom;
    }

	stmt() {
	    return this.getTypedRuleContext(StmtContext,0);
	};

	sec() {
	    return this.getTypedRuleContext(SecContext,0);
	};

	seg() {
	    return this.getTypedRuleContext(SegContext,0);
	};

	end_seg() {
	    return this.getTypedRuleContext(End_segContext,0);
	};

	directive_exp() {
	    return this.getTypedRuleContext(Directive_expContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterStmt_atom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitStmt_atom(this);
		}
	}


}



class SecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_sec;
    }

	DOT_SECTION() {
	    return this.getToken(SHARCParser.DOT_SECTION, 0);
	};

	seg_qualifier() {
	    return this.getTypedRuleContext(Seg_qualifierContext,0);
	};

	ID() {
	    return this.getToken(SHARCParser.ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterSec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitSec(this);
		}
	}


}



class SegContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_seg;
    }

	DOT_SEGMENT() {
	    return this.getToken(SHARCParser.DOT_SEGMENT, 0);
	};

	seg_qualifier() {
	    return this.getTypedRuleContext(Seg_qualifierContext,0);
	};

	ID() {
	    return this.getToken(SHARCParser.ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterSeg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitSeg(this);
		}
	}


}



class End_segContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_end_seg;
    }

	DOT_ENDSEG() {
	    return this.getToken(SHARCParser.DOT_ENDSEG, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterEnd_seg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitEnd_seg(this);
		}
	}


}



class Seg_qualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_seg_qualifier;
    }

	seg_qualifier1() {
	    return this.getTypedRuleContext(Seg_qualifier1Context,0);
	};

	seg_qualifier2() {
	    return this.getTypedRuleContext(Seg_qualifier2Context,0);
	};

	seg_qualifier3() {
	    return this.getTypedRuleContext(Seg_qualifier3Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterSeg_qualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitSeg_qualifier(this);
		}
	}


}



class Seg_qualifier1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_seg_qualifier1;
    }

	DIV() {
	    return this.getToken(SHARCParser.DIV, 0);
	};

	seg_qualifier_1() {
	    return this.getTypedRuleContext(Seg_qualifier_1Context,0);
	};

	seg_qualifier_2() {
	    return this.getTypedRuleContext(Seg_qualifier_2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterSeg_qualifier1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitSeg_qualifier1(this);
		}
	}


}



class Seg_qualifier2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_seg_qualifier2;
    }

	DIV() {
	    return this.getToken(SHARCParser.DIV, 0);
	};

	seg_qualifier_3() {
	    return this.getTypedRuleContext(Seg_qualifier_3Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterSeg_qualifier2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitSeg_qualifier2(this);
		}
	}


}



class Seg_qualifier3Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_seg_qualifier3;
    }

	DIV() {
	    return this.getToken(SHARCParser.DIV, 0);
	};

	DMAONLY() {
	    return this.getToken(SHARCParser.DMAONLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterSeg_qualifier3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitSeg_qualifier3(this);
		}
	}


}



class Seg_qualifier_1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_seg_qualifier_1;
    }

	PM() {
	    return this.getToken(SHARCParser.PM, 0);
	};

	CODE() {
	    return this.getToken(SHARCParser.CODE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterSeg_qualifier_1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitSeg_qualifier_1(this);
		}
	}


}



class Seg_qualifier_2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_seg_qualifier_2;
    }

	DM() {
	    return this.getToken(SHARCParser.DM, 0);
	};

	DATA() {
	    return this.getToken(SHARCParser.DATA, 0);
	};

	DATA64() {
	    return this.getToken(SHARCParser.DATA64, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterSeg_qualifier_2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitSeg_qualifier_2(this);
		}
	}


}



class Seg_qualifier_3Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_seg_qualifier_3;
    }

	NO_INIT() {
	    return this.getToken(SHARCParser.NO_INIT, 0);
	};

	ZERO_INIT() {
	    return this.getToken(SHARCParser.ZERO_INIT, 0);
	};

	RUNTIME_INIT() {
	    return this.getToken(SHARCParser.RUNTIME_INIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterSeg_qualifier_3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitSeg_qualifier_3(this);
		}
	}


}



class StmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_stmt;
    }

	compute() {
	    return this.getTypedRuleContext(ComputeContext,0);
	};

	flow_control_exp() {
	    return this.getTypedRuleContext(Flow_control_expContext,0);
	};

	imm_mov_exp() {
	    return this.getTypedRuleContext(Imm_mov_expContext,0);
	};

	misc_exp() {
	    return this.getTypedRuleContext(Misc_expContext,0);
	};

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	if_compute_mov() {
	    return this.getTypedRuleContext(If_compute_movContext,0);
	};

	compute_mov_exp() {
	    return this.getTypedRuleContext(Compute_mov_expContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitStmt(this);
		}
	}


}



class DeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_declaration;
    }

	DOT_VAR() {
	    return this.getToken(SHARCParser.DOT_VAR, 0);
	};

	declaration_exp1() {
	    return this.getTypedRuleContext(Declaration_exp1Context,0);
	};

	declaration_exp2() {
	    return this.getTypedRuleContext(Declaration_exp2Context,0);
	};

	declaration_exp3() {
	    return this.getTypedRuleContext(Declaration_exp3Context,0);
	};

	declaration_exp4() {
	    return this.getTypedRuleContext(Declaration_exp4Context,0);
	};

	declaration_exp5() {
	    return this.getTypedRuleContext(Declaration_exp5Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitDeclaration(this);
		}
	}


}



class Declaration_exp1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_declaration_exp1;
    }

	ID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SHARCParser.ID);
	    } else {
	        return this.getToken(SHARCParser.ID, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SHARCParser.COMMA);
	    } else {
	        return this.getToken(SHARCParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterDeclaration_exp1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitDeclaration_exp1(this);
		}
	}


}



class Declaration_exp2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_declaration_exp2;
    }

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	initExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InitExpressionContext);
	    } else {
	        return this.getTypedRuleContext(InitExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SHARCParser.COMMA);
	    } else {
	        return this.getToken(SHARCParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterDeclaration_exp2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitDeclaration_exp2(this);
		}
	}


}



class Declaration_exp3Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_declaration_exp3;
    }

	ID() {
	    return this.getToken(SHARCParser.ID, 0);
	};

	LBRACKET() {
	    return this.getToken(SHARCParser.LBRACKET, 0);
	};

	RBRACKET() {
	    return this.getToken(SHARCParser.RBRACKET, 0);
	};

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	declaration_exp_f2() {
	    return this.getTypedRuleContext(Declaration_exp_f2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterDeclaration_exp3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitDeclaration_exp3(this);
		}
	}


}



class Declaration_exp4Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_declaration_exp4;
    }

	ID() {
	    return this.getToken(SHARCParser.ID, 0);
	};

	LBRACKET() {
	    return this.getToken(SHARCParser.LBRACKET, 0);
	};

	value_exp() {
	    return this.getTypedRuleContext(Value_expContext,0);
	};

	RBRACKET() {
	    return this.getToken(SHARCParser.RBRACKET, 0);
	};

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	declaration_exp_f2() {
	    return this.getTypedRuleContext(Declaration_exp_f2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterDeclaration_exp4(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitDeclaration_exp4(this);
		}
	}


}



class Declaration_exp5Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_declaration_exp5;
    }

	ID() {
	    return this.getToken(SHARCParser.ID, 0);
	};

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	value_exp() {
	    return this.getTypedRuleContext(Value_expContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterDeclaration_exp5(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitDeclaration_exp5(this);
		}
	}


}



class Declaration_exp_f1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_declaration_exp_f1;
    }

	initExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InitExpressionContext);
	    } else {
	        return this.getTypedRuleContext(InitExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SHARCParser.COMMA);
	    } else {
	        return this.getToken(SHARCParser.COMMA, i);
	    }
	};


	StringLiteral() {
	    return this.getToken(SHARCParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterDeclaration_exp_f1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitDeclaration_exp_f1(this);
		}
	}


}



class Declaration_exp_f2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_declaration_exp_f2;
    }

	LBRACE() {
	    return this.getToken(SHARCParser.LBRACE, 0);
	};

	declaration_exp_f1() {
	    return this.getTypedRuleContext(Declaration_exp_f1Context,0);
	};

	RBRACE() {
	    return this.getToken(SHARCParser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterDeclaration_exp_f2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitDeclaration_exp_f2(this);
		}
	}


}



class InitExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_initExpression;
    }

	value_exp() {
	    return this.getTypedRuleContext(Value_expContext,0);
	};

	CharLiteral() {
	    return this.getToken(SHARCParser.CharLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterInitExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitInitExpression(this);
		}
	}


}



class Var_addrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_var_addr;
    }

	AT() {
	    return this.getToken(SHARCParser.AT, 0);
	};

	ID() {
	    return this.getToken(SHARCParser.ID, 0);
	};

	LENGTH() {
	    return this.getToken(SHARCParser.LENGTH, 0);
	};

	LPARENTHESE() {
	    return this.getToken(SHARCParser.LPARENTHESE, 0);
	};

	RPARENTHESE() {
	    return this.getToken(SHARCParser.RPARENTHESE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterVar_addr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitVar_addr(this);
		}
	}


}



class Value_expContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_value_exp;
    }

	value_exp2() {
	    return this.getTypedRuleContext(Value_exp2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterValue_exp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitValue_exp(this);
		}
	}


}



class Value_exp2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_value_exp2;
    }

	term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermContext);
	    } else {
	        return this.getTypedRuleContext(TermContext,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SHARCParser.PLUS);
	    } else {
	        return this.getToken(SHARCParser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SHARCParser.MINUS);
	    } else {
	        return this.getToken(SHARCParser.MINUS, i);
	    }
	};


	MULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SHARCParser.MULT);
	    } else {
	        return this.getToken(SHARCParser.MULT, i);
	    }
	};


	DIV = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SHARCParser.DIV);
	    } else {
	        return this.getToken(SHARCParser.DIV, i);
	    }
	};


	DIV_MOD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SHARCParser.DIV_MOD);
	    } else {
	        return this.getToken(SHARCParser.DIV_MOD, i);
	    }
	};


	I_OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SHARCParser.I_OR);
	    } else {
	        return this.getToken(SHARCParser.I_OR, i);
	    }
	};


	I_XOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SHARCParser.I_XOR);
	    } else {
	        return this.getToken(SHARCParser.I_XOR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterValue_exp2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitValue_exp2(this);
		}
	}


}



class TermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_term;
        this.op = null; // Token
    }

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	MINUS() {
	    return this.getToken(SHARCParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitTerm(this);
		}
	}


}



class FactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_factor;
    }

	atom() {
	    return this.getTypedRuleContext(AtomContext,0);
	};

	LPARENTHESE() {
	    return this.getToken(SHARCParser.LPARENTHESE, 0);
	};

	value_exp2() {
	    return this.getTypedRuleContext(Value_exp2Context,0);
	};

	RPARENTHESE() {
	    return this.getToken(SHARCParser.RPARENTHESE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitFactor(this);
		}
	}


}



class AtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_atom;
    }

	INT() {
	    return this.getToken(SHARCParser.INT, 0);
	};

	var_addr() {
	    return this.getTypedRuleContext(Var_addrContext,0);
	};

	ID() {
	    return this.getToken(SHARCParser.ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitAtom(this);
		}
	}


}



class ComputeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_compute;
    }

	dual_op() {
	    return this.getTypedRuleContext(Dual_opContext,0);
	};

	fixpoint_alu_op() {
	    return this.getTypedRuleContext(Fixpoint_alu_opContext,0);
	};

	floating_point_alu_op() {
	    return this.getTypedRuleContext(Floating_point_alu_opContext,0);
	};

	multi_op() {
	    return this.getTypedRuleContext(Multi_opContext,0);
	};

	shifter_op() {
	    return this.getTypedRuleContext(Shifter_opContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterCompute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitCompute(this);
		}
	}


}



class If_compute_movContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_if_compute_mov;
    }

	IF() {
	    return this.getToken(SHARCParser.IF, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	if_compute_mov_exp() {
	    return this.getTypedRuleContext(If_compute_mov_expContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterIf_compute_mov(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitIf_compute_mov(this);
		}
	}


}



class If_compute_mov_expContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_if_compute_mov_exp;
    }

	compute_mov_exp() {
	    return this.getTypedRuleContext(Compute_mov_expContext,0);
	};

	compute() {
	    return this.getTypedRuleContext(ComputeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterIf_compute_mov_exp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitIf_compute_mov_exp(this);
		}
	}


}



class Compute_mov_expContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_compute_mov_exp;
    }

	mov_exp_1() {
	    return this.getTypedRuleContext(Mov_exp_1Context,0);
	};

	mov_exp_3a() {
	    return this.getTypedRuleContext(Mov_exp_3aContext,0);
	};

	mov_exp_3b() {
	    return this.getTypedRuleContext(Mov_exp_3bContext,0);
	};

	mov_exp_3c() {
	    return this.getTypedRuleContext(Mov_exp_3cContext,0);
	};

	mov_exp_3d() {
	    return this.getTypedRuleContext(Mov_exp_3dContext,0);
	};

	mov_exp_4a() {
	    return this.getTypedRuleContext(Mov_exp_4aContext,0);
	};

	mov_exp_4b() {
	    return this.getTypedRuleContext(Mov_exp_4bContext,0);
	};

	mov_exp_4c() {
	    return this.getTypedRuleContext(Mov_exp_4cContext,0);
	};

	mov_exp_4d() {
	    return this.getTypedRuleContext(Mov_exp_4dContext,0);
	};

	mov_exp_5() {
	    return this.getTypedRuleContext(Mov_exp_5Context,0);
	};

	mov_exp_7() {
	    return this.getTypedRuleContext(Mov_exp_7Context,0);
	};

	compute() {
	    return this.getTypedRuleContext(ComputeContext,0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterCompute_mov_exp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitCompute_mov_exp(this);
		}
	}


}



class Mov_exp_1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mov_exp_1;
    }

	mov_exp_1_1() {
	    return this.getTypedRuleContext(Mov_exp_1_1Context,0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	mov_exp_1_2() {
	    return this.getTypedRuleContext(Mov_exp_1_2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMov_exp_1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMov_exp_1(this);
		}
	}


}



class Mov_exp_1_1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mov_exp_1_1;
    }

	mem_addr_dm_ia_mb() {
	    return this.getTypedRuleContext(Mem_addr_dm_ia_mbContext,0);
	};

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	d_reg() {
	    return this.getTypedRuleContext(D_regContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMov_exp_1_1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMov_exp_1_1(this);
		}
	}


}



class Mov_exp_1_2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mov_exp_1_2;
    }

	mem_addr_pm_ic_md() {
	    return this.getTypedRuleContext(Mem_addr_pm_ic_mdContext,0);
	};

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	d_reg() {
	    return this.getTypedRuleContext(D_regContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMov_exp_1_2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMov_exp_1_2(this);
		}
	}


}



class Mov_exp_3aContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mov_exp_3a;
    }

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	u_reg() {
	    return this.getTypedRuleContext(U_regContext,0);
	};

	mem_addr_dm_ia_mb() {
	    return this.getTypedRuleContext(Mem_addr_dm_ia_mbContext,0);
	};

	mem_addr_pm_ic_md() {
	    return this.getTypedRuleContext(Mem_addr_pm_ic_mdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMov_exp_3a(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMov_exp_3a(this);
		}
	}


}



class Mov_exp_3bContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mov_exp_3b;
    }

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	u_reg() {
	    return this.getTypedRuleContext(U_regContext,0);
	};

	mem_addr_dm_mb_ia() {
	    return this.getTypedRuleContext(Mem_addr_dm_mb_iaContext,0);
	};

	mem_addr_pm_md_ic() {
	    return this.getTypedRuleContext(Mem_addr_pm_md_icContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMov_exp_3b(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMov_exp_3b(this);
		}
	}


}



class Mov_exp_3cContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mov_exp_3c;
    }

	u_reg() {
	    return this.getTypedRuleContext(U_regContext,0);
	};

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	mem_addr_dm_ia_mb() {
	    return this.getTypedRuleContext(Mem_addr_dm_ia_mbContext,0);
	};

	mem_addr_pm_ic_md() {
	    return this.getTypedRuleContext(Mem_addr_pm_ic_mdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMov_exp_3c(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMov_exp_3c(this);
		}
	}


}



class Mov_exp_3dContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mov_exp_3d;
    }

	u_reg() {
	    return this.getTypedRuleContext(U_regContext,0);
	};

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	mem_addr_dm_mb_ia() {
	    return this.getTypedRuleContext(Mem_addr_dm_mb_iaContext,0);
	};

	mem_addr_pm_md_ic() {
	    return this.getTypedRuleContext(Mem_addr_pm_md_icContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMov_exp_3d(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMov_exp_3d(this);
		}
	}


}



class Mov_exp_4aContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mov_exp_4a;
    }

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	d_reg() {
	    return this.getTypedRuleContext(D_regContext,0);
	};

	mem_addr_dm_ia_int() {
	    return this.getTypedRuleContext(Mem_addr_dm_ia_intContext,0);
	};

	mem_addr_pm_ic_int() {
	    return this.getTypedRuleContext(Mem_addr_pm_ic_intContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMov_exp_4a(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMov_exp_4a(this);
		}
	}


}



class Mov_exp_4bContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mov_exp_4b;
    }

	imm_mov_15a() {
	    return this.getTypedRuleContext(Imm_mov_15aContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMov_exp_4b(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMov_exp_4b(this);
		}
	}


}



class Mov_exp_4cContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mov_exp_4c;
    }

	d_reg() {
	    return this.getTypedRuleContext(D_regContext,0);
	};

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	mem_addr_dm_ia_int() {
	    return this.getTypedRuleContext(Mem_addr_dm_ia_intContext,0);
	};

	mem_addr_pm_ic_int() {
	    return this.getTypedRuleContext(Mem_addr_pm_ic_intContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMov_exp_4c(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMov_exp_4c(this);
		}
	}


}



class Mov_exp_4dContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mov_exp_4d;
    }

	imm_mov_15b() {
	    return this.getTypedRuleContext(Imm_mov_15bContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMov_exp_4d(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMov_exp_4d(this);
		}
	}


}



class Mov_exp_5Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mov_exp_5;
    }

	u_reg2() {
	    return this.getTypedRuleContext(U_reg2Context,0);
	};

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	u_reg() {
	    return this.getTypedRuleContext(U_regContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMov_exp_5(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMov_exp_5(this);
		}
	}


}



class Mov_exp_6aContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mov_exp_6a;
    }

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	d_reg() {
	    return this.getTypedRuleContext(D_regContext,0);
	};

	mem_addr_dm_ia_mb() {
	    return this.getTypedRuleContext(Mem_addr_dm_ia_mbContext,0);
	};

	mem_addr_pm_ic_md() {
	    return this.getTypedRuleContext(Mem_addr_pm_ic_mdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMov_exp_6a(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMov_exp_6a(this);
		}
	}


}



class Mov_exp_6bContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mov_exp_6b;
    }

	d_reg() {
	    return this.getTypedRuleContext(D_regContext,0);
	};

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	mem_addr_dm_ia_mb() {
	    return this.getTypedRuleContext(Mem_addr_dm_ia_mbContext,0);
	};

	mem_addr_pm_ic_md() {
	    return this.getTypedRuleContext(Mem_addr_pm_ic_mdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMov_exp_6b(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMov_exp_6b(this);
		}
	}


}



class Mov_exp_7Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mov_exp_7;
    }

	MODIFY() {
	    return this.getToken(SHARCParser.MODIFY, 0);
	};

	LPARENTHESE() {
	    return this.getToken(SHARCParser.LPARENTHESE, 0);
	};

	ia() {
	    return this.getTypedRuleContext(IaContext,0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	mb() {
	    return this.getTypedRuleContext(MbContext,0);
	};

	RPARENTHESE() {
	    return this.getToken(SHARCParser.RPARENTHESE, 0);
	};

	ic() {
	    return this.getTypedRuleContext(IcContext,0);
	};

	md() {
	    return this.getTypedRuleContext(MdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMov_exp_7(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMov_exp_7(this);
		}
	}


}



class Mem_addr_ia_mbContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mem_addr_ia_mb;
    }

	LPARENTHESE() {
	    return this.getToken(SHARCParser.LPARENTHESE, 0);
	};

	ia() {
	    return this.getTypedRuleContext(IaContext,0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	mb() {
	    return this.getTypedRuleContext(MbContext,0);
	};

	RPARENTHESE() {
	    return this.getToken(SHARCParser.RPARENTHESE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMem_addr_ia_mb(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMem_addr_ia_mb(this);
		}
	}


}



class Mem_addr_ic_mdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mem_addr_ic_md;
    }

	LPARENTHESE() {
	    return this.getToken(SHARCParser.LPARENTHESE, 0);
	};

	ic() {
	    return this.getTypedRuleContext(IcContext,0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	md() {
	    return this.getTypedRuleContext(MdContext,0);
	};

	RPARENTHESE() {
	    return this.getToken(SHARCParser.RPARENTHESE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMem_addr_ic_md(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMem_addr_ic_md(this);
		}
	}


}



class Mem_addr_md_icContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mem_addr_md_ic;
    }

	LPARENTHESE() {
	    return this.getToken(SHARCParser.LPARENTHESE, 0);
	};

	md() {
	    return this.getTypedRuleContext(MdContext,0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	ic() {
	    return this.getTypedRuleContext(IcContext,0);
	};

	RPARENTHESE() {
	    return this.getToken(SHARCParser.RPARENTHESE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMem_addr_md_ic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMem_addr_md_ic(this);
		}
	}


}



class Mem_addr_mb_iaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mem_addr_mb_ia;
    }

	LPARENTHESE() {
	    return this.getToken(SHARCParser.LPARENTHESE, 0);
	};

	mb() {
	    return this.getTypedRuleContext(MbContext,0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	ia() {
	    return this.getTypedRuleContext(IaContext,0);
	};

	RPARENTHESE() {
	    return this.getToken(SHARCParser.RPARENTHESE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMem_addr_mb_ia(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMem_addr_mb_ia(this);
		}
	}


}



class Mem_addr_ia_intContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mem_addr_ia_int;
    }

	LPARENTHESE() {
	    return this.getToken(SHARCParser.LPARENTHESE, 0);
	};

	ia() {
	    return this.getTypedRuleContext(IaContext,0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	value_exp() {
	    return this.getTypedRuleContext(Value_expContext,0);
	};

	RPARENTHESE() {
	    return this.getToken(SHARCParser.RPARENTHESE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMem_addr_ia_int(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMem_addr_ia_int(this);
		}
	}


}



class Mem_addr_ic_intContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mem_addr_ic_int;
    }

	LPARENTHESE() {
	    return this.getToken(SHARCParser.LPARENTHESE, 0);
	};

	ic() {
	    return this.getTypedRuleContext(IcContext,0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	value_exp() {
	    return this.getTypedRuleContext(Value_expContext,0);
	};

	RPARENTHESE() {
	    return this.getToken(SHARCParser.RPARENTHESE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMem_addr_ic_int(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMem_addr_ic_int(this);
		}
	}


}



class Mem_addr_int_iaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mem_addr_int_ia;
    }

	LPARENTHESE() {
	    return this.getToken(SHARCParser.LPARENTHESE, 0);
	};

	value_exp() {
	    return this.getTypedRuleContext(Value_expContext,0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	ia() {
	    return this.getTypedRuleContext(IaContext,0);
	};

	RPARENTHESE() {
	    return this.getToken(SHARCParser.RPARENTHESE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMem_addr_int_ia(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMem_addr_int_ia(this);
		}
	}


}



class Mem_addr_int_icContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mem_addr_int_ic;
    }

	LPARENTHESE() {
	    return this.getToken(SHARCParser.LPARENTHESE, 0);
	};

	value_exp() {
	    return this.getTypedRuleContext(Value_expContext,0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	ic() {
	    return this.getTypedRuleContext(IcContext,0);
	};

	RPARENTHESE() {
	    return this.getToken(SHARCParser.RPARENTHESE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMem_addr_int_ic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMem_addr_int_ic(this);
		}
	}


}



class Mem_addr_intContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mem_addr_int;
    }


	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMem_addr_int(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMem_addr_int(this);
		}
	}


}



class Mem_addr_int_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mem_addr_int_;
    }

	atom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AtomContext);
	    } else {
	        return this.getTypedRuleContext(AtomContext,i);
	    }
	};

	PLUS() {
	    return this.getToken(SHARCParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(SHARCParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMem_addr_int_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMem_addr_int_(this);
		}
	}


}



class Mem_addr_dm_ia_mbContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mem_addr_dm_ia_mb;
    }

	DM() {
	    return this.getToken(SHARCParser.DM, 0);
	};

	mem_addr_ia_mb() {
	    return this.getTypedRuleContext(Mem_addr_ia_mbContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMem_addr_dm_ia_mb(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMem_addr_dm_ia_mb(this);
		}
	}


}



class Mem_addr_pm_ic_mdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mem_addr_pm_ic_md;
    }

	PM() {
	    return this.getToken(SHARCParser.PM, 0);
	};

	mem_addr_ic_md() {
	    return this.getTypedRuleContext(Mem_addr_ic_mdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMem_addr_pm_ic_md(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMem_addr_pm_ic_md(this);
		}
	}


}



class Mem_addr_dm_mb_iaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mem_addr_dm_mb_ia;
    }

	DM() {
	    return this.getToken(SHARCParser.DM, 0);
	};

	mem_addr_mb_ia() {
	    return this.getTypedRuleContext(Mem_addr_mb_iaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMem_addr_dm_mb_ia(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMem_addr_dm_mb_ia(this);
		}
	}


}



class Mem_addr_pm_md_icContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mem_addr_pm_md_ic;
    }

	PM() {
	    return this.getToken(SHARCParser.PM, 0);
	};

	mem_addr_md_ic() {
	    return this.getTypedRuleContext(Mem_addr_md_icContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMem_addr_pm_md_ic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMem_addr_pm_md_ic(this);
		}
	}


}



class Mem_addr_dm_ia_intContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mem_addr_dm_ia_int;
    }

	DM() {
	    return this.getToken(SHARCParser.DM, 0);
	};

	mem_addr_ia_int() {
	    return this.getTypedRuleContext(Mem_addr_ia_intContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMem_addr_dm_ia_int(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMem_addr_dm_ia_int(this);
		}
	}


}



class Mem_addr_pm_ic_intContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mem_addr_pm_ic_int;
    }

	PM() {
	    return this.getToken(SHARCParser.PM, 0);
	};

	mem_addr_ic_int() {
	    return this.getTypedRuleContext(Mem_addr_ic_intContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMem_addr_pm_ic_int(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMem_addr_pm_ic_int(this);
		}
	}


}



class Mem_addr_dm_int_iaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mem_addr_dm_int_ia;
    }

	DM() {
	    return this.getToken(SHARCParser.DM, 0);
	};

	mem_addr_int_ia() {
	    return this.getTypedRuleContext(Mem_addr_int_iaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMem_addr_dm_int_ia(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMem_addr_dm_int_ia(this);
		}
	}


}



class Mem_addr_pm_int_icContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mem_addr_pm_int_ic;
    }

	PM() {
	    return this.getToken(SHARCParser.PM, 0);
	};

	mem_addr_int_ic() {
	    return this.getTypedRuleContext(Mem_addr_int_icContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMem_addr_pm_int_ic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMem_addr_pm_int_ic(this);
		}
	}


}



class Mem_addr_dm_intContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mem_addr_dm_int;
    }

	DM() {
	    return this.getToken(SHARCParser.DM, 0);
	};

	mem_addr_int() {
	    return this.getTypedRuleContext(Mem_addr_intContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMem_addr_dm_int(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMem_addr_dm_int(this);
		}
	}


}



class Mem_addr_pm_intContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mem_addr_pm_int;
    }

	PM() {
	    return this.getToken(SHARCParser.PM, 0);
	};

	mem_addr_int() {
	    return this.getTypedRuleContext(Mem_addr_intContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMem_addr_pm_int(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMem_addr_pm_int(this);
		}
	}


}



class Fixpoint_alu_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_fixpoint_alu_op;
    }

	r_reg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(R_regContext);
	    } else {
	        return this.getTypedRuleContext(R_regContext,i);
	    }
	};

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	r_exp() {
	    return this.getTypedRuleContext(R_expContext,0);
	};

	COMP() {
	    return this.getToken(SHARCParser.COMP, 0);
	};

	LPARENTHESE() {
	    return this.getToken(SHARCParser.LPARENTHESE, 0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	RPARENTHESE() {
	    return this.getToken(SHARCParser.RPARENTHESE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterFixpoint_alu_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitFixpoint_alu_op(this);
		}
	}


}



class R_expContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_r_exp;
    }

	r_reg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(R_regContext);
	    } else {
	        return this.getTypedRuleContext(R_regContext,i);
	    }
	};

	add_or_sub() {
	    return this.getTypedRuleContext(Add_or_subContext,0);
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SHARCParser.PLUS);
	    } else {
	        return this.getToken(SHARCParser.PLUS, i);
	    }
	};


	CI() {
	    return this.getToken(SHARCParser.CI, 0);
	};

	MINUS() {
	    return this.getToken(SHARCParser.MINUS, 0);
	};

	INT() {
	    return this.getToken(SHARCParser.INT, 0);
	};

	LPARENTHESE() {
	    return this.getToken(SHARCParser.LPARENTHESE, 0);
	};

	RPARENTHESE() {
	    return this.getToken(SHARCParser.RPARENTHESE, 0);
	};

	DIV() {
	    return this.getToken(SHARCParser.DIV, 0);
	};

	ABS() {
	    return this.getToken(SHARCParser.ABS, 0);
	};

	PASS() {
	    return this.getToken(SHARCParser.PASS, 0);
	};

	AND() {
	    return this.getToken(SHARCParser.AND, 0);
	};

	OR() {
	    return this.getToken(SHARCParser.OR, 0);
	};

	XOR() {
	    return this.getToken(SHARCParser.XOR, 0);
	};

	NOT() {
	    return this.getToken(SHARCParser.NOT, 0);
	};

	MIN() {
	    return this.getToken(SHARCParser.MIN, 0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	MAX() {
	    return this.getToken(SHARCParser.MAX, 0);
	};

	CLIP() {
	    return this.getToken(SHARCParser.CLIP, 0);
	};

	BY() {
	    return this.getToken(SHARCParser.BY, 0);
	};

	MANT() {
	    return this.getToken(SHARCParser.MANT, 0);
	};

	f_reg() {
	    return this.getTypedRuleContext(F_regContext,0);
	};

	LOGB() {
	    return this.getToken(SHARCParser.LOGB, 0);
	};

	FIX() {
	    return this.getToken(SHARCParser.FIX, 0);
	};

	TRUNC() {
	    return this.getToken(SHARCParser.TRUNC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterR_exp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitR_exp(this);
		}
	}


}



class Floating_point_alu_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_floating_point_alu_op;
    }

	f_reg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(F_regContext);
	    } else {
	        return this.getTypedRuleContext(F_regContext,i);
	    }
	};

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	f_exp() {
	    return this.getTypedRuleContext(F_expContext,0);
	};

	COMP() {
	    return this.getToken(SHARCParser.COMP, 0);
	};

	LPARENTHESE() {
	    return this.getToken(SHARCParser.LPARENTHESE, 0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	RPARENTHESE() {
	    return this.getToken(SHARCParser.RPARENTHESE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterFloating_point_alu_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitFloating_point_alu_op(this);
		}
	}


}



class F_expContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_f_exp;
    }

	f_reg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(F_regContext);
	    } else {
	        return this.getTypedRuleContext(F_regContext,i);
	    }
	};

	PLUS() {
	    return this.getToken(SHARCParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(SHARCParser.MINUS, 0);
	};

	ABS() {
	    return this.getToken(SHARCParser.ABS, 0);
	};

	LPARENTHESE() {
	    return this.getToken(SHARCParser.LPARENTHESE, 0);
	};

	RPARENTHESE() {
	    return this.getToken(SHARCParser.RPARENTHESE, 0);
	};

	DIV() {
	    return this.getToken(SHARCParser.DIV, 0);
	};

	INT() {
	    return this.getToken(SHARCParser.INT, 0);
	};

	PASS() {
	    return this.getToken(SHARCParser.PASS, 0);
	};

	RND() {
	    return this.getToken(SHARCParser.RND, 0);
	};

	SCALB() {
	    return this.getToken(SHARCParser.SCALB, 0);
	};

	BY() {
	    return this.getToken(SHARCParser.BY, 0);
	};

	r_reg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(R_regContext);
	    } else {
	        return this.getTypedRuleContext(R_regContext,i);
	    }
	};

	FLOAT() {
	    return this.getToken(SHARCParser.FLOAT, 0);
	};

	RECIPS() {
	    return this.getToken(SHARCParser.RECIPS, 0);
	};

	RSQRTS() {
	    return this.getToken(SHARCParser.RSQRTS, 0);
	};

	COPYSIGN() {
	    return this.getToken(SHARCParser.COPYSIGN, 0);
	};

	MIN() {
	    return this.getToken(SHARCParser.MIN, 0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	MAX() {
	    return this.getToken(SHARCParser.MAX, 0);
	};

	CLIP() {
	    return this.getToken(SHARCParser.CLIP, 0);
	};

	MULT() {
	    return this.getToken(SHARCParser.MULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterF_exp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitF_exp(this);
		}
	}


}



class Multi_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_multi_op;
    }

	r_reg() {
	    return this.getTypedRuleContext(R_regContext,0);
	};

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	multi_exp_r() {
	    return this.getTypedRuleContext(Multi_exp_rContext,0);
	};

	MRF() {
	    return this.getToken(SHARCParser.MRF, 0);
	};

	multi_exp_mrf() {
	    return this.getTypedRuleContext(Multi_exp_mrfContext,0);
	};

	MRB() {
	    return this.getToken(SHARCParser.MRB, 0);
	};

	multi_exp_mrb() {
	    return this.getTypedRuleContext(Multi_exp_mrbContext,0);
	};

	mr() {
	    return this.getTypedRuleContext(MrContext,0);
	};

	INT() {
	    return this.getToken(SHARCParser.INT, 0);
	};

	mrf() {
	    return this.getTypedRuleContext(MrfContext,0);
	};

	mrb() {
	    return this.getTypedRuleContext(MrbContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMulti_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMulti_op(this);
		}
	}


}



class Multi_rContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_multi_r;
    }

	r_reg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(R_regContext);
	    } else {
	        return this.getTypedRuleContext(R_regContext,i);
	    }
	};

	MULT() {
	    return this.getToken(SHARCParser.MULT, 0);
	};

	multi_mod2() {
	    return this.getTypedRuleContext(Multi_mod2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMulti_r(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMulti_r(this);
		}
	}


}



class Multi_exp_rContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_multi_exp_r;
    }

	multi_r() {
	    return this.getTypedRuleContext(Multi_rContext,0);
	};

	mr() {
	    return this.getTypedRuleContext(MrContext,0);
	};

	add_or_sub() {
	    return this.getTypedRuleContext(Add_or_subContext,0);
	};

	SAT() {
	    return this.getToken(SHARCParser.SAT, 0);
	};

	multi_mod1() {
	    return this.getTypedRuleContext(Multi_mod1Context,0);
	};

	RND() {
	    return this.getToken(SHARCParser.RND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMulti_exp_r(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMulti_exp_r(this);
		}
	}


}



class Multi_exp_mrfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_multi_exp_mrf;
    }

	multi_r() {
	    return this.getTypedRuleContext(Multi_rContext,0);
	};

	MRF() {
	    return this.getToken(SHARCParser.MRF, 0);
	};

	add_or_sub() {
	    return this.getTypedRuleContext(Add_or_subContext,0);
	};

	SAT() {
	    return this.getToken(SHARCParser.SAT, 0);
	};

	multi_mod1() {
	    return this.getTypedRuleContext(Multi_mod1Context,0);
	};

	RND() {
	    return this.getToken(SHARCParser.RND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMulti_exp_mrf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMulti_exp_mrf(this);
		}
	}


}



class Multi_exp_mrbContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_multi_exp_mrb;
    }

	multi_r() {
	    return this.getTypedRuleContext(Multi_rContext,0);
	};

	MRB() {
	    return this.getToken(SHARCParser.MRB, 0);
	};

	add_or_sub() {
	    return this.getTypedRuleContext(Add_or_subContext,0);
	};

	SAT() {
	    return this.getToken(SHARCParser.SAT, 0);
	};

	multi_mod1() {
	    return this.getTypedRuleContext(Multi_mod1Context,0);
	};

	RND() {
	    return this.getToken(SHARCParser.RND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMulti_exp_mrb(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMulti_exp_mrb(this);
		}
	}


}



class MrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mr;
    }

	MRB() {
	    return this.getToken(SHARCParser.MRB, 0);
	};

	MRF() {
	    return this.getToken(SHARCParser.MRF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMr(this);
		}
	}


}



class Shifter_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_shifter_op;
    }

	r_reg() {
	    return this.getTypedRuleContext(R_regContext,0);
	};

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	shifter_exp() {
	    return this.getTypedRuleContext(Shifter_expContext,0);
	};

	BTST() {
	    return this.getToken(SHARCParser.BTST, 0);
	};

	BY() {
	    return this.getToken(SHARCParser.BY, 0);
	};

	sec_op() {
	    return this.getTypedRuleContext(Sec_opContext,0);
	};

	f_reg() {
	    return this.getTypedRuleContext(F_regContext,0);
	};

	FUNPACK() {
	    return this.getToken(SHARCParser.FUNPACK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterShifter_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitShifter_op(this);
		}
	}


}



class Shifter_expContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_shifter_exp;
    }

	LSHIFT() {
	    return this.getToken(SHARCParser.LSHIFT, 0);
	};

	r_reg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(R_regContext);
	    } else {
	        return this.getTypedRuleContext(R_regContext,i);
	    }
	};

	BY() {
	    return this.getToken(SHARCParser.BY, 0);
	};

	sec_op() {
	    return this.getTypedRuleContext(Sec_opContext,0);
	};

	OR() {
	    return this.getToken(SHARCParser.OR, 0);
	};

	ASHIFT() {
	    return this.getToken(SHARCParser.ASHIFT, 0);
	};

	ROT() {
	    return this.getToken(SHARCParser.ROT, 0);
	};

	BCLR() {
	    return this.getToken(SHARCParser.BCLR, 0);
	};

	BSET() {
	    return this.getToken(SHARCParser.BSET, 0);
	};

	BTGL() {
	    return this.getToken(SHARCParser.BTGL, 0);
	};

	FDEP() {
	    return this.getToken(SHARCParser.FDEP, 0);
	};

	sec_op2() {
	    return this.getTypedRuleContext(Sec_op2Context,0);
	};

	LPARENTHESE() {
	    return this.getToken(SHARCParser.LPARENTHESE, 0);
	};

	SE() {
	    return this.getToken(SHARCParser.SE, 0);
	};

	RPARENTHESE() {
	    return this.getToken(SHARCParser.RPARENTHESE, 0);
	};

	FEXT() {
	    return this.getToken(SHARCParser.FEXT, 0);
	};

	EXP() {
	    return this.getToken(SHARCParser.EXP, 0);
	};

	EX() {
	    return this.getToken(SHARCParser.EX, 0);
	};

	LEFTZ() {
	    return this.getToken(SHARCParser.LEFTZ, 0);
	};

	LEFTO() {
	    return this.getToken(SHARCParser.LEFTO, 0);
	};

	FPACK() {
	    return this.getToken(SHARCParser.FPACK, 0);
	};

	f_reg() {
	    return this.getTypedRuleContext(F_regContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterShifter_exp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitShifter_exp(this);
		}
	}


}



class Sec_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_sec_op;
    }

	r_reg() {
	    return this.getTypedRuleContext(R_regContext,0);
	};

	atom() {
	    return this.getTypedRuleContext(AtomContext,0);
	};

	MINUS() {
	    return this.getToken(SHARCParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterSec_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitSec_op(this);
		}
	}


}



class Sec_op2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_sec_op2;
    }

	r_reg() {
	    return this.getTypedRuleContext(R_regContext,0);
	};

	bit_data() {
	    return this.getTypedRuleContext(Bit_dataContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterSec_op2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitSec_op2(this);
		}
	}


}



class Bit_dataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_bit_data;
    }

	INT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SHARCParser.INT);
	    } else {
	        return this.getToken(SHARCParser.INT, i);
	    }
	};


	COLON() {
	    return this.getToken(SHARCParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterBit_data(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitBit_data(this);
		}
	}


}



class Add_or_subContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_add_or_sub;
    }

	PLUS() {
	    return this.getToken(SHARCParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(SHARCParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterAdd_or_sub(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitAdd_or_sub(this);
		}
	}


}



class Dual_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_dual_op;
    }

	dual_add_r() {
	    return this.getTypedRuleContext(Dual_add_rContext,0);
	};

	parallel_multi() {
	    return this.getTypedRuleContext(Parallel_multiContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterDual_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitDual_op(this);
		}
	}


}



class Dual_add_rContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_dual_add_r;
    }

	r_reg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(R_regContext);
	    } else {
	        return this.getTypedRuleContext(R_regContext,i);
	    }
	};

	EQU = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SHARCParser.EQU);
	    } else {
	        return this.getToken(SHARCParser.EQU, i);
	    }
	};


	PLUS() {
	    return this.getToken(SHARCParser.PLUS, 0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	MINUS() {
	    return this.getToken(SHARCParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterDual_add_r(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitDual_add_r(this);
		}
	}


}



class Parallel_multiContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_parallel_multi;
    }

	multi_op() {
	    return this.getTypedRuleContext(Multi_opContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SHARCParser.COMMA);
	    } else {
	        return this.getToken(SHARCParser.COMMA, i);
	    }
	};


	fixpoint_alu_op = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fixpoint_alu_opContext);
	    } else {
	        return this.getTypedRuleContext(Fixpoint_alu_opContext,i);
	    }
	};

	floating_point_alu_op = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Floating_point_alu_opContext);
	    } else {
	        return this.getTypedRuleContext(Floating_point_alu_opContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterParallel_multi(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitParallel_multi(this);
		}
	}


}



class Flow_control_expContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_flow_control_exp;
    }

	flow_contorl_8() {
	    return this.getTypedRuleContext(Flow_contorl_8Context,0);
	};

	flow_control_9_and_11() {
	    return this.getTypedRuleContext(Flow_control_9_and_11Context,0);
	};

	flow_control_10() {
	    return this.getTypedRuleContext(Flow_control_10Context,0);
	};

	flow_control_8a() {
	    return this.getTypedRuleContext(Flow_control_8aContext,0);
	};

	flow_control_8b() {
	    return this.getTypedRuleContext(Flow_control_8bContext,0);
	};

	flow_control_9a() {
	    return this.getTypedRuleContext(Flow_control_9aContext,0);
	};

	flow_control_9b() {
	    return this.getTypedRuleContext(Flow_control_9bContext,0);
	};

	flow_control_11a() {
	    return this.getTypedRuleContext(Flow_control_11aContext,0);
	};

	flow_control_11b() {
	    return this.getTypedRuleContext(Flow_control_11bContext,0);
	};

	flow_control_12() {
	    return this.getTypedRuleContext(Flow_control_12Context,0);
	};

	flow_control_13() {
	    return this.getTypedRuleContext(Flow_control_13Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterFlow_control_exp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitFlow_control_exp(this);
		}
	}


}



class Flow_contorl_8Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_flow_contorl_8;
    }

	IF() {
	    return this.getToken(SHARCParser.IF, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	flow_contorl_8_exp() {
	    return this.getTypedRuleContext(Flow_contorl_8_expContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterFlow_contorl_8(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitFlow_contorl_8(this);
		}
	}


}



class Flow_contorl_8_expContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_flow_contorl_8_exp;
    }

	flow_control_8a() {
	    return this.getTypedRuleContext(Flow_control_8aContext,0);
	};

	flow_control_8b() {
	    return this.getTypedRuleContext(Flow_control_8bContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterFlow_contorl_8_exp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitFlow_contorl_8_exp(this);
		}
	}


}



class Flow_control_9_and_11Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_flow_control_9_and_11;
    }

	IF() {
	    return this.getToken(SHARCParser.IF, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	flow_control_9_and_11_exp() {
	    return this.getTypedRuleContext(Flow_control_9_and_11_expContext,0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	ELSE() {
	    return this.getToken(SHARCParser.ELSE, 0);
	};

	compute() {
	    return this.getTypedRuleContext(ComputeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterFlow_control_9_and_11(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitFlow_control_9_and_11(this);
		}
	}


}



class Flow_control_9_and_11_expContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_flow_control_9_and_11_exp;
    }

	flow_control_9a() {
	    return this.getTypedRuleContext(Flow_control_9aContext,0);
	};

	flow_control_9b() {
	    return this.getTypedRuleContext(Flow_control_9bContext,0);
	};

	flow_control_11a() {
	    return this.getTypedRuleContext(Flow_control_11aContext,0);
	};

	flow_control_11b() {
	    return this.getTypedRuleContext(Flow_control_11bContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterFlow_control_9_and_11_exp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitFlow_control_9_and_11_exp(this);
		}
	}


}



class Flow_control_10Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_flow_control_10;
    }

	IF() {
	    return this.getToken(SHARCParser.IF, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	JUMP() {
	    return this.getToken(SHARCParser.JUMP, 0);
	};

	flow_control_10_frag() {
	    return this.getTypedRuleContext(Flow_control_10_fragContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SHARCParser.COMMA);
	    } else {
	        return this.getToken(SHARCParser.COMMA, i);
	    }
	};


	ELSE() {
	    return this.getToken(SHARCParser.ELSE, 0);
	};

	mov_exp_1_1() {
	    return this.getTypedRuleContext(Mov_exp_1_1Context,0);
	};

	compute() {
	    return this.getTypedRuleContext(ComputeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterFlow_control_10(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitFlow_control_10(this);
		}
	}


}



class Flow_control_10_fragContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_flow_control_10_frag;
    }

	mem_addr_md_ic() {
	    return this.getTypedRuleContext(Mem_addr_md_icContext,0);
	};

	jump_addr_pc() {
	    return this.getTypedRuleContext(Jump_addr_pcContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterFlow_control_10_frag(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitFlow_control_10_frag(this);
		}
	}


}



class Flow_control_12Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_flow_control_12;
    }

	LCNTR() {
	    return this.getToken(SHARCParser.LCNTR, 0);
	};

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	lcntr_v() {
	    return this.getTypedRuleContext(Lcntr_vContext,0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	DO() {
	    return this.getToken(SHARCParser.DO, 0);
	};

	jump_addr_int_or_pc() {
	    return this.getTypedRuleContext(Jump_addr_int_or_pcContext,0);
	};

	UNTIL() {
	    return this.getToken(SHARCParser.UNTIL, 0);
	};

	LCE() {
	    return this.getToken(SHARCParser.LCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterFlow_control_12(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitFlow_control_12(this);
		}
	}


}



class Lcntr_vContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_lcntr_v;
    }

	value_exp() {
	    return this.getTypedRuleContext(Value_expContext,0);
	};

	u_reg() {
	    return this.getTypedRuleContext(U_regContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterLcntr_v(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitLcntr_v(this);
		}
	}


}



class Flow_control_13Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_flow_control_13;
    }

	DO() {
	    return this.getToken(SHARCParser.DO, 0);
	};

	jump_addr_int_or_pc() {
	    return this.getTypedRuleContext(Jump_addr_int_or_pcContext,0);
	};

	UNTIL() {
	    return this.getToken(SHARCParser.UNTIL, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterFlow_control_13(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitFlow_control_13(this);
		}
	}


}



class Flow_control_8aContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_flow_control_8a;
    }

	JUMP() {
	    return this.getToken(SHARCParser.JUMP, 0);
	};

	jump_addr_int() {
	    return this.getTypedRuleContext(Jump_addr_intContext,0);
	};

	jump_modifier() {
	    return this.getTypedRuleContext(Jump_modifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterFlow_control_8a(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitFlow_control_8a(this);
		}
	}


}



class Flow_control_8bContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_flow_control_8b;
    }

	CALL() {
	    return this.getToken(SHARCParser.CALL, 0);
	};

	jump_addr_int() {
	    return this.getTypedRuleContext(Jump_addr_intContext,0);
	};

	jump_modifier2() {
	    return this.getTypedRuleContext(Jump_modifier2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterFlow_control_8b(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitFlow_control_8b(this);
		}
	}


}



class Flow_control_9aContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_flow_control_9a;
    }

	JUMP() {
	    return this.getToken(SHARCParser.JUMP, 0);
	};

	flow_control_10_frag() {
	    return this.getTypedRuleContext(Flow_control_10_fragContext,0);
	};

	jump_modifier() {
	    return this.getTypedRuleContext(Jump_modifierContext,0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	compute() {
	    return this.getTypedRuleContext(ComputeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterFlow_control_9a(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitFlow_control_9a(this);
		}
	}


}



class Flow_control_9bContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_flow_control_9b;
    }

	CALL() {
	    return this.getToken(SHARCParser.CALL, 0);
	};

	flow_control_10_frag() {
	    return this.getTypedRuleContext(Flow_control_10_fragContext,0);
	};

	jump_modifier2() {
	    return this.getTypedRuleContext(Jump_modifier2Context,0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	compute() {
	    return this.getTypedRuleContext(ComputeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterFlow_control_9b(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitFlow_control_9b(this);
		}
	}


}



class Flow_control_11aContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_flow_control_11a;
    }

	RTS() {
	    return this.getToken(SHARCParser.RTS, 0);
	};

	jump_modifier3() {
	    return this.getTypedRuleContext(Jump_modifier3Context,0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	compute() {
	    return this.getTypedRuleContext(ComputeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterFlow_control_11a(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitFlow_control_11a(this);
		}
	}


}



class Flow_control_11bContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_flow_control_11b;
    }

	RTI() {
	    return this.getToken(SHARCParser.RTI, 0);
	};

	jump_modifier2() {
	    return this.getTypedRuleContext(Jump_modifier2Context,0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	compute() {
	    return this.getTypedRuleContext(ComputeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterFlow_control_11b(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitFlow_control_11b(this);
		}
	}


}



class Jump_addr_int_or_pcContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_jump_addr_int_or_pc;
    }

	jump_addr_int() {
	    return this.getTypedRuleContext(Jump_addr_intContext,0);
	};

	jump_addr_pc() {
	    return this.getTypedRuleContext(Jump_addr_pcContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterJump_addr_int_or_pc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitJump_addr_int_or_pc(this);
		}
	}


}



class Jump_addr_md_or_pcContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_jump_addr_md_or_pc;
    }

	mem_addr_md_ic() {
	    return this.getTypedRuleContext(Mem_addr_md_icContext,0);
	};

	jump_addr_pc() {
	    return this.getTypedRuleContext(Jump_addr_pcContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterJump_addr_md_or_pc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitJump_addr_md_or_pc(this);
		}
	}


}



class Jump_addr_pcContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_jump_addr_pc;
    }

	LPARENTHESE() {
	    return this.getToken(SHARCParser.LPARENTHESE, 0);
	};

	PC() {
	    return this.getToken(SHARCParser.PC, 0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	value_exp() {
	    return this.getTypedRuleContext(Value_expContext,0);
	};

	RPARENTHESE() {
	    return this.getToken(SHARCParser.RPARENTHESE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterJump_addr_pc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitJump_addr_pc(this);
		}
	}


}



class Jump_addr_intContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_jump_addr_int;
    }

	value_exp() {
	    return this.getTypedRuleContext(Value_expContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterJump_addr_int(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitJump_addr_int(this);
		}
	}


}



class Jump_modifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_jump_modifier;
    }

	jump_modifier_() {
	    return this.getTypedRuleContext(Jump_modifier_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterJump_modifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitJump_modifier(this);
		}
	}


}



class Jump_modifier_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_jump_modifier_;
    }

	LPARENTHESE() {
	    return this.getToken(SHARCParser.LPARENTHESE, 0);
	};

	RPARENTHESE() {
	    return this.getToken(SHARCParser.RPARENTHESE, 0);
	};

	jump_modifier_1() {
	    return this.getTypedRuleContext(Jump_modifier_1Context,0);
	};

	LA() {
	    return this.getToken(SHARCParser.LA, 0);
	};

	CI() {
	    return this.getToken(SHARCParser.CI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterJump_modifier_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitJump_modifier_(this);
		}
	}


}



class Jump_modifier_1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_jump_modifier_1;
    }

	DB() {
	    return this.getToken(SHARCParser.DB, 0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	LA() {
	    return this.getToken(SHARCParser.LA, 0);
	};

	CI() {
	    return this.getToken(SHARCParser.CI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterJump_modifier_1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitJump_modifier_1(this);
		}
	}


}



class Jump_modifier2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_jump_modifier2;
    }

	LPARENTHESE() {
	    return this.getToken(SHARCParser.LPARENTHESE, 0);
	};

	DB() {
	    return this.getToken(SHARCParser.DB, 0);
	};

	RPARENTHESE() {
	    return this.getToken(SHARCParser.RPARENTHESE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterJump_modifier2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitJump_modifier2(this);
		}
	}


}



class Jump_modifier3Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_jump_modifier3;
    }

	jump_modifier3_() {
	    return this.getTypedRuleContext(Jump_modifier3_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterJump_modifier3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitJump_modifier3(this);
		}
	}


}



class Jump_modifier3_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_jump_modifier3_;
    }

	LPARENTHESE() {
	    return this.getToken(SHARCParser.LPARENTHESE, 0);
	};

	RPARENTHESE() {
	    return this.getToken(SHARCParser.RPARENTHESE, 0);
	};

	jump_modifier3_1() {
	    return this.getTypedRuleContext(Jump_modifier3_1Context,0);
	};

	LR() {
	    return this.getToken(SHARCParser.LR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterJump_modifier3_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitJump_modifier3_(this);
		}
	}


}



class Jump_modifier3_1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_jump_modifier3_1;
    }

	DB() {
	    return this.getToken(SHARCParser.DB, 0);
	};

	COMMA() {
	    return this.getToken(SHARCParser.COMMA, 0);
	};

	LR() {
	    return this.getToken(SHARCParser.LR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterJump_modifier3_1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitJump_modifier3_1(this);
		}
	}


}



class Imm_mov_expContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_imm_mov_exp;
    }

	imm_mov_14a() {
	    return this.getTypedRuleContext(Imm_mov_14aContext,0);
	};

	imm_mov_14b() {
	    return this.getTypedRuleContext(Imm_mov_14bContext,0);
	};

	imm_mov_16() {
	    return this.getTypedRuleContext(Imm_mov_16Context,0);
	};

	imm_mov_17() {
	    return this.getTypedRuleContext(Imm_mov_17Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterImm_mov_exp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitImm_mov_exp(this);
		}
	}


}



class Imm_mov_14aContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_imm_mov_14a;
    }

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	u_reg() {
	    return this.getTypedRuleContext(U_regContext,0);
	};

	mem_addr_dm_int() {
	    return this.getTypedRuleContext(Mem_addr_dm_intContext,0);
	};

	mem_addr_pm_int() {
	    return this.getTypedRuleContext(Mem_addr_pm_intContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterImm_mov_14a(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitImm_mov_14a(this);
		}
	}


}



class Imm_mov_15aContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_imm_mov_15a;
    }

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	u_reg() {
	    return this.getTypedRuleContext(U_regContext,0);
	};

	mem_addr_dm_int_ia() {
	    return this.getTypedRuleContext(Mem_addr_dm_int_iaContext,0);
	};

	mem_addr_pm_int_ic() {
	    return this.getTypedRuleContext(Mem_addr_pm_int_icContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterImm_mov_15a(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitImm_mov_15a(this);
		}
	}


}



class Imm_mov_14bContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_imm_mov_14b;
    }

	u_reg() {
	    return this.getTypedRuleContext(U_regContext,0);
	};

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	mem_addr_dm_int() {
	    return this.getTypedRuleContext(Mem_addr_dm_intContext,0);
	};

	mem_addr_pm_int() {
	    return this.getTypedRuleContext(Mem_addr_pm_intContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterImm_mov_14b(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitImm_mov_14b(this);
		}
	}


}



class Imm_mov_15bContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_imm_mov_15b;
    }

	u_reg() {
	    return this.getTypedRuleContext(U_regContext,0);
	};

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	mem_addr_dm_int_ia() {
	    return this.getTypedRuleContext(Mem_addr_dm_int_iaContext,0);
	};

	mem_addr_pm_int_ic() {
	    return this.getTypedRuleContext(Mem_addr_pm_int_icContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterImm_mov_15b(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitImm_mov_15b(this);
		}
	}


}



class Imm_mov_16Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_imm_mov_16;
    }

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	value_exp() {
	    return this.getTypedRuleContext(Value_expContext,0);
	};

	mem_addr_dm_ia_mb() {
	    return this.getTypedRuleContext(Mem_addr_dm_ia_mbContext,0);
	};

	mem_addr_pm_ic_md() {
	    return this.getTypedRuleContext(Mem_addr_pm_ic_mdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterImm_mov_16(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitImm_mov_16(this);
		}
	}


}



class Imm_mov_17Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_imm_mov_17;
    }

	u_reg2() {
	    return this.getTypedRuleContext(U_reg2Context,0);
	};

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	value_exp() {
	    return this.getTypedRuleContext(Value_expContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterImm_mov_17(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitImm_mov_17(this);
		}
	}


}



class U_reg2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_u_reg2;
    }

	d_reg() {
	    return this.getTypedRuleContext(D_regContext,0);
	};

	PC() {
	    return this.getToken(SHARCParser.PC, 0);
	};

	PCSTK() {
	    return this.getToken(SHARCParser.PCSTK, 0);
	};

	PCSTKP() {
	    return this.getToken(SHARCParser.PCSTKP, 0);
	};

	FADDR() {
	    return this.getToken(SHARCParser.FADDR, 0);
	};

	DADDR() {
	    return this.getToken(SHARCParser.DADDR, 0);
	};

	LADDR() {
	    return this.getToken(SHARCParser.LADDR, 0);
	};

	CURLCNTR() {
	    return this.getToken(SHARCParser.CURLCNTR, 0);
	};

	dag_reg() {
	    return this.getTypedRuleContext(Dag_regContext,0);
	};

	PX1() {
	    return this.getToken(SHARCParser.PX1, 0);
	};

	PX2() {
	    return this.getToken(SHARCParser.PX2, 0);
	};

	PX() {
	    return this.getToken(SHARCParser.PX, 0);
	};

	TPERIOD() {
	    return this.getToken(SHARCParser.TPERIOD, 0);
	};

	TCOUNT() {
	    return this.getToken(SHARCParser.TCOUNT, 0);
	};

	s_reg() {
	    return this.getTypedRuleContext(S_regContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterU_reg2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitU_reg2(this);
		}
	}


}



class Misc_expContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_misc_exp;
    }

	BIT() {
	    return this.getToken(SHARCParser.BIT, 0);
	};

	s_reg() {
	    return this.getTypedRuleContext(S_regContext,0);
	};

	value_exp() {
	    return this.getTypedRuleContext(Value_expContext,0);
	};

	SET() {
	    return this.getToken(SHARCParser.SET, 0);
	};

	CLR() {
	    return this.getToken(SHARCParser.CLR, 0);
	};

	TGL() {
	    return this.getToken(SHARCParser.TGL, 0);
	};

	TST() {
	    return this.getToken(SHARCParser.TST, 0);
	};

	XOR() {
	    return this.getToken(SHARCParser.XOR, 0);
	};

	BITREV() {
	    return this.getToken(SHARCParser.BITREV, 0);
	};

	mem_addr_ia_int() {
	    return this.getTypedRuleContext(Mem_addr_ia_intContext,0);
	};

	mem_addr_ic_int() {
	    return this.getTypedRuleContext(Mem_addr_ic_intContext,0);
	};

	MODIFY() {
	    return this.getToken(SHARCParser.MODIFY, 0);
	};

	LPARENTHESE() {
	    return this.getToken(SHARCParser.LPARENTHESE, 0);
	};

	ia() {
	    return this.getTypedRuleContext(IaContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SHARCParser.COMMA);
	    } else {
	        return this.getToken(SHARCParser.COMMA, i);
	    }
	};


	RPARENTHESE() {
	    return this.getToken(SHARCParser.RPARENTHESE, 0);
	};

	ic() {
	    return this.getTypedRuleContext(IcContext,0);
	};

	misc_20 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Misc_20Context);
	    } else {
	        return this.getTypedRuleContext(Misc_20Context,i);
	    }
	};

	FLUSH() {
	    return this.getToken(SHARCParser.FLUSH, 0);
	};

	CACHE() {
	    return this.getToken(SHARCParser.CACHE, 0);
	};

	NOP() {
	    return this.getToken(SHARCParser.NOP, 0);
	};

	IDLE() {
	    return this.getToken(SHARCParser.IDLE, 0);
	};

	IDLE16() {
	    return this.getToken(SHARCParser.IDLE16, 0);
	};

	CJUMP() {
	    return this.getToken(SHARCParser.CJUMP, 0);
	};

	jump_addr_int_or_pc() {
	    return this.getTypedRuleContext(Jump_addr_int_or_pcContext,0);
	};

	jump_modifier2() {
	    return this.getTypedRuleContext(Jump_modifier2Context,0);
	};

	RFRAME() {
	    return this.getToken(SHARCParser.RFRAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMisc_exp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMisc_exp(this);
		}
	}


}



class Misc_20Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_misc_20;
    }

	PUSH() {
	    return this.getToken(SHARCParser.PUSH, 0);
	};

	POP() {
	    return this.getToken(SHARCParser.POP, 0);
	};

	LOOP() {
	    return this.getToken(SHARCParser.LOOP, 0);
	};

	STS() {
	    return this.getToken(SHARCParser.STS, 0);
	};

	PCSTK() {
	    return this.getToken(SHARCParser.PCSTK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMisc_20(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMisc_20(this);
		}
	}


}



class Directive_expContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_directive_exp;
    }

	DOT_ALGIGN() {
	    return this.getToken(SHARCParser.DOT_ALGIGN, 0);
	};

	INT() {
	    return this.getToken(SHARCParser.INT, 0);
	};

	DOT_COMPRESS() {
	    return this.getToken(SHARCParser.DOT_COMPRESS, 0);
	};

	DOT_EXTERN() {
	    return this.getToken(SHARCParser.DOT_EXTERN, 0);
	};

	ID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SHARCParser.ID);
	    } else {
	        return this.getToken(SHARCParser.ID, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SHARCParser.COMMA);
	    } else {
	        return this.getToken(SHARCParser.COMMA, i);
	    }
	};


	DOT_FILE() {
	    return this.getToken(SHARCParser.DOT_FILE, 0);
	};

	StringLiteral = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SHARCParser.StringLiteral);
	    } else {
	        return this.getToken(SHARCParser.StringLiteral, i);
	    }
	};


	DOT_FILE_ATTR() {
	    return this.getToken(SHARCParser.DOT_FILE_ATTR, 0);
	};

	DOT_FORCECOMPRESS() {
	    return this.getToken(SHARCParser.DOT_FORCECOMPRESS, 0);
	};

	DOT_GLOBAL() {
	    return this.getToken(SHARCParser.DOT_GLOBAL, 0);
	};

	DOT_IMPORT() {
	    return this.getToken(SHARCParser.DOT_IMPORT, 0);
	};

	DOT_LEFTMARGIN() {
	    return this.getToken(SHARCParser.DOT_LEFTMARGIN, 0);
	};

	value_exp() {
	    return this.getTypedRuleContext(Value_expContext,0);
	};

	DOT_LIST() {
	    return this.getToken(SHARCParser.DOT_LIST, 0);
	};

	DOT_LIST_DATA() {
	    return this.getToken(SHARCParser.DOT_LIST_DATA, 0);
	};

	DOT_LIST_DATFILE() {
	    return this.getToken(SHARCParser.DOT_LIST_DATFILE, 0);
	};

	DOT_LIST_DEFTAB() {
	    return this.getToken(SHARCParser.DOT_LIST_DEFTAB, 0);
	};

	DOT_LIST_LOCTAB() {
	    return this.getToken(SHARCParser.DOT_LIST_LOCTAB, 0);
	};

	DOT_LIST_WRAPDATA() {
	    return this.getToken(SHARCParser.DOT_LIST_WRAPDATA, 0);
	};

	DOT_NEWPAGE() {
	    return this.getToken(SHARCParser.DOT_NEWPAGE, 0);
	};

	DOT_NOCOMPRESS() {
	    return this.getToken(SHARCParser.DOT_NOCOMPRESS, 0);
	};

	DOT_NOLIST_DATA() {
	    return this.getToken(SHARCParser.DOT_NOLIST_DATA, 0);
	};

	DOT_NOLIST_DATFILE() {
	    return this.getToken(SHARCParser.DOT_NOLIST_DATFILE, 0);
	};

	DOT_NOLIST_WRAPDATA() {
	    return this.getToken(SHARCParser.DOT_NOLIST_WRAPDATA, 0);
	};

	DOT_PAGELENGTH() {
	    return this.getToken(SHARCParser.DOT_PAGELENGTH, 0);
	};

	DOT_PAGEWIDTH() {
	    return this.getToken(SHARCParser.DOT_PAGEWIDTH, 0);
	};

	DOT_PRECISION() {
	    return this.getToken(SHARCParser.DOT_PRECISION, 0);
	};

	EQU() {
	    return this.getToken(SHARCParser.EQU, 0);
	};

	DOT_ROUND_MINUS() {
	    return this.getToken(SHARCParser.DOT_ROUND_MINUS, 0);
	};

	DOT_ROUND_NEAREST() {
	    return this.getToken(SHARCParser.DOT_ROUND_NEAREST, 0);
	};

	DOT_ROUND_PLUS() {
	    return this.getToken(SHARCParser.DOT_ROUND_PLUS, 0);
	};

	DOT_ROUND_ZERO() {
	    return this.getToken(SHARCParser.DOT_ROUND_ZERO, 0);
	};

	DOT_PREVIOUS() {
	    return this.getToken(SHARCParser.DOT_PREVIOUS, 0);
	};

	DOT_WEAK() {
	    return this.getToken(SHARCParser.DOT_WEAK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterDirective_exp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitDirective_exp(this);
		}
	}


}



class B_regContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_b_reg;
    }

	B0() {
	    return this.getToken(SHARCParser.B0, 0);
	};

	B1() {
	    return this.getToken(SHARCParser.B1, 0);
	};

	B2() {
	    return this.getToken(SHARCParser.B2, 0);
	};

	B3() {
	    return this.getToken(SHARCParser.B3, 0);
	};

	B4() {
	    return this.getToken(SHARCParser.B4, 0);
	};

	B5() {
	    return this.getToken(SHARCParser.B5, 0);
	};

	B6() {
	    return this.getToken(SHARCParser.B6, 0);
	};

	B7() {
	    return this.getToken(SHARCParser.B7, 0);
	};

	B8() {
	    return this.getToken(SHARCParser.B8, 0);
	};

	B9() {
	    return this.getToken(SHARCParser.B9, 0);
	};

	B10() {
	    return this.getToken(SHARCParser.B10, 0);
	};

	B11() {
	    return this.getToken(SHARCParser.B11, 0);
	};

	B12() {
	    return this.getToken(SHARCParser.B12, 0);
	};

	B13() {
	    return this.getToken(SHARCParser.B13, 0);
	};

	B14() {
	    return this.getToken(SHARCParser.B14, 0);
	};

	B15() {
	    return this.getToken(SHARCParser.B15, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterB_reg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitB_reg(this);
		}
	}


}



class L_regContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_l_reg;
    }

	L0() {
	    return this.getToken(SHARCParser.L0, 0);
	};

	L1() {
	    return this.getToken(SHARCParser.L1, 0);
	};

	L2() {
	    return this.getToken(SHARCParser.L2, 0);
	};

	L3() {
	    return this.getToken(SHARCParser.L3, 0);
	};

	L4() {
	    return this.getToken(SHARCParser.L4, 0);
	};

	L5() {
	    return this.getToken(SHARCParser.L5, 0);
	};

	L6() {
	    return this.getToken(SHARCParser.L6, 0);
	};

	L7() {
	    return this.getToken(SHARCParser.L7, 0);
	};

	L8() {
	    return this.getToken(SHARCParser.L8, 0);
	};

	L9() {
	    return this.getToken(SHARCParser.L9, 0);
	};

	L10() {
	    return this.getToken(SHARCParser.L10, 0);
	};

	L11() {
	    return this.getToken(SHARCParser.L11, 0);
	};

	L12() {
	    return this.getToken(SHARCParser.L12, 0);
	};

	L13() {
	    return this.getToken(SHARCParser.L13, 0);
	};

	L14() {
	    return this.getToken(SHARCParser.L14, 0);
	};

	L15() {
	    return this.getToken(SHARCParser.L15, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterL_reg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitL_reg(this);
		}
	}


}



class R_regContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_r_reg;
    }

	R0() {
	    return this.getToken(SHARCParser.R0, 0);
	};

	R1() {
	    return this.getToken(SHARCParser.R1, 0);
	};

	R2() {
	    return this.getToken(SHARCParser.R2, 0);
	};

	R3() {
	    return this.getToken(SHARCParser.R3, 0);
	};

	R4() {
	    return this.getToken(SHARCParser.R4, 0);
	};

	R5() {
	    return this.getToken(SHARCParser.R5, 0);
	};

	R6() {
	    return this.getToken(SHARCParser.R6, 0);
	};

	R7() {
	    return this.getToken(SHARCParser.R7, 0);
	};

	R8() {
	    return this.getToken(SHARCParser.R8, 0);
	};

	R9() {
	    return this.getToken(SHARCParser.R9, 0);
	};

	R10() {
	    return this.getToken(SHARCParser.R10, 0);
	};

	R11() {
	    return this.getToken(SHARCParser.R11, 0);
	};

	R12() {
	    return this.getToken(SHARCParser.R12, 0);
	};

	R13() {
	    return this.getToken(SHARCParser.R13, 0);
	};

	R14() {
	    return this.getToken(SHARCParser.R14, 0);
	};

	R15() {
	    return this.getToken(SHARCParser.R15, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterR_reg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitR_reg(this);
		}
	}


}



class F_regContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_f_reg;
    }

	F0() {
	    return this.getToken(SHARCParser.F0, 0);
	};

	F1() {
	    return this.getToken(SHARCParser.F1, 0);
	};

	F2() {
	    return this.getToken(SHARCParser.F2, 0);
	};

	F3() {
	    return this.getToken(SHARCParser.F3, 0);
	};

	F4() {
	    return this.getToken(SHARCParser.F4, 0);
	};

	F5() {
	    return this.getToken(SHARCParser.F5, 0);
	};

	F6() {
	    return this.getToken(SHARCParser.F6, 0);
	};

	F7() {
	    return this.getToken(SHARCParser.F7, 0);
	};

	F8() {
	    return this.getToken(SHARCParser.F8, 0);
	};

	F9() {
	    return this.getToken(SHARCParser.F9, 0);
	};

	F10() {
	    return this.getToken(SHARCParser.F10, 0);
	};

	F11() {
	    return this.getToken(SHARCParser.F11, 0);
	};

	F12() {
	    return this.getToken(SHARCParser.F12, 0);
	};

	F13() {
	    return this.getToken(SHARCParser.F13, 0);
	};

	F14() {
	    return this.getToken(SHARCParser.F14, 0);
	};

	F15() {
	    return this.getToken(SHARCParser.F15, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterF_reg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitF_reg(this);
		}
	}


}



class S_regContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_s_reg;
    }

	MODE1() {
	    return this.getToken(SHARCParser.MODE1, 0);
	};

	MODE2() {
	    return this.getToken(SHARCParser.MODE2, 0);
	};

	IRPTL() {
	    return this.getToken(SHARCParser.IRPTL, 0);
	};

	IMASK() {
	    return this.getToken(SHARCParser.IMASK, 0);
	};

	IMASKP() {
	    return this.getToken(SHARCParser.IMASKP, 0);
	};

	ASTAT() {
	    return this.getToken(SHARCParser.ASTAT, 0);
	};

	STKY() {
	    return this.getToken(SHARCParser.STKY, 0);
	};

	USTAT1() {
	    return this.getToken(SHARCParser.USTAT1, 0);
	};

	USTAT2() {
	    return this.getToken(SHARCParser.USTAT2, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterS_reg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitS_reg(this);
		}
	}


}



class IaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_ia;
    }

	I0() {
	    return this.getToken(SHARCParser.I0, 0);
	};

	I1() {
	    return this.getToken(SHARCParser.I1, 0);
	};

	I2() {
	    return this.getToken(SHARCParser.I2, 0);
	};

	I3() {
	    return this.getToken(SHARCParser.I3, 0);
	};

	I4() {
	    return this.getToken(SHARCParser.I4, 0);
	};

	I5() {
	    return this.getToken(SHARCParser.I5, 0);
	};

	I6() {
	    return this.getToken(SHARCParser.I6, 0);
	};

	I7() {
	    return this.getToken(SHARCParser.I7, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterIa(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitIa(this);
		}
	}


}



class MbContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mb;
    }

	M0() {
	    return this.getToken(SHARCParser.M0, 0);
	};

	M1() {
	    return this.getToken(SHARCParser.M1, 0);
	};

	M2() {
	    return this.getToken(SHARCParser.M2, 0);
	};

	M3() {
	    return this.getToken(SHARCParser.M3, 0);
	};

	M4() {
	    return this.getToken(SHARCParser.M4, 0);
	};

	M5() {
	    return this.getToken(SHARCParser.M5, 0);
	};

	M6() {
	    return this.getToken(SHARCParser.M6, 0);
	};

	M7() {
	    return this.getToken(SHARCParser.M7, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMb(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMb(this);
		}
	}


}



class IcContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_ic;
    }

	I8() {
	    return this.getToken(SHARCParser.I8, 0);
	};

	I9() {
	    return this.getToken(SHARCParser.I9, 0);
	};

	I10() {
	    return this.getToken(SHARCParser.I10, 0);
	};

	I11() {
	    return this.getToken(SHARCParser.I11, 0);
	};

	I12() {
	    return this.getToken(SHARCParser.I12, 0);
	};

	I13() {
	    return this.getToken(SHARCParser.I13, 0);
	};

	I14() {
	    return this.getToken(SHARCParser.I14, 0);
	};

	I15() {
	    return this.getToken(SHARCParser.I15, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterIc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitIc(this);
		}
	}


}



class MdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_md;
    }

	M8() {
	    return this.getToken(SHARCParser.M8, 0);
	};

	M9() {
	    return this.getToken(SHARCParser.M9, 0);
	};

	M10() {
	    return this.getToken(SHARCParser.M10, 0);
	};

	M11() {
	    return this.getToken(SHARCParser.M11, 0);
	};

	M12() {
	    return this.getToken(SHARCParser.M12, 0);
	};

	M13() {
	    return this.getToken(SHARCParser.M13, 0);
	};

	M14() {
	    return this.getToken(SHARCParser.M14, 0);
	};

	M15() {
	    return this.getToken(SHARCParser.M15, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMd(this);
		}
	}


}



class I_regContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_i_reg;
    }

	ia() {
	    return this.getTypedRuleContext(IaContext,0);
	};

	ic() {
	    return this.getTypedRuleContext(IcContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterI_reg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitI_reg(this);
		}
	}


}



class M_regContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_m_reg;
    }

	mb() {
	    return this.getTypedRuleContext(MbContext,0);
	};

	md() {
	    return this.getTypedRuleContext(MdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterM_reg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitM_reg(this);
		}
	}


}



class Dag_regContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_dag_reg;
    }

	i_reg() {
	    return this.getTypedRuleContext(I_regContext,0);
	};

	m_reg() {
	    return this.getTypedRuleContext(M_regContext,0);
	};

	b_reg() {
	    return this.getTypedRuleContext(B_regContext,0);
	};

	l_reg() {
	    return this.getTypedRuleContext(L_regContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterDag_reg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitDag_reg(this);
		}
	}


}



class D_regContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_d_reg;
    }

	r_reg() {
	    return this.getTypedRuleContext(R_regContext,0);
	};

	f_reg() {
	    return this.getTypedRuleContext(F_regContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterD_reg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitD_reg(this);
		}
	}


}



class U_regContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_u_reg;
    }

	d_reg() {
	    return this.getTypedRuleContext(D_regContext,0);
	};

	PC() {
	    return this.getToken(SHARCParser.PC, 0);
	};

	PCSTK() {
	    return this.getToken(SHARCParser.PCSTK, 0);
	};

	PCSTKP() {
	    return this.getToken(SHARCParser.PCSTKP, 0);
	};

	FADDR() {
	    return this.getToken(SHARCParser.FADDR, 0);
	};

	DADDR() {
	    return this.getToken(SHARCParser.DADDR, 0);
	};

	LADDR() {
	    return this.getToken(SHARCParser.LADDR, 0);
	};

	CURLCNTR() {
	    return this.getToken(SHARCParser.CURLCNTR, 0);
	};

	LCNTR() {
	    return this.getToken(SHARCParser.LCNTR, 0);
	};

	dag_reg() {
	    return this.getTypedRuleContext(Dag_regContext,0);
	};

	PX1() {
	    return this.getToken(SHARCParser.PX1, 0);
	};

	PX2() {
	    return this.getToken(SHARCParser.PX2, 0);
	};

	PX() {
	    return this.getToken(SHARCParser.PX, 0);
	};

	TPERIOD() {
	    return this.getToken(SHARCParser.TPERIOD, 0);
	};

	TCOUNT() {
	    return this.getToken(SHARCParser.TCOUNT, 0);
	};

	s_reg() {
	    return this.getTypedRuleContext(S_regContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterU_reg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitU_reg(this);
		}
	}


}



class ConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_condition;
    }

	ccondition() {
	    return this.getTypedRuleContext(CconditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitCondition(this);
		}
	}


}



class CconditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_ccondition;
    }

	EQ() {
	    return this.getToken(SHARCParser.EQ, 0);
	};

	LT() {
	    return this.getToken(SHARCParser.LT, 0);
	};

	LE() {
	    return this.getToken(SHARCParser.LE, 0);
	};

	AC() {
	    return this.getToken(SHARCParser.AC, 0);
	};

	AV() {
	    return this.getToken(SHARCParser.AV, 0);
	};

	MV() {
	    return this.getToken(SHARCParser.MV, 0);
	};

	MS() {
	    return this.getToken(SHARCParser.MS, 0);
	};

	SV() {
	    return this.getToken(SHARCParser.SV, 0);
	};

	SZ() {
	    return this.getToken(SHARCParser.SZ, 0);
	};

	FLAG0_IN() {
	    return this.getToken(SHARCParser.FLAG0_IN, 0);
	};

	FLAG1_IN() {
	    return this.getToken(SHARCParser.FLAG1_IN, 0);
	};

	FLAG2_IN() {
	    return this.getToken(SHARCParser.FLAG2_IN, 0);
	};

	FLAG3_IN() {
	    return this.getToken(SHARCParser.FLAG3_IN, 0);
	};

	TF() {
	    return this.getToken(SHARCParser.TF, 0);
	};

	BM() {
	    return this.getToken(SHARCParser.BM, 0);
	};

	LCE() {
	    return this.getToken(SHARCParser.LCE, 0);
	};

	NOT() {
	    return this.getToken(SHARCParser.NOT, 0);
	};

	NE() {
	    return this.getToken(SHARCParser.NE, 0);
	};

	GE() {
	    return this.getToken(SHARCParser.GE, 0);
	};

	GT() {
	    return this.getToken(SHARCParser.GT, 0);
	};

	NBM() {
	    return this.getToken(SHARCParser.NBM, 0);
	};

	FOREVER() {
	    return this.getToken(SHARCParser.FOREVER, 0);
	};

	TRUE() {
	    return this.getToken(SHARCParser.TRUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterCcondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitCcondition(this);
		}
	}


}



class Multi_mod1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_multi_mod1;
    }

	multi_mod1_() {
	    return this.getTypedRuleContext(Multi_mod1_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMulti_mod1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMulti_mod1(this);
		}
	}


}



class Multi_mod1_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_multi_mod1_;
    }

	LPARENTHESE() {
	    return this.getToken(SHARCParser.LPARENTHESE, 0);
	};

	RPARENTHESE() {
	    return this.getToken(SHARCParser.RPARENTHESE, 0);
	};

	SI() {
	    return this.getToken(SHARCParser.SI, 0);
	};

	UI() {
	    return this.getToken(SHARCParser.UI, 0);
	};

	SF() {
	    return this.getToken(SHARCParser.SF, 0);
	};

	UF() {
	    return this.getToken(SHARCParser.UF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMulti_mod1_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMulti_mod1_(this);
		}
	}


}



class Multi_mod2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_multi_mod2;
    }

	multi_mod2_() {
	    return this.getTypedRuleContext(Multi_mod2_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMulti_mod2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMulti_mod2(this);
		}
	}


}



class Multi_mod2_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_multi_mod2_;
    }

	LPARENTHESE() {
	    return this.getToken(SHARCParser.LPARENTHESE, 0);
	};

	RPARENTHESE() {
	    return this.getToken(SHARCParser.RPARENTHESE, 0);
	};

	SSI() {
	    return this.getToken(SHARCParser.SSI, 0);
	};

	SUI() {
	    return this.getToken(SHARCParser.SUI, 0);
	};

	USI() {
	    return this.getToken(SHARCParser.USI, 0);
	};

	UUI() {
	    return this.getToken(SHARCParser.UUI, 0);
	};

	SSF() {
	    return this.getToken(SHARCParser.SSF, 0);
	};

	SUF() {
	    return this.getToken(SHARCParser.SUF, 0);
	};

	USF() {
	    return this.getToken(SHARCParser.USF, 0);
	};

	UUF() {
	    return this.getToken(SHARCParser.UUF, 0);
	};

	SSFR() {
	    return this.getToken(SHARCParser.SSFR, 0);
	};

	SUFR() {
	    return this.getToken(SHARCParser.SUFR, 0);
	};

	USFR() {
	    return this.getToken(SHARCParser.USFR, 0);
	};

	UUFR() {
	    return this.getToken(SHARCParser.UUFR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMulti_mod2_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMulti_mod2_(this);
		}
	}


}



class R3_0Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_r3_0;
    }

	R0() {
	    return this.getToken(SHARCParser.R0, 0);
	};

	R2() {
	    return this.getToken(SHARCParser.R2, 0);
	};

	R3() {
	    return this.getToken(SHARCParser.R3, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterR3_0(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitR3_0(this);
		}
	}


}



class R7_4Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_r7_4;
    }

	R4() {
	    return this.getToken(SHARCParser.R4, 0);
	};

	R5() {
	    return this.getToken(SHARCParser.R5, 0);
	};

	R6() {
	    return this.getToken(SHARCParser.R6, 0);
	};

	R7() {
	    return this.getToken(SHARCParser.R7, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterR7_4(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitR7_4(this);
		}
	}


}



class R11_8Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_r11_8;
    }

	R8() {
	    return this.getToken(SHARCParser.R8, 0);
	};

	R9() {
	    return this.getToken(SHARCParser.R9, 0);
	};

	R10() {
	    return this.getToken(SHARCParser.R10, 0);
	};

	R11() {
	    return this.getToken(SHARCParser.R11, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterR11_8(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitR11_8(this);
		}
	}


}



class R15_12Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_r15_12;
    }

	R12() {
	    return this.getToken(SHARCParser.R12, 0);
	};

	R13() {
	    return this.getToken(SHARCParser.R13, 0);
	};

	R14() {
	    return this.getToken(SHARCParser.R14, 0);
	};

	R15() {
	    return this.getToken(SHARCParser.R15, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterR15_12(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitR15_12(this);
		}
	}


}



class F3_0Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_f3_0;
    }

	F0() {
	    return this.getToken(SHARCParser.F0, 0);
	};

	F2() {
	    return this.getToken(SHARCParser.F2, 0);
	};

	F3() {
	    return this.getToken(SHARCParser.F3, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterF3_0(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitF3_0(this);
		}
	}


}



class F7_4Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_f7_4;
    }

	F4() {
	    return this.getToken(SHARCParser.F4, 0);
	};

	F5() {
	    return this.getToken(SHARCParser.F5, 0);
	};

	F6() {
	    return this.getToken(SHARCParser.F6, 0);
	};

	F7() {
	    return this.getToken(SHARCParser.F7, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterF7_4(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitF7_4(this);
		}
	}


}



class F11_8Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_f11_8;
    }

	F8() {
	    return this.getToken(SHARCParser.F8, 0);
	};

	F9() {
	    return this.getToken(SHARCParser.F9, 0);
	};

	F10() {
	    return this.getToken(SHARCParser.F10, 0);
	};

	F11() {
	    return this.getToken(SHARCParser.F11, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterF11_8(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitF11_8(this);
		}
	}


}



class F15_12Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_f15_12;
    }

	F12() {
	    return this.getToken(SHARCParser.F12, 0);
	};

	F13() {
	    return this.getToken(SHARCParser.F13, 0);
	};

	F14() {
	    return this.getToken(SHARCParser.F14, 0);
	};

	F15() {
	    return this.getToken(SHARCParser.F15, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterF15_12(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitF15_12(this);
		}
	}


}



class AddrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_addr;
    }

	ID() {
	    return this.getToken(SHARCParser.ID, 0);
	};

	INT() {
	    return this.getToken(SHARCParser.INT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterAddr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitAddr(this);
		}
	}


}



class MrfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mrf;
    }

	MR0F() {
	    return this.getToken(SHARCParser.MR0F, 0);
	};

	MR1F() {
	    return this.getToken(SHARCParser.MR1F, 0);
	};

	MR2F() {
	    return this.getToken(SHARCParser.MR2F, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMrf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMrf(this);
		}
	}


}



class MrbContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SHARCParser.RULE_mrb;
    }

	MR0B() {
	    return this.getToken(SHARCParser.MR0B, 0);
	};

	MR1B() {
	    return this.getToken(SHARCParser.MR1B, 0);
	};

	MR2B() {
	    return this.getToken(SHARCParser.MR2B, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.enterMrb(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SHARCParserListener ) {
	        listener.exitMrb(this);
		}
	}


}




SHARCParser.ProgContext = ProgContext; 
SHARCParser.StatementContext = StatementContext; 
SHARCParser.Stmt_atomContext = Stmt_atomContext; 
SHARCParser.SecContext = SecContext; 
SHARCParser.SegContext = SegContext; 
SHARCParser.End_segContext = End_segContext; 
SHARCParser.Seg_qualifierContext = Seg_qualifierContext; 
SHARCParser.Seg_qualifier1Context = Seg_qualifier1Context; 
SHARCParser.Seg_qualifier2Context = Seg_qualifier2Context; 
SHARCParser.Seg_qualifier3Context = Seg_qualifier3Context; 
SHARCParser.Seg_qualifier_1Context = Seg_qualifier_1Context; 
SHARCParser.Seg_qualifier_2Context = Seg_qualifier_2Context; 
SHARCParser.Seg_qualifier_3Context = Seg_qualifier_3Context; 
SHARCParser.StmtContext = StmtContext; 
SHARCParser.DeclarationContext = DeclarationContext; 
SHARCParser.Declaration_exp1Context = Declaration_exp1Context; 
SHARCParser.Declaration_exp2Context = Declaration_exp2Context; 
SHARCParser.Declaration_exp3Context = Declaration_exp3Context; 
SHARCParser.Declaration_exp4Context = Declaration_exp4Context; 
SHARCParser.Declaration_exp5Context = Declaration_exp5Context; 
SHARCParser.Declaration_exp_f1Context = Declaration_exp_f1Context; 
SHARCParser.Declaration_exp_f2Context = Declaration_exp_f2Context; 
SHARCParser.InitExpressionContext = InitExpressionContext; 
SHARCParser.Var_addrContext = Var_addrContext; 
SHARCParser.Value_expContext = Value_expContext; 
SHARCParser.Value_exp2Context = Value_exp2Context; 
SHARCParser.TermContext = TermContext; 
SHARCParser.FactorContext = FactorContext; 
SHARCParser.AtomContext = AtomContext; 
SHARCParser.ComputeContext = ComputeContext; 
SHARCParser.If_compute_movContext = If_compute_movContext; 
SHARCParser.If_compute_mov_expContext = If_compute_mov_expContext; 
SHARCParser.Compute_mov_expContext = Compute_mov_expContext; 
SHARCParser.Mov_exp_1Context = Mov_exp_1Context; 
SHARCParser.Mov_exp_1_1Context = Mov_exp_1_1Context; 
SHARCParser.Mov_exp_1_2Context = Mov_exp_1_2Context; 
SHARCParser.Mov_exp_3aContext = Mov_exp_3aContext; 
SHARCParser.Mov_exp_3bContext = Mov_exp_3bContext; 
SHARCParser.Mov_exp_3cContext = Mov_exp_3cContext; 
SHARCParser.Mov_exp_3dContext = Mov_exp_3dContext; 
SHARCParser.Mov_exp_4aContext = Mov_exp_4aContext; 
SHARCParser.Mov_exp_4bContext = Mov_exp_4bContext; 
SHARCParser.Mov_exp_4cContext = Mov_exp_4cContext; 
SHARCParser.Mov_exp_4dContext = Mov_exp_4dContext; 
SHARCParser.Mov_exp_5Context = Mov_exp_5Context; 
SHARCParser.Mov_exp_6aContext = Mov_exp_6aContext; 
SHARCParser.Mov_exp_6bContext = Mov_exp_6bContext; 
SHARCParser.Mov_exp_7Context = Mov_exp_7Context; 
SHARCParser.Mem_addr_ia_mbContext = Mem_addr_ia_mbContext; 
SHARCParser.Mem_addr_ic_mdContext = Mem_addr_ic_mdContext; 
SHARCParser.Mem_addr_md_icContext = Mem_addr_md_icContext; 
SHARCParser.Mem_addr_mb_iaContext = Mem_addr_mb_iaContext; 
SHARCParser.Mem_addr_ia_intContext = Mem_addr_ia_intContext; 
SHARCParser.Mem_addr_ic_intContext = Mem_addr_ic_intContext; 
SHARCParser.Mem_addr_int_iaContext = Mem_addr_int_iaContext; 
SHARCParser.Mem_addr_int_icContext = Mem_addr_int_icContext; 
SHARCParser.Mem_addr_intContext = Mem_addr_intContext; 
SHARCParser.Mem_addr_int_Context = Mem_addr_int_Context; 
SHARCParser.Mem_addr_dm_ia_mbContext = Mem_addr_dm_ia_mbContext; 
SHARCParser.Mem_addr_pm_ic_mdContext = Mem_addr_pm_ic_mdContext; 
SHARCParser.Mem_addr_dm_mb_iaContext = Mem_addr_dm_mb_iaContext; 
SHARCParser.Mem_addr_pm_md_icContext = Mem_addr_pm_md_icContext; 
SHARCParser.Mem_addr_dm_ia_intContext = Mem_addr_dm_ia_intContext; 
SHARCParser.Mem_addr_pm_ic_intContext = Mem_addr_pm_ic_intContext; 
SHARCParser.Mem_addr_dm_int_iaContext = Mem_addr_dm_int_iaContext; 
SHARCParser.Mem_addr_pm_int_icContext = Mem_addr_pm_int_icContext; 
SHARCParser.Mem_addr_dm_intContext = Mem_addr_dm_intContext; 
SHARCParser.Mem_addr_pm_intContext = Mem_addr_pm_intContext; 
SHARCParser.Fixpoint_alu_opContext = Fixpoint_alu_opContext; 
SHARCParser.R_expContext = R_expContext; 
SHARCParser.Floating_point_alu_opContext = Floating_point_alu_opContext; 
SHARCParser.F_expContext = F_expContext; 
SHARCParser.Multi_opContext = Multi_opContext; 
SHARCParser.Multi_rContext = Multi_rContext; 
SHARCParser.Multi_exp_rContext = Multi_exp_rContext; 
SHARCParser.Multi_exp_mrfContext = Multi_exp_mrfContext; 
SHARCParser.Multi_exp_mrbContext = Multi_exp_mrbContext; 
SHARCParser.MrContext = MrContext; 
SHARCParser.Shifter_opContext = Shifter_opContext; 
SHARCParser.Shifter_expContext = Shifter_expContext; 
SHARCParser.Sec_opContext = Sec_opContext; 
SHARCParser.Sec_op2Context = Sec_op2Context; 
SHARCParser.Bit_dataContext = Bit_dataContext; 
SHARCParser.Add_or_subContext = Add_or_subContext; 
SHARCParser.Dual_opContext = Dual_opContext; 
SHARCParser.Dual_add_rContext = Dual_add_rContext; 
SHARCParser.Parallel_multiContext = Parallel_multiContext; 
SHARCParser.Flow_control_expContext = Flow_control_expContext; 
SHARCParser.Flow_contorl_8Context = Flow_contorl_8Context; 
SHARCParser.Flow_contorl_8_expContext = Flow_contorl_8_expContext; 
SHARCParser.Flow_control_9_and_11Context = Flow_control_9_and_11Context; 
SHARCParser.Flow_control_9_and_11_expContext = Flow_control_9_and_11_expContext; 
SHARCParser.Flow_control_10Context = Flow_control_10Context; 
SHARCParser.Flow_control_10_fragContext = Flow_control_10_fragContext; 
SHARCParser.Flow_control_12Context = Flow_control_12Context; 
SHARCParser.Lcntr_vContext = Lcntr_vContext; 
SHARCParser.Flow_control_13Context = Flow_control_13Context; 
SHARCParser.Flow_control_8aContext = Flow_control_8aContext; 
SHARCParser.Flow_control_8bContext = Flow_control_8bContext; 
SHARCParser.Flow_control_9aContext = Flow_control_9aContext; 
SHARCParser.Flow_control_9bContext = Flow_control_9bContext; 
SHARCParser.Flow_control_11aContext = Flow_control_11aContext; 
SHARCParser.Flow_control_11bContext = Flow_control_11bContext; 
SHARCParser.Jump_addr_int_or_pcContext = Jump_addr_int_or_pcContext; 
SHARCParser.Jump_addr_md_or_pcContext = Jump_addr_md_or_pcContext; 
SHARCParser.Jump_addr_pcContext = Jump_addr_pcContext; 
SHARCParser.Jump_addr_intContext = Jump_addr_intContext; 
SHARCParser.Jump_modifierContext = Jump_modifierContext; 
SHARCParser.Jump_modifier_Context = Jump_modifier_Context; 
SHARCParser.Jump_modifier_1Context = Jump_modifier_1Context; 
SHARCParser.Jump_modifier2Context = Jump_modifier2Context; 
SHARCParser.Jump_modifier3Context = Jump_modifier3Context; 
SHARCParser.Jump_modifier3_Context = Jump_modifier3_Context; 
SHARCParser.Jump_modifier3_1Context = Jump_modifier3_1Context; 
SHARCParser.Imm_mov_expContext = Imm_mov_expContext; 
SHARCParser.Imm_mov_14aContext = Imm_mov_14aContext; 
SHARCParser.Imm_mov_15aContext = Imm_mov_15aContext; 
SHARCParser.Imm_mov_14bContext = Imm_mov_14bContext; 
SHARCParser.Imm_mov_15bContext = Imm_mov_15bContext; 
SHARCParser.Imm_mov_16Context = Imm_mov_16Context; 
SHARCParser.Imm_mov_17Context = Imm_mov_17Context; 
SHARCParser.U_reg2Context = U_reg2Context; 
SHARCParser.Misc_expContext = Misc_expContext; 
SHARCParser.Misc_20Context = Misc_20Context; 
SHARCParser.Directive_expContext = Directive_expContext; 
SHARCParser.B_regContext = B_regContext; 
SHARCParser.L_regContext = L_regContext; 
SHARCParser.R_regContext = R_regContext; 
SHARCParser.F_regContext = F_regContext; 
SHARCParser.S_regContext = S_regContext; 
SHARCParser.IaContext = IaContext; 
SHARCParser.MbContext = MbContext; 
SHARCParser.IcContext = IcContext; 
SHARCParser.MdContext = MdContext; 
SHARCParser.I_regContext = I_regContext; 
SHARCParser.M_regContext = M_regContext; 
SHARCParser.Dag_regContext = Dag_regContext; 
SHARCParser.D_regContext = D_regContext; 
SHARCParser.U_regContext = U_regContext; 
SHARCParser.ConditionContext = ConditionContext; 
SHARCParser.CconditionContext = CconditionContext; 
SHARCParser.Multi_mod1Context = Multi_mod1Context; 
SHARCParser.Multi_mod1_Context = Multi_mod1_Context; 
SHARCParser.Multi_mod2Context = Multi_mod2Context; 
SHARCParser.Multi_mod2_Context = Multi_mod2_Context; 
SHARCParser.R3_0Context = R3_0Context; 
SHARCParser.R7_4Context = R7_4Context; 
SHARCParser.R11_8Context = R11_8Context; 
SHARCParser.R15_12Context = R15_12Context; 
SHARCParser.F3_0Context = F3_0Context; 
SHARCParser.F7_4Context = F7_4Context; 
SHARCParser.F11_8Context = F11_8Context; 
SHARCParser.F15_12Context = F15_12Context; 
SHARCParser.AddrContext = AddrContext; 
SHARCParser.MrfContext = MrfContext; 
SHARCParser.MrbContext = MrbContext; 
