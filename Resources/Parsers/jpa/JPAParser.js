// Generated from ./jpa/JPA.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import JPAListener from './JPAListener.js';
const serializedATN = [4,1,84,891,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,1,0,1,0,1,0,3,0,178,8,0,1,1,1,1,1,1,3,1,183,8,1,1,1,3,1,186,
8,1,1,1,3,1,189,8,1,1,1,3,1,192,8,1,1,2,1,2,3,2,196,8,2,1,3,1,3,3,3,200,
8,3,1,4,1,4,1,4,1,4,1,4,3,4,207,8,4,5,4,209,8,4,10,4,12,4,212,9,4,1,5,1,
5,1,5,5,5,217,8,5,10,5,12,5,220,9,5,1,6,1,6,3,6,224,8,6,1,6,1,6,1,7,1,7,
1,7,3,7,231,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,3,9,241,8,9,1,9,3,9,244,
8,9,1,9,1,9,1,10,1,10,3,10,250,8,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,
12,1,13,1,13,1,13,1,13,1,13,3,13,265,8,13,1,13,1,13,1,14,1,14,3,14,271,8,
14,1,15,1,15,3,15,275,8,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,5,16,
285,8,16,10,16,12,16,288,9,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,5,17,297,
8,17,10,17,12,17,300,9,17,1,17,1,17,1,18,1,18,1,18,5,18,307,8,18,10,18,12,
18,310,9,18,1,18,1,18,1,19,1,19,1,19,3,19,317,8,19,1,19,3,19,320,8,19,1,
19,1,19,1,19,1,19,5,19,326,8,19,10,19,12,19,329,9,19,1,20,1,20,3,20,333,
8,20,1,20,1,20,3,20,337,8,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,
1,21,3,21,349,8,21,1,22,1,22,1,22,1,22,3,22,355,8,22,1,22,3,22,358,8,22,
1,23,1,23,3,23,362,8,23,1,23,1,23,1,23,5,23,367,8,23,10,23,12,23,370,9,23,
1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,380,8,24,1,25,1,25,1,25,1,25,
1,25,1,25,5,25,388,8,25,10,25,12,25,391,9,25,1,25,1,25,1,26,1,26,3,26,397,
8,26,1,27,1,27,1,27,3,27,402,8,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,410,
8,27,1,27,1,27,1,27,3,27,415,8,27,1,27,3,27,418,8,27,1,28,1,28,1,28,1,29,
1,29,1,29,1,29,1,29,5,29,428,8,29,10,29,12,29,431,9,29,1,30,1,30,3,30,435,
8,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,5,32,445,8,32,10,32,12,32,448,
9,32,1,33,1,33,3,33,452,8,33,1,34,1,34,1,34,3,34,457,8,34,1,34,3,34,460,
8,34,1,34,3,34,463,8,34,1,35,1,35,1,35,1,35,5,35,469,8,35,10,35,12,35,472,
9,35,1,36,1,36,1,36,3,36,477,8,36,1,36,1,36,1,36,3,36,482,8,36,1,37,1,37,
3,37,486,8,37,1,38,1,38,3,38,490,8,38,1,38,1,38,1,39,1,39,1,39,3,39,497,
8,39,1,40,1,40,1,40,5,40,502,8,40,10,40,12,40,505,9,40,1,41,1,41,1,41,5,
41,510,8,41,10,41,12,41,513,9,41,1,42,3,42,516,8,42,1,42,1,42,1,43,1,43,
1,43,1,43,1,43,3,43,525,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,
535,8,44,1,45,1,45,3,45,539,8,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,
548,8,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,557,8,45,1,45,1,45,1,45,
1,45,1,45,3,45,564,8,45,1,46,1,46,3,46,568,8,46,1,46,1,46,1,46,1,46,1,46,
5,46,575,8,46,10,46,12,46,578,9,46,1,46,3,46,581,8,46,1,46,1,46,1,47,1,47,
3,47,587,8,47,1,48,1,48,3,48,591,8,48,1,48,1,48,1,48,1,48,3,48,597,8,48,
1,49,1,49,3,49,601,8,49,1,49,1,49,3,49,605,8,49,1,49,1,49,1,50,1,50,1,50,
3,50,612,8,50,1,50,1,50,1,51,1,51,3,51,618,8,51,1,51,1,51,3,51,622,8,51,
1,51,1,51,1,52,3,52,627,8,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,
1,53,1,54,1,54,1,54,1,54,3,54,643,8,54,1,54,1,54,1,54,1,54,3,54,649,8,54,
1,54,1,54,1,54,1,54,3,54,655,8,54,1,54,1,54,1,54,1,54,3,54,661,8,54,1,54,
1,54,1,54,1,54,3,54,667,8,54,1,54,1,54,1,54,1,54,3,54,673,8,54,3,54,675,
8,54,1,55,1,55,1,56,1,56,1,56,1,56,1,56,3,56,684,8,56,1,57,1,57,1,57,5,57,
689,8,57,10,57,12,57,692,9,57,1,58,1,58,1,58,5,58,697,8,58,10,58,12,58,700,
9,58,1,59,3,59,703,8,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
1,60,3,60,716,8,60,1,61,1,61,1,61,1,61,1,61,3,61,723,8,61,1,62,1,62,1,62,
1,62,1,62,3,62,730,8,62,1,63,1,63,1,63,1,63,1,63,3,63,737,8,63,1,64,1,64,
1,64,1,64,3,64,743,8,64,1,65,1,65,1,65,1,65,1,65,3,65,750,8,65,1,66,1,66,
1,66,3,66,755,8,66,1,67,1,67,1,67,1,67,1,67,3,67,762,8,67,1,68,1,68,1,68,
3,68,767,8,68,1,69,1,69,3,69,771,8,69,1,70,1,70,3,70,775,8,70,1,71,1,71,
1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,789,8,71,1,71,1,71,
1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,815,8,71,1,72,1,72,1,73,1,73,
1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,
73,1,73,1,73,3,73,838,8,73,1,73,3,73,841,8,73,1,73,3,73,844,8,73,1,73,1,
73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,859,8,73,
1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,77,1,77,3,77,871,8,77,1,78,1,78,
1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,1,83,1,83,1,84,1,84,1,85,1,85,1,
86,1,86,1,86,0,0,87,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
162,164,166,168,170,172,0,10,1,0,22,25,1,0,32,33,1,0,45,47,2,0,15,15,48,
48,2,0,15,15,48,52,1,0,53,54,1,0,55,56,1,0,63,65,1,0,71,73,1,0,76,77,947,
0,177,1,0,0,0,2,179,1,0,0,0,4,193,1,0,0,0,6,197,1,0,0,0,8,201,1,0,0,0,10,
213,1,0,0,0,12,221,1,0,0,0,14,227,1,0,0,0,16,234,1,0,0,0,18,243,1,0,0,0,
20,249,1,0,0,0,22,251,1,0,0,0,24,255,1,0,0,0,26,259,1,0,0,0,28,270,1,0,0,
0,30,274,1,0,0,0,32,279,1,0,0,0,34,291,1,0,0,0,36,308,1,0,0,0,38,313,1,0,
0,0,40,332,1,0,0,0,42,348,1,0,0,0,44,350,1,0,0,0,46,359,1,0,0,0,48,379,1,
0,0,0,50,381,1,0,0,0,52,396,1,0,0,0,54,417,1,0,0,0,56,419,1,0,0,0,58,422,
1,0,0,0,60,434,1,0,0,0,62,436,1,0,0,0,64,439,1,0,0,0,66,449,1,0,0,0,68,453,
1,0,0,0,70,464,1,0,0,0,72,481,1,0,0,0,74,485,1,0,0,0,76,487,1,0,0,0,78,496,
1,0,0,0,80,498,1,0,0,0,82,506,1,0,0,0,84,515,1,0,0,0,86,524,1,0,0,0,88,534,
1,0,0,0,90,563,1,0,0,0,92,565,1,0,0,0,94,586,1,0,0,0,96,588,1,0,0,0,98,600,
1,0,0,0,100,608,1,0,0,0,102,615,1,0,0,0,104,626,1,0,0,0,106,633,1,0,0,0,
108,674,1,0,0,0,110,676,1,0,0,0,112,683,1,0,0,0,114,685,1,0,0,0,116,693,
1,0,0,0,118,702,1,0,0,0,120,715,1,0,0,0,122,722,1,0,0,0,124,729,1,0,0,0,
126,736,1,0,0,0,128,742,1,0,0,0,130,749,1,0,0,0,132,754,1,0,0,0,134,761,
1,0,0,0,136,766,1,0,0,0,138,770,1,0,0,0,140,774,1,0,0,0,142,814,1,0,0,0,
144,816,1,0,0,0,146,858,1,0,0,0,148,860,1,0,0,0,150,862,1,0,0,0,152,864,
1,0,0,0,154,870,1,0,0,0,156,872,1,0,0,0,158,874,1,0,0,0,160,876,1,0,0,0,
162,878,1,0,0,0,164,880,1,0,0,0,166,882,1,0,0,0,168,884,1,0,0,0,170,886,
1,0,0,0,172,888,1,0,0,0,174,178,3,2,1,0,175,178,3,4,2,0,176,178,3,6,3,0,
177,174,1,0,0,0,177,175,1,0,0,0,177,176,1,0,0,0,178,1,1,0,0,0,179,180,3,
46,23,0,180,182,3,8,4,0,181,183,3,56,28,0,182,181,1,0,0,0,182,183,1,0,0,
0,183,185,1,0,0,0,184,186,3,58,29,0,185,184,1,0,0,0,185,186,1,0,0,0,186,
188,1,0,0,0,187,189,3,62,31,0,188,187,1,0,0,0,188,189,1,0,0,0,189,191,1,
0,0,0,190,192,3,64,32,0,191,190,1,0,0,0,191,192,1,0,0,0,192,3,1,0,0,0,193,
195,3,38,19,0,194,196,3,56,28,0,195,194,1,0,0,0,195,196,1,0,0,0,196,5,1,
0,0,0,197,199,3,44,22,0,198,200,3,56,28,0,199,198,1,0,0,0,199,200,1,0,0,
0,200,7,1,0,0,0,201,202,5,1,0,0,202,210,3,10,5,0,203,206,5,2,0,0,204,207,
3,10,5,0,205,207,3,26,13,0,206,204,1,0,0,0,206,205,1,0,0,0,207,209,1,0,0,
0,208,203,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,9,
1,0,0,0,212,210,1,0,0,0,213,218,3,12,6,0,214,217,3,14,7,0,215,217,3,16,8,
0,216,214,1,0,0,0,216,215,1,0,0,0,217,220,1,0,0,0,218,216,1,0,0,0,218,219,
1,0,0,0,219,11,1,0,0,0,220,218,1,0,0,0,221,223,3,172,86,0,222,224,5,3,0,
0,223,222,1,0,0,0,223,224,1,0,0,0,224,225,1,0,0,0,225,226,5,78,0,0,226,13,
1,0,0,0,227,228,3,18,9,0,228,230,3,20,10,0,229,231,5,3,0,0,230,229,1,0,0,
0,230,231,1,0,0,0,231,232,1,0,0,0,232,233,5,78,0,0,233,15,1,0,0,0,234,235,
3,18,9,0,235,236,5,4,0,0,236,237,3,20,10,0,237,17,1,0,0,0,238,240,5,5,0,
0,239,241,5,6,0,0,240,239,1,0,0,0,240,241,1,0,0,0,241,244,1,0,0,0,242,244,
5,7,0,0,243,238,1,0,0,0,243,242,1,0,0,0,243,244,1,0,0,0,244,245,1,0,0,0,
245,246,5,8,0,0,246,19,1,0,0,0,247,250,3,22,11,0,248,250,3,24,12,0,249,247,
1,0,0,0,249,248,1,0,0,0,250,21,1,0,0,0,251,252,5,78,0,0,252,253,5,9,0,0,
253,254,3,170,85,0,254,23,1,0,0,0,255,256,5,78,0,0,256,257,5,9,0,0,257,258,
3,168,84,0,258,25,1,0,0,0,259,260,5,10,0,0,260,261,5,11,0,0,261,262,3,34,
17,0,262,264,5,12,0,0,263,265,5,3,0,0,264,263,1,0,0,0,264,265,1,0,0,0,265,
266,1,0,0,0,266,267,5,78,0,0,267,27,1,0,0,0,268,271,3,30,15,0,269,271,3,
32,16,0,270,268,1,0,0,0,270,269,1,0,0,0,271,29,1,0,0,0,272,275,5,78,0,0,
273,275,3,32,16,0,274,272,1,0,0,0,274,273,1,0,0,0,275,276,1,0,0,0,276,277,
5,9,0,0,277,278,3,36,18,0,278,31,1,0,0,0,279,280,5,78,0,0,280,286,5,9,0,
0,281,282,3,168,84,0,282,283,5,9,0,0,283,285,1,0,0,0,284,281,1,0,0,0,285,
288,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,289,1,0,0,0,288,286,1,0,
0,0,289,290,3,168,84,0,290,33,1,0,0,0,291,292,5,78,0,0,292,298,5,9,0,0,293,
294,3,168,84,0,294,295,5,9,0,0,295,297,1,0,0,0,296,293,1,0,0,0,297,300,1,
0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,301,1,0,0,0,300,298,1,0,0,0,301,
302,3,170,85,0,302,35,1,0,0,0,303,304,3,166,83,0,304,305,5,9,0,0,305,307,
1,0,0,0,306,303,1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,
309,311,1,0,0,0,310,308,1,0,0,0,311,312,3,164,82,0,312,37,1,0,0,0,313,314,
5,13,0,0,314,319,3,172,86,0,315,317,5,3,0,0,316,315,1,0,0,0,316,317,1,0,
0,0,317,318,1,0,0,0,318,320,5,78,0,0,319,316,1,0,0,0,319,320,1,0,0,0,320,
321,1,0,0,0,321,322,5,14,0,0,322,327,3,40,20,0,323,324,5,2,0,0,324,326,3,
40,20,0,325,323,1,0,0,0,326,329,1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,
328,39,1,0,0,0,329,327,1,0,0,0,330,331,5,78,0,0,331,333,5,9,0,0,332,330,
1,0,0,0,332,333,1,0,0,0,333,336,1,0,0,0,334,337,3,36,18,0,335,337,3,168,
84,0,336,334,1,0,0,0,336,335,1,0,0,0,337,338,1,0,0,0,338,339,5,15,0,0,339,
340,3,42,21,0,340,41,1,0,0,0,341,349,3,114,57,0,342,349,3,124,62,0,343,349,
3,128,64,0,344,349,3,132,66,0,345,349,3,136,68,0,346,349,3,140,70,0,347,
349,5,16,0,0,348,341,1,0,0,0,348,342,1,0,0,0,348,343,1,0,0,0,348,344,1,0,
0,0,348,345,1,0,0,0,348,346,1,0,0,0,348,347,1,0,0,0,349,43,1,0,0,0,350,351,
5,17,0,0,351,352,5,1,0,0,352,357,3,172,86,0,353,355,5,3,0,0,354,353,1,0,
0,0,354,355,1,0,0,0,355,356,1,0,0,0,356,358,5,78,0,0,357,354,1,0,0,0,357,
358,1,0,0,0,358,45,1,0,0,0,359,361,5,18,0,0,360,362,5,19,0,0,361,360,1,0,
0,0,361,362,1,0,0,0,362,363,1,0,0,0,363,368,3,48,24,0,364,365,5,2,0,0,365,
367,3,48,24,0,366,364,1,0,0,0,367,370,1,0,0,0,368,366,1,0,0,0,368,369,1,
0,0,0,369,47,1,0,0,0,370,368,1,0,0,0,371,380,3,28,14,0,372,380,3,54,27,0,
373,380,5,78,0,0,374,375,5,20,0,0,375,376,5,11,0,0,376,377,5,78,0,0,377,
380,5,12,0,0,378,380,3,50,25,0,379,371,1,0,0,0,379,372,1,0,0,0,379,373,1,
0,0,0,379,374,1,0,0,0,379,378,1,0,0,0,380,49,1,0,0,0,381,382,5,21,0,0,382,
383,3,158,79,0,383,384,5,11,0,0,384,389,3,52,26,0,385,386,5,2,0,0,386,388,
3,52,26,0,387,385,1,0,0,0,388,391,1,0,0,0,389,387,1,0,0,0,389,390,1,0,0,
0,390,392,1,0,0,0,391,389,1,0,0,0,392,393,5,12,0,0,393,51,1,0,0,0,394,397,
3,28,14,0,395,397,3,54,27,0,396,394,1,0,0,0,396,395,1,0,0,0,397,53,1,0,0,
0,398,399,7,0,0,0,399,401,5,11,0,0,400,402,5,19,0,0,401,400,1,0,0,0,401,
402,1,0,0,0,402,403,1,0,0,0,403,404,3,30,15,0,404,405,5,12,0,0,405,418,1,
0,0,0,406,407,5,26,0,0,407,409,5,11,0,0,408,410,5,19,0,0,409,408,1,0,0,0,
409,410,1,0,0,0,410,414,1,0,0,0,411,415,5,78,0,0,412,415,3,30,15,0,413,415,
3,32,16,0,414,411,1,0,0,0,414,412,1,0,0,0,414,413,1,0,0,0,415,416,1,0,0,
0,416,418,5,12,0,0,417,398,1,0,0,0,417,406,1,0,0,0,418,55,1,0,0,0,419,420,
5,27,0,0,420,421,3,80,40,0,421,57,1,0,0,0,422,423,5,28,0,0,423,424,5,29,
0,0,424,429,3,60,30,0,425,426,5,2,0,0,426,428,3,60,30,0,427,425,1,0,0,0,
428,431,1,0,0,0,429,427,1,0,0,0,429,430,1,0,0,0,430,59,1,0,0,0,431,429,1,
0,0,0,432,435,3,28,14,0,433,435,5,78,0,0,434,432,1,0,0,0,434,433,1,0,0,0,
435,61,1,0,0,0,436,437,5,30,0,0,437,438,3,80,40,0,438,63,1,0,0,0,439,440,
5,31,0,0,440,441,5,29,0,0,441,446,3,66,33,0,442,443,5,2,0,0,443,445,3,66,
33,0,444,442,1,0,0,0,445,448,1,0,0,0,446,444,1,0,0,0,446,447,1,0,0,0,447,
65,1,0,0,0,448,446,1,0,0,0,449,451,3,30,15,0,450,452,7,1,0,0,451,450,1,0,
0,0,451,452,1,0,0,0,452,67,1,0,0,0,453,454,3,76,38,0,454,456,3,70,35,0,455,
457,3,56,28,0,456,455,1,0,0,0,456,457,1,0,0,0,457,459,1,0,0,0,458,460,3,
58,29,0,459,458,1,0,0,0,459,460,1,0,0,0,460,462,1,0,0,0,461,463,3,62,31,
0,462,461,1,0,0,0,462,463,1,0,0,0,463,69,1,0,0,0,464,465,5,1,0,0,465,470,
3,72,36,0,466,467,5,2,0,0,467,469,3,72,36,0,468,466,1,0,0,0,469,472,1,0,
0,0,470,468,1,0,0,0,470,471,1,0,0,0,471,71,1,0,0,0,472,470,1,0,0,0,473,482,
3,10,5,0,474,476,3,74,37,0,475,477,5,3,0,0,476,475,1,0,0,0,476,477,1,0,0,
0,477,478,1,0,0,0,478,479,5,78,0,0,479,482,1,0,0,0,480,482,3,26,13,0,481,
473,1,0,0,0,481,474,1,0,0,0,481,480,1,0,0,0,482,73,1,0,0,0,483,486,3,34,
17,0,484,486,3,32,16,0,485,483,1,0,0,0,485,484,1,0,0,0,486,75,1,0,0,0,487,
489,5,18,0,0,488,490,5,19,0,0,489,488,1,0,0,0,489,490,1,0,0,0,490,491,1,
0,0,0,491,492,3,78,39,0,492,77,1,0,0,0,493,497,3,28,14,0,494,497,3,54,27,
0,495,497,5,78,0,0,496,493,1,0,0,0,496,494,1,0,0,0,496,495,1,0,0,0,497,79,
1,0,0,0,498,503,3,82,41,0,499,500,5,34,0,0,500,502,3,82,41,0,501,499,1,0,
0,0,502,505,1,0,0,0,503,501,1,0,0,0,503,504,1,0,0,0,504,81,1,0,0,0,505,503,
1,0,0,0,506,511,3,84,42,0,507,508,5,35,0,0,508,510,3,84,42,0,509,507,1,0,
0,0,510,513,1,0,0,0,511,509,1,0,0,0,511,512,1,0,0,0,512,83,1,0,0,0,513,511,
1,0,0,0,514,516,5,36,0,0,515,514,1,0,0,0,515,516,1,0,0,0,516,517,1,0,0,0,
517,518,3,86,43,0,518,85,1,0,0,0,519,525,3,88,44,0,520,521,5,11,0,0,521,
522,3,80,40,0,522,523,5,12,0,0,523,525,1,0,0,0,524,519,1,0,0,0,524,520,1,
0,0,0,525,87,1,0,0,0,526,535,3,108,54,0,527,535,3,90,45,0,528,535,3,96,48,
0,529,535,3,92,46,0,530,535,3,98,49,0,531,535,3,100,50,0,532,535,3,102,51,
0,533,535,3,104,52,0,534,526,1,0,0,0,534,527,1,0,0,0,534,528,1,0,0,0,534,
529,1,0,0,0,534,530,1,0,0,0,534,531,1,0,0,0,534,532,1,0,0,0,534,533,1,0,
0,0,535,89,1,0,0,0,536,538,3,112,56,0,537,539,5,36,0,0,538,537,1,0,0,0,538,
539,1,0,0,0,539,540,1,0,0,0,540,541,5,37,0,0,541,542,3,112,56,0,542,543,
5,35,0,0,543,544,3,112,56,0,544,564,1,0,0,0,545,547,3,122,61,0,546,548,5,
36,0,0,547,546,1,0,0,0,547,548,1,0,0,0,548,549,1,0,0,0,549,550,5,37,0,0,
550,551,3,122,61,0,551,552,5,35,0,0,552,553,3,122,61,0,553,564,1,0,0,0,554,
556,3,126,63,0,555,557,5,36,0,0,556,555,1,0,0,0,556,557,1,0,0,0,557,558,
1,0,0,0,558,559,5,37,0,0,559,560,3,126,63,0,560,561,5,35,0,0,561,562,3,126,
63,0,562,564,1,0,0,0,563,536,1,0,0,0,563,545,1,0,0,0,563,554,1,0,0,0,564,
91,1,0,0,0,565,567,3,30,15,0,566,568,5,36,0,0,567,566,1,0,0,0,567,568,1,
0,0,0,568,569,1,0,0,0,569,570,5,10,0,0,570,580,5,11,0,0,571,576,3,94,47,
0,572,573,5,2,0,0,573,575,3,94,47,0,574,572,1,0,0,0,575,578,1,0,0,0,576,
574,1,0,0,0,576,577,1,0,0,0,577,581,1,0,0,0,578,576,1,0,0,0,579,581,3,68,
34,0,580,571,1,0,0,0,580,579,1,0,0,0,581,582,1,0,0,0,582,583,5,12,0,0,583,
93,1,0,0,0,584,587,3,156,78,0,585,587,3,154,77,0,586,584,1,0,0,0,586,585,
1,0,0,0,587,95,1,0,0,0,588,590,3,122,61,0,589,591,5,36,0,0,590,589,1,0,0,
0,590,591,1,0,0,0,591,592,1,0,0,0,592,593,5,38,0,0,593,596,3,152,76,0,594,
595,5,39,0,0,595,597,5,81,0,0,596,594,1,0,0,0,596,597,1,0,0,0,597,97,1,0,
0,0,598,601,3,28,14,0,599,601,3,154,77,0,600,598,1,0,0,0,600,599,1,0,0,0,
601,602,1,0,0,0,602,604,5,40,0,0,603,605,5,36,0,0,604,603,1,0,0,0,604,605,
1,0,0,0,605,606,1,0,0,0,606,607,5,16,0,0,607,99,1,0,0,0,608,609,3,34,17,
0,609,611,5,40,0,0,610,612,5,36,0,0,611,610,1,0,0,0,611,612,1,0,0,0,612,
613,1,0,0,0,613,614,5,41,0,0,614,101,1,0,0,0,615,617,3,138,69,0,616,618,
5,36,0,0,617,616,1,0,0,0,617,618,1,0,0,0,618,619,1,0,0,0,619,621,5,42,0,
0,620,622,5,43,0,0,621,620,1,0,0,0,621,622,1,0,0,0,622,623,1,0,0,0,623,624,
3,34,17,0,624,103,1,0,0,0,625,627,5,36,0,0,626,625,1,0,0,0,626,627,1,0,0,
0,627,628,1,0,0,0,628,629,5,44,0,0,629,630,5,11,0,0,630,631,3,68,34,0,631,
632,5,12,0,0,632,105,1,0,0,0,633,634,7,2,0,0,634,635,5,11,0,0,635,636,3,
68,34,0,636,637,5,12,0,0,637,107,1,0,0,0,638,639,3,122,61,0,639,642,3,110,
55,0,640,643,3,122,61,0,641,643,3,106,53,0,642,640,1,0,0,0,642,641,1,0,0,
0,643,675,1,0,0,0,644,645,3,130,65,0,645,648,7,3,0,0,646,649,3,130,65,0,
647,649,3,106,53,0,648,646,1,0,0,0,648,647,1,0,0,0,649,675,1,0,0,0,650,651,
3,134,67,0,651,654,7,3,0,0,652,655,3,134,67,0,653,655,3,106,53,0,654,652,
1,0,0,0,654,653,1,0,0,0,655,675,1,0,0,0,656,657,3,126,63,0,657,660,3,110,
55,0,658,661,3,126,63,0,659,661,3,106,53,0,660,658,1,0,0,0,660,659,1,0,0,
0,661,675,1,0,0,0,662,663,3,138,69,0,663,666,7,3,0,0,664,667,3,138,69,0,
665,667,3,106,53,0,666,664,1,0,0,0,666,665,1,0,0,0,667,675,1,0,0,0,668,669,
3,112,56,0,669,672,3,110,55,0,670,673,3,112,56,0,671,673,3,106,53,0,672,
670,1,0,0,0,672,671,1,0,0,0,673,675,1,0,0,0,674,638,1,0,0,0,674,644,1,0,
0,0,674,650,1,0,0,0,674,656,1,0,0,0,674,662,1,0,0,0,674,668,1,0,0,0,675,
109,1,0,0,0,676,677,7,4,0,0,677,111,1,0,0,0,678,684,3,114,57,0,679,680,5,
11,0,0,680,681,3,68,34,0,681,682,5,12,0,0,682,684,1,0,0,0,683,678,1,0,0,
0,683,679,1,0,0,0,684,113,1,0,0,0,685,690,3,116,58,0,686,687,7,5,0,0,687,
689,3,116,58,0,688,686,1,0,0,0,689,692,1,0,0,0,690,688,1,0,0,0,690,691,1,
0,0,0,691,115,1,0,0,0,692,690,1,0,0,0,693,698,3,118,59,0,694,695,7,6,0,0,
695,697,3,118,59,0,696,694,1,0,0,0,697,700,1,0,0,0,698,696,1,0,0,0,698,699,
1,0,0,0,699,117,1,0,0,0,700,698,1,0,0,0,701,703,7,5,0,0,702,701,1,0,0,0,
702,703,1,0,0,0,703,704,1,0,0,0,704,705,3,120,60,0,705,119,1,0,0,0,706,716,
3,30,15,0,707,716,3,150,75,0,708,709,5,11,0,0,709,710,3,114,57,0,710,711,
5,12,0,0,711,716,1,0,0,0,712,716,3,154,77,0,713,716,3,142,71,0,714,716,3,
54,27,0,715,706,1,0,0,0,715,707,1,0,0,0,715,708,1,0,0,0,715,712,1,0,0,0,
715,713,1,0,0,0,715,714,1,0,0,0,716,121,1,0,0,0,717,723,3,124,62,0,718,719,
5,11,0,0,719,720,3,68,34,0,720,721,5,12,0,0,721,723,1,0,0,0,722,717,1,0,
0,0,722,718,1,0,0,0,723,123,1,0,0,0,724,730,3,30,15,0,725,730,5,80,0,0,726,
730,3,154,77,0,727,730,3,146,73,0,728,730,3,54,27,0,729,724,1,0,0,0,729,
725,1,0,0,0,729,726,1,0,0,0,729,727,1,0,0,0,729,728,1,0,0,0,730,125,1,0,
0,0,731,737,3,128,64,0,732,733,5,11,0,0,733,734,3,68,34,0,734,735,5,12,0,
0,735,737,1,0,0,0,736,731,1,0,0,0,736,732,1,0,0,0,737,127,1,0,0,0,738,743,
3,30,15,0,739,743,3,154,77,0,740,743,3,144,72,0,741,743,3,54,27,0,742,738,
1,0,0,0,742,739,1,0,0,0,742,740,1,0,0,0,742,741,1,0,0,0,743,129,1,0,0,0,
744,750,3,132,66,0,745,746,5,11,0,0,746,747,3,68,34,0,747,748,5,12,0,0,748,
750,1,0,0,0,749,744,1,0,0,0,749,745,1,0,0,0,750,131,1,0,0,0,751,755,3,30,
15,0,752,755,3,162,81,0,753,755,3,154,77,0,754,751,1,0,0,0,754,752,1,0,0,
0,754,753,1,0,0,0,755,133,1,0,0,0,756,762,3,136,68,0,757,758,5,11,0,0,758,
759,3,68,34,0,759,760,5,12,0,0,760,762,1,0,0,0,761,756,1,0,0,0,761,757,1,
0,0,0,762,135,1,0,0,0,763,767,3,30,15,0,764,767,3,160,80,0,765,767,3,154,
77,0,766,763,1,0,0,0,766,764,1,0,0,0,766,765,1,0,0,0,767,137,1,0,0,0,768,
771,3,32,16,0,769,771,3,140,70,0,770,768,1,0,0,0,770,769,1,0,0,0,771,139,
1,0,0,0,772,775,5,78,0,0,773,775,3,154,77,0,774,772,1,0,0,0,774,773,1,0,
0,0,775,141,1,0,0,0,776,777,5,57,0,0,777,778,5,11,0,0,778,779,3,124,62,0,
779,780,5,12,0,0,780,815,1,0,0,0,781,782,5,58,0,0,782,783,5,11,0,0,783,784,
3,124,62,0,784,785,5,2,0,0,785,788,3,124,62,0,786,787,5,2,0,0,787,789,3,
114,57,0,788,786,1,0,0,0,788,789,1,0,0,0,789,790,1,0,0,0,790,791,5,12,0,
0,791,815,1,0,0,0,792,793,5,59,0,0,793,794,5,11,0,0,794,795,3,114,57,0,795,
796,5,12,0,0,796,815,1,0,0,0,797,798,5,60,0,0,798,799,5,11,0,0,799,800,3,
114,57,0,800,801,5,12,0,0,801,815,1,0,0,0,802,803,5,61,0,0,803,804,5,11,
0,0,804,805,3,114,57,0,805,806,5,2,0,0,806,807,3,114,57,0,807,808,5,12,0,
0,808,815,1,0,0,0,809,810,5,62,0,0,810,811,5,11,0,0,811,812,3,34,17,0,812,
813,5,12,0,0,813,815,1,0,0,0,814,776,1,0,0,0,814,781,1,0,0,0,814,792,1,0,
0,0,814,797,1,0,0,0,814,802,1,0,0,0,814,809,1,0,0,0,815,143,1,0,0,0,816,
817,7,7,0,0,817,145,1,0,0,0,818,819,5,66,0,0,819,820,5,11,0,0,820,821,3,
124,62,0,821,822,5,2,0,0,822,823,3,124,62,0,823,824,5,12,0,0,824,859,1,0,
0,0,825,826,5,67,0,0,826,827,5,11,0,0,827,828,3,124,62,0,828,829,5,2,0,0,
829,830,3,114,57,0,830,831,5,2,0,0,831,832,3,114,57,0,832,833,5,12,0,0,833,
859,1,0,0,0,834,835,5,68,0,0,835,843,5,11,0,0,836,838,3,148,74,0,837,836,
1,0,0,0,837,838,1,0,0,0,838,840,1,0,0,0,839,841,5,83,0,0,840,839,1,0,0,0,
840,841,1,0,0,0,841,842,1,0,0,0,842,844,5,1,0,0,843,837,1,0,0,0,843,844,
1,0,0,0,844,845,1,0,0,0,845,846,3,124,62,0,846,847,5,12,0,0,847,859,1,0,
0,0,848,849,5,69,0,0,849,850,5,11,0,0,850,851,3,124,62,0,851,852,5,12,0,
0,852,859,1,0,0,0,853,854,5,70,0,0,854,855,5,11,0,0,855,856,3,124,62,0,856,
857,5,12,0,0,857,859,1,0,0,0,858,818,1,0,0,0,858,825,1,0,0,0,858,834,1,0,
0,0,858,848,1,0,0,0,858,853,1,0,0,0,859,147,1,0,0,0,860,861,7,8,0,0,861,
149,1,0,0,0,862,863,1,0,0,0,863,151,1,0,0,0,864,865,1,0,0,0,865,153,1,0,
0,0,866,867,5,74,0,0,867,871,5,84,0,0,868,869,5,75,0,0,869,871,5,78,0,0,
870,866,1,0,0,0,870,868,1,0,0,0,871,155,1,0,0,0,872,873,1,0,0,0,873,157,
1,0,0,0,874,875,1,0,0,0,875,159,1,0,0,0,876,877,1,0,0,0,877,161,1,0,0,0,
878,879,7,9,0,0,879,163,1,0,0,0,880,881,1,0,0,0,881,165,1,0,0,0,882,883,
1,0,0,0,883,167,1,0,0,0,884,885,1,0,0,0,885,169,1,0,0,0,886,887,1,0,0,0,
887,171,1,0,0,0,888,889,1,0,0,0,889,173,1,0,0,0,102,177,182,185,188,191,
195,199,206,210,216,218,223,230,240,243,249,264,270,274,286,298,308,316,
319,327,332,336,348,354,357,361,368,379,389,396,401,409,414,417,429,434,
446,451,456,459,462,470,476,481,485,489,496,503,511,515,524,534,538,547,
556,563,567,576,580,586,590,596,600,604,611,617,621,626,642,648,654,660,
666,672,674,683,690,698,702,715,722,729,736,742,749,754,761,766,770,774,
788,814,837,840,843,858,870];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class JPAParser extends antlr4.Parser {

    static grammarFileName = "JPA.g4";
    static literalNames = [ null, "'FROM'", "','", "'AS'", "'FETCH'", "'LEFT'", 
                            "'OUTER'", "'INNER'", "'JOIN'", "'.'", "'IN'", 
                            "'('", "')'", "'UPDATE'", "'SET'", "'='", "'NULL'", 
                            "'DELETE'", "'SELECT'", "'DISTINCT'", "'OBJECT'", 
                            "'NEW'", "'AVG'", "'MAX'", "'MIN'", "'SUM'", 
                            "'COUNT'", "'WHERE'", "'GROUP'", "'BY'", "'HAVING'", 
                            "'ORDER'", "'ASC'", "'DESC'", "'OR'", "'AND'", 
                            "'NOT'", "'BETWEEN'", "'LIKE'", "'ESCAPE'", 
                            "'IS'", "'EMPTY'", "'MEMBER'", "'OF'", "'EXISTS'", 
                            "'ALL'", "'ANY'", "'SOME'", "'<>'", "'>'", "'>='", 
                            "'<'", "'<='", "'+'", "'-'", "'*'", "'/'", "'LENGTH'", 
                            "'LOCATE'", "'ABS'", "'SQRT'", "'MOD'", "'SIZE'", 
                            "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                            "'CONCAT'", "'SUBSTRING'", "'TRIM'", "'LOWER'", 
                            "'UPPER'", "'LEADING'", "'TRAILING'", "'BOTH'", 
                            "'?'", "':'", "'true'", "'false'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, "IDENTIFICATION_VARIABLE", 
                             "CHARACTER", "STRINGLITERAL", "ESCAPE_CHARACTER", 
                             "WS", "TRIM_CHARACTER", "INT_NUMERAL" ];
    static ruleNames = [ "ql_statement", "select_statement", "update_statement", 
                         "delete_statement", "from_clause", "identification_variable_declaration", 
                         "range_variable_declaration", "join", "fetch_join", 
                         "join_spec", "join_association_path_expression", 
                         "join_collection_valued_path_expression", "join_single_valued_association_path_expression", 
                         "collection_member_declaration", "single_valued_path_expression", 
                         "state_field_path_expression", "single_valued_association_path_expression", 
                         "collection_valued_path_expression", "state_field", 
                         "update_clause", "update_item", "new_value", "delete_clause", 
                         "select_clause", "select_expression", "constructor_expression", 
                         "constructor_item", "aggregate_expression", "where_clause", 
                         "groupby_clause", "groupby_item", "having_clause", 
                         "orderby_clause", "orderby_item", "subquery", "subquery_from_clause", 
                         "subselect_identification_variable_declaration", 
                         "association_path_expression", "simple_select_clause", 
                         "simple_select_expression", "conditional_expression", 
                         "conditional_term", "conditional_factor", "conditional_primary", 
                         "simple_cond_expression", "between_expression", 
                         "in_expression", "in_item", "like_expression", 
                         "null_comparison_expression", "empty_collection_comparison_expression", 
                         "collection_member_expression", "exists_expression", 
                         "all_or_any_expression", "comparison_expression", 
                         "comparison_operator", "arithmetic_expression", 
                         "simple_arithmetic_expression", "arithmetic_term", 
                         "arithmetic_factor", "arithmetic_primary", "string_expression", 
                         "string_primary", "datetime_expression", "datetime_primary", 
                         "boolean_expression", "boolean_primary", "enum_expression", 
                         "enum_primary", "entity_expression", "simple_entity_expression", 
                         "functions_returning_numerics", "functions_returning_datetime", 
                         "functions_returning_strings", "trim_specification", 
                         "numeric_literal", "pattern_value", "input_parameter", 
                         "literal", "constructor_name", "enum_literal", 
                         "boolean_literal", "simple_state_field", "embedded_class_state_field", 
                         "single_valued_association_field", "collection_valued_association_field", 
                         "abstract_schema_name" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = JPAParser.ruleNames;
        this.literalNames = JPAParser.literalNames;
        this.symbolicNames = JPAParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	ql_statement() {
	    let localctx = new Ql_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, JPAParser.RULE_ql_statement);
	    try {
	        this.state = 177;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JPAParser.T__17:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 174;
	            this.select_statement();
	            break;
	        case JPAParser.T__12:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 175;
	            this.update_statement();
	            break;
	        case JPAParser.T__16:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 176;
	            this.delete_statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_statement() {
	    let localctx = new Select_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, JPAParser.RULE_select_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 179;
	        this.select_clause();
	        this.state = 180;
	        this.from_clause();
	        this.state = 182;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__26) {
	            this.state = 181;
	            this.where_clause();
	        }

	        this.state = 185;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__27) {
	            this.state = 184;
	            this.groupby_clause();
	        }

	        this.state = 188;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__29) {
	            this.state = 187;
	            this.having_clause();
	        }

	        this.state = 191;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__30) {
	            this.state = 190;
	            this.orderby_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	update_statement() {
	    let localctx = new Update_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, JPAParser.RULE_update_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 193;
	        this.update_clause();
	        this.state = 195;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__26) {
	            this.state = 194;
	            this.where_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delete_statement() {
	    let localctx = new Delete_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, JPAParser.RULE_delete_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 197;
	        this.delete_clause();
	        this.state = 199;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__26) {
	            this.state = 198;
	            this.where_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	from_clause() {
	    let localctx = new From_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, JPAParser.RULE_from_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 201;
	        this.match(JPAParser.T__0);
	        this.state = 202;
	        this.identification_variable_declaration();
	        this.state = 210;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===JPAParser.T__1) {
	            this.state = 203;
	            this.match(JPAParser.T__1);
	            this.state = 206;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case JPAParser.T__2:
	            case JPAParser.IDENTIFICATION_VARIABLE:
	                this.state = 204;
	                this.identification_variable_declaration();
	                break;
	            case JPAParser.T__9:
	                this.state = 205;
	                this.collection_member_declaration();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 212;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identification_variable_declaration() {
	    let localctx = new Identification_variable_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, JPAParser.RULE_identification_variable_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 213;
	        this.range_variable_declaration();
	        this.state = 218;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JPAParser.T__4) | (1 << JPAParser.T__6) | (1 << JPAParser.T__7))) !== 0)) {
	            this.state = 216;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 214;
	                this.join();
	                break;

	            case 2:
	                this.state = 215;
	                this.fetch_join();
	                break;

	            }
	            this.state = 220;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	range_variable_declaration() {
	    let localctx = new Range_variable_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, JPAParser.RULE_range_variable_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 221;
	        this.abstract_schema_name();
	        this.state = 223;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__2) {
	            this.state = 222;
	            this.match(JPAParser.T__2);
	        }

	        this.state = 225;
	        this.match(JPAParser.IDENTIFICATION_VARIABLE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join() {
	    let localctx = new JoinContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, JPAParser.RULE_join);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 227;
	        this.join_spec();
	        this.state = 228;
	        this.join_association_path_expression();
	        this.state = 230;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__2) {
	            this.state = 229;
	            this.match(JPAParser.T__2);
	        }

	        this.state = 232;
	        this.match(JPAParser.IDENTIFICATION_VARIABLE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fetch_join() {
	    let localctx = new Fetch_joinContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, JPAParser.RULE_fetch_join);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 234;
	        this.join_spec();
	        this.state = 235;
	        this.match(JPAParser.T__3);
	        this.state = 236;
	        this.join_association_path_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_spec() {
	    let localctx = new Join_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, JPAParser.RULE_join_spec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 243;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case JPAParser.T__4:
	        	this.state = 238;
	        	this.match(JPAParser.T__4);
	        	this.state = 240;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===JPAParser.T__5) {
	        	    this.state = 239;
	        	    this.match(JPAParser.T__5);
	        	}

	        	break;
	        case JPAParser.T__6:
	        	this.state = 242;
	        	this.match(JPAParser.T__6);
	        	break;
	        case JPAParser.T__7:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 245;
	        this.match(JPAParser.T__7);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_association_path_expression() {
	    let localctx = new Join_association_path_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, JPAParser.RULE_join_association_path_expression);
	    try {
	        this.state = 249;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 247;
	            this.join_collection_valued_path_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 248;
	            this.join_single_valued_association_path_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_collection_valued_path_expression() {
	    let localctx = new Join_collection_valued_path_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, JPAParser.RULE_join_collection_valued_path_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 251;
	        this.match(JPAParser.IDENTIFICATION_VARIABLE);
	        this.state = 252;
	        this.match(JPAParser.T__8);
	        this.state = 253;
	        this.collection_valued_association_field();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_single_valued_association_path_expression() {
	    let localctx = new Join_single_valued_association_path_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, JPAParser.RULE_join_single_valued_association_path_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 255;
	        this.match(JPAParser.IDENTIFICATION_VARIABLE);
	        this.state = 256;
	        this.match(JPAParser.T__8);
	        this.state = 257;
	        this.single_valued_association_field();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collection_member_declaration() {
	    let localctx = new Collection_member_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, JPAParser.RULE_collection_member_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 259;
	        this.match(JPAParser.T__9);
	        this.state = 260;
	        this.match(JPAParser.T__10);
	        this.state = 261;
	        this.collection_valued_path_expression();
	        this.state = 262;
	        this.match(JPAParser.T__11);
	        this.state = 264;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__2) {
	            this.state = 263;
	            this.match(JPAParser.T__2);
	        }

	        this.state = 266;
	        this.match(JPAParser.IDENTIFICATION_VARIABLE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	single_valued_path_expression() {
	    let localctx = new Single_valued_path_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, JPAParser.RULE_single_valued_path_expression);
	    try {
	        this.state = 270;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 268;
	            this.state_field_path_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 269;
	            this.single_valued_association_path_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	state_field_path_expression() {
	    let localctx = new State_field_path_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, JPAParser.RULE_state_field_path_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 274;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 272;
	            this.match(JPAParser.IDENTIFICATION_VARIABLE);
	            break;

	        case 2:
	            this.state = 273;
	            this.single_valued_association_path_expression();
	            break;

	        }
	        this.state = 276;
	        this.match(JPAParser.T__8);
	        this.state = 277;
	        this.state_field();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	single_valued_association_path_expression() {
	    let localctx = new Single_valued_association_path_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, JPAParser.RULE_single_valued_association_path_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 279;
	        this.match(JPAParser.IDENTIFICATION_VARIABLE);
	        this.state = 280;
	        this.match(JPAParser.T__8);
	        this.state = 286;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,19,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 281;
	                this.single_valued_association_field();
	                this.state = 282;
	                this.match(JPAParser.T__8); 
	            }
	            this.state = 288;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,19,this._ctx);
	        }

	        this.state = 289;
	        this.single_valued_association_field();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collection_valued_path_expression() {
	    let localctx = new Collection_valued_path_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, JPAParser.RULE_collection_valued_path_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 291;
	        this.match(JPAParser.IDENTIFICATION_VARIABLE);
	        this.state = 292;
	        this.match(JPAParser.T__8);
	        this.state = 298;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===JPAParser.T__8) {
	            this.state = 293;
	            this.single_valued_association_field();
	            this.state = 294;
	            this.match(JPAParser.T__8);
	            this.state = 300;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 301;
	        this.collection_valued_association_field();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	state_field() {
	    let localctx = new State_fieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, JPAParser.RULE_state_field);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 308;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===JPAParser.T__8) {
	            this.state = 303;
	            this.embedded_class_state_field();
	            this.state = 304;
	            this.match(JPAParser.T__8);
	            this.state = 310;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 311;
	        this.simple_state_field();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	update_clause() {
	    let localctx = new Update_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, JPAParser.RULE_update_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 313;
	        this.match(JPAParser.T__12);
	        this.state = 314;
	        this.abstract_schema_name();
	        this.state = 319;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__2 || _la===JPAParser.IDENTIFICATION_VARIABLE) {
	            this.state = 316;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===JPAParser.T__2) {
	                this.state = 315;
	                this.match(JPAParser.T__2);
	            }

	            this.state = 318;
	            this.match(JPAParser.IDENTIFICATION_VARIABLE);
	        }

	        this.state = 321;
	        this.match(JPAParser.T__13);
	        this.state = 322;
	        this.update_item();
	        this.state = 327;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===JPAParser.T__1) {
	            this.state = 323;
	            this.match(JPAParser.T__1);
	            this.state = 324;
	            this.update_item();
	            this.state = 329;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	update_item() {
	    let localctx = new Update_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, JPAParser.RULE_update_item);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 332;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.IDENTIFICATION_VARIABLE) {
	            this.state = 330;
	            this.match(JPAParser.IDENTIFICATION_VARIABLE);
	            this.state = 331;
	            this.match(JPAParser.T__8);
	        }

	        this.state = 336;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 334;
	            this.state_field();
	            break;

	        case 2:
	            this.state = 335;
	            this.single_valued_association_field();
	            break;

	        }
	        this.state = 338;
	        this.match(JPAParser.T__14);
	        this.state = 339;
	        this.new_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	new_value() {
	    let localctx = new New_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, JPAParser.RULE_new_value);
	    try {
	        this.state = 348;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 341;
	            this.simple_arithmetic_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 342;
	            this.string_primary();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 343;
	            this.datetime_primary();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 344;
	            this.boolean_primary();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 345;
	            this.enum_primary();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 346;
	            this.simple_entity_expression();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 347;
	            this.match(JPAParser.T__15);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delete_clause() {
	    let localctx = new Delete_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, JPAParser.RULE_delete_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 350;
	        this.match(JPAParser.T__16);
	        this.state = 351;
	        this.match(JPAParser.T__0);
	        this.state = 352;
	        this.abstract_schema_name();
	        this.state = 357;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__2 || _la===JPAParser.IDENTIFICATION_VARIABLE) {
	            this.state = 354;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===JPAParser.T__2) {
	                this.state = 353;
	                this.match(JPAParser.T__2);
	            }

	            this.state = 356;
	            this.match(JPAParser.IDENTIFICATION_VARIABLE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_clause() {
	    let localctx = new Select_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, JPAParser.RULE_select_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 359;
	        this.match(JPAParser.T__17);
	        this.state = 361;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__18) {
	            this.state = 360;
	            this.match(JPAParser.T__18);
	        }

	        this.state = 363;
	        this.select_expression();
	        this.state = 368;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===JPAParser.T__1) {
	            this.state = 364;
	            this.match(JPAParser.T__1);
	            this.state = 365;
	            this.select_expression();
	            this.state = 370;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_expression() {
	    let localctx = new Select_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, JPAParser.RULE_select_expression);
	    try {
	        this.state = 379;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 371;
	            this.single_valued_path_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 372;
	            this.aggregate_expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 373;
	            this.match(JPAParser.IDENTIFICATION_VARIABLE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 374;
	            this.match(JPAParser.T__19);
	            this.state = 375;
	            this.match(JPAParser.T__10);
	            this.state = 376;
	            this.match(JPAParser.IDENTIFICATION_VARIABLE);
	            this.state = 377;
	            this.match(JPAParser.T__11);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 378;
	            this.constructor_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructor_expression() {
	    let localctx = new Constructor_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, JPAParser.RULE_constructor_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 381;
	        this.match(JPAParser.T__20);
	        this.state = 382;
	        this.constructor_name();
	        this.state = 383;
	        this.match(JPAParser.T__10);
	        this.state = 384;
	        this.constructor_item();
	        this.state = 389;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===JPAParser.T__1) {
	            this.state = 385;
	            this.match(JPAParser.T__1);
	            this.state = 386;
	            this.constructor_item();
	            this.state = 391;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 392;
	        this.match(JPAParser.T__11);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructor_item() {
	    let localctx = new Constructor_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, JPAParser.RULE_constructor_item);
	    try {
	        this.state = 396;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JPAParser.IDENTIFICATION_VARIABLE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 394;
	            this.single_valued_path_expression();
	            break;
	        case JPAParser.T__21:
	        case JPAParser.T__22:
	        case JPAParser.T__23:
	        case JPAParser.T__24:
	        case JPAParser.T__25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 395;
	            this.aggregate_expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregate_expression() {
	    let localctx = new Aggregate_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, JPAParser.RULE_aggregate_expression);
	    var _la = 0; // Token type
	    try {
	        this.state = 417;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JPAParser.T__21:
	        case JPAParser.T__22:
	        case JPAParser.T__23:
	        case JPAParser.T__24:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 398;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JPAParser.T__21) | (1 << JPAParser.T__22) | (1 << JPAParser.T__23) | (1 << JPAParser.T__24))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 399;
	            this.match(JPAParser.T__10);
	            this.state = 401;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===JPAParser.T__18) {
	                this.state = 400;
	                this.match(JPAParser.T__18);
	            }

	            this.state = 403;
	            this.state_field_path_expression();
	            this.state = 404;
	            this.match(JPAParser.T__11);
	            break;
	        case JPAParser.T__25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 406;
	            this.match(JPAParser.T__25);
	            this.state = 407;
	            this.match(JPAParser.T__10);
	            this.state = 409;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===JPAParser.T__18) {
	                this.state = 408;
	                this.match(JPAParser.T__18);
	            }

	            this.state = 414;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 411;
	                this.match(JPAParser.IDENTIFICATION_VARIABLE);
	                break;

	            case 2:
	                this.state = 412;
	                this.state_field_path_expression();
	                break;

	            case 3:
	                this.state = 413;
	                this.single_valued_association_path_expression();
	                break;

	            }
	            this.state = 416;
	            this.match(JPAParser.T__11);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	where_clause() {
	    let localctx = new Where_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, JPAParser.RULE_where_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 419;
	        this.match(JPAParser.T__26);
	        this.state = 420;
	        this.conditional_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupby_clause() {
	    let localctx = new Groupby_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, JPAParser.RULE_groupby_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 422;
	        this.match(JPAParser.T__27);
	        this.state = 423;
	        this.match(JPAParser.T__28);
	        this.state = 424;
	        this.groupby_item();
	        this.state = 429;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===JPAParser.T__1) {
	            this.state = 425;
	            this.match(JPAParser.T__1);
	            this.state = 426;
	            this.groupby_item();
	            this.state = 431;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupby_item() {
	    let localctx = new Groupby_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, JPAParser.RULE_groupby_item);
	    try {
	        this.state = 434;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 432;
	            this.single_valued_path_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 433;
	            this.match(JPAParser.IDENTIFICATION_VARIABLE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	having_clause() {
	    let localctx = new Having_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, JPAParser.RULE_having_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 436;
	        this.match(JPAParser.T__29);
	        this.state = 437;
	        this.conditional_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderby_clause() {
	    let localctx = new Orderby_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, JPAParser.RULE_orderby_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 439;
	        this.match(JPAParser.T__30);
	        this.state = 440;
	        this.match(JPAParser.T__28);
	        this.state = 441;
	        this.orderby_item();
	        this.state = 446;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===JPAParser.T__1) {
	            this.state = 442;
	            this.match(JPAParser.T__1);
	            this.state = 443;
	            this.orderby_item();
	            this.state = 448;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderby_item() {
	    let localctx = new Orderby_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, JPAParser.RULE_orderby_item);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 449;
	        this.state_field_path_expression();
	        this.state = 451;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__31 || _la===JPAParser.T__32) {
	            this.state = 450;
	            _la = this._input.LA(1);
	            if(!(_la===JPAParser.T__31 || _la===JPAParser.T__32)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subquery() {
	    let localctx = new SubqueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, JPAParser.RULE_subquery);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 453;
	        this.simple_select_clause();
	        this.state = 454;
	        this.subquery_from_clause();
	        this.state = 456;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__26) {
	            this.state = 455;
	            this.where_clause();
	        }

	        this.state = 459;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__27) {
	            this.state = 458;
	            this.groupby_clause();
	        }

	        this.state = 462;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__29) {
	            this.state = 461;
	            this.having_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subquery_from_clause() {
	    let localctx = new Subquery_from_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, JPAParser.RULE_subquery_from_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 464;
	        this.match(JPAParser.T__0);
	        this.state = 465;
	        this.subselect_identification_variable_declaration();
	        this.state = 470;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===JPAParser.T__1) {
	            this.state = 466;
	            this.match(JPAParser.T__1);
	            this.state = 467;
	            this.subselect_identification_variable_declaration();
	            this.state = 472;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subselect_identification_variable_declaration() {
	    let localctx = new Subselect_identification_variable_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, JPAParser.RULE_subselect_identification_variable_declaration);
	    var _la = 0; // Token type
	    try {
	        this.state = 481;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 473;
	            this.identification_variable_declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 474;
	            this.association_path_expression();
	            this.state = 476;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===JPAParser.T__2) {
	                this.state = 475;
	                this.match(JPAParser.T__2);
	            }

	            this.state = 478;
	            this.match(JPAParser.IDENTIFICATION_VARIABLE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 480;
	            this.collection_member_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	association_path_expression() {
	    let localctx = new Association_path_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, JPAParser.RULE_association_path_expression);
	    try {
	        this.state = 485;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 483;
	            this.collection_valued_path_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 484;
	            this.single_valued_association_path_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_select_clause() {
	    let localctx = new Simple_select_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, JPAParser.RULE_simple_select_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 487;
	        this.match(JPAParser.T__17);
	        this.state = 489;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__18) {
	            this.state = 488;
	            this.match(JPAParser.T__18);
	        }

	        this.state = 491;
	        this.simple_select_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_select_expression() {
	    let localctx = new Simple_select_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, JPAParser.RULE_simple_select_expression);
	    try {
	        this.state = 496;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 493;
	            this.single_valued_path_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 494;
	            this.aggregate_expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 495;
	            this.match(JPAParser.IDENTIFICATION_VARIABLE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditional_expression() {
	    let localctx = new Conditional_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, JPAParser.RULE_conditional_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 498;
	        this.conditional_term();
	        this.state = 503;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===JPAParser.T__33) {
	            this.state = 499;
	            this.match(JPAParser.T__33);
	            this.state = 500;
	            this.conditional_term();
	            this.state = 505;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditional_term() {
	    let localctx = new Conditional_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, JPAParser.RULE_conditional_term);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 506;
	        this.conditional_factor();
	        this.state = 511;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===JPAParser.T__34) {
	            this.state = 507;
	            this.match(JPAParser.T__34);
	            this.state = 508;
	            this.conditional_factor();
	            this.state = 513;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditional_factor() {
	    let localctx = new Conditional_factorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, JPAParser.RULE_conditional_factor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 515;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	        if(la_===1) {
	            this.state = 514;
	            this.match(JPAParser.T__35);

	        }
	        this.state = 517;
	        this.conditional_primary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditional_primary() {
	    let localctx = new Conditional_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, JPAParser.RULE_conditional_primary);
	    try {
	        this.state = 524;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 519;
	            this.simple_cond_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 520;
	            this.match(JPAParser.T__10);
	            this.state = 521;
	            this.conditional_expression();
	            this.state = 522;
	            this.match(JPAParser.T__11);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_cond_expression() {
	    let localctx = new Simple_cond_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, JPAParser.RULE_simple_cond_expression);
	    try {
	        this.state = 534;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 526;
	            this.comparison_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 527;
	            this.between_expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 528;
	            this.like_expression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 529;
	            this.in_expression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 530;
	            this.null_comparison_expression();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 531;
	            this.empty_collection_comparison_expression();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 532;
	            this.collection_member_expression();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 533;
	            this.exists_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	between_expression() {
	    let localctx = new Between_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, JPAParser.RULE_between_expression);
	    var _la = 0; // Token type
	    try {
	        this.state = 563;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 536;
	            this.arithmetic_expression();
	            this.state = 538;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===JPAParser.T__35) {
	                this.state = 537;
	                this.match(JPAParser.T__35);
	            }

	            this.state = 540;
	            this.match(JPAParser.T__36);
	            this.state = 541;
	            this.arithmetic_expression();
	            this.state = 542;
	            this.match(JPAParser.T__34);
	            this.state = 543;
	            this.arithmetic_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 545;
	            this.string_expression();
	            this.state = 547;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===JPAParser.T__35) {
	                this.state = 546;
	                this.match(JPAParser.T__35);
	            }

	            this.state = 549;
	            this.match(JPAParser.T__36);
	            this.state = 550;
	            this.string_expression();
	            this.state = 551;
	            this.match(JPAParser.T__34);
	            this.state = 552;
	            this.string_expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 554;
	            this.datetime_expression();
	            this.state = 556;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===JPAParser.T__35) {
	                this.state = 555;
	                this.match(JPAParser.T__35);
	            }

	            this.state = 558;
	            this.match(JPAParser.T__36);
	            this.state = 559;
	            this.datetime_expression();
	            this.state = 560;
	            this.match(JPAParser.T__34);
	            this.state = 561;
	            this.datetime_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	in_expression() {
	    let localctx = new In_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, JPAParser.RULE_in_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 565;
	        this.state_field_path_expression();
	        this.state = 567;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__35) {
	            this.state = 566;
	            this.match(JPAParser.T__35);
	        }

	        this.state = 569;
	        this.match(JPAParser.T__9);
	        this.state = 570;
	        this.match(JPAParser.T__10);
	        this.state = 580;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JPAParser.T__1:
	        case JPAParser.T__11:
	        case JPAParser.T__73:
	        case JPAParser.T__74:
	            this.state = 571;
	            this.in_item();
	            this.state = 576;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===JPAParser.T__1) {
	                this.state = 572;
	                this.match(JPAParser.T__1);
	                this.state = 573;
	                this.in_item();
	                this.state = 578;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case JPAParser.T__17:
	            this.state = 579;
	            this.subquery();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 582;
	        this.match(JPAParser.T__11);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	in_item() {
	    let localctx = new In_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, JPAParser.RULE_in_item);
	    try {
	        this.state = 586;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JPAParser.T__1:
	        case JPAParser.T__11:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 584;
	            this.literal();
	            break;
	        case JPAParser.T__73:
	        case JPAParser.T__74:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 585;
	            this.input_parameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	like_expression() {
	    let localctx = new Like_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, JPAParser.RULE_like_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 588;
	        this.string_expression();
	        this.state = 590;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__35) {
	            this.state = 589;
	            this.match(JPAParser.T__35);
	        }

	        this.state = 592;
	        this.match(JPAParser.T__37);
	        this.state = 593;
	        this.pattern_value();
	        this.state = 596;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__38) {
	            this.state = 594;
	            this.match(JPAParser.T__38);
	            this.state = 595;
	            this.match(JPAParser.ESCAPE_CHARACTER);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	null_comparison_expression() {
	    let localctx = new Null_comparison_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, JPAParser.RULE_null_comparison_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 600;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JPAParser.IDENTIFICATION_VARIABLE:
	            this.state = 598;
	            this.single_valued_path_expression();
	            break;
	        case JPAParser.T__73:
	        case JPAParser.T__74:
	            this.state = 599;
	            this.input_parameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 602;
	        this.match(JPAParser.T__39);
	        this.state = 604;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__35) {
	            this.state = 603;
	            this.match(JPAParser.T__35);
	        }

	        this.state = 606;
	        this.match(JPAParser.T__15);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	empty_collection_comparison_expression() {
	    let localctx = new Empty_collection_comparison_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, JPAParser.RULE_empty_collection_comparison_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 608;
	        this.collection_valued_path_expression();
	        this.state = 609;
	        this.match(JPAParser.T__39);
	        this.state = 611;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__35) {
	            this.state = 610;
	            this.match(JPAParser.T__35);
	        }

	        this.state = 613;
	        this.match(JPAParser.T__40);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collection_member_expression() {
	    let localctx = new Collection_member_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, JPAParser.RULE_collection_member_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 615;
	        this.entity_expression();
	        this.state = 617;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__35) {
	            this.state = 616;
	            this.match(JPAParser.T__35);
	        }

	        this.state = 619;
	        this.match(JPAParser.T__41);
	        this.state = 621;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__42) {
	            this.state = 620;
	            this.match(JPAParser.T__42);
	        }

	        this.state = 623;
	        this.collection_valued_path_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exists_expression() {
	    let localctx = new Exists_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, JPAParser.RULE_exists_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 626;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JPAParser.T__35) {
	            this.state = 625;
	            this.match(JPAParser.T__35);
	        }

	        this.state = 628;
	        this.match(JPAParser.T__43);
	        this.state = 629;
	        this.match(JPAParser.T__10);
	        this.state = 630;
	        this.subquery();
	        this.state = 631;
	        this.match(JPAParser.T__11);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	all_or_any_expression() {
	    let localctx = new All_or_any_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, JPAParser.RULE_all_or_any_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 633;
	        _la = this._input.LA(1);
	        if(!(((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (JPAParser.T__44 - 45)) | (1 << (JPAParser.T__45 - 45)) | (1 << (JPAParser.T__46 - 45)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 634;
	        this.match(JPAParser.T__10);
	        this.state = 635;
	        this.subquery();
	        this.state = 636;
	        this.match(JPAParser.T__11);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparison_expression() {
	    let localctx = new Comparison_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, JPAParser.RULE_comparison_expression);
	    var _la = 0; // Token type
	    try {
	        this.state = 674;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 638;
	            this.string_expression();
	            this.state = 639;
	            this.comparison_operator();
	            this.state = 642;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case JPAParser.T__10:
	            case JPAParser.T__21:
	            case JPAParser.T__22:
	            case JPAParser.T__23:
	            case JPAParser.T__24:
	            case JPAParser.T__25:
	            case JPAParser.T__65:
	            case JPAParser.T__66:
	            case JPAParser.T__67:
	            case JPAParser.T__68:
	            case JPAParser.T__69:
	            case JPAParser.T__73:
	            case JPAParser.T__74:
	            case JPAParser.IDENTIFICATION_VARIABLE:
	            case JPAParser.STRINGLITERAL:
	                this.state = 640;
	                this.string_expression();
	                break;
	            case JPAParser.T__44:
	            case JPAParser.T__45:
	            case JPAParser.T__46:
	                this.state = 641;
	                this.all_or_any_expression();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 644;
	            this.boolean_expression();
	            this.state = 645;
	            _la = this._input.LA(1);
	            if(!(_la===JPAParser.T__14 || _la===JPAParser.T__47)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 648;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case JPAParser.T__10:
	            case JPAParser.T__73:
	            case JPAParser.T__74:
	            case JPAParser.T__75:
	            case JPAParser.T__76:
	            case JPAParser.IDENTIFICATION_VARIABLE:
	                this.state = 646;
	                this.boolean_expression();
	                break;
	            case JPAParser.T__44:
	            case JPAParser.T__45:
	            case JPAParser.T__46:
	                this.state = 647;
	                this.all_or_any_expression();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 650;
	            this.enum_expression();
	            this.state = 651;
	            _la = this._input.LA(1);
	            if(!(_la===JPAParser.T__14 || _la===JPAParser.T__47)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 654;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case JPAParser.EOF:
	            case JPAParser.T__10:
	            case JPAParser.T__11:
	            case JPAParser.T__27:
	            case JPAParser.T__29:
	            case JPAParser.T__30:
	            case JPAParser.T__33:
	            case JPAParser.T__34:
	            case JPAParser.T__73:
	            case JPAParser.T__74:
	            case JPAParser.IDENTIFICATION_VARIABLE:
	                this.state = 652;
	                this.enum_expression();
	                break;
	            case JPAParser.T__44:
	            case JPAParser.T__45:
	            case JPAParser.T__46:
	                this.state = 653;
	                this.all_or_any_expression();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 656;
	            this.datetime_expression();
	            this.state = 657;
	            this.comparison_operator();
	            this.state = 660;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case JPAParser.T__10:
	            case JPAParser.T__21:
	            case JPAParser.T__22:
	            case JPAParser.T__23:
	            case JPAParser.T__24:
	            case JPAParser.T__25:
	            case JPAParser.T__62:
	            case JPAParser.T__63:
	            case JPAParser.T__64:
	            case JPAParser.T__73:
	            case JPAParser.T__74:
	            case JPAParser.IDENTIFICATION_VARIABLE:
	                this.state = 658;
	                this.datetime_expression();
	                break;
	            case JPAParser.T__44:
	            case JPAParser.T__45:
	            case JPAParser.T__46:
	                this.state = 659;
	                this.all_or_any_expression();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 662;
	            this.entity_expression();
	            this.state = 663;
	            _la = this._input.LA(1);
	            if(!(_la===JPAParser.T__14 || _la===JPAParser.T__47)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 666;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case JPAParser.T__73:
	            case JPAParser.T__74:
	            case JPAParser.IDENTIFICATION_VARIABLE:
	                this.state = 664;
	                this.entity_expression();
	                break;
	            case JPAParser.T__44:
	            case JPAParser.T__45:
	            case JPAParser.T__46:
	                this.state = 665;
	                this.all_or_any_expression();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 668;
	            this.arithmetic_expression();
	            this.state = 669;
	            this.comparison_operator();
	            this.state = 672;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case JPAParser.EOF:
	            case JPAParser.T__10:
	            case JPAParser.T__11:
	            case JPAParser.T__21:
	            case JPAParser.T__22:
	            case JPAParser.T__23:
	            case JPAParser.T__24:
	            case JPAParser.T__25:
	            case JPAParser.T__27:
	            case JPAParser.T__29:
	            case JPAParser.T__30:
	            case JPAParser.T__33:
	            case JPAParser.T__34:
	            case JPAParser.T__52:
	            case JPAParser.T__53:
	            case JPAParser.T__54:
	            case JPAParser.T__55:
	            case JPAParser.T__56:
	            case JPAParser.T__57:
	            case JPAParser.T__58:
	            case JPAParser.T__59:
	            case JPAParser.T__60:
	            case JPAParser.T__61:
	            case JPAParser.T__73:
	            case JPAParser.T__74:
	            case JPAParser.IDENTIFICATION_VARIABLE:
	                this.state = 670;
	                this.arithmetic_expression();
	                break;
	            case JPAParser.T__44:
	            case JPAParser.T__45:
	            case JPAParser.T__46:
	                this.state = 671;
	                this.all_or_any_expression();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparison_operator() {
	    let localctx = new Comparison_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, JPAParser.RULE_comparison_operator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 676;
	        _la = this._input.LA(1);
	        if(!(_la===JPAParser.T__14 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (JPAParser.T__47 - 48)) | (1 << (JPAParser.T__48 - 48)) | (1 << (JPAParser.T__49 - 48)) | (1 << (JPAParser.T__50 - 48)) | (1 << (JPAParser.T__51 - 48)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arithmetic_expression() {
	    let localctx = new Arithmetic_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, JPAParser.RULE_arithmetic_expression);
	    try {
	        this.state = 683;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 678;
	            this.simple_arithmetic_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 679;
	            this.match(JPAParser.T__10);
	            this.state = 680;
	            this.subquery();
	            this.state = 681;
	            this.match(JPAParser.T__11);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_arithmetic_expression() {
	    let localctx = new Simple_arithmetic_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, JPAParser.RULE_simple_arithmetic_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 685;
	        this.arithmetic_term();
	        this.state = 690;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===JPAParser.T__52 || _la===JPAParser.T__53) {
	            this.state = 686;
	            _la = this._input.LA(1);
	            if(!(_la===JPAParser.T__52 || _la===JPAParser.T__53)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 687;
	            this.arithmetic_term();
	            this.state = 692;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arithmetic_term() {
	    let localctx = new Arithmetic_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, JPAParser.RULE_arithmetic_term);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 693;
	        this.arithmetic_factor();
	        this.state = 698;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===JPAParser.T__54 || _la===JPAParser.T__55) {
	            this.state = 694;
	            _la = this._input.LA(1);
	            if(!(_la===JPAParser.T__54 || _la===JPAParser.T__55)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 695;
	            this.arithmetic_factor();
	            this.state = 700;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arithmetic_factor() {
	    let localctx = new Arithmetic_factorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, JPAParser.RULE_arithmetic_factor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 702;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
	        if(la_===1) {
	            this.state = 701;
	            _la = this._input.LA(1);
	            if(!(_la===JPAParser.T__52 || _la===JPAParser.T__53)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 704;
	        this.arithmetic_primary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arithmetic_primary() {
	    let localctx = new Arithmetic_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, JPAParser.RULE_arithmetic_primary);
	    try {
	        this.state = 715;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JPAParser.IDENTIFICATION_VARIABLE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 706;
	            this.state_field_path_expression();
	            break;
	        case JPAParser.EOF:
	        case JPAParser.T__1:
	        case JPAParser.T__11:
	        case JPAParser.T__14:
	        case JPAParser.T__26:
	        case JPAParser.T__27:
	        case JPAParser.T__29:
	        case JPAParser.T__30:
	        case JPAParser.T__33:
	        case JPAParser.T__34:
	        case JPAParser.T__35:
	        case JPAParser.T__36:
	        case JPAParser.T__47:
	        case JPAParser.T__48:
	        case JPAParser.T__49:
	        case JPAParser.T__50:
	        case JPAParser.T__51:
	        case JPAParser.T__52:
	        case JPAParser.T__53:
	        case JPAParser.T__54:
	        case JPAParser.T__55:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 707;
	            this.numeric_literal();
	            break;
	        case JPAParser.T__10:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 708;
	            this.match(JPAParser.T__10);
	            this.state = 709;
	            this.simple_arithmetic_expression();
	            this.state = 710;
	            this.match(JPAParser.T__11);
	            break;
	        case JPAParser.T__73:
	        case JPAParser.T__74:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 712;
	            this.input_parameter();
	            break;
	        case JPAParser.T__56:
	        case JPAParser.T__57:
	        case JPAParser.T__58:
	        case JPAParser.T__59:
	        case JPAParser.T__60:
	        case JPAParser.T__61:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 713;
	            this.functions_returning_numerics();
	            break;
	        case JPAParser.T__21:
	        case JPAParser.T__22:
	        case JPAParser.T__23:
	        case JPAParser.T__24:
	        case JPAParser.T__25:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 714;
	            this.aggregate_expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string_expression() {
	    let localctx = new String_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, JPAParser.RULE_string_expression);
	    try {
	        this.state = 722;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JPAParser.T__21:
	        case JPAParser.T__22:
	        case JPAParser.T__23:
	        case JPAParser.T__24:
	        case JPAParser.T__25:
	        case JPAParser.T__65:
	        case JPAParser.T__66:
	        case JPAParser.T__67:
	        case JPAParser.T__68:
	        case JPAParser.T__69:
	        case JPAParser.T__73:
	        case JPAParser.T__74:
	        case JPAParser.IDENTIFICATION_VARIABLE:
	        case JPAParser.STRINGLITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 717;
	            this.string_primary();
	            break;
	        case JPAParser.T__10:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 718;
	            this.match(JPAParser.T__10);
	            this.state = 719;
	            this.subquery();
	            this.state = 720;
	            this.match(JPAParser.T__11);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string_primary() {
	    let localctx = new String_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, JPAParser.RULE_string_primary);
	    try {
	        this.state = 729;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JPAParser.IDENTIFICATION_VARIABLE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 724;
	            this.state_field_path_expression();
	            break;
	        case JPAParser.STRINGLITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 725;
	            this.match(JPAParser.STRINGLITERAL);
	            break;
	        case JPAParser.T__73:
	        case JPAParser.T__74:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 726;
	            this.input_parameter();
	            break;
	        case JPAParser.T__65:
	        case JPAParser.T__66:
	        case JPAParser.T__67:
	        case JPAParser.T__68:
	        case JPAParser.T__69:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 727;
	            this.functions_returning_strings();
	            break;
	        case JPAParser.T__21:
	        case JPAParser.T__22:
	        case JPAParser.T__23:
	        case JPAParser.T__24:
	        case JPAParser.T__25:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 728;
	            this.aggregate_expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetime_expression() {
	    let localctx = new Datetime_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, JPAParser.RULE_datetime_expression);
	    try {
	        this.state = 736;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JPAParser.T__21:
	        case JPAParser.T__22:
	        case JPAParser.T__23:
	        case JPAParser.T__24:
	        case JPAParser.T__25:
	        case JPAParser.T__62:
	        case JPAParser.T__63:
	        case JPAParser.T__64:
	        case JPAParser.T__73:
	        case JPAParser.T__74:
	        case JPAParser.IDENTIFICATION_VARIABLE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 731;
	            this.datetime_primary();
	            break;
	        case JPAParser.T__10:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 732;
	            this.match(JPAParser.T__10);
	            this.state = 733;
	            this.subquery();
	            this.state = 734;
	            this.match(JPAParser.T__11);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetime_primary() {
	    let localctx = new Datetime_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, JPAParser.RULE_datetime_primary);
	    try {
	        this.state = 742;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JPAParser.IDENTIFICATION_VARIABLE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 738;
	            this.state_field_path_expression();
	            break;
	        case JPAParser.T__73:
	        case JPAParser.T__74:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 739;
	            this.input_parameter();
	            break;
	        case JPAParser.T__62:
	        case JPAParser.T__63:
	        case JPAParser.T__64:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 740;
	            this.functions_returning_datetime();
	            break;
	        case JPAParser.T__21:
	        case JPAParser.T__22:
	        case JPAParser.T__23:
	        case JPAParser.T__24:
	        case JPAParser.T__25:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 741;
	            this.aggregate_expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boolean_expression() {
	    let localctx = new Boolean_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, JPAParser.RULE_boolean_expression);
	    try {
	        this.state = 749;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JPAParser.T__73:
	        case JPAParser.T__74:
	        case JPAParser.T__75:
	        case JPAParser.T__76:
	        case JPAParser.IDENTIFICATION_VARIABLE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 744;
	            this.boolean_primary();
	            break;
	        case JPAParser.T__10:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 745;
	            this.match(JPAParser.T__10);
	            this.state = 746;
	            this.subquery();
	            this.state = 747;
	            this.match(JPAParser.T__11);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boolean_primary() {
	    let localctx = new Boolean_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, JPAParser.RULE_boolean_primary);
	    try {
	        this.state = 754;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JPAParser.IDENTIFICATION_VARIABLE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 751;
	            this.state_field_path_expression();
	            break;
	        case JPAParser.T__75:
	        case JPAParser.T__76:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 752;
	            this.boolean_literal();
	            break;
	        case JPAParser.T__73:
	        case JPAParser.T__74:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 753;
	            this.input_parameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_expression() {
	    let localctx = new Enum_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, JPAParser.RULE_enum_expression);
	    try {
	        this.state = 761;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JPAParser.EOF:
	        case JPAParser.T__11:
	        case JPAParser.T__14:
	        case JPAParser.T__27:
	        case JPAParser.T__29:
	        case JPAParser.T__30:
	        case JPAParser.T__33:
	        case JPAParser.T__34:
	        case JPAParser.T__47:
	        case JPAParser.T__73:
	        case JPAParser.T__74:
	        case JPAParser.IDENTIFICATION_VARIABLE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 756;
	            this.enum_primary();
	            break;
	        case JPAParser.T__10:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 757;
	            this.match(JPAParser.T__10);
	            this.state = 758;
	            this.subquery();
	            this.state = 759;
	            this.match(JPAParser.T__11);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_primary() {
	    let localctx = new Enum_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, JPAParser.RULE_enum_primary);
	    try {
	        this.state = 766;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JPAParser.IDENTIFICATION_VARIABLE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 763;
	            this.state_field_path_expression();
	            break;
	        case JPAParser.EOF:
	        case JPAParser.T__1:
	        case JPAParser.T__11:
	        case JPAParser.T__14:
	        case JPAParser.T__26:
	        case JPAParser.T__27:
	        case JPAParser.T__29:
	        case JPAParser.T__30:
	        case JPAParser.T__33:
	        case JPAParser.T__34:
	        case JPAParser.T__47:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 764;
	            this.enum_literal();
	            break;
	        case JPAParser.T__73:
	        case JPAParser.T__74:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 765;
	            this.input_parameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entity_expression() {
	    let localctx = new Entity_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, JPAParser.RULE_entity_expression);
	    try {
	        this.state = 770;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 768;
	            this.single_valued_association_path_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 769;
	            this.simple_entity_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_entity_expression() {
	    let localctx = new Simple_entity_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, JPAParser.RULE_simple_entity_expression);
	    try {
	        this.state = 774;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JPAParser.IDENTIFICATION_VARIABLE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 772;
	            this.match(JPAParser.IDENTIFICATION_VARIABLE);
	            break;
	        case JPAParser.T__73:
	        case JPAParser.T__74:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 773;
	            this.input_parameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functions_returning_numerics() {
	    let localctx = new Functions_returning_numericsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, JPAParser.RULE_functions_returning_numerics);
	    var _la = 0; // Token type
	    try {
	        this.state = 814;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JPAParser.T__56:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 776;
	            this.match(JPAParser.T__56);
	            this.state = 777;
	            this.match(JPAParser.T__10);
	            this.state = 778;
	            this.string_primary();
	            this.state = 779;
	            this.match(JPAParser.T__11);
	            break;
	        case JPAParser.T__57:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 781;
	            this.match(JPAParser.T__57);
	            this.state = 782;
	            this.match(JPAParser.T__10);
	            this.state = 783;
	            this.string_primary();
	            this.state = 784;
	            this.match(JPAParser.T__1);
	            this.state = 785;
	            this.string_primary();
	            this.state = 788;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===JPAParser.T__1) {
	                this.state = 786;
	                this.match(JPAParser.T__1);
	                this.state = 787;
	                this.simple_arithmetic_expression();
	            }

	            this.state = 790;
	            this.match(JPAParser.T__11);
	            break;
	        case JPAParser.T__58:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 792;
	            this.match(JPAParser.T__58);
	            this.state = 793;
	            this.match(JPAParser.T__10);
	            this.state = 794;
	            this.simple_arithmetic_expression();
	            this.state = 795;
	            this.match(JPAParser.T__11);
	            break;
	        case JPAParser.T__59:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 797;
	            this.match(JPAParser.T__59);
	            this.state = 798;
	            this.match(JPAParser.T__10);
	            this.state = 799;
	            this.simple_arithmetic_expression();
	            this.state = 800;
	            this.match(JPAParser.T__11);
	            break;
	        case JPAParser.T__60:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 802;
	            this.match(JPAParser.T__60);
	            this.state = 803;
	            this.match(JPAParser.T__10);
	            this.state = 804;
	            this.simple_arithmetic_expression();
	            this.state = 805;
	            this.match(JPAParser.T__1);
	            this.state = 806;
	            this.simple_arithmetic_expression();
	            this.state = 807;
	            this.match(JPAParser.T__11);
	            break;
	        case JPAParser.T__61:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 809;
	            this.match(JPAParser.T__61);
	            this.state = 810;
	            this.match(JPAParser.T__10);
	            this.state = 811;
	            this.collection_valued_path_expression();
	            this.state = 812;
	            this.match(JPAParser.T__11);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functions_returning_datetime() {
	    let localctx = new Functions_returning_datetimeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, JPAParser.RULE_functions_returning_datetime);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 816;
	        _la = this._input.LA(1);
	        if(!(((((_la - 63)) & ~0x1f) == 0 && ((1 << (_la - 63)) & ((1 << (JPAParser.T__62 - 63)) | (1 << (JPAParser.T__63 - 63)) | (1 << (JPAParser.T__64 - 63)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functions_returning_strings() {
	    let localctx = new Functions_returning_stringsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, JPAParser.RULE_functions_returning_strings);
	    var _la = 0; // Token type
	    try {
	        this.state = 858;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JPAParser.T__65:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 818;
	            this.match(JPAParser.T__65);
	            this.state = 819;
	            this.match(JPAParser.T__10);
	            this.state = 820;
	            this.string_primary();
	            this.state = 821;
	            this.match(JPAParser.T__1);
	            this.state = 822;
	            this.string_primary();
	            this.state = 823;
	            this.match(JPAParser.T__11);
	            break;
	        case JPAParser.T__66:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 825;
	            this.match(JPAParser.T__66);
	            this.state = 826;
	            this.match(JPAParser.T__10);
	            this.state = 827;
	            this.string_primary();
	            this.state = 828;
	            this.match(JPAParser.T__1);
	            this.state = 829;
	            this.simple_arithmetic_expression();
	            this.state = 830;
	            this.match(JPAParser.T__1);
	            this.state = 831;
	            this.simple_arithmetic_expression();
	            this.state = 832;
	            this.match(JPAParser.T__11);
	            break;
	        case JPAParser.T__67:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 834;
	            this.match(JPAParser.T__67);
	            this.state = 835;
	            this.match(JPAParser.T__10);
	            this.state = 843;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===JPAParser.T__0 || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (JPAParser.T__70 - 71)) | (1 << (JPAParser.T__71 - 71)) | (1 << (JPAParser.T__72 - 71)) | (1 << (JPAParser.TRIM_CHARACTER - 71)))) !== 0)) {
	                this.state = 837;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (JPAParser.T__70 - 71)) | (1 << (JPAParser.T__71 - 71)) | (1 << (JPAParser.T__72 - 71)))) !== 0)) {
	                    this.state = 836;
	                    this.trim_specification();
	                }

	                this.state = 840;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===JPAParser.TRIM_CHARACTER) {
	                    this.state = 839;
	                    this.match(JPAParser.TRIM_CHARACTER);
	                }

	                this.state = 842;
	                this.match(JPAParser.T__0);
	            }

	            this.state = 845;
	            this.string_primary();
	            this.state = 846;
	            this.match(JPAParser.T__11);
	            break;
	        case JPAParser.T__68:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 848;
	            this.match(JPAParser.T__68);
	            this.state = 849;
	            this.match(JPAParser.T__10);
	            this.state = 850;
	            this.string_primary();
	            this.state = 851;
	            this.match(JPAParser.T__11);
	            break;
	        case JPAParser.T__69:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 853;
	            this.match(JPAParser.T__69);
	            this.state = 854;
	            this.match(JPAParser.T__10);
	            this.state = 855;
	            this.string_primary();
	            this.state = 856;
	            this.match(JPAParser.T__11);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trim_specification() {
	    let localctx = new Trim_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, JPAParser.RULE_trim_specification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 860;
	        _la = this._input.LA(1);
	        if(!(((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (JPAParser.T__70 - 71)) | (1 << (JPAParser.T__71 - 71)) | (1 << (JPAParser.T__72 - 71)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numeric_literal() {
	    let localctx = new Numeric_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, JPAParser.RULE_numeric_literal);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pattern_value() {
	    let localctx = new Pattern_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, JPAParser.RULE_pattern_value);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	input_parameter() {
	    let localctx = new Input_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, JPAParser.RULE_input_parameter);
	    try {
	        this.state = 870;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JPAParser.T__73:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 866;
	            this.match(JPAParser.T__73);
	            this.state = 867;
	            this.match(JPAParser.INT_NUMERAL);
	            break;
	        case JPAParser.T__74:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 868;
	            this.match(JPAParser.T__74);
	            this.state = 869;
	            this.match(JPAParser.IDENTIFICATION_VARIABLE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, JPAParser.RULE_literal);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructor_name() {
	    let localctx = new Constructor_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, JPAParser.RULE_constructor_name);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_literal() {
	    let localctx = new Enum_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, JPAParser.RULE_enum_literal);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boolean_literal() {
	    let localctx = new Boolean_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, JPAParser.RULE_boolean_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 878;
	        _la = this._input.LA(1);
	        if(!(_la===JPAParser.T__75 || _la===JPAParser.T__76)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_state_field() {
	    let localctx = new Simple_state_fieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, JPAParser.RULE_simple_state_field);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	embedded_class_state_field() {
	    let localctx = new Embedded_class_state_fieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, JPAParser.RULE_embedded_class_state_field);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	single_valued_association_field() {
	    let localctx = new Single_valued_association_fieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, JPAParser.RULE_single_valued_association_field);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collection_valued_association_field() {
	    let localctx = new Collection_valued_association_fieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, JPAParser.RULE_collection_valued_association_field);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abstract_schema_name() {
	    let localctx = new Abstract_schema_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, JPAParser.RULE_abstract_schema_name);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

JPAParser.EOF = antlr4.Token.EOF;
JPAParser.T__0 = 1;
JPAParser.T__1 = 2;
JPAParser.T__2 = 3;
JPAParser.T__3 = 4;
JPAParser.T__4 = 5;
JPAParser.T__5 = 6;
JPAParser.T__6 = 7;
JPAParser.T__7 = 8;
JPAParser.T__8 = 9;
JPAParser.T__9 = 10;
JPAParser.T__10 = 11;
JPAParser.T__11 = 12;
JPAParser.T__12 = 13;
JPAParser.T__13 = 14;
JPAParser.T__14 = 15;
JPAParser.T__15 = 16;
JPAParser.T__16 = 17;
JPAParser.T__17 = 18;
JPAParser.T__18 = 19;
JPAParser.T__19 = 20;
JPAParser.T__20 = 21;
JPAParser.T__21 = 22;
JPAParser.T__22 = 23;
JPAParser.T__23 = 24;
JPAParser.T__24 = 25;
JPAParser.T__25 = 26;
JPAParser.T__26 = 27;
JPAParser.T__27 = 28;
JPAParser.T__28 = 29;
JPAParser.T__29 = 30;
JPAParser.T__30 = 31;
JPAParser.T__31 = 32;
JPAParser.T__32 = 33;
JPAParser.T__33 = 34;
JPAParser.T__34 = 35;
JPAParser.T__35 = 36;
JPAParser.T__36 = 37;
JPAParser.T__37 = 38;
JPAParser.T__38 = 39;
JPAParser.T__39 = 40;
JPAParser.T__40 = 41;
JPAParser.T__41 = 42;
JPAParser.T__42 = 43;
JPAParser.T__43 = 44;
JPAParser.T__44 = 45;
JPAParser.T__45 = 46;
JPAParser.T__46 = 47;
JPAParser.T__47 = 48;
JPAParser.T__48 = 49;
JPAParser.T__49 = 50;
JPAParser.T__50 = 51;
JPAParser.T__51 = 52;
JPAParser.T__52 = 53;
JPAParser.T__53 = 54;
JPAParser.T__54 = 55;
JPAParser.T__55 = 56;
JPAParser.T__56 = 57;
JPAParser.T__57 = 58;
JPAParser.T__58 = 59;
JPAParser.T__59 = 60;
JPAParser.T__60 = 61;
JPAParser.T__61 = 62;
JPAParser.T__62 = 63;
JPAParser.T__63 = 64;
JPAParser.T__64 = 65;
JPAParser.T__65 = 66;
JPAParser.T__66 = 67;
JPAParser.T__67 = 68;
JPAParser.T__68 = 69;
JPAParser.T__69 = 70;
JPAParser.T__70 = 71;
JPAParser.T__71 = 72;
JPAParser.T__72 = 73;
JPAParser.T__73 = 74;
JPAParser.T__74 = 75;
JPAParser.T__75 = 76;
JPAParser.T__76 = 77;
JPAParser.IDENTIFICATION_VARIABLE = 78;
JPAParser.CHARACTER = 79;
JPAParser.STRINGLITERAL = 80;
JPAParser.ESCAPE_CHARACTER = 81;
JPAParser.WS = 82;
JPAParser.TRIM_CHARACTER = 83;
JPAParser.INT_NUMERAL = 84;

JPAParser.RULE_ql_statement = 0;
JPAParser.RULE_select_statement = 1;
JPAParser.RULE_update_statement = 2;
JPAParser.RULE_delete_statement = 3;
JPAParser.RULE_from_clause = 4;
JPAParser.RULE_identification_variable_declaration = 5;
JPAParser.RULE_range_variable_declaration = 6;
JPAParser.RULE_join = 7;
JPAParser.RULE_fetch_join = 8;
JPAParser.RULE_join_spec = 9;
JPAParser.RULE_join_association_path_expression = 10;
JPAParser.RULE_join_collection_valued_path_expression = 11;
JPAParser.RULE_join_single_valued_association_path_expression = 12;
JPAParser.RULE_collection_member_declaration = 13;
JPAParser.RULE_single_valued_path_expression = 14;
JPAParser.RULE_state_field_path_expression = 15;
JPAParser.RULE_single_valued_association_path_expression = 16;
JPAParser.RULE_collection_valued_path_expression = 17;
JPAParser.RULE_state_field = 18;
JPAParser.RULE_update_clause = 19;
JPAParser.RULE_update_item = 20;
JPAParser.RULE_new_value = 21;
JPAParser.RULE_delete_clause = 22;
JPAParser.RULE_select_clause = 23;
JPAParser.RULE_select_expression = 24;
JPAParser.RULE_constructor_expression = 25;
JPAParser.RULE_constructor_item = 26;
JPAParser.RULE_aggregate_expression = 27;
JPAParser.RULE_where_clause = 28;
JPAParser.RULE_groupby_clause = 29;
JPAParser.RULE_groupby_item = 30;
JPAParser.RULE_having_clause = 31;
JPAParser.RULE_orderby_clause = 32;
JPAParser.RULE_orderby_item = 33;
JPAParser.RULE_subquery = 34;
JPAParser.RULE_subquery_from_clause = 35;
JPAParser.RULE_subselect_identification_variable_declaration = 36;
JPAParser.RULE_association_path_expression = 37;
JPAParser.RULE_simple_select_clause = 38;
JPAParser.RULE_simple_select_expression = 39;
JPAParser.RULE_conditional_expression = 40;
JPAParser.RULE_conditional_term = 41;
JPAParser.RULE_conditional_factor = 42;
JPAParser.RULE_conditional_primary = 43;
JPAParser.RULE_simple_cond_expression = 44;
JPAParser.RULE_between_expression = 45;
JPAParser.RULE_in_expression = 46;
JPAParser.RULE_in_item = 47;
JPAParser.RULE_like_expression = 48;
JPAParser.RULE_null_comparison_expression = 49;
JPAParser.RULE_empty_collection_comparison_expression = 50;
JPAParser.RULE_collection_member_expression = 51;
JPAParser.RULE_exists_expression = 52;
JPAParser.RULE_all_or_any_expression = 53;
JPAParser.RULE_comparison_expression = 54;
JPAParser.RULE_comparison_operator = 55;
JPAParser.RULE_arithmetic_expression = 56;
JPAParser.RULE_simple_arithmetic_expression = 57;
JPAParser.RULE_arithmetic_term = 58;
JPAParser.RULE_arithmetic_factor = 59;
JPAParser.RULE_arithmetic_primary = 60;
JPAParser.RULE_string_expression = 61;
JPAParser.RULE_string_primary = 62;
JPAParser.RULE_datetime_expression = 63;
JPAParser.RULE_datetime_primary = 64;
JPAParser.RULE_boolean_expression = 65;
JPAParser.RULE_boolean_primary = 66;
JPAParser.RULE_enum_expression = 67;
JPAParser.RULE_enum_primary = 68;
JPAParser.RULE_entity_expression = 69;
JPAParser.RULE_simple_entity_expression = 70;
JPAParser.RULE_functions_returning_numerics = 71;
JPAParser.RULE_functions_returning_datetime = 72;
JPAParser.RULE_functions_returning_strings = 73;
JPAParser.RULE_trim_specification = 74;
JPAParser.RULE_numeric_literal = 75;
JPAParser.RULE_pattern_value = 76;
JPAParser.RULE_input_parameter = 77;
JPAParser.RULE_literal = 78;
JPAParser.RULE_constructor_name = 79;
JPAParser.RULE_enum_literal = 80;
JPAParser.RULE_boolean_literal = 81;
JPAParser.RULE_simple_state_field = 82;
JPAParser.RULE_embedded_class_state_field = 83;
JPAParser.RULE_single_valued_association_field = 84;
JPAParser.RULE_collection_valued_association_field = 85;
JPAParser.RULE_abstract_schema_name = 86;

class Ql_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_ql_statement;
    }

	select_statement() {
	    return this.getTypedRuleContext(Select_statementContext,0);
	};

	update_statement() {
	    return this.getTypedRuleContext(Update_statementContext,0);
	};

	delete_statement() {
	    return this.getTypedRuleContext(Delete_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterQl_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitQl_statement(this);
		}
	}


}



class Select_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_select_statement;
    }

	select_clause() {
	    return this.getTypedRuleContext(Select_clauseContext,0);
	};

	from_clause() {
	    return this.getTypedRuleContext(From_clauseContext,0);
	};

	where_clause() {
	    return this.getTypedRuleContext(Where_clauseContext,0);
	};

	groupby_clause() {
	    return this.getTypedRuleContext(Groupby_clauseContext,0);
	};

	having_clause() {
	    return this.getTypedRuleContext(Having_clauseContext,0);
	};

	orderby_clause() {
	    return this.getTypedRuleContext(Orderby_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterSelect_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitSelect_statement(this);
		}
	}


}



class Update_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_update_statement;
    }

	update_clause() {
	    return this.getTypedRuleContext(Update_clauseContext,0);
	};

	where_clause() {
	    return this.getTypedRuleContext(Where_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterUpdate_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitUpdate_statement(this);
		}
	}


}



class Delete_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_delete_statement;
    }

	delete_clause() {
	    return this.getTypedRuleContext(Delete_clauseContext,0);
	};

	where_clause() {
	    return this.getTypedRuleContext(Where_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterDelete_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitDelete_statement(this);
		}
	}


}



class From_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_from_clause;
    }

	identification_variable_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Identification_variable_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Identification_variable_declarationContext,i);
	    }
	};

	collection_member_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Collection_member_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Collection_member_declarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterFrom_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitFrom_clause(this);
		}
	}


}



class Identification_variable_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_identification_variable_declaration;
    }

	range_variable_declaration() {
	    return this.getTypedRuleContext(Range_variable_declarationContext,0);
	};

	join = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JoinContext);
	    } else {
	        return this.getTypedRuleContext(JoinContext,i);
	    }
	};

	fetch_join = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fetch_joinContext);
	    } else {
	        return this.getTypedRuleContext(Fetch_joinContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterIdentification_variable_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitIdentification_variable_declaration(this);
		}
	}


}



class Range_variable_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_range_variable_declaration;
    }

	abstract_schema_name() {
	    return this.getTypedRuleContext(Abstract_schema_nameContext,0);
	};

	IDENTIFICATION_VARIABLE() {
	    return this.getToken(JPAParser.IDENTIFICATION_VARIABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterRange_variable_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitRange_variable_declaration(this);
		}
	}


}



class JoinContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_join;
    }

	join_spec() {
	    return this.getTypedRuleContext(Join_specContext,0);
	};

	join_association_path_expression() {
	    return this.getTypedRuleContext(Join_association_path_expressionContext,0);
	};

	IDENTIFICATION_VARIABLE() {
	    return this.getToken(JPAParser.IDENTIFICATION_VARIABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterJoin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitJoin(this);
		}
	}


}



class Fetch_joinContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_fetch_join;
    }

	join_spec() {
	    return this.getTypedRuleContext(Join_specContext,0);
	};

	join_association_path_expression() {
	    return this.getTypedRuleContext(Join_association_path_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterFetch_join(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitFetch_join(this);
		}
	}


}



class Join_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_join_spec;
    }


	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterJoin_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitJoin_spec(this);
		}
	}


}



class Join_association_path_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_join_association_path_expression;
    }

	join_collection_valued_path_expression() {
	    return this.getTypedRuleContext(Join_collection_valued_path_expressionContext,0);
	};

	join_single_valued_association_path_expression() {
	    return this.getTypedRuleContext(Join_single_valued_association_path_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterJoin_association_path_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitJoin_association_path_expression(this);
		}
	}


}



class Join_collection_valued_path_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_join_collection_valued_path_expression;
    }

	IDENTIFICATION_VARIABLE() {
	    return this.getToken(JPAParser.IDENTIFICATION_VARIABLE, 0);
	};

	collection_valued_association_field() {
	    return this.getTypedRuleContext(Collection_valued_association_fieldContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterJoin_collection_valued_path_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitJoin_collection_valued_path_expression(this);
		}
	}


}



class Join_single_valued_association_path_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_join_single_valued_association_path_expression;
    }

	IDENTIFICATION_VARIABLE() {
	    return this.getToken(JPAParser.IDENTIFICATION_VARIABLE, 0);
	};

	single_valued_association_field() {
	    return this.getTypedRuleContext(Single_valued_association_fieldContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterJoin_single_valued_association_path_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitJoin_single_valued_association_path_expression(this);
		}
	}


}



class Collection_member_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_collection_member_declaration;
    }

	collection_valued_path_expression() {
	    return this.getTypedRuleContext(Collection_valued_path_expressionContext,0);
	};

	IDENTIFICATION_VARIABLE() {
	    return this.getToken(JPAParser.IDENTIFICATION_VARIABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterCollection_member_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitCollection_member_declaration(this);
		}
	}


}



class Single_valued_path_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_single_valued_path_expression;
    }

	state_field_path_expression() {
	    return this.getTypedRuleContext(State_field_path_expressionContext,0);
	};

	single_valued_association_path_expression() {
	    return this.getTypedRuleContext(Single_valued_association_path_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterSingle_valued_path_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitSingle_valued_path_expression(this);
		}
	}


}



class State_field_path_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_state_field_path_expression;
    }

	state_field() {
	    return this.getTypedRuleContext(State_fieldContext,0);
	};

	IDENTIFICATION_VARIABLE() {
	    return this.getToken(JPAParser.IDENTIFICATION_VARIABLE, 0);
	};

	single_valued_association_path_expression() {
	    return this.getTypedRuleContext(Single_valued_association_path_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterState_field_path_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitState_field_path_expression(this);
		}
	}


}



class Single_valued_association_path_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_single_valued_association_path_expression;
    }

	IDENTIFICATION_VARIABLE() {
	    return this.getToken(JPAParser.IDENTIFICATION_VARIABLE, 0);
	};

	single_valued_association_field = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Single_valued_association_fieldContext);
	    } else {
	        return this.getTypedRuleContext(Single_valued_association_fieldContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterSingle_valued_association_path_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitSingle_valued_association_path_expression(this);
		}
	}


}



class Collection_valued_path_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_collection_valued_path_expression;
    }

	IDENTIFICATION_VARIABLE() {
	    return this.getToken(JPAParser.IDENTIFICATION_VARIABLE, 0);
	};

	collection_valued_association_field() {
	    return this.getTypedRuleContext(Collection_valued_association_fieldContext,0);
	};

	single_valued_association_field = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Single_valued_association_fieldContext);
	    } else {
	        return this.getTypedRuleContext(Single_valued_association_fieldContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterCollection_valued_path_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitCollection_valued_path_expression(this);
		}
	}


}



class State_fieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_state_field;
    }

	simple_state_field() {
	    return this.getTypedRuleContext(Simple_state_fieldContext,0);
	};

	embedded_class_state_field = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Embedded_class_state_fieldContext);
	    } else {
	        return this.getTypedRuleContext(Embedded_class_state_fieldContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterState_field(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitState_field(this);
		}
	}


}



class Update_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_update_clause;
    }

	abstract_schema_name() {
	    return this.getTypedRuleContext(Abstract_schema_nameContext,0);
	};

	update_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Update_itemContext);
	    } else {
	        return this.getTypedRuleContext(Update_itemContext,i);
	    }
	};

	IDENTIFICATION_VARIABLE() {
	    return this.getToken(JPAParser.IDENTIFICATION_VARIABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterUpdate_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitUpdate_clause(this);
		}
	}


}



class Update_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_update_item;
    }

	new_value() {
	    return this.getTypedRuleContext(New_valueContext,0);
	};

	state_field() {
	    return this.getTypedRuleContext(State_fieldContext,0);
	};

	single_valued_association_field() {
	    return this.getTypedRuleContext(Single_valued_association_fieldContext,0);
	};

	IDENTIFICATION_VARIABLE() {
	    return this.getToken(JPAParser.IDENTIFICATION_VARIABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterUpdate_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitUpdate_item(this);
		}
	}


}



class New_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_new_value;
    }

	simple_arithmetic_expression() {
	    return this.getTypedRuleContext(Simple_arithmetic_expressionContext,0);
	};

	string_primary() {
	    return this.getTypedRuleContext(String_primaryContext,0);
	};

	datetime_primary() {
	    return this.getTypedRuleContext(Datetime_primaryContext,0);
	};

	boolean_primary() {
	    return this.getTypedRuleContext(Boolean_primaryContext,0);
	};

	enum_primary() {
	    return this.getTypedRuleContext(Enum_primaryContext,0);
	};

	simple_entity_expression() {
	    return this.getTypedRuleContext(Simple_entity_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterNew_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitNew_value(this);
		}
	}


}



class Delete_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_delete_clause;
    }

	abstract_schema_name() {
	    return this.getTypedRuleContext(Abstract_schema_nameContext,0);
	};

	IDENTIFICATION_VARIABLE() {
	    return this.getToken(JPAParser.IDENTIFICATION_VARIABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterDelete_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitDelete_clause(this);
		}
	}


}



class Select_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_select_clause;
    }

	select_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Select_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Select_expressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterSelect_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitSelect_clause(this);
		}
	}


}



class Select_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_select_expression;
    }

	single_valued_path_expression() {
	    return this.getTypedRuleContext(Single_valued_path_expressionContext,0);
	};

	aggregate_expression() {
	    return this.getTypedRuleContext(Aggregate_expressionContext,0);
	};

	IDENTIFICATION_VARIABLE() {
	    return this.getToken(JPAParser.IDENTIFICATION_VARIABLE, 0);
	};

	constructor_expression() {
	    return this.getTypedRuleContext(Constructor_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterSelect_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitSelect_expression(this);
		}
	}


}



class Constructor_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_constructor_expression;
    }

	constructor_name() {
	    return this.getTypedRuleContext(Constructor_nameContext,0);
	};

	constructor_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Constructor_itemContext);
	    } else {
	        return this.getTypedRuleContext(Constructor_itemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterConstructor_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitConstructor_expression(this);
		}
	}


}



class Constructor_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_constructor_item;
    }

	single_valued_path_expression() {
	    return this.getTypedRuleContext(Single_valued_path_expressionContext,0);
	};

	aggregate_expression() {
	    return this.getTypedRuleContext(Aggregate_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterConstructor_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitConstructor_item(this);
		}
	}


}



class Aggregate_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_aggregate_expression;
    }

	state_field_path_expression() {
	    return this.getTypedRuleContext(State_field_path_expressionContext,0);
	};

	IDENTIFICATION_VARIABLE() {
	    return this.getToken(JPAParser.IDENTIFICATION_VARIABLE, 0);
	};

	single_valued_association_path_expression() {
	    return this.getTypedRuleContext(Single_valued_association_path_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterAggregate_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitAggregate_expression(this);
		}
	}


}



class Where_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_where_clause;
    }

	conditional_expression() {
	    return this.getTypedRuleContext(Conditional_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterWhere_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitWhere_clause(this);
		}
	}


}



class Groupby_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_groupby_clause;
    }

	groupby_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Groupby_itemContext);
	    } else {
	        return this.getTypedRuleContext(Groupby_itemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterGroupby_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitGroupby_clause(this);
		}
	}


}



class Groupby_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_groupby_item;
    }

	single_valued_path_expression() {
	    return this.getTypedRuleContext(Single_valued_path_expressionContext,0);
	};

	IDENTIFICATION_VARIABLE() {
	    return this.getToken(JPAParser.IDENTIFICATION_VARIABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterGroupby_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitGroupby_item(this);
		}
	}


}



class Having_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_having_clause;
    }

	conditional_expression() {
	    return this.getTypedRuleContext(Conditional_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterHaving_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitHaving_clause(this);
		}
	}


}



class Orderby_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_orderby_clause;
    }

	orderby_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Orderby_itemContext);
	    } else {
	        return this.getTypedRuleContext(Orderby_itemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterOrderby_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitOrderby_clause(this);
		}
	}


}



class Orderby_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_orderby_item;
    }

	state_field_path_expression() {
	    return this.getTypedRuleContext(State_field_path_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterOrderby_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitOrderby_item(this);
		}
	}


}



class SubqueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_subquery;
    }

	simple_select_clause() {
	    return this.getTypedRuleContext(Simple_select_clauseContext,0);
	};

	subquery_from_clause() {
	    return this.getTypedRuleContext(Subquery_from_clauseContext,0);
	};

	where_clause() {
	    return this.getTypedRuleContext(Where_clauseContext,0);
	};

	groupby_clause() {
	    return this.getTypedRuleContext(Groupby_clauseContext,0);
	};

	having_clause() {
	    return this.getTypedRuleContext(Having_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterSubquery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitSubquery(this);
		}
	}


}



class Subquery_from_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_subquery_from_clause;
    }

	subselect_identification_variable_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Subselect_identification_variable_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Subselect_identification_variable_declarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterSubquery_from_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitSubquery_from_clause(this);
		}
	}


}



class Subselect_identification_variable_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_subselect_identification_variable_declaration;
    }

	identification_variable_declaration() {
	    return this.getTypedRuleContext(Identification_variable_declarationContext,0);
	};

	association_path_expression() {
	    return this.getTypedRuleContext(Association_path_expressionContext,0);
	};

	IDENTIFICATION_VARIABLE() {
	    return this.getToken(JPAParser.IDENTIFICATION_VARIABLE, 0);
	};

	collection_member_declaration() {
	    return this.getTypedRuleContext(Collection_member_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterSubselect_identification_variable_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitSubselect_identification_variable_declaration(this);
		}
	}


}



class Association_path_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_association_path_expression;
    }

	collection_valued_path_expression() {
	    return this.getTypedRuleContext(Collection_valued_path_expressionContext,0);
	};

	single_valued_association_path_expression() {
	    return this.getTypedRuleContext(Single_valued_association_path_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterAssociation_path_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitAssociation_path_expression(this);
		}
	}


}



class Simple_select_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_simple_select_clause;
    }

	simple_select_expression() {
	    return this.getTypedRuleContext(Simple_select_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterSimple_select_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitSimple_select_clause(this);
		}
	}


}



class Simple_select_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_simple_select_expression;
    }

	single_valued_path_expression() {
	    return this.getTypedRuleContext(Single_valued_path_expressionContext,0);
	};

	aggregate_expression() {
	    return this.getTypedRuleContext(Aggregate_expressionContext,0);
	};

	IDENTIFICATION_VARIABLE() {
	    return this.getToken(JPAParser.IDENTIFICATION_VARIABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterSimple_select_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitSimple_select_expression(this);
		}
	}


}



class Conditional_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_conditional_expression;
    }

	conditional_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Conditional_termContext);
	    } else {
	        return this.getTypedRuleContext(Conditional_termContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterConditional_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitConditional_expression(this);
		}
	}


}



class Conditional_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_conditional_term;
    }

	conditional_factor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Conditional_factorContext);
	    } else {
	        return this.getTypedRuleContext(Conditional_factorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterConditional_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitConditional_term(this);
		}
	}


}



class Conditional_factorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_conditional_factor;
    }

	conditional_primary() {
	    return this.getTypedRuleContext(Conditional_primaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterConditional_factor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitConditional_factor(this);
		}
	}


}



class Conditional_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_conditional_primary;
    }

	simple_cond_expression() {
	    return this.getTypedRuleContext(Simple_cond_expressionContext,0);
	};

	conditional_expression() {
	    return this.getTypedRuleContext(Conditional_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterConditional_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitConditional_primary(this);
		}
	}


}



class Simple_cond_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_simple_cond_expression;
    }

	comparison_expression() {
	    return this.getTypedRuleContext(Comparison_expressionContext,0);
	};

	between_expression() {
	    return this.getTypedRuleContext(Between_expressionContext,0);
	};

	like_expression() {
	    return this.getTypedRuleContext(Like_expressionContext,0);
	};

	in_expression() {
	    return this.getTypedRuleContext(In_expressionContext,0);
	};

	null_comparison_expression() {
	    return this.getTypedRuleContext(Null_comparison_expressionContext,0);
	};

	empty_collection_comparison_expression() {
	    return this.getTypedRuleContext(Empty_collection_comparison_expressionContext,0);
	};

	collection_member_expression() {
	    return this.getTypedRuleContext(Collection_member_expressionContext,0);
	};

	exists_expression() {
	    return this.getTypedRuleContext(Exists_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterSimple_cond_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitSimple_cond_expression(this);
		}
	}


}



class Between_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_between_expression;
    }

	arithmetic_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Arithmetic_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Arithmetic_expressionContext,i);
	    }
	};

	string_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(String_expressionContext);
	    } else {
	        return this.getTypedRuleContext(String_expressionContext,i);
	    }
	};

	datetime_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Datetime_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Datetime_expressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterBetween_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitBetween_expression(this);
		}
	}


}



class In_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_in_expression;
    }

	state_field_path_expression() {
	    return this.getTypedRuleContext(State_field_path_expressionContext,0);
	};

	in_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(In_itemContext);
	    } else {
	        return this.getTypedRuleContext(In_itemContext,i);
	    }
	};

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterIn_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitIn_expression(this);
		}
	}


}



class In_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_in_item;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	input_parameter() {
	    return this.getTypedRuleContext(Input_parameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterIn_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitIn_item(this);
		}
	}


}



class Like_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_like_expression;
    }

	string_expression() {
	    return this.getTypedRuleContext(String_expressionContext,0);
	};

	pattern_value() {
	    return this.getTypedRuleContext(Pattern_valueContext,0);
	};

	ESCAPE_CHARACTER() {
	    return this.getToken(JPAParser.ESCAPE_CHARACTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterLike_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitLike_expression(this);
		}
	}


}



class Null_comparison_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_null_comparison_expression;
    }

	single_valued_path_expression() {
	    return this.getTypedRuleContext(Single_valued_path_expressionContext,0);
	};

	input_parameter() {
	    return this.getTypedRuleContext(Input_parameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterNull_comparison_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitNull_comparison_expression(this);
		}
	}


}



class Empty_collection_comparison_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_empty_collection_comparison_expression;
    }

	collection_valued_path_expression() {
	    return this.getTypedRuleContext(Collection_valued_path_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterEmpty_collection_comparison_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitEmpty_collection_comparison_expression(this);
		}
	}


}



class Collection_member_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_collection_member_expression;
    }

	entity_expression() {
	    return this.getTypedRuleContext(Entity_expressionContext,0);
	};

	collection_valued_path_expression() {
	    return this.getTypedRuleContext(Collection_valued_path_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterCollection_member_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitCollection_member_expression(this);
		}
	}


}



class Exists_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_exists_expression;
    }

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterExists_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitExists_expression(this);
		}
	}


}



class All_or_any_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_all_or_any_expression;
    }

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterAll_or_any_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitAll_or_any_expression(this);
		}
	}


}



class Comparison_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_comparison_expression;
    }

	string_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(String_expressionContext);
	    } else {
	        return this.getTypedRuleContext(String_expressionContext,i);
	    }
	};

	comparison_operator() {
	    return this.getTypedRuleContext(Comparison_operatorContext,0);
	};

	all_or_any_expression() {
	    return this.getTypedRuleContext(All_or_any_expressionContext,0);
	};

	boolean_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Boolean_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Boolean_expressionContext,i);
	    }
	};

	enum_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Enum_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Enum_expressionContext,i);
	    }
	};

	datetime_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Datetime_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Datetime_expressionContext,i);
	    }
	};

	entity_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Entity_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Entity_expressionContext,i);
	    }
	};

	arithmetic_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Arithmetic_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Arithmetic_expressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterComparison_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitComparison_expression(this);
		}
	}


}



class Comparison_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_comparison_operator;
    }


	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterComparison_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitComparison_operator(this);
		}
	}


}



class Arithmetic_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_arithmetic_expression;
    }

	simple_arithmetic_expression() {
	    return this.getTypedRuleContext(Simple_arithmetic_expressionContext,0);
	};

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterArithmetic_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitArithmetic_expression(this);
		}
	}


}



class Simple_arithmetic_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_simple_arithmetic_expression;
    }

	arithmetic_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Arithmetic_termContext);
	    } else {
	        return this.getTypedRuleContext(Arithmetic_termContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterSimple_arithmetic_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitSimple_arithmetic_expression(this);
		}
	}


}



class Arithmetic_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_arithmetic_term;
    }

	arithmetic_factor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Arithmetic_factorContext);
	    } else {
	        return this.getTypedRuleContext(Arithmetic_factorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterArithmetic_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitArithmetic_term(this);
		}
	}


}



class Arithmetic_factorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_arithmetic_factor;
    }

	arithmetic_primary() {
	    return this.getTypedRuleContext(Arithmetic_primaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterArithmetic_factor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitArithmetic_factor(this);
		}
	}


}



class Arithmetic_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_arithmetic_primary;
    }

	state_field_path_expression() {
	    return this.getTypedRuleContext(State_field_path_expressionContext,0);
	};

	numeric_literal() {
	    return this.getTypedRuleContext(Numeric_literalContext,0);
	};

	simple_arithmetic_expression() {
	    return this.getTypedRuleContext(Simple_arithmetic_expressionContext,0);
	};

	input_parameter() {
	    return this.getTypedRuleContext(Input_parameterContext,0);
	};

	functions_returning_numerics() {
	    return this.getTypedRuleContext(Functions_returning_numericsContext,0);
	};

	aggregate_expression() {
	    return this.getTypedRuleContext(Aggregate_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterArithmetic_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitArithmetic_primary(this);
		}
	}


}



class String_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_string_expression;
    }

	string_primary() {
	    return this.getTypedRuleContext(String_primaryContext,0);
	};

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterString_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitString_expression(this);
		}
	}


}



class String_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_string_primary;
    }

	state_field_path_expression() {
	    return this.getTypedRuleContext(State_field_path_expressionContext,0);
	};

	STRINGLITERAL() {
	    return this.getToken(JPAParser.STRINGLITERAL, 0);
	};

	input_parameter() {
	    return this.getTypedRuleContext(Input_parameterContext,0);
	};

	functions_returning_strings() {
	    return this.getTypedRuleContext(Functions_returning_stringsContext,0);
	};

	aggregate_expression() {
	    return this.getTypedRuleContext(Aggregate_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterString_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitString_primary(this);
		}
	}


}



class Datetime_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_datetime_expression;
    }

	datetime_primary() {
	    return this.getTypedRuleContext(Datetime_primaryContext,0);
	};

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterDatetime_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitDatetime_expression(this);
		}
	}


}



class Datetime_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_datetime_primary;
    }

	state_field_path_expression() {
	    return this.getTypedRuleContext(State_field_path_expressionContext,0);
	};

	input_parameter() {
	    return this.getTypedRuleContext(Input_parameterContext,0);
	};

	functions_returning_datetime() {
	    return this.getTypedRuleContext(Functions_returning_datetimeContext,0);
	};

	aggregate_expression() {
	    return this.getTypedRuleContext(Aggregate_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterDatetime_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitDatetime_primary(this);
		}
	}


}



class Boolean_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_boolean_expression;
    }

	boolean_primary() {
	    return this.getTypedRuleContext(Boolean_primaryContext,0);
	};

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterBoolean_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitBoolean_expression(this);
		}
	}


}



class Boolean_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_boolean_primary;
    }

	state_field_path_expression() {
	    return this.getTypedRuleContext(State_field_path_expressionContext,0);
	};

	boolean_literal() {
	    return this.getTypedRuleContext(Boolean_literalContext,0);
	};

	input_parameter() {
	    return this.getTypedRuleContext(Input_parameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterBoolean_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitBoolean_primary(this);
		}
	}


}



class Enum_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_enum_expression;
    }

	enum_primary() {
	    return this.getTypedRuleContext(Enum_primaryContext,0);
	};

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterEnum_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitEnum_expression(this);
		}
	}


}



class Enum_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_enum_primary;
    }

	state_field_path_expression() {
	    return this.getTypedRuleContext(State_field_path_expressionContext,0);
	};

	enum_literal() {
	    return this.getTypedRuleContext(Enum_literalContext,0);
	};

	input_parameter() {
	    return this.getTypedRuleContext(Input_parameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterEnum_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitEnum_primary(this);
		}
	}


}



class Entity_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_entity_expression;
    }

	single_valued_association_path_expression() {
	    return this.getTypedRuleContext(Single_valued_association_path_expressionContext,0);
	};

	simple_entity_expression() {
	    return this.getTypedRuleContext(Simple_entity_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterEntity_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitEntity_expression(this);
		}
	}


}



class Simple_entity_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_simple_entity_expression;
    }

	IDENTIFICATION_VARIABLE() {
	    return this.getToken(JPAParser.IDENTIFICATION_VARIABLE, 0);
	};

	input_parameter() {
	    return this.getTypedRuleContext(Input_parameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterSimple_entity_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitSimple_entity_expression(this);
		}
	}


}



class Functions_returning_numericsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_functions_returning_numerics;
    }

	string_primary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(String_primaryContext);
	    } else {
	        return this.getTypedRuleContext(String_primaryContext,i);
	    }
	};

	simple_arithmetic_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Simple_arithmetic_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Simple_arithmetic_expressionContext,i);
	    }
	};

	collection_valued_path_expression() {
	    return this.getTypedRuleContext(Collection_valued_path_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterFunctions_returning_numerics(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitFunctions_returning_numerics(this);
		}
	}


}



class Functions_returning_datetimeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_functions_returning_datetime;
    }


	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterFunctions_returning_datetime(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitFunctions_returning_datetime(this);
		}
	}


}



class Functions_returning_stringsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_functions_returning_strings;
    }

	string_primary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(String_primaryContext);
	    } else {
	        return this.getTypedRuleContext(String_primaryContext,i);
	    }
	};

	simple_arithmetic_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Simple_arithmetic_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Simple_arithmetic_expressionContext,i);
	    }
	};

	trim_specification() {
	    return this.getTypedRuleContext(Trim_specificationContext,0);
	};

	TRIM_CHARACTER() {
	    return this.getToken(JPAParser.TRIM_CHARACTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterFunctions_returning_strings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitFunctions_returning_strings(this);
		}
	}


}



class Trim_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_trim_specification;
    }


	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterTrim_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitTrim_specification(this);
		}
	}


}



class Numeric_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_numeric_literal;
    }


	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterNumeric_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitNumeric_literal(this);
		}
	}


}



class Pattern_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_pattern_value;
    }


	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterPattern_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitPattern_value(this);
		}
	}


}



class Input_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_input_parameter;
    }

	INT_NUMERAL() {
	    return this.getToken(JPAParser.INT_NUMERAL, 0);
	};

	IDENTIFICATION_VARIABLE() {
	    return this.getToken(JPAParser.IDENTIFICATION_VARIABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterInput_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitInput_parameter(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_literal;
    }


	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class Constructor_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_constructor_name;
    }


	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterConstructor_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitConstructor_name(this);
		}
	}


}



class Enum_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_enum_literal;
    }


	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterEnum_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitEnum_literal(this);
		}
	}


}



class Boolean_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_boolean_literal;
    }


	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterBoolean_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitBoolean_literal(this);
		}
	}


}



class Simple_state_fieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_simple_state_field;
    }


	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterSimple_state_field(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitSimple_state_field(this);
		}
	}


}



class Embedded_class_state_fieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_embedded_class_state_field;
    }


	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterEmbedded_class_state_field(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitEmbedded_class_state_field(this);
		}
	}


}



class Single_valued_association_fieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_single_valued_association_field;
    }


	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterSingle_valued_association_field(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitSingle_valued_association_field(this);
		}
	}


}



class Collection_valued_association_fieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_collection_valued_association_field;
    }


	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterCollection_valued_association_field(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitCollection_valued_association_field(this);
		}
	}


}



class Abstract_schema_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JPAParser.RULE_abstract_schema_name;
    }


	enterRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.enterAbstract_schema_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JPAListener ) {
	        listener.exitAbstract_schema_name(this);
		}
	}


}




JPAParser.Ql_statementContext = Ql_statementContext; 
JPAParser.Select_statementContext = Select_statementContext; 
JPAParser.Update_statementContext = Update_statementContext; 
JPAParser.Delete_statementContext = Delete_statementContext; 
JPAParser.From_clauseContext = From_clauseContext; 
JPAParser.Identification_variable_declarationContext = Identification_variable_declarationContext; 
JPAParser.Range_variable_declarationContext = Range_variable_declarationContext; 
JPAParser.JoinContext = JoinContext; 
JPAParser.Fetch_joinContext = Fetch_joinContext; 
JPAParser.Join_specContext = Join_specContext; 
JPAParser.Join_association_path_expressionContext = Join_association_path_expressionContext; 
JPAParser.Join_collection_valued_path_expressionContext = Join_collection_valued_path_expressionContext; 
JPAParser.Join_single_valued_association_path_expressionContext = Join_single_valued_association_path_expressionContext; 
JPAParser.Collection_member_declarationContext = Collection_member_declarationContext; 
JPAParser.Single_valued_path_expressionContext = Single_valued_path_expressionContext; 
JPAParser.State_field_path_expressionContext = State_field_path_expressionContext; 
JPAParser.Single_valued_association_path_expressionContext = Single_valued_association_path_expressionContext; 
JPAParser.Collection_valued_path_expressionContext = Collection_valued_path_expressionContext; 
JPAParser.State_fieldContext = State_fieldContext; 
JPAParser.Update_clauseContext = Update_clauseContext; 
JPAParser.Update_itemContext = Update_itemContext; 
JPAParser.New_valueContext = New_valueContext; 
JPAParser.Delete_clauseContext = Delete_clauseContext; 
JPAParser.Select_clauseContext = Select_clauseContext; 
JPAParser.Select_expressionContext = Select_expressionContext; 
JPAParser.Constructor_expressionContext = Constructor_expressionContext; 
JPAParser.Constructor_itemContext = Constructor_itemContext; 
JPAParser.Aggregate_expressionContext = Aggregate_expressionContext; 
JPAParser.Where_clauseContext = Where_clauseContext; 
JPAParser.Groupby_clauseContext = Groupby_clauseContext; 
JPAParser.Groupby_itemContext = Groupby_itemContext; 
JPAParser.Having_clauseContext = Having_clauseContext; 
JPAParser.Orderby_clauseContext = Orderby_clauseContext; 
JPAParser.Orderby_itemContext = Orderby_itemContext; 
JPAParser.SubqueryContext = SubqueryContext; 
JPAParser.Subquery_from_clauseContext = Subquery_from_clauseContext; 
JPAParser.Subselect_identification_variable_declarationContext = Subselect_identification_variable_declarationContext; 
JPAParser.Association_path_expressionContext = Association_path_expressionContext; 
JPAParser.Simple_select_clauseContext = Simple_select_clauseContext; 
JPAParser.Simple_select_expressionContext = Simple_select_expressionContext; 
JPAParser.Conditional_expressionContext = Conditional_expressionContext; 
JPAParser.Conditional_termContext = Conditional_termContext; 
JPAParser.Conditional_factorContext = Conditional_factorContext; 
JPAParser.Conditional_primaryContext = Conditional_primaryContext; 
JPAParser.Simple_cond_expressionContext = Simple_cond_expressionContext; 
JPAParser.Between_expressionContext = Between_expressionContext; 
JPAParser.In_expressionContext = In_expressionContext; 
JPAParser.In_itemContext = In_itemContext; 
JPAParser.Like_expressionContext = Like_expressionContext; 
JPAParser.Null_comparison_expressionContext = Null_comparison_expressionContext; 
JPAParser.Empty_collection_comparison_expressionContext = Empty_collection_comparison_expressionContext; 
JPAParser.Collection_member_expressionContext = Collection_member_expressionContext; 
JPAParser.Exists_expressionContext = Exists_expressionContext; 
JPAParser.All_or_any_expressionContext = All_or_any_expressionContext; 
JPAParser.Comparison_expressionContext = Comparison_expressionContext; 
JPAParser.Comparison_operatorContext = Comparison_operatorContext; 
JPAParser.Arithmetic_expressionContext = Arithmetic_expressionContext; 
JPAParser.Simple_arithmetic_expressionContext = Simple_arithmetic_expressionContext; 
JPAParser.Arithmetic_termContext = Arithmetic_termContext; 
JPAParser.Arithmetic_factorContext = Arithmetic_factorContext; 
JPAParser.Arithmetic_primaryContext = Arithmetic_primaryContext; 
JPAParser.String_expressionContext = String_expressionContext; 
JPAParser.String_primaryContext = String_primaryContext; 
JPAParser.Datetime_expressionContext = Datetime_expressionContext; 
JPAParser.Datetime_primaryContext = Datetime_primaryContext; 
JPAParser.Boolean_expressionContext = Boolean_expressionContext; 
JPAParser.Boolean_primaryContext = Boolean_primaryContext; 
JPAParser.Enum_expressionContext = Enum_expressionContext; 
JPAParser.Enum_primaryContext = Enum_primaryContext; 
JPAParser.Entity_expressionContext = Entity_expressionContext; 
JPAParser.Simple_entity_expressionContext = Simple_entity_expressionContext; 
JPAParser.Functions_returning_numericsContext = Functions_returning_numericsContext; 
JPAParser.Functions_returning_datetimeContext = Functions_returning_datetimeContext; 
JPAParser.Functions_returning_stringsContext = Functions_returning_stringsContext; 
JPAParser.Trim_specificationContext = Trim_specificationContext; 
JPAParser.Numeric_literalContext = Numeric_literalContext; 
JPAParser.Pattern_valueContext = Pattern_valueContext; 
JPAParser.Input_parameterContext = Input_parameterContext; 
JPAParser.LiteralContext = LiteralContext; 
JPAParser.Constructor_nameContext = Constructor_nameContext; 
JPAParser.Enum_literalContext = Enum_literalContext; 
JPAParser.Boolean_literalContext = Boolean_literalContext; 
JPAParser.Simple_state_fieldContext = Simple_state_fieldContext; 
JPAParser.Embedded_class_state_fieldContext = Embedded_class_state_fieldContext; 
JPAParser.Single_valued_association_fieldContext = Single_valued_association_fieldContext; 
JPAParser.Collection_valued_association_fieldContext = Collection_valued_association_fieldContext; 
JPAParser.Abstract_schema_nameContext = Abstract_schema_nameContext; 
