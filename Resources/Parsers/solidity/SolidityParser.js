// Generated from Resources/Parsers/solidity/Solidity.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import SolidityListener from './SolidityListener.js';
const serializedATN = [4,1,128,1057,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,1,0,1,0,1,0,1,0,1,0,5,0,182,8,0,10,0,12,0,185,9,
0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,3,3,198,8,3,1,4,1,4,3,4,202,
8,4,1,5,3,5,205,8,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,3,7,215,8,7,1,7,1,7,
1,7,1,7,3,7,221,8,7,1,7,1,7,3,7,225,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
5,7,235,8,7,10,7,12,7,238,9,7,1,7,1,7,1,7,1,7,1,7,3,7,245,8,7,1,8,1,8,1,
8,3,8,250,8,8,1,9,3,9,253,8,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,261,8,9,10,9,12,
9,264,9,9,3,9,266,8,9,1,9,1,9,5,9,270,8,9,10,9,12,9,273,9,9,1,9,1,9,1,10,
1,10,1,10,3,10,280,8,10,1,10,3,10,283,8,10,1,11,1,11,1,11,1,11,1,11,1,11,
1,11,3,11,292,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,5,12,301,8,12,10,12,
12,12,304,9,12,1,12,1,12,1,12,3,12,309,8,12,1,12,1,12,1,13,1,13,1,13,1,13,
1,13,5,13,318,8,13,10,13,12,13,321,9,13,1,13,1,13,3,13,325,8,13,1,14,1,14,
1,14,1,14,1,14,3,14,332,8,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
1,15,5,15,344,8,15,10,15,12,15,347,9,15,3,15,349,8,15,1,15,1,15,1,16,1,16,
1,16,3,16,356,8,16,1,16,1,16,5,16,360,8,16,10,16,12,16,363,9,16,1,16,1,16,
3,16,367,8,16,1,17,1,17,1,17,1,17,3,17,373,8,17,1,17,1,17,3,17,377,8,17,
1,18,1,18,1,18,1,18,3,18,383,8,18,1,18,1,18,1,18,3,18,388,8,18,1,19,1,19,
1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,5,20,401,8,20,10,20,12,20,404,
9,20,1,21,1,21,1,21,3,21,409,8,21,1,21,3,21,412,8,21,1,22,1,22,1,22,1,22,
3,22,418,8,22,1,22,1,22,1,23,1,23,1,23,1,23,3,23,426,8,23,1,23,1,23,5,23,
430,8,23,10,23,12,23,433,9,23,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,5,
25,443,8,25,10,25,12,25,446,9,25,3,25,448,8,25,1,25,1,25,1,26,1,26,3,26,
454,8,26,1,26,3,26,457,8,26,1,27,1,27,1,27,1,27,5,27,463,8,27,10,27,12,27,
466,9,27,3,27,468,8,27,1,27,1,27,1,28,1,28,3,28,474,8,28,1,28,3,28,477,8,
28,1,29,1,29,3,29,481,8,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,3,30,490,8,
30,1,30,1,30,1,30,3,30,495,8,30,1,30,5,30,498,8,30,10,30,12,30,501,9,30,
1,31,1,31,1,31,5,31,506,8,31,10,31,12,31,509,9,31,1,32,1,32,1,32,1,32,3,
32,515,8,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,3,33,525,8,33,1,34,1,
34,1,35,1,35,1,36,1,36,5,36,533,8,36,10,36,12,36,536,9,36,1,36,1,36,1,37,
1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,553,8,37,
1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,565,8,39,1,40,1,40,
1,40,3,40,570,8,40,1,40,1,40,4,40,574,8,40,11,40,12,40,575,1,41,1,41,3,41,
580,8,41,1,41,3,41,583,8,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,43,
1,43,1,43,1,43,3,43,597,8,43,1,43,1,43,3,43,601,8,43,1,43,3,43,604,8,43,
1,43,1,43,1,43,1,44,1,44,3,44,611,8,44,1,45,1,45,3,45,615,8,45,1,45,1,45,
1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,
49,1,49,3,49,635,8,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,
1,52,1,52,1,52,1,52,1,52,1,52,3,52,653,8,52,1,52,1,52,3,52,657,8,52,1,52,
1,52,1,53,3,53,662,8,53,1,53,1,53,3,53,666,8,53,5,53,668,8,53,10,53,12,53,
671,9,53,1,54,1,54,3,54,675,8,54,1,54,5,54,678,8,54,10,54,12,54,681,9,54,
1,54,3,54,684,8,54,1,54,1,54,1,55,1,55,3,55,690,8,55,1,55,1,55,1,55,1,55,
1,55,1,55,1,55,1,55,1,55,3,55,701,8,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
56,1,56,3,56,726,8,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,775,8,56,1,56,1,56,1,56,1,56,
3,56,781,8,56,1,56,1,56,3,56,785,8,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
1,56,1,56,1,56,1,56,1,56,1,56,1,56,5,56,801,8,56,10,56,12,56,804,9,56,1,
57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,813,8,57,1,57,1,57,1,57,1,57,1,57,
3,57,820,8,57,3,57,822,8,57,1,58,1,58,1,58,5,58,827,8,58,10,58,12,58,830,
9,58,1,59,1,59,1,59,5,59,835,8,59,10,59,12,59,838,9,59,1,59,3,59,841,8,59,
1,60,1,60,1,60,1,60,1,61,1,61,3,61,849,8,61,1,61,1,61,3,61,853,8,61,3,61,
855,8,61,1,62,1,62,1,62,1,62,1,62,1,63,1,63,3,63,864,8,63,1,63,1,63,3,63,
868,8,63,5,63,870,8,63,10,63,12,63,873,9,63,1,63,1,63,1,63,1,63,1,63,5,63,
880,8,63,10,63,12,63,883,9,63,3,63,885,8,63,1,63,3,63,888,8,63,1,64,1,64,
3,64,892,8,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
1,65,1,65,1,65,1,65,1,65,1,65,3,65,912,8,65,1,66,1,66,5,66,916,8,66,10,66,
12,66,919,9,66,1,66,1,66,1,67,1,67,3,67,925,8,67,1,68,1,68,1,68,1,68,3,68,
931,8,68,1,68,1,68,3,68,935,8,68,1,68,1,68,5,68,939,8,68,10,68,12,68,942,
9,68,1,68,3,68,945,8,68,1,69,1,69,1,69,1,69,3,69,951,8,69,1,70,1,70,1,70,
1,70,1,71,1,71,1,71,5,71,960,8,71,10,71,12,71,963,9,71,1,72,1,72,1,72,1,
73,1,73,1,73,1,74,1,74,1,74,5,74,974,8,74,10,74,12,74,977,9,74,1,75,1,75,
1,75,3,75,982,8,75,1,75,1,75,1,75,1,75,3,75,988,8,75,1,76,1,76,1,76,1,76,
3,76,994,8,76,1,76,1,76,3,76,998,8,76,1,76,1,76,1,77,1,77,1,77,1,77,1,78,
1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,3,
80,1021,8,80,1,80,3,80,1024,8,80,1,81,1,81,3,81,1028,8,81,1,81,1,81,3,81,
1032,8,81,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,84,1,84,3,84,1043,8,84,1,
85,1,85,1,86,4,86,1048,8,86,11,86,12,86,1049,1,87,4,87,1053,8,87,11,87,12,
87,1054,1,87,0,2,60,112,88,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
160,162,164,166,168,170,172,174,0,14,1,0,3,9,1,0,18,20,1,0,38,40,4,0,106,
106,113,113,117,117,119,119,1,0,56,57,1,0,60,61,1,0,62,63,2,0,12,12,66,67,
1,0,68,69,1,0,5,8,1,0,72,73,2,0,9,9,77,86,1,0,99,100,4,0,13,13,40,40,52,
52,123,123,1186,0,183,1,0,0,0,2,188,1,0,0,0,4,193,1,0,0,0,6,197,1,0,0,0,
8,199,1,0,0,0,10,204,1,0,0,0,12,208,1,0,0,0,14,244,1,0,0,0,16,246,1,0,0,
0,18,252,1,0,0,0,20,276,1,0,0,0,22,291,1,0,0,0,24,293,1,0,0,0,26,312,1,0,
0,0,28,326,1,0,0,0,30,335,1,0,0,0,32,352,1,0,0,0,34,368,1,0,0,0,36,387,1,
0,0,0,38,389,1,0,0,0,40,402,1,0,0,0,42,405,1,0,0,0,44,413,1,0,0,0,46,421,
1,0,0,0,48,436,1,0,0,0,50,438,1,0,0,0,52,451,1,0,0,0,54,458,1,0,0,0,56,471,
1,0,0,0,58,478,1,0,0,0,60,489,1,0,0,0,62,502,1,0,0,0,64,510,1,0,0,0,66,520,
1,0,0,0,68,526,1,0,0,0,70,528,1,0,0,0,72,530,1,0,0,0,74,552,1,0,0,0,76,554,
1,0,0,0,78,557,1,0,0,0,80,566,1,0,0,0,82,577,1,0,0,0,84,586,1,0,0,0,86,592,
1,0,0,0,88,610,1,0,0,0,90,612,1,0,0,0,92,618,1,0,0,0,94,626,1,0,0,0,96,629,
1,0,0,0,98,632,1,0,0,0,100,638,1,0,0,0,102,641,1,0,0,0,104,652,1,0,0,0,106,
661,1,0,0,0,108,672,1,0,0,0,110,700,1,0,0,0,112,725,1,0,0,0,114,821,1,0,
0,0,116,823,1,0,0,0,118,831,1,0,0,0,120,842,1,0,0,0,122,854,1,0,0,0,124,
856,1,0,0,0,126,887,1,0,0,0,128,891,1,0,0,0,130,911,1,0,0,0,132,913,1,0,
0,0,134,924,1,0,0,0,136,930,1,0,0,0,138,946,1,0,0,0,140,952,1,0,0,0,142,
956,1,0,0,0,144,964,1,0,0,0,146,967,1,0,0,0,148,970,1,0,0,0,150,987,1,0,
0,0,152,989,1,0,0,0,154,1001,1,0,0,0,156,1005,1,0,0,0,158,1011,1,0,0,0,160,
1020,1,0,0,0,162,1025,1,0,0,0,164,1033,1,0,0,0,166,1036,1,0,0,0,168,1040,
1,0,0,0,170,1044,1,0,0,0,172,1047,1,0,0,0,174,1052,1,0,0,0,176,182,3,2,1,
0,177,182,3,14,7,0,178,182,3,30,15,0,179,182,3,46,23,0,180,182,3,18,9,0,
181,176,1,0,0,0,181,177,1,0,0,0,181,178,1,0,0,0,181,179,1,0,0,0,181,180,
1,0,0,0,182,185,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,186,1,0,0,0,
185,183,1,0,0,0,186,187,5,0,0,1,187,1,1,0,0,0,188,189,5,1,0,0,189,190,3,
4,2,0,190,191,3,6,3,0,191,192,5,2,0,0,192,3,1,0,0,0,193,194,3,170,85,0,194,
5,1,0,0,0,195,198,3,8,4,0,196,198,3,112,56,0,197,195,1,0,0,0,197,196,1,0,
0,0,198,7,1,0,0,0,199,201,3,10,5,0,200,202,3,10,5,0,201,200,1,0,0,0,201,
202,1,0,0,0,202,9,1,0,0,0,203,205,3,12,6,0,204,203,1,0,0,0,204,205,1,0,0,
0,205,206,1,0,0,0,206,207,5,125,0,0,207,11,1,0,0,0,208,209,7,0,0,0,209,13,
1,0,0,0,210,211,5,10,0,0,211,214,5,124,0,0,212,213,5,11,0,0,213,215,3,170,
85,0,214,212,1,0,0,0,214,215,1,0,0,0,215,216,1,0,0,0,216,245,5,2,0,0,217,
220,5,10,0,0,218,221,5,12,0,0,219,221,3,170,85,0,220,218,1,0,0,0,220,219,
1,0,0,0,221,224,1,0,0,0,222,223,5,11,0,0,223,225,3,170,85,0,224,222,1,0,
0,0,224,225,1,0,0,0,225,226,1,0,0,0,226,227,5,13,0,0,227,228,5,124,0,0,228,
245,5,2,0,0,229,230,5,10,0,0,230,231,5,14,0,0,231,236,3,16,8,0,232,233,5,
15,0,0,233,235,3,16,8,0,234,232,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,
236,237,1,0,0,0,237,239,1,0,0,0,238,236,1,0,0,0,239,240,5,16,0,0,240,241,
5,13,0,0,241,242,5,124,0,0,242,243,5,2,0,0,243,245,1,0,0,0,244,210,1,0,0,
0,244,217,1,0,0,0,244,229,1,0,0,0,245,15,1,0,0,0,246,249,3,170,85,0,247,
248,5,11,0,0,248,250,3,170,85,0,249,247,1,0,0,0,249,250,1,0,0,0,250,17,1,
0,0,0,251,253,5,17,0,0,252,251,1,0,0,0,252,253,1,0,0,0,253,254,1,0,0,0,254,
255,7,1,0,0,255,265,3,170,85,0,256,257,5,21,0,0,257,262,3,20,10,0,258,259,
5,15,0,0,259,261,3,20,10,0,260,258,1,0,0,0,261,264,1,0,0,0,262,260,1,0,0,
0,262,263,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,265,256,1,0,0,0,265,266,
1,0,0,0,266,267,1,0,0,0,267,271,5,14,0,0,268,270,3,22,11,0,269,268,1,0,0,
0,270,273,1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,0,272,274,1,0,0,0,273,271,
1,0,0,0,274,275,5,16,0,0,275,19,1,0,0,0,276,282,3,62,31,0,277,279,5,22,0,
0,278,280,3,116,58,0,279,278,1,0,0,0,279,280,1,0,0,0,280,281,1,0,0,0,281,
283,5,23,0,0,282,277,1,0,0,0,282,283,1,0,0,0,283,21,1,0,0,0,284,292,3,24,
12,0,285,292,3,28,14,0,286,292,3,30,15,0,287,292,3,32,16,0,288,292,3,34,
17,0,289,292,3,44,22,0,290,292,3,46,23,0,291,284,1,0,0,0,291,285,1,0,0,0,
291,286,1,0,0,0,291,287,1,0,0,0,291,288,1,0,0,0,291,289,1,0,0,0,291,290,
1,0,0,0,292,23,1,0,0,0,293,302,3,60,30,0,294,301,5,115,0,0,295,301,5,112,
0,0,296,301,5,114,0,0,297,301,5,106,0,0,298,301,5,107,0,0,299,301,3,26,13,
0,300,294,1,0,0,0,300,295,1,0,0,0,300,296,1,0,0,0,300,297,1,0,0,0,300,298,
1,0,0,0,300,299,1,0,0,0,301,304,1,0,0,0,302,300,1,0,0,0,302,303,1,0,0,0,
303,305,1,0,0,0,304,302,1,0,0,0,305,308,3,170,85,0,306,307,5,9,0,0,307,309,
3,112,56,0,308,306,1,0,0,0,308,309,1,0,0,0,309,310,1,0,0,0,310,311,5,2,0,
0,311,25,1,0,0,0,312,324,5,24,0,0,313,314,5,22,0,0,314,319,3,62,31,0,315,
316,5,15,0,0,316,318,3,62,31,0,317,315,1,0,0,0,318,321,1,0,0,0,319,317,1,
0,0,0,319,320,1,0,0,0,320,322,1,0,0,0,321,319,1,0,0,0,322,323,5,23,0,0,323,
325,1,0,0,0,324,313,1,0,0,0,324,325,1,0,0,0,325,27,1,0,0,0,326,327,5,25,
0,0,327,328,3,170,85,0,328,331,5,26,0,0,329,332,5,12,0,0,330,332,3,60,30,
0,331,329,1,0,0,0,331,330,1,0,0,0,332,333,1,0,0,0,333,334,5,2,0,0,334,29,
1,0,0,0,335,336,5,27,0,0,336,337,3,170,85,0,337,348,5,14,0,0,338,339,3,58,
29,0,339,345,5,2,0,0,340,341,3,58,29,0,341,342,5,2,0,0,342,344,1,0,0,0,343,
340,1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,349,1,0,
0,0,347,345,1,0,0,0,348,338,1,0,0,0,348,349,1,0,0,0,349,350,1,0,0,0,350,
351,5,16,0,0,351,31,1,0,0,0,352,353,5,28,0,0,353,355,3,170,85,0,354,356,
3,50,25,0,355,354,1,0,0,0,355,356,1,0,0,0,356,361,1,0,0,0,357,360,5,116,
0,0,358,360,3,26,13,0,359,357,1,0,0,0,359,358,1,0,0,0,360,363,1,0,0,0,361,
359,1,0,0,0,361,362,1,0,0,0,362,366,1,0,0,0,363,361,1,0,0,0,364,367,5,2,
0,0,365,367,3,72,36,0,366,364,1,0,0,0,366,365,1,0,0,0,367,33,1,0,0,0,368,
369,3,36,18,0,369,370,3,50,25,0,370,372,3,40,20,0,371,373,3,38,19,0,372,
371,1,0,0,0,372,373,1,0,0,0,373,376,1,0,0,0,374,377,5,2,0,0,375,377,3,72,
36,0,376,374,1,0,0,0,376,375,1,0,0,0,377,35,1,0,0,0,378,382,5,29,0,0,379,
383,3,170,85,0,380,383,5,122,0,0,381,383,5,121,0,0,382,379,1,0,0,0,382,380,
1,0,0,0,382,381,1,0,0,0,382,383,1,0,0,0,383,388,1,0,0,0,384,388,5,120,0,
0,385,388,5,121,0,0,386,388,5,122,0,0,387,378,1,0,0,0,387,384,1,0,0,0,387,
385,1,0,0,0,387,386,1,0,0,0,388,37,1,0,0,0,389,390,5,30,0,0,390,391,3,50,
25,0,391,39,1,0,0,0,392,401,3,42,21,0,393,401,3,70,35,0,394,401,5,110,0,
0,395,401,5,115,0,0,396,401,5,112,0,0,397,401,5,114,0,0,398,401,5,116,0,
0,399,401,3,26,13,0,400,392,1,0,0,0,400,393,1,0,0,0,400,394,1,0,0,0,400,
395,1,0,0,0,400,396,1,0,0,0,400,397,1,0,0,0,400,398,1,0,0,0,400,399,1,0,
0,0,401,404,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,41,1,0,0,0,404,402,
1,0,0,0,405,411,3,170,85,0,406,408,5,22,0,0,407,409,3,116,58,0,408,407,1,
0,0,0,408,409,1,0,0,0,409,410,1,0,0,0,410,412,5,23,0,0,411,406,1,0,0,0,411,
412,1,0,0,0,412,43,1,0,0,0,413,414,5,31,0,0,414,415,3,170,85,0,415,417,3,
54,27,0,416,418,5,104,0,0,417,416,1,0,0,0,417,418,1,0,0,0,418,419,1,0,0,
0,419,420,5,2,0,0,420,45,1,0,0,0,421,422,5,32,0,0,422,423,3,170,85,0,423,
425,5,14,0,0,424,426,3,48,24,0,425,424,1,0,0,0,425,426,1,0,0,0,426,431,1,
0,0,0,427,428,5,15,0,0,428,430,3,48,24,0,429,427,1,0,0,0,430,433,1,0,0,0,
431,429,1,0,0,0,431,432,1,0,0,0,432,434,1,0,0,0,433,431,1,0,0,0,434,435,
5,16,0,0,435,47,1,0,0,0,436,437,3,170,85,0,437,49,1,0,0,0,438,447,5,22,0,
0,439,444,3,52,26,0,440,441,5,15,0,0,441,443,3,52,26,0,442,440,1,0,0,0,443,
446,1,0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,448,1,0,0,0,446,444,1,0,
0,0,447,439,1,0,0,0,447,448,1,0,0,0,448,449,1,0,0,0,449,450,5,23,0,0,450,
51,1,0,0,0,451,453,3,60,30,0,452,454,3,68,34,0,453,452,1,0,0,0,453,454,1,
0,0,0,454,456,1,0,0,0,455,457,3,170,85,0,456,455,1,0,0,0,456,457,1,0,0,0,
457,53,1,0,0,0,458,467,5,22,0,0,459,464,3,56,28,0,460,461,5,15,0,0,461,463,
3,56,28,0,462,460,1,0,0,0,463,466,1,0,0,0,464,462,1,0,0,0,464,465,1,0,0,
0,465,468,1,0,0,0,466,464,1,0,0,0,467,459,1,0,0,0,467,468,1,0,0,0,468,469,
1,0,0,0,469,470,5,23,0,0,470,55,1,0,0,0,471,473,3,60,30,0,472,474,5,111,
0,0,473,472,1,0,0,0,473,474,1,0,0,0,474,476,1,0,0,0,475,477,3,170,85,0,476,
475,1,0,0,0,476,477,1,0,0,0,477,57,1,0,0,0,478,480,3,60,30,0,479,481,3,68,
34,0,480,479,1,0,0,0,480,481,1,0,0,0,481,482,1,0,0,0,482,483,3,170,85,0,
483,59,1,0,0,0,484,485,6,30,-1,0,485,490,3,110,55,0,486,490,3,62,31,0,487,
490,3,64,32,0,488,490,3,66,33,0,489,484,1,0,0,0,489,486,1,0,0,0,489,487,
1,0,0,0,489,488,1,0,0,0,490,499,1,0,0,0,491,492,10,2,0,0,492,494,5,33,0,
0,493,495,3,112,56,0,494,493,1,0,0,0,494,495,1,0,0,0,495,496,1,0,0,0,496,
498,5,34,0,0,497,491,1,0,0,0,498,501,1,0,0,0,499,497,1,0,0,0,499,500,1,0,
0,0,500,61,1,0,0,0,501,499,1,0,0,0,502,507,3,170,85,0,503,504,5,35,0,0,504,
506,3,170,85,0,505,503,1,0,0,0,506,509,1,0,0,0,507,505,1,0,0,0,507,508,1,
0,0,0,508,63,1,0,0,0,509,507,1,0,0,0,510,511,5,36,0,0,511,514,5,22,0,0,512,
515,3,110,55,0,513,515,3,62,31,0,514,512,1,0,0,0,514,513,1,0,0,0,515,516,
1,0,0,0,516,517,5,37,0,0,517,518,3,60,30,0,518,519,5,23,0,0,519,65,1,0,0,
0,520,521,5,29,0,0,521,522,3,50,25,0,522,524,3,40,20,0,523,525,3,38,19,0,
524,523,1,0,0,0,524,525,1,0,0,0,525,67,1,0,0,0,526,527,7,2,0,0,527,69,1,
0,0,0,528,529,7,3,0,0,529,71,1,0,0,0,530,534,5,14,0,0,531,533,3,74,37,0,
532,531,1,0,0,0,533,536,1,0,0,0,534,532,1,0,0,0,534,535,1,0,0,0,535,537,
1,0,0,0,536,534,1,0,0,0,537,538,5,16,0,0,538,73,1,0,0,0,539,553,3,78,39,
0,540,553,3,80,40,0,541,553,3,84,42,0,542,553,3,86,43,0,543,553,3,72,36,
0,544,553,3,90,45,0,545,553,3,92,46,0,546,553,3,94,47,0,547,553,3,96,48,
0,548,553,3,98,49,0,549,553,3,100,50,0,550,553,3,102,51,0,551,553,3,88,44,
0,552,539,1,0,0,0,552,540,1,0,0,0,552,541,1,0,0,0,552,542,1,0,0,0,552,543,
1,0,0,0,552,544,1,0,0,0,552,545,1,0,0,0,552,546,1,0,0,0,552,547,1,0,0,0,
552,548,1,0,0,0,552,549,1,0,0,0,552,550,1,0,0,0,552,551,1,0,0,0,553,75,1,
0,0,0,554,555,3,112,56,0,555,556,5,2,0,0,556,77,1,0,0,0,557,558,5,41,0,0,
558,559,5,22,0,0,559,560,3,112,56,0,560,561,5,23,0,0,561,564,3,74,37,0,562,
563,5,42,0,0,563,565,3,74,37,0,564,562,1,0,0,0,564,565,1,0,0,0,565,79,1,
0,0,0,566,567,5,43,0,0,567,569,3,112,56,0,568,570,3,38,19,0,569,568,1,0,
0,0,569,570,1,0,0,0,570,571,1,0,0,0,571,573,3,72,36,0,572,574,3,82,41,0,
573,572,1,0,0,0,574,575,1,0,0,0,575,573,1,0,0,0,575,576,1,0,0,0,576,81,1,
0,0,0,577,582,5,44,0,0,578,580,3,170,85,0,579,578,1,0,0,0,579,580,1,0,0,
0,580,581,1,0,0,0,581,583,3,50,25,0,582,579,1,0,0,0,582,583,1,0,0,0,583,
584,1,0,0,0,584,585,3,72,36,0,585,83,1,0,0,0,586,587,5,45,0,0,587,588,5,
22,0,0,588,589,3,112,56,0,589,590,5,23,0,0,590,591,3,74,37,0,591,85,1,0,
0,0,592,593,5,26,0,0,593,596,5,22,0,0,594,597,3,88,44,0,595,597,5,2,0,0,
596,594,1,0,0,0,596,595,1,0,0,0,597,600,1,0,0,0,598,601,3,76,38,0,599,601,
5,2,0,0,600,598,1,0,0,0,600,599,1,0,0,0,601,603,1,0,0,0,602,604,3,112,56,
0,603,602,1,0,0,0,603,604,1,0,0,0,604,605,1,0,0,0,605,606,5,23,0,0,606,607,
3,74,37,0,607,87,1,0,0,0,608,611,3,104,52,0,609,611,3,76,38,0,610,608,1,
0,0,0,610,609,1,0,0,0,611,89,1,0,0,0,612,614,5,46,0,0,613,615,5,124,0,0,
614,613,1,0,0,0,614,615,1,0,0,0,615,616,1,0,0,0,616,617,3,132,66,0,617,91,
1,0,0,0,618,619,5,47,0,0,619,620,3,74,37,0,620,621,5,45,0,0,621,622,5,22,
0,0,622,623,3,112,56,0,623,624,5,23,0,0,624,625,5,2,0,0,625,93,1,0,0,0,626,
627,5,108,0,0,627,628,5,2,0,0,628,95,1,0,0,0,629,630,5,105,0,0,630,631,5,
2,0,0,631,97,1,0,0,0,632,634,5,48,0,0,633,635,3,112,56,0,634,633,1,0,0,0,
634,635,1,0,0,0,635,636,1,0,0,0,636,637,5,2,0,0,637,99,1,0,0,0,638,639,5,
49,0,0,639,640,5,2,0,0,640,101,1,0,0,0,641,642,5,50,0,0,642,643,3,124,62,
0,643,644,5,2,0,0,644,103,1,0,0,0,645,646,5,51,0,0,646,653,3,108,54,0,647,
653,3,58,29,0,648,649,5,22,0,0,649,650,3,106,53,0,650,651,5,23,0,0,651,653,
1,0,0,0,652,645,1,0,0,0,652,647,1,0,0,0,652,648,1,0,0,0,653,656,1,0,0,0,
654,655,5,9,0,0,655,657,3,112,56,0,656,654,1,0,0,0,656,657,1,0,0,0,657,658,
1,0,0,0,658,659,5,2,0,0,659,105,1,0,0,0,660,662,3,58,29,0,661,660,1,0,0,
0,661,662,1,0,0,0,662,669,1,0,0,0,663,665,5,15,0,0,664,666,3,58,29,0,665,
664,1,0,0,0,665,666,1,0,0,0,666,668,1,0,0,0,667,663,1,0,0,0,668,671,1,0,
0,0,669,667,1,0,0,0,669,670,1,0,0,0,670,107,1,0,0,0,671,669,1,0,0,0,672,
679,5,22,0,0,673,675,3,170,85,0,674,673,1,0,0,0,674,675,1,0,0,0,675,676,
1,0,0,0,676,678,5,15,0,0,677,674,1,0,0,0,678,681,1,0,0,0,679,677,1,0,0,0,
679,680,1,0,0,0,680,683,1,0,0,0,681,679,1,0,0,0,682,684,3,170,85,0,683,682,
1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,686,5,23,0,0,686,109,1,0,0,0,
687,689,5,52,0,0,688,690,5,113,0,0,689,688,1,0,0,0,689,690,1,0,0,0,690,701,
1,0,0,0,691,701,5,53,0,0,692,701,5,54,0,0,693,701,5,51,0,0,694,701,5,93,
0,0,695,701,5,94,0,0,696,701,5,55,0,0,697,701,5,95,0,0,698,701,5,96,0,0,
699,701,5,97,0,0,700,687,1,0,0,0,700,691,1,0,0,0,700,692,1,0,0,0,700,693,
1,0,0,0,700,694,1,0,0,0,700,695,1,0,0,0,700,696,1,0,0,0,700,697,1,0,0,0,
700,698,1,0,0,0,700,699,1,0,0,0,701,111,1,0,0,0,702,703,6,56,-1,0,703,704,
5,58,0,0,704,726,3,60,30,0,705,706,5,113,0,0,706,707,5,22,0,0,707,708,3,
112,56,0,708,709,5,23,0,0,709,726,1,0,0,0,710,711,5,22,0,0,711,712,3,112,
56,0,712,713,5,23,0,0,713,726,1,0,0,0,714,715,7,4,0,0,715,726,3,112,56,19,
716,717,7,5,0,0,717,726,3,112,56,18,718,719,7,6,0,0,719,726,3,112,56,17,
720,721,5,64,0,0,721,726,3,112,56,16,722,723,5,4,0,0,723,726,3,112,56,15,
724,726,3,114,57,0,725,702,1,0,0,0,725,705,1,0,0,0,725,710,1,0,0,0,725,714,
1,0,0,0,725,716,1,0,0,0,725,718,1,0,0,0,725,720,1,0,0,0,725,722,1,0,0,0,
725,724,1,0,0,0,726,802,1,0,0,0,727,728,10,14,0,0,728,729,5,65,0,0,729,801,
3,112,56,15,730,731,10,13,0,0,731,732,7,7,0,0,732,801,3,112,56,14,733,734,
10,12,0,0,734,735,7,5,0,0,735,801,3,112,56,13,736,737,10,11,0,0,737,738,
7,8,0,0,738,801,3,112,56,12,739,740,10,10,0,0,740,741,5,70,0,0,741,801,3,
112,56,11,742,743,10,9,0,0,743,744,5,3,0,0,744,801,3,112,56,10,745,746,10,
8,0,0,746,747,5,71,0,0,747,801,3,112,56,9,748,749,10,7,0,0,749,750,7,9,0,
0,750,801,3,112,56,8,751,752,10,6,0,0,752,753,7,10,0,0,753,801,3,112,56,
7,754,755,10,5,0,0,755,756,5,74,0,0,756,801,3,112,56,6,757,758,10,4,0,0,
758,759,5,75,0,0,759,801,3,112,56,5,760,761,10,3,0,0,761,762,5,76,0,0,762,
763,3,112,56,0,763,764,5,59,0,0,764,765,3,112,56,4,765,801,1,0,0,0,766,767,
10,2,0,0,767,768,7,11,0,0,768,801,3,112,56,3,769,770,10,28,0,0,770,801,7,
4,0,0,771,772,10,26,0,0,772,774,5,33,0,0,773,775,3,112,56,0,774,773,1,0,
0,0,774,775,1,0,0,0,775,776,1,0,0,0,776,801,5,34,0,0,777,778,10,25,0,0,778,
780,5,33,0,0,779,781,3,112,56,0,780,779,1,0,0,0,780,781,1,0,0,0,781,782,
1,0,0,0,782,784,5,59,0,0,783,785,3,112,56,0,784,783,1,0,0,0,784,785,1,0,
0,0,785,786,1,0,0,0,786,801,5,34,0,0,787,788,10,24,0,0,788,789,5,35,0,0,
789,801,3,170,85,0,790,791,10,23,0,0,791,792,5,14,0,0,792,793,3,118,59,0,
793,794,5,16,0,0,794,801,1,0,0,0,795,796,10,22,0,0,796,797,5,22,0,0,797,
798,3,122,61,0,798,799,5,23,0,0,799,801,1,0,0,0,800,727,1,0,0,0,800,730,
1,0,0,0,800,733,1,0,0,0,800,736,1,0,0,0,800,739,1,0,0,0,800,742,1,0,0,0,
800,745,1,0,0,0,800,748,1,0,0,0,800,751,1,0,0,0,800,754,1,0,0,0,800,757,
1,0,0,0,800,760,1,0,0,0,800,766,1,0,0,0,800,769,1,0,0,0,800,771,1,0,0,0,
800,777,1,0,0,0,800,787,1,0,0,0,800,790,1,0,0,0,800,795,1,0,0,0,801,804,
1,0,0,0,802,800,1,0,0,0,802,803,1,0,0,0,803,113,1,0,0,0,804,802,1,0,0,0,
805,822,5,98,0,0,806,822,3,168,84,0,807,822,3,172,86,0,808,822,3,174,87,
0,809,812,3,170,85,0,810,811,5,33,0,0,811,813,5,34,0,0,812,810,1,0,0,0,812,
813,1,0,0,0,813,822,1,0,0,0,814,822,5,118,0,0,815,822,3,126,63,0,816,819,
3,128,64,0,817,818,5,33,0,0,818,820,5,34,0,0,819,817,1,0,0,0,819,820,1,0,
0,0,820,822,1,0,0,0,821,805,1,0,0,0,821,806,1,0,0,0,821,807,1,0,0,0,821,
808,1,0,0,0,821,809,1,0,0,0,821,814,1,0,0,0,821,815,1,0,0,0,821,816,1,0,
0,0,822,115,1,0,0,0,823,828,3,112,56,0,824,825,5,15,0,0,825,827,3,112,56,
0,826,824,1,0,0,0,827,830,1,0,0,0,828,826,1,0,0,0,828,829,1,0,0,0,829,117,
1,0,0,0,830,828,1,0,0,0,831,836,3,120,60,0,832,833,5,15,0,0,833,835,3,120,
60,0,834,832,1,0,0,0,835,838,1,0,0,0,836,834,1,0,0,0,836,837,1,0,0,0,837,
840,1,0,0,0,838,836,1,0,0,0,839,841,5,15,0,0,840,839,1,0,0,0,840,841,1,0,
0,0,841,119,1,0,0,0,842,843,3,170,85,0,843,844,5,59,0,0,844,845,3,112,56,
0,845,121,1,0,0,0,846,848,5,14,0,0,847,849,3,118,59,0,848,847,1,0,0,0,848,
849,1,0,0,0,849,850,1,0,0,0,850,855,5,16,0,0,851,853,3,116,58,0,852,851,
1,0,0,0,852,853,1,0,0,0,853,855,1,0,0,0,854,846,1,0,0,0,854,852,1,0,0,0,
855,123,1,0,0,0,856,857,3,112,56,0,857,858,5,22,0,0,858,859,3,122,61,0,859,
860,5,23,0,0,860,125,1,0,0,0,861,863,5,22,0,0,862,864,3,112,56,0,863,862,
1,0,0,0,863,864,1,0,0,0,864,871,1,0,0,0,865,867,5,15,0,0,866,868,3,112,56,
0,867,866,1,0,0,0,867,868,1,0,0,0,868,870,1,0,0,0,869,865,1,0,0,0,870,873,
1,0,0,0,871,869,1,0,0,0,871,872,1,0,0,0,872,874,1,0,0,0,873,871,1,0,0,0,
874,888,5,23,0,0,875,884,5,33,0,0,876,881,3,112,56,0,877,878,5,15,0,0,878,
880,3,112,56,0,879,877,1,0,0,0,880,883,1,0,0,0,881,879,1,0,0,0,881,882,1,
0,0,0,882,885,1,0,0,0,883,881,1,0,0,0,884,876,1,0,0,0,884,885,1,0,0,0,885,
886,1,0,0,0,886,888,5,34,0,0,887,861,1,0,0,0,887,875,1,0,0,0,888,127,1,0,
0,0,889,892,3,110,55,0,890,892,3,62,31,0,891,889,1,0,0,0,891,890,1,0,0,0,
892,129,1,0,0,0,893,912,3,170,85,0,894,912,3,132,66,0,895,912,3,134,67,0,
896,912,3,138,69,0,897,912,3,140,70,0,898,912,3,144,72,0,899,912,3,146,73,
0,900,912,3,148,74,0,901,912,3,152,76,0,902,912,3,156,78,0,903,912,3,158,
79,0,904,912,5,105,0,0,905,912,5,108,0,0,906,912,5,109,0,0,907,912,3,166,
83,0,908,912,3,168,84,0,909,912,3,174,87,0,910,912,3,172,86,0,911,893,1,
0,0,0,911,894,1,0,0,0,911,895,1,0,0,0,911,896,1,0,0,0,911,897,1,0,0,0,911,
898,1,0,0,0,911,899,1,0,0,0,911,900,1,0,0,0,911,901,1,0,0,0,911,902,1,0,
0,0,911,903,1,0,0,0,911,904,1,0,0,0,911,905,1,0,0,0,911,906,1,0,0,0,911,
907,1,0,0,0,911,908,1,0,0,0,911,909,1,0,0,0,911,910,1,0,0,0,912,131,1,0,
0,0,913,917,5,14,0,0,914,916,3,130,65,0,915,914,1,0,0,0,916,919,1,0,0,0,
917,915,1,0,0,0,917,918,1,0,0,0,918,920,1,0,0,0,919,917,1,0,0,0,920,921,
5,16,0,0,921,133,1,0,0,0,922,925,3,136,68,0,923,925,3,160,80,0,924,922,1,
0,0,0,924,923,1,0,0,0,925,135,1,0,0,0,926,931,5,48,0,0,927,931,5,52,0,0,
928,931,5,55,0,0,929,931,3,170,85,0,930,926,1,0,0,0,930,927,1,0,0,0,930,
928,1,0,0,0,930,929,1,0,0,0,931,944,1,0,0,0,932,934,5,22,0,0,933,935,3,134,
67,0,934,933,1,0,0,0,934,935,1,0,0,0,935,940,1,0,0,0,936,937,5,15,0,0,937,
939,3,134,67,0,938,936,1,0,0,0,939,942,1,0,0,0,940,938,1,0,0,0,940,941,1,
0,0,0,941,943,1,0,0,0,942,940,1,0,0,0,943,945,5,23,0,0,944,932,1,0,0,0,944,
945,1,0,0,0,945,137,1,0,0,0,946,947,5,87,0,0,947,950,3,142,71,0,948,949,
5,88,0,0,949,951,3,134,67,0,950,948,1,0,0,0,950,951,1,0,0,0,951,139,1,0,
0,0,952,953,3,142,71,0,953,954,5,88,0,0,954,955,3,134,67,0,955,141,1,0,0,
0,956,961,3,170,85,0,957,958,5,15,0,0,958,960,3,170,85,0,959,957,1,0,0,0,
960,963,1,0,0,0,961,959,1,0,0,0,961,962,1,0,0,0,962,143,1,0,0,0,963,961,
1,0,0,0,964,965,5,89,0,0,965,966,3,170,85,0,966,145,1,0,0,0,967,968,3,170,
85,0,968,969,5,59,0,0,969,147,1,0,0,0,970,971,5,90,0,0,971,975,3,134,67,
0,972,974,3,150,75,0,973,972,1,0,0,0,974,977,1,0,0,0,975,973,1,0,0,0,975,
976,1,0,0,0,976,149,1,0,0,0,977,975,1,0,0,0,978,979,5,91,0,0,979,981,3,160,
80,0,980,982,3,164,82,0,981,980,1,0,0,0,981,982,1,0,0,0,982,983,1,0,0,0,
983,984,3,132,66,0,984,988,1,0,0,0,985,986,5,92,0,0,986,988,3,132,66,0,987,
978,1,0,0,0,987,985,1,0,0,0,988,151,1,0,0,0,989,990,5,29,0,0,990,991,3,170,
85,0,991,993,5,22,0,0,992,994,3,162,81,0,993,992,1,0,0,0,993,994,1,0,0,0,
994,995,1,0,0,0,995,997,5,23,0,0,996,998,3,154,77,0,997,996,1,0,0,0,997,
998,1,0,0,0,998,999,1,0,0,0,999,1000,3,132,66,0,1000,153,1,0,0,0,1001,1002,
5,61,0,0,1002,1003,5,6,0,0,1003,1004,3,162,81,0,1004,155,1,0,0,0,1005,1006,
5,26,0,0,1006,1007,3,132,66,0,1007,1008,3,134,67,0,1008,1009,3,132,66,0,
1009,1010,3,132,66,0,1010,157,1,0,0,0,1011,1012,5,41,0,0,1012,1013,3,134,
67,0,1013,1014,3,132,66,0,1014,159,1,0,0,0,1015,1021,3,174,87,0,1016,1021,
5,99,0,0,1017,1021,5,100,0,0,1018,1021,3,172,86,0,1019,1021,5,98,0,0,1020,
1015,1,0,0,0,1020,1016,1,0,0,0,1020,1017,1,0,0,0,1020,1018,1,0,0,0,1020,
1019,1,0,0,0,1021,1023,1,0,0,0,1022,1024,3,164,82,0,1023,1022,1,0,0,0,1023,
1024,1,0,0,0,1024,161,1,0,0,0,1025,1027,3,170,85,0,1026,1028,3,164,82,0,
1027,1026,1,0,0,0,1027,1028,1,0,0,0,1028,1031,1,0,0,0,1029,1030,5,15,0,0,
1030,1032,3,162,81,0,1031,1029,1,0,0,0,1031,1032,1,0,0,0,1032,163,1,0,0,
0,1033,1034,5,59,0,0,1034,1035,3,170,85,0,1035,165,1,0,0,0,1036,1037,5,46,
0,0,1037,1038,3,170,85,0,1038,1039,3,132,66,0,1039,167,1,0,0,0,1040,1042,
7,12,0,0,1041,1043,5,101,0,0,1042,1041,1,0,0,0,1042,1043,1,0,0,0,1043,169,
1,0,0,0,1044,1045,7,13,0,0,1045,171,1,0,0,0,1046,1048,5,102,0,0,1047,1046,
1,0,0,0,1048,1049,1,0,0,0,1049,1047,1,0,0,0,1049,1050,1,0,0,0,1050,173,1,
0,0,0,1051,1053,5,124,0,0,1052,1051,1,0,0,0,1053,1054,1,0,0,0,1054,1052,
1,0,0,0,1054,1055,1,0,0,0,1055,175,1,0,0,0,122,181,183,197,201,204,214,220,
224,236,244,249,252,262,265,271,279,282,291,300,302,308,319,324,331,345,
348,355,359,361,366,372,376,382,387,400,402,408,411,417,425,431,444,447,
453,456,464,467,473,476,480,489,494,499,507,514,524,534,552,564,569,575,
579,582,596,600,603,610,614,634,652,656,661,665,669,674,679,683,689,700,
725,774,780,784,800,802,812,819,821,828,836,840,848,852,854,863,867,871,
881,884,887,891,911,917,924,930,934,940,944,950,961,975,981,987,993,997,
1020,1023,1027,1031,1042,1049,1054];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class SolidityParser extends antlr4.Parser {

    static grammarFileName = "Solidity.g4";
    static literalNames = [ null, "'pragma'", "';'", "'^'", "'~'", "'>='", 
                            "'>'", "'<'", "'<='", "'='", "'import'", "'as'", 
                            "'*'", "'from'", "'{'", "','", "'}'", "'abstract'", 
                            "'contract'", "'interface'", "'library'", "'is'", 
                            "'('", "')'", "'override'", "'using'", "'for'", 
                            "'struct'", "'modifier'", "'function'", "'returns'", 
                            "'event'", "'enum'", "'['", "']'", "'.'", "'mapping'", 
                            "'=>'", "'memory'", "'storage'", "'calldata'", 
                            "'if'", "'else'", "'try'", "'catch'", "'while'", 
                            "'assembly'", "'do'", "'return'", "'throw'", 
                            "'emit'", "'var'", "'address'", "'bool'", "'string'", 
                            "'byte'", "'++'", "'--'", "'new'", "':'", "'+'", 
                            "'-'", "'after'", "'delete'", "'!'", "'**'", 
                            "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", 
                            "'=='", "'!='", "'&&'", "'||'", "'?'", "'|='", 
                            "'^='", "'&='", "'<<='", "'>>='", "'+='", "'-='", 
                            "'*='", "'/='", "'%='", "'let'", "':='", "'=:'", 
                            "'switch'", "'case'", "'default'", null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, "'anonymous'", "'break'", "'constant'", 
                            "'immutable'", "'continue'", "'leave'", "'external'", 
                            "'indexed'", "'internal'", "'payable'", "'private'", 
                            "'public'", "'virtual'", "'pure'", "'type'", 
                            "'view'", "'constructor'", "'fallback'", "'receive'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, "Int", "Uint", 
                             "Byte", "Fixed", "Ufixed", "BooleanLiteral", 
                             "DecimalNumber", "HexNumber", "NumberUnit", 
                             "HexLiteralFragment", "ReservedKeyword", "AnonymousKeyword", 
                             "BreakKeyword", "ConstantKeyword", "ImmutableKeyword", 
                             "ContinueKeyword", "LeaveKeyword", "ExternalKeyword", 
                             "IndexedKeyword", "InternalKeyword", "PayableKeyword", 
                             "PrivateKeyword", "PublicKeyword", "VirtualKeyword", 
                             "PureKeyword", "TypeKeyword", "ViewKeyword", 
                             "ConstructorKeyword", "FallbackKeyword", "ReceiveKeyword", 
                             "Identifier", "StringLiteralFragment", "VersionLiteral", 
                             "WS", "COMMENT", "LINE_COMMENT" ];
    static ruleNames = [ "sourceUnit", "pragmaDirective", "pragmaName", 
                         "pragmaValue", "version", "versionConstraint", 
                         "versionOperator", "importDirective", "importDeclaration", 
                         "contractDefinition", "inheritanceSpecifier", "contractPart", 
                         "stateVariableDeclaration", "overrideSpecifier", 
                         "usingForDeclaration", "structDefinition", "modifierDefinition", 
                         "functionDefinition", "functionDescriptor", "returnParameters", 
                         "modifierList", "modifierInvocation", "eventDefinition", 
                         "enumDefinition", "enumValue", "parameterList", 
                         "parameter", "eventParameterList", "eventParameter", 
                         "variableDeclaration", "typeName", "userDefinedTypeName", 
                         "mapping", "functionTypeName", "storageLocation", 
                         "stateMutability", "block", "statement", "expressionStatement", 
                         "ifStatement", "tryStatement", "catchClause", "whileStatement", 
                         "forStatement", "simpleStatement", "inlineAssemblyStatement", 
                         "doWhileStatement", "continueStatement", "breakStatement", 
                         "returnStatement", "throwStatement", "emitStatement", 
                         "variableDeclarationStatement", "variableDeclarationList", 
                         "identifierList", "elementaryTypeName", "expression", 
                         "primaryExpression", "expressionList", "nameValueList", 
                         "nameValue", "functionCallArguments", "functionCall", 
                         "tupleExpression", "typeNameExpression", "assemblyItem", 
                         "assemblyBlock", "assemblyExpression", "assemblyCall", 
                         "assemblyLocalDefinition", "assemblyAssignment", 
                         "assemblyIdentifierList", "assemblyStackAssignment", 
                         "labelDefinition", "assemblySwitch", "assemblyCase", 
                         "assemblyFunctionDefinition", "assemblyFunctionReturns", 
                         "assemblyFor", "assemblyIf", "assemblyLiteral", 
                         "assemblyTypedVariableList", "assemblyType", "subAssembly", 
                         "numberLiteral", "identifier", "hexLiteral", "stringLiteral" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = SolidityParser.ruleNames;
        this.literalNames = SolidityParser.literalNames;
        this.symbolicNames = SolidityParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 30:
    	    		return this.typeName_sempred(localctx, predIndex);
    	case 56:
    	    		return this.expression_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    typeName_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 14);
    		case 2:
    			return this.precpred(this._ctx, 13);
    		case 3:
    			return this.precpred(this._ctx, 12);
    		case 4:
    			return this.precpred(this._ctx, 11);
    		case 5:
    			return this.precpred(this._ctx, 10);
    		case 6:
    			return this.precpred(this._ctx, 9);
    		case 7:
    			return this.precpred(this._ctx, 8);
    		case 8:
    			return this.precpred(this._ctx, 7);
    		case 9:
    			return this.precpred(this._ctx, 6);
    		case 10:
    			return this.precpred(this._ctx, 5);
    		case 11:
    			return this.precpred(this._ctx, 4);
    		case 12:
    			return this.precpred(this._ctx, 3);
    		case 13:
    			return this.precpred(this._ctx, 2);
    		case 14:
    			return this.precpred(this._ctx, 28);
    		case 15:
    			return this.precpred(this._ctx, 26);
    		case 16:
    			return this.precpred(this._ctx, 25);
    		case 17:
    			return this.precpred(this._ctx, 24);
    		case 18:
    			return this.precpred(this._ctx, 23);
    		case 19:
    			return this.precpred(this._ctx, 22);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	sourceUnit() {
	    let localctx = new SourceUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, SolidityParser.RULE_sourceUnit);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 183;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (SolidityParser.T__0 - 1)) | (1 << (SolidityParser.T__9 - 1)) | (1 << (SolidityParser.T__16 - 1)) | (1 << (SolidityParser.T__17 - 1)) | (1 << (SolidityParser.T__18 - 1)) | (1 << (SolidityParser.T__19 - 1)) | (1 << (SolidityParser.T__26 - 1)) | (1 << (SolidityParser.T__31 - 1)))) !== 0)) {
	            this.state = 181;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case SolidityParser.T__0:
	                this.state = 176;
	                this.pragmaDirective();
	                break;
	            case SolidityParser.T__9:
	                this.state = 177;
	                this.importDirective();
	                break;
	            case SolidityParser.T__26:
	                this.state = 178;
	                this.structDefinition();
	                break;
	            case SolidityParser.T__31:
	                this.state = 179;
	                this.enumDefinition();
	                break;
	            case SolidityParser.T__16:
	            case SolidityParser.T__17:
	            case SolidityParser.T__18:
	            case SolidityParser.T__19:
	                this.state = 180;
	                this.contractDefinition();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 185;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 186;
	        this.match(SolidityParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragmaDirective() {
	    let localctx = new PragmaDirectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, SolidityParser.RULE_pragmaDirective);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 188;
	        this.match(SolidityParser.T__0);
	        this.state = 189;
	        this.pragmaName();
	        this.state = 190;
	        this.pragmaValue();
	        this.state = 191;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragmaName() {
	    let localctx = new PragmaNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, SolidityParser.RULE_pragmaName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 193;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragmaValue() {
	    let localctx = new PragmaValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, SolidityParser.RULE_pragmaValue);
	    try {
	        this.state = 197;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 195;
	            this.version();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 196;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	version() {
	    let localctx = new VersionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, SolidityParser.RULE_version);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 199;
	        this.versionConstraint();
	        this.state = 201;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8))) !== 0) || _la===SolidityParser.VersionLiteral) {
	            this.state = 200;
	            this.versionConstraint();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	versionConstraint() {
	    let localctx = new VersionConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, SolidityParser.RULE_versionConstraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 204;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8))) !== 0)) {
	            this.state = 203;
	            this.versionOperator();
	        }

	        this.state = 206;
	        this.match(SolidityParser.VersionLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	versionOperator() {
	    let localctx = new VersionOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, SolidityParser.RULE_versionOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 208;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importDirective() {
	    let localctx = new ImportDirectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, SolidityParser.RULE_importDirective);
	    var _la = 0; // Token type
	    try {
	        this.state = 244;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 210;
	            this.match(SolidityParser.T__9);
	            this.state = 211;
	            this.match(SolidityParser.StringLiteralFragment);
	            this.state = 214;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SolidityParser.T__10) {
	                this.state = 212;
	                this.match(SolidityParser.T__10);
	                this.state = 213;
	                this.identifier();
	            }

	            this.state = 216;
	            this.match(SolidityParser.T__1);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 217;
	            this.match(SolidityParser.T__9);
	            this.state = 220;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case SolidityParser.T__11:
	                this.state = 218;
	                this.match(SolidityParser.T__11);
	                break;
	            case SolidityParser.T__12:
	            case SolidityParser.T__39:
	            case SolidityParser.T__51:
	            case SolidityParser.Identifier:
	                this.state = 219;
	                this.identifier();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 224;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SolidityParser.T__10) {
	                this.state = 222;
	                this.match(SolidityParser.T__10);
	                this.state = 223;
	                this.identifier();
	            }

	            this.state = 226;
	            this.match(SolidityParser.T__12);
	            this.state = 227;
	            this.match(SolidityParser.StringLiteralFragment);
	            this.state = 228;
	            this.match(SolidityParser.T__1);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 229;
	            this.match(SolidityParser.T__9);
	            this.state = 230;
	            this.match(SolidityParser.T__13);
	            this.state = 231;
	            this.importDeclaration();
	            this.state = 236;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SolidityParser.T__14) {
	                this.state = 232;
	                this.match(SolidityParser.T__14);
	                this.state = 233;
	                this.importDeclaration();
	                this.state = 238;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 239;
	            this.match(SolidityParser.T__15);
	            this.state = 240;
	            this.match(SolidityParser.T__12);
	            this.state = 241;
	            this.match(SolidityParser.StringLiteralFragment);
	            this.state = 242;
	            this.match(SolidityParser.T__1);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importDeclaration() {
	    let localctx = new ImportDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, SolidityParser.RULE_importDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 246;
	        this.identifier();
	        this.state = 249;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__10) {
	            this.state = 247;
	            this.match(SolidityParser.T__10);
	            this.state = 248;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	contractDefinition() {
	    let localctx = new ContractDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, SolidityParser.RULE_contractDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 252;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__16) {
	            this.state = 251;
	            this.match(SolidityParser.T__16);
	        }

	        this.state = 254;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__17) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__19))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 255;
	        this.identifier();
	        this.state = 265;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__20) {
	            this.state = 256;
	            this.match(SolidityParser.T__20);
	            this.state = 257;
	            this.inheritanceSpecifier();
	            this.state = 262;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SolidityParser.T__14) {
	                this.state = 258;
	                this.match(SolidityParser.T__14);
	                this.state = 259;
	                this.inheritanceSpecifier();
	                this.state = 264;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 267;
	        this.match(SolidityParser.T__13);
	        this.state = 271;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__26) | (1 << SolidityParser.T__27) | (1 << SolidityParser.T__28) | (1 << SolidityParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SolidityParser.T__31 - 32)) | (1 << (SolidityParser.T__35 - 32)) | (1 << (SolidityParser.T__39 - 32)) | (1 << (SolidityParser.T__50 - 32)) | (1 << (SolidityParser.T__51 - 32)) | (1 << (SolidityParser.T__52 - 32)) | (1 << (SolidityParser.T__53 - 32)) | (1 << (SolidityParser.T__54 - 32)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.ConstructorKeyword - 93)) | (1 << (SolidityParser.FallbackKeyword - 93)) | (1 << (SolidityParser.ReceiveKeyword - 93)) | (1 << (SolidityParser.Identifier - 93)))) !== 0)) {
	            this.state = 268;
	            this.contractPart();
	            this.state = 273;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 274;
	        this.match(SolidityParser.T__15);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inheritanceSpecifier() {
	    let localctx = new InheritanceSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, SolidityParser.RULE_inheritanceSpecifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 276;
	        this.userDefinedTypeName();
	        this.state = 282;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__21) {
	            this.state = 277;
	            this.match(SolidityParser.T__21);
	            this.state = 279;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__39 - 33)) | (1 << (SolidityParser.T__50 - 33)) | (1 << (SolidityParser.T__51 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__59 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.BooleanLiteral - 93)) | (1 << (SolidityParser.DecimalNumber - 93)) | (1 << (SolidityParser.HexNumber - 93)) | (1 << (SolidityParser.HexLiteralFragment - 93)) | (1 << (SolidityParser.PayableKeyword - 93)) | (1 << (SolidityParser.TypeKeyword - 93)) | (1 << (SolidityParser.Identifier - 93)) | (1 << (SolidityParser.StringLiteralFragment - 93)))) !== 0)) {
	                this.state = 278;
	                this.expressionList();
	            }

	            this.state = 281;
	            this.match(SolidityParser.T__22);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	contractPart() {
	    let localctx = new ContractPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, SolidityParser.RULE_contractPart);
	    try {
	        this.state = 291;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 284;
	            this.stateVariableDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 285;
	            this.usingForDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 286;
	            this.structDefinition();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 287;
	            this.modifierDefinition();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 288;
	            this.functionDefinition();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 289;
	            this.eventDefinition();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 290;
	            this.enumDefinition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stateVariableDeclaration() {
	    let localctx = new StateVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, SolidityParser.RULE_stateVariableDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 293;
	        this.typeName(0);
	        this.state = 302;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SolidityParser.T__23 || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (SolidityParser.ConstantKeyword - 106)) | (1 << (SolidityParser.ImmutableKeyword - 106)) | (1 << (SolidityParser.InternalKeyword - 106)) | (1 << (SolidityParser.PrivateKeyword - 106)) | (1 << (SolidityParser.PublicKeyword - 106)))) !== 0)) {
	            this.state = 300;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case SolidityParser.PublicKeyword:
	                this.state = 294;
	                this.match(SolidityParser.PublicKeyword);
	                break;
	            case SolidityParser.InternalKeyword:
	                this.state = 295;
	                this.match(SolidityParser.InternalKeyword);
	                break;
	            case SolidityParser.PrivateKeyword:
	                this.state = 296;
	                this.match(SolidityParser.PrivateKeyword);
	                break;
	            case SolidityParser.ConstantKeyword:
	                this.state = 297;
	                this.match(SolidityParser.ConstantKeyword);
	                break;
	            case SolidityParser.ImmutableKeyword:
	                this.state = 298;
	                this.match(SolidityParser.ImmutableKeyword);
	                break;
	            case SolidityParser.T__23:
	                this.state = 299;
	                this.overrideSpecifier();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 304;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 305;
	        this.identifier();
	        this.state = 308;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__8) {
	            this.state = 306;
	            this.match(SolidityParser.T__8);
	            this.state = 307;
	            this.expression(0);
	        }

	        this.state = 310;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	overrideSpecifier() {
	    let localctx = new OverrideSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, SolidityParser.RULE_overrideSpecifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 312;
	        this.match(SolidityParser.T__23);
	        this.state = 324;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        if(la_===1) {
	            this.state = 313;
	            this.match(SolidityParser.T__21);
	            this.state = 314;
	            this.userDefinedTypeName();
	            this.state = 319;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SolidityParser.T__14) {
	                this.state = 315;
	                this.match(SolidityParser.T__14);
	                this.state = 316;
	                this.userDefinedTypeName();
	                this.state = 321;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 322;
	            this.match(SolidityParser.T__22);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	usingForDeclaration() {
	    let localctx = new UsingForDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, SolidityParser.RULE_usingForDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 326;
	        this.match(SolidityParser.T__24);
	        this.state = 327;
	        this.identifier();
	        this.state = 328;
	        this.match(SolidityParser.T__25);
	        this.state = 331;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__11:
	            this.state = 329;
	            this.match(SolidityParser.T__11);
	            break;
	        case SolidityParser.T__12:
	        case SolidityParser.T__28:
	        case SolidityParser.T__35:
	        case SolidityParser.T__39:
	        case SolidityParser.T__50:
	        case SolidityParser.T__51:
	        case SolidityParser.T__52:
	        case SolidityParser.T__53:
	        case SolidityParser.T__54:
	        case SolidityParser.Int:
	        case SolidityParser.Uint:
	        case SolidityParser.Byte:
	        case SolidityParser.Fixed:
	        case SolidityParser.Ufixed:
	        case SolidityParser.Identifier:
	            this.state = 330;
	            this.typeName(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 333;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structDefinition() {
	    let localctx = new StructDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, SolidityParser.RULE_structDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 335;
	        this.match(SolidityParser.T__26);
	        this.state = 336;
	        this.identifier();
	        this.state = 337;
	        this.match(SolidityParser.T__13);
	        this.state = 348;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__12 || _la===SolidityParser.T__28 || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (SolidityParser.T__35 - 36)) | (1 << (SolidityParser.T__39 - 36)) | (1 << (SolidityParser.T__50 - 36)) | (1 << (SolidityParser.T__51 - 36)) | (1 << (SolidityParser.T__52 - 36)) | (1 << (SolidityParser.T__53 - 36)) | (1 << (SolidityParser.T__54 - 36)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.Identifier - 93)))) !== 0)) {
	            this.state = 338;
	            this.variableDeclaration();
	            this.state = 339;
	            this.match(SolidityParser.T__1);
	            this.state = 345;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SolidityParser.T__12 || _la===SolidityParser.T__28 || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (SolidityParser.T__35 - 36)) | (1 << (SolidityParser.T__39 - 36)) | (1 << (SolidityParser.T__50 - 36)) | (1 << (SolidityParser.T__51 - 36)) | (1 << (SolidityParser.T__52 - 36)) | (1 << (SolidityParser.T__53 - 36)) | (1 << (SolidityParser.T__54 - 36)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.Identifier - 93)))) !== 0)) {
	                this.state = 340;
	                this.variableDeclaration();
	                this.state = 341;
	                this.match(SolidityParser.T__1);
	                this.state = 347;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 350;
	        this.match(SolidityParser.T__15);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifierDefinition() {
	    let localctx = new ModifierDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, SolidityParser.RULE_modifierDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 352;
	        this.match(SolidityParser.T__27);
	        this.state = 353;
	        this.identifier();
	        this.state = 355;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__21) {
	            this.state = 354;
	            this.parameterList();
	        }

	        this.state = 361;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SolidityParser.T__23 || _la===SolidityParser.VirtualKeyword) {
	            this.state = 359;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case SolidityParser.VirtualKeyword:
	                this.state = 357;
	                this.match(SolidityParser.VirtualKeyword);
	                break;
	            case SolidityParser.T__23:
	                this.state = 358;
	                this.overrideSpecifier();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 363;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 366;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__1:
	            this.state = 364;
	            this.match(SolidityParser.T__1);
	            break;
	        case SolidityParser.T__13:
	            this.state = 365;
	            this.block();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDefinition() {
	    let localctx = new FunctionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, SolidityParser.RULE_functionDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 368;
	        this.functionDescriptor();
	        this.state = 369;
	        this.parameterList();
	        this.state = 370;
	        this.modifierList();
	        this.state = 372;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__29) {
	            this.state = 371;
	            this.returnParameters();
	        }

	        this.state = 376;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__1:
	            this.state = 374;
	            this.match(SolidityParser.T__1);
	            break;
	        case SolidityParser.T__13:
	            this.state = 375;
	            this.block();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDescriptor() {
	    let localctx = new FunctionDescriptorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, SolidityParser.RULE_functionDescriptor);
	    try {
	        this.state = 387;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__28:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 378;
	            this.match(SolidityParser.T__28);
	            this.state = 382;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case SolidityParser.T__12:
	            case SolidityParser.T__39:
	            case SolidityParser.T__51:
	            case SolidityParser.Identifier:
	            	this.state = 379;
	            	this.identifier();
	            	break;
	            case SolidityParser.ReceiveKeyword:
	            	this.state = 380;
	            	this.match(SolidityParser.ReceiveKeyword);
	            	break;
	            case SolidityParser.FallbackKeyword:
	            	this.state = 381;
	            	this.match(SolidityParser.FallbackKeyword);
	            	break;
	            case SolidityParser.T__21:
	            	break;
	            default:
	            	break;
	            }
	            break;
	        case SolidityParser.ConstructorKeyword:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 384;
	            this.match(SolidityParser.ConstructorKeyword);
	            break;
	        case SolidityParser.FallbackKeyword:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 385;
	            this.match(SolidityParser.FallbackKeyword);
	            break;
	        case SolidityParser.ReceiveKeyword:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 386;
	            this.match(SolidityParser.ReceiveKeyword);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnParameters() {
	    let localctx = new ReturnParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, SolidityParser.RULE_returnParameters);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 389;
	        this.match(SolidityParser.T__29);
	        this.state = 390;
	        this.parameterList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifierList() {
	    let localctx = new ModifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, SolidityParser.RULE_modifierList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 402;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 400;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case SolidityParser.T__12:
	                case SolidityParser.T__39:
	                case SolidityParser.T__51:
	                case SolidityParser.Identifier:
	                    this.state = 392;
	                    this.modifierInvocation();
	                    break;
	                case SolidityParser.ConstantKeyword:
	                case SolidityParser.PayableKeyword:
	                case SolidityParser.PureKeyword:
	                case SolidityParser.ViewKeyword:
	                    this.state = 393;
	                    this.stateMutability();
	                    break;
	                case SolidityParser.ExternalKeyword:
	                    this.state = 394;
	                    this.match(SolidityParser.ExternalKeyword);
	                    break;
	                case SolidityParser.PublicKeyword:
	                    this.state = 395;
	                    this.match(SolidityParser.PublicKeyword);
	                    break;
	                case SolidityParser.InternalKeyword:
	                    this.state = 396;
	                    this.match(SolidityParser.InternalKeyword);
	                    break;
	                case SolidityParser.PrivateKeyword:
	                    this.state = 397;
	                    this.match(SolidityParser.PrivateKeyword);
	                    break;
	                case SolidityParser.VirtualKeyword:
	                    this.state = 398;
	                    this.match(SolidityParser.VirtualKeyword);
	                    break;
	                case SolidityParser.T__23:
	                    this.state = 399;
	                    this.overrideSpecifier();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 404;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifierInvocation() {
	    let localctx = new ModifierInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, SolidityParser.RULE_modifierInvocation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 405;
	        this.identifier();
	        this.state = 411;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        if(la_===1) {
	            this.state = 406;
	            this.match(SolidityParser.T__21);
	            this.state = 408;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__39 - 33)) | (1 << (SolidityParser.T__50 - 33)) | (1 << (SolidityParser.T__51 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__59 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.BooleanLiteral - 93)) | (1 << (SolidityParser.DecimalNumber - 93)) | (1 << (SolidityParser.HexNumber - 93)) | (1 << (SolidityParser.HexLiteralFragment - 93)) | (1 << (SolidityParser.PayableKeyword - 93)) | (1 << (SolidityParser.TypeKeyword - 93)) | (1 << (SolidityParser.Identifier - 93)) | (1 << (SolidityParser.StringLiteralFragment - 93)))) !== 0)) {
	                this.state = 407;
	                this.expressionList();
	            }

	            this.state = 410;
	            this.match(SolidityParser.T__22);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eventDefinition() {
	    let localctx = new EventDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, SolidityParser.RULE_eventDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 413;
	        this.match(SolidityParser.T__30);
	        this.state = 414;
	        this.identifier();
	        this.state = 415;
	        this.eventParameterList();
	        this.state = 417;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.AnonymousKeyword) {
	            this.state = 416;
	            this.match(SolidityParser.AnonymousKeyword);
	        }

	        this.state = 419;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumDefinition() {
	    let localctx = new EnumDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, SolidityParser.RULE_enumDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 421;
	        this.match(SolidityParser.T__31);
	        this.state = 422;
	        this.identifier();
	        this.state = 423;
	        this.match(SolidityParser.T__13);
	        this.state = 425;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__12 || _la===SolidityParser.T__39 || _la===SolidityParser.T__51 || _la===SolidityParser.Identifier) {
	            this.state = 424;
	            this.enumValue();
	        }

	        this.state = 431;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SolidityParser.T__14) {
	            this.state = 427;
	            this.match(SolidityParser.T__14);
	            this.state = 428;
	            this.enumValue();
	            this.state = 433;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 434;
	        this.match(SolidityParser.T__15);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumValue() {
	    let localctx = new EnumValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, SolidityParser.RULE_enumValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 436;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterList() {
	    let localctx = new ParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, SolidityParser.RULE_parameterList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 438;
	        this.match(SolidityParser.T__21);
	        this.state = 447;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__12 || _la===SolidityParser.T__28 || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (SolidityParser.T__35 - 36)) | (1 << (SolidityParser.T__39 - 36)) | (1 << (SolidityParser.T__50 - 36)) | (1 << (SolidityParser.T__51 - 36)) | (1 << (SolidityParser.T__52 - 36)) | (1 << (SolidityParser.T__53 - 36)) | (1 << (SolidityParser.T__54 - 36)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.Identifier - 93)))) !== 0)) {
	            this.state = 439;
	            this.parameter();
	            this.state = 444;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SolidityParser.T__14) {
	                this.state = 440;
	                this.match(SolidityParser.T__14);
	                this.state = 441;
	                this.parameter();
	                this.state = 446;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 449;
	        this.match(SolidityParser.T__22);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameter() {
	    let localctx = new ParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, SolidityParser.RULE_parameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 451;
	        this.typeName(0);
	        this.state = 453;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        if(la_===1) {
	            this.state = 452;
	            this.storageLocation();

	        }
	        this.state = 456;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__12 || _la===SolidityParser.T__39 || _la===SolidityParser.T__51 || _la===SolidityParser.Identifier) {
	            this.state = 455;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eventParameterList() {
	    let localctx = new EventParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, SolidityParser.RULE_eventParameterList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 458;
	        this.match(SolidityParser.T__21);
	        this.state = 467;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__12 || _la===SolidityParser.T__28 || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (SolidityParser.T__35 - 36)) | (1 << (SolidityParser.T__39 - 36)) | (1 << (SolidityParser.T__50 - 36)) | (1 << (SolidityParser.T__51 - 36)) | (1 << (SolidityParser.T__52 - 36)) | (1 << (SolidityParser.T__53 - 36)) | (1 << (SolidityParser.T__54 - 36)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.Identifier - 93)))) !== 0)) {
	            this.state = 459;
	            this.eventParameter();
	            this.state = 464;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SolidityParser.T__14) {
	                this.state = 460;
	                this.match(SolidityParser.T__14);
	                this.state = 461;
	                this.eventParameter();
	                this.state = 466;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 469;
	        this.match(SolidityParser.T__22);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eventParameter() {
	    let localctx = new EventParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, SolidityParser.RULE_eventParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 471;
	        this.typeName(0);
	        this.state = 473;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.IndexedKeyword) {
	            this.state = 472;
	            this.match(SolidityParser.IndexedKeyword);
	        }

	        this.state = 476;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__12 || _la===SolidityParser.T__39 || _la===SolidityParser.T__51 || _la===SolidityParser.Identifier) {
	            this.state = 475;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaration() {
	    let localctx = new VariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, SolidityParser.RULE_variableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 478;
	        this.typeName(0);
	        this.state = 480;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        if(la_===1) {
	            this.state = 479;
	            this.storageLocation();

	        }
	        this.state = 482;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	typeName(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new TypeNameContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 60;
	    this.enterRecursionRule(localctx, 60, SolidityParser.RULE_typeName, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 489;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 485;
	            this.elementaryTypeName();
	            break;

	        case 2:
	            this.state = 486;
	            this.userDefinedTypeName();
	            break;

	        case 3:
	            this.state = 487;
	            this.mapping();
	            break;

	        case 4:
	            this.state = 488;
	            this.functionTypeName();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 499;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new TypeNameContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_typeName);
	                this.state = 491;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 492;
	                this.match(SolidityParser.T__32);
	                this.state = 494;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__39 - 33)) | (1 << (SolidityParser.T__50 - 33)) | (1 << (SolidityParser.T__51 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__59 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.BooleanLiteral - 93)) | (1 << (SolidityParser.DecimalNumber - 93)) | (1 << (SolidityParser.HexNumber - 93)) | (1 << (SolidityParser.HexLiteralFragment - 93)) | (1 << (SolidityParser.PayableKeyword - 93)) | (1 << (SolidityParser.TypeKeyword - 93)) | (1 << (SolidityParser.Identifier - 93)) | (1 << (SolidityParser.StringLiteralFragment - 93)))) !== 0)) {
	                    this.state = 493;
	                    this.expression(0);
	                }

	                this.state = 496;
	                this.match(SolidityParser.T__33); 
	            }
	            this.state = 501;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	userDefinedTypeName() {
	    let localctx = new UserDefinedTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, SolidityParser.RULE_userDefinedTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 502;
	        this.identifier();
	        this.state = 507;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,53,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 503;
	                this.match(SolidityParser.T__34);
	                this.state = 504;
	                this.identifier(); 
	            }
	            this.state = 509;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,53,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapping() {
	    let localctx = new MappingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, SolidityParser.RULE_mapping);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 510;
	        this.match(SolidityParser.T__35);
	        this.state = 511;
	        this.match(SolidityParser.T__21);
	        this.state = 514;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 512;
	            this.elementaryTypeName();
	            break;

	        case 2:
	            this.state = 513;
	            this.userDefinedTypeName();
	            break;

	        }
	        this.state = 516;
	        this.match(SolidityParser.T__36);
	        this.state = 517;
	        this.typeName(0);
	        this.state = 518;
	        this.match(SolidityParser.T__22);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionTypeName() {
	    let localctx = new FunctionTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, SolidityParser.RULE_functionTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 520;
	        this.match(SolidityParser.T__28);
	        this.state = 521;
	        this.parameterList();
	        this.state = 522;
	        this.modifierList();
	        this.state = 524;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
	        if(la_===1) {
	            this.state = 523;
	            this.returnParameters();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	storageLocation() {
	    let localctx = new StorageLocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, SolidityParser.RULE_storageLocation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 526;
	        _la = this._input.LA(1);
	        if(!(((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SolidityParser.T__37 - 38)) | (1 << (SolidityParser.T__38 - 38)) | (1 << (SolidityParser.T__39 - 38)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stateMutability() {
	    let localctx = new StateMutabilityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, SolidityParser.RULE_stateMutability);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 528;
	        _la = this._input.LA(1);
	        if(!(((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (SolidityParser.ConstantKeyword - 106)) | (1 << (SolidityParser.PayableKeyword - 106)) | (1 << (SolidityParser.PureKeyword - 106)) | (1 << (SolidityParser.ViewKeyword - 106)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, SolidityParser.RULE_block);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 530;
	        this.match(SolidityParser.T__13);
	        this.state = 534;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__25) | (1 << SolidityParser.T__28))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__35 - 33)) | (1 << (SolidityParser.T__39 - 33)) | (1 << (SolidityParser.T__40 - 33)) | (1 << (SolidityParser.T__42 - 33)) | (1 << (SolidityParser.T__44 - 33)) | (1 << (SolidityParser.T__45 - 33)) | (1 << (SolidityParser.T__46 - 33)) | (1 << (SolidityParser.T__47 - 33)) | (1 << (SolidityParser.T__48 - 33)) | (1 << (SolidityParser.T__49 - 33)) | (1 << (SolidityParser.T__50 - 33)) | (1 << (SolidityParser.T__51 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__59 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.BooleanLiteral - 93)) | (1 << (SolidityParser.DecimalNumber - 93)) | (1 << (SolidityParser.HexNumber - 93)) | (1 << (SolidityParser.HexLiteralFragment - 93)) | (1 << (SolidityParser.BreakKeyword - 93)) | (1 << (SolidityParser.ContinueKeyword - 93)) | (1 << (SolidityParser.PayableKeyword - 93)) | (1 << (SolidityParser.TypeKeyword - 93)) | (1 << (SolidityParser.Identifier - 93)) | (1 << (SolidityParser.StringLiteralFragment - 93)))) !== 0)) {
	            this.state = 531;
	            this.statement();
	            this.state = 536;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 537;
	        this.match(SolidityParser.T__15);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, SolidityParser.RULE_statement);
	    try {
	        this.state = 552;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__40:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 539;
	            this.ifStatement();
	            break;
	        case SolidityParser.T__42:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 540;
	            this.tryStatement();
	            break;
	        case SolidityParser.T__44:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 541;
	            this.whileStatement();
	            break;
	        case SolidityParser.T__25:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 542;
	            this.forStatement();
	            break;
	        case SolidityParser.T__13:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 543;
	            this.block();
	            break;
	        case SolidityParser.T__45:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 544;
	            this.inlineAssemblyStatement();
	            break;
	        case SolidityParser.T__46:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 545;
	            this.doWhileStatement();
	            break;
	        case SolidityParser.ContinueKeyword:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 546;
	            this.continueStatement();
	            break;
	        case SolidityParser.BreakKeyword:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 547;
	            this.breakStatement();
	            break;
	        case SolidityParser.T__47:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 548;
	            this.returnStatement();
	            break;
	        case SolidityParser.T__48:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 549;
	            this.throwStatement();
	            break;
	        case SolidityParser.T__49:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 550;
	            this.emitStatement();
	            break;
	        case SolidityParser.T__3:
	        case SolidityParser.T__12:
	        case SolidityParser.T__21:
	        case SolidityParser.T__28:
	        case SolidityParser.T__32:
	        case SolidityParser.T__35:
	        case SolidityParser.T__39:
	        case SolidityParser.T__50:
	        case SolidityParser.T__51:
	        case SolidityParser.T__52:
	        case SolidityParser.T__53:
	        case SolidityParser.T__54:
	        case SolidityParser.T__55:
	        case SolidityParser.T__56:
	        case SolidityParser.T__57:
	        case SolidityParser.T__59:
	        case SolidityParser.T__60:
	        case SolidityParser.T__61:
	        case SolidityParser.T__62:
	        case SolidityParser.T__63:
	        case SolidityParser.Int:
	        case SolidityParser.Uint:
	        case SolidityParser.Byte:
	        case SolidityParser.Fixed:
	        case SolidityParser.Ufixed:
	        case SolidityParser.BooleanLiteral:
	        case SolidityParser.DecimalNumber:
	        case SolidityParser.HexNumber:
	        case SolidityParser.HexLiteralFragment:
	        case SolidityParser.PayableKeyword:
	        case SolidityParser.TypeKeyword:
	        case SolidityParser.Identifier:
	        case SolidityParser.StringLiteralFragment:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 551;
	            this.simpleStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStatement() {
	    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, SolidityParser.RULE_expressionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 554;
	        this.expression(0);
	        this.state = 555;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement() {
	    let localctx = new IfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, SolidityParser.RULE_ifStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 557;
	        this.match(SolidityParser.T__40);
	        this.state = 558;
	        this.match(SolidityParser.T__21);
	        this.state = 559;
	        this.expression(0);
	        this.state = 560;
	        this.match(SolidityParser.T__22);
	        this.state = 561;
	        this.statement();
	        this.state = 564;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	        if(la_===1) {
	            this.state = 562;
	            this.match(SolidityParser.T__41);
	            this.state = 563;
	            this.statement();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryStatement() {
	    let localctx = new TryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, SolidityParser.RULE_tryStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 566;
	        this.match(SolidityParser.T__42);
	        this.state = 567;
	        this.expression(0);
	        this.state = 569;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__29) {
	            this.state = 568;
	            this.returnParameters();
	        }

	        this.state = 571;
	        this.block();
	        this.state = 573; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 572;
	            this.catchClause();
	            this.state = 575; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===SolidityParser.T__43);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchClause() {
	    let localctx = new CatchClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, SolidityParser.RULE_catchClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 577;
	        this.match(SolidityParser.T__43);
	        this.state = 582;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__12 || _la===SolidityParser.T__21 || _la===SolidityParser.T__39 || _la===SolidityParser.T__51 || _la===SolidityParser.Identifier) {
	            this.state = 579;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SolidityParser.T__12 || _la===SolidityParser.T__39 || _la===SolidityParser.T__51 || _la===SolidityParser.Identifier) {
	                this.state = 578;
	                this.identifier();
	            }

	            this.state = 581;
	            this.parameterList();
	        }

	        this.state = 584;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whileStatement() {
	    let localctx = new WhileStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, SolidityParser.RULE_whileStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 586;
	        this.match(SolidityParser.T__44);
	        this.state = 587;
	        this.match(SolidityParser.T__21);
	        this.state = 588;
	        this.expression(0);
	        this.state = 589;
	        this.match(SolidityParser.T__22);
	        this.state = 590;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forStatement() {
	    let localctx = new ForStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, SolidityParser.RULE_forStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 592;
	        this.match(SolidityParser.T__25);
	        this.state = 593;
	        this.match(SolidityParser.T__21);
	        this.state = 596;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__3:
	        case SolidityParser.T__12:
	        case SolidityParser.T__21:
	        case SolidityParser.T__28:
	        case SolidityParser.T__32:
	        case SolidityParser.T__35:
	        case SolidityParser.T__39:
	        case SolidityParser.T__50:
	        case SolidityParser.T__51:
	        case SolidityParser.T__52:
	        case SolidityParser.T__53:
	        case SolidityParser.T__54:
	        case SolidityParser.T__55:
	        case SolidityParser.T__56:
	        case SolidityParser.T__57:
	        case SolidityParser.T__59:
	        case SolidityParser.T__60:
	        case SolidityParser.T__61:
	        case SolidityParser.T__62:
	        case SolidityParser.T__63:
	        case SolidityParser.Int:
	        case SolidityParser.Uint:
	        case SolidityParser.Byte:
	        case SolidityParser.Fixed:
	        case SolidityParser.Ufixed:
	        case SolidityParser.BooleanLiteral:
	        case SolidityParser.DecimalNumber:
	        case SolidityParser.HexNumber:
	        case SolidityParser.HexLiteralFragment:
	        case SolidityParser.PayableKeyword:
	        case SolidityParser.TypeKeyword:
	        case SolidityParser.Identifier:
	        case SolidityParser.StringLiteralFragment:
	            this.state = 594;
	            this.simpleStatement();
	            break;
	        case SolidityParser.T__1:
	            this.state = 595;
	            this.match(SolidityParser.T__1);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 600;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__3:
	        case SolidityParser.T__12:
	        case SolidityParser.T__21:
	        case SolidityParser.T__32:
	        case SolidityParser.T__39:
	        case SolidityParser.T__50:
	        case SolidityParser.T__51:
	        case SolidityParser.T__52:
	        case SolidityParser.T__53:
	        case SolidityParser.T__54:
	        case SolidityParser.T__55:
	        case SolidityParser.T__56:
	        case SolidityParser.T__57:
	        case SolidityParser.T__59:
	        case SolidityParser.T__60:
	        case SolidityParser.T__61:
	        case SolidityParser.T__62:
	        case SolidityParser.T__63:
	        case SolidityParser.Int:
	        case SolidityParser.Uint:
	        case SolidityParser.Byte:
	        case SolidityParser.Fixed:
	        case SolidityParser.Ufixed:
	        case SolidityParser.BooleanLiteral:
	        case SolidityParser.DecimalNumber:
	        case SolidityParser.HexNumber:
	        case SolidityParser.HexLiteralFragment:
	        case SolidityParser.PayableKeyword:
	        case SolidityParser.TypeKeyword:
	        case SolidityParser.Identifier:
	        case SolidityParser.StringLiteralFragment:
	            this.state = 598;
	            this.expressionStatement();
	            break;
	        case SolidityParser.T__1:
	            this.state = 599;
	            this.match(SolidityParser.T__1);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 603;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__39 - 33)) | (1 << (SolidityParser.T__50 - 33)) | (1 << (SolidityParser.T__51 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__59 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.BooleanLiteral - 93)) | (1 << (SolidityParser.DecimalNumber - 93)) | (1 << (SolidityParser.HexNumber - 93)) | (1 << (SolidityParser.HexLiteralFragment - 93)) | (1 << (SolidityParser.PayableKeyword - 93)) | (1 << (SolidityParser.TypeKeyword - 93)) | (1 << (SolidityParser.Identifier - 93)) | (1 << (SolidityParser.StringLiteralFragment - 93)))) !== 0)) {
	            this.state = 602;
	            this.expression(0);
	        }

	        this.state = 605;
	        this.match(SolidityParser.T__22);
	        this.state = 606;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleStatement() {
	    let localctx = new SimpleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, SolidityParser.RULE_simpleStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 610;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 608;
	            this.variableDeclarationStatement();
	            break;

	        case 2:
	            this.state = 609;
	            this.expressionStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inlineAssemblyStatement() {
	    let localctx = new InlineAssemblyStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, SolidityParser.RULE_inlineAssemblyStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 612;
	        this.match(SolidityParser.T__45);
	        this.state = 614;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.StringLiteralFragment) {
	            this.state = 613;
	            this.match(SolidityParser.StringLiteralFragment);
	        }

	        this.state = 616;
	        this.assemblyBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doWhileStatement() {
	    let localctx = new DoWhileStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, SolidityParser.RULE_doWhileStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 618;
	        this.match(SolidityParser.T__46);
	        this.state = 619;
	        this.statement();
	        this.state = 620;
	        this.match(SolidityParser.T__44);
	        this.state = 621;
	        this.match(SolidityParser.T__21);
	        this.state = 622;
	        this.expression(0);
	        this.state = 623;
	        this.match(SolidityParser.T__22);
	        this.state = 624;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStatement() {
	    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, SolidityParser.RULE_continueStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 626;
	        this.match(SolidityParser.ContinueKeyword);
	        this.state = 627;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	breakStatement() {
	    let localctx = new BreakStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, SolidityParser.RULE_breakStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 629;
	        this.match(SolidityParser.BreakKeyword);
	        this.state = 630;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, SolidityParser.RULE_returnStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 632;
	        this.match(SolidityParser.T__47);
	        this.state = 634;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__39 - 33)) | (1 << (SolidityParser.T__50 - 33)) | (1 << (SolidityParser.T__51 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__59 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.BooleanLiteral - 93)) | (1 << (SolidityParser.DecimalNumber - 93)) | (1 << (SolidityParser.HexNumber - 93)) | (1 << (SolidityParser.HexLiteralFragment - 93)) | (1 << (SolidityParser.PayableKeyword - 93)) | (1 << (SolidityParser.TypeKeyword - 93)) | (1 << (SolidityParser.Identifier - 93)) | (1 << (SolidityParser.StringLiteralFragment - 93)))) !== 0)) {
	            this.state = 633;
	            this.expression(0);
	        }

	        this.state = 636;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwStatement() {
	    let localctx = new ThrowStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, SolidityParser.RULE_throwStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 638;
	        this.match(SolidityParser.T__48);
	        this.state = 639;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emitStatement() {
	    let localctx = new EmitStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, SolidityParser.RULE_emitStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 641;
	        this.match(SolidityParser.T__49);
	        this.state = 642;
	        this.functionCall();
	        this.state = 643;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarationStatement() {
	    let localctx = new VariableDeclarationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, SolidityParser.RULE_variableDeclarationStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 652;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 645;
	            this.match(SolidityParser.T__50);
	            this.state = 646;
	            this.identifierList();
	            break;

	        case 2:
	            this.state = 647;
	            this.variableDeclaration();
	            break;

	        case 3:
	            this.state = 648;
	            this.match(SolidityParser.T__21);
	            this.state = 649;
	            this.variableDeclarationList();
	            this.state = 650;
	            this.match(SolidityParser.T__22);
	            break;

	        }
	        this.state = 656;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__8) {
	            this.state = 654;
	            this.match(SolidityParser.T__8);
	            this.state = 655;
	            this.expression(0);
	        }

	        this.state = 658;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarationList() {
	    let localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, SolidityParser.RULE_variableDeclarationList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 661;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__12 || _la===SolidityParser.T__28 || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (SolidityParser.T__35 - 36)) | (1 << (SolidityParser.T__39 - 36)) | (1 << (SolidityParser.T__50 - 36)) | (1 << (SolidityParser.T__51 - 36)) | (1 << (SolidityParser.T__52 - 36)) | (1 << (SolidityParser.T__53 - 36)) | (1 << (SolidityParser.T__54 - 36)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.Identifier - 93)))) !== 0)) {
	            this.state = 660;
	            this.variableDeclaration();
	        }

	        this.state = 669;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SolidityParser.T__14) {
	            this.state = 663;
	            this.match(SolidityParser.T__14);
	            this.state = 665;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SolidityParser.T__12 || _la===SolidityParser.T__28 || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (SolidityParser.T__35 - 36)) | (1 << (SolidityParser.T__39 - 36)) | (1 << (SolidityParser.T__50 - 36)) | (1 << (SolidityParser.T__51 - 36)) | (1 << (SolidityParser.T__52 - 36)) | (1 << (SolidityParser.T__53 - 36)) | (1 << (SolidityParser.T__54 - 36)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.Identifier - 93)))) !== 0)) {
	                this.state = 664;
	                this.variableDeclaration();
	            }

	            this.state = 671;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierList() {
	    let localctx = new IdentifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, SolidityParser.RULE_identifierList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 672;
	        this.match(SolidityParser.T__21);
	        this.state = 679;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,75,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 674;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SolidityParser.T__12 || _la===SolidityParser.T__39 || _la===SolidityParser.T__51 || _la===SolidityParser.Identifier) {
	                    this.state = 673;
	                    this.identifier();
	                }

	                this.state = 676;
	                this.match(SolidityParser.T__14); 
	            }
	            this.state = 681;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,75,this._ctx);
	        }

	        this.state = 683;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__12 || _la===SolidityParser.T__39 || _la===SolidityParser.T__51 || _la===SolidityParser.Identifier) {
	            this.state = 682;
	            this.identifier();
	        }

	        this.state = 685;
	        this.match(SolidityParser.T__22);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementaryTypeName() {
	    let localctx = new ElementaryTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, SolidityParser.RULE_elementaryTypeName);
	    try {
	        this.state = 700;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__51:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 687;
	            this.match(SolidityParser.T__51);
	            this.state = 689;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	            if(la_===1) {
	                this.state = 688;
	                this.match(SolidityParser.PayableKeyword);

	            }
	            break;
	        case SolidityParser.T__52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 691;
	            this.match(SolidityParser.T__52);
	            break;
	        case SolidityParser.T__53:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 692;
	            this.match(SolidityParser.T__53);
	            break;
	        case SolidityParser.T__50:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 693;
	            this.match(SolidityParser.T__50);
	            break;
	        case SolidityParser.Int:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 694;
	            this.match(SolidityParser.Int);
	            break;
	        case SolidityParser.Uint:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 695;
	            this.match(SolidityParser.Uint);
	            break;
	        case SolidityParser.T__54:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 696;
	            this.match(SolidityParser.T__54);
	            break;
	        case SolidityParser.Byte:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 697;
	            this.match(SolidityParser.Byte);
	            break;
	        case SolidityParser.Fixed:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 698;
	            this.match(SolidityParser.Fixed);
	            break;
	        case SolidityParser.Ufixed:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 699;
	            this.match(SolidityParser.Ufixed);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 112;
	    this.enterRecursionRule(localctx, 112, SolidityParser.RULE_expression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 725;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 703;
	            this.match(SolidityParser.T__57);
	            this.state = 704;
	            this.typeName(0);
	            break;

	        case 2:
	            this.state = 705;
	            this.match(SolidityParser.PayableKeyword);
	            this.state = 706;
	            this.match(SolidityParser.T__21);
	            this.state = 707;
	            this.expression(0);
	            this.state = 708;
	            this.match(SolidityParser.T__22);
	            break;

	        case 3:
	            this.state = 710;
	            this.match(SolidityParser.T__21);
	            this.state = 711;
	            this.expression(0);
	            this.state = 712;
	            this.match(SolidityParser.T__22);
	            break;

	        case 4:
	            this.state = 714;
	            _la = this._input.LA(1);
	            if(!(_la===SolidityParser.T__55 || _la===SolidityParser.T__56)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 715;
	            this.expression(19);
	            break;

	        case 5:
	            this.state = 716;
	            _la = this._input.LA(1);
	            if(!(_la===SolidityParser.T__59 || _la===SolidityParser.T__60)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 717;
	            this.expression(18);
	            break;

	        case 6:
	            this.state = 718;
	            _la = this._input.LA(1);
	            if(!(_la===SolidityParser.T__61 || _la===SolidityParser.T__62)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 719;
	            this.expression(17);
	            break;

	        case 7:
	            this.state = 720;
	            this.match(SolidityParser.T__63);
	            this.state = 721;
	            this.expression(16);
	            break;

	        case 8:
	            this.state = 722;
	            this.match(SolidityParser.T__3);
	            this.state = 723;
	            this.expression(15);
	            break;

	        case 9:
	            this.state = 724;
	            this.primaryExpression();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 802;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,84,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 800;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 727;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 728;
	                    this.match(SolidityParser.T__64);
	                    this.state = 729;
	                    this.expression(15);
	                    break;

	                case 2:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 730;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 731;
	                    _la = this._input.LA(1);
	                    if(!(_la===SolidityParser.T__11 || _la===SolidityParser.T__65 || _la===SolidityParser.T__66)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 732;
	                    this.expression(14);
	                    break;

	                case 3:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 733;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 734;
	                    _la = this._input.LA(1);
	                    if(!(_la===SolidityParser.T__59 || _la===SolidityParser.T__60)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 735;
	                    this.expression(13);
	                    break;

	                case 4:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 736;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 737;
	                    _la = this._input.LA(1);
	                    if(!(_la===SolidityParser.T__67 || _la===SolidityParser.T__68)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 738;
	                    this.expression(12);
	                    break;

	                case 5:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 739;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 740;
	                    this.match(SolidityParser.T__69);
	                    this.state = 741;
	                    this.expression(11);
	                    break;

	                case 6:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 742;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 743;
	                    this.match(SolidityParser.T__2);
	                    this.state = 744;
	                    this.expression(10);
	                    break;

	                case 7:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 745;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 746;
	                    this.match(SolidityParser.T__70);
	                    this.state = 747;
	                    this.expression(9);
	                    break;

	                case 8:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 748;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 749;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 750;
	                    this.expression(8);
	                    break;

	                case 9:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 751;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 752;
	                    _la = this._input.LA(1);
	                    if(!(_la===SolidityParser.T__71 || _la===SolidityParser.T__72)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 753;
	                    this.expression(7);
	                    break;

	                case 10:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 754;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 755;
	                    this.match(SolidityParser.T__73);
	                    this.state = 756;
	                    this.expression(6);
	                    break;

	                case 11:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 757;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 758;
	                    this.match(SolidityParser.T__74);
	                    this.state = 759;
	                    this.expression(5);
	                    break;

	                case 12:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 760;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 761;
	                    this.match(SolidityParser.T__75);
	                    this.state = 762;
	                    this.expression(0);
	                    this.state = 763;
	                    this.match(SolidityParser.T__58);
	                    this.state = 764;
	                    this.expression(4);
	                    break;

	                case 13:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 766;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 767;
	                    _la = this._input.LA(1);
	                    if(!(_la===SolidityParser.T__8 || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (SolidityParser.T__76 - 77)) | (1 << (SolidityParser.T__77 - 77)) | (1 << (SolidityParser.T__78 - 77)) | (1 << (SolidityParser.T__79 - 77)) | (1 << (SolidityParser.T__80 - 77)) | (1 << (SolidityParser.T__81 - 77)) | (1 << (SolidityParser.T__82 - 77)) | (1 << (SolidityParser.T__83 - 77)) | (1 << (SolidityParser.T__84 - 77)) | (1 << (SolidityParser.T__85 - 77)))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 768;
	                    this.expression(3);
	                    break;

	                case 14:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 769;
	                    if (!( this.precpred(this._ctx, 28))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 28)");
	                    }
	                    this.state = 770;
	                    _la = this._input.LA(1);
	                    if(!(_la===SolidityParser.T__55 || _la===SolidityParser.T__56)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    break;

	                case 15:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 771;
	                    if (!( this.precpred(this._ctx, 26))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
	                    }
	                    this.state = 772;
	                    this.match(SolidityParser.T__32);
	                    this.state = 774;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__39 - 33)) | (1 << (SolidityParser.T__50 - 33)) | (1 << (SolidityParser.T__51 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__59 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.BooleanLiteral - 93)) | (1 << (SolidityParser.DecimalNumber - 93)) | (1 << (SolidityParser.HexNumber - 93)) | (1 << (SolidityParser.HexLiteralFragment - 93)) | (1 << (SolidityParser.PayableKeyword - 93)) | (1 << (SolidityParser.TypeKeyword - 93)) | (1 << (SolidityParser.Identifier - 93)) | (1 << (SolidityParser.StringLiteralFragment - 93)))) !== 0)) {
	                        this.state = 773;
	                        this.expression(0);
	                    }

	                    this.state = 776;
	                    this.match(SolidityParser.T__33);
	                    break;

	                case 16:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 777;
	                    if (!( this.precpred(this._ctx, 25))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
	                    }
	                    this.state = 778;
	                    this.match(SolidityParser.T__32);
	                    this.state = 780;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__39 - 33)) | (1 << (SolidityParser.T__50 - 33)) | (1 << (SolidityParser.T__51 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__59 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.BooleanLiteral - 93)) | (1 << (SolidityParser.DecimalNumber - 93)) | (1 << (SolidityParser.HexNumber - 93)) | (1 << (SolidityParser.HexLiteralFragment - 93)) | (1 << (SolidityParser.PayableKeyword - 93)) | (1 << (SolidityParser.TypeKeyword - 93)) | (1 << (SolidityParser.Identifier - 93)) | (1 << (SolidityParser.StringLiteralFragment - 93)))) !== 0)) {
	                        this.state = 779;
	                        this.expression(0);
	                    }

	                    this.state = 782;
	                    this.match(SolidityParser.T__58);
	                    this.state = 784;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__39 - 33)) | (1 << (SolidityParser.T__50 - 33)) | (1 << (SolidityParser.T__51 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__59 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.BooleanLiteral - 93)) | (1 << (SolidityParser.DecimalNumber - 93)) | (1 << (SolidityParser.HexNumber - 93)) | (1 << (SolidityParser.HexLiteralFragment - 93)) | (1 << (SolidityParser.PayableKeyword - 93)) | (1 << (SolidityParser.TypeKeyword - 93)) | (1 << (SolidityParser.Identifier - 93)) | (1 << (SolidityParser.StringLiteralFragment - 93)))) !== 0)) {
	                        this.state = 783;
	                        this.expression(0);
	                    }

	                    this.state = 786;
	                    this.match(SolidityParser.T__33);
	                    break;

	                case 17:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 787;
	                    if (!( this.precpred(this._ctx, 24))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
	                    }
	                    this.state = 788;
	                    this.match(SolidityParser.T__34);
	                    this.state = 789;
	                    this.identifier();
	                    break;

	                case 18:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 790;
	                    if (!( this.precpred(this._ctx, 23))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
	                    }
	                    this.state = 791;
	                    this.match(SolidityParser.T__13);
	                    this.state = 792;
	                    this.nameValueList();
	                    this.state = 793;
	                    this.match(SolidityParser.T__15);
	                    break;

	                case 19:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 795;
	                    if (!( this.precpred(this._ctx, 22))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
	                    }
	                    this.state = 796;
	                    this.match(SolidityParser.T__21);
	                    this.state = 797;
	                    this.functionCallArguments();
	                    this.state = 798;
	                    this.match(SolidityParser.T__22);
	                    break;

	                } 
	            }
	            this.state = 804;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,84,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	primaryExpression() {
	    let localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, SolidityParser.RULE_primaryExpression);
	    try {
	        this.state = 821;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 805;
	            this.match(SolidityParser.BooleanLiteral);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 806;
	            this.numberLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 807;
	            this.hexLiteral();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 808;
	            this.stringLiteral();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 809;
	            this.identifier();
	            this.state = 812;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	            if(la_===1) {
	                this.state = 810;
	                this.match(SolidityParser.T__32);
	                this.state = 811;
	                this.match(SolidityParser.T__33);

	            }
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 814;
	            this.match(SolidityParser.TypeKeyword);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 815;
	            this.tupleExpression();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 816;
	            this.typeNameExpression();
	            this.state = 819;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	            if(la_===1) {
	                this.state = 817;
	                this.match(SolidityParser.T__32);
	                this.state = 818;
	                this.match(SolidityParser.T__33);

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionList() {
	    let localctx = new ExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, SolidityParser.RULE_expressionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 823;
	        this.expression(0);
	        this.state = 828;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SolidityParser.T__14) {
	            this.state = 824;
	            this.match(SolidityParser.T__14);
	            this.state = 825;
	            this.expression(0);
	            this.state = 830;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nameValueList() {
	    let localctx = new NameValueListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, SolidityParser.RULE_nameValueList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 831;
	        this.nameValue();
	        this.state = 836;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,89,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 832;
	                this.match(SolidityParser.T__14);
	                this.state = 833;
	                this.nameValue(); 
	            }
	            this.state = 838;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,89,this._ctx);
	        }

	        this.state = 840;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__14) {
	            this.state = 839;
	            this.match(SolidityParser.T__14);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nameValue() {
	    let localctx = new NameValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, SolidityParser.RULE_nameValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 842;
	        this.identifier();
	        this.state = 843;
	        this.match(SolidityParser.T__58);
	        this.state = 844;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionCallArguments() {
	    let localctx = new FunctionCallArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, SolidityParser.RULE_functionCallArguments);
	    var _la = 0; // Token type
	    try {
	        this.state = 854;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__13:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 846;
	            this.match(SolidityParser.T__13);
	            this.state = 848;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SolidityParser.T__12 || _la===SolidityParser.T__39 || _la===SolidityParser.T__51 || _la===SolidityParser.Identifier) {
	                this.state = 847;
	                this.nameValueList();
	            }

	            this.state = 850;
	            this.match(SolidityParser.T__15);
	            break;
	        case SolidityParser.T__3:
	        case SolidityParser.T__12:
	        case SolidityParser.T__21:
	        case SolidityParser.T__22:
	        case SolidityParser.T__32:
	        case SolidityParser.T__39:
	        case SolidityParser.T__50:
	        case SolidityParser.T__51:
	        case SolidityParser.T__52:
	        case SolidityParser.T__53:
	        case SolidityParser.T__54:
	        case SolidityParser.T__55:
	        case SolidityParser.T__56:
	        case SolidityParser.T__57:
	        case SolidityParser.T__59:
	        case SolidityParser.T__60:
	        case SolidityParser.T__61:
	        case SolidityParser.T__62:
	        case SolidityParser.T__63:
	        case SolidityParser.Int:
	        case SolidityParser.Uint:
	        case SolidityParser.Byte:
	        case SolidityParser.Fixed:
	        case SolidityParser.Ufixed:
	        case SolidityParser.BooleanLiteral:
	        case SolidityParser.DecimalNumber:
	        case SolidityParser.HexNumber:
	        case SolidityParser.HexLiteralFragment:
	        case SolidityParser.PayableKeyword:
	        case SolidityParser.TypeKeyword:
	        case SolidityParser.Identifier:
	        case SolidityParser.StringLiteralFragment:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 852;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__39 - 33)) | (1 << (SolidityParser.T__50 - 33)) | (1 << (SolidityParser.T__51 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__59 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.BooleanLiteral - 93)) | (1 << (SolidityParser.DecimalNumber - 93)) | (1 << (SolidityParser.HexNumber - 93)) | (1 << (SolidityParser.HexLiteralFragment - 93)) | (1 << (SolidityParser.PayableKeyword - 93)) | (1 << (SolidityParser.TypeKeyword - 93)) | (1 << (SolidityParser.Identifier - 93)) | (1 << (SolidityParser.StringLiteralFragment - 93)))) !== 0)) {
	                this.state = 851;
	                this.expressionList();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionCall() {
	    let localctx = new FunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, SolidityParser.RULE_functionCall);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 856;
	        this.expression(0);
	        this.state = 857;
	        this.match(SolidityParser.T__21);
	        this.state = 858;
	        this.functionCallArguments();
	        this.state = 859;
	        this.match(SolidityParser.T__22);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tupleExpression() {
	    let localctx = new TupleExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, SolidityParser.RULE_tupleExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 887;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__21:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 861;
	            this.match(SolidityParser.T__21);

	            this.state = 863;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__39 - 33)) | (1 << (SolidityParser.T__50 - 33)) | (1 << (SolidityParser.T__51 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__59 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.BooleanLiteral - 93)) | (1 << (SolidityParser.DecimalNumber - 93)) | (1 << (SolidityParser.HexNumber - 93)) | (1 << (SolidityParser.HexLiteralFragment - 93)) | (1 << (SolidityParser.PayableKeyword - 93)) | (1 << (SolidityParser.TypeKeyword - 93)) | (1 << (SolidityParser.Identifier - 93)) | (1 << (SolidityParser.StringLiteralFragment - 93)))) !== 0)) {
	                this.state = 862;
	                this.expression(0);
	            }

	            this.state = 871;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SolidityParser.T__14) {
	                this.state = 865;
	                this.match(SolidityParser.T__14);
	                this.state = 867;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__39 - 33)) | (1 << (SolidityParser.T__50 - 33)) | (1 << (SolidityParser.T__51 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__59 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.BooleanLiteral - 93)) | (1 << (SolidityParser.DecimalNumber - 93)) | (1 << (SolidityParser.HexNumber - 93)) | (1 << (SolidityParser.HexLiteralFragment - 93)) | (1 << (SolidityParser.PayableKeyword - 93)) | (1 << (SolidityParser.TypeKeyword - 93)) | (1 << (SolidityParser.Identifier - 93)) | (1 << (SolidityParser.StringLiteralFragment - 93)))) !== 0)) {
	                    this.state = 866;
	                    this.expression(0);
	                }

	                this.state = 873;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 874;
	            this.match(SolidityParser.T__22);
	            break;
	        case SolidityParser.T__32:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 875;
	            this.match(SolidityParser.T__32);
	            this.state = 884;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__39 - 33)) | (1 << (SolidityParser.T__50 - 33)) | (1 << (SolidityParser.T__51 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__59 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.BooleanLiteral - 93)) | (1 << (SolidityParser.DecimalNumber - 93)) | (1 << (SolidityParser.HexNumber - 93)) | (1 << (SolidityParser.HexLiteralFragment - 93)) | (1 << (SolidityParser.PayableKeyword - 93)) | (1 << (SolidityParser.TypeKeyword - 93)) | (1 << (SolidityParser.Identifier - 93)) | (1 << (SolidityParser.StringLiteralFragment - 93)))) !== 0)) {
	                this.state = 876;
	                this.expression(0);
	                this.state = 881;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SolidityParser.T__14) {
	                    this.state = 877;
	                    this.match(SolidityParser.T__14);
	                    this.state = 878;
	                    this.expression(0);
	                    this.state = 883;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 886;
	            this.match(SolidityParser.T__33);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeNameExpression() {
	    let localctx = new TypeNameExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, SolidityParser.RULE_typeNameExpression);
	    try {
	        this.state = 891;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 889;
	            this.elementaryTypeName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 890;
	            this.userDefinedTypeName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyItem() {
	    let localctx = new AssemblyItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, SolidityParser.RULE_assemblyItem);
	    try {
	        this.state = 911;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 893;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 894;
	            this.assemblyBlock();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 895;
	            this.assemblyExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 896;
	            this.assemblyLocalDefinition();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 897;
	            this.assemblyAssignment();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 898;
	            this.assemblyStackAssignment();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 899;
	            this.labelDefinition();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 900;
	            this.assemblySwitch();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 901;
	            this.assemblyFunctionDefinition();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 902;
	            this.assemblyFor();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 903;
	            this.assemblyIf();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 904;
	            this.match(SolidityParser.BreakKeyword);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 905;
	            this.match(SolidityParser.ContinueKeyword);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 906;
	            this.match(SolidityParser.LeaveKeyword);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 907;
	            this.subAssembly();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 908;
	            this.numberLiteral();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 909;
	            this.stringLiteral();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 910;
	            this.hexLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyBlock() {
	    let localctx = new AssemblyBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, SolidityParser.RULE_assemblyBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 913;
	        this.match(SolidityParser.T__13);
	        this.state = 917;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__25) | (1 << SolidityParser.T__28))) !== 0) || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (SolidityParser.T__39 - 40)) | (1 << (SolidityParser.T__40 - 40)) | (1 << (SolidityParser.T__45 - 40)) | (1 << (SolidityParser.T__47 - 40)) | (1 << (SolidityParser.T__51 - 40)) | (1 << (SolidityParser.T__54 - 40)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (SolidityParser.T__86 - 87)) | (1 << (SolidityParser.T__88 - 87)) | (1 << (SolidityParser.T__89 - 87)) | (1 << (SolidityParser.BooleanLiteral - 87)) | (1 << (SolidityParser.DecimalNumber - 87)) | (1 << (SolidityParser.HexNumber - 87)) | (1 << (SolidityParser.HexLiteralFragment - 87)) | (1 << (SolidityParser.BreakKeyword - 87)) | (1 << (SolidityParser.ContinueKeyword - 87)) | (1 << (SolidityParser.LeaveKeyword - 87)))) !== 0) || _la===SolidityParser.Identifier || _la===SolidityParser.StringLiteralFragment) {
	            this.state = 914;
	            this.assemblyItem();
	            this.state = 919;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 920;
	        this.match(SolidityParser.T__15);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyExpression() {
	    let localctx = new AssemblyExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, SolidityParser.RULE_assemblyExpression);
	    try {
	        this.state = 924;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__12:
	        case SolidityParser.T__39:
	        case SolidityParser.T__47:
	        case SolidityParser.T__51:
	        case SolidityParser.T__54:
	        case SolidityParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 922;
	            this.assemblyCall();
	            break;
	        case SolidityParser.BooleanLiteral:
	        case SolidityParser.DecimalNumber:
	        case SolidityParser.HexNumber:
	        case SolidityParser.HexLiteralFragment:
	        case SolidityParser.StringLiteralFragment:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 923;
	            this.assemblyLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyCall() {
	    let localctx = new AssemblyCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, SolidityParser.RULE_assemblyCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 930;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 926;
	            this.match(SolidityParser.T__47);
	            break;

	        case 2:
	            this.state = 927;
	            this.match(SolidityParser.T__51);
	            break;

	        case 3:
	            this.state = 928;
	            this.match(SolidityParser.T__54);
	            break;

	        case 4:
	            this.state = 929;
	            this.identifier();
	            break;

	        }
	        this.state = 944;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__21) {
	            this.state = 932;
	            this.match(SolidityParser.T__21);
	            this.state = 934;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SolidityParser.T__12 || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (SolidityParser.T__39 - 40)) | (1 << (SolidityParser.T__47 - 40)) | (1 << (SolidityParser.T__51 - 40)) | (1 << (SolidityParser.T__54 - 40)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (SolidityParser.BooleanLiteral - 98)) | (1 << (SolidityParser.DecimalNumber - 98)) | (1 << (SolidityParser.HexNumber - 98)) | (1 << (SolidityParser.HexLiteralFragment - 98)) | (1 << (SolidityParser.Identifier - 98)) | (1 << (SolidityParser.StringLiteralFragment - 98)))) !== 0)) {
	                this.state = 933;
	                this.assemblyExpression();
	            }

	            this.state = 940;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SolidityParser.T__14) {
	                this.state = 936;
	                this.match(SolidityParser.T__14);
	                this.state = 937;
	                this.assemblyExpression();
	                this.state = 942;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 943;
	            this.match(SolidityParser.T__22);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyLocalDefinition() {
	    let localctx = new AssemblyLocalDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, SolidityParser.RULE_assemblyLocalDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 946;
	        this.match(SolidityParser.T__86);
	        this.state = 947;
	        this.assemblyIdentifierList();
	        this.state = 950;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__87) {
	            this.state = 948;
	            this.match(SolidityParser.T__87);
	            this.state = 949;
	            this.assemblyExpression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyAssignment() {
	    let localctx = new AssemblyAssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, SolidityParser.RULE_assemblyAssignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 952;
	        this.assemblyIdentifierList();
	        this.state = 953;
	        this.match(SolidityParser.T__87);
	        this.state = 954;
	        this.assemblyExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyIdentifierList() {
	    let localctx = new AssemblyIdentifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, SolidityParser.RULE_assemblyIdentifierList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 956;
	        this.identifier();
	        this.state = 961;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SolidityParser.T__14) {
	            this.state = 957;
	            this.match(SolidityParser.T__14);
	            this.state = 958;
	            this.identifier();
	            this.state = 963;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyStackAssignment() {
	    let localctx = new AssemblyStackAssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, SolidityParser.RULE_assemblyStackAssignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 964;
	        this.match(SolidityParser.T__88);
	        this.state = 965;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelDefinition() {
	    let localctx = new LabelDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, SolidityParser.RULE_labelDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 967;
	        this.identifier();
	        this.state = 968;
	        this.match(SolidityParser.T__58);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblySwitch() {
	    let localctx = new AssemblySwitchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, SolidityParser.RULE_assemblySwitch);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 970;
	        this.match(SolidityParser.T__89);
	        this.state = 971;
	        this.assemblyExpression();
	        this.state = 975;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SolidityParser.T__90 || _la===SolidityParser.T__91) {
	            this.state = 972;
	            this.assemblyCase();
	            this.state = 977;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyCase() {
	    let localctx = new AssemblyCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, SolidityParser.RULE_assemblyCase);
	    var _la = 0; // Token type
	    try {
	        this.state = 987;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__90:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 978;
	            this.match(SolidityParser.T__90);
	            this.state = 979;
	            this.assemblyLiteral();
	            this.state = 981;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SolidityParser.T__58) {
	                this.state = 980;
	                this.assemblyType();
	            }

	            this.state = 983;
	            this.assemblyBlock();
	            break;
	        case SolidityParser.T__91:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 985;
	            this.match(SolidityParser.T__91);
	            this.state = 986;
	            this.assemblyBlock();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyFunctionDefinition() {
	    let localctx = new AssemblyFunctionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, SolidityParser.RULE_assemblyFunctionDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 989;
	        this.match(SolidityParser.T__28);
	        this.state = 990;
	        this.identifier();
	        this.state = 991;
	        this.match(SolidityParser.T__21);
	        this.state = 993;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__12 || _la===SolidityParser.T__39 || _la===SolidityParser.T__51 || _la===SolidityParser.Identifier) {
	            this.state = 992;
	            this.assemblyTypedVariableList();
	        }

	        this.state = 995;
	        this.match(SolidityParser.T__22);
	        this.state = 997;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__60) {
	            this.state = 996;
	            this.assemblyFunctionReturns();
	        }

	        this.state = 999;
	        this.assemblyBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyFunctionReturns() {
	    let localctx = new AssemblyFunctionReturnsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, SolidityParser.RULE_assemblyFunctionReturns);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1001;
	        this.match(SolidityParser.T__60);
	        this.state = 1002;
	        this.match(SolidityParser.T__5);
	        this.state = 1003;
	        this.assemblyTypedVariableList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyFor() {
	    let localctx = new AssemblyForContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, SolidityParser.RULE_assemblyFor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1005;
	        this.match(SolidityParser.T__25);
	        this.state = 1006;
	        this.assemblyBlock();
	        this.state = 1007;
	        this.assemblyExpression();
	        this.state = 1008;
	        this.assemblyBlock();
	        this.state = 1009;
	        this.assemblyBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyIf() {
	    let localctx = new AssemblyIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, SolidityParser.RULE_assemblyIf);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1011;
	        this.match(SolidityParser.T__40);
	        this.state = 1012;
	        this.assemblyExpression();
	        this.state = 1013;
	        this.assemblyBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyLiteral() {
	    let localctx = new AssemblyLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, SolidityParser.RULE_assemblyLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1020;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.StringLiteralFragment:
	            this.state = 1015;
	            this.stringLiteral();
	            break;
	        case SolidityParser.DecimalNumber:
	            this.state = 1016;
	            this.match(SolidityParser.DecimalNumber);
	            break;
	        case SolidityParser.HexNumber:
	            this.state = 1017;
	            this.match(SolidityParser.HexNumber);
	            break;
	        case SolidityParser.HexLiteralFragment:
	            this.state = 1018;
	            this.hexLiteral();
	            break;
	        case SolidityParser.BooleanLiteral:
	            this.state = 1019;
	            this.match(SolidityParser.BooleanLiteral);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1023;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	        if(la_===1) {
	            this.state = 1022;
	            this.assemblyType();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyTypedVariableList() {
	    let localctx = new AssemblyTypedVariableListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, SolidityParser.RULE_assemblyTypedVariableList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1025;
	        this.identifier();
	        this.state = 1027;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__58) {
	            this.state = 1026;
	            this.assemblyType();
	        }

	        this.state = 1031;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__14) {
	            this.state = 1029;
	            this.match(SolidityParser.T__14);
	            this.state = 1030;
	            this.assemblyTypedVariableList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyType() {
	    let localctx = new AssemblyTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, SolidityParser.RULE_assemblyType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1033;
	        this.match(SolidityParser.T__58);
	        this.state = 1034;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subAssembly() {
	    let localctx = new SubAssemblyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, SolidityParser.RULE_subAssembly);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1036;
	        this.match(SolidityParser.T__45);
	        this.state = 1037;
	        this.identifier();
	        this.state = 1038;
	        this.assemblyBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numberLiteral() {
	    let localctx = new NumberLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, SolidityParser.RULE_numberLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1040;
	        _la = this._input.LA(1);
	        if(!(_la===SolidityParser.DecimalNumber || _la===SolidityParser.HexNumber)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1042;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
	        if(la_===1) {
	            this.state = 1041;
	            this.match(SolidityParser.NumberUnit);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, SolidityParser.RULE_identifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1044;
	        _la = this._input.LA(1);
	        if(!(_la===SolidityParser.T__12 || _la===SolidityParser.T__39 || _la===SolidityParser.T__51 || _la===SolidityParser.Identifier)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hexLiteral() {
	    let localctx = new HexLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, SolidityParser.RULE_hexLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1047; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1046;
	        		this.match(SolidityParser.HexLiteralFragment);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1049; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,120, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteral() {
	    let localctx = new StringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, SolidityParser.RULE_stringLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1052; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1051;
	        		this.match(SolidityParser.StringLiteralFragment);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1054; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,121, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

SolidityParser.EOF = antlr4.Token.EOF;
SolidityParser.T__0 = 1;
SolidityParser.T__1 = 2;
SolidityParser.T__2 = 3;
SolidityParser.T__3 = 4;
SolidityParser.T__4 = 5;
SolidityParser.T__5 = 6;
SolidityParser.T__6 = 7;
SolidityParser.T__7 = 8;
SolidityParser.T__8 = 9;
SolidityParser.T__9 = 10;
SolidityParser.T__10 = 11;
SolidityParser.T__11 = 12;
SolidityParser.T__12 = 13;
SolidityParser.T__13 = 14;
SolidityParser.T__14 = 15;
SolidityParser.T__15 = 16;
SolidityParser.T__16 = 17;
SolidityParser.T__17 = 18;
SolidityParser.T__18 = 19;
SolidityParser.T__19 = 20;
SolidityParser.T__20 = 21;
SolidityParser.T__21 = 22;
SolidityParser.T__22 = 23;
SolidityParser.T__23 = 24;
SolidityParser.T__24 = 25;
SolidityParser.T__25 = 26;
SolidityParser.T__26 = 27;
SolidityParser.T__27 = 28;
SolidityParser.T__28 = 29;
SolidityParser.T__29 = 30;
SolidityParser.T__30 = 31;
SolidityParser.T__31 = 32;
SolidityParser.T__32 = 33;
SolidityParser.T__33 = 34;
SolidityParser.T__34 = 35;
SolidityParser.T__35 = 36;
SolidityParser.T__36 = 37;
SolidityParser.T__37 = 38;
SolidityParser.T__38 = 39;
SolidityParser.T__39 = 40;
SolidityParser.T__40 = 41;
SolidityParser.T__41 = 42;
SolidityParser.T__42 = 43;
SolidityParser.T__43 = 44;
SolidityParser.T__44 = 45;
SolidityParser.T__45 = 46;
SolidityParser.T__46 = 47;
SolidityParser.T__47 = 48;
SolidityParser.T__48 = 49;
SolidityParser.T__49 = 50;
SolidityParser.T__50 = 51;
SolidityParser.T__51 = 52;
SolidityParser.T__52 = 53;
SolidityParser.T__53 = 54;
SolidityParser.T__54 = 55;
SolidityParser.T__55 = 56;
SolidityParser.T__56 = 57;
SolidityParser.T__57 = 58;
SolidityParser.T__58 = 59;
SolidityParser.T__59 = 60;
SolidityParser.T__60 = 61;
SolidityParser.T__61 = 62;
SolidityParser.T__62 = 63;
SolidityParser.T__63 = 64;
SolidityParser.T__64 = 65;
SolidityParser.T__65 = 66;
SolidityParser.T__66 = 67;
SolidityParser.T__67 = 68;
SolidityParser.T__68 = 69;
SolidityParser.T__69 = 70;
SolidityParser.T__70 = 71;
SolidityParser.T__71 = 72;
SolidityParser.T__72 = 73;
SolidityParser.T__73 = 74;
SolidityParser.T__74 = 75;
SolidityParser.T__75 = 76;
SolidityParser.T__76 = 77;
SolidityParser.T__77 = 78;
SolidityParser.T__78 = 79;
SolidityParser.T__79 = 80;
SolidityParser.T__80 = 81;
SolidityParser.T__81 = 82;
SolidityParser.T__82 = 83;
SolidityParser.T__83 = 84;
SolidityParser.T__84 = 85;
SolidityParser.T__85 = 86;
SolidityParser.T__86 = 87;
SolidityParser.T__87 = 88;
SolidityParser.T__88 = 89;
SolidityParser.T__89 = 90;
SolidityParser.T__90 = 91;
SolidityParser.T__91 = 92;
SolidityParser.Int = 93;
SolidityParser.Uint = 94;
SolidityParser.Byte = 95;
SolidityParser.Fixed = 96;
SolidityParser.Ufixed = 97;
SolidityParser.BooleanLiteral = 98;
SolidityParser.DecimalNumber = 99;
SolidityParser.HexNumber = 100;
SolidityParser.NumberUnit = 101;
SolidityParser.HexLiteralFragment = 102;
SolidityParser.ReservedKeyword = 103;
SolidityParser.AnonymousKeyword = 104;
SolidityParser.BreakKeyword = 105;
SolidityParser.ConstantKeyword = 106;
SolidityParser.ImmutableKeyword = 107;
SolidityParser.ContinueKeyword = 108;
SolidityParser.LeaveKeyword = 109;
SolidityParser.ExternalKeyword = 110;
SolidityParser.IndexedKeyword = 111;
SolidityParser.InternalKeyword = 112;
SolidityParser.PayableKeyword = 113;
SolidityParser.PrivateKeyword = 114;
SolidityParser.PublicKeyword = 115;
SolidityParser.VirtualKeyword = 116;
SolidityParser.PureKeyword = 117;
SolidityParser.TypeKeyword = 118;
SolidityParser.ViewKeyword = 119;
SolidityParser.ConstructorKeyword = 120;
SolidityParser.FallbackKeyword = 121;
SolidityParser.ReceiveKeyword = 122;
SolidityParser.Identifier = 123;
SolidityParser.StringLiteralFragment = 124;
SolidityParser.VersionLiteral = 125;
SolidityParser.WS = 126;
SolidityParser.COMMENT = 127;
SolidityParser.LINE_COMMENT = 128;

SolidityParser.RULE_sourceUnit = 0;
SolidityParser.RULE_pragmaDirective = 1;
SolidityParser.RULE_pragmaName = 2;
SolidityParser.RULE_pragmaValue = 3;
SolidityParser.RULE_version = 4;
SolidityParser.RULE_versionConstraint = 5;
SolidityParser.RULE_versionOperator = 6;
SolidityParser.RULE_importDirective = 7;
SolidityParser.RULE_importDeclaration = 8;
SolidityParser.RULE_contractDefinition = 9;
SolidityParser.RULE_inheritanceSpecifier = 10;
SolidityParser.RULE_contractPart = 11;
SolidityParser.RULE_stateVariableDeclaration = 12;
SolidityParser.RULE_overrideSpecifier = 13;
SolidityParser.RULE_usingForDeclaration = 14;
SolidityParser.RULE_structDefinition = 15;
SolidityParser.RULE_modifierDefinition = 16;
SolidityParser.RULE_functionDefinition = 17;
SolidityParser.RULE_functionDescriptor = 18;
SolidityParser.RULE_returnParameters = 19;
SolidityParser.RULE_modifierList = 20;
SolidityParser.RULE_modifierInvocation = 21;
SolidityParser.RULE_eventDefinition = 22;
SolidityParser.RULE_enumDefinition = 23;
SolidityParser.RULE_enumValue = 24;
SolidityParser.RULE_parameterList = 25;
SolidityParser.RULE_parameter = 26;
SolidityParser.RULE_eventParameterList = 27;
SolidityParser.RULE_eventParameter = 28;
SolidityParser.RULE_variableDeclaration = 29;
SolidityParser.RULE_typeName = 30;
SolidityParser.RULE_userDefinedTypeName = 31;
SolidityParser.RULE_mapping = 32;
SolidityParser.RULE_functionTypeName = 33;
SolidityParser.RULE_storageLocation = 34;
SolidityParser.RULE_stateMutability = 35;
SolidityParser.RULE_block = 36;
SolidityParser.RULE_statement = 37;
SolidityParser.RULE_expressionStatement = 38;
SolidityParser.RULE_ifStatement = 39;
SolidityParser.RULE_tryStatement = 40;
SolidityParser.RULE_catchClause = 41;
SolidityParser.RULE_whileStatement = 42;
SolidityParser.RULE_forStatement = 43;
SolidityParser.RULE_simpleStatement = 44;
SolidityParser.RULE_inlineAssemblyStatement = 45;
SolidityParser.RULE_doWhileStatement = 46;
SolidityParser.RULE_continueStatement = 47;
SolidityParser.RULE_breakStatement = 48;
SolidityParser.RULE_returnStatement = 49;
SolidityParser.RULE_throwStatement = 50;
SolidityParser.RULE_emitStatement = 51;
SolidityParser.RULE_variableDeclarationStatement = 52;
SolidityParser.RULE_variableDeclarationList = 53;
SolidityParser.RULE_identifierList = 54;
SolidityParser.RULE_elementaryTypeName = 55;
SolidityParser.RULE_expression = 56;
SolidityParser.RULE_primaryExpression = 57;
SolidityParser.RULE_expressionList = 58;
SolidityParser.RULE_nameValueList = 59;
SolidityParser.RULE_nameValue = 60;
SolidityParser.RULE_functionCallArguments = 61;
SolidityParser.RULE_functionCall = 62;
SolidityParser.RULE_tupleExpression = 63;
SolidityParser.RULE_typeNameExpression = 64;
SolidityParser.RULE_assemblyItem = 65;
SolidityParser.RULE_assemblyBlock = 66;
SolidityParser.RULE_assemblyExpression = 67;
SolidityParser.RULE_assemblyCall = 68;
SolidityParser.RULE_assemblyLocalDefinition = 69;
SolidityParser.RULE_assemblyAssignment = 70;
SolidityParser.RULE_assemblyIdentifierList = 71;
SolidityParser.RULE_assemblyStackAssignment = 72;
SolidityParser.RULE_labelDefinition = 73;
SolidityParser.RULE_assemblySwitch = 74;
SolidityParser.RULE_assemblyCase = 75;
SolidityParser.RULE_assemblyFunctionDefinition = 76;
SolidityParser.RULE_assemblyFunctionReturns = 77;
SolidityParser.RULE_assemblyFor = 78;
SolidityParser.RULE_assemblyIf = 79;
SolidityParser.RULE_assemblyLiteral = 80;
SolidityParser.RULE_assemblyTypedVariableList = 81;
SolidityParser.RULE_assemblyType = 82;
SolidityParser.RULE_subAssembly = 83;
SolidityParser.RULE_numberLiteral = 84;
SolidityParser.RULE_identifier = 85;
SolidityParser.RULE_hexLiteral = 86;
SolidityParser.RULE_stringLiteral = 87;

class SourceUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_sourceUnit;
    }

	EOF() {
	    return this.getToken(SolidityParser.EOF, 0);
	};

	pragmaDirective = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PragmaDirectiveContext);
	    } else {
	        return this.getTypedRuleContext(PragmaDirectiveContext,i);
	    }
	};

	importDirective = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportDirectiveContext);
	    } else {
	        return this.getTypedRuleContext(ImportDirectiveContext,i);
	    }
	};

	structDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StructDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(StructDefinitionContext,i);
	    }
	};

	enumDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(EnumDefinitionContext,i);
	    }
	};

	contractDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ContractDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(ContractDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterSourceUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitSourceUnit(this);
		}
	}


}



class PragmaDirectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_pragmaDirective;
    }

	pragmaName() {
	    return this.getTypedRuleContext(PragmaNameContext,0);
	};

	pragmaValue() {
	    return this.getTypedRuleContext(PragmaValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterPragmaDirective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitPragmaDirective(this);
		}
	}


}



class PragmaNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_pragmaName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterPragmaName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitPragmaName(this);
		}
	}


}



class PragmaValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_pragmaValue;
    }

	version() {
	    return this.getTypedRuleContext(VersionContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterPragmaValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitPragmaValue(this);
		}
	}


}



class VersionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_version;
    }

	versionConstraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VersionConstraintContext);
	    } else {
	        return this.getTypedRuleContext(VersionConstraintContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterVersion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitVersion(this);
		}
	}


}



class VersionConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_versionConstraint;
    }

	VersionLiteral() {
	    return this.getToken(SolidityParser.VersionLiteral, 0);
	};

	versionOperator() {
	    return this.getTypedRuleContext(VersionOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterVersionConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitVersionConstraint(this);
		}
	}


}



class VersionOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_versionOperator;
    }


	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterVersionOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitVersionOperator(this);
		}
	}


}



class ImportDirectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_importDirective;
    }

	StringLiteralFragment() {
	    return this.getToken(SolidityParser.StringLiteralFragment, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	importDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ImportDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterImportDirective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitImportDirective(this);
		}
	}


}



class ImportDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_importDeclaration;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterImportDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitImportDeclaration(this);
		}
	}


}



class ContractDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_contractDefinition;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	inheritanceSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InheritanceSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(InheritanceSpecifierContext,i);
	    }
	};

	contractPart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ContractPartContext);
	    } else {
	        return this.getTypedRuleContext(ContractPartContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterContractDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitContractDefinition(this);
		}
	}


}



class InheritanceSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_inheritanceSpecifier;
    }

	userDefinedTypeName() {
	    return this.getTypedRuleContext(UserDefinedTypeNameContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterInheritanceSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitInheritanceSpecifier(this);
		}
	}


}



class ContractPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_contractPart;
    }

	stateVariableDeclaration() {
	    return this.getTypedRuleContext(StateVariableDeclarationContext,0);
	};

	usingForDeclaration() {
	    return this.getTypedRuleContext(UsingForDeclarationContext,0);
	};

	structDefinition() {
	    return this.getTypedRuleContext(StructDefinitionContext,0);
	};

	modifierDefinition() {
	    return this.getTypedRuleContext(ModifierDefinitionContext,0);
	};

	functionDefinition() {
	    return this.getTypedRuleContext(FunctionDefinitionContext,0);
	};

	eventDefinition() {
	    return this.getTypedRuleContext(EventDefinitionContext,0);
	};

	enumDefinition() {
	    return this.getTypedRuleContext(EnumDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterContractPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitContractPart(this);
		}
	}


}



class StateVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_stateVariableDeclaration;
    }

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	PublicKeyword = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.PublicKeyword);
	    } else {
	        return this.getToken(SolidityParser.PublicKeyword, i);
	    }
	};


	InternalKeyword = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.InternalKeyword);
	    } else {
	        return this.getToken(SolidityParser.InternalKeyword, i);
	    }
	};


	PrivateKeyword = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.PrivateKeyword);
	    } else {
	        return this.getToken(SolidityParser.PrivateKeyword, i);
	    }
	};


	ConstantKeyword = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.ConstantKeyword);
	    } else {
	        return this.getToken(SolidityParser.ConstantKeyword, i);
	    }
	};


	ImmutableKeyword = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.ImmutableKeyword);
	    } else {
	        return this.getToken(SolidityParser.ImmutableKeyword, i);
	    }
	};


	overrideSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OverrideSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(OverrideSpecifierContext,i);
	    }
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterStateVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitStateVariableDeclaration(this);
		}
	}


}



class OverrideSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_overrideSpecifier;
    }

	userDefinedTypeName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserDefinedTypeNameContext);
	    } else {
	        return this.getTypedRuleContext(UserDefinedTypeNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterOverrideSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitOverrideSpecifier(this);
		}
	}


}



class UsingForDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_usingForDeclaration;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterUsingForDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitUsingForDeclaration(this);
		}
	}


}



class StructDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_structDefinition;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	variableDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterStructDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitStructDefinition(this);
		}
	}


}



class ModifierDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_modifierDefinition;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	parameterList() {
	    return this.getTypedRuleContext(ParameterListContext,0);
	};

	VirtualKeyword = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.VirtualKeyword);
	    } else {
	        return this.getToken(SolidityParser.VirtualKeyword, i);
	    }
	};


	overrideSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OverrideSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(OverrideSpecifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterModifierDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitModifierDefinition(this);
		}
	}


}



class FunctionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_functionDefinition;
    }

	functionDescriptor() {
	    return this.getTypedRuleContext(FunctionDescriptorContext,0);
	};

	parameterList() {
	    return this.getTypedRuleContext(ParameterListContext,0);
	};

	modifierList() {
	    return this.getTypedRuleContext(ModifierListContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	returnParameters() {
	    return this.getTypedRuleContext(ReturnParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterFunctionDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitFunctionDefinition(this);
		}
	}


}



class FunctionDescriptorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_functionDescriptor;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ReceiveKeyword() {
	    return this.getToken(SolidityParser.ReceiveKeyword, 0);
	};

	FallbackKeyword() {
	    return this.getToken(SolidityParser.FallbackKeyword, 0);
	};

	ConstructorKeyword() {
	    return this.getToken(SolidityParser.ConstructorKeyword, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterFunctionDescriptor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitFunctionDescriptor(this);
		}
	}


}



class ReturnParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_returnParameters;
    }

	parameterList() {
	    return this.getTypedRuleContext(ParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterReturnParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitReturnParameters(this);
		}
	}


}



class ModifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_modifierList;
    }

	modifierInvocation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModifierInvocationContext);
	    } else {
	        return this.getTypedRuleContext(ModifierInvocationContext,i);
	    }
	};

	stateMutability = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StateMutabilityContext);
	    } else {
	        return this.getTypedRuleContext(StateMutabilityContext,i);
	    }
	};

	ExternalKeyword = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.ExternalKeyword);
	    } else {
	        return this.getToken(SolidityParser.ExternalKeyword, i);
	    }
	};


	PublicKeyword = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.PublicKeyword);
	    } else {
	        return this.getToken(SolidityParser.PublicKeyword, i);
	    }
	};


	InternalKeyword = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.InternalKeyword);
	    } else {
	        return this.getToken(SolidityParser.InternalKeyword, i);
	    }
	};


	PrivateKeyword = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.PrivateKeyword);
	    } else {
	        return this.getToken(SolidityParser.PrivateKeyword, i);
	    }
	};


	VirtualKeyword = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.VirtualKeyword);
	    } else {
	        return this.getToken(SolidityParser.VirtualKeyword, i);
	    }
	};


	overrideSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OverrideSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(OverrideSpecifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterModifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitModifierList(this);
		}
	}


}



class ModifierInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_modifierInvocation;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterModifierInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitModifierInvocation(this);
		}
	}


}



class EventDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_eventDefinition;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	eventParameterList() {
	    return this.getTypedRuleContext(EventParameterListContext,0);
	};

	AnonymousKeyword() {
	    return this.getToken(SolidityParser.AnonymousKeyword, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterEventDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitEventDefinition(this);
		}
	}


}



class EnumDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_enumDefinition;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enumValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumValueContext);
	    } else {
	        return this.getTypedRuleContext(EnumValueContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterEnumDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitEnumDefinition(this);
		}
	}


}



class EnumValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_enumValue;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterEnumValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitEnumValue(this);
		}
	}


}



class ParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_parameterList;
    }

	parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterContext);
	    } else {
	        return this.getTypedRuleContext(ParameterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitParameterList(this);
		}
	}


}



class ParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_parameter;
    }

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	storageLocation() {
	    return this.getTypedRuleContext(StorageLocationContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitParameter(this);
		}
	}


}



class EventParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_eventParameterList;
    }

	eventParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EventParameterContext);
	    } else {
	        return this.getTypedRuleContext(EventParameterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterEventParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitEventParameterList(this);
		}
	}


}



class EventParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_eventParameter;
    }

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	IndexedKeyword() {
	    return this.getToken(SolidityParser.IndexedKeyword, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterEventParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitEventParameter(this);
		}
	}


}



class VariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_variableDeclaration;
    }

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	storageLocation() {
	    return this.getTypedRuleContext(StorageLocationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitVariableDeclaration(this);
		}
	}


}



class TypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_typeName;
    }

	elementaryTypeName() {
	    return this.getTypedRuleContext(ElementaryTypeNameContext,0);
	};

	userDefinedTypeName() {
	    return this.getTypedRuleContext(UserDefinedTypeNameContext,0);
	};

	mapping() {
	    return this.getTypedRuleContext(MappingContext,0);
	};

	functionTypeName() {
	    return this.getTypedRuleContext(FunctionTypeNameContext,0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitTypeName(this);
		}
	}


}



class UserDefinedTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_userDefinedTypeName;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterUserDefinedTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitUserDefinedTypeName(this);
		}
	}


}



class MappingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_mapping;
    }

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	elementaryTypeName() {
	    return this.getTypedRuleContext(ElementaryTypeNameContext,0);
	};

	userDefinedTypeName() {
	    return this.getTypedRuleContext(UserDefinedTypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterMapping(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitMapping(this);
		}
	}


}



class FunctionTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_functionTypeName;
    }

	parameterList() {
	    return this.getTypedRuleContext(ParameterListContext,0);
	};

	modifierList() {
	    return this.getTypedRuleContext(ModifierListContext,0);
	};

	returnParameters() {
	    return this.getTypedRuleContext(ReturnParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterFunctionTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitFunctionTypeName(this);
		}
	}


}



class StorageLocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_storageLocation;
    }


	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterStorageLocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitStorageLocation(this);
		}
	}


}



class StateMutabilityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_stateMutability;
    }

	PureKeyword() {
	    return this.getToken(SolidityParser.PureKeyword, 0);
	};

	ConstantKeyword() {
	    return this.getToken(SolidityParser.ConstantKeyword, 0);
	};

	ViewKeyword() {
	    return this.getToken(SolidityParser.ViewKeyword, 0);
	};

	PayableKeyword() {
	    return this.getToken(SolidityParser.PayableKeyword, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterStateMutability(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitStateMutability(this);
		}
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_block;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitBlock(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_statement;
    }

	ifStatement() {
	    return this.getTypedRuleContext(IfStatementContext,0);
	};

	tryStatement() {
	    return this.getTypedRuleContext(TryStatementContext,0);
	};

	whileStatement() {
	    return this.getTypedRuleContext(WhileStatementContext,0);
	};

	forStatement() {
	    return this.getTypedRuleContext(ForStatementContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	inlineAssemblyStatement() {
	    return this.getTypedRuleContext(InlineAssemblyStatementContext,0);
	};

	doWhileStatement() {
	    return this.getTypedRuleContext(DoWhileStatementContext,0);
	};

	continueStatement() {
	    return this.getTypedRuleContext(ContinueStatementContext,0);
	};

	breakStatement() {
	    return this.getTypedRuleContext(BreakStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	throwStatement() {
	    return this.getTypedRuleContext(ThrowStatementContext,0);
	};

	emitStatement() {
	    return this.getTypedRuleContext(EmitStatementContext,0);
	};

	simpleStatement() {
	    return this.getTypedRuleContext(SimpleStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitStatement(this);
		}
	}


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_expressionStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterExpressionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitExpressionStatement(this);
		}
	}


}



class IfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_ifStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitIfStatement(this);
		}
	}


}



class TryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_tryStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	returnParameters() {
	    return this.getTypedRuleContext(ReturnParametersContext,0);
	};

	catchClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CatchClauseContext);
	    } else {
	        return this.getTypedRuleContext(CatchClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterTryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitTryStatement(this);
		}
	}


}



class CatchClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_catchClause;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	parameterList() {
	    return this.getTypedRuleContext(ParameterListContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterCatchClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitCatchClause(this);
		}
	}


}



class WhileStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_whileStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitWhileStatement(this);
		}
	}


}



class ForStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_forStatement;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	simpleStatement() {
	    return this.getTypedRuleContext(SimpleStatementContext,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitForStatement(this);
		}
	}


}



class SimpleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_simpleStatement;
    }

	variableDeclarationStatement() {
	    return this.getTypedRuleContext(VariableDeclarationStatementContext,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterSimpleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitSimpleStatement(this);
		}
	}


}



class InlineAssemblyStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_inlineAssemblyStatement;
    }

	assemblyBlock() {
	    return this.getTypedRuleContext(AssemblyBlockContext,0);
	};

	StringLiteralFragment() {
	    return this.getToken(SolidityParser.StringLiteralFragment, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterInlineAssemblyStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitInlineAssemblyStatement(this);
		}
	}


}



class DoWhileStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_doWhileStatement;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterDoWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitDoWhileStatement(this);
		}
	}


}



class ContinueStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_continueStatement;
    }

	ContinueKeyword() {
	    return this.getToken(SolidityParser.ContinueKeyword, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterContinueStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitContinueStatement(this);
		}
	}


}



class BreakStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_breakStatement;
    }

	BreakKeyword() {
	    return this.getToken(SolidityParser.BreakKeyword, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterBreakStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitBreakStatement(this);
		}
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_returnStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitReturnStatement(this);
		}
	}


}



class ThrowStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_throwStatement;
    }


	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterThrowStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitThrowStatement(this);
		}
	}


}



class EmitStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_emitStatement;
    }

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterEmitStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitEmitStatement(this);
		}
	}


}



class VariableDeclarationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_variableDeclarationStatement;
    }

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	variableDeclaration() {
	    return this.getTypedRuleContext(VariableDeclarationContext,0);
	};

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterVariableDeclarationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitVariableDeclarationStatement(this);
		}
	}


}



class VariableDeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_variableDeclarationList;
    }

	variableDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterVariableDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitVariableDeclarationList(this);
		}
	}


}



class IdentifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_identifierList;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterIdentifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitIdentifierList(this);
		}
	}


}



class ElementaryTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_elementaryTypeName;
    }

	PayableKeyword() {
	    return this.getToken(SolidityParser.PayableKeyword, 0);
	};

	Int() {
	    return this.getToken(SolidityParser.Int, 0);
	};

	Uint() {
	    return this.getToken(SolidityParser.Uint, 0);
	};

	Byte() {
	    return this.getToken(SolidityParser.Byte, 0);
	};

	Fixed() {
	    return this.getToken(SolidityParser.Fixed, 0);
	};

	Ufixed() {
	    return this.getToken(SolidityParser.Ufixed, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterElementaryTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitElementaryTypeName(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_expression;
    }

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	PayableKeyword() {
	    return this.getToken(SolidityParser.PayableKeyword, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	nameValueList() {
	    return this.getTypedRuleContext(NameValueListContext,0);
	};

	functionCallArguments() {
	    return this.getTypedRuleContext(FunctionCallArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitExpression(this);
		}
	}


}



class PrimaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_primaryExpression;
    }

	BooleanLiteral() {
	    return this.getToken(SolidityParser.BooleanLiteral, 0);
	};

	numberLiteral() {
	    return this.getTypedRuleContext(NumberLiteralContext,0);
	};

	hexLiteral() {
	    return this.getTypedRuleContext(HexLiteralContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	TypeKeyword() {
	    return this.getToken(SolidityParser.TypeKeyword, 0);
	};

	tupleExpression() {
	    return this.getTypedRuleContext(TupleExpressionContext,0);
	};

	typeNameExpression() {
	    return this.getTypedRuleContext(TypeNameExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterPrimaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitPrimaryExpression(this);
		}
	}


}



class ExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_expressionList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitExpressionList(this);
		}
	}


}



class NameValueListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_nameValueList;
    }

	nameValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameValueContext);
	    } else {
	        return this.getTypedRuleContext(NameValueContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterNameValueList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitNameValueList(this);
		}
	}


}



class NameValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_nameValue;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterNameValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitNameValue(this);
		}
	}


}



class FunctionCallArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_functionCallArguments;
    }

	nameValueList() {
	    return this.getTypedRuleContext(NameValueListContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterFunctionCallArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitFunctionCallArguments(this);
		}
	}


}



class FunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_functionCall;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	functionCallArguments() {
	    return this.getTypedRuleContext(FunctionCallArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitFunctionCall(this);
		}
	}


}



class TupleExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_tupleExpression;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterTupleExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitTupleExpression(this);
		}
	}


}



class TypeNameExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_typeNameExpression;
    }

	elementaryTypeName() {
	    return this.getTypedRuleContext(ElementaryTypeNameContext,0);
	};

	userDefinedTypeName() {
	    return this.getTypedRuleContext(UserDefinedTypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterTypeNameExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitTypeNameExpression(this);
		}
	}


}



class AssemblyItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyItem;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	assemblyBlock() {
	    return this.getTypedRuleContext(AssemblyBlockContext,0);
	};

	assemblyExpression() {
	    return this.getTypedRuleContext(AssemblyExpressionContext,0);
	};

	assemblyLocalDefinition() {
	    return this.getTypedRuleContext(AssemblyLocalDefinitionContext,0);
	};

	assemblyAssignment() {
	    return this.getTypedRuleContext(AssemblyAssignmentContext,0);
	};

	assemblyStackAssignment() {
	    return this.getTypedRuleContext(AssemblyStackAssignmentContext,0);
	};

	labelDefinition() {
	    return this.getTypedRuleContext(LabelDefinitionContext,0);
	};

	assemblySwitch() {
	    return this.getTypedRuleContext(AssemblySwitchContext,0);
	};

	assemblyFunctionDefinition() {
	    return this.getTypedRuleContext(AssemblyFunctionDefinitionContext,0);
	};

	assemblyFor() {
	    return this.getTypedRuleContext(AssemblyForContext,0);
	};

	assemblyIf() {
	    return this.getTypedRuleContext(AssemblyIfContext,0);
	};

	BreakKeyword() {
	    return this.getToken(SolidityParser.BreakKeyword, 0);
	};

	ContinueKeyword() {
	    return this.getToken(SolidityParser.ContinueKeyword, 0);
	};

	LeaveKeyword() {
	    return this.getToken(SolidityParser.LeaveKeyword, 0);
	};

	subAssembly() {
	    return this.getTypedRuleContext(SubAssemblyContext,0);
	};

	numberLiteral() {
	    return this.getTypedRuleContext(NumberLiteralContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	hexLiteral() {
	    return this.getTypedRuleContext(HexLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyItem(this);
		}
	}


}



class AssemblyBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyBlock;
    }

	assemblyItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssemblyItemContext);
	    } else {
	        return this.getTypedRuleContext(AssemblyItemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyBlock(this);
		}
	}


}



class AssemblyExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyExpression;
    }

	assemblyCall() {
	    return this.getTypedRuleContext(AssemblyCallContext,0);
	};

	assemblyLiteral() {
	    return this.getTypedRuleContext(AssemblyLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyExpression(this);
		}
	}


}



class AssemblyCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyCall;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	assemblyExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssemblyExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AssemblyExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyCall(this);
		}
	}


}



class AssemblyLocalDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyLocalDefinition;
    }

	assemblyIdentifierList() {
	    return this.getTypedRuleContext(AssemblyIdentifierListContext,0);
	};

	assemblyExpression() {
	    return this.getTypedRuleContext(AssemblyExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyLocalDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyLocalDefinition(this);
		}
	}


}



class AssemblyAssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyAssignment;
    }

	assemblyIdentifierList() {
	    return this.getTypedRuleContext(AssemblyIdentifierListContext,0);
	};

	assemblyExpression() {
	    return this.getTypedRuleContext(AssemblyExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyAssignment(this);
		}
	}


}



class AssemblyIdentifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyIdentifierList;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyIdentifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyIdentifierList(this);
		}
	}


}



class AssemblyStackAssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyStackAssignment;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyStackAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyStackAssignment(this);
		}
	}


}



class LabelDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_labelDefinition;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterLabelDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitLabelDefinition(this);
		}
	}


}



class AssemblySwitchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblySwitch;
    }

	assemblyExpression() {
	    return this.getTypedRuleContext(AssemblyExpressionContext,0);
	};

	assemblyCase = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssemblyCaseContext);
	    } else {
	        return this.getTypedRuleContext(AssemblyCaseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblySwitch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblySwitch(this);
		}
	}


}



class AssemblyCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyCase;
    }

	assemblyLiteral() {
	    return this.getTypedRuleContext(AssemblyLiteralContext,0);
	};

	assemblyBlock() {
	    return this.getTypedRuleContext(AssemblyBlockContext,0);
	};

	assemblyType() {
	    return this.getTypedRuleContext(AssemblyTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyCase(this);
		}
	}


}



class AssemblyFunctionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyFunctionDefinition;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	assemblyBlock() {
	    return this.getTypedRuleContext(AssemblyBlockContext,0);
	};

	assemblyTypedVariableList() {
	    return this.getTypedRuleContext(AssemblyTypedVariableListContext,0);
	};

	assemblyFunctionReturns() {
	    return this.getTypedRuleContext(AssemblyFunctionReturnsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyFunctionDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyFunctionDefinition(this);
		}
	}


}



class AssemblyFunctionReturnsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyFunctionReturns;
    }

	assemblyTypedVariableList() {
	    return this.getTypedRuleContext(AssemblyTypedVariableListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyFunctionReturns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyFunctionReturns(this);
		}
	}


}



class AssemblyForContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyFor;
    }

	assemblyBlock = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssemblyBlockContext);
	    } else {
	        return this.getTypedRuleContext(AssemblyBlockContext,i);
	    }
	};

	assemblyExpression() {
	    return this.getTypedRuleContext(AssemblyExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyFor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyFor(this);
		}
	}


}



class AssemblyIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyIf;
    }

	assemblyExpression() {
	    return this.getTypedRuleContext(AssemblyExpressionContext,0);
	};

	assemblyBlock() {
	    return this.getTypedRuleContext(AssemblyBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyIf(this);
		}
	}


}



class AssemblyLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyLiteral;
    }

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	DecimalNumber() {
	    return this.getToken(SolidityParser.DecimalNumber, 0);
	};

	HexNumber() {
	    return this.getToken(SolidityParser.HexNumber, 0);
	};

	hexLiteral() {
	    return this.getTypedRuleContext(HexLiteralContext,0);
	};

	BooleanLiteral() {
	    return this.getToken(SolidityParser.BooleanLiteral, 0);
	};

	assemblyType() {
	    return this.getTypedRuleContext(AssemblyTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyLiteral(this);
		}
	}


}



class AssemblyTypedVariableListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyTypedVariableList;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	assemblyType() {
	    return this.getTypedRuleContext(AssemblyTypeContext,0);
	};

	assemblyTypedVariableList() {
	    return this.getTypedRuleContext(AssemblyTypedVariableListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyTypedVariableList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyTypedVariableList(this);
		}
	}


}



class AssemblyTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyType;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyType(this);
		}
	}


}



class SubAssemblyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_subAssembly;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	assemblyBlock() {
	    return this.getTypedRuleContext(AssemblyBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterSubAssembly(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitSubAssembly(this);
		}
	}


}



class NumberLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_numberLiteral;
    }

	DecimalNumber() {
	    return this.getToken(SolidityParser.DecimalNumber, 0);
	};

	HexNumber() {
	    return this.getToken(SolidityParser.HexNumber, 0);
	};

	NumberUnit() {
	    return this.getToken(SolidityParser.NumberUnit, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterNumberLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitNumberLiteral(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_identifier;
    }

	Identifier() {
	    return this.getToken(SolidityParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class HexLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_hexLiteral;
    }

	HexLiteralFragment = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.HexLiteralFragment);
	    } else {
	        return this.getToken(SolidityParser.HexLiteralFragment, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterHexLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitHexLiteral(this);
		}
	}


}



class StringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_stringLiteral;
    }

	StringLiteralFragment = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.StringLiteralFragment);
	    } else {
	        return this.getToken(SolidityParser.StringLiteralFragment, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitStringLiteral(this);
		}
	}


}




SolidityParser.SourceUnitContext = SourceUnitContext; 
SolidityParser.PragmaDirectiveContext = PragmaDirectiveContext; 
SolidityParser.PragmaNameContext = PragmaNameContext; 
SolidityParser.PragmaValueContext = PragmaValueContext; 
SolidityParser.VersionContext = VersionContext; 
SolidityParser.VersionConstraintContext = VersionConstraintContext; 
SolidityParser.VersionOperatorContext = VersionOperatorContext; 
SolidityParser.ImportDirectiveContext = ImportDirectiveContext; 
SolidityParser.ImportDeclarationContext = ImportDeclarationContext; 
SolidityParser.ContractDefinitionContext = ContractDefinitionContext; 
SolidityParser.InheritanceSpecifierContext = InheritanceSpecifierContext; 
SolidityParser.ContractPartContext = ContractPartContext; 
SolidityParser.StateVariableDeclarationContext = StateVariableDeclarationContext; 
SolidityParser.OverrideSpecifierContext = OverrideSpecifierContext; 
SolidityParser.UsingForDeclarationContext = UsingForDeclarationContext; 
SolidityParser.StructDefinitionContext = StructDefinitionContext; 
SolidityParser.ModifierDefinitionContext = ModifierDefinitionContext; 
SolidityParser.FunctionDefinitionContext = FunctionDefinitionContext; 
SolidityParser.FunctionDescriptorContext = FunctionDescriptorContext; 
SolidityParser.ReturnParametersContext = ReturnParametersContext; 
SolidityParser.ModifierListContext = ModifierListContext; 
SolidityParser.ModifierInvocationContext = ModifierInvocationContext; 
SolidityParser.EventDefinitionContext = EventDefinitionContext; 
SolidityParser.EnumDefinitionContext = EnumDefinitionContext; 
SolidityParser.EnumValueContext = EnumValueContext; 
SolidityParser.ParameterListContext = ParameterListContext; 
SolidityParser.ParameterContext = ParameterContext; 
SolidityParser.EventParameterListContext = EventParameterListContext; 
SolidityParser.EventParameterContext = EventParameterContext; 
SolidityParser.VariableDeclarationContext = VariableDeclarationContext; 
SolidityParser.TypeNameContext = TypeNameContext; 
SolidityParser.UserDefinedTypeNameContext = UserDefinedTypeNameContext; 
SolidityParser.MappingContext = MappingContext; 
SolidityParser.FunctionTypeNameContext = FunctionTypeNameContext; 
SolidityParser.StorageLocationContext = StorageLocationContext; 
SolidityParser.StateMutabilityContext = StateMutabilityContext; 
SolidityParser.BlockContext = BlockContext; 
SolidityParser.StatementContext = StatementContext; 
SolidityParser.ExpressionStatementContext = ExpressionStatementContext; 
SolidityParser.IfStatementContext = IfStatementContext; 
SolidityParser.TryStatementContext = TryStatementContext; 
SolidityParser.CatchClauseContext = CatchClauseContext; 
SolidityParser.WhileStatementContext = WhileStatementContext; 
SolidityParser.ForStatementContext = ForStatementContext; 
SolidityParser.SimpleStatementContext = SimpleStatementContext; 
SolidityParser.InlineAssemblyStatementContext = InlineAssemblyStatementContext; 
SolidityParser.DoWhileStatementContext = DoWhileStatementContext; 
SolidityParser.ContinueStatementContext = ContinueStatementContext; 
SolidityParser.BreakStatementContext = BreakStatementContext; 
SolidityParser.ReturnStatementContext = ReturnStatementContext; 
SolidityParser.ThrowStatementContext = ThrowStatementContext; 
SolidityParser.EmitStatementContext = EmitStatementContext; 
SolidityParser.VariableDeclarationStatementContext = VariableDeclarationStatementContext; 
SolidityParser.VariableDeclarationListContext = VariableDeclarationListContext; 
SolidityParser.IdentifierListContext = IdentifierListContext; 
SolidityParser.ElementaryTypeNameContext = ElementaryTypeNameContext; 
SolidityParser.ExpressionContext = ExpressionContext; 
SolidityParser.PrimaryExpressionContext = PrimaryExpressionContext; 
SolidityParser.ExpressionListContext = ExpressionListContext; 
SolidityParser.NameValueListContext = NameValueListContext; 
SolidityParser.NameValueContext = NameValueContext; 
SolidityParser.FunctionCallArgumentsContext = FunctionCallArgumentsContext; 
SolidityParser.FunctionCallContext = FunctionCallContext; 
SolidityParser.TupleExpressionContext = TupleExpressionContext; 
SolidityParser.TypeNameExpressionContext = TypeNameExpressionContext; 
SolidityParser.AssemblyItemContext = AssemblyItemContext; 
SolidityParser.AssemblyBlockContext = AssemblyBlockContext; 
SolidityParser.AssemblyExpressionContext = AssemblyExpressionContext; 
SolidityParser.AssemblyCallContext = AssemblyCallContext; 
SolidityParser.AssemblyLocalDefinitionContext = AssemblyLocalDefinitionContext; 
SolidityParser.AssemblyAssignmentContext = AssemblyAssignmentContext; 
SolidityParser.AssemblyIdentifierListContext = AssemblyIdentifierListContext; 
SolidityParser.AssemblyStackAssignmentContext = AssemblyStackAssignmentContext; 
SolidityParser.LabelDefinitionContext = LabelDefinitionContext; 
SolidityParser.AssemblySwitchContext = AssemblySwitchContext; 
SolidityParser.AssemblyCaseContext = AssemblyCaseContext; 
SolidityParser.AssemblyFunctionDefinitionContext = AssemblyFunctionDefinitionContext; 
SolidityParser.AssemblyFunctionReturnsContext = AssemblyFunctionReturnsContext; 
SolidityParser.AssemblyForContext = AssemblyForContext; 
SolidityParser.AssemblyIfContext = AssemblyIfContext; 
SolidityParser.AssemblyLiteralContext = AssemblyLiteralContext; 
SolidityParser.AssemblyTypedVariableListContext = AssemblyTypedVariableListContext; 
SolidityParser.AssemblyTypeContext = AssemblyTypeContext; 
SolidityParser.SubAssemblyContext = SubAssemblyContext; 
SolidityParser.NumberLiteralContext = NumberLiteralContext; 
SolidityParser.IdentifierContext = IdentifierContext; 
SolidityParser.HexLiteralContext = HexLiteralContext; 
SolidityParser.StringLiteralContext = StringLiteralContext; 
