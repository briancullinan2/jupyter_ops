// Generated from Resources/Parsers/modelica/modelica.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import modelicaListener from './modelicaListener.js';
const serializedATN = [4,1,94,1033,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,1,
0,1,0,3,0,159,8,0,1,0,5,0,162,8,0,10,0,12,0,165,9,0,1,0,3,0,168,8,0,1,0,
1,0,1,0,5,0,173,8,0,10,0,12,0,176,9,0,1,1,3,1,179,8,1,1,1,1,1,1,1,1,2,1,
2,1,2,3,2,187,8,2,1,3,3,3,190,8,3,1,3,1,3,1,3,3,3,195,8,3,1,3,1,3,1,3,3,
3,200,8,3,1,3,1,3,1,3,1,3,3,3,206,8,3,1,3,3,3,209,8,3,1,3,1,3,3,3,213,8,
3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,224,8,4,1,4,1,4,1,4,1,4,1,4,3,
4,231,8,4,1,5,1,5,1,5,1,5,1,5,3,5,238,8,5,1,5,3,5,241,8,5,1,5,1,5,1,5,1,
5,1,5,1,5,1,5,3,5,250,8,5,1,5,3,5,253,8,5,1,5,1,5,3,5,257,8,5,1,6,1,6,1,
6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,268,8,6,10,6,12,6,271,9,6,1,6,1,6,1,6,1,7,
1,7,1,8,1,8,1,8,5,8,281,8,8,10,8,12,8,284,9,8,1,9,1,9,1,9,1,10,1,10,1,10,
1,10,1,10,1,10,1,10,5,10,296,8,10,10,10,12,10,299,9,10,1,10,1,10,3,10,303,
8,10,1,10,3,10,306,8,10,1,10,3,10,309,8,10,1,10,3,10,312,8,10,1,10,1,10,
1,10,3,10,317,8,10,1,11,1,11,1,12,1,12,1,12,3,12,324,8,12,1,12,1,12,1,12,
3,12,329,8,12,1,12,1,12,1,13,1,13,1,13,5,13,336,8,13,10,13,12,13,339,9,13,
1,14,1,14,1,14,3,14,344,8,14,1,14,3,14,347,8,14,1,14,3,14,350,8,14,1,14,
3,14,353,8,14,1,14,1,14,3,14,357,8,14,1,14,1,14,1,14,3,14,362,8,14,1,14,
1,14,1,14,3,14,367,8,14,3,14,369,8,14,3,14,371,8,14,1,15,1,15,1,15,1,15,
1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,386,8,15,1,15,1,15,1,16,
1,16,1,16,5,16,393,8,16,10,16,12,16,396,9,16,1,17,1,17,1,17,3,17,401,8,17,
1,17,3,17,404,8,17,1,18,1,18,1,18,3,18,409,8,18,1,19,1,19,1,19,3,19,414,
8,19,1,19,1,19,1,20,3,20,419,8,20,1,20,3,20,422,8,20,1,20,3,20,425,8,20,
1,21,1,21,1,22,1,22,1,22,5,22,432,8,22,10,22,12,22,435,9,22,1,23,1,23,3,
23,439,8,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,3,25,448,8,25,1,25,3,25,451,
8,25,1,26,1,26,1,26,3,26,456,8,26,1,26,1,26,1,26,1,26,3,26,462,8,26,1,27,
1,27,3,27,466,8,27,1,27,1,27,1,28,1,28,1,28,5,28,473,8,28,10,28,12,28,476,
9,28,1,29,1,29,3,29,480,8,29,1,30,3,30,483,8,30,1,30,3,30,486,8,30,1,30,
1,30,3,30,490,8,30,1,31,1,31,3,31,494,8,31,1,31,1,31,1,32,1,32,3,32,500,
8,32,1,32,3,32,503,8,32,1,32,1,32,3,32,507,8,32,1,32,3,32,510,8,32,1,33,
1,33,1,33,3,33,515,8,33,1,33,3,33,518,8,33,1,34,1,34,1,34,1,34,1,35,1,35,
1,35,1,36,1,36,1,36,1,37,3,37,531,8,37,1,37,1,37,1,37,1,37,5,37,537,8,37,
10,37,12,37,540,9,37,1,38,3,38,543,8,38,1,38,1,38,1,38,1,38,5,38,549,8,38,
10,38,12,38,552,9,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
39,3,39,565,8,39,1,39,1,39,1,40,1,40,1,40,1,40,3,40,573,8,40,1,40,1,40,1,
40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,588,8,40,1,40,
1,40,1,41,1,41,1,41,1,41,1,41,1,41,5,41,598,8,41,10,41,12,41,601,9,41,1,
41,1,41,1,41,1,41,1,41,1,41,5,41,609,8,41,10,41,12,41,612,9,41,5,41,614,
8,41,10,41,12,41,617,9,41,1,41,1,41,1,41,1,41,5,41,623,8,41,10,41,12,41,
626,9,41,3,41,628,8,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,5,42,
639,8,42,10,42,12,42,642,9,42,1,42,1,42,1,42,1,42,1,42,1,42,5,42,650,8,42,
10,42,12,42,653,9,42,5,42,655,8,42,10,42,12,42,658,9,42,1,42,1,42,1,42,1,
42,5,42,664,8,42,10,42,12,42,667,9,42,3,42,669,8,42,1,42,1,42,1,42,1,43,
1,43,1,43,1,43,1,43,1,43,5,43,680,8,43,10,43,12,43,683,9,43,1,43,1,43,1,
43,1,44,1,44,1,44,1,44,1,44,1,44,5,44,694,8,44,10,44,12,44,697,9,44,1,44,
1,44,1,44,1,45,1,45,1,45,5,45,705,8,45,10,45,12,45,708,9,45,1,46,1,46,1,
46,3,46,713,8,46,1,47,1,47,1,47,1,47,1,47,1,47,5,47,721,8,47,10,47,12,47,
724,9,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,5,48,735,8,48,10,48,
12,48,738,9,48,1,48,1,48,1,48,1,48,1,48,1,48,5,48,746,8,48,10,48,12,48,749,
9,48,5,48,751,8,48,10,48,12,48,754,9,48,1,48,1,48,1,48,1,49,1,49,1,49,1,
49,1,49,1,49,5,49,765,8,49,10,49,12,49,768,9,49,1,49,1,49,1,49,1,49,1,49,
1,49,5,49,776,8,49,10,49,12,49,779,9,49,5,49,781,8,49,10,49,12,49,784,9,
49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,
1,51,1,51,1,51,1,51,1,51,1,51,5,51,806,8,51,10,51,12,51,809,9,51,1,51,1,
51,1,51,3,51,814,8,51,1,52,1,52,1,52,1,52,1,52,3,52,821,8,52,3,52,823,8,
52,1,53,1,53,1,53,5,53,828,8,53,10,53,12,53,831,9,53,1,54,1,54,1,54,5,54,
836,8,54,10,54,12,54,839,9,54,1,55,3,55,842,8,55,1,55,1,55,1,56,1,56,1,56,
1,56,3,56,850,8,56,1,57,1,57,1,58,3,58,855,8,58,1,58,1,58,1,58,1,58,5,58,
861,8,58,10,58,12,58,864,9,58,1,59,1,59,1,60,1,60,1,60,1,60,5,60,872,8,60,
10,60,12,60,875,9,60,1,61,1,61,1,62,1,62,1,62,3,62,882,8,62,1,63,1,63,1,
63,1,63,1,63,1,63,1,63,3,63,891,8,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
1,63,1,63,1,63,5,63,903,8,63,10,63,12,63,906,9,63,1,63,1,63,1,63,1,63,1,
63,1,63,1,63,3,63,915,8,63,1,64,3,64,918,8,64,1,64,1,64,1,64,5,64,923,8,
64,10,64,12,64,926,9,64,1,65,3,65,929,8,65,1,65,1,65,3,65,933,8,65,1,65,
1,65,1,65,3,65,938,8,65,5,65,940,8,65,10,65,12,65,943,9,65,1,66,1,66,3,66,
947,8,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,3,67,956,8,67,1,67,3,67,959,
8,67,1,68,1,68,1,68,3,68,964,8,68,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,
3,70,974,8,70,1,70,1,70,1,70,3,70,979,8,70,1,71,3,71,982,8,71,1,71,1,71,
3,71,986,8,71,5,71,988,8,71,10,71,12,71,991,9,71,1,72,1,72,1,72,5,72,996,
8,72,10,72,12,72,999,9,72,1,73,1,73,1,73,1,73,5,73,1005,8,73,10,73,12,73,
1008,9,73,1,73,1,73,1,74,1,74,3,74,1014,8,74,1,75,1,75,3,75,1018,8,75,1,
76,1,76,1,76,5,76,1023,8,76,10,76,12,76,1026,9,76,3,76,1028,8,76,1,77,1,
77,1,77,1,77,0,0,78,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,0,8,1,0,15,16,
1,0,39,40,1,0,41,43,1,0,44,45,1,0,67,72,1,0,73,76,2,0,35,35,77,79,1,0,80,
81,1120,0,163,1,0,0,0,2,178,1,0,0,0,4,186,1,0,0,0,6,189,1,0,0,0,8,230,1,
0,0,0,10,256,1,0,0,0,12,258,1,0,0,0,14,275,1,0,0,0,16,277,1,0,0,0,18,285,
1,0,0,0,20,288,1,0,0,0,22,318,1,0,0,0,24,323,1,0,0,0,26,337,1,0,0,0,28,370,
1,0,0,0,30,372,1,0,0,0,32,389,1,0,0,0,34,397,1,0,0,0,36,405,1,0,0,0,38,410,
1,0,0,0,40,418,1,0,0,0,42,426,1,0,0,0,44,428,1,0,0,0,46,436,1,0,0,0,48,442,
1,0,0,0,50,445,1,0,0,0,52,461,1,0,0,0,54,463,1,0,0,0,56,469,1,0,0,0,58,479,
1,0,0,0,60,482,1,0,0,0,62,491,1,0,0,0,64,497,1,0,0,0,66,511,1,0,0,0,68,519,
1,0,0,0,70,523,1,0,0,0,72,526,1,0,0,0,74,530,1,0,0,0,76,542,1,0,0,0,78,564,
1,0,0,0,80,587,1,0,0,0,82,591,1,0,0,0,84,632,1,0,0,0,86,673,1,0,0,0,88,687,
1,0,0,0,90,701,1,0,0,0,92,709,1,0,0,0,94,714,1,0,0,0,96,728,1,0,0,0,98,758,
1,0,0,0,100,788,1,0,0,0,102,813,1,0,0,0,104,815,1,0,0,0,106,824,1,0,0,0,
108,832,1,0,0,0,110,841,1,0,0,0,112,845,1,0,0,0,114,851,1,0,0,0,116,854,
1,0,0,0,118,865,1,0,0,0,120,867,1,0,0,0,122,876,1,0,0,0,124,878,1,0,0,0,
126,914,1,0,0,0,128,917,1,0,0,0,130,928,1,0,0,0,132,944,1,0,0,0,134,958,
1,0,0,0,136,960,1,0,0,0,138,965,1,0,0,0,140,978,1,0,0,0,142,981,1,0,0,0,
144,992,1,0,0,0,146,1000,1,0,0,0,148,1013,1,0,0,0,150,1015,1,0,0,0,152,1027,
1,0,0,0,154,1029,1,0,0,0,156,158,5,1,0,0,157,159,3,128,64,0,158,157,1,0,
0,0,158,159,1,0,0,0,159,160,1,0,0,0,160,162,5,2,0,0,161,156,1,0,0,0,162,
165,1,0,0,0,163,161,1,0,0,0,163,164,1,0,0,0,164,174,1,0,0,0,165,163,1,0,
0,0,166,168,5,3,0,0,167,166,1,0,0,0,167,168,1,0,0,0,168,169,1,0,0,0,169,
170,3,2,1,0,170,171,5,2,0,0,171,173,1,0,0,0,172,167,1,0,0,0,173,176,1,0,
0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,1,1,0,0,0,176,174,1,0,0,0,177,179,
5,4,0,0,178,177,1,0,0,0,178,179,1,0,0,0,179,180,1,0,0,0,180,181,3,6,3,0,
181,182,3,4,2,0,182,3,1,0,0,0,183,187,3,8,4,0,184,187,3,10,5,0,185,187,3,
12,6,0,186,183,1,0,0,0,186,184,1,0,0,0,186,185,1,0,0,0,187,5,1,0,0,0,188,
190,5,5,0,0,189,188,1,0,0,0,189,190,1,0,0,0,190,212,1,0,0,0,191,213,5,6,
0,0,192,213,5,7,0,0,193,195,5,8,0,0,194,193,1,0,0,0,194,195,1,0,0,0,195,
196,1,0,0,0,196,213,5,9,0,0,197,213,5,10,0,0,198,200,5,11,0,0,199,198,1,
0,0,0,199,200,1,0,0,0,200,201,1,0,0,0,201,213,5,12,0,0,202,213,5,13,0,0,
203,213,5,14,0,0,204,206,7,0,0,0,205,204,1,0,0,0,205,206,1,0,0,0,206,208,
1,0,0,0,207,209,5,8,0,0,208,207,1,0,0,0,208,209,1,0,0,0,209,210,1,0,0,0,
210,213,5,17,0,0,211,213,5,8,0,0,212,191,1,0,0,0,212,192,1,0,0,0,212,194,
1,0,0,0,212,197,1,0,0,0,212,199,1,0,0,0,212,202,1,0,0,0,212,203,1,0,0,0,
212,205,1,0,0,0,212,211,1,0,0,0,213,7,1,0,0,0,214,215,5,89,0,0,215,216,3,
152,76,0,216,217,3,20,10,0,217,218,5,18,0,0,218,219,5,89,0,0,219,231,1,0,
0,0,220,221,5,19,0,0,221,223,5,89,0,0,222,224,3,54,27,0,223,222,1,0,0,0,
223,224,1,0,0,0,224,225,1,0,0,0,225,226,3,152,76,0,226,227,3,20,10,0,227,
228,5,18,0,0,228,229,5,89,0,0,229,231,1,0,0,0,230,214,1,0,0,0,230,220,1,
0,0,0,231,9,1,0,0,0,232,233,5,89,0,0,233,234,5,20,0,0,234,235,3,14,7,0,235,
237,3,128,64,0,236,238,3,146,73,0,237,236,1,0,0,0,237,238,1,0,0,0,238,240,
1,0,0,0,239,241,3,54,27,0,240,239,1,0,0,0,240,241,1,0,0,0,241,242,1,0,0,
0,242,243,3,150,75,0,243,257,1,0,0,0,244,245,5,89,0,0,245,246,5,20,0,0,246,
247,5,21,0,0,247,252,5,22,0,0,248,250,3,16,8,0,249,248,1,0,0,0,249,250,1,
0,0,0,250,253,1,0,0,0,251,253,5,23,0,0,252,249,1,0,0,0,252,251,1,0,0,0,253,
254,1,0,0,0,254,255,5,24,0,0,255,257,3,150,75,0,256,232,1,0,0,0,256,244,
1,0,0,0,257,11,1,0,0,0,258,259,5,89,0,0,259,260,5,20,0,0,260,261,5,25,0,
0,261,262,5,22,0,0,262,263,3,128,64,0,263,264,5,26,0,0,264,269,5,89,0,0,
265,266,5,26,0,0,266,268,5,89,0,0,267,265,1,0,0,0,268,271,1,0,0,0,269,267,
1,0,0,0,269,270,1,0,0,0,270,272,1,0,0,0,271,269,1,0,0,0,272,273,5,24,0,0,
273,274,3,150,75,0,274,13,1,0,0,0,275,276,3,40,20,0,276,15,1,0,0,0,277,282,
3,18,9,0,278,279,5,26,0,0,279,281,3,18,9,0,280,278,1,0,0,0,281,284,1,0,0,
0,282,280,1,0,0,0,282,283,1,0,0,0,283,17,1,0,0,0,284,282,1,0,0,0,285,286,
5,89,0,0,286,287,3,150,75,0,287,19,1,0,0,0,288,297,3,26,13,0,289,290,5,27,
0,0,290,296,3,26,13,0,291,292,5,28,0,0,292,296,3,26,13,0,293,296,3,74,37,
0,294,296,3,76,38,0,295,289,1,0,0,0,295,291,1,0,0,0,295,293,1,0,0,0,295,
294,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,311,1,0,
0,0,299,297,1,0,0,0,300,302,5,29,0,0,301,303,3,22,11,0,302,301,1,0,0,0,302,
303,1,0,0,0,303,305,1,0,0,0,304,306,3,24,12,0,305,304,1,0,0,0,305,306,1,
0,0,0,306,308,1,0,0,0,307,309,3,154,77,0,308,307,1,0,0,0,308,309,1,0,0,0,
309,310,1,0,0,0,310,312,5,2,0,0,311,300,1,0,0,0,311,312,1,0,0,0,312,316,
1,0,0,0,313,314,3,154,77,0,314,315,5,2,0,0,315,317,1,0,0,0,316,313,1,0,0,
0,316,317,1,0,0,0,317,21,1,0,0,0,318,319,5,90,0,0,319,23,1,0,0,0,320,321,
3,130,65,0,321,322,5,20,0,0,322,324,1,0,0,0,323,320,1,0,0,0,323,324,1,0,
0,0,324,325,1,0,0,0,325,326,5,89,0,0,326,328,5,22,0,0,327,329,3,144,72,0,
328,327,1,0,0,0,328,329,1,0,0,0,329,330,1,0,0,0,330,331,5,24,0,0,331,25,
1,0,0,0,332,333,3,28,14,0,333,334,5,2,0,0,334,336,1,0,0,0,335,332,1,0,0,
0,336,339,1,0,0,0,337,335,1,0,0,0,337,338,1,0,0,0,338,27,1,0,0,0,339,337,
1,0,0,0,340,371,3,30,15,0,341,371,3,34,17,0,342,344,5,30,0,0,343,342,1,0,
0,0,343,344,1,0,0,0,344,346,1,0,0,0,345,347,5,3,0,0,346,345,1,0,0,0,346,
347,1,0,0,0,347,349,1,0,0,0,348,350,5,31,0,0,349,348,1,0,0,0,349,350,1,0,
0,0,350,352,1,0,0,0,351,353,5,32,0,0,352,351,1,0,0,0,352,353,1,0,0,0,353,
368,1,0,0,0,354,357,3,2,1,0,355,357,3,38,19,0,356,354,1,0,0,0,356,355,1,
0,0,0,357,369,1,0,0,0,358,361,5,33,0,0,359,362,3,2,1,0,360,362,3,38,19,0,
361,359,1,0,0,0,361,360,1,0,0,0,362,366,1,0,0,0,363,364,3,36,18,0,364,365,
3,150,75,0,365,367,1,0,0,0,366,363,1,0,0,0,366,367,1,0,0,0,367,369,1,0,0,
0,368,356,1,0,0,0,368,358,1,0,0,0,369,371,1,0,0,0,370,340,1,0,0,0,370,341,
1,0,0,0,370,343,1,0,0,0,371,29,1,0,0,0,372,385,5,34,0,0,373,374,5,89,0,0,
374,375,5,20,0,0,375,386,3,128,64,0,376,377,3,128,64,0,377,378,5,35,0,0,
378,386,1,0,0,0,379,380,3,128,64,0,380,381,5,36,0,0,381,382,3,32,16,0,382,
383,5,37,0,0,383,386,1,0,0,0,384,386,3,128,64,0,385,373,1,0,0,0,385,376,
1,0,0,0,385,379,1,0,0,0,385,384,1,0,0,0,386,387,1,0,0,0,387,388,3,150,75,
0,388,31,1,0,0,0,389,394,5,89,0,0,390,391,5,26,0,0,391,393,5,89,0,0,392,
390,1,0,0,0,393,396,1,0,0,0,394,392,1,0,0,0,394,395,1,0,0,0,395,33,1,0,0,
0,396,394,1,0,0,0,397,398,5,19,0,0,398,400,3,128,64,0,399,401,3,54,27,0,
400,399,1,0,0,0,400,401,1,0,0,0,401,403,1,0,0,0,402,404,3,154,77,0,403,402,
1,0,0,0,403,404,1,0,0,0,404,35,1,0,0,0,405,406,5,38,0,0,406,408,3,128,64,
0,407,409,3,54,27,0,408,407,1,0,0,0,408,409,1,0,0,0,409,37,1,0,0,0,410,411,
3,40,20,0,411,413,3,42,21,0,412,414,3,146,73,0,413,412,1,0,0,0,413,414,1,
0,0,0,414,415,1,0,0,0,415,416,3,44,22,0,416,39,1,0,0,0,417,419,7,1,0,0,418,
417,1,0,0,0,418,419,1,0,0,0,419,421,1,0,0,0,420,422,7,2,0,0,421,420,1,0,
0,0,421,422,1,0,0,0,422,424,1,0,0,0,423,425,7,3,0,0,424,423,1,0,0,0,424,
425,1,0,0,0,425,41,1,0,0,0,426,427,3,128,64,0,427,43,1,0,0,0,428,433,3,46,
23,0,429,430,5,26,0,0,430,432,3,46,23,0,431,429,1,0,0,0,432,435,1,0,0,0,
433,431,1,0,0,0,433,434,1,0,0,0,434,45,1,0,0,0,435,433,1,0,0,0,436,438,3,
50,25,0,437,439,3,48,24,0,438,437,1,0,0,0,438,439,1,0,0,0,439,440,1,0,0,
0,440,441,3,150,75,0,441,47,1,0,0,0,442,443,5,46,0,0,443,444,3,102,51,0,
444,49,1,0,0,0,445,447,5,89,0,0,446,448,3,146,73,0,447,446,1,0,0,0,447,448,
1,0,0,0,448,450,1,0,0,0,449,451,3,52,26,0,450,449,1,0,0,0,450,451,1,0,0,
0,451,51,1,0,0,0,452,455,3,54,27,0,453,454,5,20,0,0,454,456,3,102,51,0,455,
453,1,0,0,0,455,456,1,0,0,0,456,462,1,0,0,0,457,458,5,20,0,0,458,462,3,102,
51,0,459,460,5,47,0,0,460,462,3,102,51,0,461,452,1,0,0,0,461,457,1,0,0,0,
461,459,1,0,0,0,462,53,1,0,0,0,463,465,5,22,0,0,464,466,3,56,28,0,465,464,
1,0,0,0,465,466,1,0,0,0,466,467,1,0,0,0,467,468,5,24,0,0,468,55,1,0,0,0,
469,474,3,58,29,0,470,471,5,26,0,0,471,473,3,58,29,0,472,470,1,0,0,0,473,
476,1,0,0,0,474,472,1,0,0,0,474,475,1,0,0,0,475,57,1,0,0,0,476,474,1,0,0,
0,477,480,3,60,30,0,478,480,3,64,32,0,479,477,1,0,0,0,479,478,1,0,0,0,480,
59,1,0,0,0,481,483,5,48,0,0,482,481,1,0,0,0,482,483,1,0,0,0,483,485,1,0,
0,0,484,486,5,3,0,0,485,484,1,0,0,0,485,486,1,0,0,0,486,489,1,0,0,0,487,
490,3,62,31,0,488,490,3,66,33,0,489,487,1,0,0,0,489,488,1,0,0,0,490,61,1,
0,0,0,491,493,3,128,64,0,492,494,3,52,26,0,493,492,1,0,0,0,493,494,1,0,0,
0,494,495,1,0,0,0,495,496,3,152,76,0,496,63,1,0,0,0,497,499,5,30,0,0,498,
500,5,48,0,0,499,498,1,0,0,0,499,500,1,0,0,0,500,502,1,0,0,0,501,503,5,3,
0,0,502,501,1,0,0,0,502,503,1,0,0,0,503,509,1,0,0,0,504,507,3,72,36,0,505,
507,3,68,34,0,506,504,1,0,0,0,506,505,1,0,0,0,507,510,1,0,0,0,508,510,3,
66,33,0,509,506,1,0,0,0,509,508,1,0,0,0,510,65,1,0,0,0,511,514,5,33,0,0,
512,515,3,72,36,0,513,515,3,68,34,0,514,512,1,0,0,0,514,513,1,0,0,0,515,
517,1,0,0,0,516,518,3,36,18,0,517,516,1,0,0,0,517,518,1,0,0,0,518,67,1,0,
0,0,519,520,3,40,20,0,520,521,3,42,21,0,521,522,3,70,35,0,522,69,1,0,0,0,
523,524,3,50,25,0,524,525,3,150,75,0,525,71,1,0,0,0,526,527,3,6,3,0,527,
528,3,10,5,0,528,73,1,0,0,0,529,531,5,49,0,0,530,529,1,0,0,0,530,531,1,0,
0,0,531,532,1,0,0,0,532,538,5,50,0,0,533,534,3,78,39,0,534,535,5,2,0,0,535,
537,1,0,0,0,536,533,1,0,0,0,537,540,1,0,0,0,538,536,1,0,0,0,538,539,1,0,
0,0,539,75,1,0,0,0,540,538,1,0,0,0,541,543,5,49,0,0,542,541,1,0,0,0,542,
543,1,0,0,0,543,544,1,0,0,0,544,550,5,51,0,0,545,546,3,80,40,0,546,547,5,
2,0,0,547,549,1,0,0,0,548,545,1,0,0,0,549,552,1,0,0,0,550,548,1,0,0,0,550,
551,1,0,0,0,551,77,1,0,0,0,552,550,1,0,0,0,553,554,3,104,52,0,554,555,5,
20,0,0,555,556,3,102,51,0,556,565,1,0,0,0,557,565,3,82,41,0,558,565,3,86,
43,0,559,565,3,100,50,0,560,565,3,96,48,0,561,562,3,128,64,0,562,563,3,132,
66,0,563,565,1,0,0,0,564,553,1,0,0,0,564,557,1,0,0,0,564,558,1,0,0,0,564,
559,1,0,0,0,564,560,1,0,0,0,564,561,1,0,0,0,565,566,1,0,0,0,566,567,3,150,
75,0,567,79,1,0,0,0,568,572,3,130,65,0,569,570,5,47,0,0,570,573,3,102,51,
0,571,573,3,132,66,0,572,569,1,0,0,0,572,571,1,0,0,0,573,588,1,0,0,0,574,
575,5,22,0,0,575,576,3,142,71,0,576,577,5,24,0,0,577,578,5,47,0,0,578,579,
3,130,65,0,579,580,3,132,66,0,580,588,1,0,0,0,581,588,5,52,0,0,582,588,5,
53,0,0,583,588,3,84,42,0,584,588,3,88,44,0,585,588,3,94,47,0,586,588,3,98,
49,0,587,568,1,0,0,0,587,574,1,0,0,0,587,581,1,0,0,0,587,582,1,0,0,0,587,
583,1,0,0,0,587,584,1,0,0,0,587,585,1,0,0,0,587,586,1,0,0,0,588,589,1,0,
0,0,589,590,3,150,75,0,590,81,1,0,0,0,591,592,5,46,0,0,592,593,3,102,51,
0,593,599,5,54,0,0,594,595,3,78,39,0,595,596,5,2,0,0,596,598,1,0,0,0,597,
594,1,0,0,0,598,601,1,0,0,0,599,597,1,0,0,0,599,600,1,0,0,0,600,615,1,0,
0,0,601,599,1,0,0,0,602,603,5,55,0,0,603,604,3,102,51,0,604,610,5,54,0,0,
605,606,3,78,39,0,606,607,5,2,0,0,607,609,1,0,0,0,608,605,1,0,0,0,609,612,
1,0,0,0,610,608,1,0,0,0,610,611,1,0,0,0,611,614,1,0,0,0,612,610,1,0,0,0,
613,602,1,0,0,0,614,617,1,0,0,0,615,613,1,0,0,0,615,616,1,0,0,0,616,627,
1,0,0,0,617,615,1,0,0,0,618,624,5,56,0,0,619,620,3,78,39,0,620,621,5,2,0,
0,621,623,1,0,0,0,622,619,1,0,0,0,623,626,1,0,0,0,624,622,1,0,0,0,624,625,
1,0,0,0,625,628,1,0,0,0,626,624,1,0,0,0,627,618,1,0,0,0,627,628,1,0,0,0,
628,629,1,0,0,0,629,630,5,18,0,0,630,631,5,46,0,0,631,83,1,0,0,0,632,633,
5,46,0,0,633,634,3,102,51,0,634,640,5,54,0,0,635,636,3,80,40,0,636,637,5,
2,0,0,637,639,1,0,0,0,638,635,1,0,0,0,639,642,1,0,0,0,640,638,1,0,0,0,640,
641,1,0,0,0,641,656,1,0,0,0,642,640,1,0,0,0,643,644,5,55,0,0,644,645,3,102,
51,0,645,651,5,54,0,0,646,647,3,80,40,0,647,648,5,2,0,0,648,650,1,0,0,0,
649,646,1,0,0,0,650,653,1,0,0,0,651,649,1,0,0,0,651,652,1,0,0,0,652,655,
1,0,0,0,653,651,1,0,0,0,654,643,1,0,0,0,655,658,1,0,0,0,656,654,1,0,0,0,
656,657,1,0,0,0,657,668,1,0,0,0,658,656,1,0,0,0,659,665,5,56,0,0,660,661,
3,80,40,0,661,662,5,2,0,0,662,664,1,0,0,0,663,660,1,0,0,0,664,667,1,0,0,
0,665,663,1,0,0,0,665,666,1,0,0,0,666,669,1,0,0,0,667,665,1,0,0,0,668,659,
1,0,0,0,668,669,1,0,0,0,669,670,1,0,0,0,670,671,5,18,0,0,671,672,5,46,0,
0,672,85,1,0,0,0,673,674,5,57,0,0,674,675,3,90,45,0,675,681,5,58,0,0,676,
677,3,78,39,0,677,678,5,2,0,0,678,680,1,0,0,0,679,676,1,0,0,0,680,683,1,
0,0,0,681,679,1,0,0,0,681,682,1,0,0,0,682,684,1,0,0,0,683,681,1,0,0,0,684,
685,5,18,0,0,685,686,5,57,0,0,686,87,1,0,0,0,687,688,5,57,0,0,688,689,3,
90,45,0,689,695,5,58,0,0,690,691,3,80,40,0,691,692,5,2,0,0,692,694,1,0,0,
0,693,690,1,0,0,0,694,697,1,0,0,0,695,693,1,0,0,0,695,696,1,0,0,0,696,698,
1,0,0,0,697,695,1,0,0,0,698,699,5,18,0,0,699,700,5,57,0,0,700,89,1,0,0,0,
701,706,3,92,46,0,702,703,5,26,0,0,703,705,3,92,46,0,704,702,1,0,0,0,705,
708,1,0,0,0,706,704,1,0,0,0,706,707,1,0,0,0,707,91,1,0,0,0,708,706,1,0,0,
0,709,712,5,89,0,0,710,711,5,59,0,0,711,713,3,102,51,0,712,710,1,0,0,0,712,
713,1,0,0,0,713,93,1,0,0,0,714,715,5,60,0,0,715,716,3,102,51,0,716,722,5,
58,0,0,717,718,3,80,40,0,718,719,5,2,0,0,719,721,1,0,0,0,720,717,1,0,0,0,
721,724,1,0,0,0,722,720,1,0,0,0,722,723,1,0,0,0,723,725,1,0,0,0,724,722,
1,0,0,0,725,726,5,18,0,0,726,727,5,60,0,0,727,95,1,0,0,0,728,729,5,61,0,
0,729,730,3,102,51,0,730,736,5,54,0,0,731,732,3,78,39,0,732,733,5,2,0,0,
733,735,1,0,0,0,734,731,1,0,0,0,735,738,1,0,0,0,736,734,1,0,0,0,736,737,
1,0,0,0,737,752,1,0,0,0,738,736,1,0,0,0,739,740,5,62,0,0,740,741,3,102,51,
0,741,747,5,54,0,0,742,743,3,78,39,0,743,744,5,2,0,0,744,746,1,0,0,0,745,
742,1,0,0,0,746,749,1,0,0,0,747,745,1,0,0,0,747,748,1,0,0,0,748,751,1,0,
0,0,749,747,1,0,0,0,750,739,1,0,0,0,751,754,1,0,0,0,752,750,1,0,0,0,752,
753,1,0,0,0,753,755,1,0,0,0,754,752,1,0,0,0,755,756,5,18,0,0,756,757,5,61,
0,0,757,97,1,0,0,0,758,759,5,61,0,0,759,760,3,102,51,0,760,766,5,54,0,0,
761,762,3,80,40,0,762,763,5,2,0,0,763,765,1,0,0,0,764,761,1,0,0,0,765,768,
1,0,0,0,766,764,1,0,0,0,766,767,1,0,0,0,767,782,1,0,0,0,768,766,1,0,0,0,
769,770,5,62,0,0,770,771,3,102,51,0,771,777,5,54,0,0,772,773,3,80,40,0,773,
774,5,2,0,0,774,776,1,0,0,0,775,772,1,0,0,0,776,779,1,0,0,0,777,775,1,0,
0,0,777,778,1,0,0,0,778,781,1,0,0,0,779,777,1,0,0,0,780,769,1,0,0,0,781,
784,1,0,0,0,782,780,1,0,0,0,782,783,1,0,0,0,783,785,1,0,0,0,784,782,1,0,
0,0,785,786,5,18,0,0,786,787,5,61,0,0,787,99,1,0,0,0,788,789,5,63,0,0,789,
790,5,22,0,0,790,791,3,130,65,0,791,792,5,26,0,0,792,793,3,130,65,0,793,
794,5,24,0,0,794,101,1,0,0,0,795,814,3,104,52,0,796,797,5,46,0,0,797,798,
3,102,51,0,798,799,5,54,0,0,799,807,3,102,51,0,800,801,5,55,0,0,801,802,
3,102,51,0,802,803,5,54,0,0,803,804,3,102,51,0,804,806,1,0,0,0,805,800,1,
0,0,0,806,809,1,0,0,0,807,805,1,0,0,0,807,808,1,0,0,0,808,810,1,0,0,0,809,
807,1,0,0,0,810,811,5,56,0,0,811,812,3,102,51,0,812,814,1,0,0,0,813,795,
1,0,0,0,813,796,1,0,0,0,814,103,1,0,0,0,815,822,3,106,53,0,816,817,5,23,
0,0,817,820,3,106,53,0,818,819,5,23,0,0,819,821,3,106,53,0,820,818,1,0,0,
0,820,821,1,0,0,0,821,823,1,0,0,0,822,816,1,0,0,0,822,823,1,0,0,0,823,105,
1,0,0,0,824,829,3,108,54,0,825,826,5,64,0,0,826,828,3,108,54,0,827,825,1,
0,0,0,828,831,1,0,0,0,829,827,1,0,0,0,829,830,1,0,0,0,830,107,1,0,0,0,831,
829,1,0,0,0,832,837,3,110,55,0,833,834,5,65,0,0,834,836,3,110,55,0,835,833,
1,0,0,0,836,839,1,0,0,0,837,835,1,0,0,0,837,838,1,0,0,0,838,109,1,0,0,0,
839,837,1,0,0,0,840,842,5,66,0,0,841,840,1,0,0,0,841,842,1,0,0,0,842,843,
1,0,0,0,843,844,3,112,56,0,844,111,1,0,0,0,845,849,3,116,58,0,846,847,3,
114,57,0,847,848,3,116,58,0,848,850,1,0,0,0,849,846,1,0,0,0,849,850,1,0,
0,0,850,113,1,0,0,0,851,852,7,4,0,0,852,115,1,0,0,0,853,855,3,118,59,0,854,
853,1,0,0,0,854,855,1,0,0,0,855,856,1,0,0,0,856,862,3,120,60,0,857,858,3,
118,59,0,858,859,3,120,60,0,859,861,1,0,0,0,860,857,1,0,0,0,861,864,1,0,
0,0,862,860,1,0,0,0,862,863,1,0,0,0,863,117,1,0,0,0,864,862,1,0,0,0,865,
866,7,5,0,0,866,119,1,0,0,0,867,873,3,124,62,0,868,869,3,122,61,0,869,870,
3,124,62,0,870,872,1,0,0,0,871,868,1,0,0,0,872,875,1,0,0,0,873,871,1,0,0,
0,873,874,1,0,0,0,874,121,1,0,0,0,875,873,1,0,0,0,876,877,7,6,0,0,877,123,
1,0,0,0,878,881,3,126,63,0,879,880,7,7,0,0,880,882,3,126,63,0,881,879,1,
0,0,0,881,882,1,0,0,0,882,125,1,0,0,0,883,915,5,91,0,0,884,915,5,90,0,0,
885,915,5,82,0,0,886,915,5,83,0,0,887,891,3,128,64,0,888,891,5,25,0,0,889,
891,5,49,0,0,890,887,1,0,0,0,890,888,1,0,0,0,890,889,1,0,0,0,891,892,1,0,
0,0,892,915,3,132,66,0,893,915,3,130,65,0,894,895,5,22,0,0,895,896,3,142,
71,0,896,897,5,24,0,0,897,915,1,0,0,0,898,899,5,84,0,0,899,904,3,144,72,
0,900,901,5,2,0,0,901,903,3,144,72,0,902,900,1,0,0,0,903,906,1,0,0,0,904,
902,1,0,0,0,904,905,1,0,0,0,905,907,1,0,0,0,906,904,1,0,0,0,907,908,5,85,
0,0,908,915,1,0,0,0,909,910,5,86,0,0,910,911,3,134,67,0,911,912,5,37,0,0,
912,915,1,0,0,0,913,915,5,18,0,0,914,883,1,0,0,0,914,884,1,0,0,0,914,885,
1,0,0,0,914,886,1,0,0,0,914,890,1,0,0,0,914,893,1,0,0,0,914,894,1,0,0,0,
914,898,1,0,0,0,914,909,1,0,0,0,914,913,1,0,0,0,915,127,1,0,0,0,916,918,
5,87,0,0,917,916,1,0,0,0,917,918,1,0,0,0,918,919,1,0,0,0,919,924,5,89,0,
0,920,921,5,87,0,0,921,923,5,89,0,0,922,920,1,0,0,0,923,926,1,0,0,0,924,
922,1,0,0,0,924,925,1,0,0,0,925,129,1,0,0,0,926,924,1,0,0,0,927,929,5,87,
0,0,928,927,1,0,0,0,928,929,1,0,0,0,929,930,1,0,0,0,930,932,5,89,0,0,931,
933,3,146,73,0,932,931,1,0,0,0,932,933,1,0,0,0,933,941,1,0,0,0,934,935,5,
87,0,0,935,937,5,89,0,0,936,938,3,146,73,0,937,936,1,0,0,0,937,938,1,0,0,
0,938,940,1,0,0,0,939,934,1,0,0,0,940,943,1,0,0,0,941,939,1,0,0,0,941,942,
1,0,0,0,942,131,1,0,0,0,943,941,1,0,0,0,944,946,5,22,0,0,945,947,3,134,67,
0,946,945,1,0,0,0,946,947,1,0,0,0,947,948,1,0,0,0,948,949,5,24,0,0,949,133,
1,0,0,0,950,955,3,140,70,0,951,952,5,26,0,0,952,956,3,134,67,0,953,954,5,
57,0,0,954,956,3,90,45,0,955,951,1,0,0,0,955,953,1,0,0,0,955,956,1,0,0,0,
956,959,1,0,0,0,957,959,3,136,68,0,958,950,1,0,0,0,958,957,1,0,0,0,959,135,
1,0,0,0,960,963,3,138,69,0,961,962,5,26,0,0,962,964,3,136,68,0,963,961,1,
0,0,0,963,964,1,0,0,0,964,137,1,0,0,0,965,966,5,89,0,0,966,967,5,20,0,0,
967,968,3,140,70,0,968,139,1,0,0,0,969,970,5,17,0,0,970,971,3,128,64,0,971,
973,5,22,0,0,972,974,3,136,68,0,973,972,1,0,0,0,973,974,1,0,0,0,974,975,
1,0,0,0,975,976,5,24,0,0,976,979,1,0,0,0,977,979,3,102,51,0,978,969,1,0,
0,0,978,977,1,0,0,0,979,141,1,0,0,0,980,982,3,102,51,0,981,980,1,0,0,0,981,
982,1,0,0,0,982,989,1,0,0,0,983,985,5,26,0,0,984,986,3,102,51,0,985,984,
1,0,0,0,985,986,1,0,0,0,986,988,1,0,0,0,987,983,1,0,0,0,988,991,1,0,0,0,
989,987,1,0,0,0,989,990,1,0,0,0,990,143,1,0,0,0,991,989,1,0,0,0,992,997,
3,102,51,0,993,994,5,26,0,0,994,996,3,102,51,0,995,993,1,0,0,0,996,999,1,
0,0,0,997,995,1,0,0,0,997,998,1,0,0,0,998,145,1,0,0,0,999,997,1,0,0,0,1000,
1001,5,84,0,0,1001,1006,3,148,74,0,1002,1003,5,26,0,0,1003,1005,3,148,74,
0,1004,1002,1,0,0,0,1005,1008,1,0,0,0,1006,1004,1,0,0,0,1006,1007,1,0,0,
0,1007,1009,1,0,0,0,1008,1006,1,0,0,0,1009,1010,5,85,0,0,1010,147,1,0,0,
0,1011,1014,5,23,0,0,1012,1014,3,102,51,0,1013,1011,1,0,0,0,1013,1012,1,
0,0,0,1014,149,1,0,0,0,1015,1017,3,152,76,0,1016,1018,3,154,77,0,1017,1016,
1,0,0,0,1017,1018,1,0,0,0,1018,151,1,0,0,0,1019,1024,5,90,0,0,1020,1021,
5,73,0,0,1021,1023,5,90,0,0,1022,1020,1,0,0,0,1023,1026,1,0,0,0,1024,1022,
1,0,0,0,1024,1025,1,0,0,0,1025,1028,1,0,0,0,1026,1024,1,0,0,0,1027,1019,
1,0,0,0,1027,1028,1,0,0,0,1028,153,1,0,0,0,1029,1030,5,88,0,0,1030,1031,
3,54,27,0,1031,155,1,0,0,0,132,158,163,167,174,178,186,189,194,199,205,208,
212,223,230,237,240,249,252,256,269,282,295,297,302,305,308,311,316,323,
328,337,343,346,349,352,356,361,366,368,370,385,394,400,403,408,413,418,
421,424,433,438,447,450,455,461,465,474,479,482,485,489,493,499,502,506,
509,514,517,530,538,542,550,564,572,587,599,610,615,624,627,640,651,656,
665,668,681,695,706,712,722,736,747,752,766,777,782,807,813,820,822,829,
837,841,849,854,862,873,881,890,904,914,917,924,928,932,937,941,946,955,
958,963,973,978,981,985,989,997,1006,1013,1017,1024,1027];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class modelicaParser extends antlr4.Parser {

    static grammarFileName = "modelica.g4";
    static literalNames = [ null, "'within'", "';'", "'final'", "'encapsulated'", 
                            "'partial'", "'class'", "'model'", "'operator'", 
                            "'record'", "'block'", "'expandable'", "'connector'", 
                            "'type'", "'package'", "'pure'", "'impure'", 
                            "'function'", "'end'", "'extends'", "'='", "'enumeration'", 
                            "'('", "':'", "')'", "'der'", "','", "'public'", 
                            "'protected'", "'external'", "'redeclare'", 
                            "'inner'", "'outer'", "'replaceable'", "'import'", 
                            "'.*'", "'.{'", "'}'", "'constrainedby'", "'flow'", 
                            "'stream'", "'discrete'", "'parameter'", "'constant'", 
                            "'input'", "'output'", "'if'", "':='", "'each'", 
                            "'initial'", "'equation'", "'algorithm'", "'break'", 
                            "'return'", "'then'", "'elseif'", "'else'", 
                            "'for'", "'loop'", "'in'", "'while'", "'when'", 
                            "'elsewhen'", "'connect'", "'or'", "'and'", 
                            "'not'", "'<'", "'<='", "'>'", "'>='", "'=='", 
                            "'<>'", "'+'", "'-'", "'.+'", "'.-'", "'*'", 
                            "'/'", "'./'", "'^'", "'.^'", "'false'", "'true'", 
                            "'['", "']'", "'{'", "'.'", "'annotation'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, "IDENT", "STRING", "UNSIGNED_NUMBER", 
                             "WS", "COMMENT", "LINE_COMMENT" ];
    static ruleNames = [ "stored_definition", "class_definition", "class_specifier", 
                         "class_prefixes", "long_class_specifier", "short_class_specifier", 
                         "der_class_specifier", "base_prefix", "enum_list", 
                         "enumeration_literal", "composition", "language_specification", 
                         "external_function_call", "element_list", "element", 
                         "import_clause", "import_list", "extends_clause", 
                         "constraining_clause", "component_clause", "type_prefix", 
                         "type_specifier", "component_list", "component_declaration", 
                         "condition_attribute", "declaration", "modification", 
                         "class_modification", "argument_list", "argument", 
                         "element_modification_or_replaceable", "element_modification", 
                         "element_redeclaration", "element_replaceable", 
                         "component_clause1", "component_declaration1", 
                         "short_class_definition", "equation_section", "algorithm_section", 
                         "equation", "statement", "if_equation", "if_statement", 
                         "for_equation", "for_statement", "for_indices", 
                         "for_index", "while_statement", "when_equation", 
                         "when_statement", "connect_clause", "expression", 
                         "simple_expression", "logical_expression", "logical_term", 
                         "logical_factor", "relation", "rel_op", "arithmetic_expression", 
                         "add_op", "term", "mul_op", "factor", "primary", 
                         "name", "component_reference", "function_call_args", 
                         "function_arguments", "named_arguments", "named_argument", 
                         "function_argument", "output_expression_list", 
                         "expression_list", "array_subscripts", "subscript_", 
                         "comment", "string_comment", "annotation" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = modelicaParser.ruleNames;
        this.literalNames = modelicaParser.literalNames;
        this.symbolicNames = modelicaParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	stored_definition() {
	    let localctx = new Stored_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, modelicaParser.RULE_stored_definition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 163;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===modelicaParser.T__0) {
	            this.state = 156;
	            this.match(modelicaParser.T__0);
	            this.state = 158;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===modelicaParser.T__86 || _la===modelicaParser.IDENT) {
	                this.state = 157;
	                this.name();
	            }

	            this.state = 160;
	            this.match(modelicaParser.T__1);
	            this.state = 165;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 174;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << modelicaParser.T__2) | (1 << modelicaParser.T__3) | (1 << modelicaParser.T__4) | (1 << modelicaParser.T__5) | (1 << modelicaParser.T__6) | (1 << modelicaParser.T__7) | (1 << modelicaParser.T__8) | (1 << modelicaParser.T__9) | (1 << modelicaParser.T__10) | (1 << modelicaParser.T__11) | (1 << modelicaParser.T__12) | (1 << modelicaParser.T__13) | (1 << modelicaParser.T__14) | (1 << modelicaParser.T__15) | (1 << modelicaParser.T__16))) !== 0)) {
	            this.state = 167;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===modelicaParser.T__2) {
	                this.state = 166;
	                this.match(modelicaParser.T__2);
	            }

	            this.state = 169;
	            this.class_definition();
	            this.state = 170;
	            this.match(modelicaParser.T__1);
	            this.state = 176;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_definition() {
	    let localctx = new Class_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, modelicaParser.RULE_class_definition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 178;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__3) {
	            this.state = 177;
	            this.match(modelicaParser.T__3);
	        }

	        this.state = 180;
	        this.class_prefixes();
	        this.state = 181;
	        this.class_specifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_specifier() {
	    let localctx = new Class_specifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, modelicaParser.RULE_class_specifier);
	    try {
	        this.state = 186;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 183;
	            this.long_class_specifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 184;
	            this.short_class_specifier();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 185;
	            this.der_class_specifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_prefixes() {
	    let localctx = new Class_prefixesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, modelicaParser.RULE_class_prefixes);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 189;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__4) {
	            this.state = 188;
	            this.match(modelicaParser.T__4);
	        }

	        this.state = 212;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 191;
	            this.match(modelicaParser.T__5);
	            break;

	        case 2:
	            this.state = 192;
	            this.match(modelicaParser.T__6);
	            break;

	        case 3:
	            this.state = 194;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===modelicaParser.T__7) {
	                this.state = 193;
	                this.match(modelicaParser.T__7);
	            }

	            this.state = 196;
	            this.match(modelicaParser.T__8);
	            break;

	        case 4:
	            this.state = 197;
	            this.match(modelicaParser.T__9);
	            break;

	        case 5:
	            this.state = 199;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===modelicaParser.T__10) {
	                this.state = 198;
	                this.match(modelicaParser.T__10);
	            }

	            this.state = 201;
	            this.match(modelicaParser.T__11);
	            break;

	        case 6:
	            this.state = 202;
	            this.match(modelicaParser.T__12);
	            break;

	        case 7:
	            this.state = 203;
	            this.match(modelicaParser.T__13);
	            break;

	        case 8:
	            this.state = 205;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===modelicaParser.T__14 || _la===modelicaParser.T__15) {
	                this.state = 204;
	                _la = this._input.LA(1);
	                if(!(_la===modelicaParser.T__14 || _la===modelicaParser.T__15)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 208;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===modelicaParser.T__7) {
	                this.state = 207;
	                this.match(modelicaParser.T__7);
	            }

	            this.state = 210;
	            this.match(modelicaParser.T__16);
	            break;

	        case 9:
	            this.state = 211;
	            this.match(modelicaParser.T__7);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	long_class_specifier() {
	    let localctx = new Long_class_specifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, modelicaParser.RULE_long_class_specifier);
	    var _la = 0; // Token type
	    try {
	        this.state = 230;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case modelicaParser.IDENT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 214;
	            this.match(modelicaParser.IDENT);
	            this.state = 215;
	            this.string_comment();
	            this.state = 216;
	            this.composition();
	            this.state = 217;
	            this.match(modelicaParser.T__17);
	            this.state = 218;
	            this.match(modelicaParser.IDENT);
	            break;
	        case modelicaParser.T__18:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 220;
	            this.match(modelicaParser.T__18);
	            this.state = 221;
	            this.match(modelicaParser.IDENT);
	            this.state = 223;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===modelicaParser.T__21) {
	                this.state = 222;
	                this.class_modification();
	            }

	            this.state = 225;
	            this.string_comment();
	            this.state = 226;
	            this.composition();
	            this.state = 227;
	            this.match(modelicaParser.T__17);
	            this.state = 228;
	            this.match(modelicaParser.IDENT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	short_class_specifier() {
	    let localctx = new Short_class_specifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, modelicaParser.RULE_short_class_specifier);
	    var _la = 0; // Token type
	    try {
	        this.state = 256;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 232;
	            this.match(modelicaParser.IDENT);
	            this.state = 233;
	            this.match(modelicaParser.T__19);
	            this.state = 234;
	            this.base_prefix();
	            this.state = 235;
	            this.name();
	            this.state = 237;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===modelicaParser.T__83) {
	                this.state = 236;
	                this.array_subscripts();
	            }

	            this.state = 240;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===modelicaParser.T__21) {
	                this.state = 239;
	                this.class_modification();
	            }

	            this.state = 242;
	            this.comment();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 244;
	            this.match(modelicaParser.IDENT);
	            this.state = 245;
	            this.match(modelicaParser.T__19);
	            this.state = 246;
	            this.match(modelicaParser.T__20);
	            this.state = 247;
	            this.match(modelicaParser.T__21);
	            this.state = 252;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case modelicaParser.T__23:
	            case modelicaParser.IDENT:
	                this.state = 249;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===modelicaParser.IDENT) {
	                    this.state = 248;
	                    this.enum_list();
	                }

	                break;
	            case modelicaParser.T__22:
	                this.state = 251;
	                this.match(modelicaParser.T__22);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 254;
	            this.match(modelicaParser.T__23);
	            this.state = 255;
	            this.comment();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	der_class_specifier() {
	    let localctx = new Der_class_specifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, modelicaParser.RULE_der_class_specifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 258;
	        this.match(modelicaParser.IDENT);
	        this.state = 259;
	        this.match(modelicaParser.T__19);
	        this.state = 260;
	        this.match(modelicaParser.T__24);
	        this.state = 261;
	        this.match(modelicaParser.T__21);
	        this.state = 262;
	        this.name();
	        this.state = 263;
	        this.match(modelicaParser.T__25);
	        this.state = 264;
	        this.match(modelicaParser.IDENT);
	        this.state = 269;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===modelicaParser.T__25) {
	            this.state = 265;
	            this.match(modelicaParser.T__25);
	            this.state = 266;
	            this.match(modelicaParser.IDENT);
	            this.state = 271;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 272;
	        this.match(modelicaParser.T__23);
	        this.state = 273;
	        this.comment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	base_prefix() {
	    let localctx = new Base_prefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, modelicaParser.RULE_base_prefix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 275;
	        this.type_prefix();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_list() {
	    let localctx = new Enum_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, modelicaParser.RULE_enum_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 277;
	        this.enumeration_literal();
	        this.state = 282;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===modelicaParser.T__25) {
	            this.state = 278;
	            this.match(modelicaParser.T__25);
	            this.state = 279;
	            this.enumeration_literal();
	            this.state = 284;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumeration_literal() {
	    let localctx = new Enumeration_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, modelicaParser.RULE_enumeration_literal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 285;
	        this.match(modelicaParser.IDENT);
	        this.state = 286;
	        this.comment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	composition() {
	    let localctx = new CompositionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, modelicaParser.RULE_composition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 288;
	        this.element_list();
	        this.state = 297;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 27)) & ~0x1f) == 0 && ((1 << (_la - 27)) & ((1 << (modelicaParser.T__26 - 27)) | (1 << (modelicaParser.T__27 - 27)) | (1 << (modelicaParser.T__48 - 27)) | (1 << (modelicaParser.T__49 - 27)) | (1 << (modelicaParser.T__50 - 27)))) !== 0)) {
	            this.state = 295;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 289;
	                this.match(modelicaParser.T__26);
	                this.state = 290;
	                this.element_list();
	                break;

	            case 2:
	                this.state = 291;
	                this.match(modelicaParser.T__27);
	                this.state = 292;
	                this.element_list();
	                break;

	            case 3:
	                this.state = 293;
	                this.equation_section();
	                break;

	            case 4:
	                this.state = 294;
	                this.algorithm_section();
	                break;

	            }
	            this.state = 299;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 311;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__28) {
	            this.state = 300;
	            this.match(modelicaParser.T__28);
	            this.state = 302;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===modelicaParser.STRING) {
	                this.state = 301;
	                this.language_specification();
	            }

	            this.state = 305;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===modelicaParser.T__86 || _la===modelicaParser.IDENT) {
	                this.state = 304;
	                this.external_function_call();
	            }

	            this.state = 308;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===modelicaParser.T__87) {
	                this.state = 307;
	                this.annotation();
	            }

	            this.state = 310;
	            this.match(modelicaParser.T__1);
	        }

	        this.state = 316;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__87) {
	            this.state = 313;
	            this.annotation();
	            this.state = 314;
	            this.match(modelicaParser.T__1);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	language_specification() {
	    let localctx = new Language_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, modelicaParser.RULE_language_specification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 318;
	        this.match(modelicaParser.STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	external_function_call() {
	    let localctx = new External_function_callContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, modelicaParser.RULE_external_function_call);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 323;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        if(la_===1) {
	            this.state = 320;
	            this.component_reference();
	            this.state = 321;
	            this.match(modelicaParser.T__19);

	        }
	        this.state = 325;
	        this.match(modelicaParser.IDENT);
	        this.state = 326;
	        this.match(modelicaParser.T__21);
	        this.state = 328;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 18)) & ~0x1f) == 0 && ((1 << (_la - 18)) & ((1 << (modelicaParser.T__17 - 18)) | (1 << (modelicaParser.T__21 - 18)) | (1 << (modelicaParser.T__24 - 18)) | (1 << (modelicaParser.T__45 - 18)) | (1 << (modelicaParser.T__48 - 18)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (modelicaParser.T__65 - 66)) | (1 << (modelicaParser.T__72 - 66)) | (1 << (modelicaParser.T__73 - 66)) | (1 << (modelicaParser.T__74 - 66)) | (1 << (modelicaParser.T__75 - 66)) | (1 << (modelicaParser.T__81 - 66)) | (1 << (modelicaParser.T__82 - 66)) | (1 << (modelicaParser.T__83 - 66)) | (1 << (modelicaParser.T__85 - 66)) | (1 << (modelicaParser.T__86 - 66)) | (1 << (modelicaParser.IDENT - 66)) | (1 << (modelicaParser.STRING - 66)) | (1 << (modelicaParser.UNSIGNED_NUMBER - 66)))) !== 0)) {
	            this.state = 327;
	            this.expression_list();
	        }

	        this.state = 330;
	        this.match(modelicaParser.T__23);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element_list() {
	    let localctx = new Element_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, modelicaParser.RULE_element_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 337;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << modelicaParser.T__2) | (1 << modelicaParser.T__3) | (1 << modelicaParser.T__4) | (1 << modelicaParser.T__5) | (1 << modelicaParser.T__6) | (1 << modelicaParser.T__7) | (1 << modelicaParser.T__8) | (1 << modelicaParser.T__9) | (1 << modelicaParser.T__10) | (1 << modelicaParser.T__11) | (1 << modelicaParser.T__12) | (1 << modelicaParser.T__13) | (1 << modelicaParser.T__14) | (1 << modelicaParser.T__15) | (1 << modelicaParser.T__16) | (1 << modelicaParser.T__18) | (1 << modelicaParser.T__29) | (1 << modelicaParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (modelicaParser.T__31 - 32)) | (1 << (modelicaParser.T__32 - 32)) | (1 << (modelicaParser.T__33 - 32)) | (1 << (modelicaParser.T__38 - 32)) | (1 << (modelicaParser.T__39 - 32)) | (1 << (modelicaParser.T__40 - 32)) | (1 << (modelicaParser.T__41 - 32)) | (1 << (modelicaParser.T__42 - 32)) | (1 << (modelicaParser.T__43 - 32)) | (1 << (modelicaParser.T__44 - 32)))) !== 0) || _la===modelicaParser.T__86 || _la===modelicaParser.IDENT) {
	            this.state = 332;
	            this.element();
	            this.state = 333;
	            this.match(modelicaParser.T__1);
	            this.state = 339;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element() {
	    let localctx = new ElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, modelicaParser.RULE_element);
	    var _la = 0; // Token type
	    try {
	        this.state = 370;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case modelicaParser.T__33:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 340;
	            this.import_clause();
	            break;
	        case modelicaParser.T__18:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 341;
	            this.extends_clause();
	            break;
	        case modelicaParser.T__2:
	        case modelicaParser.T__3:
	        case modelicaParser.T__4:
	        case modelicaParser.T__5:
	        case modelicaParser.T__6:
	        case modelicaParser.T__7:
	        case modelicaParser.T__8:
	        case modelicaParser.T__9:
	        case modelicaParser.T__10:
	        case modelicaParser.T__11:
	        case modelicaParser.T__12:
	        case modelicaParser.T__13:
	        case modelicaParser.T__14:
	        case modelicaParser.T__15:
	        case modelicaParser.T__16:
	        case modelicaParser.T__29:
	        case modelicaParser.T__30:
	        case modelicaParser.T__31:
	        case modelicaParser.T__32:
	        case modelicaParser.T__38:
	        case modelicaParser.T__39:
	        case modelicaParser.T__40:
	        case modelicaParser.T__41:
	        case modelicaParser.T__42:
	        case modelicaParser.T__43:
	        case modelicaParser.T__44:
	        case modelicaParser.T__86:
	        case modelicaParser.IDENT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 343;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===modelicaParser.T__29) {
	                this.state = 342;
	                this.match(modelicaParser.T__29);
	            }

	            this.state = 346;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===modelicaParser.T__2) {
	                this.state = 345;
	                this.match(modelicaParser.T__2);
	            }

	            this.state = 349;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===modelicaParser.T__30) {
	                this.state = 348;
	                this.match(modelicaParser.T__30);
	            }

	            this.state = 352;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===modelicaParser.T__31) {
	                this.state = 351;
	                this.match(modelicaParser.T__31);
	            }

	            this.state = 368;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case modelicaParser.T__3:
	            case modelicaParser.T__4:
	            case modelicaParser.T__5:
	            case modelicaParser.T__6:
	            case modelicaParser.T__7:
	            case modelicaParser.T__8:
	            case modelicaParser.T__9:
	            case modelicaParser.T__10:
	            case modelicaParser.T__11:
	            case modelicaParser.T__12:
	            case modelicaParser.T__13:
	            case modelicaParser.T__14:
	            case modelicaParser.T__15:
	            case modelicaParser.T__16:
	            case modelicaParser.T__38:
	            case modelicaParser.T__39:
	            case modelicaParser.T__40:
	            case modelicaParser.T__41:
	            case modelicaParser.T__42:
	            case modelicaParser.T__43:
	            case modelicaParser.T__44:
	            case modelicaParser.T__86:
	            case modelicaParser.IDENT:
	                this.state = 356;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case modelicaParser.T__3:
	                case modelicaParser.T__4:
	                case modelicaParser.T__5:
	                case modelicaParser.T__6:
	                case modelicaParser.T__7:
	                case modelicaParser.T__8:
	                case modelicaParser.T__9:
	                case modelicaParser.T__10:
	                case modelicaParser.T__11:
	                case modelicaParser.T__12:
	                case modelicaParser.T__13:
	                case modelicaParser.T__14:
	                case modelicaParser.T__15:
	                case modelicaParser.T__16:
	                    this.state = 354;
	                    this.class_definition();
	                    break;
	                case modelicaParser.T__38:
	                case modelicaParser.T__39:
	                case modelicaParser.T__40:
	                case modelicaParser.T__41:
	                case modelicaParser.T__42:
	                case modelicaParser.T__43:
	                case modelicaParser.T__44:
	                case modelicaParser.T__86:
	                case modelicaParser.IDENT:
	                    this.state = 355;
	                    this.component_clause();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            case modelicaParser.T__32:
	                this.state = 358;
	                this.match(modelicaParser.T__32);
	                this.state = 361;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case modelicaParser.T__3:
	                case modelicaParser.T__4:
	                case modelicaParser.T__5:
	                case modelicaParser.T__6:
	                case modelicaParser.T__7:
	                case modelicaParser.T__8:
	                case modelicaParser.T__9:
	                case modelicaParser.T__10:
	                case modelicaParser.T__11:
	                case modelicaParser.T__12:
	                case modelicaParser.T__13:
	                case modelicaParser.T__14:
	                case modelicaParser.T__15:
	                case modelicaParser.T__16:
	                    this.state = 359;
	                    this.class_definition();
	                    break;
	                case modelicaParser.T__38:
	                case modelicaParser.T__39:
	                case modelicaParser.T__40:
	                case modelicaParser.T__41:
	                case modelicaParser.T__42:
	                case modelicaParser.T__43:
	                case modelicaParser.T__44:
	                case modelicaParser.T__86:
	                case modelicaParser.IDENT:
	                    this.state = 360;
	                    this.component_clause();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 366;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===modelicaParser.T__37) {
	                    this.state = 363;
	                    this.constraining_clause();
	                    this.state = 364;
	                    this.comment();
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_clause() {
	    let localctx = new Import_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, modelicaParser.RULE_import_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 372;
	        this.match(modelicaParser.T__33);
	        this.state = 385;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 373;
	            this.match(modelicaParser.IDENT);
	            this.state = 374;
	            this.match(modelicaParser.T__19);
	            this.state = 375;
	            this.name();
	            break;

	        case 2:
	            this.state = 376;
	            this.name();
	            this.state = 377;
	            this.match(modelicaParser.T__34);
	            break;

	        case 3:
	            this.state = 379;
	            this.name();
	            this.state = 380;
	            this.match(modelicaParser.T__35);
	            this.state = 381;
	            this.import_list();
	            this.state = 382;
	            this.match(modelicaParser.T__36);
	            break;

	        case 4:
	            this.state = 384;
	            this.name();
	            break;

	        }
	        this.state = 387;
	        this.comment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_list() {
	    let localctx = new Import_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, modelicaParser.RULE_import_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 389;
	        this.match(modelicaParser.IDENT);
	        this.state = 394;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===modelicaParser.T__25) {
	            this.state = 390;
	            this.match(modelicaParser.T__25);
	            this.state = 391;
	            this.match(modelicaParser.IDENT);
	            this.state = 396;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extends_clause() {
	    let localctx = new Extends_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, modelicaParser.RULE_extends_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 397;
	        this.match(modelicaParser.T__18);
	        this.state = 398;
	        this.name();
	        this.state = 400;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__21) {
	            this.state = 399;
	            this.class_modification();
	        }

	        this.state = 403;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__87) {
	            this.state = 402;
	            this.annotation();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraining_clause() {
	    let localctx = new Constraining_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, modelicaParser.RULE_constraining_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 405;
	        this.match(modelicaParser.T__37);
	        this.state = 406;
	        this.name();
	        this.state = 408;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__21) {
	            this.state = 407;
	            this.class_modification();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_clause() {
	    let localctx = new Component_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, modelicaParser.RULE_component_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 410;
	        this.type_prefix();
	        this.state = 411;
	        this.type_specifier();
	        this.state = 413;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__83) {
	            this.state = 412;
	            this.array_subscripts();
	        }

	        this.state = 415;
	        this.component_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_prefix() {
	    let localctx = new Type_prefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, modelicaParser.RULE_type_prefix);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 418;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__38 || _la===modelicaParser.T__39) {
	            this.state = 417;
	            _la = this._input.LA(1);
	            if(!(_la===modelicaParser.T__38 || _la===modelicaParser.T__39)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 421;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (modelicaParser.T__40 - 41)) | (1 << (modelicaParser.T__41 - 41)) | (1 << (modelicaParser.T__42 - 41)))) !== 0)) {
	            this.state = 420;
	            _la = this._input.LA(1);
	            if(!(((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (modelicaParser.T__40 - 41)) | (1 << (modelicaParser.T__41 - 41)) | (1 << (modelicaParser.T__42 - 41)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 424;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__43 || _la===modelicaParser.T__44) {
	            this.state = 423;
	            _la = this._input.LA(1);
	            if(!(_la===modelicaParser.T__43 || _la===modelicaParser.T__44)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_specifier() {
	    let localctx = new Type_specifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, modelicaParser.RULE_type_specifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 426;
	        this.name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_list() {
	    let localctx = new Component_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, modelicaParser.RULE_component_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 428;
	        this.component_declaration();
	        this.state = 433;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===modelicaParser.T__25) {
	            this.state = 429;
	            this.match(modelicaParser.T__25);
	            this.state = 430;
	            this.component_declaration();
	            this.state = 435;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_declaration() {
	    let localctx = new Component_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, modelicaParser.RULE_component_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 436;
	        this.declaration();
	        this.state = 438;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__45) {
	            this.state = 437;
	            this.condition_attribute();
	        }

	        this.state = 440;
	        this.comment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	condition_attribute() {
	    let localctx = new Condition_attributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, modelicaParser.RULE_condition_attribute);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 442;
	        this.match(modelicaParser.T__45);
	        this.state = 443;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration() {
	    let localctx = new DeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, modelicaParser.RULE_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 445;
	        this.match(modelicaParser.IDENT);
	        this.state = 447;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__83) {
	            this.state = 446;
	            this.array_subscripts();
	        }

	        this.state = 450;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (modelicaParser.T__19 - 20)) | (1 << (modelicaParser.T__21 - 20)) | (1 << (modelicaParser.T__46 - 20)))) !== 0)) {
	            this.state = 449;
	            this.modification();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modification() {
	    let localctx = new ModificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, modelicaParser.RULE_modification);
	    var _la = 0; // Token type
	    try {
	        this.state = 461;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case modelicaParser.T__21:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 452;
	            this.class_modification();
	            this.state = 455;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===modelicaParser.T__19) {
	                this.state = 453;
	                this.match(modelicaParser.T__19);
	                this.state = 454;
	                this.expression();
	            }

	            break;
	        case modelicaParser.T__19:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 457;
	            this.match(modelicaParser.T__19);
	            this.state = 458;
	            this.expression();
	            break;
	        case modelicaParser.T__46:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 459;
	            this.match(modelicaParser.T__46);
	            this.state = 460;
	            this.expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_modification() {
	    let localctx = new Class_modificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, modelicaParser.RULE_class_modification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 463;
	        this.match(modelicaParser.T__21);
	        this.state = 465;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__2 || _la===modelicaParser.T__29 || _la===modelicaParser.T__32 || _la===modelicaParser.T__47 || _la===modelicaParser.T__86 || _la===modelicaParser.IDENT) {
	            this.state = 464;
	            this.argument_list();
	        }

	        this.state = 467;
	        this.match(modelicaParser.T__23);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument_list() {
	    let localctx = new Argument_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, modelicaParser.RULE_argument_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 469;
	        this.argument();
	        this.state = 474;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===modelicaParser.T__25) {
	            this.state = 470;
	            this.match(modelicaParser.T__25);
	            this.state = 471;
	            this.argument();
	            this.state = 476;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument() {
	    let localctx = new ArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, modelicaParser.RULE_argument);
	    try {
	        this.state = 479;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case modelicaParser.T__2:
	        case modelicaParser.T__32:
	        case modelicaParser.T__47:
	        case modelicaParser.T__86:
	        case modelicaParser.IDENT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 477;
	            this.element_modification_or_replaceable();
	            break;
	        case modelicaParser.T__29:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 478;
	            this.element_redeclaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element_modification_or_replaceable() {
	    let localctx = new Element_modification_or_replaceableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, modelicaParser.RULE_element_modification_or_replaceable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 482;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__47) {
	            this.state = 481;
	            this.match(modelicaParser.T__47);
	        }

	        this.state = 485;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__2) {
	            this.state = 484;
	            this.match(modelicaParser.T__2);
	        }

	        this.state = 489;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case modelicaParser.T__86:
	        case modelicaParser.IDENT:
	            this.state = 487;
	            this.element_modification();
	            break;
	        case modelicaParser.T__32:
	            this.state = 488;
	            this.element_replaceable();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element_modification() {
	    let localctx = new Element_modificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, modelicaParser.RULE_element_modification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 491;
	        this.name();
	        this.state = 493;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (modelicaParser.T__19 - 20)) | (1 << (modelicaParser.T__21 - 20)) | (1 << (modelicaParser.T__46 - 20)))) !== 0)) {
	            this.state = 492;
	            this.modification();
	        }

	        this.state = 495;
	        this.string_comment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element_redeclaration() {
	    let localctx = new Element_redeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, modelicaParser.RULE_element_redeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 497;
	        this.match(modelicaParser.T__29);
	        this.state = 499;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__47) {
	            this.state = 498;
	            this.match(modelicaParser.T__47);
	        }

	        this.state = 502;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__2) {
	            this.state = 501;
	            this.match(modelicaParser.T__2);
	        }

	        this.state = 509;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case modelicaParser.T__4:
	        case modelicaParser.T__5:
	        case modelicaParser.T__6:
	        case modelicaParser.T__7:
	        case modelicaParser.T__8:
	        case modelicaParser.T__9:
	        case modelicaParser.T__10:
	        case modelicaParser.T__11:
	        case modelicaParser.T__12:
	        case modelicaParser.T__13:
	        case modelicaParser.T__14:
	        case modelicaParser.T__15:
	        case modelicaParser.T__16:
	        case modelicaParser.T__38:
	        case modelicaParser.T__39:
	        case modelicaParser.T__40:
	        case modelicaParser.T__41:
	        case modelicaParser.T__42:
	        case modelicaParser.T__43:
	        case modelicaParser.T__44:
	        case modelicaParser.T__86:
	        case modelicaParser.IDENT:
	            this.state = 506;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case modelicaParser.T__4:
	            case modelicaParser.T__5:
	            case modelicaParser.T__6:
	            case modelicaParser.T__7:
	            case modelicaParser.T__8:
	            case modelicaParser.T__9:
	            case modelicaParser.T__10:
	            case modelicaParser.T__11:
	            case modelicaParser.T__12:
	            case modelicaParser.T__13:
	            case modelicaParser.T__14:
	            case modelicaParser.T__15:
	            case modelicaParser.T__16:
	                this.state = 504;
	                this.short_class_definition();
	                break;
	            case modelicaParser.T__38:
	            case modelicaParser.T__39:
	            case modelicaParser.T__40:
	            case modelicaParser.T__41:
	            case modelicaParser.T__42:
	            case modelicaParser.T__43:
	            case modelicaParser.T__44:
	            case modelicaParser.T__86:
	            case modelicaParser.IDENT:
	                this.state = 505;
	                this.component_clause1();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case modelicaParser.T__32:
	            this.state = 508;
	            this.element_replaceable();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element_replaceable() {
	    let localctx = new Element_replaceableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, modelicaParser.RULE_element_replaceable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 511;
	        this.match(modelicaParser.T__32);
	        this.state = 514;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case modelicaParser.T__4:
	        case modelicaParser.T__5:
	        case modelicaParser.T__6:
	        case modelicaParser.T__7:
	        case modelicaParser.T__8:
	        case modelicaParser.T__9:
	        case modelicaParser.T__10:
	        case modelicaParser.T__11:
	        case modelicaParser.T__12:
	        case modelicaParser.T__13:
	        case modelicaParser.T__14:
	        case modelicaParser.T__15:
	        case modelicaParser.T__16:
	            this.state = 512;
	            this.short_class_definition();
	            break;
	        case modelicaParser.T__38:
	        case modelicaParser.T__39:
	        case modelicaParser.T__40:
	        case modelicaParser.T__41:
	        case modelicaParser.T__42:
	        case modelicaParser.T__43:
	        case modelicaParser.T__44:
	        case modelicaParser.T__86:
	        case modelicaParser.IDENT:
	            this.state = 513;
	            this.component_clause1();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 517;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__37) {
	            this.state = 516;
	            this.constraining_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_clause1() {
	    let localctx = new Component_clause1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, modelicaParser.RULE_component_clause1);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 519;
	        this.type_prefix();
	        this.state = 520;
	        this.type_specifier();
	        this.state = 521;
	        this.component_declaration1();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_declaration1() {
	    let localctx = new Component_declaration1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, modelicaParser.RULE_component_declaration1);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 523;
	        this.declaration();
	        this.state = 524;
	        this.comment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	short_class_definition() {
	    let localctx = new Short_class_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, modelicaParser.RULE_short_class_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 526;
	        this.class_prefixes();
	        this.state = 527;
	        this.short_class_specifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equation_section() {
	    let localctx = new Equation_sectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, modelicaParser.RULE_equation_section);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 530;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__48) {
	            this.state = 529;
	            this.match(modelicaParser.T__48);
	        }

	        this.state = 532;
	        this.match(modelicaParser.T__49);
	        this.state = 538;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,69,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 533;
	                this.equation();
	                this.state = 534;
	                this.match(modelicaParser.T__1); 
	            }
	            this.state = 540;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,69,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	algorithm_section() {
	    let localctx = new Algorithm_sectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, modelicaParser.RULE_algorithm_section);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 542;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__48) {
	            this.state = 541;
	            this.match(modelicaParser.T__48);
	        }

	        this.state = 544;
	        this.match(modelicaParser.T__50);
	        this.state = 550;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===modelicaParser.T__21 || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (modelicaParser.T__45 - 46)) | (1 << (modelicaParser.T__51 - 46)) | (1 << (modelicaParser.T__52 - 46)) | (1 << (modelicaParser.T__56 - 46)) | (1 << (modelicaParser.T__59 - 46)) | (1 << (modelicaParser.T__60 - 46)))) !== 0) || _la===modelicaParser.T__86 || _la===modelicaParser.IDENT) {
	            this.state = 545;
	            this.statement();
	            this.state = 546;
	            this.match(modelicaParser.T__1);
	            this.state = 552;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equation() {
	    let localctx = new EquationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, modelicaParser.RULE_equation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 564;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 553;
	            this.simple_expression();
	            this.state = 554;
	            this.match(modelicaParser.T__19);
	            this.state = 555;
	            this.expression();
	            break;

	        case 2:
	            this.state = 557;
	            this.if_equation();
	            break;

	        case 3:
	            this.state = 558;
	            this.for_equation();
	            break;

	        case 4:
	            this.state = 559;
	            this.connect_clause();
	            break;

	        case 5:
	            this.state = 560;
	            this.when_equation();
	            break;

	        case 6:
	            this.state = 561;
	            this.name();
	            this.state = 562;
	            this.function_call_args();
	            break;

	        }
	        this.state = 566;
	        this.comment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, modelicaParser.RULE_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 587;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case modelicaParser.T__86:
	        case modelicaParser.IDENT:
	            this.state = 568;
	            this.component_reference();
	            this.state = 572;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case modelicaParser.T__46:
	                this.state = 569;
	                this.match(modelicaParser.T__46);
	                this.state = 570;
	                this.expression();
	                break;
	            case modelicaParser.T__21:
	                this.state = 571;
	                this.function_call_args();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case modelicaParser.T__21:
	            this.state = 574;
	            this.match(modelicaParser.T__21);
	            this.state = 575;
	            this.output_expression_list();
	            this.state = 576;
	            this.match(modelicaParser.T__23);
	            this.state = 577;
	            this.match(modelicaParser.T__46);
	            this.state = 578;
	            this.component_reference();
	            this.state = 579;
	            this.function_call_args();
	            break;
	        case modelicaParser.T__51:
	            this.state = 581;
	            this.match(modelicaParser.T__51);
	            break;
	        case modelicaParser.T__52:
	            this.state = 582;
	            this.match(modelicaParser.T__52);
	            break;
	        case modelicaParser.T__45:
	            this.state = 583;
	            this.if_statement();
	            break;
	        case modelicaParser.T__56:
	            this.state = 584;
	            this.for_statement();
	            break;
	        case modelicaParser.T__59:
	            this.state = 585;
	            this.while_statement();
	            break;
	        case modelicaParser.T__60:
	            this.state = 586;
	            this.when_statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 589;
	        this.comment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_equation() {
	    let localctx = new If_equationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, modelicaParser.RULE_if_equation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 591;
	        this.match(modelicaParser.T__45);
	        this.state = 592;
	        this.expression();
	        this.state = 593;
	        this.match(modelicaParser.T__53);
	        this.state = 599;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,75,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 594;
	                this.equation();
	                this.state = 595;
	                this.match(modelicaParser.T__1); 
	            }
	            this.state = 601;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,75,this._ctx);
	        }

	        this.state = 615;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===modelicaParser.T__54) {
	            this.state = 602;
	            this.match(modelicaParser.T__54);
	            this.state = 603;
	            this.expression();
	            this.state = 604;
	            this.match(modelicaParser.T__53);
	            this.state = 610;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,76,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 605;
	                    this.equation();
	                    this.state = 606;
	                    this.match(modelicaParser.T__1); 
	                }
	                this.state = 612;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,76,this._ctx);
	            }

	            this.state = 617;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 627;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__55) {
	            this.state = 618;
	            this.match(modelicaParser.T__55);
	            this.state = 624;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,78,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 619;
	                    this.equation();
	                    this.state = 620;
	                    this.match(modelicaParser.T__1); 
	                }
	                this.state = 626;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,78,this._ctx);
	            }

	        }

	        this.state = 629;
	        this.match(modelicaParser.T__17);
	        this.state = 630;
	        this.match(modelicaParser.T__45);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_statement() {
	    let localctx = new If_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, modelicaParser.RULE_if_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 632;
	        this.match(modelicaParser.T__45);
	        this.state = 633;
	        this.expression();
	        this.state = 634;
	        this.match(modelicaParser.T__53);
	        this.state = 640;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===modelicaParser.T__21 || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (modelicaParser.T__45 - 46)) | (1 << (modelicaParser.T__51 - 46)) | (1 << (modelicaParser.T__52 - 46)) | (1 << (modelicaParser.T__56 - 46)) | (1 << (modelicaParser.T__59 - 46)) | (1 << (modelicaParser.T__60 - 46)))) !== 0) || _la===modelicaParser.T__86 || _la===modelicaParser.IDENT) {
	            this.state = 635;
	            this.statement();
	            this.state = 636;
	            this.match(modelicaParser.T__1);
	            this.state = 642;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 656;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===modelicaParser.T__54) {
	            this.state = 643;
	            this.match(modelicaParser.T__54);
	            this.state = 644;
	            this.expression();
	            this.state = 645;
	            this.match(modelicaParser.T__53);
	            this.state = 651;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===modelicaParser.T__21 || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (modelicaParser.T__45 - 46)) | (1 << (modelicaParser.T__51 - 46)) | (1 << (modelicaParser.T__52 - 46)) | (1 << (modelicaParser.T__56 - 46)) | (1 << (modelicaParser.T__59 - 46)) | (1 << (modelicaParser.T__60 - 46)))) !== 0) || _la===modelicaParser.T__86 || _la===modelicaParser.IDENT) {
	                this.state = 646;
	                this.statement();
	                this.state = 647;
	                this.match(modelicaParser.T__1);
	                this.state = 653;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 658;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 668;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__55) {
	            this.state = 659;
	            this.match(modelicaParser.T__55);
	            this.state = 665;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===modelicaParser.T__21 || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (modelicaParser.T__45 - 46)) | (1 << (modelicaParser.T__51 - 46)) | (1 << (modelicaParser.T__52 - 46)) | (1 << (modelicaParser.T__56 - 46)) | (1 << (modelicaParser.T__59 - 46)) | (1 << (modelicaParser.T__60 - 46)))) !== 0) || _la===modelicaParser.T__86 || _la===modelicaParser.IDENT) {
	                this.state = 660;
	                this.statement();
	                this.state = 661;
	                this.match(modelicaParser.T__1);
	                this.state = 667;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 670;
	        this.match(modelicaParser.T__17);
	        this.state = 671;
	        this.match(modelicaParser.T__45);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_equation() {
	    let localctx = new For_equationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, modelicaParser.RULE_for_equation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 673;
	        this.match(modelicaParser.T__56);
	        this.state = 674;
	        this.for_indices();
	        this.state = 675;
	        this.match(modelicaParser.T__57);
	        this.state = 681;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,85,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 676;
	                this.equation();
	                this.state = 677;
	                this.match(modelicaParser.T__1); 
	            }
	            this.state = 683;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,85,this._ctx);
	        }

	        this.state = 684;
	        this.match(modelicaParser.T__17);
	        this.state = 685;
	        this.match(modelicaParser.T__56);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_statement() {
	    let localctx = new For_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, modelicaParser.RULE_for_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 687;
	        this.match(modelicaParser.T__56);
	        this.state = 688;
	        this.for_indices();
	        this.state = 689;
	        this.match(modelicaParser.T__57);
	        this.state = 695;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===modelicaParser.T__21 || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (modelicaParser.T__45 - 46)) | (1 << (modelicaParser.T__51 - 46)) | (1 << (modelicaParser.T__52 - 46)) | (1 << (modelicaParser.T__56 - 46)) | (1 << (modelicaParser.T__59 - 46)) | (1 << (modelicaParser.T__60 - 46)))) !== 0) || _la===modelicaParser.T__86 || _la===modelicaParser.IDENT) {
	            this.state = 690;
	            this.statement();
	            this.state = 691;
	            this.match(modelicaParser.T__1);
	            this.state = 697;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 698;
	        this.match(modelicaParser.T__17);
	        this.state = 699;
	        this.match(modelicaParser.T__56);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_indices() {
	    let localctx = new For_indicesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, modelicaParser.RULE_for_indices);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 701;
	        this.for_index();
	        this.state = 706;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===modelicaParser.T__25) {
	            this.state = 702;
	            this.match(modelicaParser.T__25);
	            this.state = 703;
	            this.for_index();
	            this.state = 708;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_index() {
	    let localctx = new For_indexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, modelicaParser.RULE_for_index);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 709;
	        this.match(modelicaParser.IDENT);
	        this.state = 712;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__58) {
	            this.state = 710;
	            this.match(modelicaParser.T__58);
	            this.state = 711;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	while_statement() {
	    let localctx = new While_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, modelicaParser.RULE_while_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 714;
	        this.match(modelicaParser.T__59);
	        this.state = 715;
	        this.expression();
	        this.state = 716;
	        this.match(modelicaParser.T__57);
	        this.state = 722;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===modelicaParser.T__21 || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (modelicaParser.T__45 - 46)) | (1 << (modelicaParser.T__51 - 46)) | (1 << (modelicaParser.T__52 - 46)) | (1 << (modelicaParser.T__56 - 46)) | (1 << (modelicaParser.T__59 - 46)) | (1 << (modelicaParser.T__60 - 46)))) !== 0) || _la===modelicaParser.T__86 || _la===modelicaParser.IDENT) {
	            this.state = 717;
	            this.statement();
	            this.state = 718;
	            this.match(modelicaParser.T__1);
	            this.state = 724;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 725;
	        this.match(modelicaParser.T__17);
	        this.state = 726;
	        this.match(modelicaParser.T__59);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	when_equation() {
	    let localctx = new When_equationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, modelicaParser.RULE_when_equation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 728;
	        this.match(modelicaParser.T__60);
	        this.state = 729;
	        this.expression();
	        this.state = 730;
	        this.match(modelicaParser.T__53);
	        this.state = 736;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 731;
	                this.equation();
	                this.state = 732;
	                this.match(modelicaParser.T__1); 
	            }
	            this.state = 738;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
	        }

	        this.state = 752;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===modelicaParser.T__61) {
	            this.state = 739;
	            this.match(modelicaParser.T__61);
	            this.state = 740;
	            this.expression();
	            this.state = 741;
	            this.match(modelicaParser.T__53);
	            this.state = 747;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,91,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 742;
	                    this.equation();
	                    this.state = 743;
	                    this.match(modelicaParser.T__1); 
	                }
	                this.state = 749;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,91,this._ctx);
	            }

	            this.state = 754;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 755;
	        this.match(modelicaParser.T__17);
	        this.state = 756;
	        this.match(modelicaParser.T__60);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	when_statement() {
	    let localctx = new When_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, modelicaParser.RULE_when_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 758;
	        this.match(modelicaParser.T__60);
	        this.state = 759;
	        this.expression();
	        this.state = 760;
	        this.match(modelicaParser.T__53);
	        this.state = 766;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===modelicaParser.T__21 || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (modelicaParser.T__45 - 46)) | (1 << (modelicaParser.T__51 - 46)) | (1 << (modelicaParser.T__52 - 46)) | (1 << (modelicaParser.T__56 - 46)) | (1 << (modelicaParser.T__59 - 46)) | (1 << (modelicaParser.T__60 - 46)))) !== 0) || _la===modelicaParser.T__86 || _la===modelicaParser.IDENT) {
	            this.state = 761;
	            this.statement();
	            this.state = 762;
	            this.match(modelicaParser.T__1);
	            this.state = 768;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 782;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===modelicaParser.T__61) {
	            this.state = 769;
	            this.match(modelicaParser.T__61);
	            this.state = 770;
	            this.expression();
	            this.state = 771;
	            this.match(modelicaParser.T__53);
	            this.state = 777;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===modelicaParser.T__21 || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (modelicaParser.T__45 - 46)) | (1 << (modelicaParser.T__51 - 46)) | (1 << (modelicaParser.T__52 - 46)) | (1 << (modelicaParser.T__56 - 46)) | (1 << (modelicaParser.T__59 - 46)) | (1 << (modelicaParser.T__60 - 46)))) !== 0) || _la===modelicaParser.T__86 || _la===modelicaParser.IDENT) {
	                this.state = 772;
	                this.statement();
	                this.state = 773;
	                this.match(modelicaParser.T__1);
	                this.state = 779;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 784;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 785;
	        this.match(modelicaParser.T__17);
	        this.state = 786;
	        this.match(modelicaParser.T__60);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	connect_clause() {
	    let localctx = new Connect_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, modelicaParser.RULE_connect_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 788;
	        this.match(modelicaParser.T__62);
	        this.state = 789;
	        this.match(modelicaParser.T__21);
	        this.state = 790;
	        this.component_reference();
	        this.state = 791;
	        this.match(modelicaParser.T__25);
	        this.state = 792;
	        this.component_reference();
	        this.state = 793;
	        this.match(modelicaParser.T__23);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, modelicaParser.RULE_expression);
	    var _la = 0; // Token type
	    try {
	        this.state = 813;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case modelicaParser.T__17:
	        case modelicaParser.T__21:
	        case modelicaParser.T__24:
	        case modelicaParser.T__48:
	        case modelicaParser.T__65:
	        case modelicaParser.T__72:
	        case modelicaParser.T__73:
	        case modelicaParser.T__74:
	        case modelicaParser.T__75:
	        case modelicaParser.T__81:
	        case modelicaParser.T__82:
	        case modelicaParser.T__83:
	        case modelicaParser.T__85:
	        case modelicaParser.T__86:
	        case modelicaParser.IDENT:
	        case modelicaParser.STRING:
	        case modelicaParser.UNSIGNED_NUMBER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 795;
	            this.simple_expression();
	            break;
	        case modelicaParser.T__45:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 796;
	            this.match(modelicaParser.T__45);
	            this.state = 797;
	            this.expression();
	            this.state = 798;
	            this.match(modelicaParser.T__53);
	            this.state = 799;
	            this.expression();
	            this.state = 807;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===modelicaParser.T__54) {
	                this.state = 800;
	                this.match(modelicaParser.T__54);
	                this.state = 801;
	                this.expression();
	                this.state = 802;
	                this.match(modelicaParser.T__53);
	                this.state = 803;
	                this.expression();
	                this.state = 809;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 810;
	            this.match(modelicaParser.T__55);
	            this.state = 811;
	            this.expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_expression() {
	    let localctx = new Simple_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, modelicaParser.RULE_simple_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 815;
	        this.logical_expression();
	        this.state = 822;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__22) {
	            this.state = 816;
	            this.match(modelicaParser.T__22);
	            this.state = 817;
	            this.logical_expression();
	            this.state = 820;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===modelicaParser.T__22) {
	                this.state = 818;
	                this.match(modelicaParser.T__22);
	                this.state = 819;
	                this.logical_expression();
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logical_expression() {
	    let localctx = new Logical_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, modelicaParser.RULE_logical_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 824;
	        this.logical_term();
	        this.state = 829;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===modelicaParser.T__63) {
	            this.state = 825;
	            this.match(modelicaParser.T__63);
	            this.state = 826;
	            this.logical_term();
	            this.state = 831;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logical_term() {
	    let localctx = new Logical_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, modelicaParser.RULE_logical_term);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 832;
	        this.logical_factor();
	        this.state = 837;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===modelicaParser.T__64) {
	            this.state = 833;
	            this.match(modelicaParser.T__64);
	            this.state = 834;
	            this.logical_factor();
	            this.state = 839;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logical_factor() {
	    let localctx = new Logical_factorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, modelicaParser.RULE_logical_factor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 841;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__65) {
	            this.state = 840;
	            this.match(modelicaParser.T__65);
	        }

	        this.state = 843;
	        this.relation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relation() {
	    let localctx = new RelationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, modelicaParser.RULE_relation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 845;
	        this.arithmetic_expression();
	        this.state = 849;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (modelicaParser.T__66 - 67)) | (1 << (modelicaParser.T__67 - 67)) | (1 << (modelicaParser.T__68 - 67)) | (1 << (modelicaParser.T__69 - 67)) | (1 << (modelicaParser.T__70 - 67)) | (1 << (modelicaParser.T__71 - 67)))) !== 0)) {
	            this.state = 846;
	            this.rel_op();
	            this.state = 847;
	            this.arithmetic_expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rel_op() {
	    let localctx = new Rel_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, modelicaParser.RULE_rel_op);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 851;
	        _la = this._input.LA(1);
	        if(!(((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (modelicaParser.T__66 - 67)) | (1 << (modelicaParser.T__67 - 67)) | (1 << (modelicaParser.T__68 - 67)) | (1 << (modelicaParser.T__69 - 67)) | (1 << (modelicaParser.T__70 - 67)) | (1 << (modelicaParser.T__71 - 67)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arithmetic_expression() {
	    let localctx = new Arithmetic_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, modelicaParser.RULE_arithmetic_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 854;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (modelicaParser.T__72 - 73)) | (1 << (modelicaParser.T__73 - 73)) | (1 << (modelicaParser.T__74 - 73)) | (1 << (modelicaParser.T__75 - 73)))) !== 0)) {
	            this.state = 853;
	            this.add_op();
	        }

	        this.state = 856;
	        this.term();
	        this.state = 862;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (modelicaParser.T__72 - 73)) | (1 << (modelicaParser.T__73 - 73)) | (1 << (modelicaParser.T__74 - 73)) | (1 << (modelicaParser.T__75 - 73)))) !== 0)) {
	            this.state = 857;
	            this.add_op();
	            this.state = 858;
	            this.term();
	            this.state = 864;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	add_op() {
	    let localctx = new Add_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, modelicaParser.RULE_add_op);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 865;
	        _la = this._input.LA(1);
	        if(!(((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (modelicaParser.T__72 - 73)) | (1 << (modelicaParser.T__73 - 73)) | (1 << (modelicaParser.T__74 - 73)) | (1 << (modelicaParser.T__75 - 73)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	term() {
	    let localctx = new TermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, modelicaParser.RULE_term);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 867;
	        this.factor();
	        this.state = 873;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===modelicaParser.T__34 || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (modelicaParser.T__76 - 77)) | (1 << (modelicaParser.T__77 - 77)) | (1 << (modelicaParser.T__78 - 77)))) !== 0)) {
	            this.state = 868;
	            this.mul_op();
	            this.state = 869;
	            this.factor();
	            this.state = 875;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mul_op() {
	    let localctx = new Mul_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, modelicaParser.RULE_mul_op);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 876;
	        _la = this._input.LA(1);
	        if(!(_la===modelicaParser.T__34 || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (modelicaParser.T__76 - 77)) | (1 << (modelicaParser.T__77 - 77)) | (1 << (modelicaParser.T__78 - 77)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	factor() {
	    let localctx = new FactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, modelicaParser.RULE_factor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 878;
	        this.primary();
	        this.state = 881;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__79 || _la===modelicaParser.T__80) {
	            this.state = 879;
	            _la = this._input.LA(1);
	            if(!(_la===modelicaParser.T__79 || _la===modelicaParser.T__80)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 880;
	            this.primary();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary() {
	    let localctx = new PrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, modelicaParser.RULE_primary);
	    var _la = 0; // Token type
	    try {
	        this.state = 914;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 883;
	            this.match(modelicaParser.UNSIGNED_NUMBER);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 884;
	            this.match(modelicaParser.STRING);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 885;
	            this.match(modelicaParser.T__81);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 886;
	            this.match(modelicaParser.T__82);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 890;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case modelicaParser.T__86:
	            case modelicaParser.IDENT:
	                this.state = 887;
	                this.name();
	                break;
	            case modelicaParser.T__24:
	                this.state = 888;
	                this.match(modelicaParser.T__24);
	                break;
	            case modelicaParser.T__48:
	                this.state = 889;
	                this.match(modelicaParser.T__48);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 892;
	            this.function_call_args();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 893;
	            this.component_reference();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 894;
	            this.match(modelicaParser.T__21);
	            this.state = 895;
	            this.output_expression_list();
	            this.state = 896;
	            this.match(modelicaParser.T__23);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 898;
	            this.match(modelicaParser.T__83);
	            this.state = 899;
	            this.expression_list();
	            this.state = 904;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===modelicaParser.T__1) {
	                this.state = 900;
	                this.match(modelicaParser.T__1);
	                this.state = 901;
	                this.expression_list();
	                this.state = 906;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 907;
	            this.match(modelicaParser.T__84);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 909;
	            this.match(modelicaParser.T__85);
	            this.state = 910;
	            this.function_arguments();
	            this.state = 911;
	            this.match(modelicaParser.T__36);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 913;
	            this.match(modelicaParser.T__17);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name() {
	    let localctx = new NameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, modelicaParser.RULE_name);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 917;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__86) {
	            this.state = 916;
	            this.match(modelicaParser.T__86);
	        }

	        this.state = 919;
	        this.match(modelicaParser.IDENT);
	        this.state = 924;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===modelicaParser.T__86) {
	            this.state = 920;
	            this.match(modelicaParser.T__86);
	            this.state = 921;
	            this.match(modelicaParser.IDENT);
	            this.state = 926;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_reference() {
	    let localctx = new Component_referenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, modelicaParser.RULE_component_reference);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 928;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__86) {
	            this.state = 927;
	            this.match(modelicaParser.T__86);
	        }

	        this.state = 930;
	        this.match(modelicaParser.IDENT);
	        this.state = 932;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__83) {
	            this.state = 931;
	            this.array_subscripts();
	        }

	        this.state = 941;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===modelicaParser.T__86) {
	            this.state = 934;
	            this.match(modelicaParser.T__86);
	            this.state = 935;
	            this.match(modelicaParser.IDENT);
	            this.state = 937;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===modelicaParser.T__83) {
	                this.state = 936;
	                this.array_subscripts();
	            }

	            this.state = 943;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_call_args() {
	    let localctx = new Function_call_argsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, modelicaParser.RULE_function_call_args);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 944;
	        this.match(modelicaParser.T__21);
	        this.state = 946;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << modelicaParser.T__16) | (1 << modelicaParser.T__17) | (1 << modelicaParser.T__21) | (1 << modelicaParser.T__24))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (modelicaParser.T__45 - 46)) | (1 << (modelicaParser.T__48 - 46)) | (1 << (modelicaParser.T__65 - 46)) | (1 << (modelicaParser.T__72 - 46)) | (1 << (modelicaParser.T__73 - 46)) | (1 << (modelicaParser.T__74 - 46)) | (1 << (modelicaParser.T__75 - 46)))) !== 0) || ((((_la - 82)) & ~0x1f) == 0 && ((1 << (_la - 82)) & ((1 << (modelicaParser.T__81 - 82)) | (1 << (modelicaParser.T__82 - 82)) | (1 << (modelicaParser.T__83 - 82)) | (1 << (modelicaParser.T__85 - 82)) | (1 << (modelicaParser.T__86 - 82)) | (1 << (modelicaParser.IDENT - 82)) | (1 << (modelicaParser.STRING - 82)) | (1 << (modelicaParser.UNSIGNED_NUMBER - 82)))) !== 0)) {
	            this.state = 945;
	            this.function_arguments();
	        }

	        this.state = 948;
	        this.match(modelicaParser.T__23);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_arguments() {
	    let localctx = new Function_argumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, modelicaParser.RULE_function_arguments);
	    try {
	        this.state = 958;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 950;
	            this.function_argument();
	            this.state = 955;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case modelicaParser.T__25:
	            	this.state = 951;
	            	this.match(modelicaParser.T__25);
	            	this.state = 952;
	            	this.function_arguments();
	            	break;
	            case modelicaParser.T__56:
	            	this.state = 953;
	            	this.match(modelicaParser.T__56);
	            	this.state = 954;
	            	this.for_indices();
	            	break;
	            case modelicaParser.T__23:
	            case modelicaParser.T__36:
	            	break;
	            default:
	            	break;
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 957;
	            this.named_arguments();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_arguments() {
	    let localctx = new Named_argumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, modelicaParser.RULE_named_arguments);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 960;
	        this.named_argument();
	        this.state = 963;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__25) {
	            this.state = 961;
	            this.match(modelicaParser.T__25);
	            this.state = 962;
	            this.named_arguments();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_argument() {
	    let localctx = new Named_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, modelicaParser.RULE_named_argument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 965;
	        this.match(modelicaParser.IDENT);
	        this.state = 966;
	        this.match(modelicaParser.T__19);
	        this.state = 967;
	        this.function_argument();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_argument() {
	    let localctx = new Function_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, modelicaParser.RULE_function_argument);
	    var _la = 0; // Token type
	    try {
	        this.state = 978;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case modelicaParser.T__16:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 969;
	            this.match(modelicaParser.T__16);
	            this.state = 970;
	            this.name();
	            this.state = 971;
	            this.match(modelicaParser.T__21);
	            this.state = 973;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===modelicaParser.IDENT) {
	                this.state = 972;
	                this.named_arguments();
	            }

	            this.state = 975;
	            this.match(modelicaParser.T__23);
	            break;
	        case modelicaParser.T__17:
	        case modelicaParser.T__21:
	        case modelicaParser.T__24:
	        case modelicaParser.T__45:
	        case modelicaParser.T__48:
	        case modelicaParser.T__65:
	        case modelicaParser.T__72:
	        case modelicaParser.T__73:
	        case modelicaParser.T__74:
	        case modelicaParser.T__75:
	        case modelicaParser.T__81:
	        case modelicaParser.T__82:
	        case modelicaParser.T__83:
	        case modelicaParser.T__85:
	        case modelicaParser.T__86:
	        case modelicaParser.IDENT:
	        case modelicaParser.STRING:
	        case modelicaParser.UNSIGNED_NUMBER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 977;
	            this.expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	output_expression_list() {
	    let localctx = new Output_expression_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, modelicaParser.RULE_output_expression_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 981;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 18)) & ~0x1f) == 0 && ((1 << (_la - 18)) & ((1 << (modelicaParser.T__17 - 18)) | (1 << (modelicaParser.T__21 - 18)) | (1 << (modelicaParser.T__24 - 18)) | (1 << (modelicaParser.T__45 - 18)) | (1 << (modelicaParser.T__48 - 18)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (modelicaParser.T__65 - 66)) | (1 << (modelicaParser.T__72 - 66)) | (1 << (modelicaParser.T__73 - 66)) | (1 << (modelicaParser.T__74 - 66)) | (1 << (modelicaParser.T__75 - 66)) | (1 << (modelicaParser.T__81 - 66)) | (1 << (modelicaParser.T__82 - 66)) | (1 << (modelicaParser.T__83 - 66)) | (1 << (modelicaParser.T__85 - 66)) | (1 << (modelicaParser.T__86 - 66)) | (1 << (modelicaParser.IDENT - 66)) | (1 << (modelicaParser.STRING - 66)) | (1 << (modelicaParser.UNSIGNED_NUMBER - 66)))) !== 0)) {
	            this.state = 980;
	            this.expression();
	        }

	        this.state = 989;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===modelicaParser.T__25) {
	            this.state = 983;
	            this.match(modelicaParser.T__25);
	            this.state = 985;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 18)) & ~0x1f) == 0 && ((1 << (_la - 18)) & ((1 << (modelicaParser.T__17 - 18)) | (1 << (modelicaParser.T__21 - 18)) | (1 << (modelicaParser.T__24 - 18)) | (1 << (modelicaParser.T__45 - 18)) | (1 << (modelicaParser.T__48 - 18)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (modelicaParser.T__65 - 66)) | (1 << (modelicaParser.T__72 - 66)) | (1 << (modelicaParser.T__73 - 66)) | (1 << (modelicaParser.T__74 - 66)) | (1 << (modelicaParser.T__75 - 66)) | (1 << (modelicaParser.T__81 - 66)) | (1 << (modelicaParser.T__82 - 66)) | (1 << (modelicaParser.T__83 - 66)) | (1 << (modelicaParser.T__85 - 66)) | (1 << (modelicaParser.T__86 - 66)) | (1 << (modelicaParser.IDENT - 66)) | (1 << (modelicaParser.STRING - 66)) | (1 << (modelicaParser.UNSIGNED_NUMBER - 66)))) !== 0)) {
	                this.state = 984;
	                this.expression();
	            }

	            this.state = 991;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression_list() {
	    let localctx = new Expression_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, modelicaParser.RULE_expression_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 992;
	        this.expression();
	        this.state = 997;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===modelicaParser.T__25) {
	            this.state = 993;
	            this.match(modelicaParser.T__25);
	            this.state = 994;
	            this.expression();
	            this.state = 999;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_subscripts() {
	    let localctx = new Array_subscriptsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, modelicaParser.RULE_array_subscripts);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1000;
	        this.match(modelicaParser.T__83);
	        this.state = 1001;
	        this.subscript_();
	        this.state = 1006;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===modelicaParser.T__25) {
	            this.state = 1002;
	            this.match(modelicaParser.T__25);
	            this.state = 1003;
	            this.subscript_();
	            this.state = 1008;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1009;
	        this.match(modelicaParser.T__84);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subscript_() {
	    let localctx = new Subscript_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, modelicaParser.RULE_subscript_);
	    try {
	        this.state = 1013;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case modelicaParser.T__22:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1011;
	            this.match(modelicaParser.T__22);
	            break;
	        case modelicaParser.T__17:
	        case modelicaParser.T__21:
	        case modelicaParser.T__24:
	        case modelicaParser.T__45:
	        case modelicaParser.T__48:
	        case modelicaParser.T__65:
	        case modelicaParser.T__72:
	        case modelicaParser.T__73:
	        case modelicaParser.T__74:
	        case modelicaParser.T__75:
	        case modelicaParser.T__81:
	        case modelicaParser.T__82:
	        case modelicaParser.T__83:
	        case modelicaParser.T__85:
	        case modelicaParser.T__86:
	        case modelicaParser.IDENT:
	        case modelicaParser.STRING:
	        case modelicaParser.UNSIGNED_NUMBER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1012;
	            this.expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comment() {
	    let localctx = new CommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, modelicaParser.RULE_comment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1015;
	        this.string_comment();
	        this.state = 1017;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.T__87) {
	            this.state = 1016;
	            this.annotation();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string_comment() {
	    let localctx = new String_commentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, modelicaParser.RULE_string_comment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1027;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===modelicaParser.STRING) {
	            this.state = 1019;
	            this.match(modelicaParser.STRING);
	            this.state = 1024;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===modelicaParser.T__72) {
	                this.state = 1020;
	                this.match(modelicaParser.T__72);
	                this.state = 1021;
	                this.match(modelicaParser.STRING);
	                this.state = 1026;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation() {
	    let localctx = new AnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, modelicaParser.RULE_annotation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1029;
	        this.match(modelicaParser.T__87);
	        this.state = 1030;
	        this.class_modification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

modelicaParser.EOF = antlr4.Token.EOF;
modelicaParser.T__0 = 1;
modelicaParser.T__1 = 2;
modelicaParser.T__2 = 3;
modelicaParser.T__3 = 4;
modelicaParser.T__4 = 5;
modelicaParser.T__5 = 6;
modelicaParser.T__6 = 7;
modelicaParser.T__7 = 8;
modelicaParser.T__8 = 9;
modelicaParser.T__9 = 10;
modelicaParser.T__10 = 11;
modelicaParser.T__11 = 12;
modelicaParser.T__12 = 13;
modelicaParser.T__13 = 14;
modelicaParser.T__14 = 15;
modelicaParser.T__15 = 16;
modelicaParser.T__16 = 17;
modelicaParser.T__17 = 18;
modelicaParser.T__18 = 19;
modelicaParser.T__19 = 20;
modelicaParser.T__20 = 21;
modelicaParser.T__21 = 22;
modelicaParser.T__22 = 23;
modelicaParser.T__23 = 24;
modelicaParser.T__24 = 25;
modelicaParser.T__25 = 26;
modelicaParser.T__26 = 27;
modelicaParser.T__27 = 28;
modelicaParser.T__28 = 29;
modelicaParser.T__29 = 30;
modelicaParser.T__30 = 31;
modelicaParser.T__31 = 32;
modelicaParser.T__32 = 33;
modelicaParser.T__33 = 34;
modelicaParser.T__34 = 35;
modelicaParser.T__35 = 36;
modelicaParser.T__36 = 37;
modelicaParser.T__37 = 38;
modelicaParser.T__38 = 39;
modelicaParser.T__39 = 40;
modelicaParser.T__40 = 41;
modelicaParser.T__41 = 42;
modelicaParser.T__42 = 43;
modelicaParser.T__43 = 44;
modelicaParser.T__44 = 45;
modelicaParser.T__45 = 46;
modelicaParser.T__46 = 47;
modelicaParser.T__47 = 48;
modelicaParser.T__48 = 49;
modelicaParser.T__49 = 50;
modelicaParser.T__50 = 51;
modelicaParser.T__51 = 52;
modelicaParser.T__52 = 53;
modelicaParser.T__53 = 54;
modelicaParser.T__54 = 55;
modelicaParser.T__55 = 56;
modelicaParser.T__56 = 57;
modelicaParser.T__57 = 58;
modelicaParser.T__58 = 59;
modelicaParser.T__59 = 60;
modelicaParser.T__60 = 61;
modelicaParser.T__61 = 62;
modelicaParser.T__62 = 63;
modelicaParser.T__63 = 64;
modelicaParser.T__64 = 65;
modelicaParser.T__65 = 66;
modelicaParser.T__66 = 67;
modelicaParser.T__67 = 68;
modelicaParser.T__68 = 69;
modelicaParser.T__69 = 70;
modelicaParser.T__70 = 71;
modelicaParser.T__71 = 72;
modelicaParser.T__72 = 73;
modelicaParser.T__73 = 74;
modelicaParser.T__74 = 75;
modelicaParser.T__75 = 76;
modelicaParser.T__76 = 77;
modelicaParser.T__77 = 78;
modelicaParser.T__78 = 79;
modelicaParser.T__79 = 80;
modelicaParser.T__80 = 81;
modelicaParser.T__81 = 82;
modelicaParser.T__82 = 83;
modelicaParser.T__83 = 84;
modelicaParser.T__84 = 85;
modelicaParser.T__85 = 86;
modelicaParser.T__86 = 87;
modelicaParser.T__87 = 88;
modelicaParser.IDENT = 89;
modelicaParser.STRING = 90;
modelicaParser.UNSIGNED_NUMBER = 91;
modelicaParser.WS = 92;
modelicaParser.COMMENT = 93;
modelicaParser.LINE_COMMENT = 94;

modelicaParser.RULE_stored_definition = 0;
modelicaParser.RULE_class_definition = 1;
modelicaParser.RULE_class_specifier = 2;
modelicaParser.RULE_class_prefixes = 3;
modelicaParser.RULE_long_class_specifier = 4;
modelicaParser.RULE_short_class_specifier = 5;
modelicaParser.RULE_der_class_specifier = 6;
modelicaParser.RULE_base_prefix = 7;
modelicaParser.RULE_enum_list = 8;
modelicaParser.RULE_enumeration_literal = 9;
modelicaParser.RULE_composition = 10;
modelicaParser.RULE_language_specification = 11;
modelicaParser.RULE_external_function_call = 12;
modelicaParser.RULE_element_list = 13;
modelicaParser.RULE_element = 14;
modelicaParser.RULE_import_clause = 15;
modelicaParser.RULE_import_list = 16;
modelicaParser.RULE_extends_clause = 17;
modelicaParser.RULE_constraining_clause = 18;
modelicaParser.RULE_component_clause = 19;
modelicaParser.RULE_type_prefix = 20;
modelicaParser.RULE_type_specifier = 21;
modelicaParser.RULE_component_list = 22;
modelicaParser.RULE_component_declaration = 23;
modelicaParser.RULE_condition_attribute = 24;
modelicaParser.RULE_declaration = 25;
modelicaParser.RULE_modification = 26;
modelicaParser.RULE_class_modification = 27;
modelicaParser.RULE_argument_list = 28;
modelicaParser.RULE_argument = 29;
modelicaParser.RULE_element_modification_or_replaceable = 30;
modelicaParser.RULE_element_modification = 31;
modelicaParser.RULE_element_redeclaration = 32;
modelicaParser.RULE_element_replaceable = 33;
modelicaParser.RULE_component_clause1 = 34;
modelicaParser.RULE_component_declaration1 = 35;
modelicaParser.RULE_short_class_definition = 36;
modelicaParser.RULE_equation_section = 37;
modelicaParser.RULE_algorithm_section = 38;
modelicaParser.RULE_equation = 39;
modelicaParser.RULE_statement = 40;
modelicaParser.RULE_if_equation = 41;
modelicaParser.RULE_if_statement = 42;
modelicaParser.RULE_for_equation = 43;
modelicaParser.RULE_for_statement = 44;
modelicaParser.RULE_for_indices = 45;
modelicaParser.RULE_for_index = 46;
modelicaParser.RULE_while_statement = 47;
modelicaParser.RULE_when_equation = 48;
modelicaParser.RULE_when_statement = 49;
modelicaParser.RULE_connect_clause = 50;
modelicaParser.RULE_expression = 51;
modelicaParser.RULE_simple_expression = 52;
modelicaParser.RULE_logical_expression = 53;
modelicaParser.RULE_logical_term = 54;
modelicaParser.RULE_logical_factor = 55;
modelicaParser.RULE_relation = 56;
modelicaParser.RULE_rel_op = 57;
modelicaParser.RULE_arithmetic_expression = 58;
modelicaParser.RULE_add_op = 59;
modelicaParser.RULE_term = 60;
modelicaParser.RULE_mul_op = 61;
modelicaParser.RULE_factor = 62;
modelicaParser.RULE_primary = 63;
modelicaParser.RULE_name = 64;
modelicaParser.RULE_component_reference = 65;
modelicaParser.RULE_function_call_args = 66;
modelicaParser.RULE_function_arguments = 67;
modelicaParser.RULE_named_arguments = 68;
modelicaParser.RULE_named_argument = 69;
modelicaParser.RULE_function_argument = 70;
modelicaParser.RULE_output_expression_list = 71;
modelicaParser.RULE_expression_list = 72;
modelicaParser.RULE_array_subscripts = 73;
modelicaParser.RULE_subscript_ = 74;
modelicaParser.RULE_comment = 75;
modelicaParser.RULE_string_comment = 76;
modelicaParser.RULE_annotation = 77;

class Stored_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_stored_definition;
    }

	class_definition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Class_definitionContext);
	    } else {
	        return this.getTypedRuleContext(Class_definitionContext,i);
	    }
	};

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterStored_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitStored_definition(this);
		}
	}


}



class Class_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_class_definition;
    }

	class_prefixes() {
	    return this.getTypedRuleContext(Class_prefixesContext,0);
	};

	class_specifier() {
	    return this.getTypedRuleContext(Class_specifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterClass_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitClass_definition(this);
		}
	}


}



class Class_specifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_class_specifier;
    }

	long_class_specifier() {
	    return this.getTypedRuleContext(Long_class_specifierContext,0);
	};

	short_class_specifier() {
	    return this.getTypedRuleContext(Short_class_specifierContext,0);
	};

	der_class_specifier() {
	    return this.getTypedRuleContext(Der_class_specifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterClass_specifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitClass_specifier(this);
		}
	}


}



class Class_prefixesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_class_prefixes;
    }


	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterClass_prefixes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitClass_prefixes(this);
		}
	}


}



class Long_class_specifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_long_class_specifier;
    }

	IDENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(modelicaParser.IDENT);
	    } else {
	        return this.getToken(modelicaParser.IDENT, i);
	    }
	};


	string_comment() {
	    return this.getTypedRuleContext(String_commentContext,0);
	};

	composition() {
	    return this.getTypedRuleContext(CompositionContext,0);
	};

	class_modification() {
	    return this.getTypedRuleContext(Class_modificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterLong_class_specifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitLong_class_specifier(this);
		}
	}


}



class Short_class_specifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_short_class_specifier;
    }

	IDENT() {
	    return this.getToken(modelicaParser.IDENT, 0);
	};

	base_prefix() {
	    return this.getTypedRuleContext(Base_prefixContext,0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	array_subscripts() {
	    return this.getTypedRuleContext(Array_subscriptsContext,0);
	};

	class_modification() {
	    return this.getTypedRuleContext(Class_modificationContext,0);
	};

	enum_list() {
	    return this.getTypedRuleContext(Enum_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterShort_class_specifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitShort_class_specifier(this);
		}
	}


}



class Der_class_specifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_der_class_specifier;
    }

	IDENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(modelicaParser.IDENT);
	    } else {
	        return this.getToken(modelicaParser.IDENT, i);
	    }
	};


	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterDer_class_specifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitDer_class_specifier(this);
		}
	}


}



class Base_prefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_base_prefix;
    }

	type_prefix() {
	    return this.getTypedRuleContext(Type_prefixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterBase_prefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitBase_prefix(this);
		}
	}


}



class Enum_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_enum_list;
    }

	enumeration_literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Enumeration_literalContext);
	    } else {
	        return this.getTypedRuleContext(Enumeration_literalContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterEnum_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitEnum_list(this);
		}
	}


}



class Enumeration_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_enumeration_literal;
    }

	IDENT() {
	    return this.getToken(modelicaParser.IDENT, 0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterEnumeration_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitEnumeration_literal(this);
		}
	}


}



class CompositionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_composition;
    }

	element_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Element_listContext);
	    } else {
	        return this.getTypedRuleContext(Element_listContext,i);
	    }
	};

	equation_section = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Equation_sectionContext);
	    } else {
	        return this.getTypedRuleContext(Equation_sectionContext,i);
	    }
	};

	algorithm_section = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Algorithm_sectionContext);
	    } else {
	        return this.getTypedRuleContext(Algorithm_sectionContext,i);
	    }
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	language_specification() {
	    return this.getTypedRuleContext(Language_specificationContext,0);
	};

	external_function_call() {
	    return this.getTypedRuleContext(External_function_callContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterComposition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitComposition(this);
		}
	}


}



class Language_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_language_specification;
    }

	STRING() {
	    return this.getToken(modelicaParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterLanguage_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitLanguage_specification(this);
		}
	}


}



class External_function_callContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_external_function_call;
    }

	IDENT() {
	    return this.getToken(modelicaParser.IDENT, 0);
	};

	component_reference() {
	    return this.getTypedRuleContext(Component_referenceContext,0);
	};

	expression_list() {
	    return this.getTypedRuleContext(Expression_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterExternal_function_call(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitExternal_function_call(this);
		}
	}


}



class Element_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_element_list;
    }

	element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementContext);
	    } else {
	        return this.getTypedRuleContext(ElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterElement_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitElement_list(this);
		}
	}


}



class ElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_element;
    }

	import_clause() {
	    return this.getTypedRuleContext(Import_clauseContext,0);
	};

	extends_clause() {
	    return this.getTypedRuleContext(Extends_clauseContext,0);
	};

	class_definition() {
	    return this.getTypedRuleContext(Class_definitionContext,0);
	};

	component_clause() {
	    return this.getTypedRuleContext(Component_clauseContext,0);
	};

	constraining_clause() {
	    return this.getTypedRuleContext(Constraining_clauseContext,0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitElement(this);
		}
	}


}



class Import_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_import_clause;
    }

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	IDENT() {
	    return this.getToken(modelicaParser.IDENT, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	import_list() {
	    return this.getTypedRuleContext(Import_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterImport_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitImport_clause(this);
		}
	}


}



class Import_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_import_list;
    }

	IDENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(modelicaParser.IDENT);
	    } else {
	        return this.getToken(modelicaParser.IDENT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterImport_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitImport_list(this);
		}
	}


}



class Extends_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_extends_clause;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	class_modification() {
	    return this.getTypedRuleContext(Class_modificationContext,0);
	};

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterExtends_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitExtends_clause(this);
		}
	}


}



class Constraining_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_constraining_clause;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	class_modification() {
	    return this.getTypedRuleContext(Class_modificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterConstraining_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitConstraining_clause(this);
		}
	}


}



class Component_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_component_clause;
    }

	type_prefix() {
	    return this.getTypedRuleContext(Type_prefixContext,0);
	};

	type_specifier() {
	    return this.getTypedRuleContext(Type_specifierContext,0);
	};

	component_list() {
	    return this.getTypedRuleContext(Component_listContext,0);
	};

	array_subscripts() {
	    return this.getTypedRuleContext(Array_subscriptsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterComponent_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitComponent_clause(this);
		}
	}


}



class Type_prefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_type_prefix;
    }


	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterType_prefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitType_prefix(this);
		}
	}


}



class Type_specifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_type_specifier;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterType_specifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitType_specifier(this);
		}
	}


}



class Component_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_component_list;
    }

	component_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Component_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Component_declarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterComponent_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitComponent_list(this);
		}
	}


}



class Component_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_component_declaration;
    }

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	condition_attribute() {
	    return this.getTypedRuleContext(Condition_attributeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterComponent_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitComponent_declaration(this);
		}
	}


}



class Condition_attributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_condition_attribute;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterCondition_attribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitCondition_attribute(this);
		}
	}


}



class DeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_declaration;
    }

	IDENT() {
	    return this.getToken(modelicaParser.IDENT, 0);
	};

	array_subscripts() {
	    return this.getTypedRuleContext(Array_subscriptsContext,0);
	};

	modification() {
	    return this.getTypedRuleContext(ModificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitDeclaration(this);
		}
	}


}



class ModificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_modification;
    }

	class_modification() {
	    return this.getTypedRuleContext(Class_modificationContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterModification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitModification(this);
		}
	}


}



class Class_modificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_class_modification;
    }

	argument_list() {
	    return this.getTypedRuleContext(Argument_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterClass_modification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitClass_modification(this);
		}
	}


}



class Argument_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_argument_list;
    }

	argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterArgument_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitArgument_list(this);
		}
	}


}



class ArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_argument;
    }

	element_modification_or_replaceable() {
	    return this.getTypedRuleContext(Element_modification_or_replaceableContext,0);
	};

	element_redeclaration() {
	    return this.getTypedRuleContext(Element_redeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitArgument(this);
		}
	}


}



class Element_modification_or_replaceableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_element_modification_or_replaceable;
    }

	element_modification() {
	    return this.getTypedRuleContext(Element_modificationContext,0);
	};

	element_replaceable() {
	    return this.getTypedRuleContext(Element_replaceableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterElement_modification_or_replaceable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitElement_modification_or_replaceable(this);
		}
	}


}



class Element_modificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_element_modification;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	string_comment() {
	    return this.getTypedRuleContext(String_commentContext,0);
	};

	modification() {
	    return this.getTypedRuleContext(ModificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterElement_modification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitElement_modification(this);
		}
	}


}



class Element_redeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_element_redeclaration;
    }

	element_replaceable() {
	    return this.getTypedRuleContext(Element_replaceableContext,0);
	};

	short_class_definition() {
	    return this.getTypedRuleContext(Short_class_definitionContext,0);
	};

	component_clause1() {
	    return this.getTypedRuleContext(Component_clause1Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterElement_redeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitElement_redeclaration(this);
		}
	}


}



class Element_replaceableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_element_replaceable;
    }

	short_class_definition() {
	    return this.getTypedRuleContext(Short_class_definitionContext,0);
	};

	component_clause1() {
	    return this.getTypedRuleContext(Component_clause1Context,0);
	};

	constraining_clause() {
	    return this.getTypedRuleContext(Constraining_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterElement_replaceable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitElement_replaceable(this);
		}
	}


}



class Component_clause1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_component_clause1;
    }

	type_prefix() {
	    return this.getTypedRuleContext(Type_prefixContext,0);
	};

	type_specifier() {
	    return this.getTypedRuleContext(Type_specifierContext,0);
	};

	component_declaration1() {
	    return this.getTypedRuleContext(Component_declaration1Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterComponent_clause1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitComponent_clause1(this);
		}
	}


}



class Component_declaration1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_component_declaration1;
    }

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterComponent_declaration1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitComponent_declaration1(this);
		}
	}


}



class Short_class_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_short_class_definition;
    }

	class_prefixes() {
	    return this.getTypedRuleContext(Class_prefixesContext,0);
	};

	short_class_specifier() {
	    return this.getTypedRuleContext(Short_class_specifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterShort_class_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitShort_class_definition(this);
		}
	}


}



class Equation_sectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_equation_section;
    }

	equation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EquationContext);
	    } else {
	        return this.getTypedRuleContext(EquationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterEquation_section(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitEquation_section(this);
		}
	}


}



class Algorithm_sectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_algorithm_section;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterAlgorithm_section(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitAlgorithm_section(this);
		}
	}


}



class EquationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_equation;
    }

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	simple_expression() {
	    return this.getTypedRuleContext(Simple_expressionContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	if_equation() {
	    return this.getTypedRuleContext(If_equationContext,0);
	};

	for_equation() {
	    return this.getTypedRuleContext(For_equationContext,0);
	};

	connect_clause() {
	    return this.getTypedRuleContext(Connect_clauseContext,0);
	};

	when_equation() {
	    return this.getTypedRuleContext(When_equationContext,0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	function_call_args() {
	    return this.getTypedRuleContext(Function_call_argsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterEquation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitEquation(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_statement;
    }

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	component_reference() {
	    return this.getTypedRuleContext(Component_referenceContext,0);
	};

	output_expression_list() {
	    return this.getTypedRuleContext(Output_expression_listContext,0);
	};

	function_call_args() {
	    return this.getTypedRuleContext(Function_call_argsContext,0);
	};

	if_statement() {
	    return this.getTypedRuleContext(If_statementContext,0);
	};

	for_statement() {
	    return this.getTypedRuleContext(For_statementContext,0);
	};

	while_statement() {
	    return this.getTypedRuleContext(While_statementContext,0);
	};

	when_statement() {
	    return this.getTypedRuleContext(When_statementContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitStatement(this);
		}
	}


}



class If_equationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_if_equation;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	equation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EquationContext);
	    } else {
	        return this.getTypedRuleContext(EquationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterIf_equation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitIf_equation(this);
		}
	}


}



class If_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_if_statement;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterIf_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitIf_statement(this);
		}
	}


}



class For_equationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_for_equation;
    }

	for_indices() {
	    return this.getTypedRuleContext(For_indicesContext,0);
	};

	equation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EquationContext);
	    } else {
	        return this.getTypedRuleContext(EquationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterFor_equation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitFor_equation(this);
		}
	}


}



class For_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_for_statement;
    }

	for_indices() {
	    return this.getTypedRuleContext(For_indicesContext,0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterFor_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitFor_statement(this);
		}
	}


}



class For_indicesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_for_indices;
    }

	for_index = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(For_indexContext);
	    } else {
	        return this.getTypedRuleContext(For_indexContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterFor_indices(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitFor_indices(this);
		}
	}


}



class For_indexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_for_index;
    }

	IDENT() {
	    return this.getToken(modelicaParser.IDENT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterFor_index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitFor_index(this);
		}
	}


}



class While_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_while_statement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterWhile_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitWhile_statement(this);
		}
	}


}



class When_equationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_when_equation;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	equation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EquationContext);
	    } else {
	        return this.getTypedRuleContext(EquationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterWhen_equation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitWhen_equation(this);
		}
	}


}



class When_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_when_statement;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterWhen_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitWhen_statement(this);
		}
	}


}



class Connect_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_connect_clause;
    }

	component_reference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Component_referenceContext);
	    } else {
	        return this.getTypedRuleContext(Component_referenceContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterConnect_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitConnect_clause(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_expression;
    }

	simple_expression() {
	    return this.getTypedRuleContext(Simple_expressionContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitExpression(this);
		}
	}


}



class Simple_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_simple_expression;
    }

	logical_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Logical_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Logical_expressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterSimple_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitSimple_expression(this);
		}
	}


}



class Logical_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_logical_expression;
    }

	logical_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Logical_termContext);
	    } else {
	        return this.getTypedRuleContext(Logical_termContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterLogical_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitLogical_expression(this);
		}
	}


}



class Logical_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_logical_term;
    }

	logical_factor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Logical_factorContext);
	    } else {
	        return this.getTypedRuleContext(Logical_factorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterLogical_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitLogical_term(this);
		}
	}


}



class Logical_factorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_logical_factor;
    }

	relation() {
	    return this.getTypedRuleContext(RelationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterLogical_factor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitLogical_factor(this);
		}
	}


}



class RelationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_relation;
    }

	arithmetic_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Arithmetic_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Arithmetic_expressionContext,i);
	    }
	};

	rel_op() {
	    return this.getTypedRuleContext(Rel_opContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterRelation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitRelation(this);
		}
	}


}



class Rel_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_rel_op;
    }


	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterRel_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitRel_op(this);
		}
	}


}



class Arithmetic_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_arithmetic_expression;
    }

	term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermContext);
	    } else {
	        return this.getTypedRuleContext(TermContext,i);
	    }
	};

	add_op = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Add_opContext);
	    } else {
	        return this.getTypedRuleContext(Add_opContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterArithmetic_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitArithmetic_expression(this);
		}
	}


}



class Add_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_add_op;
    }


	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterAdd_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitAdd_op(this);
		}
	}


}



class TermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_term;
    }

	factor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FactorContext);
	    } else {
	        return this.getTypedRuleContext(FactorContext,i);
	    }
	};

	mul_op = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Mul_opContext);
	    } else {
	        return this.getTypedRuleContext(Mul_opContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitTerm(this);
		}
	}


}



class Mul_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_mul_op;
    }


	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterMul_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitMul_op(this);
		}
	}


}



class FactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_factor;
    }

	primary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrimaryContext);
	    } else {
	        return this.getTypedRuleContext(PrimaryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitFactor(this);
		}
	}


}



class PrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_primary;
    }

	UNSIGNED_NUMBER() {
	    return this.getToken(modelicaParser.UNSIGNED_NUMBER, 0);
	};

	STRING() {
	    return this.getToken(modelicaParser.STRING, 0);
	};

	function_call_args() {
	    return this.getTypedRuleContext(Function_call_argsContext,0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	component_reference() {
	    return this.getTypedRuleContext(Component_referenceContext,0);
	};

	output_expression_list() {
	    return this.getTypedRuleContext(Output_expression_listContext,0);
	};

	expression_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression_listContext);
	    } else {
	        return this.getTypedRuleContext(Expression_listContext,i);
	    }
	};

	function_arguments() {
	    return this.getTypedRuleContext(Function_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitPrimary(this);
		}
	}


}



class NameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_name;
    }

	IDENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(modelicaParser.IDENT);
	    } else {
	        return this.getToken(modelicaParser.IDENT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitName(this);
		}
	}


}



class Component_referenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_component_reference;
    }

	IDENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(modelicaParser.IDENT);
	    } else {
	        return this.getToken(modelicaParser.IDENT, i);
	    }
	};


	array_subscripts = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Array_subscriptsContext);
	    } else {
	        return this.getTypedRuleContext(Array_subscriptsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterComponent_reference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitComponent_reference(this);
		}
	}


}



class Function_call_argsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_function_call_args;
    }

	function_arguments() {
	    return this.getTypedRuleContext(Function_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterFunction_call_args(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitFunction_call_args(this);
		}
	}


}



class Function_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_function_arguments;
    }

	function_argument() {
	    return this.getTypedRuleContext(Function_argumentContext,0);
	};

	function_arguments() {
	    return this.getTypedRuleContext(Function_argumentsContext,0);
	};

	for_indices() {
	    return this.getTypedRuleContext(For_indicesContext,0);
	};

	named_arguments() {
	    return this.getTypedRuleContext(Named_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterFunction_arguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitFunction_arguments(this);
		}
	}


}



class Named_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_named_arguments;
    }

	named_argument() {
	    return this.getTypedRuleContext(Named_argumentContext,0);
	};

	named_arguments() {
	    return this.getTypedRuleContext(Named_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterNamed_arguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitNamed_arguments(this);
		}
	}


}



class Named_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_named_argument;
    }

	IDENT() {
	    return this.getToken(modelicaParser.IDENT, 0);
	};

	function_argument() {
	    return this.getTypedRuleContext(Function_argumentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterNamed_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitNamed_argument(this);
		}
	}


}



class Function_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_function_argument;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	named_arguments() {
	    return this.getTypedRuleContext(Named_argumentsContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterFunction_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitFunction_argument(this);
		}
	}


}



class Output_expression_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_output_expression_list;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterOutput_expression_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitOutput_expression_list(this);
		}
	}


}



class Expression_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_expression_list;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterExpression_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitExpression_list(this);
		}
	}


}



class Array_subscriptsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_array_subscripts;
    }

	subscript_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Subscript_Context);
	    } else {
	        return this.getTypedRuleContext(Subscript_Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterArray_subscripts(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitArray_subscripts(this);
		}
	}


}



class Subscript_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_subscript_;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterSubscript_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitSubscript_(this);
		}
	}


}



class CommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_comment;
    }

	string_comment() {
	    return this.getTypedRuleContext(String_commentContext,0);
	};

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitComment(this);
		}
	}


}



class String_commentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_string_comment;
    }

	STRING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(modelicaParser.STRING);
	    } else {
	        return this.getToken(modelicaParser.STRING, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterString_comment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitString_comment(this);
		}
	}


}



class AnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = modelicaParser.RULE_annotation;
    }

	class_modification() {
	    return this.getTypedRuleContext(Class_modificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.enterAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof modelicaListener ) {
	        listener.exitAnnotation(this);
		}
	}


}




modelicaParser.Stored_definitionContext = Stored_definitionContext; 
modelicaParser.Class_definitionContext = Class_definitionContext; 
modelicaParser.Class_specifierContext = Class_specifierContext; 
modelicaParser.Class_prefixesContext = Class_prefixesContext; 
modelicaParser.Long_class_specifierContext = Long_class_specifierContext; 
modelicaParser.Short_class_specifierContext = Short_class_specifierContext; 
modelicaParser.Der_class_specifierContext = Der_class_specifierContext; 
modelicaParser.Base_prefixContext = Base_prefixContext; 
modelicaParser.Enum_listContext = Enum_listContext; 
modelicaParser.Enumeration_literalContext = Enumeration_literalContext; 
modelicaParser.CompositionContext = CompositionContext; 
modelicaParser.Language_specificationContext = Language_specificationContext; 
modelicaParser.External_function_callContext = External_function_callContext; 
modelicaParser.Element_listContext = Element_listContext; 
modelicaParser.ElementContext = ElementContext; 
modelicaParser.Import_clauseContext = Import_clauseContext; 
modelicaParser.Import_listContext = Import_listContext; 
modelicaParser.Extends_clauseContext = Extends_clauseContext; 
modelicaParser.Constraining_clauseContext = Constraining_clauseContext; 
modelicaParser.Component_clauseContext = Component_clauseContext; 
modelicaParser.Type_prefixContext = Type_prefixContext; 
modelicaParser.Type_specifierContext = Type_specifierContext; 
modelicaParser.Component_listContext = Component_listContext; 
modelicaParser.Component_declarationContext = Component_declarationContext; 
modelicaParser.Condition_attributeContext = Condition_attributeContext; 
modelicaParser.DeclarationContext = DeclarationContext; 
modelicaParser.ModificationContext = ModificationContext; 
modelicaParser.Class_modificationContext = Class_modificationContext; 
modelicaParser.Argument_listContext = Argument_listContext; 
modelicaParser.ArgumentContext = ArgumentContext; 
modelicaParser.Element_modification_or_replaceableContext = Element_modification_or_replaceableContext; 
modelicaParser.Element_modificationContext = Element_modificationContext; 
modelicaParser.Element_redeclarationContext = Element_redeclarationContext; 
modelicaParser.Element_replaceableContext = Element_replaceableContext; 
modelicaParser.Component_clause1Context = Component_clause1Context; 
modelicaParser.Component_declaration1Context = Component_declaration1Context; 
modelicaParser.Short_class_definitionContext = Short_class_definitionContext; 
modelicaParser.Equation_sectionContext = Equation_sectionContext; 
modelicaParser.Algorithm_sectionContext = Algorithm_sectionContext; 
modelicaParser.EquationContext = EquationContext; 
modelicaParser.StatementContext = StatementContext; 
modelicaParser.If_equationContext = If_equationContext; 
modelicaParser.If_statementContext = If_statementContext; 
modelicaParser.For_equationContext = For_equationContext; 
modelicaParser.For_statementContext = For_statementContext; 
modelicaParser.For_indicesContext = For_indicesContext; 
modelicaParser.For_indexContext = For_indexContext; 
modelicaParser.While_statementContext = While_statementContext; 
modelicaParser.When_equationContext = When_equationContext; 
modelicaParser.When_statementContext = When_statementContext; 
modelicaParser.Connect_clauseContext = Connect_clauseContext; 
modelicaParser.ExpressionContext = ExpressionContext; 
modelicaParser.Simple_expressionContext = Simple_expressionContext; 
modelicaParser.Logical_expressionContext = Logical_expressionContext; 
modelicaParser.Logical_termContext = Logical_termContext; 
modelicaParser.Logical_factorContext = Logical_factorContext; 
modelicaParser.RelationContext = RelationContext; 
modelicaParser.Rel_opContext = Rel_opContext; 
modelicaParser.Arithmetic_expressionContext = Arithmetic_expressionContext; 
modelicaParser.Add_opContext = Add_opContext; 
modelicaParser.TermContext = TermContext; 
modelicaParser.Mul_opContext = Mul_opContext; 
modelicaParser.FactorContext = FactorContext; 
modelicaParser.PrimaryContext = PrimaryContext; 
modelicaParser.NameContext = NameContext; 
modelicaParser.Component_referenceContext = Component_referenceContext; 
modelicaParser.Function_call_argsContext = Function_call_argsContext; 
modelicaParser.Function_argumentsContext = Function_argumentsContext; 
modelicaParser.Named_argumentsContext = Named_argumentsContext; 
modelicaParser.Named_argumentContext = Named_argumentContext; 
modelicaParser.Function_argumentContext = Function_argumentContext; 
modelicaParser.Output_expression_listContext = Output_expression_listContext; 
modelicaParser.Expression_listContext = Expression_listContext; 
modelicaParser.Array_subscriptsContext = Array_subscriptsContext; 
modelicaParser.Subscript_Context = Subscript_Context; 
modelicaParser.CommentContext = CommentContext; 
modelicaParser.String_commentContext = String_commentContext; 
modelicaParser.AnnotationContext = AnnotationContext; 
